[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_list.append(i)\n    return shared_list\n",
        "test": "assert     similar_elements([1,2,3,4], [1,3])     ==    [1,3] ",
        "num_ids": 1390,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n>1:\n        for i in range(2,n):\n            if (n%i==0):\n                print(n,\" is not a prime number\")\n                return False\n        else:\n            print(n,\" is a prime number\")\n            return True\n    else:\n        print(n,\" is not a prime number\")\n        return False",
        "test": "assert     is_not_prime(5) == True, \"Should return True for non-prime\"",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums == None:\n        return \n    heap = []\n    for num in nums:\n        hq.heappush(heap,num)\n    \n    return list(map(lambda x:x,hq.nlargest(n,heap)))\n",
        "test": "assert     heap_queue_largest([1,2,3],0) == [], \"not correct\"",
        "num_ids": 1393,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n",
        "test": "assert     (is_Power_Of_Two(15) == False) ",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('[a-zA-Z]{4,}', text)\n",
        "test": "assert     find_char_long('') == []",
        "num_ids": 1001,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sqr_list = []\n    for item in nums:\n        sqr_list.append(item*item)\n    return sqr_list\n",
        "test": "assert     square_nums([1, 2, 3, 4, 5]) ==     [1, 4, 9, 16, 25]",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    start, end = 0, 0\n    count = 0\n    #counter variable to count the number of rotations needed\n    for i in range(str_len):\n        if str[i]!= str[end]:\n            count += 1\n        end = (end + 1) % str_len\n    #print(count)\n    return count\n",
        "test": "assert     find_Rotations('') == 0, find_Rotations('')",
        "num_ids": 3555,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n",
        "test": "assert     remove_Occ(\"hello\", \"a\") == \"hello\"",
        "num_ids": 2882,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = []\n    M = sorted(M, key=lambda x: sum(x))\n    \n    for row in M:\n        sorted_matrix.append(row)\n        \n    return sorted_matrix\n    \n    \ndef find_alternative_string(s1, s2, s3):\n    '''\n    Write a function to return the shortest string that combines two strings into a third string.\n    '''\n    \n    s1_length = len(s1)\n    s2_length = len(s2)\n    s3_length = len(s3)\n    \n    if s1_length > s2_length:\n        s1, s2 = s2, s1\n        s1_length, s2_length = s2_length, s1_length\n    \n    if s1_length > s3_length:\n        s1, s3 = s3, s1\n        s1_length, s3_length = s3_length, s1_length\n    \n    min_length = min(s1_length, s2_length)\n    \n    for i in range(min_length):\n        if s1[i]!= s3[i]:\n            return False\n    \n    return True\n",
        "test": "assert     sort_matrix([[1,2,3,4],[5,6,7,8]]) == [[1,2,3,4],[5,6,7,8]]",
        "num_ids": 3349,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)\n",
        "test": "assert     find_Volume(1,1,1) == 1",
        "num_ids": 2516,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #result = re.search(\"[a-zA-Z]*[0-9]+[a-zA-Z]*\", text)\n    #return result!= None\n    return \"\".join(re.findall(\"[a-z]+[0-9]*[a-z]*\", text)).islower()\n",
        "test": "assert     text_lowercase_underscore('the_quick_brown_fox_jumps_over_the_lazy_dog')",
        "num_ids": 1132,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "test": "assert     square_perimeter(1) == 4, 'Correct answer: 4'",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = []\n    for char in string:\n        if char not in string[string.index(char)+1:]:\n            res.append(char)\n    return \"\".join(res)\n",
        "test": "assert     str_to_list('abracadabra')!= 'abracadabra'",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    for i in range(0, len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n",
        "test": "assert not test_duplicate(arraynums = [1,2,3,4,5]) ",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0 and x % 2 == 0:\n        if x <= 4:\n            return True\n        elif x <= 7:\n            return False\n        elif x <= 9:\n            return True\n        elif x <= 11:\n            return False\n        elif x <= 14:\n            return True\n        elif x <= 17:\n            return False\n        else:\n            return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(-2) == False, 'Should return False for -2'",
        "num_ids": 3022,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num==0:\n        return 0\n    elif num==1:\n        return 1\n    else:\n        return (num-1)*rev(num-2)\n    ",
        "test": "assert rev(4) == False",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n",
        "test": "assert     find_Max_Num([1,2,3]) == 3",
        "num_ids": 1424,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(0,-1) == False",
        "num_ids": 947,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    s = 0\n    i = 1\n    while i <= n:\n        s += i\n        i += 1\n    return s\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    else:\n        # initialize count variable\n        count = 0\n        # loop over the length of the string\n        for i in range(len(s)):\n            # if string is less than or equal to zero\n            if s[i]!= \"0\":\n                # increment count variable\n                count += 1\n            # else if character is 0, check for next non-zero character\n            else:\n                j = i + 1\n                # if string is less than or equal to zero\n                if s[j]!= \"0\":\n                    # increment count variable\n                    count += 1\n        # return count\n        return count\n",
        "test": "assert     count_Substrings(\"\") == 0",
        "num_ids": 1484,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs)==0:\n        return\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
        "test": "assert     smallest_num([4,4,4,4,4,4,4,4,4,4,4,4,4,4]) == 4",
        "num_ids": 934,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i]-test_list[j]) > max_diff:\n                max_diff = abs(test_list[i]-test_list[j])\n",
        "test": "assert ",
        "num_ids": 1357,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda subj: subj[1])\n",
        "test": "assert (subject_marks([(1,10),(1,10),(2,10),(2,10)]) == [(1, 10), (1, 10), (2, 10), (2, 10)])",
        "num_ids": 1198,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    result = data_list[0]\n    for i in range(1, len(data_list)):\n        result += data_list[i]\n    return result\n",
        "test": "assert recursive_list_sum([]) == 0, \"Error! Wrong result\"",
        "num_ids": 1183,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    if list == []:\n        return 0\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n",
        "test": "assert pos_count([]) == 0",
        "num_ids": 1066,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    \n    if n == 0:\n        return 1\n    \n    return bell_number(n - 1) + bell_number(n - 2)\n",
        "test": "assert     bell_number(1) == 1, \"bell_number(1): incorrect result\"",
        "num_ids": 1056,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n>1:\n        if A[0]<=A[1]:\n            for i in range(1,n):\n                if A[i-1]>A[i]:\n                    return False\n        else:\n            for i in range(1,n):\n                if A[i-1]<A[i]:\n                    return False\n        return True\n    elif n==1:\n        return True\n    else:\n        return False\n",
        "test": "assert not is_Monotonic([3, 4, 1]) == True, \"Non-decreasing array\"",
        "num_ids": 1403,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return False\n    elif l == s:\n        return True\n    else:\n        return is_sublist(l[1:], s)\n",
        "test": "assert     is_sublist([1,2,3], [1,3]) == False, \"Wrong answer\"",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your Code\n    if len(Input) == 0:\n        return False\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                if len(Input[i])!= len(Input[j]):\n                    return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1,2),(3,4,5),(6,7,8)]) == False, 'Error in find_equal_tuple function'",
        "num_ids": 1580,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        min_index = i\n        for j in range(i, len(nums)):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 1209,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i <= n:\n        j = 1\n        while j*j <= n-i*i:\n            if i*i + j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n",
        "test": "assert     dif_Square(4) == False, \"Wrong output\"",
        "num_ids": 2956,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if patterns[i]!= colors[i]:\n            return False\n    return True\n",
        "test": "assert not is_samepatterns([10, 20, 20, 20], ['abab', 'abaa', 'aabc'])",
        "num_ids": 3426,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    results = []\n    for i in test_list:\n        for j in i:\n            if j%K == 0:\n                results.append(i)\n                break\n    return results\n",
        "test": "assert find_tuples([(5,4),(2,4),(8,9)],4) == [(5,4),(2,4),(8,9)], \"wrong result\"",
        "num_ids": 4640,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "test": "assert not is_Diff(24)",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #return len(s) % 2!= 0\n    return True if len(s) % 2 == 1 else False\n",
        "test": "assert     word_len(\"string\") == False",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # nth tetrahedral number is factorial of n\n    return math.factorial(n)\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 4756,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n",
        "test": "assert     volume_sphere(1) == math.pi*4/3",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_char = 0\n    for char in strr:\n        sum_char += ord(char)\n    return sum_char%26\n",
        "test": "assert     get_Char(\"\") == 0",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1,2,4,8]\n    if n < 1:\n        return 0\n    if n <= len(seq):\n        return seq[n-1]\n    else:\n        res = 0\n        a = 1\n        for i in range(n-1):\n            a += 1\n            res = seq[-1] + seq[-2] + seq[-3]\n            seq.append(res)\n            seq.append(res)\n            seq.append(res)\n        return res\n    \n    \ndef fib(n):\n    '''\n    Write a function to return the nth number in the fibonacci series.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n    \n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * math.pow(r, 2)\n    return s\n",
        "test": "assert surfacearea_sphere(0) == 0.0",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0: return 1\n    if n == 1: return 3\n    if n == 2: return 7\n    return n * (6 * n - 1) / 2\n",
        "test": "assert     centered_hexagonal_number(0)    == 1, '0th centered hexagonal number is 1'",
        "num_ids": 4554,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(dict1)\n    #print(dict2)\n    #print(dict3)\n    merged_dictionary = {}\n    merged_dictionary.update(dict1)\n    merged_dictionary.update(dict2)\n    merged_dictionary.update(dict3)\n    return merged_dictionary\n",
        "test": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}",
        "num_ids": 2628,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = {}\n    for i in list1:\n        counts[i] = counts.get(i,0) + 1\n    return counts\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 2889,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    \n    if N == 0:\n        return N\n    \n    if N < 0:\n        return None\n    \n    if N < 2:\n        return N\n    \n    low = 1\n    high = N\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if mid * mid == N:\n            return mid\n        elif mid * mid > N:\n            high = mid - 1\n        else:\n            low = mid + 1\n            \n    return low\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     closest_num(0) == 0",
        "num_ids": 4711,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        curr = list1[0]\n        for i in range(1,len(list1)):\n            if list1[i] > curr:\n                curr = list1[i]\n        return len(curr)\n",
        "test": "assert     len_log([]) == 0",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == sub_str[0]:\n            for j in range(len(sub_str)):\n                if str1[i+j]!= sub_str[j]:\n                    return False\n    return True\n",
        "test": "assert     find_substring(\"A\", \"A\") == True",
        "num_ids": 1337,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0 and n % 2 == 0:\n        return True\n    return False\n",
        "test": "assert     is_undulating(1) == False",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    x = a ** b\n    print(\"{0} to the power {1} is equal to {2}\".format(a,b,x))\n    return x\n",
        "test": "assert     power(1, 2) == 1",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0]\n",
        "test": "assert index_minimum([(0, 0), (1, 1), (2, 2)]) == (0, 0), \"Wrong answer\"",
        "num_ids": 1773,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst: return 0\n    return min(len(elem) for elem in lst)\n",
        "test": "assert Find_Min_Length([[1,2,3,4],[5,6,7,8],[]]) == 0",
        "num_ids": 1316,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    i = 2\n    while i <= n // i:\n        if n % i == 0:\n            count += 1\n            if count > 1:\n                break\n        i += 1\n    return count\n",
        "test": "assert divisor(1) == 1, \"One has 1 divisor\"",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #initialize empty dictionary and create dictionary to store frequencies\n    freq_dict = {}\n    #loop through the list of lists\n    for elem in list1:\n        #for each element in the list\n        for item in elem:\n            #if it is not in the dictionary\n            if item not in freq_dict:\n                #add it to the dictionary and set the value as 1\n                freq_dict[item] = 1\n            #if it is in the dictionary\n            else:\n                #increment the value by 1\n                freq_dict[item] += 1\n    return freq_dict\n",
        "test": "assert     frequency_lists([]) == {}",
        "num_ids": 1368,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mult = 1\n    for i in numbers:\n        mult = mult*i\n    return mult/len(numbers)\n",
        "test": "assert multiply_num([0, 0, 0, 0]) == 0",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return '0'\n    if n==1:\n        return '1'\n    return decimal_to_binary(n//2) + str(n%2) \n    \ndef binary_to_decimal(s):\n    '''\n    Write a function to convert the given binary number represented as a string to its decimal equivalent.\n    '''\n    if len(s)==0:\n        return 0\n    if s[0]=='0':\n        return 0\n    return 1 + binary_to_decimal(s[1:])\n    \ndef get_all_subsets(s):\n    '''\n    Write a function to get all the subsets of an array. \n    '''\n    if len(s)==0:\n        return [[]]\n    if len(s)==1:\n        return [[],s]\n    s1 = get_all_subsets(s[1:])\n    s2 = get_all_subsets(s[:-1])\n    s3 = []\n    for i in range(len(s1)):\n        s3.append(s1[i]+[s[0]])\n    for i in range(len(s2)):\n        s3.append(s2[i]+[s[0]])\n    return s3\n",
        "test": "assert decimal_to_binary(0) == '0'",
        "num_ids": 2876,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    digits = []\n    temp = num\n    while temp:\n        digits.append(temp%10)\n        temp //= 10\n    reversed_digits = digits[::-1]\n    # print(reversed_digits)\n    for index, digit in enumerate(reversed_digits):\n        if not (digit + 1) in reversed_digits:\n            if digit == 9:\n                reversed_digits.pop(index)\n                break\n            reversed_digits[index] += 1\n            break\n    reversed_digits = reversed_digits[::-1]\n    number = 0\n    for index, digit in enumerate(reversed_digits):\n        number += digit * (10 ** index)\n    return number\n",
        "test": "assert     next_smallest_palindrome(0) == 0",
        "num_ids": 1021,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n < k or n == k:\n        return None\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == k:\n            return arr[mid]\n        elif arr[mid] > k:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return arr[start]\n",
        "test": "assert     kth_element([], 1) == None",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake = word.split('_')\n    for i in range(len(snake)):\n        if i == 0:\n            snake[i] = snake[i].lower()\n        else:\n            snake[i] = snake[i].capitalize()\n    return \"\".join(snake)\n",
        "test": "assert     snake_to_camel('_snake_case') == 'SnakeCase'",
        "num_ids": 1495,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return int(((n*m)/2)**0.5)\n",
        "test": "assert     eulerian_num(2, 2) == 1",
        "num_ids": 4829,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Write your code here\n    return sorted(input_list)\n",
        "test": "assert sort_sublists([\"spam\", \"eggs\", \"tomato\"]) == [\"eggs\", \"spam\", \"tomato\"]",
        "num_ids": 1561,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    return sum(lst)\n",
        "test": "assert     count([False, False, True]) == 1, \"Should be 1\"",
        "num_ids": 2801,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "test": "assert     add_lists([1,2,3,4], [(1,2), (3,4)]) == None",
        "num_ids": 962,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l = []\n    while len(num1)!=0 or len(num2)!=0 or len(num3)!=0:\n        if len(num1)!=0:\n            l.append(num1.pop(0))\n        if len(num2)!=0:\n            l.append(num2.pop(0))\n        if len(num3)!=0:\n            l.append(num3.pop(0))\n    return l\n",
        "test": "assert     merge_sorted_list([],",
        "num_ids": 2314,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    s = s.replace(\" \", \"\")\n    for i in range(0,n):\n        for j in range(1,len(s)+1):\n            if s[(j+i)%len(s)] == '1':\n                count += 1\n                break\n    return count\n",
        "test": "assert odd_Equivalent(\"1010101101\",2) == 2",
        "num_ids": 2523,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i!= j:\n                if nestedlist[i] == nestedlist[j]:\n                    common_elements.append(nestedlist[i])\n    return common_elements\n",
        "test": "assert     common_in_nested_lists([]) == []",
        "num_ids": 1776,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except:\n        return False\n",
        "test": "assert     check_integer('12.3') == False",
        "num_ids": 815,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n",
        "test": "assert     empty_dit([]) == True, \"should return True\"",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum([int(x) for x in nums])\n",
        "test": "assert     tuple_to_int((1, 2, 3)) == 6",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert     list_to_float([[1.0, 1.0, 1.0], [2.0, 2.0, 2.0]]) == [[1.0, 1.0, 1.0], [2.0, 2.0, 2.0]]",
        "num_ids": 1795,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('ab cd') == ['ab','cd'] ",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n=len(arr)\n    if n==0:\n        return None\n    if n==1:\n        return arr[0]\n    if arr[0]==arr[1]:\n        return arr[0]\n    if arr[n-1]==arr[n-2]:\n        return arr[n-1]\n    left=0\n    right=n-1\n    while right>left:\n        mid=(left+right)//2\n        if arr[mid]==arr[mid-1]:\n            left=mid+1\n        elif arr[mid]==arr[mid+1]:\n            right=mid-1\n        else:\n            return arr[mid]\n    \n    return None\n",
        "test": "assert search([1]) == 1",
        "num_ids": 3739,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    res=list1[0]\n    for i in range(len(list1)):\n        if list1[i][0]>res[0] or list1[i][1]>res[1]:\n            res=(list1[i][0],list1[i][1])\n    return res\n",
        "test": "assert max_product_tuple([(1, 2), (3, -2), (4, 1)]) == (4, 1)",
        "num_ids": 2196,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    nums = set()\n    for i in range(1,limit+1):\n        if i in nums:\n            continue\n        sum+=i\n        for x in range(i+1, limit+1):\n            if x in nums:\n                continue\n            if i*x == sum:\n                nums.add(i)\n                nums.add(x)\n    return sum\n",
        "test": "assert     amicable_numbers_sum(100) == 5050",
        "num_ids": 2391,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # a = 3 + 4j\n    # b = -1j\n    angle = cmath.phase(a) - cmath.phase(b)\n    angle = -angle if a.real < 0 else angle\n    angle = abs(angle)\n    angle = (angle / cmath.pi) * 180\n    return angle\n",
        "test": "assert     angle_complex(0,0) == 0",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    length = 0\n    for i in range(0, len(string)): \n        if (string[i] == \"0\"): \n            count = count + 1\n        else: \n            count = count - 1\n        length = max(length, count)\n    return length\n",
        "test": "assert     find_length(\"\") == 0",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 1 or b == 1:\n        return 0\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a == 0 or b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == ",
        "test": "assert     sum(2,5) == 8, \"sum not correct\"",
        "num_ids": 2689,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(-7, 0) == 0",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) >= n:\n            result.append(word)\n    return result\n",
        "test": "assert     long_words(5, [\"a\", \"all\", \"algorithms\", \"are\", \"all\", \"well\"]) == [\"algorithms\"]",
        "num_ids": 1625,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # if it's not square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    for row in range(len(my_matrix)):\n        # if it's not a magic square\n        if sum(my_matrix[row])!= (row+1)*(len(my_matrix)):\n            return False\n    for col in range(len(my_matrix[0])):\n        # if it's not a magic square\n        if sum([my_matrix[row][col] for row in range(len(my_matrix))])!= (col+1)*(len(my_matrix)):\n            return False\n    # if it's a magic square\n    return True\n",
        "test": "assert     magic_square_test([[6, 7, 4, 1, 2], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [4, 5, 6, 7, 8], [7, 8, 9, 3, 6]]) == False, \"Not a magic square!\"",
        "num_ids": 1754,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occur_dict = defaultdict(int)\n    for i in nums:\n        occur_dict[i] += 1\n    max_occur = max(occur_dict.values())\n    max_list = []\n    for key, value in occur_dict.items():\n        if max_occur == value:\n            max_list.append(key)\n    return max(max_list)\n",
        "test": "assert     max_occurrences([1,2,3,2,3,3,4,5]) == 3",
        "num_ids": 1102,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # vowels_list = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    # vowels = []\n    # for letter in str1:\n    #     if letter in vowels_list:\n    #         vowels.append(letter)\n    # str2 = \"\"\n    # for letter in str1:\n    #     if letter not in vowels_list:\n    #         str2 = str2 + letter\n    # return str2\n    s = str1[::-1]\n    for i in range(len(s)):\n        if not s[i].isalpha():\n            s = s[i:] + s[:i]\n    return s\n",
        "test": "assert     reverse_vowels(\"\") == \"\",'should not be an error'",
        "num_ids": 1628,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(map(str,tup1))\n",
        "test": "assert     tup_string(()) == ''",
        "num_ids": 2954,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "test": "assert sum_negativenum([]) == 0, \"Should be 0\"",
        "num_ids": 904,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 3 * hexagonal_num(n - 1) - 2 * hexagonal_num(n - 2)\n    \nprint(hexagonal_num(5))",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 864,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n",
        "test": "assert     zero_count([0,0,0,0]) == 1, \"Wrong result\"",
        "num_ids": 4789,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    while (n > 0):\n        sum = sum + (n % 2)\n        n = n // 2\n    if (sum > 0):\n        return True\n    else:\n        return False\n    # your code goes here\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(2) == True",
        "num_ids": 1187,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_set = set()\n    for test_case in test_list:\n        for test in test_case:\n            flattened_set.add(test)\n    return flattened_set\n",
        "test": "assert extract_singly([[], [1, 2, 3], [4, 5, 6]]) == set([1, 2, 3, 4, 5, 6])",
        "num_ids": 1523,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        idx = get_min_idx(nums)\n        nums[:] = nums[idx:] + nums[:idx]\n",
        "test": "assert ",
        "num_ids": 2779,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num_same = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                num_same += 1\n    for i in range(len(list1)):\n        for j in range(len(list3)):\n            if list1[i] == list3[j]:\n                num_same += 1\n    return num_same\n",
        "test": "assert     count_samepair([1,2,3],['a','b','c'],['a','a','b']) == 0, \"The count of the number that are same in the same position of three lists.\"",
        "num_ids": 1838,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for i in Input:\n        if type(i) == list:\n            num_lists += 1\n    return num_lists\n",
        "test": "assert     find_lists((1,)) == 0, \"First Example\"",
        "num_ids": 1357,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n",
        "test": "assert max_Abs_Diff([]) == 0",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        if a * i + b * i == n:\n            return (a * i, b * i)\n",
        "test": "assert     find_solution(2, 5, 5) == None",
        "num_ids": 5065,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Your code here\n    for i in list2:\n        list1.remove(i)\n    return list1\n",
        "test": "assert     remove_elements([1,2,3,4], [4]) == [1,2,3]",
        "num_ids": 1449,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n <= 2:\n        return n\n    else:\n        return n + sum_series(n-2)\n",
        "test": "assert 0 == sum_series(0)",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # if s % 2 == 0:\n    #     print(\"s must be odd\")\n    #     return\n    # if l % 2 == 0:\n    #     print(\"l must be odd\")\n    #     return\n    # s = float(s)\n    # l = float(l)\n    # return s * l * tan(pi/s) / 2\n    return (s * l * tan(pi/s) / 2)\n",
        "test": "assert     area_polygon(7, 7) == 7",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def div_sum_helper(n, divisors):\n        for i in divisors:\n            if n%i!= 0:\n                return False\n            else:\n                return True\n        return False\n    return div_sum_helper(n, range(1, n+1))\n",
        "test": "assert     div_sum(7) == True, \"Passed\"",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] not in \"qwertyuiopasdfghjklzxcvbnm\":\n            count += 1\n    return count\n",
        "test": "assert     count_char_position(\"\") == 0, \"Input string must be of length 1 or more.\"",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # sorted(A)\n    # return 0 if A is empty\n    if len(A) < 2: return 0\n    # binary search for the element\n    # if even - return 0\n    # else even - return 1\n    low = 0\n    high = len(A) - 1\n    # mid = (low+high)//2\n    while low <= high:\n        mid = (low+high)//2\n        if A[mid] & 1 == 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n    # if even - return 0\n    # else even - return 1\n    return 0 if low == high else 1\n",
        "test": "assert     find_even_pair([]) == 0",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while x < n:\n        x = x * 2\n    return x\n",
        "test": "assert     next_power_of_2(1) == 1, \"next_power_of_2(1) must be 1\"",
        "num_ids": 746,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    f=0\n    for i in range(len(a)):\n        if a[i]==x:\n            f=f+1\n    return f\n",
        "test": "assert     frequency([],3) == 0, \"No matches\"",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum = sum + list1[i]\n    return sum\n",
        "test": "assert         sum_range_list([1,2,3,4], 0, 1) == 3",
        "num_ids": 1152,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (a*5)/2\n    return perimeter\ndef hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = a*6\n    return perimeter\ndef triangle(a, b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = a*b/2\n    return area\ndef circle(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = math.pi*a*a\n    return area\ndef circle_area(a,b,c):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = (a*a + b*b + c*c)/2\n    return area\ndef rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = a*b\n    return area\ndef rectangle_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeter = a + b\n    return perimeter\ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    perimeter = a + b + c\n    return perimeter\ndef rectangle_area(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = a*b\n    return area\ndef rectangle_area_perimeter(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = a+b\n    return area,perimeter\ndef circle_area_perimeter(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef circle_area_perimeter_square(a,b):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef rectangle_area_perimeter_square_a(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_a(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_b(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_b(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_c(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_c(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_d(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_d(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_e(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_e(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef circle_area_perimeter_square_f(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_f(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef rectangle_area_perimeter_square_g(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_g(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_h(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_h(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_i(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_i(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_j(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_j(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a",
        "test": "assert     perimeter_pentagon(4) == 10.0, \"Expected 10\"",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s=='':\n        return 0\n    return 1+count_occurance(s[1:]) if s[0]=='s' else count_occurance(s[1:])\n",
        "test": "assert count_occurance('') == 0, 'Empty String'",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)==0:\n        return True\n    else:\n        if not all(isinstance(i, type(test_tuple[0])) for i in test_tuple):\n            return False\n        return True\n",
        "test": "assert     check_type((1,'b',3.0)) == False",
        "num_ids": 1499,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 2, 3, 3, 4], 5, 2) == False, '1, 2, 2, 3, 3, 4'",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = n\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert     count_Set_Bits(1) == 1",
        "num_ids": 819,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace(\"a\", \"\") \\\n          .replace(\"e\", \"\") \\\n          .replace(\"i\", \"\") \\\n          .replace(\"o\", \"\") \\\n          .replace(\"u\", \"\")\n    ",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\nprint(min_of_three(2,1,5))\n",
        "test": "assert     min_of_three(1,2,3) == 1",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #your code here\n    return ((r-l+1)*1) == ((1<<n)-(1<<(n-1)))\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(5,3,5) == False",
        "num_ids": 1033,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = 0\n    neg = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            pos += 1\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg += 1\n    if neg < pos:\n        arr[neg:] = arr[neg:][::-1]\n    return arr\n",
        "test": "assert     re_arrange_array([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 2363,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2=''\n    for i in str1:\n        if i!='':\n            str2+=i\n        else:\n            str2+='{}'.format(char)\n    return str2\n",
        "test": "assert     replace_blank(\"\",\" \") == \"\", \"Test Failed\"",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    largest = []\n    list1.sort(reverse=True)\n    heapq.heapify(largest)\n    \n    for i in range(n):\n        heapq.heappush(largest,list1[i])\n    \n    return largest\n",
        "test": "assert ",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area (formula 6.3.8 of the book)\n    f = (3*math.pi*r**2)/2\n    lateral_surface = f*h\n    return lateral_surface\n",
        "test": "assert     lateralsuface_cylinder(0,0) == 0",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(1) == 1",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    def set_even_bit(n):\n        return n & 0b1111111111\n    return set_even_bit(n)\n",
        "test": "assert even_bit_set_number(3) == 3",
        "num_ids": 1531,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                if test_list[i] in d:\n                    d[test_list[i]] += 1\n                else:\n                    d[test_list[i]] = 1\n    return d \n",
        "test": "assert not check_occurences([])",
        "num_ids": 5307,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    \n    substring_count = 0\n    \n    for i in range(len(str)):\n        for j in range(len(str), i, -1):\n            if str[i:j]!= \"\":\n                substring_count += 1\n                break\n                \n    return substring_count\n    \n    \nprint(\"Pass\" if  (3 == number_of_substrings(\"\")) else \"Fail\")\nprint(\"Pass\" if  (2 == number_of_substrings(\"abc\")) else \"Fail\")\nprint(\"Pass\" if  (1 == number_of_substrings(\"ab\")) else \"Fail\")\nprint(\"Pass\" if  (4 == number_of_substrings(\"abcd\")) else \"Fail\")\nprint(\"Pass\" if  (4 == number_of_substrings(\"abcde\")) else \"Fail\")\nprint(\"Pass\" if  (0 == number_of_substrings(\"\")) else \"Fail\")\n",
        "test": "assert     number_of_substrings(\"\") == 0, \"Expected an empty string to have 0 substrings\"",
        "num_ids": 3167,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the variable to hold the number of possible sequences\n    numberOfPossibleSequences = 0\n    \n    # This loop will go through each element until m is reached\n    for i in range(0,m):\n        \n        # This loop will add 1 to the variable everytime a possible sequence is found\n        for j in range(i, m):\n            if j == i:\n                numberOfPossibleSequences += 1\n            elif numberOfPossibleSequences == 0:\n                numberOfPossibleSequences = 1\n            else:\n                numberOfPossibleSequences += 1\n                \n    # The number of possible sequences is rounded to the nearest integer\n    numberOfPossibleSequences = int(numberOfPossibleSequences)\n    \n    # Return the number of possible sequences rounded to the nearest integer\n    return numberOfPossibleSequences\n",
        "test": "assert     get_total_number_of_sequences(0, 5) == 0, 'Wrong!'",
        "num_ids": 3306,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for i in range(len(list1)-1):\n        new_list.append(list1[i])\n    new_list.append(list2[-1])\n    return new_list\n",
        "test": "assert     replace_list([1,2,3], [1,2,3]) == [1,2,3], 'Incorrectly replacing 1 to 3'",
        "num_ids": 1524,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert count_charac('#') == 1, 'incorrect result'",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N\n    y = 1\n    while(y * y < x):\n        y = y + 1\n    return y * y \n",
        "test": "assert     next_Perfect_Square(1) == 1, \"The Answer is 1. Your answer is {}\".format(next_Perfect_Square(1))",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    bitonic_subsequence = []\n",
        "test": "assert ",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = number ** (1/2)\n    return root\n",
        "test": "assert     babylonian_squareroot(0) == 0, 'Wrong answer'",
        "num_ids": 1212,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    if not str:\n        return 0\n    \n    str = '#' + str\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]\n",
        "test": "assert     lps(\"\") == 0",
        "num_ids": 1849,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n",
        "test": "assert     harmonic_sum(1) == 1, \"harmonic sum of 1 is 1\"",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    final = []\n    for element in array_nums1:\n        if element in array_nums2:\n            final.append(element)\n    return final\n",
        "test": "assert     intersection_array([], []) == [], \"Wrong answer: \" + str(intersection_array([], []))",
        "num_ids": 1895,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X([], 'a') == 0, \"Expected 0 for count_X('', 'a')\"",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:1] + [element] + list[1:]\n",
        "test": "assert     insert_element([1,2,3], 1) == [1,1,2,3]",
        "num_ids": 1243,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a,b=numbers\n    r=int(b)\n    theta=int(a*(360/3.14))\n    if r<=0:\n        return r,theta\n    elif r==0:\n        if theta>0 and theta<90:\n            return r,theta\n        elif theta==90:\n            return r,theta\n        else:\n            return r,360-theta\n    else:\n        return r,(360-theta)\n",
        "test": "assert ",
        "num_ids": 3518,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(map(lambda x: type(x) is int, list1))\n",
        "test": "assert count_integer([1,2,3,4]) == 4",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations_list = []\n    if n == 1:\n        return [l]\n    else:\n        for i in range(len(l)):\n            temp = l.copy()\n            temp.pop(i)\n            for i in combinations_colors(temp, n-1):\n                combinations_list.append((l[i], l[i], l[i], l[i]))\n    return combinations_list\n    \ndef print_board(board):\n    '''\n    A function that prints out the board that has been created in the code.\n    '''\n    print(\"   \", board[0], board[1], board[2])\n    print(\"   \", \" \", \" \", board[3], board[4], board[5])\n    print(\"   \", board[6], board[7], board[8])\n    print(\"\")\n    \ndef solution_value(board):\n    '''\n    A function that returns the value of the board if all the constraints are met, and the board is not a solution.\n    '''\n    if (board[0] + board[1] + board[2] == 1) and (board[3] + board[4] + board[5] == 1) and (board[6] + board[7] + board[8] == 1):\n        return -1\n    elif (board[0] + board[1] + board[2] == 2) and (board[3] + board[4] + board[5] == 2) and (board[6] + board[7] + board[8] == 2):\n        return -1\n    elif (board[0] + board[1] + board[2] == 3) and (board[3] + board[4] + board[5] == 3) and (board[6] + board[7] + board[8] == 3):\n        return -1\n    elif (board[0] + board[1] + board[2] == 4) and (board[3] + board[4] + board[5] == 4) and (board[6] + board[7] + board[8] == 4):\n        return -1\n    elif (board[0] + board[1] + board[2] == 5) and (board[3] + board[4] + board[5] == 5) and (board[6] + board[7] + board[8] == 5):\n        return -1\n    elif (board[0] + board[1] + board[2] == 6) and (board[3] + board[4] + board[5] == 6) and (board[6] + board[7] + board[8] == 6):\n        return -1\n    elif (board[0] + board[1] + board[2] == 7) and (board[3] + board[4] + board[5] == 7) and (board[6] + board[7] + board[8] == 7):\n        return -1\n    elif (board[0] + board[1] + board[2] == 8) and (board[3] + board[4] + board[5] == 8) and (board[6] + board[7] + board[8] == 8):\n        return -1\n    elif (board[0] + board[1] + board[2] == 9) and (board[3] + board[4] + board[5] == 9) and (board[6] + board[7] + board[8] == 9):\n        return -1\n    else:\n        return 1\n    \ndef find_colors(board, colors, value):\n    '''\n    A function that finds the subset of given colors in a list, with given value.\n    '''\n    if value == -1:\n        for i in board:\n            if i in colors:\n                return True\n        return False\n    else:\n        if value == 1:\n            for i in board:\n                if i in colors:\n                    colors.remove(i)\n            return True\n        else:\n            for i in board:\n                if i in colors:\n                    colors.remove(i)\n            return False\n",
        "test": "assert     combinations_colors([], 2) ==     []",
        "num_ids": 1890,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Using simple loop and check prime numbers\n    count = 0\n    for i in range(2, n + 1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                count = count + 1\n    return count\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\nprint(swap_numbers(5,6))\n",
        "test": "assert     swap_numbers(4,4) == (4, 4), 'incorrect'",
        "num_ids": 2957,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n",
        "test": "assert     maximize_elements((3,3), (3,3)) == (3,3)",
        "num_ids": 1700,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # n = input(\"Enter the number of primes you need to find: \")\n    n = int(n)\n    prime = [2]\n    factors = []\n    if n == 1: \n        return prime[0]\n    # find_p = 0\n    while True:\n        prime.append(0)\n        find_p = prime[-1]\n        i = len(prime) - 1\n        while i > 0:\n            # print(prime, i, factors)\n            if i >= n:\n                return prime\n            # if prime[i] == 0:\n            #     factors.append(i)\n            for j in range(2, (i + 1)):\n                if i % j == 0:\n                    prime[i] = 0\n                    break\n            i -= 1\n        prime[-1] = find_p + 1\n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 1668,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        if len(test_tup1) == len(test_tup2):\n            return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n        else:\n            return (False, \"The length of tuples must be equal for division operation\")\n    except TypeError:\n        return (False, \"Invalid arguments passed\")\n",
        "test": "assert     division_elements((2, 2), (2, 2)) == (1, 1)",
        "num_ids": 1808,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    i = 0\n    j = len(list1) - 1\n    res1 = list1[:L]\n    res2 = list1[L:]\n    while i < j:\n        if len(res1) == len(res2):\n            break\n        else:\n            i += 1\n    return (res1, res2)\n",
        "test": "assert     split_two_parts([1,2,3,4,5], 3) == ([1,2,3],[4,5]), \"Wrong answer\"",
        "num_ids": 1884,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_years = (h_age*7)\n    return dog_years\n    \ndef dog_weight(weight):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_pounds = (weight*4)\n    return dog_pounds\n    \ndef dog_years_to_weight(dog_age, dog_weight):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_years_to_weight = (dog_weight/ (dog_age*7))\n    return dog_years_to_weight\n    \ndef dog_weight_to_dog_years(dog_weight, dog_years_to_weight):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_weight_to_dog_years = (dog_weight* (dog_years_to_weight*7))\n    return dog_weight_to_dog_years\n    \ndef dog_calculator(dog_weight, dog_age, dog_years_to_weight):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_calculator = (dog_weight * dog_age)\n    return dog_calculator\n    \ndef dog_weight_to_dog_age(dog_weight, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_weight_to_dog_age = (dog_weight / (dog_weight_to_dog_years * 7))\n    return dog_weight_to_dog_age\n    \ndef dog_weight_to_dog_years(dog_weight, dog_calculator):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_weight_to_dog_years = (dog_weight/ (dog_calculator*7))\n    return dog_weight_to_dog_years\n    \ndef dog_calculator_2(dog_weight, dog_age, dog_years_to_weight):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_calculator_2 = (dog_weight * dog_age)\n    return dog_calculator_2\n    \ndef dog_weight_to_dog_age(dog_weight, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_weight_to_dog_age = (dog_weight/ (dog_weight_to_dog_years * 7))\n    return dog_weight_to_dog_age\n    \ndef dog_weight_to_dog_years(dog_weight, dog_calculator_2):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_weight_to_dog_years = (dog_weight/ (dog_calculator_2*7))\n    return dog_weight_to_dog_years\n    \ndef dog_calculator_3(dog_weight, dog_age, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_calculator_3 = (dog_weight * dog_age)\n    return dog_calculator_3\n    \ndef dog_weight_to_dog_age(dog_weight, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_weight_to_dog_age = (dog_weight/ (dog_weight_to_dog_years * 7))\n    return dog_weight_to_dog_age\n    \ndef dog_weight_to_dog_years(dog_weight, dog_calculator_3):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_weight_to_dog_years = (dog_weight/ (dog_calculator_3*7))\n    return dog_weight_to_dog_years\n    \ndef dog_calculator_4(dog_weight, dog_age, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_calculator_4 = (dog_weight * dog_age)\n    return dog_calculator_4\n    \ndef dog_weight_to_dog_age(dog_weight, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_weight_to_dog_age = (dog_weight/ (dog_weight_to_dog_years * 7))\n    return dog_weight_to_dog_age\n    \ndef dog_weight_to_dog_years(dog_weight, dog_calculator_4):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_weight_to_dog_years = (dog_weight/ (dog_calculator_4*7))\n    return dog_weight_to_dog_years\n    \ndef dog_calculator_5(dog_weight, dog_age, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_calculator_5 = (dog_weight * dog_age)\n    return dog_calculator_5\n    \ndef dog_weight_to_dog_age(dog_weight, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_weight_to_dog_age = (dog_weight/ (dog_weight_to_dog_years * 7))\n    return dog_weight_to_dog_age\n    \ndef dog_weight_to_dog_years(dog_weight, dog_calculator_5):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_weight_to_dog_years = (dog_weight/ (dog_calculator_5*7))\n    return dog_weight_to_dog_years\n    \ndef dog_calculator_6(dog_weight, dog_age, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_calculator_6 = (dog_weight * dog_age)\n    return dog_calculator_6\n    \ndef dog_weight_to_dog_age(dog_weight, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_weight_to_dog_age = (dog_weight/ (dog_weight_to_dog_years * 7))\n    return dog_weight_to_dog_age\n    \ndef dog_weight_to_dog_years(dog_weight, dog_calculator_6):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_weight_to_dog_years = (dog_weight/ (dog_calculator_6*7))\n    return dog_weight_to_dog_years\n    \ndef dog_calculator_7(dog_weight, dog_age, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_calculator_7 = (dog_weight * dog_age)\n    return dog_calculator_7\n    \ndef dog_weight_to_dog_age(dog_weight, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_weight_to_dog_age = (dog_weight/ (dog_weight_to_dog_years * 7))\n    return dog_weight_t",
        "test": "assert     dog_age(8) == \"8 dog years\"",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step==0:\n        return([S])\n    else:\n        return([S[i:i+step] for i in range(0,len(S),step)])\n",
        "test": "assert     list_split([1, 2, 3, 4], 1) == [[1], [2], [3], [4]]",
        "num_ids": 3772,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 210,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    count = 1\n    oddSum = 0\n    while count <= n:\n        oddSum += (count*count)\n        count += 1\n    return oddSum\n",
        "test": "assert     square_Sum(1) == 1",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    return 2 * (find_star_num(n - 1)) + 1\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    i = 0\n    total = 0\n    if len(arr) == 0:\n        return total\n    while i < len(arr):\n        if i%2 == 0 and i < len(arr):\n            total += arr[i]\n        i += 1\n    return total\n",
        "test": "assert     sum_even_and_even_index([]) == 0, \"Empty List\"",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum\n",
        "test": "assert     even_Power_Sum(1) == 0",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]\n",
        "test": "assert    rear_extract([]) == []",
        "num_ids": 1335,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1, test_tup2 = tuple(test_tup1), tuple(test_tup2)\n    if len(test_tup1) > len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    new_tup = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            new_tup.append(test_tup1[i] - test_tup2[i])\n        else:\n            new_tup.append(test_tup1[i] - test_tup2[i-len(test_tup1)])\n    return tuple(new_tup)\n",
        "test": "assert     (substract_elements((1,2), (3,4)) == (-2,-2))",
        "num_ids": 1874,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2==0:\n            sum += math.comb(n,i)\n    return sum\nprint(even_binomial_Coeff_Sum(5))\n",
        "test": "assert even_binomial_Coeff_Sum(0) == 1",
        "num_ids": 1114,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    volume = (4/3)*pi*r**3\n    return volume\n",
        "test": "assert     volume_cylinder(0,1) == 0, \"Inputs are incorrect\"",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n",
        "test": "assert     dict_filter({'k1':10, 'k2':9, 'k3':8}, 4) == {'k3':8, 'k1':10, 'k2':9}",
        "num_ids": 1670,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements((1, 2, 2, 1)) == 1",
        "num_ids": 5181,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 3\n    n -= 1\n    deco_n = (n * (n+1) + 1) / 2\n    return deco_n\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if dlist is None:\n        return (False, -1)\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    \n    return (False, -1)\n",
        "test": "assert     sequential_search([1, 4, 5, 6], 4) == (True, 1)",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert     all_unique([1,2,3,4,5,6,7,8,9,10]) == True, \"all_unique\"",
        "num_ids": 1506,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    for n1,n2 in zip(nums1,nums2):\n        res.append(n1-n2)\n    return res\n",
        "test": "assert     sub_list([2,2,2], [2,2,2]) ==     [0,0,0], \"Should be [0,0,0]\"",
        "num_ids": 1594,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = int(n)\n    count_d = [0 for i in range(10)]\n    for i in range(len(str(n))):\n        count_d[int(str(n)[i])] += 1\n    for i in range(len(count_d)):\n        if count_d[i] <= i:\n            return True\n    return False\n",
        "test": "assert     validate(0) == True, \"zero should return True\"",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(0,len(list)):\n        if list[i]!= element:\n            return False\n    return True\n",
        "test": "assert     check_element([1,2,3],4)== False, 'check_element test4 failed'",
        "num_ids": 866,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a+b')\n    if(pattern.match(text)):\n        return True\n    return False\n",
        "test": "assert     text_match_two_three(\"\") == False",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = 0\n    \n    # starting from index 0 \n    for i in range(n): \n        max_ending_here = max_ending_here + a[i] \n        if max_ending_here < 0: \n            max_ending_here = 0\n        \n        # update the maximum sum so far \n        max_so_far = max(max_so_far, max_ending_here) \n    \n    print(\"Maximum contiguous sum is \", max_so_far) \n    \n    # return the maximum sum\n    return max_so_far \n",
        "test": "assert     max_sub_array_sum_repeated([1,2,3,4,5], 5, 1) == 15",
        "num_ids": 4450,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        if(i%2==0):\n            sum=sum+i**2\n    return sum\n",
        "test": "assert     square_Sum(0) == 0, \"Test case failed\"",
        "num_ids": 2571,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return\n    max_length = max([len(x) for x in list1])\n    return max_length\n",
        "test": "assert     max_length([[]]) == 0, 'Should be 0'",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0] * (k + 1) for _ in range(n + 1)] \n    for i in range(1, n + 1): \n        for j in range(1, k + 1): \n            if j < i: \n                dp[i][j] = dp[i - 1][j] \n            elif j == i: \n                dp[i][j] = 1\n            else: \n                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n    return dp[n][k] \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        def helper(i, j, count, memo): \n            if i == j: \n                count[0] += 1\n                return count[0]\n            elif j < i: \n                return helper(i, j, count, memo) \n            elif j == i: \n                count[0] += 1\n                return count[0]\n            else: \n                count[0] += (helper(i, j - 1, count, memo) + helper(i - 1, j, count, memo)) % 1000000007\n                return count[0]\n        \n        count = [0]\n        memo = {}\n        return helper(n, k, count, memo) \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        memo = {}\n        def helper(i, j, count, memo): \n            if i == j: \n                count[0] += 1\n                return count[0]\n            elif j < i: \n                return helper(i, j, count, memo) \n            elif j == i: \n                count[0] += 1\n                return count[0]\n            else: \n                count[0] += (helper(i, j - 1, count, memo) + helper(i - 1, j, count, memo)) % 1000000007\n                return count[0]\n        \n        count = [0]\n        return helper(n, k, count, memo) \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        def helper(i, j, count, memo): \n            if i == j: \n                count[0] += 1\n                return count[0]\n            elif j < i: \n                return helper(i, j, count, memo) \n            elif j == i: \n                count[0] += 1\n                return count[0]\n            else: \n                if (i, j) in memo:\n                    count[0] += memo[(i, j)]\n                else:\n                    count[0] += (helper(i, j - 1, count, memo) + helper(i - 1, j, count, memo)) % 1000000007\n                memo[(i, j)] = count[0]\n                return count[0]\n        \n        count = [0]\n        memo = {}\n        return helper(n, k, count, memo) \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        dp = [[0] * (k + 1) for _ in range(n + 1)] \n        for i in range(1, n + 1): \n            for j in range(1, k + 1): \n                if j < i: \n                    dp[i][j] = dp[i - 1][j] \n                elif j == i: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n        return dp[n][k] \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        def helper(i, j, count, memo): \n            if i == j: \n                count[0] += 1\n                return count[0]\n            elif j < i: \n                return helper(i, j, count, memo) \n            elif j == i: \n                count[0] += 1\n                return count[0]\n            else: \n                count[0] += (helper(i, j - 1, count, memo) + helper(i - 1, j, count, memo)) % 1000000007\n                return count[0]\n        \n        count = [0]\n        memo = {}\n        return helper(n, k, count, memo) \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        dp = [[0] * (k + 1) for _ in range(n + 1)] \n        for i in range(1, n + 1): \n            for j in range(1, k + 1): \n                if j < i: \n                    dp[i][j] = dp[i - 1][j] \n                elif j == i: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n        return dp[n][k] \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        dp = [[0] * (k + 1) for _ in range(n + 1)] \n        for i in range(1, n + 1): \n            for j in range(1, k + 1): \n                if j < i: \n                    dp[i][j] = dp[i - 1][j] \n                elif j == i: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n        return dp[n][k] \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        dp = [[0] * (k + 1) for _ in range(n + 1)] \n        for i in range(1, n + 1): \n            for j in range(1, k + 1): \n                if j < i: \n                    dp[i][j] = dp[i - 1][j] \n                elif j == i: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n        return dp[n]",
        "test": "assert     count_no_of_ways(4, 4) == 1",
        "num_ids": 1299,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 210,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert     find(1,1) == 1",
        "num_ids": 2457,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w*h)/2\n",
        "test": "assert     otherside_rightangle(2,2) == 2",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n    \n",
        "test": "assert max_val([1,2,3,4,5,6,7]) == 7",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    number = abs(number)\n    if number < 2:\n        return 0\n    if number == 2:\n        return 1\n    divisors = set()\n    divisor = 1\n    while divisor <= number // 2:\n        if number % divisor == 0:\n            divisors.add(divisor)\n            divisors.add(number // divisor)\n        divisor += 1\n    return sum(divisors)\n",
        "test": "assert     sum_div(0) == 0,'sum_div(0) should be 0'",
        "num_ids": 964,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[i]:\n                res += 1\n    return res\n    \n    ",
        "test": "assert     get_Inv_Count([]) == 0, 'Incorrect output'",
        "num_ids": 1455,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in list1:\n        if isinstance(i, list):\n            new_list.extend(flatten_list(i))\n        else:\n            new_list.append(i)\n    return new_list\n",
        "test": "assert     flatten_list([[1,2,3],[4],[5,6]]) == [1,2,3,4,5,6], \"Wrong answer for [[1,2,3],[4],[5,6]]\"",
        "num_ids": 1385,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = max(stdata)\n    return result\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    result = min(stdata)\n    return result\n",
        "test": "assert     max_aggregate([(1, 2), (1, 2)]) == (1, 2)",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Solution 1\n    # Traverse the given binary number and increment the count for the first and last numbers.\n    # then check the sum of the first and last numbers\n    # using bit operation, i.e. int a = a<<1 \n    # and int b = b>>1\n    count = 0\n    n = int(n)\n    for i in range(n+1):\n        a = i\n        b = n - i\n        c = (a<<1) + b\n        print(f'a = {a}')\n        print(f'b = {b}')\n        print(f'c = {c}')\n        print('\\n')\n        count += 1\n        if (a + b + c == n*(n+1)//2):\n            print(f'The count for a binary sequence of length {i} is {count}\\n')\n            return count\n",
        "test": "assert     count_binary_seq(0) == 1, '0'",
        "num_ids": 1947,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)\n    ",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    from numpy import zeros,count_nonzero,where\n    for i in range(len(arr)) : \n        print(arr[i])\n    if index >= len(arr) :\n        print(\"Index out of range!\")\n        return\n    arr_size = len(arr)\n    curr_pos = index \n    #print(arr_size)\n    arr_arr = zeros(arr_size,int)\n    \n    for i in range(0,arr_size) : \n        arr_arr[i] = arr[(curr_pos + i)%arr_size]\n    #print(arr_arr)\n    #print(arr_arr)\n    rotations = rotations % len(arr_arr)\n    #print(rotations)\n    if rotations == 0 : \n        return arr_arr[index]\n    arr_arr_cpy = arr_arr.copy()\n    if rotations < 0 : \n        for i in range(rotations,0) : \n            arr_arr_cpy = arr_arr_cpy[::-1]\n            #print(arr_arr_cpy)\n    else : \n        for i in range(0,rotations) : \n            arr_arr_cpy = arr_arr_cpy[::1]\n            #print(arr_arr_cpy)\n    #print(arr_arr_cpy)\n    return arr_arr_cpy[index]\n",
        "test": "assert     find_Element([1,2,3,4,5,6],    2,    1,    0)    ==    1,    \"Wrong element\"",
        "num_ids": 2078,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('p')\n    return [word for word in words if pattern.match(word)!= None]\nprint(start_withp([\"hello\",\"python\",\"programming\",\"program\",\"snake\"]))\n",
        "test": "assert not start_withp(['Python','PYTHON','Python3','Python2','PYTHON2','PYTHON2']) == ['Python','PYTHON']",
        "num_ids": 1360,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum_so_far = 0\n    max_sum_ending_here = 0\n    for i in range(index, n):\n        max_sum_ending_here = max_sum_ending_here + a[i]\n        if max_sum_ending_here < 0:\n            max_sum_ending_here = 0\n        if max_sum_ending_here > max_sum_so_far:\n            max_sum_so_far = max_sum_ending_here\n        if max_sum_ending_here > k:\n            max_sum_ending_here = 0\n    return max_sum_so_far\n    \n",
        "test": "assert     max_sum_increasing_subseq([], 10, 10, 9) == 0",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m] + (tuplex[m+1:n] + tuplex[n+1:])\n",
        "test": "assert     colon_tuplex(('a','b','c'),4,2) == ('a','b','c')",
        "num_ids": 5365,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # nums1 = [2, 3, 5, 8, 10, 12]\n    # nums2 = [4, 6, 7, 9, 11, 13]\n    # N = 5\n    # O(n*m)\n    result = []\n    min_n1 = min(nums1)\n    max_n2 = max(nums2)\n    for i in range(min_n1, max_n2+1):\n        prod = i*max(nums1)\n        if prod > N:\n            break\n        result.append(prod)\n    return result\n",
        "test": "assert large_product([0], [0], 1) == [0]",
        "num_ids": 1806,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(1, 2) == 2",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.replace(' ','')\n    l = list(str1)\n    l1 = []\n    for i in l:\n        l1.append(i)\n    t = tuple(l1)\n    return t\n",
        "test": "assert     string_to_tuple(\"a\") == ('a',), \"String is not valid.\"",
        "num_ids": 1294,
        "indeed": true
    },
    {
        "number": 311,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    binary_num = bin(n) \n    l = binary_num.replace('0b', '') \n    res = int(l[0]) \n    return res\n",
        "test": "assert     set_left_most_unset_bit(1) == 1, \"error!\"",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * r**2 * h)\n",
        "test": "assert volume_cone(0,10) == 0",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power_2 = 0\n    while(n!= 0):\n        if (n & 1) == 1:\n            max_power_2 += 1\n        n = n >> 1\n    return max_power_2 \n",
        "test": "assert     highest_Power_of_2(0) == 0",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "test": "assert     find_lucas(1) == 1",
        "num_ids": 898,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n    \n    \ndef get_nums(list_, start, end):\n    '''\n    Write a function that, given a list and two indices, returns a new list with the elements in the list between those indices removed.\n    '''\n    return list_[start:end+1]\n    \n    \ndef remove_all(list_, item):\n    '''\n    Write a function that removes all instances of an item from a list.\n    '''\n    while item in list_:\n        list_.remove(item)\n    return list_\n    \n    \ndef find_index(list_, item):\n    '''\n    Write a function that returns the index of the first item in a list that matches an item.\n    '''\n    for i in range(len(list_)):\n        if list_[i] == item:\n            return i\n    return -1\n    \n    \ndef find_all_indexes(list_, item):\n    '''\n    Write a function that returns a list of all of the indices where an item is found in a list.\n    '''\n    result = []\n    for i in range(len(list_)):\n        if item == list_[i]:\n            result.append(i)\n    return result\n    \n    \ndef get_list_length(list_):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    return len(list_)\n    \n    \ndef get_list_sum(list_):\n    '''\n    Write a function that returns the sum of all of the elements in a list.\n    '''\n    sum = 0\n    for i in range(len(list_)):\n        sum += int(list_[i])\n    return sum\n    \n    \ndef remove_list_item(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    list_.remove(item)\n    return list_\n    \n    \ndef append_list(list_, item):\n    '''\n    Write a function that appends an item to a list.\n    '''\n    list_.append(item)\n    return list_\n    \n    \ndef add_list_item(list_, item):\n    '''\n    Write a function that adds an item to a list at the end of the list.\n    '''\n    list_.append(item)\n    return list_\n    \n    \ndef sort_list(list_):\n    '''\n    Write a function that sorts a list.\n    '''\n    return sorted(list_)\n    \n    \ndef reverse_list(list_):\n    '''\n    Write a function that reverses a list.\n    '''\n    list_.reverse()\n    return list_\n    \n    \ndef get_list_average(list_):\n    '''\n    Write a function that returns the average of all of the elements in a list.\n    '''\n    sum = 0\n    for i in range(len(list_)):\n        sum += int(list_[i])\n    return sum / len(list_)\n    \n    \ndef get_list_length_1(list_):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    return len(list_)\n    \n    \ndef get_list_length_2(list_):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    return len(list_)\n    \n    \ndef remove_list_item_1(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    while item in list_:\n        list_.remove(item)\n    return list_\n    \n    \ndef remove_list_item_2(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_3(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_4(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_5(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_6(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_7(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_8(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_9(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_10(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_11(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_12(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_13(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_14(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_15(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_16(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_17(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_18(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_19(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_20(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_21(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_22(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_23(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n",
        "test": "assert ",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1={}\n    for i in range(len(l1)):\n        d1[l1[i]]=l2[i]\n    for i in range(len(l3)):\n        d1[l3[i]]=l2[i+1]\n    return d1\n",
        "test": "assert convert_list_dictionary([], [], []) == {}, 'Wrong output'",
        "num_ids": 2178,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n",
        "test": "assert     get_max_sum(1) == 1, \"FAILED: get_max_sum()\"",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #Create an empty list\n    max_length_list = []\n    # Iterate through the input_list\n    for num in input_list:\n        # Check if the length is already the maximum length\n        if len(max_length_list) == 0:\n            # If it is, append the number\n            max_length_list.append(num)\n        # If it is not the maximum length, check if the length is larger than max\n        elif len(max_length_list)!= 0 and num > max_length_list[-1]:\n            # If it is, append the number\n            max_length_list.append(num)\n    # Return the maximum length\n    return max_length_list\n",
        "test": "assert     max_length_list([]) == []",
        "num_ids": 1839,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert     check_distinct((1,2,2,3,3)) == False",
        "num_ids": 1462,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = list(str1)\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n        else:\n            return char\n    \n    return None\n",
        "test": "assert     first_non_repeating_character('') == None",
        "num_ids": 1539,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n    \n",
        "test": "assert     check_char('hello.') == False, 'Test 4 failed: true'",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numList = [a,b,c]\n    numList.sort()\n    size = len(numList)\n    median = numList[int(size/2)]\n    return median\n",
        "test": "assert median_numbers(-5, 0, 0) == 0",
        "num_ids": 1368,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        while num:\n            total += num % 10\n            num = num // 10\n    return total\n",
        "test": "assert     sum_of_digits([]) == 0, \"Fail\"",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for item1, item2 in zip(test_tup1, test_tup2):\n        result += (item1 ^ item2,)\n    return result\n",
        "test": "assert     bitwise_xor((10, 10), (10, 10)) == (0, 0)",
        "num_ids": 1394,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    def freq(l):\n        lst = []\n        for i in l:\n            if i not in lst:\n                lst.append(i)\n        return len(lst)\n    return freq(test_list)\n",
        "test": "assert     extract_freq([1, 1, 1, 2, 2, 3, 4, 4]) == 4, 'Wrong output'",
        "num_ids": 1459,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for x, y in zip(test_tup1, test_tup2):\n        if type(x)!= int:\n            x = list(x)\n        if type(y)!= int:\n            y = list(y)\n        result.append((x + y))\n    return tuple(result)\n",
        "test": "assert     add_nested_tuples((1,2), (3,4)) == (4,6), \"Wrong\"",
        "num_ids": 1568,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = 0\n    if(a>b):\n        min = b\n    else:\n        min = a\n    return min\n",
        "test": "assert     minimum(-1,-2) == -2",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1[i]:\n            return True\n    return False\n",
        "test": "assert     check_tuplex((1, 2, 3), (2, 3, 4)) == False, \"Should return False\"",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2!= 0\n",
        "test": "assert     find_Parity(4) == False, 'check 1'",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    bigger = ''.join(sorted(str(n),reverse=True))\n    return int(bigger)\n",
        "test": "assert     rearrange_bigger(0) == 0",
        "num_ids": 1361,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Time: O(n)\n    # Space: O(1)\n    # n = len(nums1)\n    # min_heap = []\n    # # Populate Min Heap\n    # for i in range(n):\n    #     heapq.heappush(min_heap, (nums1[i] + nums2[i], i))\n",
        "test": "assert k_smallest_pairs([4,3,2], [1,1,4], 1) == [(2,3)]",
        "num_ids": 3156,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    if n == 0:\n        raise ValueError(\"List is empty\")\n    if n == 1:\n        return list1[0]\n    min1 = list1[0]\n    for i in range(1, n):\n        if list1[i][0] < min1[0]:\n            min1 = list1[i]\n        elif list1[i][1] < min1[1]:\n            min1 = list1[i]\n        else:\n            continue\n    return min1\n",
        "test": "assert     min_product_tuple([(2,4),(3,5),(2,4)]) == (2,4)",
        "num_ids": 1390,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    x = listval[0]\n    for i in range(len(listval)):\n        if x > listval[i]:\n            x = listval[i]\n    return x\n",
        "test": "assert     min_val([2,1,7])    == 1",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(map(lambda x: x.capitalize(), word.split('_')))\n",
        "test": "assert     snake_to_camel(\"snake_to_camel\") == \"SnakeToCamel\"",
        "num_ids": 1295,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return(l[0::2])\n    ",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "test": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 3) == (5, 6)",
        "num_ids": 1283,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)>len(list2):\n        return False\n    if len(list2)>len(list1):\n        return False\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([10,20,30,40,50], [10,20,30,40,50]) == True, \"Should be True\"",
        "num_ids": 1293,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_1 = arr[0]\n    max_2 = arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] >= max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n    print('max_1 is:', max_1,'max_2 is:', max_2)\n    return max_1, max_2\n",
        "test": "assert     max_Product([2,3,6,4,5]) == (6,5)",
        "num_ids": 1608,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_Element = []\n    First_Element = []\n    for i in Input:\n        Common_Element.append(i[0])\n        First_Element.append(i[1])\n    print(Common_Element)\n    print(First_Element)\n    Common_Element = set(Common_Element)\n    First_Element = set(First_Element)\n    Common = Common_Element.intersection(First_Element)\n    print(Common)\n    return(len(Common))\n",
        "test": "assert     group_tuples([(1, 5), (0, 1), (5, 6), (2, 3), (2, 5), (2, 4), (2, 3)]) == 2",
        "num_ids": 1605,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max = 0\n    for i in range(len(lst)):\n        if lst[i] > Max:\n            Max = lst[i]\n    for i in range(len(lst)):\n        if lst[i] == Max:\n            return i\n",
        "test": "assert     Find_Max([]) == None, \"Empty list\"",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 419,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = []\n    for i in list1:\n        rounded_list.append(round(i))\n    return sum(rounded_list) * len(rounded_list)\n",
        "test": "assert     round_and_sum([0.5, -0.5]) == 0",
        "num_ids": 958,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for x in range(1,n+1):\n        sum += x**3\n    return sum\n    \n",
        "test": "assert     cube_Sum(0) == 0, \"cube_Sum(0) should return 0\"",
        "num_ids": 674,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    s = \"\"\n    for item in test_tup:\n        s += item\n    return s\n",
        "test": "assert     concatenate_tuple(('a',)) == \"a\"",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (i ** 3)\n    return sum / n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 2732,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[-1], )\n",
        "test": "assert     extract_rear(('Hello', 'world')) == ('world',)",
        "num_ids": 1407,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c = 0\n    for x in list1:\n        if x == x:\n            c = c + 1\n    return c\n",
        "test": "assert count_element_in_list([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2, 2], [1, 2, 2], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]], 1) == 7",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for num in nums:\n        if num%2!= 0:\n            oddnumbers.append(num)\n    return oddnumbers\n",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 990,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    d = dt.split('-')\n    \n    days = d[2]\n    months = d[1]\n    years = d[0]\n    \n    d.append(years)\n    \n    months = months[0:3]\n    days = days[0:2]\n    \n    new_date = days + '-' + months + '-' + years\n    \n    print('Formatting Date:', new_date)\n    \n    return new_date\n",
        "test": "assert     change_date_format(\"2008-05-12\") == \"12-05-2008\"",
        "num_ids": 1458,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j-gap], my_list[j] = my_list[j], my_list[j-gap]\n                j -= gap\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([1,5,4,2,3,6]) == [1,2,3,4,5,6]",
        "num_ids": 1175,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] & test_tup2[0], test_tup1[1] & test_tup2[1]\n    \ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    return test_tup1[0] | test_tup2[0], test_tup1[1] | test_tup2[1]\n",
        "test": "assert     and_tuples((2, 4), (3, 4)) == (2, 4)",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*(c**2) + b*c - (a**2)*b\n",
        "test": "assert     parabola_directrix(a = 0, b = 0, c = 0) == 0",
        "num_ids": 1245,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n",
        "test": "assert common_element([1,2,3], [3,4,5]) == True",
        "num_ids": 1451,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 < base2:\n        return median_trapezium(base2,base1,height)\n    if base1 == base2:\n        return height\n    else:\n        return (base1 + base2) / 2 * height",
        "test": "assert     median_trapezium(1,1,1) == 1.0",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([], 5) == False",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab') == -1:\n        return False\n    else:\n        return True\n",
        "test": "assert     text_match_one(\"ababab\") == True",
        "num_ids": 1191,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert     last_Digit(10)        == 0, 'Should be 0'",
        "num_ids": 614,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 1104,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.translate(str.maketrans('', '', '0123456789'))\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return test_list.count(tuple(reversed(test_list)))\n",
        "test": "assert     count_bidirectional([]) == 0, 'Empty list'",
        "num_ids": 1848,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    sum = 0\n    for i in L:\n        sum = sum + i\n    return sum\n",
        "test": "assert multiple_to_single([1]) == 1",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list = []\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] == \"be\":\n            adverb_list.append(i)\n    return adverb_list\n",
        "test": "assert     find_adverb_position(\"\") == []",
        "num_ids": 6932,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "test": "assert     surfacearea_cube(1) == 6",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for i in nums:\n        if i >= 0:\n            pos += 1\n    return pos\n    \nnums = [-2, -1, 1, 2]\nprint(positive_count(nums))\n",
        "test": "assert positive_count([-2,-3,-4,-5,-6]) == 0",
        "num_ids": 1115,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(len(list1)):\n        if max_neg < list1[i]:\n            max_neg = list1[i]\n    return max_neg\n",
        "test": "assert     largest_neg([-2,-1,0,-3]) == 0 ",
        "num_ids": 3241,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if K == 1:\n        return test_list\n    if len(test_list) > K:\n        return trim_tuple(test_list[:K], K)\n    else:\n        return test_list\n",
        "test": "assert     trim_tuple([(0, 1, 2), (3, 4, 5)], 3) == [(0, 1, 2), (3, 4, 5)]",
        "num_ids": 2040,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup = []\n    for i in range(len(test_tup1)):\n        num = test_tup1[i] * test_tup2[i]\n        tup.append(num)\n    return tuple(tup)\n",
        "test": "assert     index_multiplication((), ()) == ()",
        "num_ids": 1248,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(Counter(lst).items())\n",
        "test": "assert     count_Occurrence((1,2,3),[1,2,3]) == 3",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n    return cube_nums\n",
        "test": "assert     cube_nums([]) == []",
        "num_ids": 819,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return (n*(n+1)/2)\n",
        "test": "assert     cal_sum(0) == 0",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(l):\n        if len(str) > 0:\n            result.append(str[0])\n            str = str[1:]\n    return result\n",
        "test": "assert     extract_string([], 0) == []",
        "num_ids": 1575,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n",
        "test": "assert     remove_whitespaces('  abcd') == 'abcd'",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "test": "assert     loss_amount(10,10) == 0, \"error in loss_amount\"",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    sum = 0\n    while i < n : \n        if (i % 2 == 0 ) : \n            sum = sum + i \n        i = i + 1\n    return sum\n    ",
        "test": "assert sumofFactors(0) == 0",
        "num_ids": 1049,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    a = re.search(\"z\", text)\n    if a:\n        return True\n    else:\n        return False\n        \ndef test_text_match_wordz():\n    assert text_match_wordz(\"z\") == True\n    assert text_match_wordz(\"abc\") == False\n    assert text_match_wordz(\"abc z\") == True\n    assert text_match_wordz(\"z z\") == True\n    assert text_match_wordz(\"zz zz\") == False\n    assert text_match_wordz(\"zzz zzzz\") == True\n    \ndef text_match_word_count(text, n):\n    '''\n    Write a function that matches a word containing n.\n    '''\n    a = re.search(n, text)\n    if a:\n        return True\n    else:\n        return False\n    \ndef test_text_match_word_count():\n    assert text_match_word_count(\"z\", \"z\") == True\n    assert text_match_word_count(\"abc\", \"z\") == False\n    assert text_match_word_count(\"abc z\", \"z\") == True\n    assert text_match_word_count(\"z z\", \"z\") == False\n    assert text_match_word_count(\"zz zz\", \"z\") == False\n    assert text_match_word_count(\"zzz zzzz\", \"z\") == False\n    \ndef text_match_word_count_all(text, n):\n    '''\n    Write a function that matches a word containing n.\n    '''\n    a = re.search(n, text)\n    if a:\n        return True\n    else:\n        return False\n    \ndef test_text_match_word_count_all():\n    assert text_match_word_count_all(\"z\", \"z\") == True\n    assert text_match_word_count_all(\"abc\", \"z\") == False\n    assert text_match_word_count_all(\"abc z\", \"z\") == True\n    assert text_match_word_count_all(\"z z\", \"z\") == False\n    assert text_match_word_count_all(\"zz zz\", \"z\") == True\n    assert text_match_word_count_all(\"zzz zzzz\", \"z\") == False\n",
        "test": "assert text_match_wordz('The zebra and the owl')",
        "num_ids": 1351,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    if monthnum2 == 2:\n        return True\n    if monthnum2 == 3:\n        return True\n    if monthnum2 == 4:\n        return True\n    if monthnum2 == 5:\n        return True\n    if monthnum2 == 6:\n        return True\n    if monthnum2 == 7:\n        return True\n    if monthnum2 == 8:\n        return True\n    if monthnum2 == 9:\n        return True\n    if monthnum2 == 10:\n        return True\n    if monthnum2 == 11:\n        return True\n    if monthnum2 == 12:\n        return True\n    return False\n",
        "test": "assert     check_monthnumb_number(31) == False, \"check_monthnumb_number(31) should return False\"",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "test": "assert reverse_string_list([\"\"]) == [\"\"]",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # code here\n    return min(lst,key=lambda x:len(x))\n",
        "test": "assert     Find_Min([1,2,3,4]) == [1,2,3,4]",
        "num_ids": 2771,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(1,1)    == 1",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.strip()\n    return re.sub('[A-Z]', '', str1)\n",
        "test": "assert     remove_uppercase(\"\") == \"\"",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Your code here\n    return [n[0] for n in lst]\n",
        "test": "assert ",
        "num_ids": 869,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    a=0\n    for i in str:\n        if i.isupper():\n            a+=1\n    return a\n",
        "test": "assert     upper_ctr('Uppercase') == 1",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    output = []\n    for i in range(len(list1)):\n        output.append([list1[i]])\n        for j in range(i+1,len(list1)):\n            output.append([list1[i],list1[j]])\n    return output\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 1839,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    curr_max = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_so_far = max(curr_max, max_so_far)\n    return max_so_far\n",
        "test": "assert max_subarray_product([-1, -1, -1, -1]) == 1",
        "num_ids": 1571,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for v in dict.values():\n        if v!= n:\n            return False\n    return True\n",
        "test": "assert     check_value({'name': 'a', 'age': 5}, False) == False,'should return False'",
        "num_ids": 1273,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict([i for i in dict1.items() if i[1]!=None])\n",
        "test": "assert     drop_empty({}) == {}, 'Empty dictionary drops nothing'",
        "num_ids": 1203,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = max(arr)\n    arr.remove(product)\n    for i in arr:\n        product *= i\n    return product\n",
        "test": "assert max_product([-3,-2,-1]) == -6, 'Wrong max_product'",
        "num_ids": 1514,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = test_tup[0]\n    if len(test_tup) == 1:\n        return res\n    else:\n        for i in range(1,len(test_tup)):\n            res = res + test_tup[i]\n        return res\n",
        "test": "assert add_pairwise((4, 1, 2, 3)) == {(4, 1), (1, 2), (2, 3), (3, 4)}",
        "num_ids": 1564,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % n\n",
        "test": "assert     find_remainder([1, 2, 3], 5) == 1",
        "num_ids": 975,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(0,n-1):\n        if (l[i+1]-l[i])!=1:\n            return False\n    return True\n",
        "test": "assert     check_Consecutive([0,1,2,4,5,8]) == False, \"Should be False\"",
        "num_ids": 3414,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # SOLUTION\n    return tuple(sorted(set(test_list1).intersection(set(test_list2))))\n    #OR\n    return tuple(test_list1&test_list2)\n    #OR\n    return tuple(set(test_list1).intersection(set(test_list2)))\n",
        "test": "assert     tuple_intersection((), ()) == ()",
        "num_ids": 1986,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for i in str1:\n        if i == ch:\n            newstr += newch\n        else:\n            newstr += i\n    return newstr\n",
        "test": "assert     replace_char(\"abcd\",'','') == \"abcd\"",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    l = []\n    for key, value in dict1.items():\n        l.append((value, key))\n    l.sort(reverse = True)\n    # print(l)\n    return {k: v for v, k in l}\n",
        "test": "assert     sort_counter({\"key\":1, \"ddd\":3, \"ppp\":2}) == {\"key\":1, \"ppp\":2, \"ddd\":3}",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return False\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums) + min(nums)\n",
        "test": "assert big_sum([0,2,3,4,5,6]) == sum([6,0])",
        "num_ids": 1087,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('hello') == 'hello', \"is_lower function fails\"",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if len(str1) == 0:\n        return ''\n    elif str1 == str1.lower():\n        return ''\n    else:\n        return str1\n",
        "test": "assert     remove_lowercase('') == ''",
        "num_ids": 898,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    number_string = str(n)\n    first_digit = number_string[0]\n    return int(first_digit)\n",
        "test": "assert     first_Digit(1)     == 1",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #odd = []\n    #for i in range(len(list)):\n    #    if list[i] % 2 == 1:\n    #        odd.append(list[i])\n    #return odd\n    return [i for i in list if i % 2!= 0]\n    #return even\n    \ndef Divide(n):\n    '''\n    Write a python function which takes a non negative integer and returns the binary representation of that number.\n    '''\n    #binary = []\n    #while n!= 0:\n    #    binary.append(n % 2)\n    #    n = n // 2\n    #return binary\n    return bin(n)\n    #return binary\n    \ndef LeftRotate(arr, d):\n    '''\n    Write a python function which left rotates the given array by d elements. It should perform this in place.\n    '''\n    #for i in range(d):\n    #    arr.append(arr.pop(0))\n    #return arr\n    return arr[d:] + arr[:d]\n    #return arr\n    \ndef Reverse(arr):\n    '''\n    Write a python function which reverses the given array. It should perform this in place.\n    '''\n    #return arr[::-1]\n    return arr.reverse()\n    #return arr\n    \ndef Search(arr, target):\n    '''\n    Write a python function which searches an array and returns the index of first occurrence of the target.\n    '''\n    #return arr.index(target)\n    return arr.index(target, 0)\n    #return arr.index(target, 0, len(arr))\n    \ndef Sort(arr):\n    '''\n    Write a python function which sorts the given array in place.\n    '''\n    #return arr.sort()\n    #return arr\n    #return sorted(arr)\n    \ndef Max(arr):\n    '''\n    Write a python function which returns the maximum of the array.\n    '''\n    #return max(arr)\n    return max(arr, default = -1)\n    #return arr.max()\n    #return arr\n    \ndef Min(arr):\n    '''\n    Write a python function which returns the minimum of the array.\n    '''\n    #return min(arr)\n    return min(arr, default = -1)\n    #return arr.min()\n    #return arr\n    \ndef Copy(arr):\n    '''\n    Write a python function which creates a copy of the given array.\n    '''\n    #return arr.copy()\n    return arr[:]\n    #return arr\n    \ndef Sum(arr):\n    '''\n    Write a python function which calculates the sum of all the elements in the given array.\n    '''\n    #return sum(arr)\n    #return sum(arr, 0)\n    return sum(arr, 0)\n    #return arr\n    \ndef BinarySearch(arr, target):\n    '''\n    Write a python function which searches an array and returns the index of first occurrence of the target.\n    '''\n    #return arr.index(target)\n    return arr.index(target, 0, len(arr))\n    #return arr.index(target, 0, len(arr))\n    \ndef Gaussian(a, b):\n    '''\n    Write a python function which returns the Gaussian function with the given a and b.\n    '''\n    #return exp(-(a**2) / (2*b**2))\n    return exp(-(a**2) / (2*b**2))\n    #return (1 / sqrt(2*pi*b**2)) * exp(-1/(2*b**2) * ((a**2)) )\n    \ndef Fibonacci(n):\n    '''\n    Write a python function which returns the nth fibonacci number.\n    '''\n    #return fib(n)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return Fibonacci(n-1) + Fibonacci(n-2)\n    #return a + b\n    #return fib(n-1) + fib(n-2)\n    \ndef FibonacciPrime(n):\n    '''\n    Write a python function which returns the nth fibonacci prime.\n    '''\n    #return fibo_p(n)\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    return FibonacciPrime(n-1) + FibonacciPrime(n-2)\n    #return a + b\n    #return fibo_p(n-1) + fibo_p(n-2)\n    \ndef ReverseVowels(s):\n    '''\n    Write a python function which returns the reverse vowels of the given string.\n    '''\n    #return s.replace('a','*').replace('e','*').replace('i','*').replace('o','*').replace('u','*')\n    return s.replace('a', '*').replace('e', '*').replace('i', '*').replace('o', '*').replace('u', '*')\n    #return s.replace('a', '*').replace('e', '*').replace('i', '*').replace('o', '*').replace('u', '*')\n    #return s.replace('a', '*').replace('e', '*').replace('i', '*').replace('o', '*').replace('u', '*')\n    \ndef VowelToNumber(s):\n    '''\n    Write a python function which returns the vowels of a string in the corresponding numbers.\n    '''\n    #return vowel_to_num(s)\n    return s.replace('a', '1').replace('e', '1').replace('i', '1').replace('o', '0').replace('u', '0')\n    #return vowel_to_num(s)\n    #return s.replace('a', '1').replace('e', '1').replace('i', '1').replace('o', '0').replace('u', '0')\n    #return s.replace('a', '1').replace('e', '1').replace('i', '1').replace('o', '0').replace('u', '0')\n    \ndef NumberToVowel(n):\n    '''\n    Write a python function which returns the vowels of a number in the corresponding string.\n    '''\n    #return vowel_to_num(n)\n    return chr(ord('a') + int(n))\n    #return vowel_to_num(n)\n    #return chr(ord('a') + int(n))\n    #return vowel_to_num(n)\n    \ndef Game(a, b, c, d):\n    '''\n    Write a python function which returns the 'Game' of the given numbers a, b, c and d.\n    '''\n    #return a + b + c + d\n    return a + b + c + d\n    #return a + b + c + d\n    #return a + b + c + d\n    \ndef GameEven(a, b):\n    '''\n    Write a python function which returns the 'Game' of even numbers in the given range.\n    '''\n    #return a + b\n    return a + b\n    #return a + b\n    #return a + b\n    \ndef GameOdd(a, b):\n    '''\n    Write a python function which returns the 'Game' of odd numbers in the given range.\n    '''\n    #return a + b\n    return a + b\n    #return a + b\n    #return a + b\n    \ndef GameEvenOdd(a, b):\n    '''\n    Write a python function which returns the 'Game' of even and odd numbers in the given range.\n    '''\n    #return a + b\n    return a + b\n    #return a + b\n    #return a + b\n    \ndef Reverse(s):\n    '''\n    Write a python function which reverses the given string.\n    '''\n    #return s.replace(' ', '').replace('\\n', '').replace('\\t', '')[::-1]\n    #return s.replace(' ', '').replace('\\n', '').replace('\\t', '')[::-1]\n    #return s.replace(' ', '').replace('\\n', '').replace('\\t', '')[::-1]\n    #return s.replace(' ', '').replace('\\n', '').replace('\\t'",
        "test": "assert     Split([]) == [], \"should return []\"",
        "num_ids": 3016,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_n = sum([i**3 for i in range(n)])\n    sum_n_2 = sum([i**3 for i in range(n)])\n    return sum_n-sum_n_2\n",
        "test": "assert     difference(1) == 0, \"Expected 0, got \" + str(difference(1))",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1, N) :\n            if A[i] ^ A[j] == 0 :\n                count += 1\n    return count \n",
        "test": "assert not find_Odd_Pair([1,2,3,4,5],3)",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string(\"HEY\") == \"hey\", \"hello\"",
        "num_ids": 2828,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(len(str(n1))):\n        sum += abs(n1%10-n2%10)\n        n1 = n1//10\n        n2 = n2//10\n    return sum\n",
        "test": "assert     digit_distance_nums(1,1) == 0",
        "num_ids": 1092,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub = 0\n    i = 0\n    j = 0\n    while j < size:\n        while i < size:\n            temp_sum = 0\n            while temp_sum <= max_sub and j < size:\n                temp_sum += a[j]\n                j += 1\n            if temp_sum > max_sub:\n                max_sub = temp_sum\n            i += 1\n    return max_sub\n",
        "test": "assert max_sub_array_sum([1], 1) == 1",
        "num_ids": 1456,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in union:\n            union.append(test_tup1[i])\n        if test_tup2[i] not in union:\n            union.append(test_tup2[i])\n    return union\n",
        "test": "assert     union_elements((\"harry\", \"rohan\"), (\"rohan\", \"harry\")) == ('harry', 'rohan', 'harry')",
        "num_ids": 3398,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    lst_len = len(lst)\n    if lst_len == 0:\n        return 0\n    if lst_len == 1:\n        return 1\n    for i in range(lst_len):\n        for j in range(i+1,lst_len):\n            if lst[j] > lst[i]:\n                tmp_len = j - i + 1\n                if tmp_len > max_len:\n                    max_len = tmp_len\n    return max_len\n",
        "test": "assert    Find_Max_Length([1]) == 1",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern,text)\n    #return [v.strip('\"') for v in values]\n    return values\n",
        "test": "assert     extract_values('\"hi\"') == 'hi'",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count = count + 1\n    return count\n",
        "test": "assert     count_Pairs([6,7,8,9,10],11) == 0, 'Failed'",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split(\"\") == []",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return -(sum_digits(-n))\n    elif n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "test": "assert     sum_digits(1) == 1",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1.sort()\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n",
        "test": "assert     issort_list([1,2,3,4]) == True, 'a list with sorted elements is sorted'",
        "num_ids": 1310,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    return [{}]*length\n    ",
        "test": "assert     empty_list(4) == [{}, {}, {}, {}], \"Not correct.\"",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_of_lists = []\n    for x in list1:\n        x_list = []\n        for y in x:\n            x_list.append(y)\n        list_of_lists.append(x_list)\n    list_of_lists.sort()\n    for i in range(len(list_of_lists)):\n        list_of_lists[i] = ''.join(list_of_lists[i])\n    return list_of_lists\n",
        "test": "assert     sort_sublists([\"a\",\"b\",\"d\",\"e\",\"f\",\"c\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"], \"wrong sort_sublists result\"",
        "num_ids": 1828,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    return [x for x in nums if x not in seen and not seen.add(x)]\n",
        "test": "assert     two_unique_nums([1,2,2,3,4,5,6,7,8,8,8]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in range(len(list_data)):\n        if list_data[i] not in unique_list:\n            unique_list.append(list_data[i])\n    product = 1\n    for i in range(len(unique_list)):\n        product = product * unique_list[i]\n    return product\n",
        "test": "assert     unique_product([1, 1, 1, 1, 1]) == 1, 'incorrect'",
        "num_ids": 3156,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    return 2*pi*r*h\n",
        "test": "assert     surfacearea_cylinder(0,0) == 0",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            continue\n        else:\n            return False\n    return True\n    \ndef is_Sub_List(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False\n",
        "test": "assert     is_Sub_Array([1,2,3], [2,3,4])==False, \"Wrong\"",
        "num_ids": 1438,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return n\n    return n % 10\n",
        "test": "assert     last_Digit_Factorial(200) == 0, 'last_Digit_Factorial(200) == 0'",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    assert len(list1) == len(list2) == len(list3)\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n",
        "test": "assert     interleave_lists([\"a\",\"b\",\"c\"],[1,2,3],[\"d\",\"e\",\"f\"],[4,5,6]) == [\"a\",\"d\",\"b\",\"e\",\"a\",\"d\",\"b\",\"e\",\"a\",\"d\",\"b\",\"e\",\"a\",\"d\",\"b\",\"e\",\"a\",\"d\",\"b\",\"e\",\"a\",\"d\",\"b\",\"e\",\"a\",\"d\",\"b\",\"e\",\"a\",\"d\",\"b\",\"e\",\"a\",\"d\",\"b\",\"e\",\"a\",\"d\",\"b\",\"e\",\"a\",\"d\",\"b\",\"e\",\"a\",\"d\",\"b\",\"e\",\"a\",\"d\",\"b\",\"e\",\"a\",\"d\",\"b\",\"e\",\"a\",\"d\",\"b\",\"e\"",
        "num_ids": 3918,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = list(set(test_tup1).difference(set(test_tup2)))\n    return dissimilar\n",
        "test": "assert find_dissimilar((1, 2), (1, 2)) == []",
        "num_ids": 1619,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not isinstance(test_tuple, tuple):\n        return test_tuple\n    else:\n        if len(test_tuple) == 0:\n            return test_tuple\n        elif len(test_tuple) == 1:\n            if test_tuple[0] == even_fnc(test_tuple[0]):\n                return test_tuple[0]\n            else:\n                return test_tuple\n        else:\n            if isinstance(test_tuple[0], tuple):\n                return even_ele(test_tuple[0], even_fnc)\n            else:\n                return test_tuple[0]\n    ",
        "test": "assert     even_ele((1,1), lambda x: x%2 == 1), 'Wrong'",
        "num_ids": 1999,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b*s\n    return a\n",
        "test": "assert     surface_Area(4,4) == 16",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not bool(dict1)\n",
        "test": "assert     my_dict({'a': 1}) == False, 'Test 2: Passed'",
        "num_ids": 711,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    l = re.findall('ly',text)\n    return l\n    \ndef find_verb(text):\n    '''\n    Write a function to find the first verb ending with s and its positions in a given string.\n    '''\n    l = re.findall('s',text)\n    return l\n",
        "test": "assert     find_adverbs(\"Justly, please come to our service. We were thrilled to make your request.\") == ['ly']",
        "num_ids": 2972,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n>len(items):\n        raise ValueError('Not possible to find the n most expensive items')\n    price_heap=[]\n    for item in items:\n        price_heap.append((item[1],item))\n    heapq.heapify(price_heap)\n    result=[]\n    for _ in range(n):\n        result.append(heapq.heappop(price_heap)[1])\n    return result\n",
        "test": "assert expensive_items([[1,2],[2,3]],2) == [[1,2],[2,3]]",
        "num_ids": 1656,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(0, len(l)):\n        if (i == n):\n            return l[:i] + l[i+1:]\n",
        "test": "assert ",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    print(tup)\n    return tup\n",
        "test": "assert     list_tuple([1,2,3,4,5]) == (1,2,3,4,5)",
        "num_ids": 980,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # using max and min as we want minimum difference\n    # using max_min as our return value\n    min_num = float('inf')\n    max_num = float('-inf')\n    \n    for num in nums:\n        if min_num > num:\n            min_num = num\n        if max_num < num:\n            max_num = num\n    return max_num - min_num\n    \nbig_diff([1,2,5,2,4,5,6])",
        "test": "assert     big_diff([100, 300, 200, 150, 0]) == 300",
        "num_ids": 848,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    list_1 = []\n    list_2 = []\n    x = a\n    while x <= b:\n        if x**2 == x:\n            list_1.append(x)\n        x += 1\n    return list_1\n",
        "test": "assert     perfect_squares(1, 1) == [1, ]",
        "num_ids": 1135,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    return (x,y)\n",
        "test": "assert     polar_rect(0,0)==(0,0)",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n",
        "test": "assert     swap_List([1, 1, 1]) == [1, 1, 1], \"Wrong output\"",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(n):\n        res = res * (n-i)/(i+1)\n    return res\n",
        "test": "assert     binomial_Coeff(0,0) == 1, \"Coeff of n = 0 should be 1\"",
        "num_ids": 3253,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) == 0:\n        return \"\"\n    if len(ip) == 4 and ip == \"0\":\n        return \"\"\n    # if len(ip) == 4 and ip == \"0\":\n    #     return \"\"\n    if len(ip) == 4 and ip[0] == \"0\":\n        return \"\"\n    # if len(ip) == 4 and ip[0] == \"0\":\n    #     return \"\"\n    else:\n        ip = ip.lstrip(\"0\")\n    return ip\n",
        "test": "assert     removezero_ip(\"1.0.0.0\") == \"1.0.0.0\"",
        "num_ids": 3425,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not list1:\n        return None\n    if not type(list1) == list:\n        raise ValueError(\"list must be a list\")\n    if not len(list1) == 0:\n        l = len(list1)\n        l1 = list1[0:l-1:2]\n        l2 = list1[1:l-1:2]\n        result = (l1[0] - l2[0])\n        return result\n    else:\n        return None\n",
        "test": "assert     diff_even_odd([]) == None, \"Empty list!\"",
        "num_ids": 1049,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    arr = list(str1)\n    arr_rev = list(str2)\n    arr.reverse()\n    arr_rev.reverse()\n    \n    arr_new = []\n    for i in range(len(arr)):\n        arr_new.append(arr.pop())\n    arr.reverse()\n    arr = arr_new\n    \n    arr_new = []\n    for i in range(len(arr_rev)):\n        arr_new.append(arr_rev.pop())\n    arr_rev.reverse()\n    arr_rev = arr_new\n    \n    n = len(arr)\n    arr_i = 0\n    arr_j = 0\n    count = 0\n    while arr_i < n and arr_j < n :\n        if arr[arr_i] == arr_rev[arr_j] :\n            arr_i += 1\n            arr_j += 1\n            count = 0\n        else :\n            arr_i += 1\n            count += 1\n            \n    return count\n",
        "test": "assert     min_Swaps(\"11\",\"10\") == 1",
        "num_ids": 2062,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for value in tuple_list:\n        size += sys.getsizeof(value)\n    return size\n",
        "test": "assert     tuple_size([]) == 0, 'tuple_size() should return 0'",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    for i in range(len(arr1)):\n        if k == 0:\n            return arr1[i]\n        k -= 1\n        \n    for i in range(len(arr2)):\n        if k == 0:\n            return arr2[i]\n        k -= 1\n    \n    return -1\n",
        "test": "assert find_kth([10,0,0,0,0], [5,2,3,0,1], 1) == 0",
        "num_ids": 1784,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number>0:\n        sum = 0\n        n = number\n        while (n > 0):\n            sum = sum + (n % 10) ** 3\n            n = n // 10\n        if sum == number:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     armstrong_number(371.01) == False",
        "num_ids": 1013,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return number\n",
        "test": "assert     sum_average(1) == 1",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    \n    return True if n%2 == 0 else False\n    \n    \nprint(is_Even(8))\n",
        "test": "assert is_Even(10) == True",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    cnt = {}\n    for i in range(len(str1)):\n        if str1[i] in cnt:\n            cnt[str1[i]]+=1\n        else:\n            cnt[str1[i]]=1\n    for i in range(len(str1)):\n        if cnt[str1[i]]>1:\n            return str1[i]\n    return -1\n",
        "test": "assert     first_repeated_char('aabb') ==     'a'",
        "num_ids": 3296,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    a = []\n    for i in range(1, n):\n        if \"lucid\" in str(i):\n            a.append(i)\n    return a\n",
        "test": "assert isinstance(get_ludic(0),list)",
        "num_ids": 5593,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n    \n",
        "test": "assert     reverse_words(\"\") == \"\"",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(2) == True, '1 is not prime'",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "test": "assert     radian_degree(30) == math.pi/6",
        "num_ids": 2266,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    res = re.search(pattern, text)\n    start = res.start()\n    end = res.end()\n    return text[start:end], start, end\n",
        "test": "assert     find_literals('abc', '^abc$') == ('abc', 0, 3)",
        "num_ids": 1476,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_fact = 1\n    for i in range(1, n + 1):\n        bell_fact = bell_fact * (n - i + 1) // i\n    return bell_fact\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 2735,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list(list1)\n    list2.pop(L)\n    return list2\n",
        "test": "assert     remove_kth_element([0, 1, 2, 3, 4, 5], 2) == [0, 1, 3, 4, 5]",
        "num_ids": 3335,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = 0\n    col_number = N\n    for row in test_list:\n        if row[col_number] > max_value:\n            max_value = row[col_number]\n    return max_value\n",
        "test": "assert     max_of_nth([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 1) == 14",
        "num_ids": 3089,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst)\n    return lst\n    \n",
        "test": "assert     merge([[]]) == [[]]",
        "num_ids": 1435,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum\n",
        "test": "assert     cummulative_sum([1,2,3,4,5]) == 15",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        new_tuple = []\n        for j in range(len(nums[i])):\n            new_tuple.append(nums[i][j])\n        new_list.append(new_tuple)\n    return new_list\n    \nprint(average_tuple([(1, 2), (3, 4), (5, 6)]))\n",
        "test": "assert     average_tuple([('a', 1), ('b', 2), ('c', 3)]) == ['a', 2, 'c']",
        "num_ids": 1862,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup3 = []\n    for i in range(len(test_tup1)):\n        tup3.append(test_tup1[i] % test_tup2[i])\n    return tuple(tup3)\n",
        "test": "assert     tuple_modulo((1,3),(1,2)) == (0,1)",
        "num_ids": 1179,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: return 0\n    steps = min(steps, d)\n    for i in range(1, steps):\n        # d = 2 means the point is (d, 0) and jump 1 step to reach that point is 1.\n        if d-i >= steps:\n            return 1 + min_Jumps(steps - 1, d - i)\n    return 1\n",
        "test": "assert     min_Jumps(steps = 1, d = 3) == 1",
        "num_ids": 1359,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]//nums2[i])\n    return div_list\n",
        "test": "assert ",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    a = test_str.split(\" \")\n    b = \"\"\n    for i in a:\n        if i.isnumeric():\n            b += \" \" + i\n        else:\n            b += i\n    return b\n",
        "test": "assert     move_num(\"12ab3\"), \"123ab\"",
        "num_ids": 1642,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    def check(a):\n        n = len(a)\n        if n <= 1:\n            return n\n        temp = a[n//2]\n        if temp % 2 == 0:\n            return 2\n        if temp % 2 == 1:\n            return 1\n    def helper(a):\n        if a == 0:\n            return 0\n        if a == 1:\n            return 1\n        if a == 2:\n            return 2\n        if a == 3:\n            return 3\n        else:\n            return max(helper(a//2), helper(a//3), helper(a//4), helper(a//5), helper(a//6), helper(a//7), helper(a//8), helper(a//9))\n    if check(a) == 2:\n        return 2\n    if check(a) == 1:\n        return 1\n    if check(a) == 0:\n        return 0\n    return helper(len(a))\n",
        "test": "assert largest_subset([1,2,3,4]) == 1",
        "num_ids": 5767,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    n1=len(arr1)\n    n2=len(arr2)\n    arr1.sort()\n    arr2.sort()\n    if n1==n2:\n        return 0\n    if n==n1:\n        return (arr1[n//2]+arr2[n//2])//2\n    if n==n2:\n        return (arr1[n//2]+arr2[n//2]+1)//2\n    if n==1:\n        return arr1[0]\n    if n==2:\n        return (arr1[0]+arr2[0])//2\n    if n==3:\n        return (arr1[0]+arr2[1]+arr2[2]+arr1[1])//2\n    if n==4:\n        return (arr1[0]+arr2[1]+arr2[2]+arr1[2]+arr1[3]+arr2[3]+arr1[4]+arr2[4])//2\n",
        "test": "assert     get_median([1, 3], [2, 4, 5], 2) == 3, \"Wrong answer\"",
        "num_ids": 3455,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    assert type(n) == int and n >= 0\n    \n    result = []\n    for i in nums:\n        result.append(i**n)\n    \n    return result\n",
        "test": "assert ",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if isinstance(string, str):\n        return string.upper()\n    else:\n        raise TypeError(\"Invalid input\")\n",
        "test": "assert     is_upper(\"HELLO\") == \"HELLO\", \"incorrect\"",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) <= 2:\n        return newList\n    return newList[-1:] + newList[1:-1] + newList[0:1]\n",
        "test": "assert     swap_List([1,1,1,1]) ==    [1,1,1,1]",
        "num_ids": 3420,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Solutions\n    return 1/3 * r**2 * math.sin(math.pi/3)\n",
        "test": "assert triangle_area(0) == 0",
        "num_ids": 4803,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start==0:\n        start=1\n    \n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return end+1\n",
        "test": "assert     find_First_Missing([]) == 1",
        "num_ids": 2973,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces('a b c') == 'a%20b%20c', 'You failed replace_spaces()'",
        "num_ids": 930,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            result.append(list[i])\n    return result\n",
        "test": "assert    Split([]) == []",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)):\n        sub.append((ele[i], ele[(i+1)%len(ele)]))\n    return sub\n",
        "test": "assert      adjac( (1, 2) ) == [(1, 2), (2, 1)]",
        "num_ids": 2085,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "test": "assert     replace_spaces('') == '', 'Should return empty string'",
        "num_ids": 1351,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            for j in range(i,len(num_list)):\n                if num_list[j]!= 0:\n                    num_list[i],num_list[j]=num_list[j],num_list[i]\n                    break\n    return num_list\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 3712,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum1=0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum1=sum1^(arr[i]+arr[j])\n    return sum1\n",
        "test": "assert     pair_xor_Sum([1,2,4],2) == 3",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    \n    for i in iterable:\n        hq.heappush(h, i)\n        \n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     heap_sort([]) ==     []",
        "num_ids": 1092,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # your code here\n    if actual_cost < sale_amount:\n        return False\n    else:\n        return True\n",
        "test": "assert     noprofit_noloss(1500,1000)",
        "num_ids": 1165,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #code goes here\n    #print(v,t)\n    v = (v ** 2) / 2\n    a = 35.74 + 0.6215 * t - 35.75 * v ** 0.16 + 0.4275 * t * v ** 0.16\n    #print(a)\n    b = 35.74 + 0.6215 * t + 35.75 * v ** 0.16 + 0.4275 * t * v ** 0.16\n    #print(b)\n    wind_chill = (a * (10 ** 4)) / (b * (10 ** 4))\n    #print(wind_chill)\n    wind_chill = math.floor(wind_chill)\n    return wind_chill\n",
        "test": "assert     wind_chill(7,12) == -1",
        "num_ids": 1661,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = sample_names\n    nam = []\n    for i in names:\n        if i[0] == i[0].upper():\n            nam.append(i)\n    print(nam)\n    return len(nam)\n",
        "test": "assert     sample_nam([]) == 0",
        "num_ids": 1720,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.strip('()')\n",
        "test": "assert     remove_parenthesis(\"How are you\") == \"How are you\"",
        "num_ids": 1384,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # brute force:\n    if n == 1: return 1\n    elif n == 2: return 3\n    else:\n        return n*(n-1) + 1\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    text = re.sub(r\"\\s+\", \" \", text)\n    text = re.sub(r\"\\n\", \" \", text)\n    text = text.split()\n    #print(text)\n    print(\"\\n\")\n    for word in text:\n        if word == 'z':\n            if word == 'z' and text[0] == 'z' and text[-1] == 'z':\n                continue\n            else:\n                return False\n    return True\n",
        "test": "assert     text_match_wordz_middle('z')",
        "num_ids": 5453,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #write your code here\n    #return the reversed array\n    return input[::-1]\n    \n    \n    \n    \nif __name__ == \"__main__\":\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5], 1)) #[5, 4, 3, 2, 1]\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5], 5)) #[1, 2, 3, 4, 5]\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5], 6)) #[5, 4, 3, 2, 1]\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5], 10)) #[5, 4, 3, 2, 1]\n",
        "test": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) ==[5, 4, 3, 2, 1]",
        "num_ids": 1518,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n",
        "test": "assert     add_dict_to_tuple((1,2,3), {\"a\":\"b\"}) == (1,2,3,{\"a\":\"b\"})",
        "num_ids": 1119,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    #for each cell in the first row\n    for i in range(1, n):\n        #for each cell in the current row\n        for j in range(1, n):\n            #find the maximum average of current cell and its left and right\n            #cell\n            cost[i][j] += max(cost[i][j-1], cost[i-1][j])\n            #find the maximum average of current cell and its upper and lower\n            #cell\n            cost[i][j] += max(cost[i-1][j], cost[i][j-1])\n",
        "test": "assert ",
        "num_ids": 2354,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res = {}\n    for name,height_weight in students.items():\n        if (height_weight[0]>=h) and (height_weight[1]>=w):\n            res[name]=height_weight\n    return res\n",
        "test": "assert     filter_data({'student-1': (1.8, 75.0),'student-2': (1.85, 55.0),'student-3': (1.9, 55.0)}, 1.8, 1.9) == {'student-1': (1.8, 75.0),'student-2': (1.85, 55.0),'student-3': (1.9, 55.0)}",
        "num_ids": 1055,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for index in range(len(nums1)):\n        dict1[nums1[index]] = 1\n        dict2[nums2[index]] = 1\n    count = 0\n    for key in dict1.keys():\n        if key in dict2.keys():\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_result = 0\n    \n    while power:\n        if power % 2 == 1:\n            base_result += (base % 10)\n        power, base = (power - 1), (base // 10)\n    \n    return base_result\n",
        "test": "assert     power_base_sum(0, 10) == 0, 'incorrect'",
        "num_ids": 1348,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    match = re.search(\"[\\\"]+(.*?)[\\\"]\", text1)\n    if match:\n        return match.group(1)\n    else:\n        return ''\n",
        "test": "assert extract_quotation(\"\") == \"\"",
        "num_ids": 1796,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        new_tup += (test_tup[i] * (i + 1),)\n    return new_tup\n",
        "test": "assert     multiply_elements(tuple()) == tuple(), 'First tuple is empty'",
        "num_ids": 1826,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n",
        "test": "assert     sum_list([1,2,3], [4,5,6]) == [1+4, 2+5, 3+6], 'Should sum first list into second.'",
        "num_ids": 1199,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    consec_duplicates = []\n    for key, group in groupby(nums):\n        consec_duplicates.append(key)\n    return consec_duplicates\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 1498,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #surface_area = h*r**2\n    surface_area = math.pi*r**2*h\n    return surface_area\n",
        "test": "assert lateralsurface_cone(0.5,0) == 0",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n",
        "test": "assert     replace_specialchar('123') == '123'",
        "num_ids": 1393,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find rightmost element >= x\n    start = 0\n    end = len(A) - 1\n    \n    # if A is not sorted, then we can't find the first occurrence\n    if A[start] > x or A[end] < x:\n        return -1\n    \n    while start + 1 < end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            start = mid\n        else:\n            end = mid\n    \n    if A[start] == x:\n        return start\n    if A[end] == x:\n        return end\n    return -1\n    ",
        "test": "assert     find_first_occurrence([1,2,3,4,5], 4) == 3",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    \n    n=len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = arr[i]\n        \n    for j in range(1, n):\n        for i in range(0, n-j):\n            dp[i][i+j] = dp[i+1][i+j-1] * arr[i]\n            \n    sum_of_subarray_prod = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            sum_of_subarray_prod += dp[i][j]\n    \n    return sum_of_subarray_prod\n",
        "test": "assert     sum_Of_Subarray_Prod([2,2]) == 4, \"2,2\"",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    \n    temp = 0\n    for i in range(1,31):\n        temp = (n >> i) & 1\n        if temp:\n            n = n - (1 << i)\n    \n    return n\n",
        "test": "assert     set_middle_bits(1) == 1",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index==0 or a[index-1]!=x:\n        return index\n    else:\n        return index-1\n",
        "test": "assert     left_insertion([1,2,3],3) == 2",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex,string)\n    if match is None:\n        return False\n    else:\n        return True\n",
        "test": "assert not check_str(\"h\"), \"h\"",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 210,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(3) == 6",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n+1):\n        if (1+math.sqrt(1+8*i))/2 == int((1+math.sqrt(1+8*i))/2):\n            return i\n    return -1\n",
        "test": "assert     find_Index(2) == 1",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {}\n    for i in range(len(test_tup)-1):\n        dict_tup[test_tup[i]] = test_tup[i+1]\n    return dict_tup\n",
        "test": "assert     tuple_to_dict((1, 2)) == {1: 2}, \"Should be {1: 2}\"",
        "num_ids": 2107,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    result = True\n    s1 = s.lower()\n    if len(s)!= len(set(s1)) :\n        result = False\n    return result\n",
        "test": "assert     all_Characters_Same('aacd') == False",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # a = math.sqrt(3) * side / 2\n    a = side / 2\n    return 4 * a * a\n",
        "test": "assert     area_tetrahedron(1) == 1, 'Incorrect area!'",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([], -3) == []",
        "num_ids": 1195,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return True if None in test_tup else False\n",
        "test": "assert     check_none((1,2,3)) == False, \"Wrong Answer!\"",
        "num_ids": 1131,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(range(startnum, endnum + 1))\n",
        "test": "assert     divisible_by_digits(1, 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1440,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0:\n        return None\n    area = math.pi*(r**2)\n    if a>360:\n        return area\n    else:\n        return None\n",
        "test": "assert sector_area(r=10,a=360) == None, \"incorrect return value\"",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # if a == b == c == 0 then no LCS\n    if len(X)==0 or len(Y)==0 or len(Z)==0:\n        return 0\n    # create a DP table, dp[i][j] = 1 if substring X[i:] and Y[j:] is the LCS\n    dp = [[0 for i in range(len(Y) + 1)] for j in range(len(X) + 1)] \n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    # for each cell, there are three possibilities:\n    # 1) cell is 0\n    # 2) cell is 1\n    # 3) cell is 2\n    # we need to return the maximum of three possibilities\n    return dp[-1][-1]\n",
        "test": "assert     lcs_of_three(X = \"ABC\", Y = \"ABC\", Z = \"ABC\") == 3",
        "num_ids": 2105,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    lst1 = []\n    if(isinstance(str1,str)):\n        str1 = str1.split()\n        for i in range(len(str1)):\n            if(str1[i][0].isupper()):\n                lst1.append(str1[i].title())\n            else:\n                lst1.append(str1[i].lower())\n        return \" \".join(lst1)\n    else:\n        raise Exception('Please Enter a valid String')\n",
        "test": "assert capital_words_spaces(\"abcd efghi\") == \"abcd efghi\"",
        "num_ids": 1868,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: x.split('.')[0])\n",
        "test": "assert     sort_numeric_strings(['7','4','1','3','8']) == ['1','3','4','7','8'], 'incorrect'",
        "num_ids": 1805,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "test": "assert     add_tuple([1, 2, 3], (4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or not arr[i]:\n        return False\n    if 2 * i + 2 < len(arr) and arr[i] > arr[2 * i + 2]:\n        return False\n    if 2 * i + 1 < len(arr) and arr[i] > arr[2 * i + 1]:\n        return False\n    return True\n",
        "test": "assert     check_min_heap_helper([10, 12, 6, 4, 6, 2, 12, 16], 1) == False",
        "num_ids": 1422,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    elif n == 1: return 1\n    elif n == 2: return 1\n    elif n == 3: return 2\n    elif n == 4: return 3\n    elif n == 5: return 5\n    else:\n        L = 6\n        R = n\n        while(R > L):\n            p = (((R - 1) * R) >> 1) + 1\n            if (L <= R) and (p <= L) and (p >= R):\n                break\n            elif (L > R):\n                return \"Invalid value\"\n            else:\n                if (p & 1) == 0:\n                    R = p\n                else:\n                    L = p + 1\n        if L == R:\n            return L\n        elif L == R - 1:\n            return L + 1\n        else:\n            return L + 2\n",
        "test": "assert     jacobsthal_num(2) == 1     , \"jacobsthal_num(2) == 1\"",
        "num_ids": 3325,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    new_list = []\n    for i in range(0, len(test_list)):\n        new_list.append((test_list[i][0], test_list[i][1]))\n    new_list = sorted(new_list, key=lambda x: x[0])\n    min_k_list = []\n    for i in range(0, K):\n        min_k_list.append(new_list[i])\n    for i in range(K, len(new_list)):\n        if new_list[i][0] < min_k_list[0][0]:\n            min_k_list[0] = new_list[i]\n        else:\n            for j in range(0, K):\n                if new_list[i][0] < min_k_list[j][0]:\n                    min_k_list.insert(j, new_list[i])\n                    break\n    return min_k_list\n    '''\n    Without using lambda, the above function is still O(n^2)\n    Time complexity: O(n^2)\n    Space complexity: O(n^2)\n    '''\n",
        "test": "assert     min_k([(1,2),(2,3),(3,4),(4,5),(5,6)], 3) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 2204,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = set(l1)\n    l2 = set(l2)\n    l3 = set(l3)\n    #create empty list \n    common = []\n    for i in l1:\n        if i in l2 and i in l3:\n            common.append(i)\n    return common\n",
        "test": "assert     extract_index_list([1, 2, 3], ['a', 'b'], ['c', 'd']) == [], \"Not correct\"",
        "num_ids": 2120,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the array\n    numbers.sort()\n    # Get the last index, which is the second smallest number\n    index = 0\n    for i in range(len(numbers)):\n        if numbers[i] == min(numbers[:i+1]):\n            index = i\n            break\n    # Return the second smallest number\n    return numbers[index+1]\n",
        "test": "assert second_smallest([1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4]) == 1,'should return 1.'",
        "num_ids": 975,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #match = re.search(r\"a+b\", text)\n    #match = re.search(r\"a(b)+\", text)\n    match = re.search(r\"a(b)+\", text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one( 'abcd' )",
        "num_ids": 862,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Sort the list in ascending order.\n    test_list.sort()\n    n = len(test_list)\n    # Create an empty count and set count to 0.\n    count = 0\n    # Traverse the list from second item and pair it with the item\n    # one item before.\n    for i in range(1, n):\n        for j in range(i):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs([]) == 0, \"Empty list\"",
        "num_ids": 3571,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = 0\n    list_count = {}\n    for i in range(len(list1)):\n        tuple_list = (list1[i],)\n        if tuple_list not in list_count:\n            list_count[tuple_list] = 1\n            count += 1\n        else:\n            list_count[tuple_list] += 1\n    return list_count\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True if type(num) == float and (num-int(num)) < 0.01 and int(num) == num else False\n",
        "test": "assert     is_decimal('7.42i') == False, 'is_decimal() should return False for a decimal number with precision of 2.'",
        "num_ids": 2983,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n    # or\n    # arr.count(arr[0]) == len(arr)\n",
        "test": "assert     unique_Element([1,1,1,2,2,2,3,3,4,4,4,4,5,5,5,5,5]) == False, 'incorrect'",
        "num_ids": 1406,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == '31':\n        return True\n    elif monthnum3 == '30':\n        return True\n    elif monthnum3 == '29':\n        return True\n    elif monthnum3 == '28':\n        return True\n    else:\n        return False\n",
        "test": "assert not check_monthnumber_number(13) ",
        "num_ids": 1750,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    n=len(arr)\n    if n<=1:\n        return -1\n    \n    arr.sort()\n    minimum_diff = arr[1]-arr[0]\n    for i in range(1,n-1):\n        diff = arr[i+1]-arr[i]\n        if diff<minimum_diff:\n            minimum_diff = diff\n    return minimum_diff\n",
        "test": "assert find_min_diff([1,4,5,6,8],3) == 1",
        "num_ids": 1462,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr(\"122345\") == 6, \"test 1 failed\"",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    if n == 1: \n        return 1\n    polite_count = 0\n    i = 1\n    while n > i: \n        if n % i == 0: \n            polite_count += 1\n        i += 1\n    return polite_count + n - 1\n",
        "test": "assert is_polite(1) == 1",
        "num_ids": 2789,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result\n",
        "test": "assert pair_wise([]) == []",
        "num_ids": 1264,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort()\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert     get_pairs_count([1, 2, 3, 4], 3) == 1, \"Wrong output\"",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # li1 =[1,2,3]\n    # li2 =[2,3,4]\n    #Difference between 2 list : 3\n    return (list(set(li1) - set(li2)))\n",
        "test": "assert     Diff([],[]) == []",
        "num_ids": 1715,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num = list(filter(lambda x: x % 2!= 0, range(1, n+1)))\n    return sum(odd_num)\n",
        "test": "assert     odd_num_sum(2) == 1, \"Not equal\"",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    brackets = {\"(\":\")\", \"{\":\"}\", \"[\":\"]\"}\n    # 1. Pop all the opening brackets\n    for i in range(len(exp)):\n        if exp[i] in brackets.values():\n            stack.append(exp[i])\n        elif exp[i] in brackets.keys():\n            # if stack is not empty and top of stack is \"(\"\n            if stack and brackets[exp[i]] == stack[-1]:\n                # pop the top element and compare with the last element\n                stack.pop()\n            else:\n                # if \"(\" is not balanced then return false\n                return False\n    # 2. Check if the stack is empty or not\n    if stack:\n        # if stack is not empty then return false\n        return False\n    else:\n        # if stack is empty then return true\n        return True\n",
        "test": "assert     check_expression('((a+b)+c') == False",
        "num_ids": 2014,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(\" \")\n    result = []\n    for word in words:\n        if len(word) == K:\n            continue\n        result.append(word)\n    return \" \".join(result)\n",
        "test": "assert     remove_length(\"\", 1) == \"\"",
        "num_ids": 3451,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    matches = re.finditer(pattern,text)\n    for match in matches:\n        substring = match.group()\n        pos = match.start()\n        count += 1\n        if len(substring)==len(pattern):\n            print('Pattern found')\n        elif len(substring) < len(pattern):\n            print('Not found')\n        print(substring,pos)\n    if count == 0:\n        print('Not found')\n    else:\n        print('Found',count,'times')\n",
        "test": "assert     occurance_substring('abcd','ab') == None",
        "num_ids": 3153,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2==0:\n            if nums[i]%2==1:\n                return False\n    return True\nodd_position([1,2,3,4,5])\nodd_position([1,2,3,4,5,6])\nodd_position([1,2,3,4,5,6,7,8])\n",
        "test": "assert odd_position([1,2,3,4,5,6,7]) == False",
        "num_ids": 3508,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    str = test_str\n    return sum([1 for i in range(len(str)-1) if str[i] == 'a' or str[i] == 'e' or str[i] == 'i' or str[i] == 'o' or str[i] == 'u'])\n",
        "test": "assert     count_vowels(\"\") == 0",
        "num_ids": 5030,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    # write your solution here\n    for i in range(len(arr)):\n        if arr[i] not in arr[:i]:\n            sum = sum + arr[i]\n    return sum\n    \n",
        "test": "assert     find_sum([0, 1, 2, 3])     == 6",
        "num_ids": 4784,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 3032,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict_count = {}\n    count = 1\n    for sublist in list1:\n        if type(sublist) == list:\n            dict_count[count] = sublist\n            count += 1\n    return dict_count\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 1909,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    list_of_combinations = []\n    for a in test_list:\n        list_of_combinations.append(list(combinations(a, 2)))\n    # print(list_of_combinations)\n    return list_of_combinations\n",
        "test": "assert     find_combinations([(0,1),(2,3),(4,5),(6,7),(8,9),(10,11),(12,13)]) == [",
        "num_ids": 1711,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    if n == 1 :\n        return 1\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            count += 1\n    return count\n",
        "test": "assert count_divisors(1) == 1, 'Input should be an integer greater than zero'",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        if i%2==1:\n            odd_sum += arr[i]\n    return odd_sum\n",
        "test": "assert     odd_length_sum([1,2,3,4,5,6]) == 12",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = float(r), float(g), float(b)\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1956,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\n",
        "test": "assert     mul_even_odd([10,11,12,13,14,15,16,17,18,19,20]) == (10,10)",
        "num_ids": 1466,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n",
        "test": "assert     (('a', 'b', 'c'), 1) == (('a', 'b', 'c'), 1)",
        "num_ids": 1565,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pl = 0\n    pr = len(a) - 1\n    if pr == -1:\n        return -1\n    while pl <= pr:\n        mid = (pl + pr) // 2\n        if x <= a[mid]:\n            pr = mid - 1\n        else:\n            pl = mid + 1\n    if pl == len(a):\n        return len(a)\n    else:\n        return pl\n",
        "test": "assert     right_insertion([1,2,3,4], 5) == 4",
        "num_ids": 1082,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"ab{3}\")\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     not text_match_three(\"ab\")",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 17,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n    \nif __name__ == \"__main__\":\n    print(new_tuple(['1', '2', '3'], '1234'))\n    print(new_tuple([1, 2, 3], '1234'))",
        "test": "assert     new_tuple([\"apple\", \"my\", \"surname\", \"is\", \"mike\", \"name\", \"my\"], \"apple\") == (\"apple\", \"my\", \"surname\", \"is\", \"mike\", \"name\", \"my\")",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums!= None:\n        for i in range(0, len(nums)):\n            if i % 2 == 0 and nums[i] % 2!= 0:\n                return False\n        return True\n    else:\n        return None\n",
        "test": "assert     even_position([2, 4, 6, 8, 10])",
        "num_ids": 1095,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return\n",
        "test": "assert     remove_nested([(1,2,3), (3,4), (5,6), (7,)]) == [(1,2,3), (3,4), (5,6)]",
        "num_ids": 1593,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count = count+1\n    return count\n",
        "test": "assert     count_list([]) == 0, 'Empty list is not counted.'",
        "num_ids": 1289,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #l=len(arr)\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low+high)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1",
        "test": "assert     last([1,3,6,9,11], 11) == 4",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 17,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    res = re.search('^a.*b$', text)\n    return res!= None\nprint(text_starta_endb('apples'))\n",
        "test": "assert     text_starta_endb('') == False",
        "num_ids": 1256,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # keys = dict.keys()\n    # sum = 0\n    # for i in keys:\n    #     sum += dict[i]\n    return sum(dict.values())\n",
        "test": "assert     return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6, \"Wrong Answer\"",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2!= 0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_odd(2) == 1",
        "num_ids": 1006,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n",
        "test": "assert     _sum([1, 2, 3, 4]) == 10, \"Wrong output\"",
        "num_ids": 2344,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    print(f\"d is {d}\")\n    print(f\"n is {n}\")\n    print(f\"{d}<<{d}\")\n    return (n << d) & 0xFFFFFFFF\n    \n",
        "test": "assert     left_rotate(0,3) == 0",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n",
        "test": "assert     remove_all_spaces('Python') == 'Python'",
        "num_ids": 1145,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    return count\n",
        "test": "assert     test_three_equal(2,2,2) == 1",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            left += 1\n        else:\n            rotations += 1\n            # swap elements\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n    return rotations\n",
        "test": "assert     count_rotation([])     ==     0     ,    \"Expected: 0\"",
        "num_ids": 2337,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return 0\n    x = n\n    s = 1\n    while x % 2 == 0:\n        x = x / 2\n        s += 1\n    for _ in range(s):\n        x = x * x\n        if x == 1:\n            return 1\n        elif x == n:\n            return 0\n    return 0\n",
        "test": "assert not is_perfect_square(15)",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if sum(arr)%2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_product_even([1,3,5]) == False ",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    length_lists = len(lists)\n    if length_lists == 0:\n        return []\n    max_value = lists[0]\n    for i in range(1, length_lists):\n        if lists[i] > max_value:\n            max_value = lists[i]\n    return max_value\n",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 3511,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_value = 0\n    for i in range(len(test_str)):\n        count = 1\n        for j in range(i+1,len(test_str)):\n            if test_str[i] == test_str[j]:\n                count += 1\n            else:\n                break\n        if max_value < count:\n            max_value = count\n    return max_value\nprint(max_run_uppercase('AAAAAABbbcccddd'))\n",
        "test": "assert max_run_uppercase(\"A\") == 1, \"Should return 1\"",
        "num_ids": 2248,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if nums:\n        for num in nums:\n            if num % 2!= 0:\n                return num\n",
        "test": "assert first_odd([2,1]),    'First odd'",
        "num_ids": 1375,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_list = []\n    for i in test_tup:\n        test_list.append(i)\n    if K in test_list:\n        return True\n    else:\n        return False\n    \ndef unpack_tuple(test_tup):\n    '''\n    Write a function to remove the tuples with the k or not.\n    '''\n    new_list = []\n    for i in test_tup:\n        if i!= tuple_with_K:\n            new_list.append(i)\n    return new_list\n    \ndef most_frequent_item(test_tup):\n    '''\n    Write a function to find the most frequent item in the list\n    '''\n    freq_list = []\n    test_list = []\n    for i in test_tup:\n        freq_list.append(i)\n    freq_list = sorted(freq_list)\n    for i in range(len(freq_list)):\n        freq = freq_list[i]\n        test_list.append(freq)\n    return max(test_list)\n    \ndef single_item_occurrence(test_tup):\n    '''\n    Write a function to find the first occurrence of an item in the list\n    '''\n    test_list = []\n    for i in test_tup:\n        test_list.append(i)\n    return test_list.index(max(test_list))\n    \ndef item_in_tuple(test_tup, item):\n    '''\n    Write a function to find if the item is in the tuple\n    '''\n    test_list = []\n    for i in test_tup:\n        test_list.append(i)\n    if item in test_list:\n        return True\n    else:\n        return False\n        \ndef index_of_element_in_tuple(test_tup, item):\n    '''\n    Write a function to find the index of an element in the tuple\n    '''\n    test_list = []\n    for i in test_tup:\n        test_list.append(i)\n    return test_list.index(item)\n",
        "test": "assert     check_K([1,2,3], -1) == False, 'Wrong'",
        "num_ids": 1408,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert     check_smaller((5,2,3), (4,3,4)) == False",
        "num_ids": 1651,
        "indeed": false
    }
]