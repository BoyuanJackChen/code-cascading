[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1).intersection(set(test_tup2)))\n",
        "test": "assert     similar_elements([1, 2, 3, 4], [3, 5, 6, 6]) == [3]",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert     is_not_prime(1) == False, \"Test case 1 Failed\"",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    #my_list = nums\n    #heap = hq.nlargest(n,my_list)\n    #print(heap)\n    return sorted(nums,reverse=True)[:n]\n",
        "test": "assert     heap_queue_largest([1,2,3,4,5],1) == [5], \"Wrong\"",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        print(\"\\nTrue\") \n    else: \n        print(\"\\nFalse\") \n",
        "test": "assert not is_Power_Of_Two (4), True",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\b[a-z]{4,}\\b', text)\n    return result\n",
        "test": "assert find_char_long(\"The narwhal bacons at midnight.\") == ['bacon']",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # return a list of squares of individual elements in a list\n    # return all_nums_squared\n    return [i ** 2 for i in nums]\n",
        "test": "assert     square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 326,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    from collections import Counter\n    str=str.lower()\n    count=Counter(str)\n    \n    rotations=0\n    for c in count:\n        if count[c]>1:\n            rotations=max(rotations,(count[c]-1)*(count[c]-1))\n    return rotations\n",
        "test": "assert     find_Rotations('') == 0, 'None'",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch, '', 1)\n    s=s.strip(ch)\n    return s\nprint(remove_Occ('abd', 'd'))\n",
        "test": "assert     remove_Occ(\"abc\",\"c\") == \"ab\"",
        "num_ids": 2326,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) == 0:\n        return M\n    else:\n        rows = []\n        for row in M:\n            rows.append(sum(row))\n        rows.sort()\n        i = 0\n        j = 0\n        for row in M:\n            while j < len(M) and rows[i] < sum(M[j]):\n                i += 1\n            M[i], M[j] = M[j], M[i]\n            j += 1\n        return M\n",
        "test": "assert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (l*b)*h\n    return vol",
        "test": "assert     find_Volume(1,1,1) == 1",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r\"[a-z]+_[a-z]+\",text)!= None\n",
        "test": "assert     text_lowercase_underscore('text_lowercase_underscore') == True, 'You failed the test!'",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "test": "assert ",
        "num_ids": 103,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    count1=0\n    count2=0\n    for i in range(len(string)):\n        if string[i] not in string[count1:count2]:\n            count1=count1+1\n            count2=count2+1\n            if count2==len(string):\n                break\n        else:\n            count2=count2+1\n    return string[count1:]\n",
        "test": "assert     str_to_list('') == '', 'Should return an empty list'",
        "num_ids": 2477,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = set(arraynums)\n    for num in arraynums:\n        if num in arraynums:\n            return True\n    return False\n",
        "test": "assert     test_duplicate([2,3,1,0,2,5,3]) == True",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0:\n        a = 1\n        while a <= x:\n            if x % a == 0:\n                return True\n            else:\n                a = a + 1\n    else:\n        return False\n",
        "test": "assert     is_woodall(2) == True",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_lst = list(str(num))\n    n = len(num_lst) - 1\n    for i in range(n):\n        if int(num_lst[i]) > int(num_lst[n]):\n            return False\n        n -= 1\n    return True\n",
        "test": "assert     rev(2) == 1",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    for ele in arr:\n        max_num = max(max_num,ele)\n    return max_num\n    \n    \n    \n    \n    \nif __name__ == '__main__':\n    arr = [1,2,3,5]\n    print(find_Max_Num(arr))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     find_Max_Num([1,2,3,5,6]) == 6, \"Should return 6\"",
        "num_ids": 2446,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x < 0 and y > 0):\n        return True\n    elif(x > 0 and y < 0):\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(4, -3) == True, \"Expected: True\"",
        "num_ids": 743,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # The smallest octagonal number is 1 and the third octagonal number is 6.\n    # The next octagonal numbers are 8, 15, 34, 55,...\n    return (int(n*(n+1)/2))\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #code here\n    result = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            result += 1 if all(char.isdigit() for char in substring) else 0\n    return result\n",
        "test": "assert ",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
        "test": "assert     smallest_num([1]) == 1",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #solution\n    \n    diff = 0\n    \n    for i in range(len(test_list)-1):\n        diff = max(diff, abs(test_list[i+1] - test_list[i]))\n    \n    return diff\n",
        "test": "assert     max_difference([0, 0, 0, 0, 0, 0, 0, 0]) == 0",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    \n    # the base case is when there is only one element in the list\n    if len(data_list) == 1:\n        return data_list[0]\n    \n    # otherwise recurse on the first element of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([1,2,3,4,5,6,7,8,9,10]) == sum([1,2,3,4,5,6,7,8,9,10]) == 55",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([-1,2,3,4]) == 3, \"Error 2: the result should be 3\"",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #https://practice.geeksforgeeks.org/problems/number-of-ways-to-partition-a-set-of-bell-numbers/0/\n    #Base cases \n    #a=1\n    #b=1\n    #c=2\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    a=1\n    b=1\n    c=2\n    for i in range(3,n+1):\n        a=a+b\n        b=a+c\n        c=a+b\n    return a+b+c\n",
        "test": "assert     bell_number(2) == 2",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if(A[i]>A[i+1]):\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([1,2,4,5,3,4]) == False",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n    \ndef sublist(l,s):\n    '''\n    Write a function to find the first position of the sublist in a list.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return i\n    return -1\n    \ndef is_substring(string, pattern):\n    '''\n    Write a function to check if the given string is a substring of the given pattern.\n    '''\n    if pattern in string:\n        return True\n    else:\n        return False\n        \ndef is_substring_re(string, pattern):\n    '''\n    Write a function to check if the given string is a substring of the given pattern.\n    '''\n    return re.search(pattern, string)\n    \ndef count_substring(string, sub_string):\n    '''\n    Write a function to count the occurrences of a given substring in a string.\n    '''\n    return re.findall(sub_string,string)\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    return s == s[::-1]\n",
        "test": "assert     is_sublist([1, 2, 3], [1, 2]) == True",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)>1:\n        if len(Input[0])==len(Input[1]):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     find_equal_tuple([(1, 2), (2, 3)]) == True",
        "num_ids": 2475,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n        return nums\n    \n    def partition(nums, left, right):\n        pivot = nums[right]\n        i = left\n        for j in range(left, right):\n            if nums[j] <= pivot:\n                swap(nums, i, j)\n                i += 1\n        swap(nums, i, right)\n        return i\n    \n    def quicksort(nums, left, right):\n        if left >= right:\n            return\n        p = partition(nums, left, right)\n        quicksort(nums, left, p-1)\n        quicksort(nums, p+1, right)\n    \n    quicksort(nums, 0, len(nums)-1)\n    return nums\n",
        "test": "assert     comb_sort([3]) == [3], \"Single number\"",
        "num_ids": 852,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    count = 1\n    while count <= n:\n        if (n - count) == (count * count):\n            return True\n        count += 1\n    return False\n",
        "test": "assert not dif_Square(0)",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] == \"R\":\n            if colors[i] == \"R\" or colors[i] == \"G\":\n                continue\n            else:\n                return False\n        if patterns[i] == \"B\":\n            if colors[i] == \"B\" or colors[i] == \"G\":\n                continue\n            else:\n                return False\n    return True\n    \nprint(is_samepatterns(['R', 'R', 'R'],['R', 'R', 'R']))\n",
        "test": "assert     is_samepatterns(['c','c','c','c'], ['c','c','c','c']) == True, 'incorrect'",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # for i in range(len(test_list)):\n    #     for j in range(len(test_list)):\n    #         if (test_list[i][0] % K == 0) and (test_list[j][0] % K == 0):\n    #             print(test_list[i], test_list[j])\n    for i in range(len(test_list)):\n        if (test_list[i][0] % K == 0):\n            print(test_list[i])\n",
        "test": "assert ",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11)==0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Diff(12) == False",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     word_len('xyz') == False, \"The length of the word is even\"",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(2*n-1)//2\n",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*pow(r,3)\n",
        "test": "assert     volume_sphere(3) == 4/3*math.pi*3**3, \"incorrect\"",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr=input()\n    result=0\n    for i in strr:\n        result=result+ord(i)\n    return result%26\n",
        "test": "assert     get_Char('abc') == ((ord('a') + ord('b') + ord('c')) % 26), \"Test Failed\"",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 0:\n        raise Exception(\"N must be > 0\")\n    return n\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n",
        "test": "assert     surfacearea_sphere(1) == 4 * math.pi * 1**2, \"surfacearea_sphere Failed.\"",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    result = 0\n    # Your code here\n    while n > 0:\n        result = result + 2 * (n - 1) + 1\n        n = n - 1\n    return result\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n",
        "test": "assert     merge_dictionaries_three({1:1},{2:2},{3:3}) == {1:1,2:2,3:3}",
        "num_ids": 1088,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n",
        "test": "assert     freq_count([]) ==             {}",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return -1 if n < 0 else n - 1 if n % 1 == 0 else n - 1.5 if n - 1.5 > 0 else n - 2 if n - 2 > 0 else n - 3 if n - 3 > 0 else n - 4 if n - 4 > 0 else n - 5 if n - 5 > 0 else n - 6 if n - 6 > 0 else n - 7 if n - 7 > 0 else n - 8 if n - 8 > 0 else n - 9 if n - 9 > 0 else n - 10 if n - 10 > 0 else n - 11 if n - 11 > 0 else n - 12 if n - 12 > 0 else n - 13 if n - 13 > 0 else n - 14 if n - 14 > 0 else n - 15 if n - 15 > 0 else n - 16 if n - 16 > 0 else n - 17 if n - 17 > 0 else n - 18 if n - 18 > 0 else n - 19 if n - 19 > 0 else n - 20 if n - 20 > 0 else n - 21 if n - 21 > 0 else n - 22 if n - 22 > 0 else n - 23 if n - 23 > 0 else n - 24 if n - 24 > 0 else n - 25 if n - 25 > 0 else n - 26 if n - 26 > 0 else n - 27 if n - 27 > 0 else n - 28 if n - 28 > 0 else n - 29 if n - 29 > 0 else n - 30 if n - 30 > 0 else n - 31 if n - 31 > 0 else n - 32 if n - 32 > 0 else n - 33 if n - 33 > 0 else n - 34 if n - 34 > 0 else n - 35 if n - 35 > 0 else n - 36 if n - 36 > 0 else n - 37 if n - 37 > 0 else n - 38 if n - 38 > 0 else n - 39 if n - 39 > 0 else n - 40 if n - 40 > 0 else n - 41 if n - 41 > 0 else n - 42 if n - 42 > 0 else n - 43 if n - 43 > 0 else n - 44 if n - 44 > 0 else n - 45 if n - 45 > 0 else n - 46 if n - 46 > 0 else n - 47 if n - 47 > 0 else n - 48 if n - 48 > 0 else n - 49 if n - 49 > 0 else n - 50 if n - 50 > 0 else n - 51 if n - 51 > 0 else n - 52 if n - 52 > 0 else n - 53 if n - 53 > 0 else n - 54 if n - 54 > 0 else n - 55 if n - 55 > 0 else n - 56 if n - 56 > 0 else n - 57 if n - 57 > 0 else n - 58 if n - 58 > 0 else n - 59 if n - 59 > 0 else n - 60 if n - 60 > 0 else n - 61 if n - 61 > 0 else n - 62 if n - 62 > 0 else n - 63 if n - 63 > 0 else n - 64 if n - 64 > 0 else n - 65 if n - 65 > 0 else n - 66 if n - 66 > 0 else n - 67 if n - 67 > 0 else n - 68 if n - 68 > 0 else n - 69 if n - 69 > 0 else n - 70 if n - 70 > 0 else n - 71 if n - 71 > 0 else n - 72 if n - 72 > 0 else n - 73 if n - 73 > 0 else n - 74 if n - 74 > 0 else n - 75 if n - 75 > 0 else n - 76 if n - 76 > 0 else n - 77 if n - 77 > 0 else n - 78 if n - 78 > 0 else n - 79 if n - 79 > 0 else n - 80 if n - 80 > 0 else n - 81 if n - 81 > 0 else n - 82 if n - 82 > 0 else n - 83 if n - 83 > 0 else n - 84 if n - 84 > 0 else n - 85 if n - 85 > 0 else n - 86 if n - 86 > 0 else n - 87 if n - 87 > 0 else n - 88 if n - 88 > 0 else n - 89 if n - 89 > 0 else n - 90 if n - 90 > 0 else n - 91 if n - 91 > 0 else n - 92 if n - 92 > 0 else n - 93 if n - 93 > 0 else n - 94 if n - 94 > 0 else n - 95 if n - 95 > 0 else n - 96 if n - 96 > 0 else n - 97 if n - 97 > 0 else n - 98 if n - 98 > 0 else n - 99 if n - 99 > 0 else n - 100 if n - 100 > 0 else n - 101 if n - 101 > 0 else n - 102 if n - 102 > 0 else n - 103 if n - 103 > 0 else n - 104 if n - 104 > 0 else n - 105 if n - 105 > 0 else n - 106 if n - 106 > 0 else n - 107 if n - 107 > 0 else n - 108 if n - 108 > 0 else n - 109 if n - 109 > 0 else n - 110 if n - 110 > 0 else n - 111 if n - 111 > 0 else n - 112 if n - 112 > 0 else n - 113 if n - 113 > 0 else n - 114 if n - 114 > 0 else n - 115 if n - 115 > 0 else n - 116 if n - 116 > 0 else n - 117 if n - 117 > 0 else n - 118 if n - 118 > 0 else n - 119 if n - 119 > 0 else n - 120 if n - 120 > 0 else n - 121 if n - 121 > 0 else n - 122 if n - 122 > 0 else n - 123 if n - 123 > 0 else n - 124 if n - 124 > 0 else n - 125 if n - 125 > 0 else n - 126 if n - 126 > 0 else n - 127 if n - 127 > 0 else n - 128 if n - 128 > 0 else n - 129 if n - 129 > 0 else n - 130 if n - 130 > 0 else n - 131 if n - 131 > 0 else n - 132 if n - 132 > 0 else n - 133 if n - 133 > 0 else n - 134 if n - 134 > 0 else n - 135 if n - 135 > 0 else n - 136 if n - 136 > 0 else n - 137 if n - 137 > 0 else n - 138 if n - 138 > 0 else n - 139 if n - 139 > 0 else n - 140 if n - 140 > 0 else n - 141 if n - 141 > 0 else n - 142 if n - 142 > 0 else n - 143 if n - 143 > 0 else n - 144 if n - 144 > 0 else n - 145 if n - 145 > 0 else n - 146 if n - 146 > 0 else n - 147 if n - 147 > 0 else n - 148 if n - 148 > 0 else n - 149 if n - 149 > 0 else n - 150 if n - 150 > 0 else n - 151 if n - 151 > 0 else n - 152 if n - 152 > 0 else n - 153 if n - 153 > 0 else n - 154 if n - 154 > 0 else n - 155 if n - 155 > 0 else n - 156 if n - 156 > 0 else n - 157 if n - 157 > 0 else n - 158 if n - 158 > 0 else n - 159 if n - 159 > 0 else n - 160 if n - 160 > 0 else n - 161 if n - 161 > 0 else n - 162 if n - 162 > 0 else n - 163 if n - 163 > 0 else n - 164 if n - 164 > 0 else n - 165 if n - 165 > 0 else n - 166 if n - 166 > 0 else n - 167 if n - 167 > 0 else n - 168 if n - 168 > 0 else n - 169 if n - 169 > 0 else n - 170 if n - 170 > 0 else n - 171 if n - 171 > 0 else n - 172 if n - 172 > 0 else n - 173 if n - 173 > 0 else n - 174 if n - 174 > 0 else n - 175 if n - 175 > 0 else n - 176 if n - 176 > 0 else n - 177 if n - 177 > 0 else n - 178 if n - 178 > 0 else n - 179 if n - 179 > 0 else n - 180 if n - 180 > 0 else n - 181 if n - 181 > 0 else n - 182 if n - 182 > 0 else n - 183 if n - 183 > 0 else n - 184 if n - 184 > 0 else n - 185 if n - 185 > 0 else n - 186 if n - 186 > 0 else n - 187 if n - 187 > 0 else n - 188 if n - 188 > 0 else n - 189 if n - 189 > 0 else n - 190 if n - 190 > 0 else n - 191 if n - 191 > 0 else n - 192 if n - 192 > 0 else n - 193 if n - 193 > 0 else n - 194 if n - 194 > 0 else n - 195 if n - 195 > 0 else n - 196 if n - 196 > 0 else n - 197 if n - 197 > 0 else n - 198 if n - 198 > 0 else n - 199 if n - 199 > 0 else n - 200 if ",
        "test": "assert closest_num(3) == 2",
        "num_ids": 2228,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = list1\n    max_length = 0\n    for i in words:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n",
        "test": "assert     len_log([])==0, \"Error 1\"",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for i in str1:\n        if i in sub_str:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     find_substring('a', 'b') == False",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return True\n    elif n == 2:\n        return True\n    elif n % 3 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_undulating(4) == True, \"4 should be undulating.\"",
        "num_ids": 446,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert     power(3,4) == 81, \"incorrect value\"",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = (test_list[0])\n    for val in test_list:\n        if val[0]<min_val[0]:\n            min_val = val\n    return min_val\n",
        "test": "assert     index_minimum([('a', 1), ('b', 2), ('c', 3), ('d', 4)]) == ('a', 1)",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=len(lst[0])\n    for i in lst:\n        length=len(i)\n        if length<min_length:\n            min_length=length\n    return min_length\n",
        "test": "assert     Find_Min_Length([[], [], []]) == 0",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    print(count)\n",
        "test": "assert ",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # num_list = []\n    # for i in list1:\n    #     num_list = num_list + i\n    # for i in num_list:\n    #     print(i)\n    #     print(num_list.count(i))\n    return {i:num_list.count(i) for i in num_list}\n",
        "test": "assert     frequency_lists([[1], 2]) == {1: 2, 2: 1}",
        "num_ids": 820,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    print(total)\n    return total\n",
        "test": "assert     multiply_num([]) == 1",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = str(bin(n))[2:]\n    return binary_string.replace(\"0b\", \"\")\n",
        "test": "assert     decimal_to_binary(0) == \"0\"",
        "num_ids": 394,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert num to a string\n    s = str(num)\n",
        "test": "assert ",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # if k is less than the number of elements\n    # in the array then return the kth element\n    if k <= len(arr):\n        return arr[k-1]\n    else:\n        return -1\n",
        "test": "assert     kth_element([1,2,3,4,5], 1) == 1",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    print(words)\n    return words[0] + ''.join(x.title() for x in words[1:])\n",
        "test": "assert     snake_to_camel('camel_snake') == 'camelSnake', 'Wrong!'",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    total = 0\n    for i in range(n):\n        for j in range(m):\n            if i%2==0:\n                if j%2==0:\n                    total = total + 1\n    return total\n",
        "test": "assert     eulerian_num(2, 2) == 1",
        "num_ids": 4293,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sort first level\n    # iterate through each item in the list\n    # sort and return the whole list\n    return sorted(input_list, key=lambda x: x[0])\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "test": "assert     count([True,True,True,True,True]) == 5, \"incorrect result\"",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for x in range(len(test_tup)):\n        test_list.append(test_tup[x])\n    return test_list\n",
        "test": "assert     add_lists([1, 2, 3], (4, 5, 6, 7)) == ([1, 2, 3, 4, 5, 6, 7])",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    h = []\n    l = []\n    m = []\n    for i in range(len(num1)):\n        heapq.heappush(h, num1[i])\n    for j in range(len(num2)):\n        heapq.heappush(l, num2[j])\n    for k in range(len(num3)):\n        heapq.heappush(m, num3[k])\n    \n    for t in range(len(m)):\n        if(len(h) == 0):\n            if(len(l) == 0):\n                heapq.heappush(h, m[t])\n            else:\n                heapq.heappush(l, m[t])\n        else:\n            if(len(l) == 0):\n                heapq.heappush(h, m[t])\n            else:\n                if(m[t] <= h[0] and m[t] <= l[0]):\n                    heapq.heappush(l, m[t])\n                elif(l[0] <= m[t] and m[t] <= h[0]):\n                    heapq.heappush(h, m[t])\n                else:\n                    heapq.heappush(h, l[0])\n                    heapq.heappush(l, m[t])\n    result = []\n    while(len(h)!= 0 or len(l)!= 0):\n        if(len(h)!= 0):\n            result.append(h[0])\n            heapq.heappop(h)\n        else:\n            result.append(l[0])\n            heapq.heappop(l)\n    return result\n",
        "test": "assert     merge_sorted_list([1,2,4],[],[1,3,5,6,7,8,9]) == [1,1,2,3,4,5,6,7,8,9]",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(0,len(s),n):\n        if s[i]=='1':\n            odd_count += 1\n    return odd_count\n",
        "test": "assert     odd_Equivalent('11111111', 2) == 4",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l = []\n    for i in nestedlist:\n        if type(i) == list:\n            l.append(common_in_nested_lists(i))\n        else:\n            l.append(i)\n    return set(l[0]) & set(l[1])\n",
        "test": "assert     common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]) == ",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(\"123\") == True, \"Bad result\"",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)>0:\n            return False\n    return True\n",
        "test": "assert empty_dit([{},{1:2},{}]) == False, \"Error, empty dictionary returns false!\"",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not nums:\n        return 0\n    s = sum(nums)\n    s = s % 10\n    return s\n",
        "test": "assert     tuple_to_int((1, 2, 3)) == 6",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for i in range(len(row)):\n            try:\n                row[i] = float(row[i])\n            except:\n                pass\n    return test_list\n",
        "test": "assert     list_to_float([]) == [], 'empty list'",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list('hello world') == ['hello', 'world']",
        "num_ids": 196,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # s = set()\n    # for i in range(len(arr)):\n    #     if arr[i] not in s:\n    #         s.add(arr[i])\n    #     else:\n    #         return arr[i]\n    # return -1\n    # O(n)\n    \n    if not arr:\n        return -1\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return -1\n    \n    mid = len(arr)//2\n    \n    if arr[mid] == arr[mid-1] and arr[mid]!= arr[mid+1]:\n        return arr[mid]\n    \n    if arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]:\n        return -1\n    \n    if arr[mid]!= arr[mid-1] and arr[mid]!= arr[mid+1]:\n        return search(arr[:mid])\n    \n    if arr[mid] == arr[mid-1] and arr[mid]!= arr[mid+1]:\n        return search(arr[mid+1:])\n    \n    if arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]:\n        return search(arr[:mid])\n        \n    return -1\n",
        "test": "assert     search([1, 2, 3, 1, 2, 3, 1]) == 1",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max1 = max2 = max3 = float('-inf')\n    for tup in list1:\n        x = tup[0]\n        y = tup[1]\n        max1 = max(max1, x)\n        max2 = max(max2, y)\n        max3 = max(max3, abs(x*y))\n    return max3, max1, max2\n    \ndef test_max_product_tuple():\n    assert max_product_tuple([(2, 3), (4, 5), (1, 1), (-3, -5)]) == (6, 4, 3)\n    assert max_product_tuple([(1, 2), (2, 1)]) == (2, 1, 1)\n    assert max_product_tuple([(5, 4), (1, 5), (1, 1)]) == (10, 5, 5)\n    assert max_product_tuple([(-1, -2), (-2, -1)]) == (-1, -2, -1)\n    assert max_product_tuple([(0, 0), (0, 0), (0, 0)]) == (0, 0, 0)\n    assert max_product_tuple([]) == (None, None, None)\n    print('done!')\n",
        "test": "assert max_product_tuple([(2,3),(1,4),(3,2)]) == (4, 6)",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n",
        "test": "assert     amicable_numbers_sum(1000) == 2 + 300 + 400 + 800 + 1008",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\n",
        "test": "assert     angle_complex(1, 2) == cmath.phase(1+2j)",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            max_diff = max(max_diff, i - (i + 1) // 2)\n    return max_diff\n",
        "test": "assert     find_length(\"11111111\") == 0",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1, a+1):\n        if a % i == 0:\n            sum += i\n    for j in range(1, b+1):\n        if b % j == 0:\n            sum += j\n    return sum\n",
        "test": "assert     sum(1,5) == 7",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(1, 2) == 2, \"Error, should be 2\"",
        "num_ids": 134,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    nwords = []\n    for word in str:\n        if len(word) > n:\n            nwords.append(word)\n    return nwords\n",
        "test": "assert     long_words(5, ['bob', 'carl', 'carol', 'bob', 'carl']) == ['carl']",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    result = []\n    for i in range(len(my_matrix)):\n        if len(my_matrix[i])!= len(my_matrix[0]):\n            return False\n    for j in range(len(my_matrix)):\n        for k in range(len(my_matrix[j])):\n            if my_matrix[j][k] > 0:\n                result.append(my_matrix[j][k])\n    return len(set(result)) == len(result)\n",
        "test": "assert     magic_square_test([[4,9,2],[3,5,7],[8,1,6],[1,5,9,3]]) == False, \"Check your magic_square_test function\"",
        "num_ids": 2705,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    myDict = defaultdict(lambda:0)\n    for i in nums:\n        myDict[i]+=1\n    maxVal = max(myDict.values())\n    for i in myDict:\n        if myDict[i] == maxVal:\n            return i\ndef remove_dups(nums):\n    '''\n    Write a function that takes in a list and returns a new list with the same elements\n    in the original list, but with no duplicates.\n    '''\n    new_list = []\n    for i in nums:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\ndef subarray_with_given_sum(arr,sum_val):\n    '''\n    Write a function to find the first occurence of a subarray of given sum.\n    '''\n    sum_dict = defaultdict(lambda:0)\n    for i in range(len(arr)):\n        sum_dict[arr[i]]+=1\n        if sum(sum_dict.values()) > 0:\n            break\n    if sum(sum_dict.values()) > 1:\n        for i in range(len(arr)-1):\n            currSum = arr[i]\n            while currSum > sum_val:\n                currSum = currSum-arr[i]\n                if currSum == sum_val:\n                    return (i,i+1)\n            else:\n                continue\n    else:\n        return None\ndef merge_sorted_lists(nums1,nums2):\n    '''\n    Write a function that takes in two sorted integer lists and returns a sorted integer\n    list that contains only the elements that are common between the two lists.\n    The new list should be made by concatenating the original lists.\n    '''\n    if len(nums1) > 0:\n        new_list = []\n        if len(nums2) > 0:\n            for i in nums1:\n                if i in nums2:\n                    new_list.append(i)\n            return new_list\n        else:\n            return nums1\n    else:\n        return nums2\ndef min_max_sum(arr):\n    '''\n    Write a function to find the sum of the three largest numbers in an array.\n    '''\n    largest_1 = largest_2 = largest_3 = -1\n    sums = []\n    for i in range(len(arr)):\n        sums.append(arr[i]+largest_3+largest_2)\n        if arr[i] > largest_3:\n            largest_3 = largest_2\n            largest_2 = largest_1\n            largest_1 = arr[i]\n        elif arr[i] > largest_2:\n            largest_2 = arr[i]\n        elif arr[i] > largest_1:\n            largest_1 = arr[i]\n    return (max(sums),min(sums))\ndef find_min_max_index(arr):\n    '''\n    Write a function that takes in a list of integers and returns the minimum and maximum\n    integers.\n    '''\n    if len(arr) > 1:\n        min_val = arr[0]\n        max_val = arr[0]\n        for i in arr:\n            if i < min_val:\n                min_val = i\n            if i > max_val:\n                max_val = i\n    else:\n        min_val = max_val = arr[0]\n    return (min_val,max_val)\ndef reverse_words(string):\n    '''\n    Write a function to reverse the words in a given sentence\n    '''\n    new_str = \"\"\n    if type(string) == str:\n        for i in string:\n            if i!= \" \":\n                new_str+=i\n            else:\n                new_str+=\" \"\n        new_str = new_str[::-1]\n        i = 0\n        new_str = new_str.split()\n        for i in range(len(new_str)):\n            new_str[i] = new_str[i][::-1]\n        return \" \".join(new_str)\n    else:\n        return string\ndef reverse_words_using_stack(string):\n    '''\n    Write a function to reverse the words in a given sentence\n    '''\n    if type(string) == str:\n        new_str = \"\"\n        i = 0\n        while i < len(string):\n            if i!= len(string)-1 and string[i] == \" \" and string[i+1]!= \" \":\n                new_str+=\" \"\n            if i!= len(string)-1 and string[i]!= \" \" and string[i+1] == \" \":\n                new_str+=\" \"\n            if i!= len(string)-1 and string[i]!= \" \":\n                new_str+=string[i]\n            i+=1\n        return new_str\n    else:\n        return string\ndef max_sum_subarray(nums):\n    '''\n    Write a function to find the largest sum of a contiguous subarray.\n    '''\n    if len(nums) > 1:\n        currSum = nums[0]\n        currMax = nums[0]\n        for i in nums[1:]:\n            currSum += i\n            if currSum > currMax:\n                currMax = currSum\n            if currSum < 0:\n                currSum = 0\n        return currMax\n    else:\n        return nums[0]\ndef binary_search(arr,element):\n    '''\n    Write a function that takes in a sorted array of integers and a target integer, and returns\n    the index of the target if it is contained in the array, or -1 if it is not contained in the array.\n    '''\n    if len(arr) > 0:\n        first = 0\n        last = len(arr)-1\n        mid = (first+last)//2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            return binary_search(arr[:mid],element)\n        else:\n            return binary_search(arr[mid+1:],element)\n    else:\n        return -1\ndef reverse_linked_list(head):\n    '''\n    Write a function that takes in the head of a singly linked list and returns a new linked list\n    that is the reverse of the given list.\n    '''\n    if head == None or head.next == None:\n        return head\n    prev = None\n    curr = head\n    while curr:\n        temp = curr.next\n        curr.next = prev\n        prev = curr\n        curr = temp\n    return prev\ndef reverse_linked_list_iterative(head):\n    '''\n    Write a function that takes in the head of a singly linked list and returns a new linked list\n    that is the reverse of the given list.\n    '''\n    if head == None or head.next == None:\n        return head\n    curr = head\n    prev = None\n    while curr:\n        curr.next, prev, curr = prev, curr, curr.next\n    return prev\ndef get_intersection_node(a1,a2):\n    '''\n    Write a function that takes in two singly linked lists and returns the node that they\n    intersect. If they do not intersect, return None.\n    '''\n    if not a1 or not a2:\n        return None\n    curr1 = a1\n    curr2 = a2\n    while curr1!= curr2:\n        if curr1:\n            curr1 = curr1.next\n        else:\n            curr1 = a2\n        if curr2:\n            curr2 = curr2.next\n        else:\n            curr2 = a1\n    return curr1\ndef get_intersection_node_recursive(a1,a2):\n    '''\n    Write a function that takes in two singly linked lists and returns the node that they\n    intersect. If they do not intersect, return None.\n    '''\n    if not a1 or not a2:\n        return None\n    if a1 == a2:\n        return a1\n    if a1.next == a2:\n        return a1\n    i",
        "test": "assert     max_occurrences([1,2,2,3,3,3]) == 3",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u']\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            str1[i] = str1[i].lower()\n    print(str1)\n    return ''.join(str1[::-1])\n",
        "test": "assert     reverse_vowels('a') == 'a'",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(map(str,tup1))\n",
        "test": "assert     tup_string((1,2,3)) == '123'",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        if i < 0:\n            total += i\n    return total\n",
        "test": "assert     sum_negativenum([]) == 0, \"empty list\"",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    assert n > 0, 'N must be positive integer'\n    n = n * 2 - 1\n    return int(n * (2*n - 1)/3 + 1)\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count+=1\n    return count/len(nums)\n",
        "test": "assert     zero_count([0]) == 1, '0 counts as a non-zero'",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_Power_Of_Two(n): \n        if (n == 0): \n            return False\n        if (n & (n - 1) == 0): \n            return True\n        return False\n    if is_Power_Of_Two(n): \n        return False\n    if not is_Power_Of_Two(n): \n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            if (n == i * i): \n                return True\n        return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(4) == False, \"Incorrect for 4\"",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "test": "assert     circle_circumference(r=0) == 0",
        "num_ids": 177,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        for j in i:\n            result.append(j)\n    return result\n",
        "test": "assert     extract_singly([[1,2,3],[4,5,6]]) == [1,2,3,4,5,6]",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        x = i\n        for j in range(x):\n            if nums[j] > nums[x]:\n                nums[x], nums[j] = nums[j], nums[x]\n        x = n - i - 1\n        for j in range(x):\n            if nums[j] > nums[x]:\n                nums[x], nums[j] = nums[j], nums[x]\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_samepair([0,1,2], [0,1,2], [0,1,2]) == 3, \"Error, the result should be 3.\"",
        "num_ids": 1200,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    try: \n        no_of_list = 0\n        for i in Input: \n            if(type(i) == list): \n                no_of_list += 1\n        return no_of_list \n    except Exception as e: \n        print(str(e)) \n",
        "test": "assert     find_lists(tuple()) == 0, f\"Error: {find_lists(tuple())}\"",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    m_diff = -1\n    for i in range(0,len(arr)-1):\n        if abs(arr[i]-arr[i+1]) > m_diff:\n            m_diff = abs(arr[i]-arr[i+1])\n    return m_diff\n",
        "test": "assert     max_Abs_Diff([-1, -2, 2, 0, -3, -4]) == 4",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_improved(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_faster(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_faster_improved(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_faster_improved_2(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_improved_2(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_improved_3(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_improved_4(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_improved_5(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            els",
        "test": "assert ",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    lst3 = list1 + list2\n    for i in list2:\n        while i in lst3:\n            lst3.remove(i)\n    return lst3\n",
        "test": "assert     remove_elements([1,2,3],[1,2,3]) == []",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2!= 0:\n        print('ERROR')\n    else:\n        i = 0\n        total = 0\n        while i <= n//2:\n            total += i\n            i += 1\n        return total\n",
        "test": "assert ",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = l / s\n    return (s * a) / 2\n",
        "test": "assert     area_polygon(2, 3) == 1.5",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    if n == sum:\n        return True\n    else:\n        return False\n",
        "test": "assert     div_sum(13) == False,    'failed: true'",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict1={}\n    for i in range(0,len(str1)):\n        if str1[i] in dict1:\n            dict1[str1[i]]+=1\n        else:\n            dict1[str1[i]]=1\n    result=0\n    for i in range(0,len(str1)):\n        if dict1[str1[i]]>1:\n            result+=1\n    return result\n",
        "test": "assert count_char_position('') == 0, \"Check your logic\"",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    #create an empty set\n    even_pairs = set()\n    \n    #loop through the list and count the number of pairs\n    for i in A:\n        if i ^ 2 in even_pairs:\n            #add to the set\n            even_pairs.add(i ^ 2)\n    return len(even_pairs)\n",
        "test": "assert     find_even_pair([1,3,2]) == 0, 'wrong answer'",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i <<= 1\n    return i >> 1\n",
        "test": "assert     next_power_of_2(1) == 1 ",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a_count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            a_count += 1\n    return a_count\n",
        "test": "assert ",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "test": "assert     sum_range_list([1, 2, 3, 4, 5], 0, 2) == 6, \"Wrong answer\"",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(3)*(a*(a+1))/2\n",
        "test": "assert ",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for letter in s:\n        if letter == 'd':\n            count += 1\n        if letter == 'a':\n            count += 1\n        if letter == 'n':\n            count += 1\n        if letter == 'e':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance('stdstd') == 2, 'Test 1 fail'",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        for i in test_tuple:\n            if type(i)!= type(test_tuple[0]):\n                return False\n        return True\n    except:\n        return False\n",
        "test": "assert     check_type(tuple([1, 2, 3, 4, 5])) == True, 'The elements in the tuple are not same'",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    c = 0\n    for i in range(n):\n        if arr[i] == x:\n            c += 1\n    return (c > n/2)\n",
        "test": "assert ",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if str == '':\n        return ''\n    str = list(str)\n    for i in range(0,len(str)):\n        if i % 2 == 1:\n            str.pop(i)\n    return ''.join(str)\n",
        "test": "assert     odd_values_string('ohio') == 'ohio'",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     min_of_three(1,2,3) == 1",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    s = bin(l)[2:]\n    e = bin(r)[2:]\n    t = ''.join(['0' for i in range(len(s)-1)])\n    if len(s) < len(e):\n        for i in range(len(e)-len(s)):\n            t = t + '0'\n    if t == s:\n        return False\n    else:\n        return True\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(4,0,3) == False",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    \n    return arr\n    \ndef re_arrange_array_1(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    \n    return arr\n    \ndef re_arrange_array_2(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    \n    return arr\n    \ndef re_arrange_array_3(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    \n    return arr\n    \ndef re_arrange_array_4(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    \n    return arr\n    \ndef re_arrange_array_5(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    \n    return arr\n    \ndef re_arrange_array_6(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    \n    return arr\n    \ndef re_arrange_array_7(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    ",
        "test": "assert     re_arrange_array([5, 4, 3, 2, 1, 0], 4) == [-5, -4, -3, -2, -1, 0]",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n",
        "test": "assert     replace_blank('','') == ''",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1, reverse = True)[:n]\n",
        "test": "assert larg_nnum([],0) == []",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * pi * r * h\n",
        "test": "assert     lateralsuface_cylinder(1,5) == 5",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n    \nprint(volume_cube(3))\n",
        "test": "assert     volume_cube(3) == 27",
        "num_ids": 139,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    i = n & 0xaaaaaaaa\n    return i \n",
        "test": "assert     even_bit_set_number(11) == False",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        result[i] = test_list.count(i)\n    return result\n    \nprint(check_occurences([(1, 2), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5)]))\n",
        "test": "assert ",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    substring_counter = 0\n    for i in range(len(str)):\n        substring = str[i]\n        for j in range(i,len(str)):\n            if j == i:\n                continue\n            substring += str[j]\n            if substring in str:\n                substring_counter += 1\n                break\n    return substring_counter\n",
        "test": "assert     number_of_substrings('aaa') == 2, 'Test 1 failed'",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m <= 0:\n        return 0\n    if n <= 0:\n        return 1\n    return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m, n-2)\n",
        "test": "assert     get_total_number_of_sequences(0,0) == 0",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    list1[-1] = list2[0]\n    return list1\n",
        "test": "assert     replace_list([],[]) == []",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac(\"\") == 0",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    count = 1\n    while N > count**2:\n        count+=1\n    return count**2",
        "test": "assert     next_Perfect_Square(1) == 1",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n    else:\n        max_sub = max_sum(arr[1:])\n        max_sum_sub = max_sub\n        for i in range(len(arr)):\n            if arr[i] > max_sub:\n                max_sub = arr[i]\n            elif max_sub > max_sub + arr[i]:\n                max_sub = max_sub + arr[i]\n        return max(max_sub, max_sum_sub)\n",
        "test": "assert ",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sqrt = number\n    while sqrt * sqrt > number:\n        sqrt = sqrt - (sqrt * sqrt) / (2 * sqrt)\n    return sqrt\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    m = 0\n    table = [[0]*n for i in range(n)]\n    max_length = 1\n",
        "test": "assert ",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    while n > 0:\n        total += 1 / n\n        n -= 1\n    return total\n",
        "test": "assert     harmonic_sum(1) == 1.0",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i = 0\n    res = []\n    while i < len(array_nums1):\n        j = 0\n        while j < len(array_nums2):\n            if array_nums1[i] == array_nums2[j]:\n                res.append(array_nums1[i])\n            j += 1\n        i += 1\n    return res\n    \ndef partition(array, low, high): \n    i = ( low-1 )        \n    pivot = array[high]    \n    for j in range(low, high): \n        if   array[j] <= pivot: \n            i = i+1 \n            array[i],array[j] = array[j],array[i] \n    array[i+1],array[high] = array[high],array[i+1] \n    return ( i+1 ) \n",
        "test": "assert     intersection_array([1,2,3,4,5,6,7,8,9],[8,9,10]) == [8,9], \"intersection_array([1,2,3,4,5,6,7,8,9],[8,9,10]) == [8,9]\"",
        "num_ids": 930,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 5), 8) == 0, \"Expected 0\"",
        "num_ids": 232,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for index,_ in enumerate(list):\n        if _ == element:\n            list.insert(index,element)\n            break\n    return list\n",
        "test": "assert     insert_element([1], 1) == [1, 1]",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for i in numbers:\n        theta = cmath.phase(i)\n        r = cmath.polar(i)[0]\n        result.append((theta, r))\n    return result\n",
        "test": "assert     convert((-1,2)) == (-3.14,1.0)",
        "num_ids": 4585,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert     count_integer([]) == 0",
        "num_ids": 313,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    res = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] == l[j] or l[i] == l[k] or l[j] == l[k]:\n                    continue\n                comb = (l[i], l[j], l[k])\n                if len(comb) == n:\n                    res.append(comb)\n    return res\n",
        "test": "assert     combinations_colors([], 1) == []",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 2:\n        return 0\n    number = 3\n    count = 0\n    while (number <= n):\n        is_prime = True\n        for i in range(2, number):\n            if (number % i) == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        number += 1\n    return count\n",
        "test": "assert     count_Primes_nums(1) == 0,'return type: 0'",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     swap_numbers(4,5) == (5,4)",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (0, 1, 2, 3, 4, 5, 6)\n    max_value = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_value:\n            max_value = test_tup1[i]\n        if test_tup2[i] > max_value:\n            max_value = test_tup2[i]\n    return max_value\n",
        "test": "assert     maximize_elements((2, 5), (5, 2)) == (5, 2)",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return 2\n    if n == 2:\n        return 3\n    i = 5\n    a = 3\n    while i <= n:\n        if is_prime(a):\n            i += 1\n            continue\n        i += 1\n        b = i\n        while i > 1:\n            if a % i == 0:\n                a += i\n                break\n            i -= 1\n        if i == 1:\n            a += 2\n    return a\n",
        "test": "assert     newman_prime(2) == 3",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1 = test_tup1[0]\n    test_tup2 = test_tup2[0]\n    try:\n        return (test_tup1 / test_tup2,test_tup1 // test_tup2)\n    except ZeroDivisionError:\n        return(\"Error: Cannot Divide by Zero\")\n",
        "test": "assert     division_elements((4,2), (2,2)) == (2,2)",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return part1, part2\n",
        "test": "assert     split_two_parts(['abcd', 'efgh', 'ijk', 'lmn'], 2) == ([['abcd', 'efgh'], ['ijk', 'lmn']], [['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l'], ['m', 'n']])",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert ",
        "num_ids": 163,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    if type(S) == type([]):\n        if type(step) == type(1):\n            if step < 1:\n                return None\n            else:\n                for i in range(0, len(S), step):\n                    result.append(S[i:i + step])\n                return result\n        else:\n            print(\"step must be an integer\")\n    else:\n        print(\"S must be a list\")\n",
        "test": "assert     list_split([1, 2, 3], 1) == [[1], [2], [3]]",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 2 * l * (l ** 2)\n",
        "test": "assert     lateralsurface_cube(1) == 2",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    Sum = 0\n    for i in range(1, n + 1):\n        if(i % 2!= 0):\n            Sum = Sum + i**2\n    return Sum\n",
        "test": "assert     square_Sum(2) == 1",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*find_star_num(n-1) + n\nprint(find_star_num(10))\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('A') == 65",
        "num_ids": 196,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            result=result+arr[i]\n    print(result)\n",
        "test": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 140, 'Wrong output'",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #define the even_Power_Sum function\n    even_power_sum = 0\n    #for loop through all the even natural numbers\n    for i in range(1,n+1): \n        #if the number is even and the power is 5, increment the sum by 1\n        if i%2==0 and i**5==1:\n            even_power_sum += 1\n    #return the sum\n    return even_power_sum\n",
        "test": "assert     even_Power_Sum(1) == 0",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for x in test_list:\n        new_list.append(x[1])\n    return new_list\n",
        "test": "assert     rear_extract([(1,2),(3,4),(5,6)]) ==    [2,4,6], 'Test Failed'",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtracted_tuples = []\n",
        "test": "assert     substract_elements((1,2,3,4), (4,2,1,2)) == (1,2,3,3)",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    value = 0\n    for i in range(n):\n        value = value + math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return value\n",
        "test": "assert     even_binomial_Coeff_Sum(0)==0",
        "num_ids": 2352,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume\n",
        "test": "assert     volume_cylinder(1, 1) == 3.1415926535897932384626433832795028841971693993751",
        "num_ids": 2322,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k, v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n    return new_dict\n",
        "test": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'b': 2, 'c': 3}, \"Fail\"",
        "num_ids": 403,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count",
        "test": "assert     count_first_elements((1,2,3)) == 0, \"First element 1\"",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    tot = 1\n    i = 1\n    while i <= n:\n        tot = tot * i\n        i += 1\n    return tot\n",
        "test": "assert     is_num_decagonal(1) == 1, '1st decagonally nth number 1st decagonally'",
        "num_ids": 2342,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for idx,i in enumerate(dlist):\n        if i == item:\n            return True, idx\n    return False, -1\n",
        "test": "assert sequential_search([1,2,3,4,5,6,7,8,9], 2) == (True, 1)",
        "num_ids": 310,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set()\n    test_list.sort()\n    for x in test_list:\n        if x in test_set:\n            return False\n        else:\n            test_set.add(x)\n    return True\n",
        "test": "assert all_unique([1,1,2,3,3,5]) == False",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n",
        "test": "assert     sub_list([1,2,3], [1,2,3]) == [0,0,0], \"Wrong Answer\"",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    n = str(n)\n    for i in n:\n        count += 1\n        if i > n[0]:\n            return False\n    return True\n        \nif __name__ == '__main__':\n    print(validate(1234))\n",
        "test": "assert     validate(123456) == False",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n    else:\n        return True\n",
        "test": "assert check_element([1,2,3,4],6) == False",
        "num_ids": 286,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'[ab]{2,3}', text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('abc') == True",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #We will keep track of the largest sum during the traversal of the array. \n    max_sum = a[0]\n    #We will store the cumulative sum of the array.\n    cum_sum = 0\n    #For every index of the array, we will see if the cumulative sum is larger than max_sum. If so, then max_sum will be updated to the cumulative sum.\n    for i in range(n):\n        cum_sum += a[i]\n        if cum_sum > max_sum:\n            max_sum = cum_sum\n        \n        #If the cumulative sum becomes less than k, then the largest sum we have seen so far is the cumulative sum.\n        if cum_sum < k:\n            cum_sum = a[i]\n",
        "test": "assert ",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #def square_Sum(n): \n    #square = 0\n    #for i in range(n): \n    #    square = square + (i*i)\n    #return square \n    #return n * (n + 1) * (2 * n + 1) / 6\n    #return (n * (n + 1) * (2 * n + 1)) / 6\n    #return (n * (n + 1) * (2 * n + 1) / 6)\n    return (n * (n + 1) * (2 * n + 1)) // 6\n",
        "test": "assert     square_Sum(10) == 385",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    max_length_list=[]\n    for i in range(0,len(list1)):\n        if len(list1[i])>max_length:\n            max_length=len(list1[i])\n            max_length_list.append(list1[i])\n    return max_length_list\n",
        "test": "assert ",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1 or k==1:\n        return 1\n    if n==2 and k==2:\n        return 2\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n",
        "test": "assert     count_no_of_ways(1, 1) == 1, \"Wrong answer\"",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n//m) \n",
        "test": "assert     find(11, 10) == 1",
        "num_ids": 163,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2-2*w*h\n",
        "test": "assert otherside_rightangle(2,1) == 1, '3'",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_number = max(listval)\n    return max_number\n",
        "test": "assert     max_val([1,2,3,4]) == 4",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(range(1,number+1))\n",
        "test": "assert ",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    inv_count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert     get_Inv_Count([]) == 0",
        "num_ids": 754,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    x = []\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            x.extend(flatten_list(list1[i]))\n        else:\n            x.append(list1[i])\n    return x\n",
        "test": "assert flatten_list([1,2,3,[4,5,6,7]]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = 0\n    for i in range(len(stdata)):\n        if stdata[i][1] > max_val:\n            max_val = stdata[i][1]\n    return max_val\n",
        "test": "assert     max_aggregate([(1,2),(3,4),(5,6)]) == 6",
        "num_ids": 2006,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def helper(n):\n        count = 0\n        for i in range(0,1<<n):\n            temp = bin(i)[2:]\n            if len(temp)<n:\n                temp = temp.zfill(n)\n            else:\n                continue\n            if temp[:n]==temp[n:2*n]:\n                count += 1\n        return count\n    return helper(n)\n",
        "test": "assert     count_binary_seq(0) == 0",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, val in d.items():\n        depth = dict_depth(val) if isinstance(val, dict) else 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth + 1\n",
        "test": "assert     dict_depth({1:1,2:2})==2, 'Wrong Answer'",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print('Element at index'+ str(index) +'is:'+ str(arr[index]) +'in'+ str(ranges[index]) +'range(s) rotated'+ str(rotations[index]) +'times')\n    return arr[index]\n",
        "test": "assert     find_Element([1,4,1],[[1,3],[1,3],[1,3]],[[1,2],[1,2],[1,2]],0) == 1",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith(\"p\"):\n            return word, words[words.index(word)+1]\n",
        "test": "assert ",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    i = 1\n    while (i <= index):\n        if(a[i-1] <= k):\n            k = k - a[i-1]\n        i = i + 1\n",
        "test": "assert     max_sum_increasing_subseq([1, 3, 2, 4, 7, 8, 5], 3, 1) == 8",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    res = []\n    for i in range(m):\n        for j in range(n):\n            res.append((tuplex[i],tuplex[j]))\n    return tuple(res)\n",
        "test": "assert     colon_tuplex((1,2,3),3,5) == ((1,2,3), (4,5,6))",
        "num_ids": 2192,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    l1 = len(nums1)\n    l2 = len(nums2)\n    result = []\n    \n    for i in range(N):\n        if l1 > 0 and l2 > 0:\n            if nums1[l1-1] < nums2[l2-1]:\n                result.append(nums1[l1-1])\n                l1 = l1 - 1\n            else:\n                result.append(nums2[l2-1])\n                l2 = l2 - 1\n        elif l1 > 0:\n            result.append(nums1[l1-1])\n            l1 = l1 - 1\n        elif l2 > 0:\n            result.append(nums2[l2-1])\n            l2 = l2 - 1\n    return result\n",
        "test": "assert     large_product([], [], 0) == []",
        "num_ids": 2477,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(1,2) == 2",
        "num_ids": 218,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple(\"hihihi\") == ('h', 'i', 'h', 'i', 'h', 'i'), \"Test case 2: Pass\"",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    l = n & (-n)\n    return l\n",
        "test": "assert     set_left_most_unset_bit(0) == 0",
        "num_ids": 2218,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return pi*math.pow(r,2)*h\n",
        "test": "assert     volume_cone(2,3) == math.pi*math.pow(2,2)*3",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    while n > 0:\n        n = n >> 1\n        count += 1\n    return count\n",
        "test": "assert     highest_Power_of_2(1) == 1, \"Should be 1\"",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "test": "assert ",
        "num_ids": 196,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    lst_dict = dict(zip(l1,l2))\n    lst_dict.update(l3)\n    return lst_dict\n",
        "test": "assert     convert_list_dictionary([], {}, []) == {}",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    res = 0\n    for i in range(n):\n        res = max(res, (i+1)+(res+i)/2, (i+1)+(res+i)/3, (i+1)+(res+i)/4, (i+1)+(res+i)/5)\n    return res\n    \ndef get_max_sum_dp (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \n    We use a dp table to store the results. The idea is to use the same equation to find the largest sum till that number of digits.\n    And then repeat the same process till the base case.\n    '''\n    dp = [[0 for j in range(n+1)] for i in range(n+1)]\n    # base case:\n    dp[0][0] = 0\n    for i in range(1, n+1):\n        dp[i][i] = i\n    # recursive case:\n    for length in range(1, n+1):\n        for right_length in range(length+1):\n            left_length = right_length - length\n            if left_length > 0 and left_length <= length:\n                dp[left_length][right_length] = max(dp[left_length][right_length], dp[left_length][right_length-1]+dp[left_length-1][right_length])\n            if right_length > 0 and right_length <= length:\n                dp[right_length][left_length] = max(dp[right_length][left_length], dp[right_length-1][left_length]+dp[right_length][left_length-1])\n    return dp[n][n]\n",
        "test": "assert     get_max_sum (1)     == 1",
        "num_ids": 918,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    l = []\n    for i in input_list:\n        if type(i)!= list:\n            l.append(i)\n        else:\n            l.append(max_length_list(i))\n    return max(l, key = len)\n",
        "test": "assert ",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert     check_distinct((1,2,3,4,5,6)) == True",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # this will iterate over the string and count the frequency of the character in the string.\n    # the character will be returned as None if there is no repeat in the string.\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    \n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    return None\n",
        "test": "assert     first_non_repeating_character('abcd') ==     'a'",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string[0].upper()+string[1:]\n    if string[0]==string[-1]:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n",
        "test": "assert     check_char('a') == True, \"1st test failed\"",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    data = sorted((a,b,c))\n    n = len(data)\n    if n == 1:\n        return data[0]\n    if n == 2:\n        if data[0] == data[1]:\n            return data[0]\n        return (data[0]+data[1])/2.0\n    if n == 3:\n        if data[0] == data[1] == data[2]:\n            return data[0]\n        return (data[0]+data[1])/2.0\n",
        "test": "assert median_numbers(2,2,2) == 2",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for i in nums:\n        total += i\n    return total\n",
        "test": "assert     sum_of_digits([0, 0, 0, 0]) == 0",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert type(test_tup1) == tuple and type(test_tup2) == tuple, \"Both tuples should be in the form of (int, int, int) and (int, int, int)\"\n",
        "test": "assert     bitwise_xor((1,1,1),(1,1,1)) == 0, 'error 2'",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Write your function here\n    my_set = set(test_list)\n    return len(my_set)\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(sum, zip(test_tup1, test_tup2)))\n",
        "test": "assert     add_nested_tuples((1,2,3),(1,2,3)) == (2,4,6)",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "test": "assert     minimum(2,-3) == -3, 'Should be -3'",
        "num_ids": 244,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if(tuplex.count(tuple1) > 0): \n        return True \n    else: \n        return False\n",
        "test": "assert     check_tuplex((1,2,3,4,5,6),(1,2,4,5,6)) == False, 'Tuple 1 has element 5'",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\n",
        "test": "assert     find_Parity(0) == False",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Since the number cannot contain the same digit twice, we can simply swap the two values\n    # The numbers are reversed and hence we can just use two pointers:\n    # pointer_1 = 1 -> 2 -> 3 -> 4 -> 5 -> 6\n    # pointer_2 = 6 -> 5 -> 4 -> 3 -> 2 -> 1\n    # The value of the number at position pointer_2 will be the next bigger number.\n    # Time complexity: O(n)\n    # Space complexity: O(1)\n    number = str(n)\n    \n    # Reversing the number\n    number = list(reversed(number))\n",
        "test": "assert rearrange_bigger(999) == '913'",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def heapq_pairs(nums1, nums2, k):\n        pairs = []\n        i,j = 0,0\n        while i < len(nums1) and j < len(nums2):\n            pairs.append((nums1[i], nums2[j]))\n            heapq.heappush(pairs, (nums1[i], nums2[j]))\n            i += 1\n            j += 1\n        return pairs[:k]\n    return heapq_pairs(nums1, nums2, k)\n",
        "test": "assert     k_smallest_pairs([1, 3, 11], [2, 4, 6], 0) == []",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 100000\n    for index in range(len(list1)-1):\n        for next_index in range(index+1,len(list1)):\n            if list1[index][0]*list1[next_index][0] < min_product:\n                min_product = list1[index][0]*list1[next_index][0]\n    return min_product\n",
        "test": "assert min_product_tuple([(1,1),(1,2),(1,4)]), \"An empty list\"",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n",
        "test": "assert     min_val([4, 6, 2, 5, 7, 2]) == 2",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    capital_words = words[0].capitalize()\n    for w in words[1:]:\n        capital_words += w.capitalize()\n    return capital_words\n",
        "test": "assert     snake_to_camel('my_snake_case') == 'MySnakeCase'",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2 == 0:\n            l.remove(i)\n    return l\n",
        "test": "assert     remove_odd([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([(1,2),(2,3),(3,4),(4,5),(5,6)], 1) == (2,3)",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    l1 = sorted(list1)\n    l2 = sorted(list2)\n    for i in range(len(l2)):\n        if l2[i] in l1:\n            return True\n    return False",
        "test": "assert     overlapping([1,2,3,4,5],[4,6,3,3,7,1,2,3]) == True, \"Should be True\"",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i]*arr[j] > res:\n                res = arr[i]*arr[j]\n    return res\n    \n    ",
        "test": "assert ",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n = len(Input) \n    Output = []\n    for i in range(0,n): \n        for j in range(0,n): \n            if (Input[i][0] == Input[j][0] and i!=j): \n                Output.append(Input[i][0]) \n    return Output \n",
        "test": "assert     group_tuples(",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m=len(lst[0])\n    max=lst[0]\n    for i in range(1,len(lst)):\n        if m<len(lst[i]):\n            m=len(lst[i])\n            max=lst[i]\n    return max\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert ",
        "num_ids": 2465,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1.sort()\n    num = len(list1)\n    summ = 0\n    for i in list1:\n        summ += i\n        i = round(i,2)\n    print(summ*num)\n",
        "test": "assert round_and_sum([1,2,3,4,5]) == 30 ",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if i%2==0:\n            s+=i**3\n    return s\n    \ndef cube_Sum_Memoization(n,memo):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    if n in memo:\n        return memo[n]\n    else:\n        result = cube_Sum_Memoization(n-1,memo) + n**3\n        memo[n] = result\n        return result\n    \ndef cube_Sum_DP(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if i%2==0:\n            s+=i**3\n    return s\n    \ndef cube_Sum_DP_Optimized(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s=0\n    cache = [-1]*(n+1)\n    for i in range(1,n+1):\n        if i%2==0:\n            s+=i**3\n        if cache[i]==-1:\n            cache[i] = s\n        else:\n            cache[i] = min(s,cache[i])\n    return cache[n]\n    \nif __name__ == '__main__':\n    n = 5\n    print(\"Cube Sum of first n even natural numbers = \",cube_Sum(n))\n    print(\"Cube Sum of first n even natural numbers = \",cube_Sum_Memoization(n,{}))\n    print(\"Cube Sum of first n even natural numbers = \",cube_Sum_DP(n))\n    print(\"Cube Sum of first n even natural numbers = \",cube_Sum_DP_Optimized(n))",
        "test": "assert     cube_Sum(1) == 0",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "test": "assert     concatenate_tuple((1,2,3)) == \"1,2,3\", \"Wrong output!\"",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    i = 1\n    Sum = 0\n    while i < n + 1:\n        Sum += i ** 3\n        i += 1\n    \n    return int(Sum / n)\n    \nprint(find_Average_Of_Cube(5))\n",
        "test": "assert    find_Average_Of_Cube(1) == 1",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[-1])\n",
        "test": "assert     extract_rear((\"1-2-3-4-5-6-7-8-9-10-11-12\",)) == (10, 11, 12)",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n    ",
        "test": "assert     count_element_in_list([1,2,3], 1) == 1, 'incorrect result'",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for number in nums:\n        if number % 2!= 0:\n            oddnumbers.append(number)\n    return oddnumbers\n",
        "test": "assert     filter_oddnumbers([0,1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if len(dt) == 10:\n        d, m, y = dt[:2], dt[2:4], dt[4:]\n        return f'{d}-{m}-{y}'\n    else:\n        d, m, y = dt[:2], dt[2:4], dt[4:]\n        return f'{d}-{m}-{y}'\n",
        "test": "assert     change_date_format('12-01-20') == '01-12-2020'",
        "num_ids": 2345,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = 1\n    while gap < length:\n        gap = gap * 3 + 1\n        for i in range(gap, length):\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n    return my_list",
        "test": "assert ",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x,y: x and y, test_tup1, test_tup2))\n    \ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x,y: x or y, test_tup1, test_tup2))\n",
        "test": "assert     and_tuples((1,2),(1,2)) == (1,2)",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = b**2 - 4*a*c\n    if D < 0:\n        return 0\n    elif D == 0:\n        return -b / (2*a)\n    else:\n        return ((-b + sqrt(D))/(2*a), (-b - sqrt(D))/(2*a))\n",
        "test": "assert     parabola_directrix(0, 1, 0) ==     (1.0, 0.0)",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert     common_element([1,2,3], [4,5,7]) == False",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_base = base1/2 + base2/2\n    half_height = height/2\n    return (base1+base2)/2 + half_height\n",
        "test": "assert     median_trapezium(1,2,3) == 3, f\"The result is {median_trapezium(1,2,3)} but should be {3}\"",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if (len(arr) == 0):\n        return False\n    for i in range(len(arr)):\n        if number == arr[i]:\n            return True\n        else:\n            continue\n    return False\n",
        "test": "assert     check_greater([1,2,3,4], 5)     == False",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"^[ab]+$\",text):\n        return True\n    else:\n        return False\n    #'ab' + 'a'\n",
        "test": "assert     text_match_one(\"ab\")",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n1 = n%10\n    n2 = n//10\n    return n1 if n1>n2 else n2\n",
        "test": "assert     last_Digit(0) == 0,    \"Should be 0\"",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    output = []\n    for item in list1:\n        output.append(item*-1)\n    return output\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i.isdigit()==True:\n            str2+=i\n    return str2\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(set([item for item in test_list if test_list.count(tuple(reversed(item)))>1]))\n",
        "test": "assert     count_bidirectional([(1,2),(3,4)]) == 0,'should return 0'",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ans = 0\n    for i in L:\n        ans = ans*10 + i\n    return ans\n",
        "test": "assert     multiple_to_single([1,2,3,4,5,6]) == 123456",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return\n    \nif __name__ == '__main__':\n    print find_adverb_position(\"As I know, I really don't like that.\")\n    print find_adverb_position(\"I am very happy about that. I am happy about that.\")\n    print find_adverb_position(\"I am happy, I am happy. I am very happy.\")\n    print find_adverb_position(\"I am very happy, I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am very happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I a",
        "test": "assert     find_adverb_position('the first adverb is after the noun and then the second adverb is after the noun') == False",
        "num_ids": 5450,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l*l*l\n    return a\n",
        "test": "assert     surfacearea_cube(2) == 8",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count/len(nums)\n",
        "test": "assert     positive_count([0,1,2,3,4]) == 4/5",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -999999\n    for x in list1:\n        if x <= 0:\n            if x > largest:\n                largest = x\n    return largest\n",
        "test": "assert     largest_neg([-5, -5, -5]) == -5, \"Should be: -5\"",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    tuple_list = []\n    if len(test_list) <= K:\n        for i in range(len(test_list)):\n            tuple_list.append(test_list[i])\n    else:\n        for i in range(len(test_list)-K):\n            tuple_list.append(test_list[i])\n    return tuple_list\n",
        "test": "assert     trim_tuple([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == [(1, 2), (3, 4)]",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    a = list(test_tup1)\n    b = list(test_tup2)\n    c = []\n    for i in range(len(a)):\n        c.append(a[i]*b[i])\n    return tuple(c)\n",
        "test": "assert     index_multiplication((1, 2, 3, 4), (2, 3, 4, 5)) == (2, 6, 12, 20)",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst) \n    for i in tup:\n        if i in cnt.keys():\n            cnt[i] += 1\n        else:\n            cnt[i] = 1\n    return cnt\n",
        "test": "assert count_Occurrence((3,4,5,1,2,2,3), [1,2,3,4,5,6]) == Counter((1,2,3,2))",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    nums_cubed = []\n    for i in range(len(nums)):\n        nums_cubed.append(nums[i]**3)\n    return nums_cubed\n",
        "test": "assert     cube_nums([]) == []",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n+cal_sum(n-1)\n",
        "test": "assert     cal_sum(1) == 1",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = sorted(l, reverse=True)\n    count = 0\n    for i in l:\n        if count < l_limit:\n            count += 1\n        else:\n            return l[:count]\n",
        "test": "assert     extract_string(['a','b','c','d'], 4) == ['a','b','c']",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n",
        "test": "assert remove_whitespaces('') == ''",
        "num_ids": 271,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost * (sale_amount/actual_cost) - sale_amount\n    if loss_amount > 0:\n        return loss_amount\n    else: \n        return 0 \n",
        "test": "assert     loss_amount(110,100) == 0, 'input amount:110 should be 0'",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (n + n - 1) // 2\ndef sumofFactors3(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n//2+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors4(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    c = 0\n    for i in range(2,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            c = c + 2\n    return (n + c - 1) // 2\ndef sumofFactors5(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (n + (n//2)) // 2\ndef sumofFactors6(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (n + n + 1) // 2\ndef sumofFactors7(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors8(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (n + (n//2) + 1) // 2\ndef sumofFactors9(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    a = 0\n    while (n > 0) : \n        if (n%2 == 0) : \n            a = a + n\n        n = n // 2\n    return a\ndef sumofFactors10(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors11(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    a = 0\n    if (n%2 == 0) : \n        a = (n//2)\n    else : \n        a = (n//2) + 1\n    return (a + (a//2)) // 2\ndef sumofFactors12(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors13(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n%2 == 0) : \n        return (n//2)\n    else : \n        return (n//2) + 1\ndef sumofFactors14(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors15(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (n + (n//2)) // 2\ndef sumofFactors16(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors17(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors18(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors19(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (n + (n//2)) // 2\ndef sumofFactors20(n) : \n    '''\n    Write a python function to find the sum of even factors of a numbe",
        "test": "assert     sumofFactors(12) == 12, \"FAIL: Should return 12.\"",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'z'\n    # result = re.findall(r'z',text)\n    # print(result)\n    return bool(re.search(regex,text))\n",
        "test": "assert     text_match_wordz('The quick brown fox jumps over the lazy dog')",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 == 31\n",
        "test": "assert     check_monthnumb_number(31) == True, 'Wrong!'",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [stringlist[i] for i in range(len(stringlist))][::-1]\n",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst1 = []\n    for i in range(len(lst)):\n        if len(lst[i]) < len(lst1):\n            lst1 = lst[i]\n            \n    return lst1\n",
        "test": "assert     Find_Min([]) == []",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n",
        "test": "assert     rectangle_area(1,1) == 1",
        "num_ids": 166,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.replace('[A-Z]','',1)\n",
        "test": "assert     remove_uppercase(\"\") == \"\"",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res =[]\n    for i in lst:\n        res.append(i[0])\n    return res\n",
        "test": "assert     Extract([[1, 2, 3], [4, 5, 6]]) == [1, 4]",
        "num_ids": 612,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr(\"\") == 0, \"A empty string is not an empty string.\"",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return list1\n    else:\n        return_list = []\n        first_item = list1[0]\n        rest_list = list1[1:]\n        for item in combinations_list(rest_list):\n            return_list.append([first_item] + item)\n        return return_list\n    \ndef combinations_dict(dict1):\n    '''\n    Write a function to find all possible combinations of the elements of a given dictionary.\n    '''\n    if len(dict1) == 0:\n        return []\n    elif len(dict1) == 1:\n        return list(dict1.values())\n    else:\n        return_list = []\n        first_key = list(dict1.keys())[0]\n        first_value = dict1[first_key]\n        rest_list = dict1.values()\n        for item in combinations_dict(dict1):\n            return_list.append({first_key:first_value})\n            return_list.append(item)\n        return return_list\n",
        "test": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3],",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "test": "assert     max_subarray_product([2, 3, -2, 4]) == 6",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()\n    print(value)\n    if len(set(value)) > 1:\n        return False\n    return True\n",
        "test": "assert     check_value({1: 1, 2: 2}, False) == False, 'Wrong output'",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1 = {k: v for k, v in dict1.items() if v!= None and v!=''}\n    return dict1\n    \nprint(drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': None, 'e':'', 'f': None, 'g':''}))\n",
        "test": "assert     drop_empty({1: 2, 3:4, 5:6}) == {1: 2, 3: 4, 5: 6}",
        "num_ids": 645,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = max(res*arr[i], arr[i])\n        print(res)\n    return res\n",
        "test": "assert     max_product([1, 2, 3, 4]) == 24, 'First example'",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(sum(x) for x in zip(*[iter(test_tup)]*2))\n",
        "test": "assert ",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    return product%n\n",
        "test": "assert     find_remainder([1,2,3,4,5], 4) == 0,'sample case 2'",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # code here\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i] == l[j]:\n                return False\n    return True\n",
        "test": "assert     check_Consecutive([-1, -2, -3, -4, -5, -6]) == True",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    temp = []\n    for element in test_list1:\n        if element in test_list2:\n            if element not in temp:\n                temp.append(element)\n    return temp\n",
        "test": "assert     tuple_intersection([(1,2), (2,3)], [(3,4), (1,2)]) == [(1,2)]",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n",
        "test": "assert     replace_char(\"abcd\",'d', 'p') == \"abcp\"",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #First I need a list of tuples with the value and the key.\n    list_tuple = []\n    for k,v in dict1.items():\n        list_tuple.append((v,k))\n    \n    #Now I need to sort this list\n    list_tuple.sort()\n    \n    #So I create a new dictionary with the sorted keys.\n    dictionary_sorted = {}\n    \n    #Now I loop through the list of tuples, adding the value to the dictionary of the key that corresponds to that value.\n    for v,k in list_tuple:\n        dictionary_sorted[k] = v\n    \n    return dictionary_sorted\n",
        "test": "assert     sort_counter({1: 2, 2: 1, 3: 3}) == {1: 2, 2: 1, 3: 3}",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[:2])\n",
        "test": "assert ",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n",
        "test": "assert     is_lower('abc') == 'abc', 'is_lower failed.'",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\nprint(remove_lowercase('hello'))\n",
        "test": "assert     remove_lowercase('simple') =='simple'",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    str_n = str(n)\n    digit = int(str_n[0])\n    return digit\n",
        "test": "assert     first_Digit(123) == 1, \"Test Case Failed\"",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [item for item in list if item%2!=0]\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8]) == [1,3,5,7]",
        "num_ids": 324,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    res = (pow(n,2)-n)\n    print(\"The Difference between the Sum of Cubes of the First N Natural Numbers and the Sum of the First N Natural Numbers:\",res)\ndef quotient(a,b) :  \n    '''\n    Write a python function to find the quotient of the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    res = a/b\n    print(\"The Quotient of the Sum of Cubes of the First N Natural Numbers and the Sum of the First N Natural Numbers:\",res)\ndef remainder(a,b) :  \n    '''\n    Write a python function to find the remainder of the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    res = a%b\n    print(\"The Remainder of the Sum of Cubes of the First N Natural Numbers and the Sum of the First N Natural Numbers:\",res)\ndef power(a,b) :  \n    '''\n    Write a python function to find the power of a number with the power set of a.\n    '''\n    res = pow(a,b)\n    print(\"The Power of the First Number With the Power Set of the Second Number:\",res)\ndef factorial(a) :  \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    res = a*a*a*a*a*a\n    print(\"The factorial of the First Number:\",res)\ndef gcd(x,y) :  \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    res = x if y==0 else gcd(y,x%y)\n    print(\"The GCD of the First Number and the Second Number is:\",res)\ndef hcf(x,y) :  \n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    res = x if y==0 else hcf(y,x%y)\n    print(\"The LCM of the First Number and the Second Number is:\",res)\ndef mul(x,y) :  \n    '''\n    Write a python function to find the multiplication of the first n natural numbers.\n    '''\n    res = x*y\n    print(\"The Multiplication of the First N Natural Numbers:\",res)\ndef div(x,y) :  \n    '''\n    Write a python function to find the division of the first n natural numbers.\n    '''\n    res = x/y\n    print(\"The Division of the First N Natural Numbers:\",res)\ndef menu():\n    '''\n    Write a python function to find the sum of the natural numbers from 0 to n.\n    '''\n    while True :\n        print(\"Choose an option from the Menu\")\n        print(\"1.Find Difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\")\n        print(\"2.Quotient of the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\")\n        print(\"3.Remainder of the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\")\n        print(\"4.Power of a number with the power set of a.\")\n        print(\"5.Factorial of a number.\")\n        print(\"6.Greatest common divisor of two numbers.\")\n        print(\"7.Least common multiple of two numbers.\")\n        print(\"8.Multiplication of the first n natural numbers.\")\n        print(\"9.Division of the first n natural numbers.\")\n        print(\"10.Quit\")\n        print(\"--------------------------------------------------------------------------------------------------\")\n        ch = int(input(\"Enter your choice: \"))\n        if ch == 1 :\n            n = int(input(\"Enter the number of natural numbers to find the difference: \"))\n            difference(n)\n        elif ch == 2 :\n            n = int(input(\"Enter the number of natural numbers to find the quotient: \"))\n            quotient(n)\n        elif ch == 3 :\n            n = int(input(\"Enter the number of natural numbers to find the remainder: \"))\n            remainder(n)\n        elif ch == 4 :\n            a = int(input(\"Enter the number of the first number: \"))\n            b = int(input(\"Enter the number of the second number: \"))\n            power(a,b)\n        elif ch == 5 :\n            a = int(input(\"Enter the number of the first number: \"))\n            print(\"The factorial of the first number is:\",factorial(a))\n        elif ch == 6 :\n            x = int(input(\"Enter the number of the first number: \"))\n            y = int(input(\"Enter the number of the second number: \"))\n            gcd(x,y)\n        elif ch == 7 :\n            x = int(input(\"Enter the number of the first number: \"))\n            y = int(input(\"Enter the number of the second number: \"))\n            hcf(x,y)\n        elif ch == 8 :\n            n = int(input(\"Enter the number of natural numbers to find the multiplication: \"))\n            mul(n)\n        elif ch == 9 :\n            n = int(input(\"Enter the number of natural numbers to find the division: \"))\n            div(n)\n        elif ch == 10 :\n            break\n        else :\n            print(\"Enter the valid choice.\")\n",
        "test": "assert ",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        count = count + A[i]^1\n    return count\n",
        "test": "assert     find_Odd_Pair([1,2,3],1)==0, 'Wrong result'",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('Hello') == 'hELLO'",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def distance(x, y):\n        diff = abs(x - y)\n        return diff\n    s = 0\n    for i in range(0, max(len(str(n1)), len(str(n2))), 1):\n        n1_1 = int(str(n1)[i])\n        n2_1 = int(str(n2)[i])\n        s += distance(n1_1, n2_1)\n    return s\n",
        "test": "assert     digit_distance_nums(3, 4) == 1",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # if size > 0:\n    #     for i in range(size):\n    #         if i == 0:\n    #             max_sum = a[0]\n    #             max_idx = i\n    #         else:\n    #             if a[i] > max_sum:\n    #                 max_sum = a[i]\n    #                 max_idx = i\n    #     return max_sum, max_idx\n    # else:\n    #     return a, 0\n    # # for i in range(size):\n    # #     if i == 0:\n    # #         max_sum = a[0]\n    # #         max_idx = i\n    # #     else:\n    # #         if a[i] > max_sum:\n    # #             max_sum = a[i]\n    # #             max_idx = i\n    # # return max_sum, max_idx\n",
        "test": "assert ",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    for i in test_tup1:\n        if i not in union_tup:\n            union_tup.append(i)\n    for i in test_tup2:\n        if i not in union_tup:\n            union_tup.append(i)\n    union_tup.sort()\n    return union_tup\n",
        "test": "assert ",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            length = len(lst[i:j])\n            if length > max_length:\n                max_length = length\n    return max_length\n",
        "test": "assert     Find_Max_Length([1,2,3,4,5,6]) == 5",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    val = re.findall(\"\\\"[^\\\"]*\\\"\", text)\n    if val:\n        print(val)\n    else:\n        print('no values')\n",
        "test": "assert ",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\n",
        "test": "assert     count_Pairs([1,2,3,3,4,5],5) == 1",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    res = []\n    i = 0\n    while(i < len(word)):\n        res.append(word[i])\n        i += 1\n    return res\n",
        "test": "assert     split('abc') == ['a','b','c']",
        "num_ids": 211,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n_string = str(n)\n    sum = 0\n    for i in n_string:\n        sum += int(i)\n    return sum\n",
        "test": "assert     sum_digits(123) == 6",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i - 1] >= list1[i]:\n            return False\n    return True\n",
        "test": "assert issort_list([1]) == True, 'List with one element should return True'",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n",
        "test": "assert empty_list(0) == [], 'Wrong result'",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1) == 0:\n        return []\n    return sort_sublists(list1[:len(list1)//2]) + sort_sublists(list1[len(list1)//2:])\n    \ndef sum_lists(list1,list2):\n    '''\n    Write a function to sum up two lists of same length.\n    '''\n    if len(list1) == 0:\n        return []\n    return sum_lists(list1[1:],list2[1:]) + [list1[0] + list2[0]]\n    \ndef merge_list(list1,list2):\n    '''\n    Write a function to merge two lists.\n    '''\n    if len(list1) == 0:\n        return list2\n    if len(list2) == 0:\n        return list1\n    if list1[0] < list2[0]:\n        return [list1[0]] + merge_list(list1[1:],list2)\n    else:\n        return [list2[0]] + merge_list(list1,list2[1:])\n        \ndef balanced_parenthesis(string):\n    '''\n    Write a function to check if a given string has balanced parentheses.\n    '''\n    if len(string)%2 == 1:\n        return False\n    count = 0\n    for item in string:\n        if item == \"(\":\n            count += 1\n        elif item == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n    \ndef power_of_two(number):\n    '''\n    Write a function to check if a given integer is a power of two.\n    '''\n    return number > 0 and bin(number).count('1') == 1\n    \ndef is_abecedarian(string):\n    '''\n    Write a function to check if a given string is an abecedarian string.\n    '''\n    if len(string) <= 1:\n        return True\n    else:\n        return string[0] <= string[1] and is_abecedarian(string[1:])\n        \ndef first_non_repeated_character(string):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(string)):\n        for j in range(i+1,len(string)):\n            if string[i] == string[j] and string[i]!= \" \":\n                return string[i]\n    return \" \"\n    \ndef alien_dictionary(words):\n    '''\n    Write a function to check if a given string can be formed by characters of a given list.\n    '''\n    if len(words) <= 1:\n        return True\n    else:\n        return words[0] == words[1] and alien_dictionary(words[1:])\n",
        "test": "assert ",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    num_list = list(set(nums))\n    return num_list\n    \n    \ndef is_sublist(nums, sublist):\n    '''\n    Write a python function to check if a list is a subset of a given list.\n    '''\n    if len(nums) < len(sublist):\n        return False\n    else:\n        for i in range(len(nums)):\n            if nums[i] not in sublist:\n                return False\n    return True\n    \n    \ndef fizz_buzz(nums):\n    '''\n    Write a python function to check if a number is divisible by 3 or 5 and by both.\n    '''\n    for num in nums:\n        if num % 3 == 0 and num % 5 == 0:\n            print(f\"FizzBuzz - {num}\")\n        elif num % 3 == 0:\n            print(f\"Fizz - {num}\")\n        elif num % 5 == 0:\n            print(f\"Buzz - {num}\")\n        else:\n            print(num)\n    \n    \ndef print_triangle(n):\n    '''\n    Write a python function to print a triangle shape with the given number.\n    '''\n    if n == 0:\n        return\n    for i in range(n):\n        for j in range(i + 1):\n            print(\"*\", end=\" \")\n        print()\n        \n        \ndef create_even_number(n):\n    '''\n    Write a python function to create an array of even numbers between 0 to n.\n    '''\n    even_nums = list(range(2, n + 1, 2))\n    return even_nums\n    \n    \ndef sum_numbers(nums):\n    '''\n    Write a python function to sum all numbers in an array.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\n    \n    \ndef reverse(nums):\n    '''\n    Write a python function to reverse an array of numbers.\n    '''\n    rev_nums = nums[::-1]\n    return rev_nums\n    \n    \ndef max_min(nums):\n    '''\n    Write a python function to find the maximum and minimum in an array.\n    '''\n    max = nums[0]\n    min = nums[0]\n    for i in range(len(nums)):\n        if max < nums[i]:\n            max = nums[i]\n        if min > nums[i]:\n            min = nums[i]\n    return max, min\n    \n    \ndef swap_index(nums, index1, index2):\n    '''\n    Write a python function to swap the values of the 2 given indexes in an array.\n    '''\n    temp = nums[index1]\n    nums[index1] = nums[index2]\n    nums[index2] = temp\n    return nums\n    \n    \ndef check_pangram(str_input, alphabet):\n    '''\n    Write a python function to check if a given string is a pangram.\n    '''\n    str_input = str_input.replace(\" \", \"\")\n    alphabet = alphabet.replace(\" \", \"\")\n    str_input = str_input.lower()\n    alphabet = alphabet.lower()\n    alphabet_set = set(alphabet)\n    str_input_set = set(str_input)\n    if str_input_set <= alphabet_set:\n        return True\n    else:\n        return False\n    \n    \ndef max_substring(string):\n    '''\n    Write a python function to find the longest substring in a given string.\n    '''\n    max_len = 0\n    max_str = \"\"\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            substring = string[i:j + 1]\n            if len(substring) > max_len and substring.isalpha():\n                max_len = len(substring)\n                max_str = substring\n    return max_str\n    \n    \ndef swap_elements(nums, index1, index2):\n    '''\n    Write a python function to swap the values of the 2 given indices in an array.\n    '''\n    nums[index1], nums[index2] = nums[index2], nums[index1]\n    return nums\n    \n    \ndef max_odd_even(nums):\n    '''\n    Write a python function to find the maximum value and the minimum value from a given array.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n    for i in range(len(nums)):\n        if nums[i] == max_value:\n            if i % 2 == 0:\n                max_value = nums[i - 1]\n            else:\n                max_value = nums[i + 1]\n    for i in range(len(nums)):\n        if nums[i] == min_value:\n            if i % 2 == 0:\n                min_value = nums[i - 1]\n            else:\n                min_value = nums[i + 1]\n    return max_value, min_value\n    \n    \ndef k_largest_elements(nums, k):\n    '''\n    Write a python function to find the k largest elements in an array.\n    '''\n    nums.sort(reverse=True)\n    return nums[:k]\n    \n    \ndef k_smallest_elements(nums, k):\n    '''\n    Write a python function to find the k smallest elements in an array.\n    '''\n    nums.sort()\n    return nums[:k]\n    \n    \ndef get_first_n_prime_numbers(n):\n    '''\n    Write a python function to find the first n prime numbers.\n    '''\n    prime_list = [2, 3]\n    nums = []\n    for i in range(1, n):\n        nums.append(i)\n    for i in range(1, len(nums)):\n        curr_prime = prime_list[0]\n        index = 0\n        while nums[index] % curr_prime!= 0 and index <= (len(nums) - 2):\n            index += 1\n        if nums[index] % curr_prime == 0:\n            continue\n        else:\n            prime_list.append(nums[index])\n            nums[index] = curr_prime\n    return prime_list\n    \n    \ndef find_largest_prime_factor(nums):\n    '''\n    Write a python function to find the largest prime factor in a given array.\n    '''\n    largest_prime = 0\n    largest_prime_factors = []\n    for i in range(1, len(nums)):\n        if nums[i] == 2:\n            largest_prime_factors.append(2)\n            continue\n        elif nums[i] % 2 == 0:\n            if largest_prime < nums[i] / 2:\n                largest_prime = nums[i] / 2\n                largest_prime_factors.clear()\n                largest_prime_factors.append(nums[i])\n            else:\n                continue\n        else:\n            prime = 3\n            while prime * prime <= nums[i]:\n                if largest_prime < nums[i] / prime:\n                    largest_prime = nums[i] / prime\n                    largest_prime_factors.clear()\n                    largest_prime_factors.append(prime)\n                prime += 2\n    return largest_prime_factors\n    \n    \ndef is_prime(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef is_prime_even(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n    \n    \ndef is_prime_od",
        "test": "assert     two_unique_nums([1,2,3,3,4,5]) == True, '1,2,3,3,4,5 case 2 fail'",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product = product * i\n    return product\n",
        "test": "assert     unique_product([0, 0]) == 0, '0, 0 = 0'",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*math.pi*r*h\n    return surface_area\n",
        "test": "assert     surfacearea_cylinder(1,1) == 2*math.pi*1",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in A:\n        if i not in B:\n            return False\n    return True\nprint(is_Sub_Array([2,3,4], [1,2,3]))\nprint(is_Sub_Array([1,2,3], [1,2,3]))\nprint(is_Sub_Array([2,3,4], [2,3]))\nprint(is_Sub_Array([1,2,3], [1]))\n",
        "test": "assert is_Sub_Array([1,2,3], []) == False",
        "num_ids": 2517,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1;\n    if(n < 0):\n        n = -n;\n    while(n > 9):\n        fact = fact * 10;\n        n = n - 1;\n    return fact;\n",
        "test": "assert     last_Digit_Factorial(9) == 1",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4 = []\n    for i in range(len(list1)):\n        list4.append(list1[i])\n        list4.append(list2[i])\n        list4.append(list3[i])\n    return list4\n",
        "test": "assert     interleave_lists([1,2,3,4], [5,6,7,8], [9,10,11,12]) == [1,5,9,2,6,10,3,7,11,4,8,12]",
        "num_ids": 1768,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    count = 0\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            count += 1\n    \n    return count\n",
        "test": "assert     find_dissimilar((1,2,4), (2,4,8)) == 3",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, (tuple, list)): \n        # for loop in list, tuple,set\n        for i in test_tuple: \n            if not isinstance(i, (tuple, list, set, str)): \n                if not even_fnc(i): \n                    test_tuple = test_tuple[0:test_tuple.index(i)] + test_tuple[test_tuple.index(i)+1:]\n    return test_tuple\n",
        "test": "assert ",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #initializing variables\n    s_area=0\n    n=b*b\n    for i in range(0,s):\n        for j in range(i+1):\n            s_area=s_area+4*b*(n-j)\n    return s_area\n",
        "test": "assert     surface_Area(1,1) == 4, 'TEST ERROR: surface_Area(1,1)'",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({}) == True",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'ly(.)*', text)\n    return result\n",
        "test": "assert     find_adverbs(\"A cat is a soft cat. But a dog is a hard dog. A lion is a hard lion. A lion is a soft lion. A lion is a soft cat.\") == {'ly': [[4, 6], [9, 13]]}",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # items = [\n    #     ('item1', 3),\n    #     ('item2', 5),\n    #     ('item3', 1),\n    #     ('item4', 8),\n    #     ('item5', 7),\n    # ]\n",
        "test": "assert expensive_items([(4,1),(3,8),(1,2),(5,4),(5,3)],3) == [(5,4),(4,1),(5,3)]",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if not isinstance(l, list):\n        raise TypeError('input must be list')\n    if n <= 0 or n >= len(l):\n        raise ValueError('n must be greater than 0 and less than length of the list')\n    if n == 1:\n        return l\n    return l[:n] + l[n-1:] + l[:n-1]\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4, 5, 6]]",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1,2,3]) == (1,2,3)     ,\"Wrong answer\"",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    diff = abs(nums[-1] - nums[0])\n    return diff\n",
        "test": "assert     big_diff([3, 4]) == 3, \"one element\"",
        "num_ids": 258,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = max(a,b)\n    while n % 2 == 0:\n        n //= 2\n    print(n)\n    return n\n",
        "test": "assert     perfect_squares(1, 1) == True, '1'",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.cos(y), y*cmath.sin(y)\n",
        "test": "assert     polar_rect(0, 0) == (0, 0), \"x=0 and y=0 should be in the same circle\"",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "test": "assert     swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 4328,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    product = 1\n    for i in range(1,k+1):\n        product = product * (n-i+1) / i\n    return product\n",
        "test": "assert     binomial_Coeff(10,0) == 1",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = list(map(int, ip.split(\".\")))\n    while ip[3] == 0:\n        ip[3] = 255\n        ip[2] -= 1\n        if ip[2] == 0:\n            ip[2] = 255\n            ip[1] -= 1\n            if ip[1] == 0:\n                ip[1] = 255\n                ip[0] -= 1\n                if ip[0] == 0:\n                    ip[0] = 255\n    return \".\".join(map(str, ip))\n",
        "test": "assert     removezero_ip('0.1.2.3.4') == '0.1.2.3.4', 'failed'",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 1:\n        return -1\n    for i in range(len(list1)):\n        if i % 2!= 0:\n            list1[i] = list1[i] + 1\n    return abs(list1[0] - list1[1])\n",
        "test": "assert     diff_even_odd([3,4,5,6]) == 2, 'It should be 2'",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    result = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            result += 1\n    return result\n",
        "test": "assert     min_Swaps('11','01') == 1, 'First assert statement failed'",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    l = len(tuple_list)\n    print(l)\n    return (l*8)\n",
        "test": "assert ",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    import sys\n    n = sys.maxsize\n    while len(arr1) > 0 and len(arr2) > 0:\n        if arr1[0] < arr2[0]:\n            arr1.pop(0)\n        else:\n            arr2.pop(0)\n    if len(arr1) == 0:\n        if k > len(arr2):\n            return -1\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        if k > len(arr1):\n            return -1\n        return arr1[k - 1]\n",
        "test": "assert     find_kth([], [1,2,3], 1) == 1",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number == 0:\n        return False\n    temp_number = number\n    total = 0\n    while temp_number > 0:\n        reminder = temp_number % 10\n        total = total + reminder ** 3\n        temp_number = temp_number // 10\n    return number == total\n",
        "test": "assert     armstrong_number(10) == False",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #your code here\n    sum_n=0\n    average=0\n    n=number\n    if n==0:\n        return 0\n    if n<0:\n        return \"Wrong Input\"\n    else:\n        for i in range(n):\n            sum_n+=i\n        average=sum_n/n\n        return average\n    \n    \n    \n        \n        \n    \n    \n    \n",
        "test": "assert     sum_average(0) == 0,     'sum_average should return 0 for n = 0'",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n",
        "test": "assert     is_Even(2) == True",
        "num_ids": 167,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str2 = ''\n    str3 = str1.lower()\n    str4 = str3.replace(' ','')\n    for i in range(len(str4)):\n        if str4.count(str4[i]) > 1:\n            str2 = str4[i]\n    return str2\n",
        "test": "assert first_repeated_char(\"nooo\") == 'o'",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    while n >= 2:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        lucid.append(n)\n    return lucid\n",
        "test": "assert     get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # O(n) time | O(n) space\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n",
        "test": "assert     reverse_words(\"spam\") == \"spam\", \"Expected'spam', got'spam'\"",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        print('The number is not prime.')\n        return False\n    elif num == 2:\n        print('The number is prime.')\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                print('The number is not prime.')\n                return False\n        print('The number is prime.')\n        return True\n",
        "test": "assert     prime_num(2) is True",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "test": "assert     radian_degree(90) ==  1.5707963267948966",
        "num_ids": 160,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.findall(pattern, text)\n",
        "test": "assert ",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return bell_Number(n - 1) + bell_Number(n - 2) + bell_Number(n - 3)\n",
        "test": "assert     bell_Number(1) == 1, 'bell_Number is incorrect'",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L)\n    return list1\n",
        "test": "assert     remove_kth_element([1,2,3], 1) == [2,3]",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = 0\n    # Implement your solution here\n    for element in test_list:\n        if max_val < element[N-1]:\n            max_val = element[N-1]\n    return max_val\n",
        "test": "assert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == 9",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([lst[i][0], lst[i][1]])\n    return new_lst\n",
        "test": "assert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(1,len(test_list)):\n        test_list[i] = test_list[i] + test_list[i-1]\n    return test_list\n",
        "test": "assert     cummulative_sum(()) == ()",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # method_1\n    avg = 0\n    result = []\n    for i in nums:\n        avg = sum(i) / len(i)\n        result.append(avg)\n    return result\n",
        "test": "assert     average_tuple([]) == []",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((1,2), (3,4)) == (1,2)",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 1\n    if d <= 0: \n        return 0\n    return min_Jumps(steps, d-steps) + min_Jumps(steps, d)\n",
        "test": "assert     min_Jumps(2, (5, 0)) == 0",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Empty list\n    result = []\n",
        "test": "assert div_list([1,2,3,4,5], [1,2,3,4]) == [[1, 2], [3, 4, 5]]",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split()\n    # print(test_str)\n    for i in range(len(test_str)):\n        for j in range(len(test_str)-1):\n            if test_str[j] > test_str[j+1]:\n                test_str[j], test_str[j+1] = test_str[j+1], test_str[j]\n    return \" \".join(test_str)\n",
        "test": "assert     move_num(\"1\") == \"1\", \"Test case Failed\"",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] % a[j] == 0 and max_size < a[i] // a[j]:\n                max_size = a[i] // a[j]\n    return max_size\n",
        "test": "assert     largest_subset([2,3])==1",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if(len(arr1) == len(arr2)):\n        #if the length is the same\n        n = len(arr1)\n        arr1.sort()\n        arr2.sort()\n",
        "test": "assert     get_median([], [], 1) == None",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #calculate the length of the list\n    l = len(nums)\n    #initialize the result list\n    result = []\n    #iterate over the list and compute the nth power for each item\n    for i in range(l):\n        result.append(nums[i] ** n)\n    #return the list\n    return result\n",
        "test": "assert     nth_nums([3, 4, 5], 1) == [3, 4, 5]",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert not is_upper(\"\")",
        "num_ids": 187,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    l = newList\n    l[0], l[-1] = l[-1], l[0]\n    return l\n",
        "test": "assert     swap_List([1,2,3]) ==  [3,2,1]",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    radius = r\n    # Calculating the area of a triangle with the help of Heron's formula\n    area = math.sqrt(radius**2 * math.sqrt(3))\n    return area\n",
        "test": "assert     triangle_area(6) == 1.5*math.sqrt(3)/2",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    for i in range(start,end):\n        if i!= array[i]:\n            return i\n    return end+1\n    \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    for i in range(0,len(array)):\n        temp = array[i]\n        if temp not in array:\n            return temp\n    return None\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.",
        "test": "assert     find_First_Missing([1,2,3,5]) == 4",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces('') == ''",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in range(len(list)):\n        if(list[i]%2 == 0):\n            even.append(list[i])\n    return even\n",
        "test": "assert     Split([0, 1, 2, 3, 4, 5, 6, 7]) == [2, 4, 6], \"Should be [2, 4, 6]\"",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub = sub + [ele]\n    return sub\n",
        "test": "assert     adjac((1, 0)) == [(1, 0), (1, 1)], \"Wrong Answer\"",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "test": "assert ",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    while len(new_list) < len(num_list):\n        new_list.append(0)\n    return new_list\n",
        "test": "assert     move_zero([1,2,3,0,0,0]) == [1,2,3,0,0,0], \"Wrong result\"",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            s=s^arr[i]^arr[j]\n    return s\n",
        "test": "assert pair_xor_Sum([4,6,3,4,2],4) == 5",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    # make heap from input\n    heap = list()\n    for x in iterable:\n        hq.heappush(heap, x)\n    \n    # return sorted input\n    return list(map(lambda x: x, heap))\n",
        "test": "assert     heap_sort([1,2,3,4]) == sorted([1,2,3,4])",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    return False\n",
        "test": "assert     noprofit_noloss(actual_cost = 100, sale_amount = 100) == True ",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.00028\n    f = -0.0065\n    g = 0.000077\n    h = 35.75\n    i = 0.00198\n    j = -0.00028\n    k = 0.000077\n    l = -0.0065\n    m = -0.000122\n    n = 0.00028\n    o = 0.00069\n    p = 0.000002\n    q = -0.000011\n    r = 0.000017\n    s = -0.000001\n    t1 = 0.0\n    t2 = 0.0\n    t3 = 0.0\n    t4 = 0.0\n    if v == 0:\n        t1 = t\n        t2 = t\n        t3 = t\n        t4 = t\n    elif v == 1:\n        t1 = t - 10.0\n        t2 = t - 5.0\n        t3 = t + 30.0\n        t4 = t + 10.0\n    else:\n        t1 = t - 10.0\n        t2 = t - 5.0\n        t3 = t + 10.0\n        t4 = t + 10.0\n        if t1 > 0 and t1 < 100:\n            t1 = t1\n        else:\n            t1 = t\n        if t2 > 0 and t2 < 100:\n            t2 = t2\n        else:\n            t2 = t\n        if t3 > 0 and t3 < 100:\n            t3 = t3\n        else:\n            t3 = t\n        if t4 > 0 and t4 < 100:\n            t4 = t4\n        else:\n            t4 = t\n    wind_chill_1 = 35.74 + (a * t1) + (b * t2) + (c * t3) + (d * t4) + (e * t) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_2 = 35.74 + (a * t2) + (b * t3) + (c * t4) + (d * t1) + (e * t) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_3 = 35.74 + (a * t3) + (b * t4) + (c * t1) + (d * t) + (e * v) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_4 = 35.74 + (a * t4) + (b * t1) + (c * t) + (d * v) + (e * v) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_5 = 35.74 + (a * t1) + (b * t2) + (c * t3) + (d * t4) + (e * t) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_6 = 35.74 + (a * t2) + (b * t3) + (c * t4) + (d * t1) + (e * t) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_7 = 35.74 + (a * t3) + (b * t4) + (c * t1) + (d * t) + (e * v) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_8 = 35.74 + (a * t4) + (b * t1) + (c * t) + (d * v) + (e * v) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_9 = 35.74 + (a * t1) + (b * t2) + (c * t3) + (d * t4) + (e * t) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_10 = 35.74 + (a * t2) + (b * t3) + (c * t4) + (d * t1) + (e * t) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_11 = 35.74 + (a * t3) + (b * t4) + (c * t1) + (d * t) + (e * v) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_12 = 35.74 + (a * t4) + (b * t1) + (c * t) ",
        "test": "assert     wind_chill(3,20)==None ",
        "num_ids": 2558,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = filter(lambda x: not x[0].islower(), sample_names)\n    return sum(len(x) for x in sample_names)\n",
        "test": "assert     sample_nam([]) == 0, 'Empty list'",
        "num_ids": 389,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # print(\"\\n\\n items = \",items)\n    items=re.sub(r'\\(.*?\\)','',items)\n    items=re.sub(r'\\[.*?\\]','',items)\n    items=re.sub(r'\\{.*?\\}','',items)\n    return items\n",
        "test": "assert     remove_parenthesis(\"abc\") == \"abc\", \"Should return abc\"",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) // 2\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 158,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.search('z[\\s]',text) and not re.search('z[\\s]z',text) and not re.search('z[\\s]z',text):\n        return True\n    else:\n        return False\n    \nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky')) # False\nprint(text_match_wordz_middle('z Under the Sky')) # True\nprint(text_match_wordz_middle('z under the skyl')) # False\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # False\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint",
        "test": "assert not text_match_wordz_middle(\"test test\")",
        "num_ids": 2319,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    size = len(input)\n    if k >= size:\n        print(\"Invalid Input\")\n        return\n    for i in range(size):\n        temp = input[i]\n        j = size - i - 1\n        while j > k:\n            input[j] = input[j-1]\n            j -= 1\n        input[k] = temp\n    print(\"Array After Reversing\")\n    for i in range(size):\n        print(input[i])\n",
        "test": "assert ",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "test": "assert     add_dict_to_tuple((1,2,3), {\"a\":1, \"b\":2}) == (1,2,3,{'a':1,'b':2})",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[-1]*cols for _ in range(rows)]\n    max_average = float('-inf')\n    \n    for j in range(cols):\n        dp[0][j] = cost[0][j]/cost[0][j]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0]/cost[i][0]\n        for j in range(1, cols):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]/cost[i][j]\n    for i in range(rows):\n        for j in range(cols):\n            max_average = max(max_average, dp[i][j])\n    return max_average\n",
        "test": "assert     maxAverageOfPath([[1, 2, 3],",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result=[]\n    for i in students.values():\n        if i[0]>=h and i[1]>=w:\n            result.append(i)\n    return result\n",
        "test": "assert ",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    n1, n2 = len(nums1), len(nums2)\n    for i in range(n1):\n        for j in range(n2):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n",
        "test": "assert     count_same_pair([1,2,3,4], [3,3,3,4]) == 4",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # code goes here\n    sum = 0\n    while power > 0:\n        sum += base % 10\n        base //= 10\n        power -= 1\n    return sum\n",
        "test": "assert ",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # print(text1)\n    quotations=['\"',\"'\"]\n    quo_open=False\n    quo_close=False\n    output = \"\"\n    for i in range(len(text1)):\n        if text1[i] in quotations:\n            if quo_open==True:\n                quo_close=True\n            elif quo_open==False:\n                quo_open=True\n        if quo_close==True and quo_open==True:\n            output+=text1[i]\n            quo_open=False\n            quo_close=False\n            \n    return output\n",
        "test": "assert     extract_quotation('') == ''",
        "num_ids": 2502,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x * (x+1) for x in test_tup])\n",
        "test": "assert     multiply_elements((0,0,0)) == (0,0,0), 'incorrect result'",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_lst=[]\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i]+lst2[i])\n    return sum_lst\n",
        "test": "assert     sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 521,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_copy = nums[:]\n    nums_copy.sort()\n    i = 0\n    while i < len(nums_copy):\n        if nums_copy[i] == nums_copy[i+1]:\n            nums_copy.pop(i)\n        else:\n            i += 1\n    return nums_copy\n",
        "test": "assert ",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return r*r*math.pi*h\n",
        "test": "assert     lateralsurface_cone(3,6) == 50",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    print(text)\n    text = text.replace(',','.')\n    text = text.replace(' ',':')\n    print(text)\n    return text\n",
        "test": "assert     replace_specialchar('a:b:c') == 'a:b:c'",
        "num_ids": 2372,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A)-1\n    while l <= r:\n        mid = (l+r)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1,3,4,5,6,7],0) == -1",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)+1):\n            prod_sum += arr[i:j]\n    return prod_sum\n",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0,'sum of products of 0 subarray is 0'",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle_middle_bits(n):\n        n1 = 0\n        n2 = 0\n        n3 = 0\n        if(n & 0x0001 == 1):\n            n1 |= 0x0001\n        if(n & 0x0002 == 2):\n            n1 |= 0x0002\n        if(n & 0x0004 == 4):\n            n1 |= 0x0004\n        if(n & 0x0008 == 8):\n            n1 |= 0x0008\n        if(n & 0x0010 == 10):\n            n1 |= 0x0010\n        if(n & 0x0020 == 20):\n            n1 |= 0x0020\n        if(n & 0x0040 == 40):\n            n1 |= 0x0040\n        if(n & 0x0080 == 80):\n            n1 |= 0x0080\n        if(n & 0x0100 == 128):\n            n1 |= 0x0100\n        if(n & 0x0200 == 256):\n            n1 |= 0x0200\n        if(n & 0x0400 == 448):\n            n1 |= 0x0400\n        if(n & 0x0800 == 896):\n            n1 |= 0x0800\n        if(n & 0x1000 == 2048):\n            n1 |= 0x1000\n        if(n & 0x2000 == 4096):\n            n1 |= 0x2000\n        if(n & 0x4000 == 8192):\n            n1 |= 0x4000\n        if(n & 0x8000 == 16384):\n            n1 |= 0x8000\n        n3 = n1\n        if(n & 0x0001 == 1):\n            n2 |= 0x0001\n        if(n & 0x0002 == 2):\n            n2 |= 0x0002\n        if(n & 0x0004 == 4):\n            n2 |= 0x0004\n        if(n & 0x0008 == 8):\n            n2 |= 0x0008\n        if(n & 0x0010 == 10):\n            n2 |= 0x0010\n        if(n & 0x0020 == 20):\n            n2 |= 0x0020\n        if(n & 0x0040 == 40):\n            n2 |= 0x0040\n        if(n & 0x0080 == 80):\n            n2 |= 0x0080\n        if(n & 0x0100 == 128):\n            n2 |= 0x0100\n        if(n & 0x0200 == 256):\n            n2 |= 0x0200\n        if(n & 0x0400 == 448):\n            n2 |= 0x0400\n        if(n & 0x0800 == 896):\n            n2 |= 0x0800\n        if(n & 0x1000 == 2048):\n            n2 |= 0x1000\n        if(n & 0x2000 == 4096):\n            n2 |= 0x2000\n        if(n & 0x4000 == 8192):\n            n2 |= 0x4000\n        if(n & 0x8000 == 16384):\n            n2 |= 0x8000\n        n = n1\n        n = n2\n        n3 = n3 ^ n\n        return(n3)\n    return(toggle_middle_bits(n))\n",
        "test": "assert     set_middle_bits(0) == 0, \"Wrong return\"",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i]!= x:\n        return i\n    else:\n        return i+1\n",
        "test": "assert left_insertion([1,2,3,4,6], 0) == 0, 'Wrong answer'",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n    \nif __name__ == \"__main__\":\n    assert check_str('anurag') == True\n    assert check_str('apple') == False\n    assert check_str('applea') == False\n    assert check_str('applea') == True\n    assert check_str('apple') == True\n    assert check_str('a') == True\n    assert check_str('') == False\n    print('All tests passed.'",
        "test": "assert ",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 738,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert         geometric_sum(9) == 27",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    N = 0\n    i = 0\n    while (i < n): \n        N = N + i\n        i = i + 1\n    return N\n",
        "test": "assert     find_Index(1) == 0, 'test_1'",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n",
        "test": "assert     tuple_to_dict((1,2,3,4,5,6,7,8)) == {1:2,2:3,3:4,4:5,5:6,6:7,7:8}",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n",
        "test": "assert all_Characters_Same('geeks') == False",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.25 * (1/6) * math.pow(side,2)\n    return area\n",
        "test": "assert     area_tetrahedron(1) == 0.5, \\",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 0:\n        return []\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1,2,3,4,5,6,7], 3) == [4,5,6,7,1,2,3]",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == None:\n            print(\"None value found in tuple.\")\n            return True\n    return False\n",
        "test": "assert     check_none((1, 2, 3)) == False, \"The tuple (1, 2, 3) has no None value.\"",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum+1):\n        #print(i)\n        if all(map(lambda x: i % x == 0, (list(map(int, list(str(i))))))):\n            print(i)\n",
        "test": "assert     divisible_by_digits(1,11) == [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*a/360\n",
        "test": "assert     sector_area(1,360) == math.pi * 1 ** 2",
        "num_ids": 476,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n1 = len(X)\n    m1 = len(Y)\n    n2 = len(Z)\n",
        "test": "assert     lcs_of_three('abc','abz','xzy') == 'abz', \"lcs_of_three should return 'abz'\"",
        "num_ids": 1088,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    x = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    for i in x:\n        str1 = str1.replace(i,i.title())\n    return str1\n",
        "test": "assert     capital_words_spaces(\"Hello, World\") == \"Hello, World\"",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=float)\n    #num_list = []\n    #for num in nums_str:\n    #    num_list.append(float(num))\n    #print(num_list)\n    return nums_str\n",
        "test": "assert     sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if test_list.__contains__(test_tup):\n        return test_list\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([], (1, 2, 3)) == [1, 2, 3]",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] >= arr[2 * i + 1] and arr[i] >= arr[2 * i + 2]:\n        return True\n    return False\n",
        "test": "assert ",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n - 1) + 1) // (n + 1)\n",
        "test": "assert ",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list, key=lambda x: x[1])[0:K]\n",
        "test": "assert     min_k([(1,2), (3,4), (5,6), (8,7), (9,5)], 2) == (1,2)",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return list(set(l1).intersection(set(l2), set(l3)))\n",
        "test": "assert     extract_index_list([1, 2, 3], ['a', 'b', 'c'], ['d', 'e', 'f']) == []",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert     second_smallest([]) == None",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.findall(r'[ab]',text)\n    return bool(text)\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return bool(re.match(r'[ab]',text))\n",
        "test": "assert     text_match_zero_one('ab') == True, \"Should be True\"",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for x in range(len(test_list)):\n        if test_list[x] == test_list[len(test_list) - 1 - x]:\n            count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs([]) == 0, \"Empty List\"",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count\n",
        "test": "assert     unique_sublists(    [1,1,1,1,2,2,2,2,2,3,3,3,3,3]) == {(1,): 5, (2,): 5, (3,): 5}",
        "num_ids": 570,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_decimal(\"3.12\") == True, \"Wrong!\"",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    num_set = set(arr)\n    if len(num_set) == 1:\n        return True\n    return False\n    \nif __name__ == \"__main__\":\n    arr = [1,1,2,2,3,3,4,4,5,5]\n    print(unique_Element(arr))",
        "test": "assert     unique_Element([1,2,2,3,4,4,3,2,1,1]) == False, \"It should return False\"",
        "num_ids": 354,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3%4 == 0:\n        if monthnum3 % 100!=0:\n            if monthnum3 % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \n",
        "test": "assert     check_monthnumber_number(2) == False",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr) == 0:\n        return\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1,len(arr)):\n        curr_diff = arr[i] - arr[i-1]\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n    return min_diff\n",
        "test": "assert     find_min_diff([1,2,3,4], 1) == 1, \"function should return 1\"",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number = 0\n    for i in str:\n        if i.isdigit():\n            number += 1\n    return number\n",
        "test": "assert     number_ctr('123') == 3, 'Wrong!'",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Your code here\n    count = 1\n    cur_div = 1\n    \n    while count <= n:\n        if (n % cur_div) == 0:\n            count += 1\n        else:\n            cur_div += 1\n    \n    return cur_div\n",
        "test": "assert     is_polite(0) == 1, \"Not correct\"",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append(l1[i:i+2])\n    return l2\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert     get_pairs_count([1,2,3,4,5], 6) == 3, \"get_pairs_count(1,6) should return 3\"",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n",
        "test": "assert     Diff([1,2],[2])==[1]",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum = sum + pow(i,4)\n    print(sum)\nodd_num_sum(10)",
        "test": "assert     odd_num_sum(20) == 1251, \"Wrong output\"",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #function to check if the given expression is balanced or not\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == \"(\":\n            stack.append(\"(\")\n        elif exp[i] == \"{\":\n            stack.append(\"{\")\n        elif exp[i] == \"[\":\n            stack.append(\"[\")\n        elif exp[i] == \")\":\n            if len(stack)==0 or stack.pop()!=\"(\":\n                return False\n        elif exp[i] == \"}\":\n            if len(stack)==0 or stack.pop()!=\"{\":\n                return False\n        elif exp[i] == \"]\":\n            if len(stack)==0 or stack.pop()!=\"[\":\n                return False\n    if len(stack)>0:\n        return False\n    return True\n",
        "test": "assert     check_expression(\"(((((((()))))))))\") == False,'should be false'",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_list = []\n    for word in test_str.split():\n        if len(word) == K:\n            new_list.append(word)\n    return \" \".join(new_list)\n",
        "test": "assert     remove_length(\"\", 2) == \"\"",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\n",
        "test": "assert     occurance_substring('aba', 'aba') is None",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    i = 0\n    while i < len(nums):\n        if i%2 == 0:\n            if nums[i]%2 == 1:\n                return False\n        i += 1\n    return True\n",
        "test": "assert     odd_position([0,1,2,3,4,5]) == True",
        "num_ids": 403,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # vowels = 'aeiou'\n    # test_str = 'letscode'\n    # Output: 5\n",
        "test": "assert     count_vowels('AaAa') == 2",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    temp_dict = dict()\n    for each in arr:\n        if each not in temp_dict:\n            temp_dict[each] = 1\n        else:\n            temp_dict[each] += 1\n    return sum([x for x in temp_dict.values() if x > 1])\n",
        "test": "assert     find_sum([1,3,5,6,7,8,9,0]) == 0, 'Wrong answer'",
        "num_ids": 2415,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Approach: Approach 1\n    # Iterate the list\n    #   Iterate through the list\n    #     if list[i] is equal to list[i+1]\n    #       create a sublist with just the element\n    #       and push the sublist onto the final list\n    #       remove the element from the list\n    #     else\n    #       move to the next element\n    #   return the final list\n    # Approach 2\n    # Iterate the list\n    #   Iterate through the list\n    #     if list[i] is equal to list[i+1]\n    #       create a sublist with just the element\n    #       push the sublist onto the final list\n    #       remove the element from the list\n    #     else\n    #       move to the next element\n    #   return the final list\n    \n    final_list = []\n    i = 0\n    \n    for k, g in groupby(list1):\n        if i == 0:\n            final_list.append([])\n        \n        if k == list1[i]:\n            final_list[-1].append(list1[i])\n            i += 1\n        else:\n            final_list[-1].append(list1[i])\n            i += 1\n    \n    return final_list\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    s = set(list1)\n    d = {}\n    for item in s:\n        c = 0\n        for x in list1:\n            if x == item:\n                c += 1\n        d.update({tuple(item):c})\n    return d\n    \n    \ndef sort_ranks(list1, list2):\n    '''\n    Write a function that takes two lists of integers and returns a list of the integers in the first list that are also in the second list.\n    '''\n    d = {}\n    for item in list1:\n        if item in list2:\n            d.update({item:True})\n    return d\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 556,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list, 2)\n",
        "test": "assert     find_combinations([(1,2,3),(1,3,4),(2,4,5),(3,5,6)]) ==     [(1,2,3),(1,3,4),(2,3,4),(2,4,5),(3,4,5),(3,5,6)]",
        "num_ids": 2717,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1, n):\n        if n%i==0:\n            count=count+1\n    if count%2==0:\n        return True\n    else:\n        return False\n",
        "test": "assert     count_divisors(2) == False, \"Correct answer: False\"",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+2,len(arr)+1,2):\n            odd_length_sum += sum(arr[i:j])\n    \n    return odd_length_sum\n    \nprint(odd_length_sum([1,2,3,4,5,6]))\n",
        "test": "assert     odd_length_sum('') == 0,'should return 0'",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    hi = mx - mn\n    hi = hi + mn\n    if mx == mn:\n        return 0.0, 0.0, mx\n    if hi == 0.0:\n        return 0.0, 0.0, mx\n    \n    if mx == r:\n        hi = (60.0 - mn)*60.0\n    elif mx == g:\n        hi = (60.0 - mn)*60.0 + 120.0\n    else:\n        hi = (60.0 - mn)*60.0 + 180.0\n    if hi < 0.0:\n        hi = 60.0 + hi\n    return hi/360.0, mx/hi, mx\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even*odd\n",
        "test": "assert ",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n",
        "test": "assert     tuple_str_int('(1,2,3)') == (1,2,3)",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    if a[i]!= x:\n        return i\n    else:\n        return i+1\n",
        "test": "assert     right_insertion([-2,5,-1,7,8,11], 3) == 1",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('ab{3}')\n    if re.match(pattern, text):\n        return \"Pattern Matched\"\n    else:\n        return \"Pattern Not Matched\"\n",
        "test": "assert     text_match_three(\"abb\") == True, \"abb\"",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n",
        "test": "assert     new_tuple([1,2,3], \"abcd\") == (\"a\", \"b\", \"c\")",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if isinstance(nums, list):\n        for i in range(len(nums)):\n            if (i%2 == 0) and (nums[i] % 2!= 0):\n                return False\n        return True\n    else:\n        raise TypeError('nums must be a list')\n",
        "test": "assert     even_position([1, 2, 3, 4, 5]) == False",
        "num_ids": 403,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    print(test_tup)\n    new_tup = []\n    for i in test_tup:\n        if i not in new_tup:\n            new_tup.append(i)\n    return tuple(new_tup)\n    ",
        "test": "assert     remove_nested((1, (2, 3), (4, 5), (6, 7))) == (1, (2, 3), (4, 5), (6, 7))",
        "num_ids": 2428,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    n = len(input_list)\n    lst_count = 0\n    for x in input_list:\n        if type(x) == list:\n            lst_count += 1\n    return lst_count\n",
        "test": "assert     count_list([]) == 0, 'Empty list'",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    j = len(arr)-1\n    while(j>=0):\n        if arr[j]==x:\n            return j\n        j=j-1\n    return -1\nprint(last([4, 6, 8, 10, 12],12))\nprint(last([4, 6, 8, 10, 12],4))\n",
        "test": "assert     last([10, 20, 30, 40, 50], 30) == 2",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = re.compile(r'a\\s*b')\n    result = pat.search(text)\n    if result!= None:\n        print(result.group())\n    else:\n        print('No match')\n",
        "test": "assert     text_starta_endb('abc') == None",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n    \nprint(return_sum({\"one\" : 1, \"two\" : 2, \"three\" : 3, \"four\" : 4})) #should return 10\nprint(return_sum({\"one\" : 1, \"two\" : 2, \"three\" : 3})) #should return 7\n",
        "test": "assert     return_sum({1: 1, 2: 2, 3: 3}) == 6",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for x in range(n):\n        if x%2==1:\n            sum_odd = sum_odd + x\n    return sum_odd\n",
        "test": "assert ",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    _sum = 0\n    for i in range(len(arr)):\n        _sum += arr[i]\n    return _sum\n",
        "test": "assert     _sum([1, 2, 3, 4, 5, 6]) == 21",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % n\n    d = n - d\n    return n ^ d\n",
        "test": "assert     left_rotate(5,0) == 0, \"rotate left by 0 bits\"",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n    #  return ''.join(text.split())\n",
        "test": "assert     remove_all_spaces(\"   \") == \"\", \"Remove all spaces - (1) works\"",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n",
        "test": "assert     test_three_equal(3,4,3) == 0, \"Should be 0\"",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr_count = 0\n    arr = list(arr)\n    for i in range(len(arr)):\n        if arr[i]!= arr[len(arr)-i-1]:\n            arr_count += 1\n    return arr_count\n",
        "test": "assert count_rotation([]) == 0, \"Empty Array\"",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # for i in range(int(n**(0.5)), int(n**(0.5)) + 1):\n    #     if n % i == 0:\n    #         return False\n    # return True\n    \n    while(n > 0):\n        r = n % 10\n        n = n // 10\n        if r * r!= n:\n            return False\n    return True\n",
        "test": "assert     is_perfect_square(1)    ==    False, \"Wrong answer\"",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return arr[0] * arr[1] % 2 == 0\n",
        "test": "assert     is_product_even([1,2,3,4,5])",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n",
        "test": "assert ",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for ch in test_str:\n        if ch.isupper():\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n",
        "test": "assert     max_run_uppercase('abcd') == 0, \"This should be 1\"",
        "num_ids": 691,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # nums = input(\"Enter a list of numbers separated by comma:\\n\")\n    try:\n        nums = nums.split(',')\n        nums = [int(i) for i in nums]\n        nums = list(filter(lambda x: x%2, nums))\n        print(nums[0])\n    except:\n        print(\"Error! Please enter a list of numbers separated by comma.\")\n",
        "test": "assert     first_odd([]) == None, \"Empty list\"",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 808,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if (test_tup[i][0]==K) or (test_tup[i][1]==K):\n            return True\n    return False\n",
        "test": "assert     check_K([(1, 2, 3), (4, 5), (1, 2), (4, 5), (3, 6), (1, 2, 3), (2, 3)], 3) == True",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    check = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            check = False\n            break\n    return check\n",
        "test": "assert     check_smaller((7, 2), (5, 4)) == (7, 2)",
        "num_ids": 425,
        "indeed": true
    }
]