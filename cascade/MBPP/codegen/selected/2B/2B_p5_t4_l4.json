[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for element in test_tup1:\n            if element in test_tup2:\n                return element\n    return None\n",
        "test": "assert     similar_elements((1,2,3,4,5), (1,2,3,4,5)) == True",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_not_prime(3) == True",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return [nums[i] for i in hq.nlargest(n,range(n),key=lambda x: nums[x])]\n",
        "test": "assert     heap_queue_largest([],0) == []",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    while (x & 1) == 0: \n        x >>= 1\n    return True\n    ",
        "test": "assert (is_Power_Of_Two(0b000000) == False), 'Case Not Completed'",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall('\\w{4,}', text)\n    return result\n",
        "test": "assert     find_char_long(\"\") == []",
        "num_ids": 2429,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i*i for i in nums]\nprint(square_nums([1,2,3]))\n",
        "test": "assert     square_nums([2, 3, 4]) == [4, 9, 16]",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Your code here\n    # print(str)\n    if len(str) < 2:\n        return 0\n    i = 0\n    while i < len(str) - 1:\n        if str[i]!= str[len(str) - 1 - i]:\n            break\n        i += 1\n    if i == len(str) - 1:\n        return 0\n    else:\n        # if len(str) % 2 == 0:\n        #     return 2\n        # else:\n        return 1\n",
        "test": "assert     find_Rotations(\"\") == 0",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0:\n        return s\n    if s[0] == ch:\n        return s[1:]\n    if s[-1] == ch:\n        return s[:-1]\n    return s\n",
        "test": "assert     remove_Occ(\"\", \"x\") == \"\"",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    M = list(M)\n    for i in range(n):\n        M[i] = list(M[i])\n        for j in range(n):\n            M[i][j] = int(M[i][j])\n            # if M[i][j] == 0:\n            #     M[i][j] = 0\n            # else:\n            #     M[i][j] = M[i][j]\n    s = sorted(M, key = sum)\n    M = list(s)\n    for i in range(n):\n        M[i] = list(M[i])\n    return M\n        \n",
        "test": "assert ",
        "num_ids": 950,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)\n",
        "test": "assert     find_Volume(0, 3, 5) == 0.0",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall(r'[a-z]+_[a-z]+', text)!= []\n",
        "test": "assert     text_lowercase_underscore('HELLO_') == False, \"The result is incorrect.\"",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n    \n",
        "test": "assert     square_perimeter(3) == 12, \"3\"",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = list(string)\n    string2 = list(string)\n    for i in string1:\n        if i in string2:\n            string2.remove(i)\n    return ''.join(string2)\n",
        "test": "assert str_to_list(\"\") == \"\"",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "test": "assert     test_duplicate([1,2,2,2,3,3]) == True, \"Pass case 3\"",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 8:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(8) == True",
        "num_ids": 2355,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num==1:\n        return True\n    elif num==2:\n        return True\n    else:\n        if num%2==0:\n            num=int(num/2)\n            return rev(num)\n        else:\n            num=int(num/2)+1\n            return rev(num)\n",
        "test": "assert     rev(1) == 1",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return int(arr[0])\n    else:\n        if arr[0] > arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n",
        "test": "assert     find_Max_Num([1, 1, 1, 1, 1, 1]) == 1",
        "num_ids": 2858,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0: \n        return True\n    else:\n        return False\nprint(opposite_Signs(5,5))\nprint(opposite_Signs(-4,-4))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(4,4))\n",
        "test": "assert     opposite_Signs(-1,1) == True, \"opposite_Signs test case 1 does not pass\"",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((n*(n+1))/2) \nprint(is_octagonal(1))\nprint(is_octagonal(7))\nprint(is_octagonal(11))\nprint(is_octagonal(10001))\nprint(\"--------------------------------------\")\n'''\nWhat does a programmer use when you define a function\nthat has a return statement?\n'''\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if (sum(s[i:j+1])==len(s[i:j+1])):\n                ans+=1\n    return ans\n",
        "test": "assert     count_Substrings(\"\") == 0",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for num in xs:\n        if smallest == None or num < smallest:\n            smallest = num\n    return smallest\n",
        "test": "assert     smallest_num([1,2,3,4,5,6,7,8]) == 1",
        "num_ids": 532,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = -9999999999999\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > maximum:\n                maximum = abs(test_list[i] - test_list[j])\n    return maximum\n    \n",
        "test": "assert     max_difference([(0, 1), (0, 2), (1, 2), (1, 3), (2, 3)]) == 2",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n",
        "test": "assert     subject_marks([(2, 1), (1, 1), (1, 2), (0, 0), (2, 2)]) == \\",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([1, 2]) == (1 + 2) == 3",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n",
        "test": "assert     pos_count([2,-3,4,5,7,8]) == 5",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "test": "assert bell_number(2) == 2",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n<2:\n        return True\n    else:\n        for i in range(0,n-1):\n            if (A[i]<A[i+1] and A[i]<A[i-1]):\n                return False\n            elif (A[i]>A[i+1] and A[i]>A[i-1]):\n                return False\n            else:\n                return True\n",
        "test": "assert     is_Monotonic([1,2,3,4,5,3,6,7,8]) == False",
        "num_ids": 2784,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    # 1. Initialize the sublist_length variable to 0.\n    sublist_length = 0\n    # 2. Initialize the sublist_index variable to 0.\n    sublist_index = 0\n    # 3. Loop through each element in the given list.\n    for i in range(len(l)):\n        # 4. If the current element matches the sublist starting from the sublist_index then increment the sublist_length variable.\n        if l[i] == s[sublist_index]:\n            sublist_length += 1\n        # 5. If the current element is not the sublist start then reset the sublist_length to 0 and move the sublist_index to the next index.\n        else:\n            sublist_length = 0\n            sublist_index += 1\n        # 6. If the current sublist_length is equal to the length of the sublist then return True.\n        if sublist_length == len(s):\n            return True\n    # 7. If the current sublist_length is not equal to the length of the sublist then return False.\n    return False\n    \n    \ndef list_intersection(l1, l2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    # 1. Initialize the list intersection variable to empty list.\n    intersection_list = []\n    # 2. Iterate through each element in l1.\n    for elem in l1:\n        # 3. If the element is present in l2 then add that element to the intersection_list variable.\n        if elem in l2:\n            intersection_list.append(elem)\n            l2.remove(elem)\n    # 4. Return the intersection_list.\n    return intersection_list\n    \n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    # 1. Initialize the anagram_check variable to False.\n    anagram_check = False\n    # 2. Initialize a dictionary to store the frequency of each character in s1.\n    char_dict = {}\n    # 3. Loop through each character in the string s1.\n    for i in range(len(s1)):\n        # 4. If the character is not already present in the dictionary then add it to the dictionary and initialize the count to 1.\n        if s1[i] not in char_dict:\n            char_dict[s1[i]] = 1\n        # 5. Else if the character is already present in the dictionary then increment the count of that character by 1.\n        else:\n            char_dict[s1[i]] += 1\n    # 6. Loop through each character in the string s2.\n    for j in range(len(s2)):\n        # 7. If the character is not already present in the dictionary then increment the count of that character by 1.\n        if s2[j] not in char_dict:\n            char_dict[s2[j]] = 1\n        # 8. Else if the character is already present in the dictionary then increment the count of that character by 1.\n        else:\n            char_dict[s2[j]] += 1\n    # 9. If the dictionary is not empty then the length of dictionary will be equal to the length of s1 and s2.\n    if len(char_dict) == len(s1) + len(s2):\n        # 10. Create a set to store the characters in s1 and s2.\n        char_set = set(s1) | set(s2)\n        # 11. Loop through each character in the set.\n        for k in char_set:\n            # 12. If the character is present in the dictionary and the count of that character in the dictionary is equal to the number of characters in s1 and s2 then add it to the anagram_check variable.\n            if k in char_dict and char_dict[k] == len(s1) + len(s2):\n                anagram_check = True\n    # 13. If the dictionary is not empty then there is an anagram.\n    return anagram_check\n    \n    \ndef is_rotated(l, k):\n    '''\n    Write a function to check whether the given list is rotated or not.\n    '''\n    # 1. Initialize the rotation variable to False.\n    rotation = False\n    # 2. Initialize the start variable to the head of the given list.\n    start = 0\n    # 3. Loop through each element in the given list.\n    for i in range(len(l)):\n        # 4. If the element is greater than the element at the current index then increment the start variable.\n        if l[start] > l[i]:\n            start += 1\n        # 5. If the element is smaller than the element at the current index then decrement the start variable.\n        elif l[start] < l[i]:\n            start -= 1\n        # 6. If the start variable and the index are equal to each other then the list is rotated.\n        if start == i:\n            rotation = True\n            break\n    # 7. Return the rotation variable.\n    return rotation\n    \n    \ndef find_sum_of_two_list_elements(l1, l2):\n    '''\n    Write a function to find the sum of the two list elements.\n    '''\n    # 1. Initialize the sum_list variable to 0.\n    sum_list = 0\n    # 2. Loop through each element in l1.\n    for i in range(len(l1)):\n        # 3. If the element is not in the list l2 then add it to the sum_list variable.\n        if l1[i] not in l2:\n            sum_list += l1[i]\n    # 4. Return the sum_list.\n    return sum_list\n    \n    \ndef find_sublist_starting_at_index_i(l, i):\n    '''\n    Write a function to find the sublist starting at the given index.\n    '''\n    # 1. Initialize the start variable to 0.\n    start = 0\n    # 2. Initialize the sublist variable to an empty list.\n    sublist = []\n    # 3. Loop through each element in the list.\n    for i in range(len(l)):\n        # 4. If the current element at the current index is greater than or equal to the element at the start then increment the start variable and move the sublist to the next element.\n        if l[i] >= l[start]:\n            start += 1\n        # 5. If the current element at the current index is less than or equal to the element at the start then append the current element to the sublist.\n        elif l[i] <= l[start]:\n            sublist.append(l[i])\n    # 6. Return the sublist.\n    return sublist\n    \n    \ndef find_sublist_ending_at_index_i(l, i):\n    '''\n    Write a function to find the sublist ending at the given index.\n    '''\n    # 1. Initialize the end variable to the length of the list.\n    end = len(l)\n    # 2. Initialize the sublist variable to an empty list.\n    sublist = []\n    # 3. Loop through each element in the list.\n    for i in range(len(l)):\n        # 4. If the current element at the current index is less than or equal to the element at the end then append the current element to the sublist.\n        if l[i] <= l[end-1]:\n            sublist.append(l[i])\n        # 5. If the current element at the current index is greater than or equal to the element at the end then increment the end variable and move the sublist to the next element.\n        elif l[i] >= l[end-1]:\n            end -= 1\n            sublist = []\n    # 6. Return the sublist.\n    return sublist\n    \n    \ndef get_even_fibonacci_numbers(n):\n    '''\n    Write a function to get the even fibonacci numbers up to the given integer n.\n    '''\n    # 1. Initialize a list to store the even fibonacci numbers.\n    even_fibonacci_list = []\n    # 2. Initialize the count variable to 0.\n    count = 0\n    # 3. Initialize the first and second fibonacci number to 0 and 1.\n    first_fib = 0\n    second_fib = 1\n    # 4. Loop until the count is equal t",
        "test": "assert     is_sublist([], None) == False",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(x) for x in Input])) > 1:\n        return False\n    else:\n        return True\n",
        "test": "assert     find_equal_tuple([(1,2,3),(1,2,3)]) == True",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[j] > nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n",
        "test": "assert     comb_sort([\"\"]) == [\"\"]",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*x == n:\n        return True\n    else:\n        return False\n",
        "test": "assert     dif_Square(5) == False, 'Wrong answer. '",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    m = len(patterns)\n    if m!= n:\n        return False\n    \n    for i in range(m):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True\n",
        "test": "assert     is_samepatterns([], []), 'Wrong'",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    a = []\n    for i in range(len(test_list)):\n        if (test_list[i][0] % K) == 0 and (test_list[i][1] % K) == 0 and (test_list[i][2] % K) == 0:\n            a.append(test_list[i])\n    return a\n",
        "test": "assert     find_tuples([(5, 2), (8, 2), (2, 3), (3, 5), (6, 1)], 4) == []",
        "num_ids": 856,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return(n%11 == 0)\n",
        "test": "assert not is_Diff(3)",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    return False\n",
        "test": "assert word_len('z') == False, 'correctness of word_len()'",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1: \n        return 4 \n    else: \n        return 4*tetrahedral_number(n-1) + 1 \n",
        "test": "assert     tetrahedral_number(1) == 4",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n",
        "test": "assert     volume_sphere(1) == 4 / 3 * math.pi * (1 ** 3), f'Wrong volume of sphere with radius 1. Should be 4/3*pi*(1**3): {volume_sphere(1)}'",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    string = strr\n    print(string)\n    return ord(string)\n",
        "test": "assert get_Char(\"c\") == 99, \"Wrong answer for the question of get_Char\"",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return c\n    \n    \n",
        "test": "assert     sequence(1) == 1 ",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surf = 4 * math.pi * r**2\n    return surf\n",
        "test": "assert     surfacearea_sphere(1) == 4 * math.pi, 'wrong'",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 3*(n**2)-1\n    b = a**0.5\n    c = n**0.5\n    return a*c-b**2\n",
        "test": "assert ",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries\n    '''\n    return {**dict1, **dict2}\n",
        "test": "assert     merge_dictionaries_three({1:0, 2:0, 3:0}, {1:0, 2:0, 3:0}, {4:0, 5:0, 6:0}) == {1:0, 2:0, 3:0, 4:0, 5:0, 6:0}",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    l = list(set(list1))\n    dict1 = {}\n    for i in l:\n        dict1[i] = list1.count(i)\n    return dict1\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 2355,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    lower = 0\n    upper = N\n    if N <= 0:\n        return -1\n    if N <= upper:\n        return N\n    while lower < upper:\n        mid = (upper + lower) // 2\n        if mid * mid > N:\n            upper = mid - 1\n        elif mid * mid < N:\n            lower = mid + 1\n        else:\n            return mid\n    if N > lower:\n        return lower\n    else:\n        return upper\n",
        "test": "assert     closest_num(1) == 1, 'First test case'",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n    return length\n",
        "test": "assert     len_log([\"a\"]) == 1, \"Fourth\"",
        "num_ids": 515,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False\n",
        "test": "assert     find_substring(\"\", \"\") == False, \"Wrong output\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if(n<1 or n>1000):\n        print(\"Please provide a valid number\")\n        return False\n    if(n==1 or n==2 or n==3 or n==7 or n==8 or n==15):\n        return True\n    if(n%2==0):\n        return False\n    \n    d = int(n**0.5)\n    for i in range(3,d+1,2):\n        if(n%i==0):\n            return False\n    return True\n",
        "test": "assert not is_undulating(16) == True",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert     power(2,2) == 4",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]\n    \n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1), reverse=True)[0]\n",
        "test": "assert     index_minimum([(2,4),(3,1),(4,2)]) == (3,1)",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst[0])\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n    return min\n",
        "test": "assert     Find_Min_Length([[1,2,3], [1], [1]]) == 1, 'Error in finding minimum length'",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    num_of_divisors = 1\n    for i in range(2, n):\n        if n % i == 0:\n            num_of_divisors += 1\n    return num_of_divisors\n",
        "test": "assert     divisor(10) == 3",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        for j in i:\n            if j in d.keys():\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n",
        "test": "assert     frequency_lists([]) == {}",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum_list = 0\n    for num in numbers:\n        sum_list += num\n    return sum_list / len(numbers)\n",
        "test": "assert     multiply_num([0]) == 0",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # your code here\n    binary = ''\n    while (n > 0): \n        binary = str(n % 2) + binary \n        n = n // 2\n    return binary \n",
        "test": "assert     decimal_to_binary(17) == \"10001\"",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    count = 1\n    nums = set()\n    while num!= nums and count < 1000000:\n        if num % 10 == 0:\n            nums.add(num)\n            count += 1\n        else:\n            nums.add(num * 10 + 9)\n            count += 1\n        num = num // 10\n    if num == 0:\n        return 1\n    if num == 9:\n        return 0\n    return num * 10 + 1\n",
        "test": "assert     next_smallest_palindrome(0) == 1",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert     kth_element([1], 1) == 1",
        "num_ids": 645,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n",
        "test": "assert     snake_to_camel('snakecase') == 'Snakecase'",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    if m == 1:\n        return n\n    if n == 2:\n        return n * (n - 1)\n    a = 0\n    i = 0\n    while i < m:\n        a = a + eulerian_num(n - 2, m - 1)\n        i += 1\n    return a + eulerian_num(n - 1, m)\n",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 2671,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n",
        "test": "assert     sort_sublists([[1],[\"abc\"],[\"abc\"],[2]]) == [[1],[\"abc\"],[\"abc\"],[2]]",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(1 for i in lst if i)\n",
        "test": "assert     count([]) == 0",
        "num_ids": 2391,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_lists([], ()) == ([],), \"Wrong!\"",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1 = num1\n    list2 = num2\n    list3 = num3\n    list1_len = len(list1)\n    list2_len = len(list2)\n    list3_len = len(list3)\n    l1 = l2 = l3 = 0\n    new_list = []\n    while l1 < list1_len and l2 < list2_len and l3 < list3_len:\n        if list1[l1] <= list2[l2] and list1[l1] <= list3[l3]:\n            new_list.append(list1[l1])\n            l1 += 1\n        elif list2[l2] <= list1[l1] and list2[l2] <= list3[l3]:\n            new_list.append(list2[l2])\n            l2 += 1\n        else:\n            new_list.append(list3[l3])\n            l3 += 1\n    while l1 < list1_len:\n        new_list.append(list1[l1])\n        l1 += 1\n    while l2 < list2_len:\n        new_list.append(list2[l2])\n        l2 += 1\n    while l3 < list3_len:\n        new_list.append(list3[l3])\n        l3 += 1\n    return new_list\n",
        "test": "assert     merge_sorted_list([1,2,3,4,5], [], [6,7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 1420,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0:\n        return 1\n    return sum(odd_Equivalent(s[i::2],n-1) for i in range(n*2))\n",
        "test": "assert odd_Equivalent('00011',1) == 2",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set(common_elements(*nestedlist))\n",
        "test": "assert     common_in_nested_lists([[1,2],[1,2,3]]) == [[1,2,3]], \"Wrong\"",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "test": "assert     check_integer('7') == True, 'Expected True'",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary!= {}:\n            return False\n    return True\n",
        "test": "assert     empty_dit([{'a':1},{},{}]) == False",
        "num_ids": 998,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "test": "assert     tuple_to_int((0, 0, 0, 0, 0, 0)) == 0",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                test_list[i][j] = None\n    return test_list\n",
        "test": "assert     list_to_float([\"1\", \"2.3\", \"3\", \"4.5\", \"5\", \"5\"]) == [[1.0], [2.3], [3.0], [4.5], [5.0], [5.0]]",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split() \n",
        "test": "assert     string_to_list(\"spam ham eggs\") == ['spam', 'ham', 'eggs'],'string_to_list has wrong output'",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Python program to find the element \n    # that appears only once in a sorted array \n    # using loop \n    for i in range(len(arr)): \n        for j in range(0,len(arr) - i): \n            if arr[j]!= arr[j+1]: \n                break\n        if j == len(arr)-i-1: \n            return arr[i] \n    return -1\n",
        "test": "assert ",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key=lambda x: x[1])\n    max_prod = float('-inf')\n    curr_prod = 1\n    curr_max = 1\n    curr_min = 1\n    for i, x in enumerate(list1):\n        if i == len(list1) - 1:\n            break\n        if x[0] < list1[i + 1][0]:\n            curr_max = x[1]\n            curr_min = list1[i + 1][1]\n            curr_prod = x[1] * list1[i + 1][1]\n            if curr_max > max_prod:\n                max_prod = curr_max\n            if curr_min > max_prod:\n                max_prod = curr_min\n        else:\n            curr_max = x[1]\n            curr_min = 1\n            curr_prod = x[1] * 1\n            if curr_max > max_prod:\n                max_prod = curr_max\n            if curr_min > max_prod:\n                max_prod = curr_min\n    return max_prod\n",
        "test": "assert ",
        "num_ids": 2770,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    n = 1\n    s = 0\n    while n < limit:\n        s_tmp = sum_divisors(n)\n        if s_tmp == n:\n            s = s + n\n        n = n + 1\n    return s\n",
        "test": "assert     amicable_numbers_sum(1) == 0",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a*b)\n",
        "test": "assert     angle_complex(0,0) == 0",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == \"0\": return 0\n    if string == \"1\": return 1\n    ans = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            if string[i] == string[i-1]:\n                ans = max(ans, find_length(string[i:])+1)\n            else:\n                ans = max(ans, find_length(string[i+1:])+1)\n        else:\n            if string[i] == string[i-1]:\n                ans = max(ans, find_length(string[i+1:])+1)\n            else:\n                ans = max(ans, find_length(string[i+1:])+1)\n    return ans\n",
        "test": "assert     find_length(\"1111\") == 4",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a + b\n",
        "test": "assert     sum(1,10)==11, \"3\"",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(3, 5) == 15",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    output = []\n    for i in str:\n        if len(i) > n:\n            output.append(i)\n    return output\n",
        "test": "assert ",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    else:\n        my_matrix.pop(0)\n        my_matrix.pop()\n        if sum(i for i in range(len(my_matrix)))!= sum([my_matrix[i][i] for i in range(len(my_matrix))]):\n            return False\n        if sum(i for i in range(len(my_matrix)))!= sum([my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))]):\n            return False\n        for i in range(len(my_matrix)):\n            for j in range(len(my_matrix)):\n                if my_matrix[i][j]!= my_matrix[j][i]:\n                    return False\n        return True\n    ",
        "test": "assert     magic_square_test([",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in range(len(nums)):\n        d[nums[i]] += 1\n    maximum = max(d.values())\n    for k, v in d.items():\n        if v == maximum:\n            return k\n    return None\n",
        "test": "assert max_occurrences([1,2,3,3,4,4,4,5]) == 4, \"wrong answer\"",
        "num_ids": 609,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    vowels_dict = {v: idx for idx, v in enumerate(vowels)}\n    \n    str2 = list(str1)\n    for idx in range(len(str2)):\n        if str2[idx] in vowels_dict:\n            str2[idx] = str2[vowels_dict[str2[idx]]]\n    return ''.join(str2)\n",
        "test": "assert     reverse_vowels('') == ''",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert     tup_string((10)) == '10'",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += i\n    return count\n",
        "test": "assert     sum_negativenum([-5,-4,-3,-2,-1]) == -1",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    num = (n * (3 * n - 1)) / 2\n    num = num - (n - 1) * n * ((n + 1) / 2)\n    return int(num)\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeros = 0\n    zeros = 0\n    for x in nums:\n        if x!= 0:\n            non_zeros += 1\n        else:\n            zeros += 1\n    return zeros/non_zeros\n",
        "test": "assert zero_count([0, 1, 0, 1]) == 1.0",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n>0:\n        if n%2==0:\n            n/=2\n        else:\n            return False\n    return True\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(155) == False, \"155 should be represented as 2**5 + 2**3\"",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert     circle_circumference(0.0) == 0.0, '0.0 should be 0.0.'",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    lst = []\n    for i in test_list:\n        lst.extend(i)\n    return set(lst)\n",
        "test": "assert     extract_singly([[1,2,3], [4,5,6]]) == set([1,2,3,4,5,6])",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    i = 0\n    if n <= 1:\n        return nums\n",
        "test": "assert ",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return 0\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    for item in list1:\n        lst1.append(item)\n    for item in list2:\n        lst2.append(item)\n    for item in list3:\n        lst3.append(item)\n    for i in range(len(lst1)):\n        if lst1[i] == lst2[i] and lst1[i] == lst3[i]:\n            return 1\n    return 0\n",
        "test": "assert     count_samepair([[1, 1, 1], [1, 1, 1], [1, 1, 1]], [[1, 1, 1], [2, 2, 2], [1, 1, 1]], [[1, 1, 1], [1, 2, 1], [1, 1, 1]]) == 1",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for i in Input:\n        list_count += 1\n    return list_count\n",
        "test": "assert     find_lists(()) == 0",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        max_diff = max(max_diff, abs(arr[i]-arr[i+1]))\n    return max_diff\n    \n    \ndef max_Abs_Diff1(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        max_diff = max(max_diff, max(abs(arr[i]), abs(arr[i+1])))\n    return max_diff\n",
        "test": "assert     max_Abs_Diff([1, 2, 3, 4]) == 1",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 1\n    y = 0\n    for i in range(1, n):\n        print(x, y)\n        if a * x + b * y == n:\n            return x, y\n        elif a * x + b * y < n:\n            y += 1\n        elif a * x + b * y > n:\n            x += 1\n    return None\n",
        "test": "assert     find_solution(2, 1, 1) is None",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [value for value in list1 if value not in list2]\n",
        "test": "assert     remove_elements([1,2,3,4,5,6], [2,3,4,5]) == [1,6], \"Wrong\"",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n",
        "test": "assert     sum_series(3) == 4",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l ** 2) / (4 * tan(pi / l))\nprint(area_polygon(2, 3))\n",
        "test": "assert     area_polygon(4, 4) == (4**2) * 4 / (4 * tan(pi/4))",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, (n//2)+1):\n        if (n%i == 0):\n            sum = sum + i\n    if(sum == n):\n        return True\n    else:\n        return False\n",
        "test": "assert     div_sum(18) == False, '5 + 18 = 19, false'",
        "num_ids": 2371,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    n_char_pos = {}\n    for i in range(len(str1)):\n        n_char_pos[str1[i]] = n_char_pos.get(str1[i], 0) + 1\n    return n_char_pos\n",
        "test": "assert     count_char_position(\"a\") == {'a': 1}",
        "num_ids": 2634,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n    \n        \n",
        "test": "assert     find_even_pair([4,3,2,3,6]) == 1, 'Should find 2'",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i <<= 1\n    return i >> 1\n",
        "test": "assert     next_power_of_2(0) == 0",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    result = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            result += 1\n    return result\n",
        "test": "assert     frequency([1,2,3,4,5,6,7,8,9,9,9], 8) == 1",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n",
        "test": "assert     sum_range_list([1, 2, 3, 4, 5], 2, 2) == 3, 'incorrect'",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n",
        "test": "assert    perimeter_pentagon(3) == 15",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    n = 0\n    for i in range(len(s)):\n        if s[i] == 'd':\n            n += 1\n    return n\n",
        "test": "assert     count_occurance('std') == 1",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        if isinstance(test_tuple, tuple):\n            return all(isinstance(element, type(test_tuple[0])) for element in test_tuple)\n        else:\n            return False\n    except:\n        return False\n",
        "test": "assert     check_type(('apple', '5.6')) == True,'return True if all the elements are the same type.'",
        "num_ids": 843,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    counter = 0\n    for i in range(0,n):\n        if arr[i] == x:\n            counter += 1\n            if counter > (n/2):\n                return True\n    return False\n",
        "test": "assert ",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n - 1)\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = \"\"\n    for index, char in enumerate(str):\n        if index % 2 == 0:\n            odd_values += char\n    return odd_values\n",
        "test": "assert     odd_values_string('hi') == 'h'",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\n",
        "test": "assert     min_of_three(1,2,3) == 1, 'Wrong answer'",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    set = False\n    while l <= r:\n        if n & (1<<l) == 0:\n            set = False\n        else:\n            set = True\n        if set == True:\n            break\n        l+=1\n    return set\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(n=1, l=0, r=0) == True, \"Wrong Output\"",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Sort the array by the negative values\n    arr.sort(key = lambda x: x < 0, reverse = True)\n    \n    # Sort the array by the positive values\n    arr.sort()\n    \n    # Return the re-arranged array\n    return arr\n",
        "test": "assert     re_arrange_array([1,2,3,-4,5], 4) == [-4,1,2,3,5]",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # create a blank string\n    str2 = \"\"\n    \n    # check if blank space is in the string\n    if char == \" \":\n        pass\n    else:\n        # add each element to the blank string\n        for element in str1:\n            if element == \" \":\n                str2 += char\n            else:\n                str2 += element\n    \n    return str2\n",
        "test": "assert     replace_blank('', '*') == '', 'Not working'",
        "num_ids": 569,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\n",
        "test": "assert     larg_nnum([1,2,3,4,5,6,7,8], 2) == [8,7], 'incorrect'",
        "num_ids": 354,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #what you need to know:\n    # the volume of a cylinder is the pi times the radius times the height of the cylinder.\n    # the height of the cylinder is the height minus the radius.\n    # the radius is r\n    # the pi is pi\n    # the volume is pi times r times the height\n    # the height minus the radius is h\n    # the height minus the radius is h\n    # the radius is r\n    # the height minus the radius is h\n    # the radius times the height minus the radius is 2r*h\n    # the radius times the height minus the radius is 2r*h\n    # the pi times the radius times the height minus the radius is pi*r*h\n    # the pi times the radius times the height minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the radius times the height minus the radius is 2r*h\n    # the radius times the height minus the radius is 2r*h\n    # the pi times the radius times the height minus the radius is pi*r*h\n    # the pi times the radius times the height minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the radius times the height minus the radius is 2r*h\n    # the radius times the height minus the radius is 2r*h\n    # the pi times the radius times the height minus the radius is pi*r*h\n    # the pi times the radius times the height minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is p",
        "test": "assert ",
        "num_ids": 2247,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(0) == 0",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while (n & 0x01)!= 0: \n        n = n >> 1\n    return n\n    \n",
        "test": "assert     even_bit_set_number(1) == 0",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for each_tuple in test_list:\n        if each_tuple not in d:\n            d[each_tuple] = 1\n        else:\n            d[each_tuple] += 1\n    return d\n",
        "test": "assert ",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    if len(str)==0:\n        return 0\n    for i in range(0,len(str)):\n        count=count+1\n        if str[i]==' ':\n            count=count-1\n        if str[i-1]==' ':\n            count=count-1\n    return count\n",
        "test": "assert     number_of_substrings(\"\") == 0, \"Wrong output\"",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #print(m,n)\n    num_seq = 0\n    i = 1\n    j = 0\n    #j = i\n    while i <= n:\n        #print(i)\n        i = i*2\n        j = j + 1\n        #print(i,j)\n        num_seq += 1\n    return(num_seq)\n",
        "test": "assert     get_total_number_of_sequences(1,1)==1",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n    \ndef edit_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains all the elements of list2 followed by list1 in the order that they appear in list1.\n    '''\n    list1.extend(list2)\n    return list1\n    \ndef filter_list(list1,list2):\n    '''\n    Write a function that takes in a list and a list of values and returns a new list with only the elements in the list that are also in the values list.\n    '''\n    return list(filter(lambda x: x in list2, list1))\n    \ndef dictionary_list(key1, value1, dictionary1):\n    '''\n    Write a function that takes in a list of keys and values and creates a dictionary with the keys as the list elements and the values as the dictionary values.\n    '''\n    dictionary1 = {key1:value1}\n    return dictionary1\n    \ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and returns a new list with the elements of the list in reverse order.\n    '''\n    list1.reverse()\n    return list1\n    \ndef merge_sort(list1):\n    '''\n    Write a function that takes in a list and sorts it using the merge sort algorithm.\n    '''\n    def merge(left, right):\n        merged = []\n        i = 0\n        j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged\n",
        "test": "assert     replace_list([], []) == []",
        "num_ids": 755,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n",
        "test": "assert     count_charac(\"\") == 0",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 1\n    while i * i < N:\n        i += 1\n    return i * i\n",
        "test": "assert     next_Perfect_Square(3) == 4",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "test": "assert     max_sum([]) == 0, 'empty'",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 1:\n        return 1\n    else:\n        x = number // 2\n        y = number // 2\n        while x!= y:\n            if x > y:\n                x = x - y\n            else:\n                y = y - x\n        return y\n",
        "test": "assert (babylonian_squareroot(0) == 0.0),'square root error'",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    if str==str[::-1]:\n        return len(str)\n    max_len=0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            substr=str[i:j]\n            if substr==substr[::-1]:\n                max_len=max(max_len,len(substr))\n    return max_len\n",
        "test": "assert     lps(\"a\") == 1",
        "num_ids": 2878,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n+1))/2\n",
        "test": "assert     harmonic_sum(0) == 0",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) > len(array_nums2):\n        return intersection_array(array_nums2,array_nums1)\n    list1 = []\n    for i in array_nums1:\n        if i in array_nums2:\n            list1.append(i)\n    return list1\n",
        "test": "assert     intersection_array([4,5,6], [1,2,3]) == []",
        "num_ids": 794,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #code here\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X(('a', 'b', 'c', 'd'), 'a') == 1",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = list.copy()\n    new_list.insert(0,element)\n    return new_list\nprint(insert_element([1, 2, 3], 6))\nprint(insert_element([1, 2, 3], 2))\nprint(insert_element([1, 2, 3], 1))\n",
        "test": "assert not insert_element([1,2,3],4) == [1,2,3,4]",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = []\n    for n in numbers:\n        polar = complex(n.real,n.imag)\n        r.append(polar)\n    return r\n    \ndef print_list(numbers):\n    '''\n    Write a python function to print a list of complex numbers in the form of \n    r * i.\n    '''\n    for n in numbers:\n        print(f\"{n.real} * i + {n.imag}\")\n    \ndef create_list(base, m, n):\n    '''\n    Write a python function to create a list of complex numbers.\n    '''\n    a = [complex(base, i) for i in range(m,n)]\n    return a\n",
        "test": "assert     convert([1+2j, 3+4j, 5+6j, 2+3j]) == [(1+2j), (3+4j), (5+6j), (2+3j)], \"Wrong output\"",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 1 == 0:\n            count += 1\n    return count\n",
        "test": "assert     count_integer([]) == 0, \"input is empty\"",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i+n]) for i in range(0, len(l), n)]\n",
        "test": "assert     combinations_colors([1,2,3], 1) == [(1,), (2,), (3,)]",
        "num_ids": 2199,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num = n + 1\n    primes = 0\n    prime = 0\n    for i in range(2, num):\n        for j in range(2, i):\n            if i % j == 0:\n                prime += 1\n        if prime == 0:\n            primes += 1\n        prime = 0\n    return primes\n",
        "test": "assert     count_Primes_nums(1) == 0, 'Not a number'",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "test": "assert     swap_numbers(5,9) == (9,5)",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1[0], test_tup1[1], test_tup2[0], test_tup2[1]), \n            max(test_tup1[0], test_tup1[1], test_tup2[0], test_tup2[1]))\n",
        "test": "assert     maximize_elements((5, 5), (4, 5)) == (5, 5)",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt\n    primes = []\n    for i in range(n):\n        prime = True\n        for j in range(2, int(sqrt(i))+1):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            primes.append(i)\n    return primes[-1]\n",
        "test": "assert     newman_prime(4) == 7",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1]\n",
        "test": "assert     division_elements((3,2),(3,2)) == (1,1)",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n    \ndef remove_element_from_list(list1, target):\n    '''\n    Write a function that takes in a list and an integer target and removes every instance of target from the list and returns the resulting list. If you are given a list with only one element, the function should return the original list. If there are no instances of the target, the function should return an empty list.\n    '''\n    # list1 = [1,2,3,4,5,6,7,8,9,10]\n    # target = 2\n    # res = list1[:5] + list1[5+1:]\n    # print(res)\n",
        "test": "assert     split_two_parts([],3) == ([],[])",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_age = h_age * 7\n    return dog_age\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if S == None:\n        return None\n    if len(S) == 1 and S!= None:\n        return S\n    else:\n        sub_list = []\n        for i in range(0, len(S), step):\n            sub_list.append(S[i:i+step])\n        return sub_list\n",
        "test": "assert     list_split([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\ndef lateral_surface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\ndef lateral_surface_square(l):\n    '''\n    Write a function to find the lateral surface area of a square given its side length.\n    '''\n    return 2*l*l\ndef lateralsurface_square(l):\n    '''\n    Write a function to find the lateral surface area of a square given its side length.\n    '''\n    return 2*l*l\ndef lateralsurface_rectangle(l):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its length and width.\n    '''\n    return 2*l*l\ndef lateral_surface_rectangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its length and width.\n    '''\n    return 2*l*w\n",
        "test": "assert ",
        "num_ids": 75,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n%2!= 0:\n        return n*(n+1)*(n+2)/6\n    else:\n        return n*n*(n+1)/3\n        \n    # Your code here...\n",
        "test": "assert     square_Sum(0) == 0, \"square_Sum\"",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (n + 1) * (n // 2)\n",
        "test": "assert ",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('A') == 65",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if(i % 2 == 0):\n            even_index = i\n            even_sum = even_sum + arr[even_index]\n    return even_sum\n",
        "test": "assert ",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (n*(n+1))/2\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]\n",
        "test": "assert     rear_extract([('Cookie', 'Seed'), ('Cake', 'Honey'), ('Bread', 'Water')]) == ['Seed', 'Honey', 'Water']",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[:])\n",
        "test": "assert     substract_elements((), ()) == ()",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def is_even(n):\n        if(n%2 == 0):\n            return True\n        else:\n            return False\n    odds = 0\n    evens = 0\n    for i in range(n):\n        if(is_even(i)):\n            evens+=1\n        else:\n            odds+=1\n    sum_value = 0\n    for j in range(odds):\n        sum_value+=math.factorial(odds-j)\n    for k in range(evens):\n        sum_value-=math.factorial(evens-k)\n    return sum_value\n",
        "test": "assert     even_binomial_Coeff_Sum(4) == 0",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi, sqrt\n    volume = pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cylinder(3,2) == 28.274, \"Error\"",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key:dict[key] for key in dict if key in dict and dict[key]>=n}\n    return filtered_dict\n",
        "test": "assert     dict_filter({'a':1, 'b':2, 'c':1, 'd':4},-1) == {'a': 1, 'b': 2, 'c': 1, 'd': 4}",
        "num_ids": 840,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements((0,0,0,0,0,0,0,0,0)) == 0, 'incorrect'",
        "num_ids": 2561,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n*(n+1)/2)\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "test": "assert sequential_search([1, 2, 3], 1) == (True, 0)",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) < 1:\n        return True\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert     all_unique([1,1,2,3,4,5]) == False, \"Wrong output\"",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n",
        "test": "assert     sub_list([],[]    ) ==    []",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    num = str(n)\n    \n    freq = {}\n    \n    for i in num:\n        freq[i] = num.count(i)\n    \n    for k in freq:\n        if freq[k] > freq[k]:\n            return False\n    \n    return True\n",
        "test": "assert     validate(12)==True, \"Test Case 2\"",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list)==0:\n        return False\n    if element in list:\n        return True\n    else:\n        return False\n",
        "test": "assert not check_element([0,0,0],1)",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return True if re.search(r'a{1,2}b', text) else False\n",
        "test": "assert text_match_two_three('bbbb') == False",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # To find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # To find the sum of the array itself, we will use the same algorithm as max_sub_array_sum.\n    # To find the repeating number, we need to find the repeating number k times, so we will use the same loop and count how many times we have repeated the repeating number. \n    \n    # Step 1 - Initialize the variables\n    max_sum = a[0]\n    repeating_number = a[0]\n    \n    # Step 2 - Find the maximum sum, and the repeating number\n    for i in range(1, n):\n        if a[i] > max_sum:\n            max_sum = a[i]\n            repeating_number = a[i]\n        elif a[i] == repeating_number:\n            repeating_number = repeating_number + a[i]\n            \n    # Step 3 - Check if repeating_number is not k\n    if repeating_number!= k:\n        # Check if the repeating number is not in the array\n        if max_sum + k not in a:\n            # If max_sum + k is not in the array, then we have to return max_sum + k\n            return max_sum + k\n            \n    # Step 4 - To find the maximum sum of a contiguous array, we will use the same algorithm as max_sub_array_sum.\n    # First, we will sort the array, and then find the maximum sum.\n    \n    a.sort()\n    max_sum = a[0]\n    \n    # Step 5 - Find the maximum sum\n    for i in range(1, n):\n        if a[i] > max_sum:\n            max_sum = a[i]\n            \n    # Step 6 - Check if the maximum sum + k is not in the array\n    if max_sum + k not in a:\n        # If max_sum + k is not in the array, then we have to return max_sum + k\n        return max_sum + k\n        \n    # Step 7 - Check if the maximum sum + k is in the array, and return it\n    return max_sum + k\n    ",
        "test": "assert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 5, 2) == 7",
        "num_ids": 1398,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if (i%2 == 0):\n            sum += i*i\n    return sum\n    \n    \ndef count_even(n):\n    '''\n    Write a python function takes in an integer n and returns the count of even numbers between 1 to n.\n    '''\n    count = 0\n    for i in range(1,n):\n        if (i%2 == 0):\n            count += 1\n    return count\n    \n    \ndef sum_of_square(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i\n    return sum\n    \n    \ndef sum_of_square_divisors(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of square of divisors of n.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if (n%i == 0):\n            sum += i\n    return sum*sum\n    \n    \ndef prime_factors(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i == 0):\n            factors.append(i)\n    return factors\n    \n    \ndef prime_factors_2(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_3(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_4(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_5(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_6(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_7(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_8(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_9(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_10(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_11(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_12(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_13(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_14(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_15(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_16(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_17(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        i",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n",
        "test": "assert max_length([[]]) == 0",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case\n    if k == 1:\n        return n\n",
        "test": "assert ",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n >= 0 and m >= 0:\n        q = int(n/m)\n        return q\n    elif n <= 0 and m <= 0:\n        q = int(m/n)\n        return q\n    else:\n        print(\"Invalid\")\n",
        "test": "assert     find(3,3) == 1",
        "num_ids": 2288,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    return side\n",
        "test": "assert     otherside_rightangle(3,4) == 5",
        "num_ids": 1116,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num\n",
        "test": "assert     max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "test": "assert     sum_div(0) == 0",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(0,len(arr)-1): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                count += 1\n    print(count)\n    return count\n",
        "test": "assert     get_Inv_Count([1, 2, 3, 4, 5]) == 0, \"Wrong answer\"",
        "num_ids": 1013,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    final_list = []\n    for i in list1:\n        if isinstance(i,list):\n            final_list.extend(flatten_list(i))\n        else:\n            final_list.append(i)\n    return final_list\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    sorted_data = sorted(stdata, key = lambda x: x[1], reverse=True)\n    max_aggregate = sorted_data[0][1]\n    for i in range(1, len(sorted_data)):\n        max_aggregate = max(max_aggregate, sorted_data[i][1])\n    return max_aggregate\n",
        "test": "assert     max_aggregate([('a', 1), ('b', 2), ('c', 3), ('d', 2), ('e', 1), ('a', 2), ('b', 3)]) == 'a'",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # This function takes time O(n*m*m) where n is the length of sequence and m is the no. of 1's in the sequence.\n    # However, it is very easy to come up with using the backtracking approach to solve this problem.\n    # But it can be easily modified to use the DP approach.\n    \n    count_seq = 0\n    \n    # Let us see the backtracking approach.\n    # We can implement the DP approach by using a 1D array.\n    # We can use a variable to store the summation of all bits in last n positions.\n    # We can also keep a 2D array to store the summation of all bits in the first n positions.\n    # The first row of the 2D array is initialized to 0 and each subsequent row is initialized to the summation of bits in ith position.\n    # For example, if we have a sequence of length 4 and we initialize 2D array with 0,0,0,0. Then in the first row we will get 0 + 0 + 0 + 0 = 0.\n    # In the second row we will get 0 + 0 + 1 = 1, and so on.\n    # So now we need to fill up 2D array in a top-down fashion.\n    # If we are at the last row, we can now fill up a column with 1's.\n    # If we are not at the last row, we need to fill up a column with 0's.\n    # Here we need a counter for each column, and we fill it up using a for loop.\n    # But we need to start from last row to first row and fill it up from the last row to the first row.\n    # We can keep doing this recursively as we move further down the 2D array.\n    \n    dp = [[0]*n]\n    \n    # Define base cases.\n    # We don't need to fill up to 2nd row.\n    # We can fill up all 1's to nth row.\n    dp[0][0] = 1\n    \n    # Fill the 2nd row.\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1]\n    \n    # Fill the first n rows.\n    for i in range(1, n):\n        for j in range(i):\n            # If the sum of the jth bit in the sequence is same as the sum of the (i-j)th bit in the sequence, then the i+j bit in sequence is 1.\n            if (i-j) % 2 == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = 0\n    \n    # Fill the nth row.\n    for i in range(1, n):\n        dp[i][n-1] = 1\n    \n    # Fill the n-th column.\n    for i in range(1, n):\n        dp[n-1][i] = 1\n    \n    # Fill up the first n columns.\n    for i in range(1, n):\n        dp[i][0] = 1\n    \n    # Fill up the nth column.\n    for i in range(1, n):\n        dp[i][n-1] = 1\n    \n    # Counting all the binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    for i in range(n):\n        for j in range(n):\n            # If the sum of the jth bit in the sequence is same as the sum of the (i-j)th bit in the sequence, then the i+j bit in sequence is 1.\n            if (i-j) % 2 == 0:\n                count_seq += dp[i][j]\n    \n    return count_seq\n    ",
        "test": "assert     count_binary_seq(1) == 1 ",
        "num_ids": 3352,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 0:\n        return 0\n    if not isinstance(d,dict):\n        return 0\n    for k in d.keys():\n        if isinstance(d[k],dict):\n            if dict_depth(d[k])>0:\n                return 1+dict_depth(d[k])\n    return 1\n",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[index-1]\n",
        "test": "assert     find_Element([1,2,3,4,5],[[-4,0,3],[0,-4,2],[2,-3,1]],3,4)==4, 'Test Failed'",
        "num_ids": 875,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[:2]\n",
        "test": "assert     start_withp(['pear','peach']) == ['pear', 'peach']",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    s = []\n    for i in range(n):\n        s.append([None] * n)\n    s[0][0] = a[0]\n    for i in range(1, n):\n        s[i][0] = s[i-1][0] + a[i]\n    for j in range(1, n):\n        for i in range(j, n):\n            s[i][j] = max(s[i-1][j], s[i-1][j-1]) + a[i]\n    \n    ans = s[n-1][k-1] if k <= n else -1\n    return ans\n",
        "test": "assert     max_sum_increasing_subseq([10,20,30,5,10,50],20,10) == 110",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a = tuplex[0]\n    b = tuplex[1]\n    c = tuplex[2]\n    if (m,n) == (1,1):\n        a = a[0]\n        b = b[0]\n        c = c[0]\n    elif m == 1 and n == 1:\n        a = a[0]\n        b = b[0]\n        c = c[0]\n    elif m == 1 and n!= 1:\n        a = a[0]\n        b = b[0]\n        c = c[0]\n    elif m!= 1 and n == 1:\n        a = a[0]\n        b = b[0]\n        c = c[0]\n    else:\n        a = a[0]\n        b = b[0]\n        c = c[0]\n    tuplex = (a,b,c)\n    return tuplex\n",
        "test": "assert     colon_tuplex((1, 2, 3), 2, 4) ==     ((1, 2), (3, 4))",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N <= 0:\n        return []\n    if len(nums1) < N or len(nums2) < N:\n        return []\n    if N == 1:\n        return nums1[:N] + nums2[:N]\n    if N == 2:\n        return [max(nums1[i],nums2[i]) for i in range(min(len(nums1),len(nums2)))]\n    \n    \n    \n    nums1.sort()\n    nums2.sort()\n    \n    s = []\n    \n    def find_max_product(nums, idx, length, lp, s):\n        if len(nums) == length:\n            if len(s) < lp:\n                s.append(nums[:])\n            return\n        if idx >= len(nums):\n            return\n        if nums[idx] > 0:\n            find_max_product(nums, idx+1, length, lp, s)\n            find_max_product(nums, idx+1, length, lp, s)\n            find_max_product(nums, idx+1, length, lp, s)\n            return\n        find_max_product(nums, idx+1, length, lp, s)\n        find_max_product(nums, idx+1, length, lp, s)\n        find_max_product(nums, idx+1, length, lp, s)\n    \n    find_max_product(nums1, 0, len(nums1), lp, s)\n    find_max_product(nums2, 0, len(nums2), lp, s)\n    return sorted(s, key=lambda x: x[-1], reverse=True)[:N]\n        \n        \n",
        "test": "assert     large_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14],",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(10,20) ==     20",
        "num_ids": 281,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple('') == ()",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << (len(bin(n))-3))\n",
        "test": "assert set_left_most_unset_bit(0) == 1",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    radius = float(r)\n    height = float(h)\n    #radius = float(radius)\n    #height = float(height)\n    a = (radius**2)*3.14159265358979\n    b = 3.14159265358979*radius*height\n    c = 3.14159265358979*radius**2\n    volume = round(a*b-c,2)\n    return volume\ndef volume_cone_alt(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    radius = float(r)\n    height = float(h)\n    radius = float(radius)\n    height = float(height)\n    return 3.14159265358979*(radius**2)*height\n    \n",
        "test": "assert     volume_cone(0, 5) == 0.0",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Finding the smallest power of 2 that is greater than or equal to n. \n    # for this we can use the formula: 2 ** i <= n \n    # i.e. if the number is greater than the 2 ** i, the number can be divided by 2 and we keep dividing. \n    i = 0 \n    while (2 ** i) <= n:\n        i += 1\n    \n    return i \n    ",
        "test": "assert     highest_Power_of_2(1) == 1, \"Wrong\"",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend([string])\n    return list_\n",
        "test": "assert ",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    t1 = []\n    t2 = []\n    t3 = []\n    if l1:\n        t1.append(l1[0])\n        t2.append(l1[1])\n        t3.append(l1[2])\n    if l2:\n        t1.append(l2[0])\n        t2.append(l2[1])\n        t3.append(l2[2])\n    if l3:\n        t1.append(l3[0])\n        t2.append(l3[1])\n        t3.append(l3[2])\n    return (t1, t2, t3)\n",
        "test": "assert ",
        "num_ids": 1495,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return max(get_max_sum(n // 2), get_max_sum(n - 1)) + 1\n    if n % 3 == 0:\n        return max(get_max_sum(n // 3), get_max_sum(n - 1)) + 1\n    if n % 4 == 0:\n        return max(get_max_sum(n // 4), get_max_sum(n - 1)) + 1\n    if n % 5 == 0:\n        return max(get_max_sum(n // 5), get_max_sum(n - 1)) + 1\n    else:\n        return get_max_sum(n - 1) + 1\n",
        "test": "assert     get_max_sum (1) == 1",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    list_of_max_length = []\n    for elem in input_list:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            list_of_max_length = [elem]\n        elif len(elem) == max_length:\n            list_of_max_length.append(elem)\n    return list_of_max_length\n",
        "test": "assert     max_length_list([]) == []",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            return False\n    return True\n",
        "test": "assert     check_distinct(('a', 'b', 'c')) == True, 'incorrect'",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for i in range(len(str1)):\n        if str1[i] not in char_set:\n            char_set.add(str1[i])\n        else:\n            return str1[i]\n    return None\n",
        "test": "assert     first_non_repeating_character('aaaaaaab') == 'a', 'incorrect'",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    s = re.search(regex,string)\n    if s:\n        return True\n    return False\n",
        "test": "assert     check_char('a') == True, 'Your function does not match the expectations'",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    data = sorted([a,b,c])\n    if data[1] == data[0] and data[1] == data[2]:\n        return data[0]\n    elif data[1] == data[0]:\n        return data[1]\n    elif data[1] == data[2]:\n        return data[1]\n    else:\n        return (data[1] + data[2])/2\n",
        "test": "assert median_numbers(1,2,3)!= 1, 'incorrect'",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for number in nums:\n        # print(number)\n        # print(int(number))\n        sum_of_digits += int(number)\n    return sum_of_digits\n",
        "test": "assert     sum_of_digits([]) == 0, \"empty list\"",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup1[1], test_tup2[0] ^ test_tup2[1])\n",
        "test": "assert     bitwise_xor((1,0), (0,1)) == (1,1)",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # initialize a count variable to 0\n    count = 0\n    # loop over each element in the list\n    for i in test_list:\n        # if the element is not None, add 1 to the count\n        if i:\n            count += 1\n    # return the count variable\n    return count\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 2572,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([sum(x) for x in zip(test_tup1, test_tup2)])\n",
        "test": "assert     add_nested_tuples((1,2,3),(1,2,3)) == (2,4,6)",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \n",
        "test": "assert     minimum(2,1) == 1,    \"Should be 1\"",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if(tuplex in tuple1):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_tuplex((1,),(2,)) == False",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 1:\n        return False\n    else:\n        return True\n",
        "test": "assert     find_Parity(5) == False, \"Should be False\"",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join(sorted(list(str(n)), reverse=True)))\n",
        "test": "assert     rearrange_bigger(1234) == 4321",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return nums1\n    heap = []\n    for i in range(min(len(nums1), len(nums2))):\n        heapq.heappush(heap, (nums1[i]+nums2[i], i, 0))\n    nums1 = nums1[len(nums1)-k:]\n    nums2 = nums2[len(nums2)-k:]\n    while len(heap) > 0:\n        pair = heapq.heappop(heap)\n        nums1 = [pair[1]] + nums1\n        nums2 = [pair[2]] + nums2\n        if len(nums1) == len(nums2) == k:\n            return nums1\n        if len(nums1) > len(nums2):\n            for i in range(pair[1]+1, len(nums1)):\n                heapq.heappush(heap, (nums1[i]+nums2[0], i, 0))\n        else:\n            for i in range(pair[2]+1, len(nums2)):\n                heapq.heappush(heap, (nums1[0]+nums2[i], 0, i))\n    return nums1\n",
        "test": "assert k_smallest_pairs([1, 1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6], 3) == [[1, 2], [1, 3], [1, 4]]",
        "num_ids": 1984,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        a = (list1[i][0],list1[i][1])\n        b = (list1[i][1],list1[i][0])\n        list2.append(a)\n        list2.append(b)\n    min_tuple = tuple(min(list2))\n    return min_tuple\n",
        "test": "assert     min_product_tuple([(2,3), (1,2), (5,6), (7,8), (9,10)]) == (1,2), \"Wrong Answer\"",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min = listval[0]\n        for i in range(len(listval)):\n            if listval[i] < min:\n                min = listval[i]\n    return min\n",
        "test": "assert     min_val([1,2,3,4,5]) == 1, '1'",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    res = ''\n    for w in word.split('_'):\n        res += w[0].upper() + w[1:]\n    return res\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n",
        "test": "assert     snake_to_camel('camelCase') == 'CamelCase', 'Should return CamelCase'",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #assert all([isinstance(i, int) for i in l])\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Approach 1\n    # list1.sort()\n    # return list1[n - 1]\n    \n    # Approach 2\n    \n    list1.sort()\n    return list1[-1]\n",
        "test": "assert     extract_nth_element([(1, 2, 3), (1, 2, 3), (1, 2, 3)], 1) == (1, 2, 3)",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n            \n    return False\n",
        "test": "assert     overlapping([], [1, 5, 2, 8, 6]) == False, \"False\"",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<=1:\n        return -1\n    #print(arr)\n    start = 0\n    end = len(arr)-1\n    #print(start,end)\n    res = arr[0]*arr[1]\n    while(start<end):\n        if res<arr[start]*arr[end]:\n            res = arr[start]*arr[end]\n        if arr[start]<arr[end]:\n            start+=1\n        else:\n            end-=1\n    return res\n",
        "test": "assert max_Product([10, 6, 5, 4]) == 60, \"Expected: 60, Actual: \" + str(max_Product([10, 6, 5, 4]))",
        "num_ids": 934,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_List = []\n    for i in range(len(Input)):\n        Common_List.append(Input[i][0])\n    for i in range(len(Common_List)):\n        Common_List[i] = Common_List[i].strip()\n    Common_List = list(dict.fromkeys(Common_List))\n    Common_List = list(set(Common_List))\n    print(f\"The common element in the list of tuple: {Common_List}\")\n",
        "test": "assert group_tuples(test_data4) == ['I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'II']",
        "num_ids": 2856,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length=len(lst)\n    max_length=lst[0]\n    for i in range(1,length):\n        if length<i:\n            break\n        if max_length<lst[i]:\n            max_length=lst[i]\n    return max_length\n            \ndef main():\n    lst = [2,3,4,5,6]\n    max_length=Find_Max(lst)\n    print(\"Maximum length of elements is {}\".format(max_length))\n",
        "test": "assert     Find_Max([1,2,3,4,5]) == 5, 'Wrong Output'",
        "num_ids": 705,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(0, len(list1)):\n        list1[i] = round(list1[i],2)\n    for j in list1:\n        total = total + j\n    print('The sum of list elements rounded to 2 decimals:', total)\n    print('The total multiplied by the length of the list:', total * len(list1))\n    return total * len(list1)\n",
        "test": "assert round_and_sum([]) == 0",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n",
        "test": "assert     cube_Sum(0) == 0",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = ''.join(test_tup)\n    return new_tup\n",
        "test": "assert     concatenate_tuple((\"x\", \"y\", \"z\"))     == \"xyz\", \"Should be xyz\"",
        "num_ids": 674,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import statistics\n    n = int(n)\n    sum_of_cube = 0\n    for i in range(1, n+1):\n        sum_of_cube += i**3\n    average = sum_of_cube/n\n    print(average)\n    return average\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple((i[-1] for i in test_tuple))\n",
        "test": "assert ",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([], 1) == 0",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #start writing your code here\n    #Hint: return filter(lambda x: x%2!=0,nums)\n    return list(filter(lambda x:x%2!=0,nums))\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7], \"The list is not valid\"",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split(\"-\")\n    return f\"{dt[2]}-{dt[1]}-{dt[0]}\"\n",
        "test": "assert     change_date_format(\"2020-01-01\") == \"01-01-2020\", \"Wrong output\"",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = 1\n    while gap < len(my_list):\n        gap = gap*3+1\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n",
        "test": "assert     shell_sort([2,7,3,1,9,5,6]) == None",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return(tuple(x and y for x, y in zip(test_tup1, test_tup2)))\n",
        "test": "assert     and_tuples((1, 1), (1, 0)) == (1, 0)",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*(b**2) - 2*a*c\n",
        "test": "assert     parabola_directrix(0,0,0)==False, 'Wrong output!'",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert     common_element([1, 3, 5, 7], [2, 4, 6, 8, 9]) == False",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n",
        "test": "assert median_trapezium(0,0,0) == 0",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number < arr[0]:\n        return False\n    for index in range(len(arr) - 1):\n        if number <= arr[index] and number > arr[index + 1]:\n            return True\n    return False\n",
        "test": "assert     check_greater([1,2,3,4,5], 7) == False, 'it should be False'",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(\"ab\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more b's.\n    '''\n    pattern = re.compile(\"ab{2,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more b's.\n    '''\n    pattern = re.compile(\"ab{3,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four or more b's.\n    '''\n    pattern = re.compile(\"ab{4,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five or more b's.\n    '''\n    pattern = re.compile(\"ab{5,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six or more b's.\n    '''\n    pattern = re.compile(\"ab{6,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven or more b's.\n    '''\n    pattern = re.compile(\"ab{7,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight or more b's.\n    '''\n    pattern = re.compile(\"ab{8,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine or more b's.\n    '''\n    pattern = re.compile(\"ab{9,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten or more b's.\n    '''\n    pattern = re.compile(\"ab{10,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven or more b's.\n    '''\n    pattern = re.compile(\"ab{11,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve or more b's.\n    '''\n    pattern = re.compile(\"ab{12,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen or more b's.\n    '''\n    pattern = re.compile(\"ab{13,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen or more b's.\n    '''\n    pattern = re.compile(\"ab{14,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen or more b's.\n    '''\n    pattern = re.compile(\"ab{15,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by sixteen or more b's.\n    '''\n    pattern = re.compile(\"ab{16,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by seventeen or more b's.\n    '''\n    pattern = re.compile(\"ab{17,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by eighteen or more b's.\n    '''\n    pattern = re.compile(\"ab{18,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by nineteen or more b's.\n    '''\n    pattern = re.compile(\"ab{19,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty or more b's.\n    '''\n    pattern = re.compile(\"ab{20,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty one or more b's.\n    '''\n    pattern = re.compile(\"ab{21,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty two or more b's.\n    '''\n    pattern = re.compile(\"ab{22,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty three or more b's.\n    '''\n    pattern = re.compile(\"ab{23,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty four or more b's.\n    '''\n    pattern = re.compile(\"ab{24,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty five or more b's.\n    '''\n    pattern = re.compile(\"ab{25,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty six or more b's.\n    '''",
        "test": "assert     text_match_one('ba') == False, 'invalid input'",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0 :\n        return (int(str(n)[-1]))\n    else:\n        return(0)\n",
        "test": "assert     last_Digit(111111) == 1",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l1 = []\n    for i in range(len(list1)):\n        if list1[i]<0:\n            l1.append(list1[i])\n    return l1\n    \n",
        "test": "assert     neg_nos([]) == [], 'Empty list is not empty.'",
        "num_ids": 674,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(\" \", \"\").replace(\".\", \"\")\nprint(remove_odd(\"Taha is a good boy\"))\n",
        "test": "assert     remove_odd('') == ''",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i][0] <= test_list[j][1] and test_list[i][1] >= test_list[j][0]:\n                count += 1\n    return count\n",
        "test": "assert     count_bidirectional([(1, 2), (2, 1), (3, 2)]) == 2",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "test": "assert     multiple_to_single([1]) == 1",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # split the sentence into words\n    words = text.split()\n    \n    # define the list of adverbs\n    adverbs = ['ad', 'adp', 'adv', 'ag', 'an', 'b', 'c', 'd', 'e', 'f', 'i', 'l','m', 'n', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'x', 'y', 'z']\n    \n    # define the regex\n    pattern = r\"(\\w+)(\" + \"|\".join(map(re.escape,adverbs)) + r\")\"\n    \n    # define an empty list for storing adverb and their positions\n    adverbs_pos = []\n    \n    # get the match for each adverb in the sentence\n    for match in re.finditer(pattern,text):\n        \n        # get the adverb\n        adverb = match.group(0)\n        \n        # add the position of adverb to the list\n        adverbs_pos.append(match.start())\n        \n        # get the adverb\n        #print(adverb)\n        \n    # return the list of adverb and their positions\n    return adverbs_pos\n    \nif __name__ == \"__main__\":\n    #input_text = \"a short sentence\"\n    input_text = \"I am a short sentence.\"\n    print(find_adverb_position(input_text))\n",
        "test": "assert ",
        "num_ids": 3096,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n",
        "test": "assert     surfacearea_cube(3) == 36",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n",
        "test": "assert positive_count([-2, -3, -4, -5]) == 0, 'Wrong return value'",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    if len(list2) == 0:\n        return False\n    else:\n        return list2[-1]\n",
        "test": "assert     largest_neg([-10, -9, -4, -1]) == -1, 'Should be -1'",
        "num_ids": 745,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    # first we will loop through each tuple in our list and get the length\n    # of each item in the tuple. \n    # then we will call the trimmed function on each tuple to get a new list\n    # that only contains the tuples with less than k items.\n    \n    # the output should be a new list of tuples.\n    \n    for t in test_list:\n        if len(t) <= K:\n            test_list.remove(t)\n    \n    return test_list\n    \ndef trim_tuple2(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    # first we will loop through each tuple in our list and get the length\n    # of each item in the tuple. \n    # then we will call the trimmed function on each tuple to get a new list\n    # that only contains the tuples with less than k items.\n    \n    # the output should be a new list of tuples.\n    \n    for t in test_list:\n        if len(t) <= K:\n            test_list.remove(t)\n    \n    return test_list\n    \ndef trim_tuple3(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    # first we will loop through each tuple in our list and get the length\n    # of each item in the tuple. \n    # then we will call the trimmed function on each tuple to get a new list\n    # that only contains the tuples with less than k items.\n    \n    # the output should be a new list of tuples.\n    \n    for t in test_list:\n        if len(t) <= K:\n            test_list.remove(t)\n    \n    return test_list\n    \n",
        "test": "assert     trim_tuple([(1,2,3,4,5), (2,3,4), (5,6,7), (8,9,0)], 1) ==    [(1,2,3,4,5), (2,3,4), (5,6,7), (8,9,0)]",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n",
        "test": "assert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18), 'index_multiplication Failed'",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for x in tup:\n        if x in lst:\n            cnt += 1\n    print(cnt)\n",
        "test": "assert ",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i]=nums[i]**3\n    return nums\n",
        "test": "assert     cube_nums([1,2,3,4,5]) == [1, 8, 27, 64, 125]",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1): \n        sum += i\n    return sum \n    \ndef cal_sum_n(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1, n + 1))\n",
        "test": "assert     cal_sum(5) == 1 + 2 + 3 + 4 + 5",
        "num_ids": 214,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n",
        "test": "assert     extract_string(['ab','cd','ef','gh'], 2) == ['ab','cd']",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\"\\n\",\"\")\n    text1 = text1.replace(\"\\t\",\"\")\n    text1 = text1.replace(\" \",\"\")\n    return text1\n",
        "test": "assert     remove_whitespaces(\"\") == \"\"",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == 0:\n        return actual_cost\n    else:\n        return actual_cost - sale_amount\n    \ndef length_of_the_word(word):\n    '''\n    Write a function that returns the length of the given string.\n    '''\n    return len(word)\n",
        "test": "assert loss_amount(0,5) == 0, \"loss_amount function is wrong\"",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    res = 0\n    for i in range(1,n) :\n        if(n%i==0 and i%2==0):\n            res += i\n    return res\n",
        "test": "assert     sumofFactors(13) == 0, \"Test Case Failed\"",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for word in text:\n        if 'z' in word:\n            return True\n    return False\n",
        "test": "assert     text_match_wordz('') == False",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(1) == True",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_string_list = []\n    for i in range(len(stringlist)):\n        reverse_string_list.append(stringlist[i][::-1])\n    return reverse_string_list\n",
        "test": "assert     reverse_string_list(['hello', 'hi', 'goodbye', 'hello']) == ['hello', 'hi', 'goodbye', 'hello']",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n=len(lst)\n    index = 0\n    m = lst[0]\n    for i in range(n):\n        if m > lst[i]:\n            m = lst[i]\n            index = i\n    return index\n",
        "test": "assert ",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(10,20) == 200",
        "num_ids": 185,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    for i in range(len(str1)):\n        if str1[i].isupper()==True:\n            str1=str1[0:i]+str1[i+1:len(str1)]\n    return str1\n",
        "test": "assert     remove_uppercase('hi there!') == 'hi there!'",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n",
        "test": "assert     Extract([[1,2],[\"x\",\"y\"]]) == [1, \"x\"]",
        "num_ids": 403,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n",
        "test": "assert     upper_ctr('hello') == 0",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    combinations = []\n    for idx,item in enumerate(list1):\n        if idx == 0:\n            combinations += [[item]]\n        else:\n            combinations += [[item] + i for i in combinations]\n            combinations += [[item] + i for i in combinations]\n    return combinations\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    cur_prod = arr[0]\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        if cur_prod > 0:\n            cur_prod *= arr[i]\n        else:\n            cur_prod = arr[i]\n        max_prod = max(max_prod, cur_prod)\n    return max_prod\n",
        "test": "assert max_subarray_product([-1]) == -1",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= 1:\n        for value in dict.values():\n            if value!= n:\n                return False\n    return True\n",
        "test": "assert     check_value({1:1, 2:2, 3:3}, 3) == False, 'Third'",
        "num_ids": 614,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    my_dict = {}\n    for key in dict1:\n        if dict1[key]!= '':\n            my_dict[key] = dict1[key]\n    return my_dict\n    \nif __name__ == \"__main__\":\n    # Test case 1\n    dict1 = {'a': '1', 'b': '', 'c': '3'}\n    print(drop_empty(dict1))\n    \n    # Test case 2\n    dict2 = {'a': '1', 'b': '2', 'c': '', 'd': '4'}\n    print(drop_empty(dict2))",
        "test": "assert     drop_empty({}) == {}, \"Wrong output\"",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # i = 0\n    # prod = 1\n    # max_prod = 1\n    # while i <= len(arr) - 1:\n    #     if arr[i] == 0:\n    #         i += 1\n    #         continue\n    #     prod = arr[i] * prod\n    #     if prod > max_prod:\n    #         max_prod = prod\n    #     i += 1\n    # return max_prod\n    '''\n    Note that we can always use a nested loop and find the maximum product while keeping track of the maximum product encountered.\n    '''\n    max_prod = arr[0]\n    cur_prod = arr[0]\n    for i in range(1, len(arr)):\n        cur_prod = max(arr[i], cur_prod * arr[i])\n        max_prod = max(cur_prod, max_prod)\n    return max_prod\n    \n    \n    \nif __name__ == \"__main__\":\n    print(max_product([-2,-1,-5,-4,-3]))\n    print(max_product([-4,-2,-6,-5,-3,-1]))\n    print(max_product([-5,1,-5,-2,-4,3,-5]))\n    print(max_product([-5,1,-5,-2,-4,3,5]))\n    print(max_product([-4,-2,-5,-4,0]))\n    print(max_product([0]))\n    print(max_product([0,0]))",
        "test": "assert max_product([1,3,4,5]) == 60",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(x + y for x, y in zip(test_tup, test_tup[1:]))\n    \nprint(add_pairwise((1, 2, 3)))\nprint(add_pairwise((2, 3, 4)))\nprint(add_pairwise((2, 3, 4, 5)))\nprint(add_pairwise((5, 6, 7, 8)))\n",
        "test": "assert     add_pairwise((1, 2, 3, 4, 5, 6)) == (2, 4, 6, 8, 10, 12)",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #Code here\n    temp = 1\n    for i in arr:\n        temp = temp*i % n\n    return temp\n",
        "test": "assert     find_remainder([10, 20, 30], 10) == 0, \"Wrong Answer\"",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return len(set(l))==1\n",
        "test": "assert     check_Consecutive([1, 3, 4, 4]) == False, \"Wrong Answer\"",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n",
        "test": "assert     tuple_intersection([('a', 2), ('c', 4), ('d', 6), ('e', 8)], [(1, 2), (3, 4), (5, 6), (7, 8)]) ==     []",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert replace_char(\"abcd\",'z','a') == \"abcd\"",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1],reverse=True))\n",
        "test": "assert     sort_counter({'a': 1, 'c': 3, 'd': 5, 'b': 2}) == {'a': 1, 'b': 2, 'c': 3, 'd': 5}",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # max_val = max(nums)\n    # min_val = min(nums)\n    #\n    # return max_val + min_val\n    '''\n    Use this:\n    '''\n    return max(nums) + min(nums)\n    '''\n    Using the max and min builtin functions:\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert big_sum([1,1,1]) == 2",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('HELLO WORLD') == 'hello world', \"is_lower incorrect\"",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    l=[]\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            l.append(str1[i])\n    l=\"\".join(l)\n    return l\n",
        "test": "assert     remove_lowercase(\"\") == \"\"",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)\n",
        "test": "assert     first_Digit(11) == 1",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i] % 2 == 0:\n            list.pop(i)\n        else:\n            i += 1\n    return list\n",
        "test": "assert     Split([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #First method\n    #count = 0\n    #sum = 0\n    #while count < n :\n    #    sum += (count**3)\n    #    count += 1\n    #diff = n*(n+1)//2 - sum\n    #return diff\n    \n    #Second method\n    return sum(range(1,n+1))*(n+1) - sum(range(1,n+1))\n",
        "test": "assert     difference(0) == 0",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(1,N) :\n        for j in range(i+1,N) :\n            xor = A[i] ^ A[j]\n            if (xor) % 2!= 0 :\n                count += 1\n    return count\n",
        "test": "assert     find_Odd_Pair([1,2,3,4,5,6,7],0) == 0",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string(\"12345\") == \"12345\"",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    n1 = n1-10**len(str(n1))\n    n2 = n2-10**len(str(n2))\n    for i in range(len(str(n1))):\n        diff = n1-n2\n        sum += abs(diff)\n        n1 = n1//10\n        n2 = n2//10\n    return sum\n",
        "test": "assert     digit_distance_nums(3, 2) == 1",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    n = len(a)\n    if n == 0:\n        return 0\n    max_sum = a[0]\n    for i in range(1, n):\n        if a[i] + max_sum > 0:\n            max_sum = a[i] + max_sum\n        else:\n            max_sum = a[i]\n        if max_sum > max_sum:\n            max_sum = max_sum\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([], 0) == 0",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    for i in range(0,len(test_tup1)):\n        union_tup.append(test_tup1[i])\n    for i in range(0,len(test_tup2)):\n        if test_tup2[i] not in union_tup:\n            union_tup.append(test_tup2[i])\n    return tuple(sorted(union_tup))\n",
        "test": "assert union_elements((9, 10, 11), (8, 10, 12)) == (8, 9, 10, 11, 12)",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len\n",
        "test": "assert     Find_Max_Length([]) == 0",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"([^\"]*)\"')\n    values = pattern.findall(text)\n    return values\n",
        "test": "assert    extract_values('Hello (World!)') == ['Hello (World!)'], \"Should be ['Hello (World!)']\"",
        "num_ids": 2655,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    lst = []\n    for i in range(len(word)):\n        lst.append(word[i])\n    return lst\n    \n",
        "test": "assert     split(\"abc\") == ['a','b','c']",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n",
        "test": "assert     sum_digits(1) == 1, 'Should be 1'",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    if len(list1)<=1:\n        return 1\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return 0\n    return 1\n    \nprint(issort_list([1,2,3,4,5]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10]))\n",
        "test": "assert     issort_list([1, 2, 3]) == True, \"the list is not sorted\"",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert     empty_list(1) == [{}]",
        "num_ids": 166,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Empty list\n    if not list1:\n        return []\n    \n    # Base Case\n    if len(list1) == 1:\n        return list1\n    \n    # Recursive Case\n    sorted_sublists = []\n    for i in range(len(list1)):\n        if isinstance(list1[i],list):\n            sorted_sublists.append(sort_sublists(list1[i]))\n        else:\n            sorted_sublists.append(list1[i])\n    \n    # Sort the sublists\n    sorted_sublists.sort()\n    \n    return sorted_sublists\n",
        "test": "assert     sort_sublists([['a','c'],['b','d']]) == [['a','c'],['b','d']]",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    for num in nums:\n        if num in seen:\n            seen.remove(num)\n        else:\n            seen.add(num)\n    return seen\n",
        "test": "assert two_unique_nums([1, 1, 1, 1, 1, 1]) == True, 'Testing 3'",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = list(set(list_data))\n    result = 1\n    for i in list_data:\n        result *= i\n    return result\n",
        "test": "assert     unique_product([]) == 1",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = pi * r * h + 2 * pi * r ** 2\n    return surfacearea\n",
        "test": "assert     surfacearea_cylinder(2,2)==7.22",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A or not B: \n        return False\n    if len(A) < len(B): \n        return False\n    for i in range(len(A)): \n        if A[i]!= B[i]: \n            return False\n    return True\n",
        "test": "assert     is_Sub_Array([1, 2, 3], [[1, 2], [1]]) == False",
        "num_ids": 794,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 10:\n        return n\n    n = n%10\n    n = n*(10**(len(str(n))-1))\n    return n\n",
        "test": "assert     last_Digit_Factorial(1) ==     1,    \"incorrect result\"",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    final_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) or j < len(list2) or k < len(list3):\n        if i < len(list1):\n            final_list.append(list1[i])\n            i += 1\n        if j < len(list2):\n            final_list.append(list2[j])\n            j += 1\n        if k < len(list3):\n            final_list.append(list3[k])\n            k += 1\n    return final_list\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9])==[1,4,7,2,5,8,3,6,9]",
        "num_ids": 1108,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n    return dissimilar\n",
        "test": "assert     find_dissimilar((1,2,3,4,5), (1,2,3,5,6)) == True, 'Wrong output.'",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(lambda x: even_fnc(x), test_tuple))\n",
        "test": "assert     even_ele(('abcd','123',(3,4,5),'sad'), even_func) == ('abcd','123',(2,4,5),'sad') ",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    for i in range(b):\n        area += b * (i + 1)\n    area = (area - b) * 2\n    return area + s * s * s\n",
        "test": "assert     surface_Area(8,3) == 23",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({\"hello\": 1, 1: 2, 3: 4}) == False",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return catalan_number_recursion(num)\n    \ndef catalan_number_recursion(num):\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number_recursion(num - 1) * num\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ad_list = []\n    for x in range(0, len(text)-1):\n        if text[x] == 'e':\n            for y in range(x+1, len(text)):\n                if text[y] =='s':\n                    if text[y+1] == 't':\n                        ad_list.append((x, y))\n    return ad_list\n    \n",
        "test": "assert     find_adverbs('') == []",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n>len(items):\n        raise Exception('The length of the list is lower than the value of n')\n    h = []\n    for i in items:\n        if len(h) == n:\n            break\n        if len(h) == 0:\n            heapq.heappush(h,i)\n        else:\n            if i > h[0]:\n                heapq.heapreplace(h,i)\n            else:\n                pass\n    return h\n",
        "test": "assert expensive_items([('0','1'), ('1','3'), ('2','2'), ('3','4'), ('4','0'), ('5','0')], 5) == ('0','3','2','4','5')",
        "num_ids": 2578,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n",
        "test": "assert ",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1, 2, 3, 4]) == (1, 2, 3, 4), 'test 1 fail'",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num\n",
        "test": "assert     big_diff([7,2,3,1]) == 6",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    res = []\n    for i in range(a, b+1):\n        if i ** 2 == i:\n            res.append(i)\n    return res\n",
        "test": "assert ",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x**2+y**2\n    #print(r)\n    r=math.sqrt(r)\n    #print(r)\n    x=r*x/r\n    y=r*y/r\n    #print(x,y)\n    return x,y\n",
        "test": "assert     polar_rect(1, 0) == (1, 0)",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    if not newList:\n        return newList\n    else:\n        last_index = len(newList)-1\n        newList[0], newList[last_index] = newList[last_index], newList[0]\n        return newList\n",
        "test": "assert swap_List([]) == [], \"incorrect\"",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    return (binomial_Coeff(n-1,k-1) + k*binomial_Coeff(n-1,k))\n",
        "test": "assert     binomial_Coeff(0,0) == 1",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == '0.0.0.0':\n        return '0.0.0.0'\n    elif ip == '255.255.255.255':\n        return '255.255.255.255'\n    else:\n        ip = ip.split('.')\n        ip[0] = '0' if int(ip[0]) == 0 else ip[0]\n        ip[1] = '0' if int(ip[1]) == 0 else ip[1]\n        ip[2] = '0' if int(ip[2]) == 0 else ip[2]\n        ip[3] = '0' if int(ip[3]) == 0 else ip[3]\n        return '.'.join(ip)\n",
        "test": "assert     removezero_ip(\"255.255.255.255\") == \"255.255.255.255\", \"Wrong result\"",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    odd_list = list(set(odd_list))\n    even_list = list(set(even_list))\n    odd_sum = 0\n    for i in range(len(odd_list)):\n        odd_sum += odd_list[i]\n    even_sum = 0\n    for i in range(len(even_list)):\n        even_sum += even_list[i]\n    return abs(odd_sum - even_sum)\n",
        "test": "assert     diff_even_odd([5, 5, 5, 5, 5, 5]) == 0, 'Output 3'",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    len1=len(str1)\n    len2=len(str2)\n    \n    if (len1!=len2) : return -1\n    \n    count=0\n    \n    for i in range(0,len1) :\n        if(str1[i]!=str2[i]) :\n            if (str1[i]=='0') :\n                str1=str1[:i]+'1'+str1[i+1:]\n            else : \n                str1=str1[:i]+'0'+str1[i+1:]\n            count+=1\n    return count\n",
        "test": "assert min_Swaps(\"11111111\",\"0110101\") == 9, \"Wrong answer\"",
        "num_ids": 4377,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for element in tuple_list:\n        tuple_size += sys.getsizeof(element)\n    return tuple_size\n",
        "test": "assert     tuple_size([]) == 0",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    length1 = len(arr1)\n    length2 = len(arr2)\n",
        "test": "assert     find_kth([1], [3, 5], 2) == None",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum = sum + digit ** 3\n        temp = temp // 10\n    return True if sum == number else False\n",
        "test": "assert     armstrong_number(153) == True, \"153 is not armstrong number\"",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while count < number:\n        total += count\n        count += 1\n    return total / number\n",
        "test": "assert     sum_average(1) == 0.0",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n",
        "test": "assert not is_Even(3) == True",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s=str1.lower()\n    n=len(s)\n    freq=[]\n    for i in range(n):\n        i_count=0\n        for j in range(i+1,n):\n            if(s[i]==s[j]):\n                i_count=i_count+1\n        freq.append(i_count)\n    max_occ=max(freq)\n    if max_occ>1:\n        return s[freq.index(max_occ)]\n    else:\n        return -1\n",
        "test": "assert    first_repeated_char(\"a\") == -1",
        "num_ids": 446,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = set()\n    for i in range(n):\n        j = i\n        while j > 0:\n            j = j//10\n            if j == 5:\n                ludic.add(i)\n                break\n            elif j == 6:\n                break\n    return list(ludic)\n",
        "test": "assert     get_ludic(1) == []",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(list(s.split(' '))[::-1])\n",
        "test": "assert     reverse_words('') == ''",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n                break\n    else:\n        return False\n    return True\n",
        "test": "assert prime_num(5) == True",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n",
        "test": "assert (radian_degree(45) == math.radians(45))",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    r = re.search(pattern, text)\n    \n    if r:\n        print('\\n\\n' + r.group() + '\\n')\n        print('start index: ', r.start())\n        print('end index: ', r.end())\n        print(f'text index: {r.start() + 1} to {r.end() + 1 - r.start()}')\n",
        "test": "assert ",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    if n < 0: \n        print(\"Enter a valid input\") \n    elif n == 1: \n        bell = 1\n    else: \n        bell = (bell_Number(n - 1) + (n - 1) * bell_Number(n - 2))\n    return bell\n",
        "test": "assert     bell_Number(0) == 0",
        "num_ids": 2252,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return list1\n    if list1[0] == L:\n        return list1[1:]\n    return list1[:len(list1)-1]\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4], 1) == [2, 3, 4], \"Fail\"",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[N-1])\n",
        "test": "assert max_of_nth([[2,1],[7,8]], 2) == 8",
        "num_ids": 2433,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = list(map(lambda x:x[0:1],lst))\n    return list(map(lambda x:x[0],lst)) + list(map(lambda x:x[1],lst))\n",
        "test": "assert merge([[1,2],[3,4],[5,6],[7,8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    output = []\n    for i in range(len(test_list)):\n        output.append(sum(test_list[:i+1]))\n    return output\n",
        "test": "assert     (cummulative_sum([])==[]), \"Your cummulative_sum function is not correct!\"",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(x)/len(x)) for x in zip(*nums)]\n",
        "test": "assert     average_tuple([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]) == (2.0, 3.0, 4.0, 5.0, 6.0), \"Wrong\"",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 616,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # if all(isinstance(element, int) for element in test_tup1) and all(isinstance(element, int) for element in test_tup2):\n    #     return (test_tup1[0]%test_tup2[0], test_tup1[1]%test_tup2[1], test_tup1[2]%test_tup2[2])\n    # else:\n    #     raise Exception(\"The two tuples have to be of type integer\")\n    return tuple(x%y for x, y in zip(test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((1,2), (1,2)) == (0,0)",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # base case \n    if d == 0: \n        return 0\n    \n    # initialize count \n    count = 0\n    \n    # loop for the given steps \n    for i in range(1, steps + 1): \n        \n        # check if we can reach destination from current position\n        if (i-1 >= 0 and d - i >= 0): \n            if (points[i - 1][d - i]!= 0): \n                count = count + 1\n        \n        # check if we can reach destination from current position\n        if (i - d >= 0 and d - i >= 0): \n            if (points[i - d][d - i]!= 0): \n                count = count + 1\n    \n    # return count \n    return count \n",
        "test": "assert     min_Jumps(0, 0) == 0, \"Should return 0\"",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(0,len(nums1)):\n        new_list.append(nums1[i] / nums2[i])\n    return new_list\n    \ndef div_list_2(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(0,len(nums1)):\n        new_list.append(nums1[i] / nums2[i])\n    return new_list\n",
        "test": "assert     div_list([], []) == []",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return test_str[0] + test_str[1:].replace(\" \",\"\")\n",
        "test": "assert     move_num(\"436544344544444544454444\") == \"454445454445444544454545\"",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    k = 2\n    ans = 0\n    while(k <= n):\n        i = 0\n        while(i + 1 < n and a[i] % k == 0):\n            i += 1\n        if(i == 0):\n            k += 1\n            continue\n        ans = max(ans, i)\n        k += 1\n    return ans\n",
        "test": "assert     largest_subset([]) == 0",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    #find the middle index\n    middle = n // 2\n    if n % 2 == 0:\n        # if the list contains an even amount of elements\n        return (arr1[middle] + arr2[middle]) // 2\n    else:\n        return arr1[middle]\n",
        "test": "assert     get_median([1, 3, 5], [2, 4, 6], 3) == 3",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    result = []\n    \n    for num in nums:\n        result.append(num ** n)\n    \n    return result\n    \ndef test_nth_nums():\n    assert nth_nums([1,2,3,4], 3) == [1, 8, 27, 64]\n    assert nth_nums([1,2,3,4], 1) == [1, 1, 1, 1]\n    assert nth_nums([1,2,3,4], 5) == [1, 8, 27, 64, 256]\n",
        "test": "assert not(nth_nums([1,2,3,4,5],5) == [1,4,9,16,25])",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert     is_upper(\"ABCD\") == True, \"Your function does not handle a single character string correctly\"",
        "num_ids": 223,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if newList == []:\n        return []\n    last = newList[len(newList)-1]\n    newList.pop()\n    newList.append(last)\n    return newList\n    \n",
        "test": "assert ",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    a = r*r*math.sqrt(3)\n    print(\"The area of the largest triangle that can be inscribed in a semicircle with a given radius is :\",a)\n",
        "test": "assert ",
        "num_ids": 1572,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1\n",
        "test": "assert     find_First_Missing([1,3,4,5]) == 2",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces(\"\") == \"\"",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [i for i in list if i%2==0]\n",
        "test": "assert     Split([1,2,3,4]) == [2,4]",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ((ele[0]+1, ele[1]),(ele[0]-1, ele[1]),(ele[0], ele[1]+1),(ele[0], ele[1]-1),(ele[0]+1, ele[1]+1),(ele[0]-1, ele[1]-1),(ele[0]-1, ele[1]+1),(ele[0]+1, ele[1]-1))\n",
        "test": "assert ",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text[:i] + \"_\" + text[i+1:]\n        elif text[i] == \"_\":\n            text = text[:i] + \" \" + text[i+1:]\n    return text\n",
        "test": "assert     replace_spaces('h') == 'h'",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            new_list.append(num_list[i])\n    for i in range(len(num_list)-len(new_list)):\n        new_list.append(0)\n    return new_list\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 1077,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) :\n        for j in range(i+1, n) :\n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n",
        "test": "assert     pair_xor_Sum([1,2,3],3) == 6",
        "num_ids": 606,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return_list = []\n    for i in range(len(iterable)):\n        return_list.append(hq.heappop(iterable))\n    return return_list\n",
        "test": "assert     heap_sort([]) == []",
        "num_ids": 558,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #print(actual_cost,sale_amount)\n    if actual_cost == sale_amount:\n        return 1\n    else:\n        return 0\n",
        "test": "assert not noprofit_noloss(10,100)",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return 35.74 + 0.6215 * v**0.16 + 0.3965 * t -11.37 * (v**0.16) * (t**0.16)\ndef cli():\n    \"\"\"\n    Read a list of integers. Output a list of integers representing the sum of the values in each list element. For example:\n    if the input is:\n    [1,2,3,4]\n    the output should be:\n    [1,3,6,10]\n    \"\"\"\n    a = [[1,2,3,4]]\n    print(sum(a[0]))\n",
        "test": "assert     wind_chill(10, 25) == -4.1",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_nam = 0\n    for nam in sample_names:\n        if nam[0].islower():\n            sum_nam = sum_nam + len(nam)\n    return sum_nam\n",
        "test": "assert    sample_nam([\"A\",\"B\",\"C\"]) == 0, \"sample_nam is not correct\"",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items[1:-1]\n",
        "test": "assert     remove_parenthesis(\"(This is a test case)\") == \"This is a test case\"",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # a = 0\n    # b = 1\n    # for i in range(0,n):\n    #     c = a+b\n    #     a = b\n    #     b = c\n    #     print(c)\n    # return c\n    if n==0:\n        return 0\n    if n ==1:\n        return 1\n    else:\n        return n*(n+1)//2\n    \n    \n    \n",
        "test": "assert     is_nonagonal(1) == 1, \"The first non-diagonal number is 1.\"",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'[^zZ]([zZ])',text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_wordz_middle(\"foo and I want to buy a bich\") == False, 'Example 3'",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # code here\n    i = 0\n    while i < k and i < len(input):\n        input[i], input[k-1] = input[k-1], input[i]\n        i += 1\n        k -= 1\n    return input\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4], 0) == [1,2,3,4], \"Test Case Failed\"",
        "num_ids": 619,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert     add_dict_to_tuple((10, 'A'), {1: 1, 2: 2, 3: 3}) == (10, 'A', {1: 1, 2: 2, 3: 3})",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    m = len(cost[0])\n    for i in range(n):\n        for j in range(m):\n            if cost[i][j] == float(\"-inf\") or cost[i][j] == float(\"inf\"):\n                cost[i][j] = float(\"-inf\")\n            else:\n                cost[i][j] = float(cost[i][j])\n    for i in range(n):\n        for j in range(m):\n            if cost[i][j] == float(\"inf\") or cost[i][j] == float(\"-inf\"):\n                cost[i][j] = 0\n    # print(cost)\n    for i in range(1, n):\n        for j in range(1, m):\n            if cost[i][j] == float(\"inf\") or cost[i][j] == float(\"-inf\"):\n                cost[i][j] = 0\n    # print(cost)\n    for i in range(1, n):\n        for j in range(1, m):\n            cost[i][j] += min(cost[i - 1][j], cost[i][j - 1])\n            \n    # print(cost)\n    ans = float(\"-inf\")\n    for i in range(n):\n        for j in range(m):\n            if cost[i][j] > ans:\n                ans = cost[i][j]\n    # print(ans)\n    return ans",
        "test": "assert     maxAverageOfPath([[2,3,7],",
        "num_ids": 1786,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dict = {}\n    for i in students.keys():\n        if (students[i][0]>h) and (students[i][1]>w):\n            new_dict[i]=students[i]\n    return new_dict\n",
        "test": "assert     filter_data({'Aamir': (1.75, 67.0), 'Arsh': (1.85, 75.0), 'Santosh': (1.78, 74.0), 'Ramesh': (1.81, 45.0), 'Raj': (1.63, 88.0)}, 1.3, 100.0) == {}",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0, len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([1,1,1,2,2,3], [1,1,1,2,2,2]) == 5",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 1\n    for i in range(power):\n        result = result * base\n    return result\n",
        "test": "assert     power_base_sum(3, 1) == 3",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    string1 = text1\n    quotation_start = string1.find(\"\\\"\") + 1\n    quotation_end = string1.find(\"\\\"\", quotation_start)\n    quotation_in_between = string1[quotation_start:quotation_end]\n    return quotation_in_between\n",
        "test": "assert     extract_quotation(\"Hello, this is a test! \") == \"Hello, this is a test!\"",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i * (i+1) for i in test_tup)\n",
        "test": "assert     multiply_elements((5,8,9,10)) == (5,8,45,60), \"Expected: (5,8,45,60), got: {}\".format(multiply_elements((5,8,9,10)))",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    i = 0\n    sum_list = []\n    while i < len(lst1):\n        sum_list.append(lst1[i]+lst2[i])\n        i = i+1\n    return sum_list\n",
        "test": "assert     sum_list([1,2,3], [1,2,3]) == [2,4,6], 'Failed!'",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == '#':\n            continue\n        else:\n            return nums.index(key)\n",
        "test": "assert     consecutive_duplicates([1,2,2,3,4,5,3,2]) == False",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*h/3\n",
        "test": "assert ",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[,.:]\", \":\", text)\n",
        "test": "assert     (replace_specialchar(\"a,b,c\") == \"a:b:c\")",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l, r = 0, len(A) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if A[mid] < x:\n            l = mid + 1\n        elif A[mid] > x:\n            r = mid - 1\n        else:\n            return mid\n    return -1\n",
        "test": "assert     find_first_occurrence([1,2,3,4,5,5,5], -5) == -1",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                count += arr[i]*arr[j]*arr[k]\n    print(count)\n",
        "test": "assert ",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n ^ (n >> 1)\n    return m\n",
        "test": "assert     set_middle_bits(0) == 0 ",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo, hi = 0, len(a)\n    while lo < hi:\n        mid = lo + (hi-lo)//2\n        if a[mid] < x:\n            lo = mid+1\n        else:\n            hi = mid\n    return lo\n",
        "test": "assert     left_insertion([1,3,5,7], 6) == 3",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return True if re.match(regex, string) else False\n    # return True if re.search(regex,string) else False\n",
        "test": "assert     check_str('h') == False, \"Invalid Input\"",
        "num_ids": 4233,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (n - 1)\n",
        "test": "assert     geometric_sum(2) == 2, \"geometric_sum([1]) = 2\"",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = n-1\n    if(n%3 == 0):\n        return (int)(n/3)\n    else:\n        return n%3\n",
        "test": "assert ",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    i = 0\n    while i < len(test_tup):\n        my_dict[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return my_dict\n",
        "test": "assert ",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) <= 1\n",
        "test": "assert     all_Characters_Same('p') == True",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1.0/2.0)*side**2\n",
        "test": "assert     area_tetrahedron(2) == 2",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n",
        "test": "assert     rotate_right([1,2,3,4,5,6], 0) == [1,2,3,4,5,6], \"should not rotate\"",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    assert type(test_tup) is tuple\n    for i in test_tup:\n        assert type(i) is int or float or str or bool\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "test": "assert     check_none((1, 2, 3, 4, None, 6, None)) == True",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def checkdivisible(num):\n        return all([num % int(i) == 0 for i in str(num)])\n    return list(filter(checkdivisible, range(startnum, endnum+1)))\n",
        "test": "assert ",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r < 0:\n        return None\n    if a > 360:\n        return None\n    if a == 0:\n        return 0.5*r*r\n    if a == 90 or a == 270:\n        return math.pi*r*r\n    else:\n        return math.pi*r*r*math.sin(math.pi/180*a)\n    \nprint(sector_area(0,180))\nprint(sector_area(1,0))\nprint(sector_area(-1,90))\nprint(sector_area(-1,360))\nprint(sector_area(1,360))\n",
        "test": "assert     sector_area(2,45) == math.pi*(2*math.sqrt(2))",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    k = len(Z) \n    L = [[0 for x in range(k+1)] for x in range(m+1)] \n    for i in range(m+1): \n        for j in range(k+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] or X[i-1] == Z[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L[m][k]\n",
        "test": "assert ",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    for i in range(0,len(str1)-1):\n        if str1[i].isupper() and str1[i+1].islower():\n            str1=str1[0:i]+\" \"+str1[i:]\n    return str1\n",
        "test": "assert     capital_words_spaces(\"give\") == \"give\"",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n",
        "test": "assert     sort_numeric_strings(['24','123', '11', '12', '1', '2', '3', '4']) == ['1', '2', '3', '4', '11', '12', '24', '123']",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "test": "assert add_tuple([1, 2, 3], (1)) == None, \"Expected return value None, got: {}\".format(add_tuple([1, 2, 3], (1)))",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_index = 2 * i + 1\n    right_index = 2 * i + 2\n    \n    if left_index <= len(arr) - 1 and arr[left_index] > arr[i]:\n        return False\n    if right_index <= len(arr) - 1 and arr[right_index] > arr[i]:\n        return False\n    if left_index <= len(arr) - 1 and right_index <= len(arr) - 1 and arr[left_index] > arr[right_index]:\n        return False\n    return True\n",
        "test": "assert     check_min_heap_helper([1, 2, 3, 4, 5, 6, 7, 8], 2) == False",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 1:\n        return n\n    else:\n        j = 2\n        i = 1\n        while i <= n:\n            if j%2 == 0:\n                j = j/2\n                i = i + 1\n            else:\n                j = j*3 + 1\n                i = i + 1\n    return j\n",
        "test": "assert     jacobsthal_num(0) == 0, \"jacobsthal_num(0) is wrong\"",
        "num_ids": 2473,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # code here\n    # print(test_list)\n    # print(K)\n    if(len(test_list) <= K):\n        return test_list\n    else:\n        return test_list[:K]\n",
        "test": "assert     min_k([('a','b',1),('a','c',2)], 0) == []",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            res.append(l1[i])\n    return res\n",
        "test": "assert     extract_index_list([1,2,3,4], [\"a\",\"b\",\"c\",\"d\"], [\"1\",\"2\",\"3\"]) == []",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers)\n    \n    \n    \ndef smallest_in_arr(numbers):\n    '''\n    Write a function to find the smallest number in a list.\n    '''\n    return min(numbers)\n    \n    \n    \ndef common_characters(sentence1, sentence2):\n    '''\n    Write a function to find the common characters between two sentences.\n    '''\n    new_sentence = ''.join(sorted(sentence1.lower()) & sorted(sentence2.lower()))\n    return new_sentence\n",
        "test": "assert     second_smallest([3,4,1,2,9]) == 1",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.sub(r'\\s*\\n\\s*','', text)\n    text = re.sub(r'\\s*\\n\\s*','', text)\n    text = re.sub(r'\\s*\\n\\s*','', text)\n    return bool(re.match(r'a*b*', text))\n",
        "test": "assert text_match_zero_one('ababab') == True",
        "num_ids": 2411,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    # write your code here\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs(test_list4) == 1",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for i in list1:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 1432,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    from re import match\n    \n    if match(r'^[+-]?(([0-9]*[.][0-9]+)|([0-9]+))$', num):\n        return True\n    return False\n",
        "test": "assert     is_decimal('5.1') == True",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # create an empty set\n    setOfNumber = set()\n    \n    # traverse the given list\n    for num in arr:\n        # if any element is already present in set then return False\n        if num in setOfNumber:\n            return False\n        else:\n            # add the element to set\n            setOfNumber.add(num)\n    # return True if all elements are unique else False\n    return True\n",
        "test": "assert unique_Element([1,1,2]) == False",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_30days = False\n    if monthnum3 == 30:\n        month_30days = True\n    return month_30days\n",
        "test": "assert     check_monthnumber_number(5) == False",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = 99999999\n    for i in range(n-1):\n        diff = min(diff,arr[i+1]-arr[i])\n    return diff\n",
        "test": "assert    find_min_diff([2,6,3,5,1,2], 3) == 0",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    counter = 0\n    for i in str:\n        if i.isdigit():\n            counter+=1\n        else:\n            pass\n    return counter",
        "test": "assert     number_ctr(\"123456\") == 6",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    polite = 0\n    while i <= n:\n        polite += 1/i\n        i += 1\n    return polite\ndef is_polite_using_recursion(n):\n    '''\n    Write a recursive function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return None\n    else:\n        return 1 / (n * (n + 1))\n    #code here\n",
        "test": "assert ",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return l1\n    res = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        res.append((l1[i], l1[i+1]))\n    return res\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 655,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n",
        "test": "assert     get_pairs_count([3,3,4,4], 5) == 0, \"should get zero pairs\"",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    for x in li1:\n        if x not in li2:\n            return x\n",
        "test": "assert     Diff([1,2,3], [1,3,3]) == 2, \"Diff should return 2.\"",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    odd_nums = []\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            odd_nums.append(i)\n            total = total + i**2\n    print('Sum of fourth power of ',odd_nums,' is : ',total)\n    return total\n",
        "test": "assert ",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp[0] == \"(\" and exp[-1] == \")\":\n        return True\n    if len(exp) <= 1:\n        return False\n    if exp[0] == \"(\" and exp[-1] == \")\":\n        return True\n    if exp[0] == \"(\" and exp[-1]!= \")\":\n        return False\n    if exp[0]!= \"(\" and exp[-1] == \")\":\n        return False\n    if exp[0]!= \"(\" and exp[-1]!= \")\":\n        return True\n    if exp[1] == \"(\" and exp[-1] == \")\":\n        return True\n    if exp[1]!= \"(\" and exp[-1] == \")\":\n        return False\n    if exp[1]!= \"(\" and exp[-1]!= \")\":\n        return True\n    if exp[1] == \"(\" and exp[-1]!= \")\":\n        return False\n    if len(exp) > 2:\n        if exp[1] == \"(\" and exp[-1] == \")\":\n            return False\n    if len(exp) > 3:\n        if exp[1] == \"(\" and exp[-1] == \")\":\n            return False\n    if len(exp) > 4:\n        if exp[1] == \"(\" and exp[-1] == \")\":\n            return False\n    if exp[1] == \"(\" and exp[-1] == \")\":\n        return True\n    if exp[1]!= \"(\" and exp[-1] == \")\":\n        return False\n    if exp[1]!= \"(\" and exp[-1]!= \")\":\n        return True\n    if exp[2] == \"(\" and exp[-1] == \")\":\n        return True\n    if exp[2]!= \"(\" and exp[-1] == \")\":\n        return False\n    if exp[2]!= \"(\" and exp[-1]!= \")\":\n        return True\n    if exp[2] == \"(\" and exp[-1]!= \")\":\n        return False\n    if exp[3] == \"(\" and exp[-1] == \")\":\n        return False\n    if exp[3]!= \"(\" and exp[-1] == \")\":\n        return True\n    if exp[3]!= \"(\" and exp[-1]!= \")\":\n        return True\n    if exp[3] == \"(\" and exp[-1]!= \")\":\n        return False\n    if exp[4] == \"(\" and exp[-1] == \")\":\n        return False\n    if exp[4]!= \"(\" and exp[-1] == \")\":\n        return True\n    if exp[4]!= \"(\" and exp[-1]!= \")\":\n        return True\n    if exp[4] == \"(\" and exp[-1]!= \")\":\n        return False\n    return False\n",
        "test": "assert     check_expression('((a+b))') == True, \"should be True\"",
        "num_ids": 1816,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            test_str.pop(i)\n    return''.join(test_str)\n",
        "test": "assert     remove_length('abcd', 1) == 'abcd'",
        "num_ids": 795,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    substring = re.findall(pattern,text)\n    if substring:\n        for i in range(len(substring)):\n            substring[i] = \"\".join(substring[i])\n        return substring\n    else:\n        return None\n",
        "test": "assert    occurance_substring(\"aaabcc\",\"bca\") == None",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 1:\n                return False\n        else:\n            continue\n    return True\n",
        "test": "assert     odd_position([-1,2,3,-4,5,6,7,8,-9]) == False, 'Should return False'",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count=0\n    for i in range(len(test_str)):\n        if test_str[i] in ['a','e','i','o','u','A','E','I','O','U']:\n            count+=1\n        if test_str[i]==' ':\n            count+=1\n    return count\n",
        "test": "assert     count_vowels(\"gfgk\") == 0",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i + 1:]:\n            sum += arr[i]\n    return sum\n    \n    ",
        "test": "assert not find_sum([])",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort(key=lambda x:x)\n    for k,g in groupby(list1):\n        yield list(g)\ndef test_pack_consecutive_duplicates():\n    assert pack_consecutive_duplicates([1,1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_duplicates([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates([1,1,2,3,3,3,4,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates([1,1,2,3,3,4,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates([1,2,3,4,5]) == [[1,2,3,4,5]]\ndef pack_consecutive_consecutive(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort(key=lambda x:x)\n    for k,g in groupby(list1):\n        yield list(g)\ndef test_pack_consecutive_consecutive():\n    assert pack_consecutive_consecutive([1,1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_consecutive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive([1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_consecutive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive([1,1,2,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_consecutive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive([1,1,2,3,3,4,4,5]) == [[1,2,3],[4,5]]\ndef pack_consecutive_duplicates_within_inclusive(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort(key=lambda x:x)\n    for k,g in groupby(list1,key=lambda x:x):\n        yield list(g)\ndef test_pack_consecutive_duplicates_within_inclusive():\n    assert pack_consecutive_duplicates_within_inclusive([1,1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_duplicates_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates_within_inclusive([1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_duplicates_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates_within_inclusive([1,1,2,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_duplicates_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates_within_inclusive([1,1,2,3,3,4,4,5]) == [[1,2,3],[4,5]]\ndef pack_consecutive_consecutive_within_inclusive(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort(key=lambda x:x)\n    for k,g in groupby(list1,key=lambda x:x):\n        yield list(g)\ndef test_pack_consecutive_consecutive_within_inclusive():\n    assert pack_consecutive_consecutive_within_inclusive([1,1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_consecutive_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive_within_inclusive([1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_consecutive_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive_within_inclusive([1,1,2,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_consecutive_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive_within_inclusive([1,1,2,3,3,4,4,5]) == [[1,2,3],[4,5]]\ndef pack_consecutive_duplicates_within_exclusive(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort(key=lambda x:x)\n    for k,g in groupby(list1,key=lambda x:x):\n        yield list(g)\ndef test_pack_consecutive_duplicates_within_exclusive():\n    assert pack_consecutive_duplicates_within_exclusive([1,1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_duplicates_within_exclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates_within_exclusive([1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_duplicates_within_exclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates_within_exclusive([1,1,2,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_duplicates_within_exclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates_within_exclusive([1,2,3,4,5]) == [[1,2,3",
        "test": "assert     pack_consecutive_duplicates([1,2,3,3,4,4,5,6]) == [[1,2,3,4,5,6]]",
        "num_ids": 1087,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return [tuple(l) for l in list1]\n",
        "test": "assert ",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ans = []\n    for i in combinations(test_list,2):\n        ans.append(i)\n    return ans\ndef find_combinations_2(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ans = []\n    for i in combinations(test_list,2):\n        ans.append(i)\n    return ans\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 1314,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,n) : \n        if (n % i == 0 ) : \n            divisors = divisors + 1\n    return divisors\n",
        "test": "assert     count_divisors(1) == 0, \"Input 1 should return 0\"",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    # If the length of the array is less than 3, then return 0.\n    if len(arr) < 3:\n        return 0\n    \n    # The below variable will store the sum.\n    sum = 0\n    \n    # Consider all possible sub-arrays\n    for i in range(len(arr)):\n        \n        # The below variable will hold the sum of all sub-arrays\n        # which have odd length.\n        odd_length_sum = 0\n        \n        # Consider all elements from first element\n        # which is at even index of the array.\n        for j in range(i, len(arr)):\n            \n            # If this element is even, then add it to the sum.\n            if j % 2 == 0:\n                odd_length_sum += arr[j]\n            \n            # If this element is odd, then break the loop\n            else:\n                break\n        \n        # Add the sum of all sub-arrays which have odd length.\n        sum += odd_length_sum\n        \n    \n    return sum\n    \n    \n",
        "test": "assert     odd_length_sum([1,2,3,4,5,6]) == 9",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n        s = 0\n        v = mx\n    elif mx == r:\n        h = ((g-b)/df)%6\n        s = df/mx\n        v = mn\n    elif mx == g:\n        h = ((b-r)/df)+2\n        s = df/mx\n        v = mn\n    elif mx == b:\n        h = ((r-g)/df) + 4\n        s = df/mx\n        v = mn\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    p1 = 0\n    p2 = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            p1 = p1 * list1[i]\n        else:\n            p2 = p2 * list1[i]\n    return p1,p2\n",
        "test": "assert mul_even_odd([2,3]) == (0,0), \"Wrong\"",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.strip()\n    test_str = test_str.replace('(', '')\n    test_str = test_str.replace(')', '')\n    test_list = []\n    for t in test_str.split(','):\n        test_list.append(int(t))\n    return tuple(test_list)\n",
        "test": "assert     tuple_str_int(\"(1,2,3)\") == (1,2,3)",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x < a[0]:\n        return 0\n    elif x > a[len(a) - 1]:\n        return len(a)\n    else:\n        return bisect.bisect_right(a, x)\n",
        "test": "assert     right_insertion(a = 'abcdef', x = 'g') == 6",
        "num_ids": 701,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return text.find('abb')!=-1\n",
        "test": "assert     text_match_three('abababab') == False, 'Test 3 fail. Expected: False, Actual: True'",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    new_tuple = tuple(test_list) + (test_str,)\n    \n    return new_tuple\n",
        "test": "assert ",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n        else:\n            return False\n    return True\n",
        "test": "assert     even_position([1,2,3,4,5,6]) == False, \"All even indices should contain even numbers\"",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(map(lambda x:x[0] if type(x) is tuple else x,test_tup))\n    ",
        "test": "assert     remove_nested((1,2,3,4,5,6)) == (1,2,3,4,5,6)",
        "num_ids": 2690,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([]) == 0",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i]==x:\n            return i\n    return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     last([],0) == -1",
        "num_ids": 2585,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    ans = re.search(r'a.*?b', text)\n    if ans == None:\n        print(\"No Match\")\n    else:\n        print(ans.group())\n",
        "test": "assert     text_starta_endb(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "num_ids": 1171,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for key in dict:\n        sum=sum+dict[key]\n    return sum\n",
        "test": "assert     return_sum({'a':1, 'b':2, 'c':3}) == 6",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n > 1:\n        s = 0\n        for i in range(2, n+1):\n            if i % 2!= 0:\n                s += i\n    else:\n        s = 1\n    return s\nprint(sum_odd(10))\n",
        "test": "assert     sum_odd(1) == 1",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in arr:\n        s+=i\n    return s\n",
        "test": "assert     _sum([1, 2, 3, 4, 5]) == 15, \"Wrong answer\"",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n",
        "test": "assert ",
        "num_ids": 240,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "test": "assert     remove_all_spaces('hello') == 'hello'",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "test": "assert     test_three_equal(1,1,1) == 3, \"Test 1 Failed\"",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(1,len(arr)):\n        if arr[i] <= arr[i-1]:\n            count += 1\n    return count\n",
        "test": "assert     count_rotation([1, 2, 3]) == 0, \"Incorrect\"",
        "num_ids": 2495,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    n = int(n**0.5)\n    if n * n == n :\n        return True\n    else:\n        return False\n    \ndef is_prime_number(n) :\n    '''\n    Write a function to check whether the given number is a prime number or not. https://www.geeksforgeeks.org/check-if-given-number-is-prime-number-in-cpp/\n    '''\n    if n <= 1 :\n        return False\n    else :\n        for i in range(2,n) :\n            if n % i == 0 :\n                return False\n    return True\n    \ndef is_prime_number_recursive(n) :\n    '''\n    Write a function to check whether the given number is a prime number or not. https://www.geeksforgeeks.org/check-if-given-number-is-prime-number-in-cpp/\n    '''\n    def prime_helper(n,i) :\n        if n == 0:\n            return False\n        elif n == 1:\n            return True\n        elif i * i > n:\n            return False\n        else:\n            for j in range(2,n) :\n                if n % j == 0:\n                    return False\n            return True\n    \n    if n <= 1 :\n        return False\n    else :\n        for i in range(2,n) :\n            if prime_helper(n,i) :\n                return True\n        return False\n",
        "test": "assert not is_perfect_square(8)",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        return is_product_even(arr[1:])\n",
        "test": "assert     is_product_even([1]) == False, \"Should return False\"",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Check for empty list\n    if not lists:\n        return []\n    # Return empty list if list contains 0 elements\n    if not lists[0]:\n        return []\n    # Set min and max variables\n    max_sum, min_sum = lists[0][0], lists[0][0]\n    # Compare values of min and max\n    for l in lists:\n        if l[0] >= max_sum:\n            max_sum = l[0]\n        if l[0] <= min_sum:\n            min_sum = l[0]\n    # Create empty list to be returned\n    final_list = []\n    # Go through each item in the list\n    for i in range(len(lists)):\n        # Check if item in list is smaller than min value\n        if lists[i][0] < min_sum:\n            # Add new item to list\n            final_list.append(lists[i])\n        # Check if item in list is larger than max value\n        elif lists[i][0] > max_sum:\n            # Add new item to list\n            final_list.append(lists[i])\n    # Return final list with minimum and maximum values\n    return final_list",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialization\n    max_upper = 0\n    last_char = \"\"\n    max_count = 0\n    \n    # Searching\n    for char in test_str:\n        if char.isupper():\n            last_char = char\n            max_upper = 1\n            max_count = 1\n        elif char.isupper():\n            if char.isupper():\n                max_upper += 1\n                max_count += 1\n            elif char.islower():\n                max_upper = max_count\n                max_count = 1\n            else:\n                max_upper = max_count\n                max_count = 0\n        elif max_upper > max_count:\n            max_upper = max_count\n            max_count = 0\n        else:\n            max_count = max_count\n            max_upper = max_count\n    return max_upper\n    ",
        "test": "assert     max_run_uppercase(\"\") == 0, 'Empty String'",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    try:\n        #convert to set to eliminate duplicates\n        nums = set(nums)\n        for num in nums:\n            if num % 2!= 0:\n                return num\n    except:\n        raise TypeError\n",
        "test": "assert     first_odd([1,2,3,4,5,6,7,8,9]) ==     1, f'Your function must return the first odd number in the list.'",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(0, len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n",
        "test": "assert     check_K((1,2), 1) == True, \"Check K passed incorrectly!\"",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # your code here\n    return sorted(test_tup2) < sorted(test_tup1)\n",
        "test": "assert     check_smaller(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd', 'e')) == False, 'Not Correct'",
        "num_ids": 602,
        "indeed": true
    }
]