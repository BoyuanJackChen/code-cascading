[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_set = set(test_tup1) & set(test_tup2)\n    return test_set\n",
        "test": "assert ",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if (n % i) == 0:\n                return False\n                break\n        else:\n            return True\n        return False\n    else:\n        return False\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a number\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n",
        "test": "assert     is_not_prime(3) == True, \"is_not_prime failed for n = 3\"",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return hq.nlargest(n,nums)\n",
        "test": "assert     heap_queue_largest([4,3,2,1],4) == [4,3,2,1]",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x % 2 == 0):\n        x = x / 2\n    return (x == 1)\n",
        "test": "assert is_Power_Of_Two(3)    == False, 'Wrong Answer'",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    x = re.findall('[a-zA-Z]+', text)\n    result = []\n    for i in x:\n        if len(i) >= 4:\n            result.append(i)\n    return result\n",
        "test": "assert     find_char_long('What life is beautiful?') == ['What', 'life', 'beautiful']",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x*x for x in nums]\n",
        "test": "assert     square_nums([1, 2, 3]) == [1, 4, 9], \"Square all elements of a list.\"",
        "num_ids": 189,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    no_rotations=0\n    length=len(str)\n    if length==0:\n        return no_rotations\n    if length==1:\n        return 1\n    if str[0]!=str[1]:\n        no_rotations=1\n    for i in range(1,length):\n        if str[i]!=str[i-1]:\n            no_rotations+=1\n    return no_rotations\n",
        "test": "assert     find_Rotations('') == 0, \"Empty string is not rotated\"",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # your code here\n    return s.replace(s[0], \"\")\n",
        "test": "assert     remove_Occ('Yay','y') == 'ay'",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=lambda x:sum(x))\n    return M\n",
        "test": "assert     sort_matrix([[1,2],[3,4]]) == [[1, 2], [3, 4]]",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # find the area of a triangle \n    s = (l + b + h)/2\n    # find the area of a square\n    area = s * s\n    # find the area of a cube\n    area_cube = (l * b * h)\n    # calculate the volume \n    volume = area * s * s * s\n    return volume\nprint(\"Volume of a triangle is: \",find_Volume(5,6,7)",
        "test": "assert     find_Volume(5, 5, 5) == 30, \"Third input is incorrect\"",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-zA-Z_]',text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore(\"ThisIsAText_\") == True",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "test": "assert     square_perimeter(1) == 1",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars_in_string = 256\n",
        "test": "assert ",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    for i in range(len(arraynums)):\n        for j in range(i, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                duplicate = True\n                break\n    return duplicate\n",
        "test": "assert ",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 5:\n        return True\n    elif x == 7:\n        return True\n    elif x == 9:\n        return True\n    elif x == 11:\n        return True\n    elif x == 13:\n        return True\n    elif x == 17:\n        return True\n    elif x == 19:\n        return True\n    elif x == 23:\n        return True\n    elif x == 29:\n        return True\n    elif x == 31:\n        return True\n    elif x == 37:\n        return True\n    elif x == 41:\n        return True\n    elif x == 43:\n        return True\n    elif x == 47:\n        return True\n    elif x == 53:\n        return True\n    elif x == 59:\n        return True\n    elif x == 61:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(123) == False, \"check the correctness\"",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num % 2 == 0:\n        return -num\n    return (num * -1) - 1\n    ",
        "test": "assert     rev(-3) == -2, 'incorrect'",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    arr.sort()\n    for i in range(len(arr)-1) :\n        if max_num < int(str(arr[i])+str(arr[i+1])) :\n            max_num = int(str(arr[i])+str(arr[i+1]))\n    return max_num\n    \nprint find_Max_Num([5,9,3,6,7,1,2,4])\n    \n",
        "test": "assert ",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return -x > -y or -y > -x\n",
        "test": "assert     opposite_Signs(-1, 1) == True, 'x = -1, y = 1, it should be True'",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return ((1+(8*n-1)**0.5)/2)\n",
        "test": "assert     is_octagonal(1) == 1, \"is_octagonal(1) should return 1\"",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    \n    for i in range(len(s)):\n        d[s[i]] += 1\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (d[s[i]] + d[s[j]] == len(s)):\n                count += 1\n    \n    return count\n",
        "test": "assert     count_Substrings(\"\") == 0, \"Not correct\"",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    x = min(xs)\n    return x\n    \ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    x = max(xs)\n    return x\n    \ndef median_num(xs):\n    '''\n    Write a python function to find median number in a list.\n    '''\n    if len(xs)%2!= 0:\n        x = sorted(xs)[len(xs)//2]\n    else:\n        x = (sorted(xs)[len(xs)//2-1] + sorted(xs)[len(xs)//2])/2\n    return x\n    \ndef length_of_string(x):\n    '''\n    Write a python function to find length of a string.\n    '''\n    return len(x)\n    \ndef reverse_string(x):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return x[::-1]\n    \ndef max_in_list(xs):\n    '''\n    Write a python function to find max in list.\n    '''\n    x = max(xs)\n    return x\n    \ndef min_in_list(xs):\n    '''\n    Write a python function to find min in list.\n    '''\n    x = min(xs)\n    return x\n    \ndef sum_of_list(xs):\n    '''\n    Write a python function to find sum of a list.\n    '''\n    x = sum(xs)\n    return x\n    \ndef print_list(xs):\n    '''\n    Write a python function to print a list.\n    '''\n    for x in xs:\n        print(x)\n        \ndef print_list_in_reverse(xs):\n    '''\n    Write a python function to print a list in reverse.\n    '''\n    for x in xs[::-1]:\n        print(x)\n        \ndef square_list(xs):\n    '''\n    Write a python function to square a list.\n    '''\n    for x in range(len(xs)):\n        xs[x] = xs[x]**2\n    return xs\n    \ndef first_and_last_element_of_list(xs):\n    '''\n    Write a python function to find first and last element of a list.\n    '''\n    x = xs[0]\n    x = xs[len(xs)-1]\n    return x\n    \ndef average_of_list(xs):\n    '''\n    Write a python function to find average of a list.\n    '''\n    total = 0\n    for x in xs:\n        total += x\n    return total/len(xs)\n    \ndef find_the_index_of_element(x,xs):\n    '''\n    Write a python function to find the index of element in a list.\n    '''\n    for i in range(len(xs)):\n        if x == xs[i]:\n            return i\n    return -1\n    \ndef second_largest_element_in_list(xs):\n    '''\n    Write a python function to find second largest element in a list.\n    '''\n    x = largest_num(xs)\n    if x == largest_num(xs):\n        x = largest_num(xs)\n    return x\n    \ndef nth_largest_element_in_list(xs, n):\n    '''\n    Write a python function to find the nth largest element in a list.\n    '''\n    x = sorted(xs)[len(xs)-n]\n    return x\n    \ndef second_smallest_element_in_list(xs):\n    '''\n    Write a python function to find second smallest element in a list.\n    '''\n    x = smallest_num(xs)\n    if x == smallest_num(xs):\n        x = smallest_num(xs)\n    return x\n    \ndef nth_smallest_element_in_list(xs, n):\n    '''\n    Write a python function to find the nth smallest element in a list.\n    '''\n    x = sorted(xs)[n-1]\n    return x\n    \ndef remove_duplicates(xs):\n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    x = list(set(xs))\n    return x\n    \ndef fibonacci_series(n):\n    '''\n    Write a python function to print fibonacci series upto n terms.\n    '''\n    f = 1\n    s = 0\n    while f<n:\n        x = f+s\n        print(x)\n        f = s\n        s = x\n    return x\n    \ndef fibonacci_recursive(n):\n    '''\n    Write a python function to print fibonacci series upto n terms.\n    '''\n    if n<0:\n        return 'please input positive integer'\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_recursive(n-1)+fibonacci_recursive(n-2)\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if n<0:\n        return 'please input positive integer'\n    elif n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef factorial_recursive(n):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if n<0:\n        return 'please input positive integer'\n    elif n == 0:\n        return 1\n    else:\n        return n*factorial_recursive(n-1)\n    \ndef nth_prime_number(n):\n    '''\n    Write a python function to find nth prime number.\n    '''\n    x = 2\n    while True:\n        if is_prime(x):\n            if x == n:\n                break\n            x += 1\n        else:\n            x += 1\n    return x\n    \ndef is_prime(x):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if x==1:\n        return False\n    elif x==2:\n        return True\n    elif x%2==0:\n        return False\n    else:\n        for i in range(3,int(x**0.5)+1,2):\n            if x%i==0:\n                return False\n        return True\n    \ndef string_concatenation(x, y):\n    '''\n    Write a python function to concatenate strings.\n    '''\n    return x+y\n    \ndef string_repetition(x, y):\n    '''\n    Write a python function to check if a given string repeats itself or not.\n    '''\n    return y in x*2\n    \ndef string_rotation(x, y):\n    '''\n    Write a python function to check if a given string rotates with a given shift.\n    '''\n    return y in x[len(x)-y:]+x[:len(x)-y]\n    \ndef palindrome_rotation(x, y):\n    '''\n    Write a python function to check if a given string rotates with a given shift.\n    '''\n    return y in x[len(x)-y:]+x[:len(x)-y]\n    \ndef count_vowels_in_string(x):\n    '''\n    Write a python function to count vowel in a given string.\n    '''\n    if len(x)<=0:\n        return 'please input a string'\n    elif 'a' in x:\n        return x.count('a')\n    elif 'e' in x:\n        return x.count('e')\n    elif 'i' in x:\n        return x.count('i')\n    elif 'o' in x:\n        return x.count('o')\n    elif 'u' in x:\n        return x.count('u')\n    else:\n        return 0\n    \ndef convert_string_to_list(x):\n    '''\n    Write a python function to convert string to list.\n    '''\n    if len(x)<=0:\n        return 'please input a string'\n",
        "test": "assert     smallest_num([1,5,7,3,2,4]) == 1",
        "num_ids": 268,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = -1\n    if test_list:\n        for i in range(len(test_list)-1):\n            difference = test_list[i+1] - test_list[i]\n            if max_difference < difference:\n                max_difference = difference\n    return max_difference\n",
        "test": "assert     max_difference(test_list_5) == 4",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1], reverse=True)\n",
        "test": "assert     subject_marks([(3, 3), (4, 4), (1, 1), (2, 2), (4, 4), (3, 3), (1, 1)]) \\",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([1, 2, 3])     == 6",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n    \n    \n",
        "test": "assert     pos_count([1,2,-5,4,-8,6,7]) == 6",
        "num_ids": 198,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n < 1:\n        return 1\n    \n    return bell_number(n - 1) + bell_number(n - 2)\n    \ndef maximum_admissible_number(n):\n    '''\n    Write a function to compute the maximum admissible number.\n    '''\n    if n < 1:\n        return 1\n    return 2 * maximum_admissible_number(n - 1)\n    \ndef max_distinct_sum_naive(n, k):\n    '''\n    Write a function that computes the maximum sum of k consecutive elements in an array of integers.\n    '''\n    if k > n:\n        return 0\n    \n    result = 0\n    for i in range(n - k + 1):\n        sum = 0\n        for j in range(k):\n            sum += nums[i + j]\n            if sum > result:\n                result = sum\n    return result\n",
        "test": "assert     bell_number(3) == 5",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n==0:\n        return False\n    increase=decrease=True\n    \n    for i in range(0,n-1):\n        if A[i]>=A[i+1]:\n            increase=False\n        if A[i]<=A[i+1]:\n            decrease=False\n    \n    return True if (decrease and increase) else False",
        "test": "assert is_Monotonic([1, 2, 1, 2]) == False",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        for j in range(len(s)):\n            if l[i+j]!= s[j]:\n                return False\n    return True\n",
        "test": "assert     is_sublist([1, 2, 3], [1, 2, 3]) == False",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    print(\"This function will check whether the given tuple have equal length or not\")\n    if len(Input) < 1:\n        print(\"Input cannot be empty\")\n    elif len(Input) > 1:\n        print(f\"Input: {Input}\")\n        if len(Input[0]) == len(Input[1]):\n            print(f\"Both tuples have equal length\")\n            return True\n        else:\n            print(f\"Both tuples don't have equal length\")\n            return False\n    else:\n        print(f\"Input: {Input}\")\n        print(f\"Only one tuple is given so, only one element and no length\")\n        return True\n",
        "test": "assert     find_equal_tuple(((1, 2), (3, 4), (5, 6))) == True",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    arr = nums\n    arr_len = len(arr)\n    arr_sorted = arr\n    swapped = False\n    while(True):\n        if(swapped == False):\n            for i in range(arr_len):\n                if(i == arr_len - 1):\n                    break\n                elif(arr[i] > arr[i+1]):\n                    swapped = True\n                    arr_sorted[i], arr_sorted[i+1] = arr_sorted[i+1], arr_sorted[i]\n        if(swapped == False):\n            break\n    return arr_sorted\n",
        "test": "assert     comb_sort([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    for i in range(1, int(n/2)):\n        if n % i == 0:\n            return False\n        else:\n            continue\n    return True\n",
        "test": "assert     dif_Square(8) == False, \"The number 8 cannot be represented by the difference of two squares\"",
        "num_ids": 2215,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def same(i, j):\n        return colors[i] == patterns[j]\n    \n    if len(colors)!= len(patterns): return False\n    if len(patterns) == 0: return True\n    \n    i = 0\n    for j in range(len(patterns)):\n        if same(i, j):\n            i += 1\n        else:\n            return False\n    \n    return True\n",
        "test": "assert     is_samepatterns([\"red\", \"blue\", \"green\"], [\"blue\", \"green\", \"red\"]) == False",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] % K == test_list[j][0] % K and test_list[i][1] % K == test_list[j][1] % K:\n                result.append(tuple([test_list[i][0], test_list[i][1]]))\n                result.append(tuple([test_list[j][0], test_list[j][1]]))\n    return result\n",
        "test": "assert     find_tuples([(1,2),(3,4),(5,6)], 3) == []",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    else:\n        return False\n",
        "test": "assert ",
        "num_ids": 66,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if(len(s) % 2 == 0):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "test": "assert ",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    else:\n        return 8\n",
        "test": "assert ",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\n",
        "test": "assert     volume_sphere(1.0) == math.pi * 4/3 * 1.0**3, \"Volume of a sphere with radius 1.0 should be pi*4/3*1.0**3\"",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = 0\n    for i in strr:\n        ans = ans + ord(i)\n    return ans%26\n",
        "test": "assert     get_Char(\"\") == 0",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0,1]\n    for i in range(2,n+1):\n        seq.append(seq[i-1]+seq[i-2])\n    return seq[n]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sphere_area = 4*math.pi*(r**2)\n    return sphere_area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    sphere_volume = (4/3)*math.pi*(r**3)\n    return sphere_volume\n",
        "test": "assert     surfacearea_sphere(1) == 4 * math.pi",
        "num_ids": 223,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        raise ValueError('n must be > 0')\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1 + sqrt(3) / 2\n    else:\n        return 1 + sqrt(3) / 2 + 1 / (2 * n - 1) * (1 - sqrt(3) / 2)\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict3.update(dict1)\n    dict3.update(dict2)\n    return dict3\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {**dict1, **dict2}\n    return dict3\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge one dictionary into another dictionary.\n    '''\n    dict3 = dict1.copy()\n    dict3.update(dict2)\n    return dict3\ndef nested_dict(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_2(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    for key,value in dict1.items():\n        dict2[key] = value\n    return dict2\ndef nested_dict_3(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_4(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict2.update(dict1)\n    dict2.update(dict1)\n    dict2.update(dict1)\n    return dict2\ndef nested_dict_5(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_6(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_7(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_8(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_9(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_10(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_11(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_12(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_13(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update",
        "test": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 1, 'd': 2}, {}) == {'a': 1, 'b': 2, 'c': 1, 'd': 2}",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for item in list1:\n        freq[item] += 1\n    return freq\n",
        "test": "assert freq_count([1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,",
        "num_ids": 4141,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Edge case, for number = 0\n    if N == 0:\n        return N\n",
        "test": "assert     closest_num(0) ==     0",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n",
        "test": "assert ",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for sub in sub_str:\n        if sub in str1:\n            return True\n    return False\n",
        "test": "assert     find_substring('yay','ay') == True",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    return n % 2 == 0 or is_undulating(n // 2)\n",
        "test": "assert     is_undulating(100) == True",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert     power(1,2) == 1, 'power: 1^2 = 1'",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list = sorted(test_list, key = itemgetter(1))\n    return test_list[0]\n",
        "test": "assert     index_minimum([(\"w\", 1), (\"y\", 3), (\"z\", 5)]) == (\"w\", 1)",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 10000000\n    for lst in lst:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length\n",
        "test": "assert     Find_Min_Length([[1], [2], [3], [4,5]]) == 1",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(2,n):\n        if n%i == 0:\n            div += 1\n    return div\n",
        "test": "assert ",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if len(list1) == 0:\n        return {}\n",
        "test": "assert ",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result/len(numbers)\n",
        "test": "assert     multiply_num([0,0,0,0,0]) == 0",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = \"\"\n    while n>0:\n        binary_string = str(n%2)+binary_string\n        n = n//2\n    return binary_string\n    \nprint(decimal_to_binary(12)) #1001110\nprint(decimal_to_binary(8)) #1000\nprint(decimal_to_binary(1)) #1\nprint(decimal_to_binary(0)) #0\nprint(decimal_to_binary(15)) #10111\n",
        "test": "assert ",
        "num_ids": 287,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    reverse_num = 0\n    for i in range(len(str(num))):\n        reverse_num = (reverse_num * 10) + (num % 10)\n        num = int(num / 10)\n    if num > 0:\n        return reverse_num\n    return 1\n",
        "test": "assert ",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n",
        "test": "assert kth_element([1,2,3,4,5], 1) == 1, \"Wrong Answer\"",
        "num_ids": 221,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Complete this function\n    return word.title()",
        "test": "assert     snake_to_camel(\"snakeCase\") == \"snakecase\", \"snakeCase\"",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * (n - 1) * (n - 2) // 6 - m\n",
        "test": "assert ",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in range(len(input_list)):\n        new_list.append([])\n        for j in range(len(input_list[i])):\n            new_list[i].append(input_list[i][j].lower())\n    sorted_list = []\n    for i in range(len(new_list)):\n        sorted_list.append(sorted(new_list[i]))\n    return sorted_list\n",
        "test": "assert     sort_sublists([\"a\", \"a\"]) == [['a'], ['a']]",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c = 0\n    for i in lst:\n        if i == True:\n            c += 1\n    return c\n",
        "test": "assert ",
        "num_ids": 113,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup\n",
        "test": "assert     add_lists([], (4,5,6)) == (4,5,6)",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    while(len(num1)>0 and len(num2)>0 and len(num3)>0):\n        if num1[0] <= num2[0]:\n            merged.append(num1.pop(0))\n        else:\n            merged.append(num2.pop(0))\n    if len(num1)>0:\n        merged = merged + num1\n    if len(num2)>0:\n        merged = merged + num2\n    if len(num3)>0:\n        merged = merged + num3\n    return merged\n",
        "test": "assert ",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    l = len(s)\n    res = 0\n    for i in range(n):\n        t = s[0]\n        for j in range(1,l):\n            s = s[1:] + t\n        res += len([x for x in s if x%2!= 0])\n    return res\n",
        "test": "assert ",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in range(0, len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]).issubset(nestedlist[j]):\n                result.append(nestedlist[i])\n                print('common elements: ', result)\n",
        "test": "assert     common_in_nested_lists([]) ==     None",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert not check_integer('A')",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i.values():\n            return False\n        else:\n            return True\n",
        "test": "assert     empty_dit([{},{}]) == True, \"Empty list should be empty\"",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    # s = 0\n    # for i in nums:\n    #     s += i\n    # return s\n",
        "test": "assert     tuple_to_int((1, 2)) == 3",
        "num_ids": 333,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return_list = []\n    for lists in test_list:\n        for value in lists:\n            if type(value)!= float:\n                try:\n                    return_list.append(float(value))\n                except:\n                    pass\n    return return_list\n",
        "test": "assert     [1, 2, 3, 4] == list_to_float([\"1\", \"2\", \"3\", \"4\"])",
        "num_ids": 2594,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list(\"a b c\") == [\"a\", \"b\", \"c\"], \"First test case failed!\"",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return arr[0]\n    if arr[0] == arr[1]:\n        return search(arr[1:])\n    else:\n        return arr[0]\n",
        "test": "assert search([1,2,3,3,3,4,5,6,7,7,7,7,7,7,7,7]) == 7",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Create list to store results\n    max_product = 0\n    # Create a variable to store results\n    max_abs_product = 0\n    # Loop through the list of tuples\n    for tuple_num in list1:\n        # Get the maximum and minimum numbers from the tuple\n        maximum = max(tuple_num)\n        minimum = min(tuple_num)\n        # Compare each to the previous maximum and minimum\n        if maximum > max_product:\n            max_product = maximum\n        if minimum < max_abs_product:\n            max_abs_product = minimum\n    # Return the maximum and minimum product\n    return (max_product, max_abs_product)\n",
        "test": "assert     max_product_tuple([(1, 2), (2, 2), (3, 2), (1, 3), (-1, -2), (2, -2)]) == (3, -2), 'wrong result'",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    summation = 0\n    for num in range(1, limit + 1):\n        amicable = []\n        for num2 in range(num + 1, limit + 1):\n            if sum(amicable) == num and sum(amicable)!= num:\n                amicable_numbers.append(num)\n            if sum(amicable) == num2 and sum(amicable)!= num2:\n                amicable_numbers.append(num2)\n            if num == num2:\n                continue\n            if num2 in amicable:\n                amicable.remove(num2)\n            if num not in amicable:\n                continue\n            else:\n                amicable.remove(num)\n    for number in amicable_numbers:\n        summation += number\n    return summation\n",
        "test": "assert     amicable_numbers_sum(4) == 0",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a - b\n    m = cmath.polar(c)\n    radian = m[0]\n    degree = radian * 180 / cmath.pi\n    return degree\n",
        "test": "assert     angle_complex(0,0) == 0, \"angle_complex(0,0) == 0\"",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l = 0\n    r = 0\n    count = 0\n    zero = 0\n    one = 0\n    max_diff = 0\n    while(r<len(string)):\n        if(string[r]==\"0\"):\n            zero+=1\n        else:\n            one+=1\n        max_diff = max(max_diff,zero-one)\n        count +=1\n        if (count == len(string)-r):\n            break\n        r+=1\n    return max_diff\n",
        "test": "assert ",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    c = math.gcd(a,b)\n    return a+b-c\n",
        "test": "assert     sum(10,10)==10, \"Sum should be 10\"",
        "num_ids": 217,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(1, 3) == 3",
        "num_ids": 158,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str:\n        if len(word) >= n:\n            new_list.append(word)\n    return new_list\n",
        "test": "assert ",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return magic_square_helper(my_matrix, 0)\n",
        "test": "assert     magic_square_test([[4, 9, 2], ",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    max_value = -float('inf')\n    max_key = None\n    for i in nums:\n        d[i] += 1\n        if d[i] > max_value:\n            max_value = d[i]\n            max_key = i\n    return max_key\n",
        "test": "assert     max_occurrences([1,1,1,2,3,4,1,1,1,1,1,1,1,1]) == 1",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new = str1.lower()\n    i=0\n    j=len(new)-1\n    while i < j:\n        if new[i] not in 'aeiou':\n            i+=1\n        elif new[j] not in 'aeiou':\n            j-=1\n        else:\n            new = new[:i]+new[j]+new[i+1:j]+new[i]+new[j+1:]\n            i+=1\n            j-=1\n    return new\n",
        "test": "assert     reverse_vowels('ram') == 'ram'",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert     tup_string(()) == \"()\", 'tuples are not accepted'",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for i in nums:\n        if i < 0:\n            sum_neg += i\n    return sum_neg\n",
        "test": "assert sum_negativenum([-1, -2, -3, -4, -5]) == -15",
        "num_ids": 845,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 6*n**2 - 3*n + 2\n    return num\n",
        "test": "assert ",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    zeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n            count += 1\n        else:\n            count += 1\n    return zeroes/count\n",
        "test": "assert ",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # if n is 0 then it cannot be the sum of the powers of 2\n    if n == 0:\n        return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(0) == False, 'the input is 0, we should get False output'",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "test": "assert     circle_circumference(1) == math.pi * 2, f'Expected: {math.pi * 2}, got: {circle_circumference(1)}'",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #create a list to store the values\n    result = []\n    #iterate over the test_list\n    for i in test_list:\n        #iterate over the values in the list\n        for j in i:\n            #append the value to the result list\n            result.append(j)\n    #return the result\n    return result\n",
        "test": "assert ",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # swap\n    # remove\n    # insert\n    # undo\n    # \n    # insert 2,1\n    # insert 1,2\n    # insert 1,1\n    # swap\n    # undo\n    # insert 1,2\n    # undo\n    # insert 1,1\n    # swap\n    # undo\n    # insert 2,1\n    # undo\n    # insert 1,1\n    # undo\n    # insert 2,2\n    # undo\n    # \n    \n    n = len(nums)\n    if n <= 1:\n        return nums\n    \n    i = 0\n    while i < n:\n        idx = nums.index(max(nums[i:]), i)\n        if idx!= i:\n            nums[i], nums[idx] = nums[idx], nums[i]\n        i += 1\n    return nums\n",
        "test": "assert ",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    # for item in list1:\n    #     for item2 in list2:\n    #         for item3 in list3:\n    #             if item == item2 and item == item3:\n    #                 count += 1\n    # return count\n    for item1,item2,item3 in zip(list1,list2,list3):\n        if item1 == item2 and item1 == item3:\n            count += 1\n    return count\n",
        "test": "assert     count_samepair([1,2,1], [1,2,1], [1,2,1]) == 3, \"Wrong Answer\"",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List_Count = 0 \n    for i in Input: \n        if type(i) == list: \n            List_Count += 1 \n    return List_Count \n",
        "test": "assert     find_lists(('a',)) == 0, \"Expected 0 but got \" + str(find_lists(('a',)))",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    # arr = [-1, 2, 3, 4, -5]\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n",
        "test": "assert     max_Abs_Diff([-3, -6, -3, -3]) == 3, \"Wrong Answer\"",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # The polynomial is x^2 + 2ax + b. The discriminant is |b^2 - 4ax|.\n    # x^2 + 2ax + b = 0\n    # (-b +- sqrt(b^2 - 4ac)) / 2a\n    a = int(a)\n    b = int(b)\n    n = int(n)\n    if a == 0:\n        return None\n    else:\n        discriminant = b ** 2 - 4 * a * n\n        if discriminant < 0:\n            return None\n        else:\n            x1 = (-b - sqrt(discriminant)) / (2 * a)\n            x2 = (-b + sqrt(discriminant)) / (2 * a)\n            return (x1, x2)\n",
        "test": "assert     find_solution(1, 2, 5) == None",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n",
        "test": "assert     remove_elements([1,2,3,4], [5,5,5]) == [1,2,3,4]",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n",
        "test": "assert     sum_series(1) == 1 ",
        "num_ids": 152,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l) / 2\n    \nprint(area_polygon(3, 3)) # expected 3.0\nprint(area_polygon(5, 3)) # expected 6.0\nprint(area_polygon(7, 5)) # expected 25.0\nprint(area_polygon(2, 2)) # expected 4.0\nprint(area_polygon(6, 4)) # expected 16.0\nprint(area_polygon(3, 5)) # expected 12.5\nprint(area_polygon(5, 4)) # expected 22.0\nprint(area_polygon(3, 5)) # expected 12.5\n",
        "test": "assert     (area_polygon(7, 5) == 35), \"Wrong area!\"",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    l = []\n    l.append(1)\n    i = 2\n    while i < n:\n        if n%i == 0:\n            l.append(i)\n            if n//i == i:\n                l.append(n//i)\n            else:\n                l.append(n//i)\n        i += 1\n    if sum(l) == n:\n        return True\n    else:\n        return False\n    ",
        "test": "assert     div_sum(6) == False",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(0,len(str1)):\n        if (str1.upper()[i].isalpha()):\n            count = count+1\n    return count\n",
        "test": "assert     count_char_position(\"abbba\") == 5, \"incorrect function\"",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n    res = 0\n    while len(A) > 1:\n        if A[0] ^ A[1] == 0:\n            res += 1\n        A.pop(0)\n        A.pop(0)\n    return res\n",
        "test": "assert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0 ",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while True:\n        if (n & -n) == n:\n            return n\n        else:\n            n = n + 1\n",
        "test": "assert ",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n",
        "test": "assert     frequency([],2) == 0",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n",
        "test": "assert     sum_range_list(list1, 3, 5) == sum(list1[3:5]), \"Wrong answer!\"",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5)/2\n",
        "test": "assert     perimeter_pentagon(2) == 5.0",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    return s.count('std')\n",
        "test": "assert ",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        if test_tuple[0] == 'apple' and type(test_tuple[1]) == int and type(test_tuple[2]) == str and type(test_tuple[3]) == float and type(test_tuple[4]) == bool:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "test": "assert     check_type(('Hello',2.0,'World')) == False, 'Type is same'",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # your code here\n    start_idx, end_idx = 0, n-1\n    return True if (start_idx + end_idx) % 2!= 0 else False\n",
        "test": "assert is_majority([1,2,3], 3, 2) == False",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert     count_Set_Bits(12) == 2",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i%2!=0:\n            result += str[i]\n    return result\n",
        "test": "assert     odd_values_string('malayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalam') =='malayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalammalayalamma",
        "num_ids": 2847,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n",
        "test": "assert     min_of_three(1,2,3) == 1",
        "num_ids": 281,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    a = (r - l) + 1\n    for i in range(0, a):\n        if (n & (1 << i))!= 0:\n            return False\n    return True\n    \n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(10,0,10) == False",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    print(arr)\n    pos = n - 1\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[pos] = arr[pos], arr[i]\n            pos -= 1\n",
        "test": "assert ",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = str1.replace(\" \", char)\n    return result\n",
        "test": "assert     replace_blank('','') == ''",
        "num_ids": 149,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create an empty list\n    heap = []\n    # iterate over the list and append the items to the heap\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    # iterate over the list and pop the items from the heap\n    for i in range(len(list1) - n, len(list1)):\n        heapq.heappop(heap)\n    return heap\n",
        "test": "assert larg_nnum([7, 8, 9, 5, 6, 1], 0) == [], \"Should be []\"",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area, R + 2*pi*h, which is the surface area of a hollow cylinder.\n    return(pi*r*(r+2*pi*h))\n",
        "test": "assert ",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l**3)\n",
        "test": "assert     volume_cube(2) == 8",
        "num_ids": 66,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # n = int(input())\n    # num = n ^ 0b1111\n    # print(num)\n    # print(type(n))\n    # print(type(n & ~0b1111))\n    # print(n ^ 0b1111)\n",
        "test": "assert ",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for item in test_list:\n        d.setdefault(item, 0)\n        d[item] += 1\n    return d\n",
        "test": "assert     check_occurences([]) == {}",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!= \"\":\n                count += 1\n    return count\n",
        "test": "assert     number_of_substrings(\"\") == 0, \"Should be 0.\"",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    #create the first number that has to be <= 2*last_number\n    for i in range(1, m+1):\n        #add one to the current number in the sequence \n        current_number = i\n        #add the number of sequences of length i\n        for j in range(1,n+1):\n            #check if the current number is less than or equal to 2*last_number\n            if current_number <= 2*last_number:\n                #if it is, add the next number to the sequence and iterate\n                total += 1\n            current_number += 1\n    return total\n",
        "test": "assert     get_total_number_of_sequences(11,6) == 36",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:-1] = list2\n    return list1\n",
        "test": "assert     replace_list([], []) == [], 'Wrong'",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "test": "assert     count_charac('Alphabet') == len('Alphabet')",
        "num_ids": 205,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq=N\n    while True:\n        sq=int((sq+1)**0.5)\n        if sq*sq==N:\n            return sq\n",
        "test": "assert     next_Perfect_Square(1) == 2",
        "num_ids": 2180,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #method 1:\n    #bitonic_subsequence_sum = []\n    #bitonic_subsequence_sum.append(arr[0])\n",
        "test": "assert ",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return len(str)\n    else:\n        dp_table = [[0 for i in range(len(str))] for j in range(len(str))]\n        for i in range(len(str)):\n            dp_table[i][i] = 1\n        for i in range(len(str)-1):\n            dp_table[i][i+1] = 2 if str[i] == str[i+1] else 1\n        for j in range(2, len(str)):\n            for i in range(len(str)-j):\n                dp_table[i][i+j] = max(dp_table[i][i+j-1], dp_table[i+1][i+j])\n                if str[i] == str[i+j]:\n                    dp_table[i][i+j] = max(dp_table[i][i+j], dp_table[i+1][i+j-1]+2)\n        return dp_table[0][len(str)-1]\n",
        "test": "assert     lps(\"\") == 0, \"Empty String\"",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n    \nprint(harmonic_sum(3))\nprint(harmonic_sum(4))\nprint(harmonic_sum(5))\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 138,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    length_1 = len(array_nums1)\n    length_2 = len(array_nums2)\n    output = []\n    for i in range(length_1):\n        if array_nums1[i] in array_nums2:\n            output.append(array_nums1[i])\n    return output\n",
        "test": "assert     intersection_array([3,5,8,9],[2,3,6,7,8]) == []",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X([1,2,3,4,5],1) == 1, \"test failed\"",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if(list[i] == element):\n            list.insert(i,element)\n    return list\n",
        "test": "assert insert_element([], 0) == []",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    radius = 0\n    theta = 0\n    for i in range(len(numbers)):\n        n = numbers[i]\n        \n        if n == 0:\n            continue\n        radius = radius + 1 / n\n        theta = theta + 1 / n * (360 / 2 * 3.14) / 180 * (i + 1)\n    return radius, theta\n",
        "test": "assert     convert(complex(-1, 1)) == (-1, 1)",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x, int)])\n",
        "test": "assert     count_integer([]) == 0, 'Input is empty'",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return[tuple(i) for i in combinations_with_replacement(l, n)]\n",
        "test": "assert     combinations_colors([1,2,3,4,5], 4) == [[1, 2, 3, 4], [1, 2, 3, 4, 1], [1, 2, 3, 4, 2], [1, 2, 3, 4, 3], [1, 2, 3, 4, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 5, 2], [1, 2, 3, 4, 5, 3], [1, 2, 3, 4, 5, 4], [1, 2, 3, 4, 5, 5], [2, 3, 4, 1, 2], [2, 3, 4, 1, 3], [2, 3, 4, 1, 4], [2, 3, 4, 1, 5], [2, 3, 4, 2, 1], [2, 3, 4, 2, 2], [2, 3, 4, 2, 3], [2, 3, 4, 2, 4], [2, 3, 4, 2, 5], [2, 3, 4, 3, 1], [2, 3, 4, 3, 2], [2, 3, 4, 3, 3], [2, 3, 4, 3, 4], [2, 3, 4, 3, 5], [2, 3, 4, 4, 1], [2, 3, 4, 4, 2], [2, 3, 4, 4, 3], [2, 3, 4, 4, 4], [2, 3, 4, 4, 5], [2, 3, 4, 5, 1], [2, 3, 4, 5, 2], [2, 3, 4, 5, 3], [2, 3, 4, 5, 4], [2, 3, 4, 5, 5], [3, 4, 1, 2, 3], [3, 4, 1, 2, 4], [3, 4, 1, 2, 5], [3, 4, 1, 3, 2], [3, 4, 1, 3, 4], [3, 4, 1, 3, 5], [3, 4, 1, 4, 2], [3, 4, 1, 4, 3], [3, 4, 1, 4, 4], [3, 4, 1, 4, 5], [3, 4, 1, 5, 2], [3, 4, 1, 5, 3], [3, 4, 1, 5, 4], [3, 4, 2, 1, 2], [3, 4, 2, 1, 3], [3, 4, 2, 1, 4], [3, 4, 2, 1, 5], [3, 4, 2, 2, 1], [3, 4, 2, 2, 2], [3, 4, 2, 2, 3], [3, 4, 2, 2, 4], [3, 4, 2, 2, 5], [3, 4, 2, 3, 1], [3, 4, 2, 3, 2], [3, 4, 2, 3, 3], [3, 4, 2, 3, 4], [3, 4, 2, 3, 5], [3, 4, 2, 4, 1], [3, 4, 2, 4, 2], [3, 4, 2, 4, 3], [3, 4, 2, 4, 4], [3, 4, 2, 4, 5], [3, 4, 2, 5, 1], [3, 4, 2, 5, 2], [3, 4, 2, 5, 3], [3, 4, 2, 5, 4], [3, 4, 2, 5, 5], [3, 4, 3, 1, 2], [3, 4, 3, 1, 3], [3, 4, 3, 1, 4], [3, 4, 3, 1, 5], [3, 4, 3, 2, 1], [3, 4, 3, 2, 2], [3, 4, 3, 2, 3], [3, 4, 3, 2, 4], [3, 4, 3, 2, 5], [3, 4, 3, 3, 1], [3, 4, 3, 3, 2], [3, 4, 3, 3, 3], [3, 4, 3, 3, 4], [3, 4, 3, 3, 5], [3, 4, 3, 4, 1], [3, 4, 3, 4, 2], [3, 4, 3, 4, 3], [3, 4, 3, 4, 4], [3, 4, 3, 4, 5], [3, 4, 3, 5, 1], [3, 4, 3, 5, 2], [3, 4, 3, 5, 3], [3, 4, 3, 5, 4], [3, 4, 3, 5, 5], [3, 4, 4, 1, 2], [3, 4, 4, 1, 3], [3, 4, 4, 1, 4], [3, 4, 4, 1, 5], [3, 4, 4, 2, 1], [3, 4, 4, 2, 2], [3, 4, 4, 2, 3], [3, 4, 4, 2, 4], [3, 4, 4, 2, 5], [3, 4, 4, 3, 1], [3, 4, 4, 3, 2], [3, 4, 4, 3, 3], [3, 4, 4, 3, 4], [3, 4, 4, 3, 5], [3, 4, 4, 4, 1], [3, 4, 4, 4, 2], [3, 4, 4, 4, 3], [3, 4, 4, 4, 4], [3, 4, 4, 4, 5], [3, 4, 4, 5, 1], [3, 4, 4, 5, 2], [3, 4, 4, 5, 3], [3, 4, 4, 5, 4], [3, 4, 4, 5, 5], [3, 4, 5, 1, 2], [3, 4, 5, 1, 3], [3, 4, 5, 1, 4], [3, 4, 5, 1, 5], [3, 4, 5, 2, 1], [3, 4, 5, 2, 2], [3, 4, 5, 2, 3], [3, 4, 5, 2, 4], [3, 4, 5, 2, 5], [3, 4, 5, 3, 1], [3, 4, 5, 3, 2], [3, 4, 5, 3, 3], [3, 4, 5, 3, 4], [3, 4, 5, 3, 5], [3, 4, 5, 4, 1], [3, 4, 5, 4, 2], [3, 4, 5, 4, 3], [3, 4, 5, 4, 4], [3, 4, 5, 4, 5], [3, 5, 1, 2, 3], [3, 5, 1, 2, 4], [3, 5, 1, 2, 5], [3, 5, 1, 3, 2], [3, 5, 1, 3, 4], [3, 5, 1, 3, 5], [3, 5, 1, 4, 2], [3, 5, 1, 4, 3], [3, 5, 1, 4, 4], [3, 5, 1, 4, 5], [3, 5, 1, 5, 2], [3, 5, 1, 5, 3], [3, 5, 1, 5, 4], [3, 5, 2, 1, 2], [3, 5, 2, 1, 3], [3, 5, 2, 1, 4], [3, 5, 2, 1, 5], [3, 5, 2, 2, 1], [3, 5, 2, 2, 2], [3, 5, 2, 2, 3], [3, 5, 2, 2, 4], [3, 5, 2, 2, 5], [3, 5, 2, 3, 1], [3, 5, 2, 3, 2], [3, 5, ",
        "num_ids": 2293,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True]*(n + 1)\n    is_prime[0], is_prime[1] = False, False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n + 1, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n    ",
        "test": "assert     count_Primes_nums(1) == 0, \"Test Case 2 Failed\"",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     swap_numbers(7,5) == (5,7)",
        "num_ids": 139,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if (len(test_tup1) > len(test_tup2)):\n        max_tup = test_tup1\n        min_tup = test_tup2\n    else:\n        max_tup = test_tup2\n        min_tup = test_tup1\n    \n    for i in range(len(max_tup)):\n        if (max_tup[i] < min_tup[i]):\n            max_tup[i] = min_tup[i]\n    \n    return max_tup\n",
        "test": "assert     maximize_elements((1, 5), (10, 20)) == (10, 20)",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # if prime:\n    #     print(num)\n    #     return num\n    # else:\n    #     num += 1\n    #     if num % 2 == 0:\n    #         num += 1\n    #         return newman_prime(num)\n    #     else:\n    #         return newman_prime(num)\n    # return num\n    i = 2\n    primes = [2]\n    while i < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes[-1]\n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    tup_lst1 = []\n    tup_lst2 = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            try:\n                tup_lst1.append(test_tup1[i] / test_tup2[i])\n            except ZeroDivisionError:\n                tup_lst1.append(test_tup1[i])\n            else:\n                tup_lst2.append(test_tup2[i])\n    else:\n        print('The tuples should have equal number of elements')\n    return tup_lst1, tup_lst2\n",
        "test": "assert     division_elements((1, 2), (2, 0)) == (1.5, 0)",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, None)\n    else:\n        return (list1[:L], list1[L:])\n",
        "test": "assert     split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5])",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    a = []\n    for i in range(0, len(S), step):\n        a.append(S[i:i+step])\n    return a\n    \ndef list_split_all(S):\n    '''\n    Write a function that takes in a list and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    a = []\n    for i in range(0, len(S)):\n        a.append(S[i::])\n    return a\n",
        "test": "assert     list_split([0, 1, 2, 3, 4, 5, 6, 7, 8], 3) == [[0, 1, 2], [3, 4, 5], [6, 7, 8]]",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #function\n    return 6 * l**2\n",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 149,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1) if i % 2!= 0])\n",
        "test": "assert ",
        "num_ids": 116,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(n+1)/2\n",
        "test": "assert     find_star_num(1) == 1, \"1\"",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) is not str:\n        return('No valid input')\n    else:\n        ascii_code = ord(k)\n        return(ascii_code)\n",
        "test": "assert     ascii_value('a') == 97, 'The first character is a'",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    i = 0\n    sum = 0\n    while i < len(arr):\n        if i % 2 == 0:\n            sum += arr[i]\n        i += 1\n    return sum\n",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1 + 8 + 16",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return (n**5)\n    '''\n    Odd Sum\n    '''\n",
        "test": "assert even_Power_Sum(1) == 1",
        "num_ids": 140,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    #solution\n    return [item[1] for item in test_list]\n",
        "test": "assert     rear_extract([]) == []",
        "num_ids": 217,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert type(test_tup1) == tuple, 'First argument must be a tuple'\n    assert type(test_tup2) == tuple, 'Second argument must be a tuple'\n",
        "test": "assert ",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        #print(i)\n        if i%2==0:\n            sum += math.factorial(n)/math.factorial(n-i)\n    return sum\nprint(even_binomial_Coeff_Sum(10))\n",
        "test": "assert     even_binomial_Coeff_Sum( 1) == 0",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    volume = (math.pi)*(r**2)*h\n    return volume\n    \n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the volume.\n    '''\n    volume = (4/3)*(math.pi)*(r**3)\n    return volume\n    \n    \n    \ndef area_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the surface area.\n    '''\n    import math\n    area = (math.pi)*(r**2)*(h+r)\n    return area\n    \n    \n    \ndef area_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the surface area.\n    '''\n    area = (4*math.pi)*(r**2)\n    return area\n    \n    \n    \ndef area_parallelogram(b,h):\n    '''\n    Write a function that takes in the base and height of a parallelogram and returns the area.\n    '''\n    area = b*h\n    return area\n    \n    \n    \ndef volume_parallelogram(b,h):\n    '''\n    Write a function that takes in the base and height of a parallelogram and returns the volume.\n    '''\n    volume = b*h\n    return volume\n    \n    \n    \ndef circumference_triangle(b,h):\n    '''\n    Write a function that takes in the base and height of a triangle and returns the circumference.\n    '''\n    circumference = 2*(b+h)\n    return circumference\n    \n    \n    \ndef area_triangle(b,h):\n    '''\n    Write a function that takes in the base and height of a triangle and returns the area.\n    '''\n    area = (0.5)*(b*h)\n    return area\n    \n    \n    \ndef area_trapezoid(h1,h2,h3):\n    '''\n    Write a function that takes in the height of each side of a triangle and returns the area.\n    '''\n    area = h1+h2+h3\n    return area\n    \n    \n    \ndef volume_trapezoid(h1,h2,h3):\n    '''\n    Write a function that takes in the height of each side of a triangle and returns the volume.\n    '''\n    volume = h1+h2+h3\n    return volume\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    import re\n    word = word.lower()\n    word = re.sub(\"\\W\",\"\",word)\n    if word == word[::-1]:\n        return True\n    return False\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_pa",
        "test": "assert ",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result\n",
        "test": "assert dict_filter({1:10,2:20,3:30},10) == {1:10,2:20,3:30}",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            n+=1\n    return n\n",
        "test": "assert     count_first_elements((1, 5, 1, 3, 4, 1)) == 3",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    else:\n        return n * (1 + n) // 2\n    \n",
        "test": "assert ",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    \n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found:\n        return True, pos\n    else:\n        return False, -1\n",
        "test": "assert     sequential_search([1, 2, 3, 4, 5, 6], 1) == (True, 0)",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False\n",
        "test": "assert     all_unique([1]) == True",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    return [n1 - n2 for n1, n2 in zip(nums1, nums2)]\n",
        "test": "assert     sub_list([], [4,5,6]) == []",
        "num_ids": 266,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 1\n    number = str(n)\n    while count <= len(number):\n        print(number[count - 1])\n        count = count + 1\n    return number\n    \nprint(validate(153))\n",
        "test": "assert ",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return False\n    elif list[0] == element:\n        return True\n    else:\n        return check_element(list[1:],element)\n",
        "test": "assert     check_element([],0.0) == False",
        "num_ids": 219,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    if re.search(\"[ab]\", text):\n        return \"Looks like a bbbaa\"\n    elif re.search(\"[ab]{2}\", text):\n        return \"Looks like a baabbaa\"\n    elif re.search(\"[ab]{3}\", text):\n        return \"Looks like a bbbbbbbb\"\n    else:\n        return \"Not a bbbaa\"\n        \n",
        "test": "assert     text_match_two_three('abbbbb') == False",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # s = sum(a[0:n])\n    # l = 0\n    # r = n - 1\n    # while l <= r:\n    #     if s < k:\n    #         if s + a[l] < k:\n    #             s = s + a[l]\n    #         l = l + 1\n    #     else:\n    #         if s + a[r] < k:\n    #             s = s + a[r]\n    #         r = r - 1\n    # return s\n    s = 0\n    r = n - 1\n    l = 0\n    while l <= r:\n        if l == r:\n            s = max(s, a[l])\n            l = l + 1\n            continue\n        if s < k:\n            s = max(s, a[l] + a[r])\n            l = l + 1\n        else:\n            s = max(s, a[r] + a[l])\n            r = r - 1\n    return s\n",
        "test": "assert     max_sub_array_sum_repeated([3,2,1], 2, 2) == 5, \"Should be 5\"",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n",
        "test": "assert     square_Sum(0) == 0, \"square_Sum(0) is wrong\"",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #1\n    if len(list1) == 0:\n        return 0\n",
        "test": "assert ",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # This is a dynamic programming based solution\n    memo = {}\n    def _count_no_of_ways(n, k, current, current_color, memo):\n        if n == 0:\n            return 1\n        if n == 1:\n            return k\n        if n == 2:\n            if current_color == current:\n                return 1\n            else:\n                return k\n        if (current, current_color) in memo:\n            return memo[(current, current_color)]\n        memo[(current, current_color)] = 0\n        for j in range(k):\n            if current_color == j:\n                temp = _count_no_of_ways(n-1, k, current + 1, current_color, memo)\n            else:\n                temp = _count_no_of_ways(n-1, k, current + 1, j, memo)\n            memo[(current, current_color)] = temp\n        return memo[(current, current_color)]\n    return _count_no_of_ways(n, k, 0, 0, memo)\n",
        "test": "assert count_no_of_ways(6, 1) == 1",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert     find(1,1) == 1",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\n    \ndef factorial(num):\n    '''\n    Write a function to calculate factorial.\n    '''\n    if num == 0:\n        return 1\n    return num * factorial(num-1)\n    \ndef recursive_factorial(num):\n    '''\n    Write a function that calculate the factorial of a number using recursive function.\n    '''\n    if num == 0:\n        return 1\n    return num * recursive_factorial(num-1)\n    \ndef fibonacci(num):\n    '''\n    Write a function that calculate fibonacci number using recursion.\n    '''\n    if num == 0:\n        return 0\n    return num + fibonacci(num-1)\n    \ndef print_n_recursive(num):\n    '''\n    Write a function that print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_recursive(num-1)\n    print(num)\n    \ndef print_n(num):\n    '''\n    Write a function to print a list.\n    '''\n    if num == 0:\n        return\n    print(num)\n    print_n(num-1)\n    \ndef print_n_iterative(num):\n    '''\n    Write a function to print a list using iteration.\n    '''\n    if num == 0:\n        return\n    temp = num\n    while temp!= 0:\n        print(temp)\n        temp = temp - 1\n        \ndef print_n_recursive_2(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_recursive_2(num-1)\n    print(num)\n    \ndef print_n_2(num):\n    '''\n    Write a function to print a list.\n    '''\n    if num == 0:\n        return\n    print(num)\n    print_n_2(num-1)\n    \ndef print_n_iterative_2(num):\n    '''\n    Write a function to print a list using iteration.\n    '''\n    if num == 0:\n        return\n    temp = num\n    while temp!= 0:\n        print(temp)\n        temp = temp - 1\n        \ndef print_n_2_recursive_2(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_2_recursive_2(num-1)\n    print(num)\n    \ndef print_n_3(num):\n    '''\n    Write a function to print a list.\n    '''\n    if num == 0:\n        return\n    print(num)\n    print_n_3(num-1)\n    \ndef print_n_iterative_3(num):\n    '''\n    Write a function to print a list using iteration.\n    '''\n    if num == 0:\n        return\n    temp = num\n    while temp!= 0:\n        print(temp)\n        temp = temp - 1\n        \ndef print_n_3_recursive_2(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_3_recursive_2(num-1)\n    print(num)\n    \ndef print_n_4(num):\n    '''\n    Write a function to print a list.\n    '''\n    if num == 0:\n        return\n    print(num)\n    print_n_4(num-1)\n    \ndef print_n_iterative_4(num):\n    '''\n    Write a function to print a list using iteration.\n    '''\n    if num == 0:\n        return\n    temp = num\n    while temp!= 0:\n        print(temp)\n        temp = temp - 1\n        \ndef print_n_4_recursive_2(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_4_recursive_2(num-1)\n    print(num)\n    \ndef print_n_5(num):\n    '''\n    Write a function to print a list.\n    '''\n    if num == 0:\n        return\n    print(num)\n    print_n_5(num-1)\n    \ndef print_n_iterative_5(num):\n    '''\n    Write a function to print a list using iteration.\n    '''\n    if num == 0:\n        return\n    temp = num\n    while temp!= 0:\n        print(temp)\n        temp = temp - 1\n        \ndef print_n_5_recursive_2(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_2(num-1)\n    print(num)\n    \ndef print_n_5_recursive_3(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_3(num-1)\n    print(num)\n    \ndef print_n_5_recursive_4(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_4(num-1)\n    print(num)\n    \ndef print_n_5_recursive_5(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_5(num-1)\n    print(num)\n    \ndef print_n_5_recursive_6(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_6(num-1)\n    print(num)\n    \ndef print_n_5_recursive_7(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_7(num-1)\n    print(num)\n    \ndef print_n_5_recursive_8(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_8(num-1)\n    print(num)\n    \ndef print_n_5_recursive_9(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_9(num-1)\n    print(num)\n    \ndef print_n_5_recursive_10(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_10(num-1)\n    print(num)\n    \ndef print_n_5_recursive_11(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_11(num-1)\n    print(num)\n    \ndef print_n_5_recursive_12(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_12(num-1)\n    print(num)\n    \ndef print_n_5_recursive_13(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_13(num-1)\n    print(num)\n    \ndef print_",
        "test": "assert     otherside_rightangle(4,4) == 1",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "test": "assert     max_val([-2, 7]) == 7",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = 0\n    for i in range(1, number):\n        if number % i == 0:\n            divs += i\n    return divs\n",
        "test": "assert     sum_div(2) == 1",
        "num_ids": 183,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1:\n        return 0\n",
        "test": "assert     get_Inv_Count([5]) == 0, \"Array with only one element\"",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if type(element) == list:\n            for sub_elements in element:\n                flattened_list.append(sub_elements)\n        else:\n            flattened_list.append(element)\n    return flattened_list\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_amount = 0\n    for i in range(len(stdata)):\n        if stdata[i][2] > max_amount:\n            max_amount = stdata[i][2]\n    return max_amount\ndef max_aggregate1(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    amounts = defaultdict(int)\n    max_amount = 0\n    for i in range(len(stdata)):\n        amounts[stdata[i][0]] += stdata[i][2]\n        if amounts[stdata[i][0]] > max_amount:\n            max_amount = amounts[stdata[i][0]]\n    return max_amount\ndef max_aggregate2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    from collections import defaultdict\n    amounts = defaultdict(int)\n    max_amount = 0\n    for i in range(len(stdata)):\n        amounts[stdata[i][0]] += stdata[i][2]\n        if amounts[stdata[i][0]] > max_amount:\n            max_amount = amounts[stdata[i][0]]\n    return max_amount\n",
        "test": "assert max_aggregate([(2,3),(1,3),(2,3),(1,2),(2,3),(1,3),(2,3),(1,2),(2,3)])==2",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def get_sum(arr, n): \n        sum = 0\n        for i in range(n): \n            sum += arr[i]\n        return sum \n    \n    def get_sum_rev(arr, n): \n        sum = 0\n        for i in range(n): \n            sum += arr[i]\n        return sum \n    \n    def find_count(n): \n        if n == 0: \n            return 0\n        arr = [0] * (2*n) \n        arr[n] = 1\n        count = 0\n        for i in range(n, 2*n): \n            arr[i] = 1\n            sum = get_sum(arr, i)\n            if get_sum_rev(arr, i) == sum: \n                count += 1\n        return count \n    return find_count(n)\n",
        "test": "assert     count_binary_seq(0) == 0",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    else:\n        return 1 + max(map(lambda x: dict_depth(x), d.values()))",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    left, right = 0, len(arr)\n    while left <= right :\n        mid = (left+right)//2\n        if arr[mid] == index :\n            for i in range(rotations) :\n                if mid < len(arr) :\n                    mid += 1\n                else :\n                    mid = 0\n            return mid\n        elif arr[mid] < index :\n            left = mid + 1\n        else :\n            right = mid - 1\n    return -1\n",
        "test": "assert     find_Element([1,2,3,4,5,6,7],1,0,2) == 1,'return 1 is incorrect'",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word\n",
        "test": "assert ",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n",
        "test": "assert ",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l=len(tuplex)\n    for i in range(l):\n        if tuplex[i][1]==m and tuplex[i][2]==n:\n            return tuplex[i]\n        else:\n            continue\n    return ()\ndef sudoku(sudoku):\n    '''\n    Write a function to get a sudoku instance.\n    '''\n    #print(sudoku)\n    #print(sudoku[0])\n    #print(sudoku[1])\n    #print(sudoku[2])\n    #print(sudoku[3])\n    #print(sudoku[4])\n    #print(sudoku[5])\n    #print(sudoku[6])\n    #print(sudoku[7])\n    #print(sudoku[8])\n    #print(sudoku[9])\n    #print(sudoku[10])\n    #print(sudoku[11])\n    #print(sudoku[12])\n    #print(sudoku[13])\n    #print(sudoku[14])\n    #print(sudoku[15])\n    #print(sudoku[16])\n    #print(sudoku[17])\n    #print(sudoku[18])\n    #print(sudoku[19])\n    #print(sudoku[20])\n    #print(sudoku[21])\n    #print(sudoku[22])\n    #print(sudoku[23])\n    #print(sudoku[24])\n    #print(sudoku[25])\n    #print(sudoku[26])\n    #print(sudoku[27])\n    #print(sudoku[28])\n    #print(sudoku[29])\n    #print(sudoku[30])\n    #print(sudoku[31])\n    #print(sudoku[32])\n    #print(sudoku[33])\n    #print(sudoku[34])\n    #print(sudoku[35])\n    #print(sudoku[36])\n    #print(sudoku[37])\n    #print(sudoku[38])\n    #print(sudoku[39])\n    #print(sudoku[40])\n    #print(sudoku[41])\n    #print(sudoku[42])\n    #print(sudoku[43])\n    #print(sudoku[44])\n    #print(sudoku[45])\n    #print(sudoku[46])\n    #print(sudoku[47])\n    #print(sudoku[48])\n    #print(sudoku[49])\n    #print(sudoku[50])\n    #print(sudoku[51])\n    #print(sudoku[52])\n    #print(sudoku[53])\n    #print(sudoku[54])\n    #print(sudoku[55])\n    #print(sudoku[56])\n    #print(sudoku[57])\n    #print(sudoku[58])\n    #print(sudoku[59])\n    #print(sudoku[60])\n    #print(sudoku[61])\n    #print(sudoku[62])\n    #print(sudoku[63])\n    #print(sudoku[64])\n    #print(sudoku[65])\n    #print(sudoku[66])\n    #print(sudoku[67])\n    #print(sudoku[68])\n    #print(sudoku[69])\n    #print(sudoku[70])\n    #print(sudoku[71])\n    #print(sudoku[72])\n    #print(sudoku[73])\n    #print(sudoku[74])\n    #print(sudoku[75])\n    #print(sudoku[76])\n    #print(sudoku[77])\n    #print(sudoku[78])\n    #print(sudoku[79])\n    #print(sudoku[80])\n    #print(sudoku[81])\n    #print(sudoku[82])\n    #print(sudoku[83])\n    #print(sudoku[84])\n    #print(sudoku[85])\n    #print(sudoku[86])\n    #print(sudoku[87])\n    #print(sudoku[88])\n    #print(sudoku[89])\n    #print(sudoku[90])\n    #print(sudoku[91])\n    #print(sudoku[92])\n    #print(sudoku[93])\n    #print(sudoku[94])\n    #print(sudoku[95])\n    #print(sudoku[96])\n    #print(sudoku[97])\n    #print(sudoku[98])\n    #print(sudoku[99])\n    #print(sudoku[100])\n    #print(sudoku[101])\n    #print(sudoku[102])\n    #print(sudoku[103])\n    #print(sudoku[104])\n    #print(sudoku[105])\n    #print(sudoku[106])\n    #print(sudoku[107])\n    #print(sudoku[108])\n    #print(sudoku[109])\n    #print(sudoku[110])\n    #print(sudoku[111])\n    #print(sudoku[112])\n    #print(sudoku[113])\n    #print(sudoku[114])\n    #print(sudoku[115])\n    #print(sudoku[116])\n    #print(sudoku[117])\n    #print(sudoku[118])\n    #print(sudoku[119])\n    #print(sudoku[120])\n    #print(sudoku[121])\n    #print(sudoku[122])\n    #print(sudoku[123])\n    #print(sudoku[124])\n    #print(sudoku[125])\n    #print(sudoku[126])\n    #print(sudoku[127])\n    #print(sudoku[128])\n    #print(sudoku[129])\n    #print(sudoku[130])\n    #print(sudoku[131])\n    #print(sudoku[132])\n    #print(sudoku[133])\n    #print(sudoku[134])\n    #print(sudoku[135])\n    #print(sudoku[136])\n    #print(sudoku[137])\n    #print(sudoku[138])\n    #print(sudoku[139])\n    #print(sudoku[140])\n    #print(sudoku[141])\n    #print(sudoku[142])\n    #print(sudoku[143])\n    #print(sudoku[144])\n    #print(sudoku[145])\n    #print(sudoku[146])\n    #print(sudoku[147])\n    #print(sudoku[148])\n    #print(sudoku[149])\n    #print(sudoku[150])\n    #print(sudoku[151])\n    #print(sudoku[152])\n    #print(sudoku[153])\n    #print(sudoku[154])\n    #print(sudoku[155])\n    #print(sudoku[156])\n    #print(sudoku[157])\n    #print(sudoku[158])\n    #print(sudoku[159])\n    #print(sudoku[160])\n    #print(sudoku[161])\n    #print(sudoku[162])\n    #print(sudoku[163])\n    #print(sudoku[164])\n    #print(sudoku[165])\n    #print(sudoku[166])\n    #print(sudoku[167])\n    #print(sudoku[168])\n    #print(sudoku[169])\n    #print(sudoku[170])\n    #print(sudoku[171])\n    #print(sudoku[17",
        "test": "assert colon_tuplex((1,2,3),4,6) == ('1:2:3:4:5:6',)",
        "num_ids": 2138,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1 or not nums2 or N < 1:\n        return None\n",
        "test": "assert large_product([1,1,2,1], [1,1,2,1], 3) == [2, 1, 2]",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(10,20) == 20, \"Should be 20\"",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        lst.append(str1[i])\n    return tuple(lst)\n",
        "test": "assert     string_to_tuple(\"abcd\") == (\"a\", \"b\", \"c\", \"d\")",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Base case \n    if n == 0: \n        return 1\n    # Bitwise AND operation \n    return (n & (~n + 1)) \n",
        "test": "assert     set_left_most_unset_bit(11) == 1",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = 3.14\n    v = pi * r**2 * h\n    return v\nprint(volume_cone(1,2))\n",
        "test": "assert     volume_cone(0,2) == 0",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    i = 1\n    while i <= n:\n        power += 1\n        i = i << 1\n    return power\n",
        "test": "assert     highest_Power_of_2(0) == 0",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 2\n    elif n==1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert ",
        "num_ids": 175,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if len(list_) <= 0:\n        return list_\n    else:\n        return list_.insert(0, string.format(list_[0])) + add_string(list_[1:], string)\n",
        "test": "assert add_string([], \"my_format_string\") == \"my_format_string\", \"Should work for an empty list\"",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    converted_dic = {}\n    for index, value in enumerate(l1):\n        converted_dic[value] = l2[index]\n        converted_dic[value] = l3[index]\n    return converted_dic\n",
        "test": "assert     convert_list_dictionary([1,2,3], [\"a\", \"b\", \"c\"], [\"apple\", \"banana\", \"cherry\"]) == {\"1\":{\"a\": \"apple\", \"b\": \"banana\", \"c\": \"cherry\"}, \"2\":{\"a\": \"apple\", \"b\": \"banana\", \"c\": \"cherry\"}, \"3\":{\"a\": \"apple\", \"b\": \"banana\", \"c\": \"cherry\"}}",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # dynamic programming\n    if n == 0:\n        return 0\n    if n < 5:\n        return n\n    if n < 10:\n        return (n + 1) * (n + 2) // 2\n    \n    return max(get_max_sum (n//2), get_max_sum (n//3), get_max_sum (n//4), get_max_sum (n//5), n)\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list\n",
        "test": "assert     max_length_list([1,2,3]) == 3",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    temp = set(test_tup)\n    if len(temp) == len(test_tup):\n        return False\n    else:\n        return True\n",
        "test": "assert     check_distinct(('a', 'a', 'a', 'a'))    ==    True",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = []\n    for i in str1:\n        if i not in chars:\n            chars.append(i)\n        else:\n            continue\n    return chars[0]\n",
        "test": "assert     first_non_repeating_character('kkkkkkkk') == 'k'",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n        \n        \n        \n        \n",
        "test": "assert     check_char('abcdefghijk') == False",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a, b, c]\n    num_list.sort()\n    num_list = num_list[1:]\n    if len(num_list) % 2 == 0:\n        median = (num_list[int((len(num_list)) / 2) - 1] + num_list[int((len(num_list)) / 2)]) / 2\n    else:\n        median = num_list[int((len(num_list)) / 2)]\n    return median\n",
        "test": "assert     median_numbers(5,5,5) == 5, \"incorrect function output\"",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    lst = list(map(int, nums))\n    return sum([num % 10 for num in lst])\n",
        "test": "assert     sum_of_digits([0]) == 0",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n",
        "test": "assert     bitwise_xor((0, 0), (0, 0)) == (0, 0)",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    return len(set(tuple(row) for row in test_list))\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append((lst1[i] + lst2[i]))\n    return tuple(lst3)\n    \n",
        "test": "assert     add_nested_tuples((1,2,3),(('a','b','c'),(1,2,3)))     == (1,2,3,1,2,3)",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    return b\nprint(minimum(2,3))\n",
        "test": "assert     minimum(0,0) == 0",
        "num_ids": 150,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_tuplex((0,1,2),(0,3,4)) == False, \"Fail\"",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    return (x & 1)\n",
        "test": "assert     find_Parity(7) == True, 'Test 1 Failed'",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    r = 0\n    for i in range(0, len(n) - 1):\n        if n[i] > n[i+1]:\n            r = int(n[:i] + str(int(n[i])+1) + n[i+1:])\n            break\n    return r\n",
        "test": "assert ",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    heap = [(nums1[i] + nums2[j], i, j) for i, nums1_i in enumerate(nums1) for j, nums2_j in enumerate(nums2)]\n    heapq.heapify(heap)\n    res = []\n    for _ in range(k):\n        res.append((heapq.heappop(heap))[1:])\n    return res\n",
        "test": "assert     k_smallest_pairs([1,5,9,10],[6,7,8,9],[9,10]) == [[1,6],[5,9],[9,10]]",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # print(list1)\n    minimum = 0\n    # list1 = sorted(list1, key=lambda x: x[0])\n    # print(list1)\n    for i in range(len(list1)):\n        # print(list1[i])\n        for j in range(i+1, len(list1)):\n            # print(list1[j])\n            if list1[i][0] * list1[j][0] < minimum:\n                minimum = list1[i][0] * list1[j][0]\n            # print(i, j, minimum)\n    # print(minimum)\n    return minimum\n",
        "test": "assert min_product_tuple([(1, 2), (1, 3)]) == min_product_tuple([(1, 2), (2, 3)]) == min_product_tuple([(1, 2), (2, 2)]) == 0",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n    \ndef sum_val(listval):\n    '''\n    Write a function to find the sum of the values in a given heterogeneous list.\n    '''\n    sum_val = 0\n    for i in listval:\n        sum_val = sum_val + i\n    return sum_val\n    \ndef avg_val(listval):\n    '''\n    Write a function to find the average of the values in a given heterogeneous list.\n    '''\n    return sum_val(listval) / len(listval)\n",
        "test": "assert     min_val([2,5,3]) == 2",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert the string to lower case\n    word_lower = word.lower()\n    # replace words that are not capital letter with dash\n    word_lower = re.sub(r'[^a-z]', '-', word_lower)\n    # replace the first letter with upper case\n    word_upper = word_lower[0].upper() + word_lower[1:]\n    # return the result\n    return word_upper\n",
        "test": "assert     snake_to_camel('package_and_module_name') == 'packageAndModuleName'",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x : x % 2 == 0,l))\n",
        "test": "assert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7, 8]",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([1,2,3], 1) == 2",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([1,2,3,4,5],[3,4,5,6,7]) == True, 'Not Overlapping'",
        "num_ids": 258,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = 0\n    high = 0\n    low = 0\n",
        "test": "assert     max_Product([]) == None, \"None\"",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    final_list = []\n    for i in range(0, len(Input)):\n        final_list.append(Input[i][0])\n        final_list.append(Input[i][1])\n    final_list.sort()\n    return final_list[0]\n",
        "test": "assert     group_tuples(Input=[('a','b'),('c','d')]) == 'a'",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    return max_len\n",
        "test": "assert     Find_Max(list3) == 0",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    length = len(list1)\n    sum_of_numbers = sum(list1)\n    return round(sum_of_numbers / length)\n    \ndef round_and_sum_2(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(round(x / len(list1)) for x in list1)\n    \ndef reverse(list1):\n    '''\n    Write a function to reverse a given list of numbers.\n    '''\n    return list1[::-1]\n",
        "test": "assert round_and_sum([0,0,0,0,0]) == 0",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    print(\"Cube Sum of\",n,\"natural numbers:\",(n*(n+1)*(2*n+1))/6)\n    return (n*(n+1)*(2*n+1))/6",
        "test": "assert     cube_Sum(1) == 1",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # A = (1,2,3)\n    # A = (1,2,3,4,5)\n    # A = (\"a\",\"b\",\"c\")\n    # A = (\"a\",\"b\",\"c\",\"d\")\n    # A = (\"a\",\"b\",\"c\",\"d\",\"e\")\n    # print(\"A = \", A)\n    A = test_tup\n    return str(test_tup).replace(',', '')\n",
        "test": "assert     concatenate_tuple(('a')) == 'a', 'incorrect'",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result_tuple = ()\n    for i in test_tuple:\n        result_tuple += (i[-1],)\n    return result_tuple\n    \n    \ndef extract_middle(test_tuple):\n    '''\n    Write a function to extract only the middle index element of each string in the given tuple.\n    '''\n    result_tuple = ()\n    for i in test_tuple:\n        result_tuple += (i[(len(i)//2)-1],)\n    return result_tuple\n    \n    \ndef extract_front_and_middle(test_tuple):\n    '''\n    Write a function to extract front and middle index element of each string in the given tuple.\n    '''\n    result_tuple = ()\n    for i in test_tuple:\n        result_tuple += ((i[0],i[(len(i)//2)-1]),)\n    return result_tuple\n",
        "test": "assert     extract_rear(('vids','abc','xyz','abc','xyz','abc','xyz')) == ('vids','abc','xyz','abc','xyz','abc','xyz')",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return 1 if x == list1[0] else 0\n    if x == list1[0]:\n        return 1 + count_element_in_list(list1[1:],x)\n    if x!= list1[0]:\n        return count_element_in_list(list1[1:],x)\n",
        "test": "assert     count_element_in_list([[1, 2, 3], [1, 2], [1, 2, 3], [1, 2]], 4) == 0",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return nums[::2]\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    date = date[::-1]\n    new_date = '-'.join(date)\n    return new_date\n    \n    \ndef get_date_format(dt):\n    '''\n    Write a function to convert a date of dd-mm-yyyy format to yyyy-mm-dd format.\n    '''\n    date = dt.split('-')\n    date = date[::-1]\n    date = '-'.join(date)\n    return date\n    \n    \ndef get_time_format(time):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    hour = time.split(':')[0]\n    minute = time.split(':')[1]\n    second = time.split(':')[2]\n    return '{0}:{1}:{2}'.format(hour, minute, second)\n    \n    \ndef get_ampm_time_format(time):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hh:mm AM/PM format.\n    '''\n    if time == '12:00:00 AM':\n        return '00:00:00 AM'\n    elif time == '12:00:00 PM':\n        return '12:00:00 PM'\n    else:\n        hour = time.split(':')[0]\n        minute = time.split(':')[1]\n        second = time.split(':')[2]\n        return '{0}:{1}:{2} PM'.format(hour, minute, second)\n    \n    \ndef get_full_time_format(time):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    hour = time.split(':')[0]\n    minute = time.split(':')[1]\n    second = time.split(':')[2]\n    return '{0}:{1}:{2}'.format(hour, minute, second)\n    \n    \ndef get_ampm_full_time_format(time):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hh:mm AM/PM format.\n    '''\n    if time == '12:00:00 AM':\n        return '00:00:00 AM'\n    elif time == '12:00:00 PM':\n        return '12:00:00 PM'\n    else:\n        hour = time.split(':')[0]\n        minute = time.split(':')[1]\n        second = time.split(':')[2]\n        return '{0}:{1}:{2} PM'.format(hour, minute, second)\n    \n    \ndef get_time_in_range(time1, time2):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    if time1 == time2:\n        return '{0}:{1}:{2}'.format(time1.split(':')[0], time1.split(':')[1], time1.split(':')[2])\n    if time2 == '12:00:00 AM':\n        return '00:00:00'\n    elif time2 == '12:00:00 PM':\n        return '12:00:00'\n    else:\n        hour = time1.split(':')[0]\n        minute = time1.split(':')[1]\n        second = time1.split(':')[2]\n        hour2 = time2.split(':')[0]\n        minute2 = time2.split(':')[1]\n        second2 = time2.split(':')[2]\n        return '{0}:{1}:{2}'.format(hour, minute, second)\n        \n        \ndef get_ampm_time_in_range(time1, time2):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    if time1 == time2:\n        return '{0}:{1}:{2}'.format(time1.split(':')[0], time1.split(':')[1], time1.split(':')[2])\n    elif time2 == '12:00:00 AM':\n        return '00:00:00'\n    elif time2 == '12:00:00 PM':\n        return '12:00:00'\n    else:\n        hour = time1.split(':')[0]\n        minute = time1.split(':')[1]\n        second = time1.split(':')[2]\n        hour2 = time2.split(':')[0]\n        minute2 = time2.split(':')[1]\n        second2 = time2.split(':')[2]\n        return '{0}:{1}:{2}'.format(hour, minute, second)\n    \n    \ndef get_full_time_in_range(time1, time2):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    if time1 == time2:\n        return '{0}:{1}:{2}'.format(time1.split(':')[0], time1.split(':')[1], time1.split(':')[2])\n    elif time2 == '12:00:00 AM':\n        return '00:00:00 AM'\n    elif time2 == '12:00:00 PM':\n        return '12:00:00 PM'\n    else:\n        hour = time1.split(':')[0]\n        minute = time1.split(':')[1]\n        second = time1.split(':')[2]\n        hour2 = time2.split(':')[0]\n        minute2 = time2.split(':')[1]\n        second2 = time2.split(':')[2]\n        return '{0}:{1}:{2}'.format(hour, minute, second)\n    \n    \ndef get_ampm_full_time_in_range(time1, time2):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    if time1 == time2:\n        return '{0}:{1}:{2}'.format(time1.split(':')[0], time1.split(':')[1], time1.split(':')[2])\n    elif time2 == '12:00:00 AM':\n        return '00:00:00 AM'\n    elif time2 == '12:00:00 PM':\n        return '12:00:00 PM'\n    else:\n        hour = time1.split(':')[0]\n        minute = time1.split(':')[1]\n        second = time1.split(':')[2]\n        hour2 = time2.split(':')[0]\n        minute2 = time2.split(':')[1]\n        second2 = time2.split(':')[2]\n        return '{0}:{1}:{2}'.format(hour, minute, second)\n    \n    \ndef get_time_in_range_without_ampm(time):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    hour = time.split(':')[0]\n    minute = time.split(':')[1]\n    second = time.split(':')[2]\n    return '{0}:{1}:{2}'.format(hour, minute, second)\n    \n    \ndef get_ampm_time_in_range_without_ampm(time):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    hour = time.split(':')[0]\n    minute = time.split(':')[1]\n    second = time.split(':')[2]\n    return '{0}:{1}:{2}'.format(hour, minute, second",
        "test": "assert ",
        "num_ids": 1248,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap >= 1:\n        for i in range(gap,n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n",
        "test": "assert     shell_sort([1,2,3,4,5]) == None",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1[0] and tup2[0] for tup1, tup2 in zip(test_tup1, test_tup2))\n",
        "test": "assert ",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    h = 1 / (a**2 + b**2)\n    x = np.linspace(0, 1)\n    y = h * x**2 + c\n    x_directrix = x[y == y.max()]\n    y_directrix = y[y == y.max()]\n    return x_directrix, y_directrix\n",
        "test": "assert ",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = []\n    for item in list1:\n        if item in list2:\n            common_list.append(item)\n    if len(common_list) == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     common_element([1,2,3,4], [1,2,4,5]) == True",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #base1 = 3\n    #base2 = 4\n    #height = 4\n    #q1 = 1\n    #q2 = 2\n    #q3 = 3\n    \n    #area = base1*base2\n    #median = area/2\n    \n    area = base1*base2\n    q1 = area/2\n    q2 = area/2\n    \n    median = q2 + q2 - q1\n    \n    if height == 0:\n        return 0\n    elif height > 0:\n        if median > 0:\n            return median\n        elif median < 0:\n            return 0\n        else:\n            return median\n    else:\n        return 0\n        \n        \ndef median_trapezium_round(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #base1 = 3\n    #base2 = 4\n    #height = 4\n    #q1 = 1\n    #q2 = 2\n    #q3 = 3\n    \n    #area = base1*base2\n    #median = area/2\n    \n    area = base1*base2\n    \n    if height == 0:\n        return 0\n    elif height > 0:\n        return area/2\n    else:\n        return area/2\n    \ndef median_trapezium_fast(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #base1 = 3\n    #base2 = 4\n    #height = 4\n    #q1 = 1\n    #q2 = 2\n    #q3 = 3\n    \n    #area = base1*base2\n    #median = area/2\n    \n    area = base1*base2\n    \n    if height == 0:\n        return 0\n    elif height > 0:\n        if area > 0:\n            return area/2\n        elif area < 0:\n            return 0\n        else:\n            return area/2\n    else:\n        return 0\n    \ndef median_trapezium_fast_2(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #base1 = 3\n    #base2 = 4\n    #height = 4\n    #q1 = 1\n    #q2 = 2\n    #q3 = 3\n    \n    #area = base1*base2\n    #median = area/2\n    \n    area = base1*base2\n    \n    if height == 0:\n        return 0\n    elif height > 0:\n        if area > 0:\n            return area/2\n        elif area < 0:\n            return 0\n        else:\n            return area/2\n    else:\n        return 0\n",
        "test": "assert     median_trapezium(4,6,8) == 12, \"Incorrect\"",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([1,2,3], 2) == True",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'(a.*?b.*?\\ba.*?)', text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_one(\"ab\") == False, \"Wrong result for text_match_one('ab')\"",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "test": "assert     last_Digit(22) == 2",
        "num_ids": 204,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    a = []\n    for i in range(len(list1)):\n        a.append(-list1[i])\n    return a\n    ",
        "test": "assert     neg_nos([1,2,3,4]) == [-1,-2,-3,-4], 'Wrong output'",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result\n",
        "test": "assert     remove_odd('a') == ''",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for a,b in zip(test_list, reversed(test_list)):\n        if a == b:\n            count += 1\n    return count\n",
        "test": "assert     count_bidirectional([(1, 2), (2, 3), (3, 2), (2, 1), (1, 2), (2, 2)]) == 6",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "test": "assert     multiple_to_single([1]) == 1",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text.find(\"adverb\") == -1:\n        return (\"No Adverbs\")\n    else:\n        position = \"\"\n        index = 0\n        for word in text:\n            if word == \"and\":\n                position += \" and \"\n            elif word == \"every\":\n                position += \" every \"\n            elif word == \"if\":\n                position += \" if \"\n            elif word == \"or\":\n                position += \" or \"\n            elif word == \"as\":\n                position += \" as \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"a\":\n                position += \" a \"\n            elif word == \"an\":\n                position += \" an \"\n            elif word == \"for\":\n                position += \" for \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"before\":\n                position += \" before \"\n            elif word == \"after\":\n                position += \" after \"\n            elif word == \"during\":\n                position += \" during \"\n            elif word == \"as\":\n                position += \" as \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"over\":\n                position += \" over \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"round\":\n                position += \" round \"\n            elif word == \"off\":\n                position += \" off \"\n            elif word == \"down\":\n                position += \" down \"\n            elif word == \"off\":\n                position += \" off \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"only\":\n                position += \" only \"\n            elif word == \"whole\":\n                position += \" whole \"\n            elif word == \"before\":\n                position += \" before \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"as\":\n                position += \" as \"\n            elif word == \"than\":\n                position += \" than \"\n            elif word == \"if\":\n                position += \" if \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"at\":\n                position += \" at \"\n            elif word == \"further\":\n                position += \" further \"\n            elif word == \"during\":\n                position += \" during \"\n            elif word == \"and\":\n                position += \" and \"\n            elif word == \"or\":\n                position += \" or \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"after\":\n                position += \" after \"\n            elif word == \"as\":\n                position += \" as \"\n            elif word == \"down\":\n                position += \" down \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"during\":\n                position += \" during \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"as\":\n                position += \" as \"\n            elif word == \"round\":\n                position += \" round \"\n            elif word == \"after\":\n                position += \" after \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"to\":\n                position += \" to \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"every\":\n                position += \" every \"\n            elif word == \"after\":\n                position += \" after \"\n            elif word == \"so\":\n                position += \" so \"\n            elif word == \"when\":\n                position += \" when \"\n            elif word == \"if\":\n                position += \" if \"\n            elif word == \"on\":\n                position += \" on \"\n            elif word == \"at\":\n                position += \" at \"\n            elif word == \"for\":\n                position += \" for \"\n            elif word == \"and\":\n                position += \" and \"\n            elif word == \"for\":\n                position += \" for \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"the\":\n                position += \" the \"\n            elif word == \"begins\":\n                position += \" begins \"\n            elif word == \"to\":\n                position += \" to \"\n            elif word == \"to\":\n                position += \" to \"\n            elif word == \"at\":\n                position += \" at \"\n            elif word == \"about\":\n                position += \" about \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"and\":\n                position += \" and \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"a\":\n                position += \" a \"\n            elif word == \"an\":\n                position += \" an \"\n            elif word == \"for\":\n                position += \" for \"\n            elif word == \"the\":\n                position += \" the \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"before\":\n                position += \" before \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"at\":\n                position += \" at \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"the\":\n                position += \" the \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"after\":\n                position += \" after \"\n            elif word == \"every\":\n                position += \" every \"\n            elif word == \"round\":\n                position += \" round \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"as\":\n                position += \" as \"\n            elif word == \"or\":\n                position += \" or \"\n            elif word == \"than\":\n                position += \" than \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"for\":\n                position += \" for \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"the\":\n                position += \" the \"\n            elif word == \"at\":\n                position += \" at \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"at\":\n                position += \" at \"\n            elif word == \"every\":\n                position += \" every \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"the\":\n                position += \" the \"\n            elif word == \"before\":\n                position += \" before \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"a\":\n                position += \" a \"\n            elif word == \"and\":\n                position += \" and \"\n            elif word == \"that\":\n                position += \" that \"\n            elif word == \"the\":\n                position += \" the \"\n            elif word == \"at\":\n                position += \" at \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"before\":\n                position += \" before \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"and\":\n                position += \" and \"\n            elif word == \"before\":\n                position += \" before \"\n            elif word == \"for\":\n                position += \" for \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"the\":\n                position += \" the \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"it\":\n            ",
        "test": "assert     find_adverb_position('This is a test. A.B).') == (0, 4)",
        "num_ids": 4368,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    #return 6*(l**2)\n    return (l*6)\n",
        "test": "assert ",
        "num_ids": 50,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if nums:\n        total = 0\n        for i in range(0, len(nums)):\n            if nums[i] > 0:\n                total += 1\n        return total\n    else:\n        return 0\n",
        "test": "assert     positive_count([]) == 0, \"Should be 0\"",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    n = len(list1)\n    largest_neg = float('-inf')\n    for i in range(n):\n        if list1[i] < 0 and list1[i] > largest_neg:\n            largest_neg = list1[i]\n    return largest_neg\n",
        "test": "assert ",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for elem in test_list:\n        if len(elem) == K:\n            new_list.append(elem)\n    return new_list\n",
        "test": "assert     trim_tuple([(0, 1), (2, 3), (4, 5, 6)], 2) == [(0, 1), (2, 3)]",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n    return result\n",
        "test": "assert     index_multiplication((1,2), (3,4)) == (3, 8), \"error 1\"",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n",
        "test": "assert     count_Occurrence((1,2,3,4),(1,2,3,4)) == (1,1,1,1)",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    ans = []\n    for i in nums:\n        ans.append(i**3)\n    return ans\n",
        "test": "assert ",
        "num_ids": 113,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==0:\n        return 0\n    elif n%2==1:\n        return cal_sum(n-1)+(n*(n+1))\n    else:\n        return cal_sum(n-2)+(n*(n+1))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert ",
        "num_ids": 2108,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    for i in range(l):\n        str_list.append(str[i][0:10])\n    return str_list\n",
        "test": "assert     extract_string([ \"hi\", \"hello\", \"world\" ], 2) == [\"hi\", \"hello\"]",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ', '')\n",
        "test": "assert     remove_whitespaces('   a') == 'a'",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert    loss_amount(100,100) == 0",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(range(1,n,2))\nprint(sumofFactors(12))\n",
        "test": "assert sumofFactors(1) == 0",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = 'z'\n    regex = '.*z.*'\n    if re.search(regex, text)!= None:\n        print('Match Found:'+ word)\n    else:\n        print('Match Not Found')\n",
        "test": "assert     text_match_wordz('zebra zebra zebra zebra') == False",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_31 = {1:31,2:28,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}\n    if monthnum2 in month_31.keys():\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(1)    == True, '1'",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # for x in stringlist:\n    #     x = x[::-1]\n    for i, x in enumerate(stringlist):\n        stringlist[i] = x[::-1]\n    return stringlist\n",
        "test": "assert     reverse_string_list([\"A\"]) == [\"A\"]",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_item = None\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n            min_item = item\n    return min_item\n",
        "test": "assert Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [5, 7, 8]",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\nprint(rectangle_area(6,8))\n",
        "test": "assert     rectangle_area(2,2) == 4",
        "num_ids": 169,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n",
        "test": "assert     remove_uppercase('this is a test') == 'this is a test', 'incorrect'",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in lst:\n        res.append(i[0])\n    return res \n",
        "test": "assert Extract([[1,2,3], 4]) == 1",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr('lowercase') == 0",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combs = [[]]\n    for i in list1:\n        for j in range(len(combs)):\n            combs.append(combs[j]+[i])\n    return combs\n",
        "test": "assert     combinations_list([]) == [[]]",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    left_index = 0\n    right_index = 0\n    for i in range(1, len(arr)):\n        temp = max_product\n        max_product = max(max_product * arr[i], arr[i])\n        # The max product of the subarray with the current element is greater than the current max product.\n        # Then update the current max product and the left and right index.\n        if max_product > temp:\n            left_index = i\n            right_index = i\n        # If the max product is less than the current max product,\n        # then update the left and right index.\n        else:\n            left_index = max_product = max(max_product, arr[i])\n            right_index = i\n    return arr[left_index:right_index + 1]\n",
        "test": "assert ",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= n:\n            return False\n    return True\n",
        "test": "assert     check_value({ 'a': 1, 'b': 1, 'c': 2 }, 3) == False, 'incorrect'",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    res = {}\n    for key, value in dict1.items():\n        if value:\n            res[key] = value\n    return res\n",
        "test": "assert     drop_empty({}) == {}, \"No empty dictionary\"",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    curr_max, max_prod = arr[0], arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], curr_max * arr[i])\n        max_prod = max(curr_max, max_prod)\n        \n    return max_prod\n        \n        \nprint(max_product([3, 5, 6]))\nprint(max_product([-1, 0, 2, -3, -5]))\nprint(max_product([3, 0, 2, -3, -5]))\n",
        "test": "assert     max_product([1, 2, 3, 4]) == 24",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_list = []\n    for i in range(len(test_tup)):\n        if i+1 < len(test_tup):\n            sum_list.append(test_tup[i] + test_tup[i+1])\n    return sum_list\n",
        "test": "assert     add_pairwise((0,2,4,6,8,10,12,14,16,18)) == (2,4,6,8,10,12,14,16,18,20)",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod = prod * num\n    return prod % n\n",
        "test": "assert     find_remainder([1,2,3], 7) == 6, \"Wrong output\"",
        "num_ids": 266,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        if(i==len(l)-1):\n            break\n        elif(l[i]==l[i+1]-1):\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert     check_Consecutive([1, 2, 3, 4, 5]) == True, \"Not correct\"",
        "num_ids": 453,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for item in test_list1:\n        if item in test_list2:\n            intersection.append(item)\n    return tuple(intersection)\n",
        "test": "assert     tuple_intersection(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')) == ('a', 'b', 'c', 'd')",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n",
        "test": "assert     replace_char(\"\", \"s\",\"a\") == \"\"",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    a = Counter(dict1)\n    new_dict = sorted(a.items(), key = lambda x:x[1], reverse = True)\n    \n    return new_dict\n",
        "test": "assert     sort_counter({'a': 1, 'b': 1, 'c': 1, 'd': 2, 'e': 3, 'f': 3, 'g': 4, 'h': 5, 'i': 6, 'j': 7, 'k': 8, 'l': 9,'m': 10, 'n': 11, 'o': 12, 'p': 13, 'q': 14, 'r': 15,'s': 16, 't': 17, 'u': 18, 'v': 19, 'w': 20, 'x': 21, 'y': 22, 'z': 23, '0': 24, '1': 25, '2': 26, '3': 27, '4': 28, '5': 29, '6': 30, '7': 31, '8': 32, '9': 33, '.': 34}) == ['a', 'b', 'c', 'e', 'd', 'g', 'h', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z', '0', '3', '4', '5', '6', '7', '8', '9', '.']",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    min = 0\n    max = 0\n    for i in range(len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        if nums[i] < min:\n            min = nums[i]\n        sum += nums[i]\n    print(sum - max - min)\n",
        "test": "assert ",
        "num_ids": 118,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('RADHIKESH') == 'radhikesh', 'passed'",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[a-z]')\n    return pattern.sub('',str1)\n",
        "test": "assert     remove_lowercase('sdfasdf') == ''",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 223,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2!= 0:\n            odd.append(i)\n    return odd\n",
        "test": "assert     Split([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [1,3,5,7,9,11,13,15], 'Wrong result'",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n):\n        sum_of_n = 0\n        for i in range(n+1):\n            sum_of_n = sum_of_n + i**3\n        return sum_of_n\n    def difference(n) : \n        '''\n        Write a python function to find the difference between the sum of the cubes of the first n natural numbers and the sum of the first n natural numbers.\n        '''\n        def sum_of_cubes(n):\n            sum_of_n = 0\n            for i in range(n+1):\n                sum_of_n = sum_of_n + i**3\n            return sum_of_n\n        return abs(sum_of_cubes(n) - sum_of_cubes(n-1))\n        \n        \n        \n    print(difference(5))\n    ",
        "test": "assert     difference(3) == 2, \"Test Case 4: Expected 2, Actual \" + str(difference(3))",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N == 0 : \n        return 0\n    else : \n        return (N//2) + (find_Odd_Pair(A, N//2)) \n",
        "test": "assert     find_Odd_Pair([1,2,3,4],4) == 3, \"Wrong\"",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('Hello World') == 'hELLO wORLD'",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff_sum = 0\n    for i in range(10):\n        if n1 % 10 == n2 % 10:\n            diff_sum += 0\n        else:\n            diff_sum += abs(n1 % 10 - n2 % 10)\n        n1 = int(n1/10)\n        n2 = int(n2/10)\n    return diff_sum\n",
        "test": "assert     digit_distance_nums(12, 13) == 1",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub = 0\n    s = 0\n    for i in range(0, size):\n        s += a[i]\n        if s < 0:\n            s = 0\n        elif s > max_sub:\n            max_sub = s\n    return max_sub\n",
        "test": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 8) == 6",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = set(test_tup1) | set(test_tup2)\n    union_tup = sorted(union_tup)\n    return union_tup\n",
        "test": "assert     union_elements((1,4,8), (2,3,5)) == (1,2,3,4,5,8)",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len=0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if(len(lst[i])==len(lst[j])):\n                max_len=len(lst[i])\n                break\n            else:\n                if(len(lst[i])>max_len):\n                    max_len=len(lst[i])\n    return max_len\n",
        "test": "assert    Find_Max_Length([[1, 2], [1, 2], [1, 2]]) == 2",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == '':\n        return []\n    \n    values = []\n    for item in text.split('\\n'):\n        \n        if re.search('\"', item) and not re.search('\"', item[-1]) and not re.search('\\s[a-zA-Z]+', item):\n            value = item.split('\"')\n            value = value[-1].replace('\"','').replace('\\s','').replace('\\n','')\n            value = value.replace(' ', '')\n            values.append(value)\n    \n    return values\n    \nprint(extract_values(\"\"\"\n            \"What is the latest news about 'Coronavirus'?\"\n            \"There's a new coronavirus in India!\"\n            \"Wuhan is spreading the virus!\"\n            \"If you are reading this, it means that you are reading the latest news about coronavirus and it's spreading in India!\"\n            \"Coronavirus disease 2019 - Pandemic is getting deeper with the pandemic. Tell your friends, tell your associates, tell your neighbors, tell your friends and family, tell your neighbors and family, tell your friends and relatives, tell your relatives and friends, and so on.\"\n            \"It is always dangerous to go out without preparing beforehand. Take necessary precautions and get to work without delays or restrictions. Stay home! Don't travel alone. Eat Healthy.\"\n            \"\"\"\"\"\"))\n",
        "test": "assert     extract_values(\"this is a test, and here is another test\") == ['this is a test, and here is another test']",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] > arr[j]):\n                count = count +1\n    return count\n",
        "test": "assert count_Pairs([1,2,3,4,5],1) == 0",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert     split('abcd') == ['a', 'b', 'c', 'd']",
        "num_ids": 112,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    num = int(n)\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num = int(num / 10)\n    return sum\n    # n = int(input())\n    # print(sum_digits(n))\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 2204,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list_length = len(list1)\n    if list_length == 1:\n        return True\n    for i in range(list_length):\n        if i == list_length - 1:\n            return True\n        if list1[i] > list1[i + 1]:\n            return False\n",
        "test": "assert     issort_list([1, 2, 3]) == True",
        "num_ids": 2219,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    empty_list = []\n    for x in range(length):\n        empty_list.append({})\n    return empty_list\n",
        "test": "assert empty_list(0) == []",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        sublists = []\n        for j in range(len(list1[i])):\n            if(list1[i][j]!=''):\n                sublists.append(list1[i][j])\n        sublists.sort()\n        list1[i] = sublists\n    return list1\n",
        "test": "assert     sort_sublists([['ab','cd'],['ac','bd'],['cc','dd']]) == [['ab','cd'],['ac','bd'],['cc','dd']]",
        "num_ids": 753,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = sorted(nums)\n    result = []\n    for index, num in enumerate(nums):\n        if num not in result:\n            result.append(num)\n        else:\n            nums.pop(index)\n    return nums\n",
        "test": "assert     two_unique_nums([1,2,3,4,4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    unique_list = []\n    for item in list_data:\n        if item in unique_list:\n            continue\n        else:\n            unique_list.append(item)\n            product = product * item\n    return product\n",
        "test": "assert     unique_product([1,2,2]) == 2",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = (3.14159*r**2)\n    b = (2*3.14159*r*h)\n    c = (h*2*3.14159)\n    d = (2*3.14159*r*h)\n    e = (3.14159*r**2)\n    f = ((a + b + c + d) - e)\n    s = (f/2)\n    return s\n",
        "test": "assert surfacearea_cylinder(1,0) == 0, \"surfacearea_cylinder() is wrong\"",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # for i in range(len(A)):\n    #     if A[i:i+len(B)]==B:\n    #         return True\n    # return False\n    # print(A[i:i+len(B)])\n    # print(A.count(B))\n    # print(A)\n    # print(B)\n    # print(A.index(B))\n    # return A.index(B)\n    # print(A.find(B))\n    if A in B:\n        return True\n    else:\n        return False\n    \n    ",
        "test": "assert     is_Sub_Array([1, 2, 3], [4, 5, 6]) == False, \"Error, Output:\" + str(is_Sub_Array([1, 2, 3], [4, 5, 6]))",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n > 0:\n        n = n // 10\n    return n\n",
        "test": "assert last_Digit_Factorial(16) == 0",
        "num_ids": 214,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n",
        "test": "assert     interleave_lists([], [], []) == []",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n",
        "test": "assert     find_dissimilar(('a', 'b', 'c', 'd', 'e'), ('a', 'b', 'c', 'd', 'f')) == (False, 'd')",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    i = 0\n    while i < len(test_tuple):\n        if test_tuple[i][0] % 2!= 0:\n            if even_fnc == \"filter\":\n                test_tuple.pop(i)\n            else:\n                test_tuple.remove(test_tuple[i])\n        else:\n            i += 1\n    return test_tuple\n",
        "test": "assert ",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (s*s)/2 + (s*s) + (s*s)\n",
        "test": "assert     surface_Area(1,1) == 2.5",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n",
        "test": "assert my_dict({\"one\" : 1, \"two\" : 2}) == False, \"Error 3\"",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_numbers = [1]\n",
        "test": "assert ",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r\"ly|RB\"\n    regex2 = r\"RB\"\n    result = re.findall(regex, text)\n    result2 = re.findall(regex2, text)\n    print(result)\n    print(result2)\n    return result\n",
        "test": "assert     find_adverbs('I think the reading is my gift') == ['ly', 'ly', 'ly']",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    expensive_items = heapq.nlargest(n,items,key=lambda x:x[2])\n    return expensive_items\n",
        "test": "assert     expensive_items([{'name': 'item1', 'price': 3}, {'name': 'item2', 'price': 1}, {'name': 'item3', 'price': 10}, {'name': 'item4', 'price': 3}, {'name': 'item5', 'price': 30}], 5) == [{'name': 'item1', 'price': 3}, {'name': 'item2', 'price': 1}, {'name': 'item3', 'price': 10}, {'name': 'item4', 'price': 3}, {'name': 'item5', 'price': 30}]",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        return l[:n] + l[n+1:]\n",
        "test": "assert     split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30]]",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1,2,3]) == (1,2,3), \"List to tuple fails\"",
        "num_ids": 286,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    \n",
        "test": "assert     big_diff([-10, -10, 10, 10, -10, 10, 10, 10]) == 20, \"should return 20\"",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return a if a**0.5==int(a**0.5) else perfect_squares(a-b,b)\n",
        "test": "assert perfect_squares(1,1) == 1",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x**2+y**2)**0.5, x*y\n    \ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2+y**2)**0.5, 2*x*y\n    \ndef square(x):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return x*x\n",
        "test": "assert     polar_rect(1,0) == (1,0)",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length < 1:\n        return newList\n    else:\n        newList[0], newList[length - 1] = newList[length - 1], newList[0]\n        return newList\n",
        "test": "assert     swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 2223,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #initialize the variable to zero.\n    sum = 0\n    #sum the first k terms using binomial coefficients.\n    for i in range(k):\n        sum = sum + int((pow(2,i) * pow(2,n-i)))\n    #return the sum.\n    return sum\n",
        "test": "assert     binomial_Coeff(1,0) == 0, \"Error in binomial_Coeff\"",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #if ip == '0.0.0.0' or ip == '0.0.0.0':\n    #    return ip\n    a = ip.split('.')\n    #print(a)\n    b = int(a[0])\n    if b == 0:\n        return '0.'+a[1]+'.'+a[2]+'.'+a[3]\n    else:\n        return ip\ndef normalize_ip(ip):\n    '''\n    Write a function to normalize IPv4 addresses to 12 bits (for the range 0-255).\n    '''\n    #return ip\n    #a = ip.split('.')\n    #b = a[0]\n    #if b== '0':\n    #    a.insert(0,0)\n    #    a.pop()\n    #    c = '.'.join(a)\n    #    return c\n    #else:\n    #    return ip\n    ip = ip.split('.')\n    a = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        a = 127\n        ip[0] = str(a)\n    else:\n        a = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    if b > 255:\n        a = 255\n        ip[1] = str(a)\n    else:\n        a = b\n    if ip[2] == '0':\n        ip[2] = 1\n    b = int(ip[2])\n    if b > 255:\n        a = 255\n        ip[2] = str(a)\n    else:\n        a = b\n    c = a + (b<<8) + (c<<16) + (d<<24)\n    d = '.'.join(ip)\n    return d\ndef set_to_binary(ip):\n    '''\n    Write a function to turn an IP address into a string of its binary representation.\n    '''\n    ip = ip.split('.')\n    #return ''.join(map(lambda x:str(int(x)),ip))\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        c = 127\n        ip[0] = str(c)\n    else:\n        c = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    if b > 255:\n        d = 255\n        ip[1] = str(d)\n    else:\n        d = b\n    if ip[2] == '0':\n        ip[2] = 1\n    b = int(ip[2])\n    if b > 255:\n        e = 255\n        ip[2] = str(e)\n    else:\n        e = b\n    if ip[3] == '0':\n        ip[3] = 1\n    b = int(ip[3])\n    if b > 255:\n        f = 255\n        ip[3] = str(f)\n    else:\n        f = b\n    if ip[4] == '0':\n        ip[4] = 1\n    b = int(ip[4])\n    if b > 255:\n        g = 255\n        ip[4] = str(g)\n    else:\n        g = b\n    c = ip[0]+ip[1]+ip[2]+ip[3]+ip[4]\n    d = '.'.join(map(str,ip))\n    return '.'.join([str(int(x,2)),str(int(y,2)),str(int(z,2)),str(int(aa,2)),str(int(bb,2)),str(int(cc,2)),str(int(dd,2)),str(int(ee,2)),str(int(ff,2)),str(int(gg,2))])\ndef set_to_decimal(ip):\n    '''\n    Write a function to turn an IP address into a decimal integer.\n    '''\n    ip = ip.split('.')\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        a = 127\n        ip[0] = str(a)\n    else:\n        a = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    if b > 255:\n        d = 255\n        ip[1] = str(d)\n    else:\n        d = b\n    if ip[2] == '0':\n        ip[2] = 1\n    b = int(ip[2])\n    if b > 255:\n        e = 255\n        ip[2] = str(e)\n    else:\n        e = b\n    if ip[3] == '0':\n        ip[3] = 1\n    b = int(ip[3])\n    if b > 255:\n        f = 255\n        ip[3] = str(f)\n    else:\n        f = b\n    if ip[4] == '0':\n        ip[4] = 1\n    b = int(ip[4])\n    if b > 255:\n        g = 255\n        ip[4] = str(g)\n    else:\n        g = b\n    c = ip[0]+ip[1]+ip[2]+ip[3]+ip[4]\n    d = '.'.join(map(str,ip))\n    return c\ndef set_to_octal(ip):\n    '''\n    Write a function to turn an IP address into an octal integer.\n    '''\n    ip = ip.split('.')\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        a = 127\n        ip[0] = str(a)\n    else:\n        a = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    if b > 255:\n        d = 255\n        ip[1] = str(d)\n    else:\n        d = b\n    if ip[2] == '0':\n        ip[2] = 1\n    b = int(ip[2])\n    if b > 255:\n        e = 255\n        ip[2] = str(e)\n    else:\n        e = b\n    if ip[3] == '0':\n        ip[3] = 1\n    b = int(ip[3])\n    if b > 255:\n        f = 255\n        ip[3] = str(f)\n    else:\n        f = b\n    if ip[4] == '0':\n        ip[4] = 1\n    b = int(ip[4])\n    if b > 255:\n        g = 255\n        ip[4] = str(g)\n    else:\n        g = b\n    c = ip[0]+ip[1]+ip[2]+ip[3]+ip[4]\n    d = '.'.join(map(str,ip))\n    return c\ndef set_to_hex(ip):\n    '''\n    Write a function to turn an IP address into a hexadecimal integer.\n    '''\n    ip = ip.split('.')\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        a = 127\n        ip[0] = str(a)\n    else:\n        a = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    i",
        "test": "assert     removezero_ip('0.0.0.0.0') == '0.0.0.0'",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_no = 0\n    odd_no = 0\n    for i in range(len(list1)):\n        if i%2==0:\n            even_no = even_no + list1[i]\n        else:\n            odd_no = odd_no + list1[i]\n    return abs(even_no-odd_no)\n    \nprint(diff_even_odd([4, 5, 6, 7, 8, 9]))\n",
        "test": "assert     diff_even_odd([1,2,3,4]) == 2",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    p = n // 2\n    q = n // 2\n    str1 = str1[:p] + '0' + str1[p:]\n    str2 = str2[:q] + '1' + str2[q:]\n    if len(str1) == len(str2):\n        count = 0\n        for i in range(n):\n            if str1[i]!= str2[i]:\n                count += 1\n                str1 = str1[:i] + str2[i] + str1[i+1:]\n                str2 = str2[:i] + str1[i] + str2[i+1:]\n        return count\n    else:\n        return -1\n",
        "test": "assert     min_Swaps('100011', '101010') == 2",
        "num_ids": 1275,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count=0\n    for i in range(len(tuple_list)):\n        count=count+tuple_list[i]*4\n    return count\n",
        "test": "assert     tuple_size([]) == 0, 'tuple_size: incorrect return value'",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    if m == 0 or n == 0:\n        return -1\n    if m > n:\n        return find_kth(arr2, arr1, k)\n    if m == 1:\n        return arr2[0] if arr2[0] <= k else -1\n    if n == 1:\n        return arr1[0] if arr1[0] <= k else -1\n",
        "test": "assert ",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if not isinstance(number,int):\n        print(\"Invalid Input\")\n        return 0\n    res = 0\n    temp = number\n    while temp > 0:\n        res = res + (temp%10)**3\n        temp = temp // 10\n    if number == res:\n        return True\n    else:\n        return False\n",
        "test": "assert     armstrong_number(153) == True, 'failed'",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    result = 0\n    average = 0\n    for i in range(number):\n        result += i\n        average += 1/i\n    average = average / number\n    return result, average\n",
        "test": "assert     sum_average(3) == 3, f\"sum_average({3}) should return {3} (3)\"",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n    ",
        "test": "assert     is_Even(10) == True",
        "num_ids": 196,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict = {}\n    for c in str1:\n        if c in dict.keys():\n            dict[c] += 1\n        else:\n            dict[c] = 1\n    for k, v in dict.items():\n        if v > 1:\n            return k\n    return None\n",
        "test": "assert ",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(n):\n        if is_ludic(i):\n            ludics.append(i)\n    return ludics\n",
        "test": "assert ",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    return''.join(reversed(s.split()))\n    \n    \n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse the given string.\n    '''\n    \n    return s[::-1]\n",
        "test": "assert ",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 174,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n",
        "test": "assert     radian_degree(90) == math.pi/2",
        "num_ids": 192,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.finditer(pattern, text)\n",
        "test": "assert     find_literals(\"ACK: 0x01, SOH: 0x01, STX: 0x02, ETX: 0x02, EOT: 0x04, ENQ: 0x05, ACK: 0x06, NAK: 0x15, SYN: 0x16, ETB: 0x08, CAN: 0x18, EM: 0x19\", \"ACK\") == ['ACK: 0x01, SOH: 0x01, STX: 0x02, ETX: 0x02, EOT: 0x04, ENQ: 0x05, ACK: 0x06, NAK: 0x15, SYN: 0x16, ETB: 0x08, CAN: 0x18, EM: 0x19']",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return bell_Number(n-1) + n\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    a = list1.pop(L)\n    return list1\n",
        "test": "assert     remove_kth_element([1,2,3,4,5], 4) == [1,2,3,4]",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(max(test_list[i][N]))\n    return max_list\n",
        "test": "assert     max_of_nth([[1,2,3],",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return None\n    lst = sorted(lst)\n    merged = []\n    merged.append(lst[0])\n    merged.append(lst[1])\n    return merged\n",
        "test": "assert     merge([[1,2],[3,4]]) == [[1,2],[3,4]]",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    s = 0\n    for i in range(len(test_list)):\n        s += test_list[i]\n    return s\n",
        "test": "assert     cummulative_sum([1,2,3,4]) == 10, \"The result should be 10\"",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #create a new list for each tuple\n    new_list = []\n    #loop through each tuple of tuples\n    for i in nums:\n        #loop through each element of the tuple\n        for j in i:\n            #append the new value to the new list\n            new_list.append(j)\n    #get the sum of the new list and divide by the length of the new list\n    return sum(new_list)/len(new_list)\n",
        "test": "assert average_tuple([[1, 2, 3],",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(t1 % t2 for t1, t2 in zip(test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((1, 2), (1, 2)) == (0, 0)",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (steps == 0 or d == 0): \n        return 0\n    if (steps == 1 or d == 1): \n        return 1\n    if (d == 0 or d == 1): \n        return 2\n    n = 0\n    for j in range(1, d): \n        if (steps - j >= 0): \n            n = n + min(j, min_Jumps(steps - j, d)) \n    return n\n",
        "test": "assert     min_Jumps(2,3) == 1",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1) == len(nums2), \"Numbers in lists must be same length\"\n    return [[a/b] for a,b in zip(nums1,nums2)]\n",
        "test": "assert ",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    new_str = ''\n    num_str = []\n    \n    for i in range(0, len(test_str)):\n        if test_str[i].isnumeric():\n            num_str.append(test_str[i])\n    \n    while len(num_str) > 0:\n        for i in range(0, len(num_str)):\n            new_str += num_str[i]\n        \n        for i in range(0, len(num_str)):\n            test_str = test_str.replace(num_str[i], '', 1)\n    \n    return new_str\n    \n    \n",
        "test": "assert     move_num(\"\") == \"\", \"Test case failed\"",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max = 0\n    nums = []\n    for num in a:\n        if num not in nums:\n            nums.append(num)\n    for i in range(len(nums)):\n        if max < len(nums[i:]):\n            max = len(nums[i:])\n    return max\n",
        "test": "assert     largest_subset([2,2,2,2,2,2,2,2]) == 1",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    mid = n // 2\n    return arr[mid]\n    \n",
        "test": "assert     get_median([1,2,3,4,5], [4,5,6,7,8,9], 8) == 4",
        "num_ids": 187,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    # first, sort the list in ascending order\n    nums.sort()\n",
        "test": "assert ",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 624,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper('abc') == 'ABC'",
        "num_ids": 189,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n",
        "test": "assert ",
        "num_ids": 314,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = (math.sqrt(3)/4)*r*r*math.sin(math.pi/3)\n    print(area)\n    return area\n",
        "test": "assert triangle_area(0) == 0",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if end == start:\n        return array[start]\n    if end < start:\n        return -1\n    middle = int((end + start)/2)\n    if array[middle] == middle:\n        return find_First_Missing(array,start,middle-1)\n    elif array[middle] > middle:\n        return find_First_Missing(array,start,middle-1)\n    else:\n        return find_First_Missing(array,middle+1,end)\n",
        "test": "assert     find_First_Missing([1,2,5,7,8,10,14,16,18,20,21,22,23,24,25]) == 1",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.strip()\n    string = string.replace(' ', '%20')\n    return string\n",
        "test": "assert     replace_spaces(\"Hi John\") == \"Hi%20John\"",
        "num_ids": 253,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x%2==0]\n",
        "test": "assert     Split([1,2,3,4,5]) ==  [2,4]",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele[0] + 1)\n    sub.append(ele[0] - 1)\n    sub.append(ele[1] + 1)\n    sub.append(ele[1] - 1)\n    sub.append(ele[0] + 1)\n    sub.append(ele[0] - 1)\n    sub.append(ele[1] + 1)\n    sub.append(ele[1] - 1)\n    sub.append(ele[0] + 1)\n    sub.append(ele[0] - 1)\n    sub.append(ele[1] - 1)\n    sub.append(ele[1] + 1)\n    return sub\n",
        "test": "assert ",
        "num_ids": 2361,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "test": "assert     (replace_spaces('') == ''), 'empty string case'",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    n = len(num_list)\n    while j < n:\n        if num_list[j] == 0:\n            i += 1\n        j += 1\n    for i in range(i,n):\n        num_list[i], num_list[i-i] = num_list[i-i], num_list[i]\n    return num_list\n    \ndef move_zeros(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    n = len(num_list)\n    while j < n:\n        if num_list[j] == 0:\n            i += 1\n        j += 1\n    for i in range(i,n):\n        num_list[i], num_list[i-i] = num_list[i-i], num_list[i]\n    return num_list\n    \ndef find_peak(num_list):\n    '''\n    Write a python function to find the peak element in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    i = 0\n    j = len(num_list) - 1\n    while i < j:\n        mid = (i + j)//2\n        if num_list[mid] > num_list[mid + 1]:\n            j = mid\n        elif num_list[mid] < num_list[mid + 1]:\n            i = mid + 1\n        else:\n            return num_list[mid]\n    return num_list[i]\n    \ndef find_peak_binary(num_list):\n    '''\n    Write a python function to find the peak element in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    left = 0\n    right = len(num_list) - 1\n    while left < right:\n        mid = (left + right)//2\n        if num_list[mid] < num_list[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return num_list[left]\n    \ndef find_peak_hash(num_list):\n    '''\n    Write a python function to find the peak element in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    if len(num_list) == 1:\n        return num_list[0]\n    hash_map = {}\n    for i in num_list:\n        if i not in hash_map:\n            hash_map[i] = 1\n        else:\n            hash_map[i] += 1\n    for key,value in hash_map.items():\n        if value == max(hash_map.values()):\n            return key\n    return None\n    \ndef max_sub_array(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return 0\n    max_sub_sum = 0\n    for i in range(len(num_list)):\n        if max_sub_sum < num_list[i]:\n            max_sub_sum = num_list[i]\n        if max_sub_sum < 0:\n            max_sub_sum = 0\n    for i in range(len(num_list)):\n        if max_sub_sum > 0:\n            if max_sub_sum < num_list[i]:\n                max_sub_sum = num_list[i]\n        elif max_sub_sum < 0:\n            max_sub_sum = 0\n    return max_sub_sum\n    \ndef max_sub_array_rec(num_list,i,j):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if i == j:\n        return num_list[i]\n    mid = (i + j)//2\n    return max(max_sub_array_rec(num_list,i,mid),max_sub_array_rec(num_list,mid+1,j))\n    \ndef max_sub_array_const(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = num_list[0]\n    curr_max = num_list[0]\n    for i in range(1,len(num_list)):\n        curr_max = max(curr_max + num_list[i], num_list[i])\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = num_list[0]\n    curr_max = num_list[0]\n    for i in range(1,len(num_list)):\n        curr_max = max(curr_max + num_list[i], num_list[i])\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = num_list[0]\n    curr_max = num_list[0]\n    for i in range(1,len(num_list)):\n        curr_max = max(curr_max + num_list[i], num_list[i])\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up_sub_sum(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = 0\n    curr_max = 0\n    for i in range(len(num_list)):\n        curr_max = max(curr_max + num_list[i], num_list[i])\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up_sum(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = 0\n    curr_max = 0\n    for i in range(len(num_list)):\n        curr_max = curr_max + num_list[i]\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up_sum_trick(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = 0\n    curr_max = 0\n    for i in range(len(num_list)):\n        curr_max = curr_max + num_list[i]\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up_sum_trick_2(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # code here\n    #print(arr)\n    #print(n)\n    total = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            total = total + (arr[i] ^ arr[j])\n    return total\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     pair_xor_Sum([1,2,3,4,5,6,7,8]) == 22",
        "num_ids": 2291,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return sorted(iterable)\n",
        "test": "assert     heap_sort([5,4,3,2,1]) == [1,2,3,4,5]",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print('No Profit and No Loss')\n    else:\n        print('Profit and Loss')\n",
        "test": "assert     noprofit_noloss(100, -100) == True, \"This function should return True\"",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 0.5 * (1.7 + 0.6215 * t)\n    wci = c * (v ** 0.16)\n    return round(wci)\n",
        "test": "assert     wind_chill(7,40) == 10.81",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Your code goes here\n    i = 0\n    while(i < len(sample_names)):\n        if(sample_names[i].startswith(\"n\")):\n            sample_names.remove(sample_names[i])\n        else:\n            i += 1\n    return sum(len(x) for x in sample_names)\n",
        "test": "assert     sample_nam([]) == 0, 'No names given.'",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    return items\n",
        "test": "assert     remove_parenthesis('(hi)') == 'hi'",
        "num_ids": 205,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n == 1):\n        return 1\n    else:\n        return n * (n - 1) + 1\n",
        "test": "assert     is_nonagonal(2)     == 3",
        "num_ids": 241,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #regular expression\n    regex = r'\\b(z)\\b'\n    #this will match the word\n    matches = re.findall(regex, text)\n    return True if matches else False\n",
        "test": "assert     text_match_wordz_middle('z z z z z z') == True",
        "num_ids": 4317,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    result = [] \n    for i in range(k): \n        result.append(input[n - i - 1]) \n    for i in range(n-k): \n        result.append(input[i]) \n    return result \n",
        "test": "assert     reverse_Array_Upto_K([5,4,3,2,1], 0) == [5,4,3,2,1] ",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n",
        "test": "assert     add_dict_to_tuple((1,2,3), {}) == (1, 2, 3, {})",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False for _ in range(N)] for _ in range(N)]\n    avg = [[0 for _ in range(N)] for _ in range(N)]\n    max_avg = float('-inf')\n    q = deque()\n    \n    def bfs(x, y):\n        q.append((x, y))\n        visited[x][y] = True\n        while q:\n            \n            i, j = q.popleft()\n            avg[i][j] = avg[i][j] + cost[i][j]\n            \n            if i < N-1 and not visited[i+1][j] and not visited[i][j+1]:\n                q.append((i+1, j))\n                visited[i+1][j] = True\n            \n            if i > 0 and not visited[i-1][j]:\n                q.append((i-1, j))\n                visited[i-1][j] = True\n            \n            if j < N-1 and not visited[i][j+1]:\n                q.append((i, j+1))\n                visited[i][j+1] = True\n            \n            if j > 0 and not visited[i][j-1]:\n                q.append((i, j-1))\n                visited[i][j-1] = True\n        return\n",
        "test": "assert ",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students1 = {}\n    for name, value in students.items():\n        if h<=float(value[0]) and w<=float(value[1]):\n            students1[name] = value\n    return students1\n",
        "test": "assert     filter_data({'Haruna': (1.2, 0.3), 'Dinesh': (1.6, 0.3), 'Jiggy': (1.6, 0.3)}, 0.3, 0.5) == {}",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return -1\n    else:\n        i = 0\n        same_pairs = 0\n        while i < len(nums1):\n            if nums1[i] == nums2[i]:\n                same_pairs += 1\n            i += 1\n        return same_pairs\n",
        "test": "assert count_same_pair([1,1,1,1,2,2,2,2], [1,1,1,1,2,2,2,2,1]) == 4",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base)]) ** power\n    \nprint(power_base_sum(1, 2))\n",
        "test": "assert     power_base_sum(2, 3) == 8",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # your code here\n    string1 = text1.replace('\"','')\n    # print(string1)\n    string1 = string1.replace(\"'\",'')\n    return string1\n",
        "test": "assert ",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    n = len(test_tup)\n    return (test_tup[i] * (test_tup[i+1]) for i in range(n))\n",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (1, 4, 6, 12), \"Wrong result\"",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i + j for i, j in zip(lst1, lst2)]\n",
        "test": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(set(nums))\n    return nums\n",
        "test": "assert     consecutive_duplicates([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    try:\n        area=r*(r**2+h**2)/2\n    except:\n        area=None\n    return area\n",
        "test": "assert lateralsurface_cone(2,0) == 4",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',','.')\n    return text\n",
        "test": "assert     replace_specialchar(\"Hi, I am (3)\") == \"Hi:I am:3\"",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    a = 0\n    b = len(A) - 1\n    while a < b:\n        mid = (a + b) // 2\n        if A[mid] > x:\n            b = mid\n        else:\n            a = mid + 1\n    return a\n",
        "test": "assert ",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # input_list = input('Enter the list elements : ').split()\n    # input_list = list(map(int,input_list))\n    sum_of_products = 1\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                sum_of_products = sum_of_products * arr[i] * arr[j] * arr[k]\n                #print(arr[i],arr[j],arr[k])\n    return sum_of_products\n",
        "test": "assert ",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    while n > 0:\n        if n%2!= 0:\n            n = n ^ (1<<(len(bin(n))-1))\n        else:\n            n = n >> 1\n    return n\n",
        "test": "assert ",
        "num_ids": 234,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a):\n        return i\n    else:\n        return i-1\n",
        "test": "assert     left_insertion([2,3,4,6,8,9],7)==4",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # return True if string is starting with a vowel else return False \n    if re.match(regex,string) is None:\n        return False\n    else:\n        return True\n",
        "test": "assert ",
        "num_ids": 123,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True:\n        i = i + 1\n        n1 = (i*(i+1))//2\n        if n == n1:\n            break\n    return i-1\n",
        "test": "assert     find_Index(1) == 0, \"Test 3 Failed\"",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    if test_tup == () :\n        return {}\n    \n    keys = list(test_tup)\n    values = list(test_tup)\n    \n    dct = dict(zip(keys, values))\n    \n    return dct\n",
        "test": "assert     tuple_to_dict(('a', 'b', 'c', 'd') ) == {'a': 'b', 'b': 'c', 'c': 'd'}",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # declare a empty list\n    ret_val = []\n    # iterate through the list\n    for i in range(len(s)) :\n        if s[i] not in ret_val :\n            ret_val.append(s[i])\n        else :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('a') == True",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = ((6*side*side) * (1/4)) - (1/12)\n    return area\n",
        "test": "assert ",
        "num_ids": 187,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m <= 0:\n        return list\n    temp = list[0]\n    i = 0\n    while i < m-1:\n        list[i] = list[i+1]\n        i += 1\n    list[i+1] = temp\n    return list\n",
        "test": "assert     rotate_right([1, 2, 3, 4], -2) == [1, 2, 3, 4], \"should be 1 2 3 4\"",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # Your Code here\n    result = all(elem is not None for elem in test_tup)\n    return result\n",
        "test": "assert     check_none((1, None)) == False, 'Should be False'",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum) if all(x % y == 0 for y in map(int, list(str(x))))]\n",
        "test": "assert     divisible_by_digits(1, 10) ==  [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a<0 or a>360):\n        print(\"The angle should be between 0 and 360 degrees\")\n    else:\n        return math.pi*r*r*a/360\ndef triangle_area(h,a):\n    '''\n    Write a function to find area of a triangle. The function takes height and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a<0 or a>360):\n        print(\"The angle should be between 0 and 360 degrees\")\n    else:\n        return h*a/2\ndef rectangle_area(l,w,h):\n    '''\n    Write a function to find area of a rectangle. The function takes length, width and height as inputs. Function should return None if the length, width or height are less than 0.\n    '''\n    if(l<0 or w<0 or h<0):\n        print(\"The length, width and height should be greater than 0\")\n    else:\n        return w*h\ndef circle_area(r):\n    '''\n    Write a function to find area of a circle. The function takes radius as an input. Function should return None if the radius is 0.\n    '''\n    if(r<0):\n        print(\"The radius should be greater than 0\")\n    else:\n        return math.pi*r*r\ndef find_radius(l,w):\n    '''\n    Write a function to find radius of a rectangle. Function should return None if the length and width of the rectangle are 0.\n    '''\n    if(l==0 and w==0):\n        print(\"The length and width of the rectangle should not be 0\")\n    else:\n        return math.sqrt(l*l+w*w)\ndef find_volume(l,w,h):\n    '''\n    Write a function to find volume of a rectangular prism. Function should return None if the length, width and height of the rectangular prism are 0.\n    '''\n    if(l==0 or w==0 or h==0):\n        print(\"The length, width and height of the rectangular prism should not be 0\")\n    else:\n        return (l*w*h)\ndef find_circumference(r):\n    '''\n    Write a function to find circumference of a circle. Function should return None if the radius is 0.\n    '''\n    if(r<0):\n        print(\"The radius should not be negative\")\n    else:\n        return 2*math.pi*r\ndef find_area_triangle(a):\n    '''\n    Write a function to find area of a triangle. Function should return None if the angle is less than 90 degrees.\n    '''\n    if(a<90):\n        return a*(a-math.sin(math.radians(a)))\n    else:\n        return None\ndef find_area_rectangle(l,w):\n    '''\n    Write a function to find area of a rectangle. Function should return None if the length and width of the rectangle are 0.\n    '''\n    if(l==0 or w==0):\n        return None\n    else:\n        return l*w\ndef find_area_circle(r):\n    '''\n    Write a function to find area of a circle. Function should return None if the radius is 0.\n    '''\n    if(r<0):\n        return None\n    else:\n        return math.pi*r*r\ndef find_circle_area(r):\n    '''\n    Write a function to find area of a circle. Function should return None if the radius is 0.\n    '''\n    if(r<0):\n        return None\n    else:\n        return math.pi*r*r\ndef find_radius_triangle(a):\n    '''\n    Write a function to find radius of a triangle. Function should return None if the angle is less than 90 degrees.\n    '''\n    if(a<90):\n        return (a/math.sin(math.radians(a)))\n    else:\n        return None\ndef find_radius_rectangle(l,w):\n    '''\n    Write a function to find radius of a rectangle. Function should return None if the length and width of the rectangle are 0.\n    '''\n    if(l==0 or w==0):\n        return None\n    else:\n        return (l+w)/2\ndef find_radius_circle(r):\n    '''\n    Write a function to find radius of a circle. Function should return None if the radius is 0.\n    '''\n    if(r<0):\n        return None\n    else:\n        return r/2\ndef find_radius_circle_area(r):\n    '''\n    Write a function to find radius of a circle. Function should return None if the radius is 0.\n    '''\n    if(r<0):\n        return None\n    else:\n        return math.pi*r*r\ndef find_radius_square(a):\n    '''\n    Write a function to find radius of a square. Function should return None if the length and width of the square are 0.\n    '''\n    if(a==0):\n        return None\n    else:\n        return math.sqrt(2*a)\ndef find_radius_square_area(l):\n    '''\n    Write a function to find radius of a square. Function should return None if the length of the square is 0.\n    '''\n    if(l<0):\n        return None\n    else:\n        return math.sqrt(2*l)\ndef find_radius_square_area_multiple(l,w,h):\n    '''\n    Write a function to find radius of a square. Function should return None if the length, width and height of the square are 0.\n    '''\n    if(l==0 and w==0 and h==0):\n        return None\n    else:\n        return math.sqrt(2*(l*l+w*w+h*h))\ndef find_radius_square_area_multiple_small(a,b,c):\n    '''\n    Write a function to find radius of a square. Function should return None if the length, width and height of the square are 0.\n    '''\n    if(a==0 and b==0 and c==0):\n        return None\n    else:\n        return math.sqrt(2*(a*a+b*b+c*c))\ndef find_volume_square(a):\n    '''\n    Write a function to find volume of a square. Function should return None if the length and width of the square are 0.\n    '''\n    if(a==0):\n        return None\n    else:\n        return a*a\ndef find_volume_square_area(l,w):\n    '''\n    Write a function to find volume of a square. Function should return None if the length, width of the square are 0.\n    '''\n    if(l==0 or w==0):\n        return None\n    else:\n        return l*w\ndef find_volume_square_area_multiple(a,b,c):\n    '''\n    Write a function to find volume of a square. Function should return None if the length, width and height of the square are 0.\n    '''\n    if(a==0 and b==0 and c==0):\n        return None\n    else:\n        return a*b*c\ndef find_volume_rectangle(a,b):\n    '''\n    Write a function to find volume of a rectangle. Function should return None if the length and width of the rectangle are 0.\n    '''\n    if(a==0 or b==0):\n        return None\n    else:\n        return a*b\ndef find_volume_rectangle_area(l,w):\n    '''\n    Write a function to find volume of a rectangle. Function should return None if the length and width of the rectangle are 0.\n    '''\n    if(l==0 or w==0):\n        return None\n    else:\n        return l*w\ndef find_volume_rectangle_area_multiple(a,b,c,d):\n    '''\n    Write a function to find volume of a rectangle. Function should return None if the length, width and height of the rectangle are 0.\n    '''\n    if(a==0 and b==0 and c==0 and d==0):\n        return None\n    else:\n        return a*b*c*d\ndef find_volume_rectangle_area_multiple_small(",
        "test": "assert sector_area(1,360) == None",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X = X.lower()\n    Y = Y.lower()\n    Z = Z.lower()\n    m = len(X) + 1\n    n = len(Y) + 1\n    o = len(Z) + 1\n    dp = [[0] * n for i in range(m)]\n",
        "test": "assert ",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r'(?<=\\w)[a-z]', r' \\1', str1)\n    print(str2)\n",
        "test": "assert capital_words_spaces('this is a test') == 'this is a test', 'Should capital_words_spaces(\"this is a test\")'",
        "num_ids": 2009,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n",
        "test": "assert     sort_numeric_strings(['5', '7', '3', '1', '2', '4', '6', '8']) == ['1', '2', '3', '4', '5', '6', '7', '8'], \"Not correct\"",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "test": "assert ",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # going from index 0 to end\n    # i is the minimum index\n    # j is the maximum index\n    # lets check all elements to see if they are smaller than min\n    # if there is a True that means we can break because there is a violation \n    # so, the min heap must be violated\n    for j in range(i, len(arr)):\n        if arr[j] < arr[i]:\n            return False\n    # if we get here, then we are good\n    return True\n",
        "test": "assert     check_min_heap_helper([-2, -2, -2, 0, 1, 3, -4, 5, 6], 0) == False",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    if n == 4:\n        return 3\n    elif n == 5:\n        return 5\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-5) + 5\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Code here\n    test_list.sort()\n    return test_list[:K]\n",
        "test": "assert     min_k([(1,2), (2,3), (3,4), (4,5), (5,6), (7,8)], 0) == []",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if len(l1) > len(l2) and len(l1) > len(l3):\n        return l1\n    elif len(l2) > len(l1) and len(l2) > len(l3):\n        return l2\n    elif len(l3) > len(l1) and len(l3) > len(l2):\n        return l3\n    else:\n        return []\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert second_smallest([4,2,1,3]) == 2",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text.count('b') == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     text_match_zero_one('') == False",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    res = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            a = test_list[i]\n            b = test_list[j]\n            if (a == b[::-1]):\n                res += 1\n    return res\n",
        "test": "assert     count_reverse_pairs(['']) == 0",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for i in list1:\n        d[tuple(i)] += 1\n    return d\n",
        "test": "assert unique_sublists([[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]) == {(1,2,3,4,5): 3}",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal = False\n    if '.' in num:\n        decimal = True\n    return decimal\n",
        "test": "assert     is_decimal('-0.12') == True, 'the input string is a decimal number with a precision of 2'",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    temp = {}\n    for i in arr:\n        if i not in temp:\n            temp[i] = 1\n        else:\n            return False\n    return True\n    \ndef left_rotation(arr, n):\n    '''\n    Write a python function to rotate an array by n elements to the left.\n    '''\n    temp = arr[:n]\n    arr = arr[n:]\n    arr.extend(temp)\n    return arr\n    \ndef invert_bits(num):\n    '''\n    Write a python function that takes an integer number num and \n    invert it's binary number.\n    '''\n    inv = 0\n    for i in range(len(bin(num))-2):\n        inv += (num>>i)&1\n    return inv\n    \ndef insertionSort(arr):\n    '''\n    Write a python function to sort an array of strings based on the alphabetical order of the words.\n    '''\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\n    \ndef reverse_list(arr):\n    '''\n    Write a python function to reverse the order of a list of numbers and strings.\n    '''\n    arr.reverse()\n    return arr\n    \ndef count_odd_even(arr):\n    '''\n    Write a python function to find out whether a number is odd or even.\n    '''\n    odd = 0\n    even = 0\n    for i in arr:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n    \ndef palindrome_check(str):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    l = len(str)\n    start = 0\n    end = l-1\n    while start <= end:\n        if str[start]!= str[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n    \ndef swap_list(arr, index_1, index_2):\n    '''\n    Write a python function to swap the content of two nodes in a linked list.\n    '''\n    temp = arr[index_1]\n    arr[index_1] = arr[index_2]\n    arr[index_2] = temp\n    return arr\n    \ndef reverse_sublist(arr, start, end):\n    '''\n    Write a python function to reverse the content of a sublist.\n    '''\n    arr = arr[:start] + arr[start+1:end+1][::-1] + arr[end+1:]\n    return arr\n    \ndef partition(arr, low, high):\n    '''\n    Write a python function to partition a given array in such a way that all even numbers are on the left and all odd numbers are on the right.\n    '''\n    pivot = arr[low]\n    i = low + 1\n    j = high\n    while i < j:\n        if arr[i] < pivot:\n            arr = swap_list(arr, i, j)\n            i += 1\n        elif arr[i] > pivot:\n            j -= 1\n        else:\n            i += 1\n    return arr\n    \ndef maximum_of_two(arr, n):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if arr[n] > arr[n-1]:\n        return arr[n]\n    else:\n        return arr[n-1]\n    \ndef rotate_array_by_one(arr):\n    '''\n    Write a python function to rotate an array by one element.\n    '''\n    arr.append(arr[0])\n    del arr[0]\n    return arr\n    \ndef string_splosion(str):\n    '''\n    Write a python function to find out the string of a given string.\n    '''\n    l = len(str)\n    output = ''\n    for i in range(l):\n        output += str[:i+1]\n    return output\n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    for i in range(len(str)//2):\n        if str[i]!= str[len(str)-1-i]:\n            return False\n    return True\n    \ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove all duplicates from an array.\n    '''\n    temp = []\n    for i in range(len(arr)):\n        if arr[i] not in temp:\n            temp.append(arr[i])\n    return temp\n    \ndef check_anagram(str_1, str_2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if len(str_1)!= len(str_2):\n        return False\n    temp = sorted(str_1)\n    temp2 = sorted(str_2)\n    if temp!= temp2:\n        return False\n    else:\n        return True\n    \ndef one_away(str_1, str_2):\n    '''\n    Write a python function to check if two given strings are one edit or not.\n    '''\n    if len(str_1) == len(str_2):\n        return False\n    if abs(len(str_1)-len(str_2)) == 1:\n        count = 0\n        for i in range(len(str_1)):\n            if str_1[i]!= str_2[i]:\n                count += 1\n                if count > 1:\n                    return False\n    else:\n        return False\n    return True\n    \ndef non_repeating_characters(str):\n    '''\n    Write a python function to find all the non-repeating characters in a string.\n    '''\n    d = {}\n    for i in str:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    arr = []\n    for i in d:\n        if d[i] == 1:\n            arr.append(i)\n    return arr\n    \ndef minimum_swaps(arr):\n    '''\n    Write a python function to find the minimum number of swaps required to sort an array.\n    '''\n    output = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            output += 1\n    return output\n    \ndef print_n_away(str_1, n):\n    '''\n    Write a python function to print first n-away characters of a given string.\n    '''\n    temp = str_1[:n]\n    print(temp)\n    \ndef search_rotated_array(arr, key):\n    '''\n    Write a python function to search an element in a rotated array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == key:\n            return mid\n        elif arr[left] <= arr[mid]:\n            if arr[left] <= key < arr[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if arr[mid] < key <= arr[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return -1\n    \ndef get_reversed_array(arr):\n    '''\n    Write a python function to reverse an array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        temp = arr[left]\n        arr[left] = arr[right]\n        arr[right] = temp\n        left += 1\n        right -= 1\n    return arr\n    \ndef merge_sort(arr):\n    '''\n    Write a python function to sort an array using merge sort.\n    '''\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])",
        "test": "assert     unique_Element([]) == True, \"The input list is empty\"",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3%3) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(1) == False, \"wrong\"",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min = None\n    arr.sort()\n    for i in range(n-1):\n        if min == None or abs(arr[i] - arr[i+1]) < min:\n            min = abs(arr[i] - arr[i+1])\n    return min\n",
        "test": "assert     find_min_diff([1,2,3,4,5],4)==1, \"Wrong Answer\"",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if(i.isdigit()):\n            count+=1\n    return count\n",
        "test": "assert     number_ctr('3.14') == 3, 'Number of digits should be 3.'",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    polite_numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100}\n    if n == 0:\n        return 0\n    elif n in polite_numbers:\n        return n\n    else:\n        return is_polite(n - 1)\n",
        "test": "assert     is_polite(0) == False, 'zero is not polite'",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return l2\n",
        "test": "assert     pair_wise([1,2,3,4,5]) == [[1,2],[2,3],[3,4],[4,5]]",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    if len(arr)<2:\n        return count\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j]==sum:\n                count = count+1\n    return count\n",
        "test": "assert     get_pairs_count([10, 1, 12, 13, 14, 1, 2, 1], 15) == 4",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n",
        "test": "assert     Diff([],[]) == [[]], \"Diff should return an empty list if both lists are empty\"",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i ** 4 for i in range(n,0,-2)])\nprint(odd_num_sum(6)) # sum of 5,6,7,8,9,10 is 385\nprint(odd_num_sum(7)) # sum of 5,6,7,8,9,10,11 is 585\nprint(odd_num_sum(8)) # sum of 5,6,7,8,9,10,11,12 is 610\nprint(odd_num_sum(9)) # sum of 5,6,7,8,9,10,11,12,13 is 639\nprint(odd_num_sum(10)) # sum of 5,6,7,8,9,10,11,12,13,14 is 680\nprint(odd_num_sum(11)) # sum of 5,6,7,8,9,10,11,12,13,14,15 is 745\nprint(odd_num_sum(12)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16 is 810\nprint(odd_num_sum(13)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17 is 875\nprint(odd_num_sum(14)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18 is 930\nprint(odd_num_sum(15)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 is 1015\nprint(odd_num_sum(16)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 is 1085\nprint(odd_num_sum(17)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21 is 1145\nprint(odd_num_sum(18)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 is 1210\nprint(odd_num_sum(19)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 is 1305\nprint(odd_num_sum(20)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24 is 1405\nprint(odd_num_sum(21)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25 is 1545\nprint(odd_num_sum(22)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 is 1705\nprint(odd_num_sum(23)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27 is 1865\nprint(odd_num_sum(24)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 is 2035\nprint(odd_num_sum(25)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29 is 2305\nprint(odd_num_sum(26)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30 is 2465\nprint(odd_num_sum(27)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31 is 2635\nprint(odd_num_sum(28)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32 is 2805\nprint(odd_num_sum(29)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33 is 2965\nprint(odd_num_sum(30)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34 is 3035\nprint(odd_num_sum(31)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35 is 3105\nprint(odd_num_sum(32)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36 is 3165\nprint(odd_num_sum(33)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37 is 3235\nprint(odd_num_sum(34)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38 is 3215\nprint(odd_num_sum(35)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39 is 3285\nprint(odd_num_sum(36)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40 is 3345\nprint(odd_num_sum(37)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41 is 3405\nprint(odd_num_sum(38)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42 is 3465\nprint(odd_num_sum(39)) ",
        "test": "assert     odd_num_sum(10) == 92, \"Failed\"",
        "num_ids": 2301,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    def is_balanced(s):\n        '''\n        Function to check if the given expression is balanced or not.\n        '''\n        # Create a stack and push all opening brackets to it.\n        s = list(s)\n        stack = deque()\n        for i in s:\n            if i == '(' or i == '[':\n                stack.append(i)\n            else:\n                if stack == deque():\n                    return False\n                else:\n                    stack.pop()\n        # If there is any opening brackets left in the stack, return False\n        if stack:\n            return False\n        else:\n            return True\n    if is_balanced(exp):\n        return True\n    else:\n        return False\n",
        "test": "assert ",
        "num_ids": 2377,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == None:\n        return None\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            return test_str[i:]\n    return test_str\n",
        "test": "assert     remove_length('abcabc', 0) == 'abcabc'",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    import re\n    pattern=pattern\n    text=text\n    result=re.finditer(pattern,text)\n    for i in result:\n        # print(i.start(),i.end(),i.span())\n        print(i.start(),i.end(),i.span())\n",
        "test": "assert     occurance_substring('ababab','ab') == None",
        "num_ids": 1779,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     odd_position([4, 5, 6]) is False",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n",
        "test": "assert ",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = len(arr)\n    sum_n = 0\n    for i in range(x):\n        for j in range(i+1,x):\n            if arr[i] == arr[j]:\n                break\n        else:\n            sum_n += arr[i]\n    return sum_n\n        ",
        "test": "assert     find_sum([1,2,3,4,5]) == 15",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    result = []\n    for k, g in groupby(list1):\n        result.append(list(g))\n    return result\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 2265,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {tuple(list1):len(list1)}\n",
        "test": "assert     unique_sublists([]) == {(): 0}",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ans = []\n    for i in combinations(test_list, 3):\n        ans.append(i)\n    print(ans)\n",
        "test": "assert ",
        "num_ids": 133,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n):\n        if n % i == 0:\n            count += 1\n    return count\n    \ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is a prime number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n < 2: \n        return False\n    else: \n        for i in range(2, int(math.sqrt(n)) + 1): \n            if n % i == 0: \n                return False\n        else: \n            return True\n    \ndef is_a_palindrome(s) : \n    '''\n    Write a python function to check whether a given string is a palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    s = s.lower()\n    s = s.replace(' ','')\n    l = len(s)\n    if l == 0 or l == 1:\n        return True\n    else:\n        if s[0]!= s[-1]:\n            return False\n        else:\n            return is_a_palindrome(s[1:-1])\n        \ndef is_square(n) : \n    '''\n    Write a python function to check whether the number is a perfect square or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    r = math.sqrt(n)\n    if r*r == n:\n        return True\n    return False\n    \ndef sum_of_squares(n) : \n    '''\n    Write a python function to find the sum of the squares of all the numbers from 1 to n.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i\n    return sum\n",
        "test": "assert     count_divisors(4) == 2",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            total += arr[i]\n    return total\n",
        "test": "assert     odd_length_sum([1, 2, 3, 4, 5]) == 6",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if delta == 0:\n        h = 0\n    elif min_value == max_value:\n        h = 0.5\n    elif max_value == r:\n        h = 60 * ((g-b)/delta % 6)\n    elif max_value == g:\n        h = 60 * ((b-r)/delta + 2)\n    elif max_value == b:\n        h = 60 * ((r-g)/delta + 4)\n    return round(h, 3), round((1/3)*(max_value-min_value), 3), round((2/3)*(max_value-min_value), 3)\n",
        "test": "assert ",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_even = 0\n    product_odd = 0\n    for i in range(len(list1)):\n        if i%2 == 0:\n            product_even += list1[i]\n        else:\n            product_odd += list1[i]\n    return product_even * product_odd\n",
        "test": "assert     mul_even_odd([]) == 0, \"incorrect\"",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(', '')\n    test_str = test_str.replace(')', '')\n    test_str = test_str.split(',')\n    test_str = tuple(int(n) for n in test_str)\n    return test_str\n",
        "test": "assert     tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a == None:\n        return None\n    if x <= a:\n        return None\n    if x >= a[-1]:\n        return len(a)\n    i = 0\n    while i < len(a) and x >= a[i]:\n        i += 1\n    return i\n",
        "test": "assert ",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"(ab)*b\")\n    result = pattern.match(text)\n    if result:\n        return True\n    return False\n",
        "test": "assert     text_match_three(\"abc\") == False",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + test_str)\n    return new_tuple\n",
        "test": "assert     new_tuple([\"a\", \"b\", \"c\"], \"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(n % 2 == 0 for i, n in enumerate(nums) if i % 2 == 0)\n",
        "test": "assert     even_position([-1, -2, -3, -4, -5]) == False",
        "num_ids": 318,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tuple_tup = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            tuple_tup = tuple_tup + i\n        else:\n            tuple_tup = tuple_tup + (i,)\n    return tuple_tup\n",
        "test": "assert     remove_nested((1,(2,),(3,))) == (1,2,3)",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count = count + 1\n    return count\n",
        "test": "assert     count_list([[1, 2, 3], [4, 5, 6]]) == 2, 'count_list([[1, 2, 3], [4, 5, 6]]) should return 2'",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    i = n-1\n    while i>=0:\n        if arr[i]<x:\n            i = i-1\n        else:\n            break\n    return i\n",
        "test": "assert     last([1,2,3,4,5,6,7,8], 1) == 7",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"ab\"\n    result = re.search(pattern, text)\n    if result:\n        print(text, 'is of length:', len(text))\n        print(result.group())\n    else:\n        print(text, 'is not of length:', len(text))\n    return\n",
        "test": "assert     text_starta_endb(\"aaa\") == True, \"aaa\"",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "test": "assert     return_sum({'a': 1, 'b': 2, 'c': 3}) == 6, 'Wrong'",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(n+1))\n",
        "test": "assert     sum_odd(1) == 1 ",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for x in arr:\n        sum = sum + x\n    return sum\n",
        "test": "assert     _sum([1, 2, 3, 4, 5]) == 15, \"Fail\"",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # print (n)\n    n = n << d\n    return n & 0xffffffff\n    \n    \ndef left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return n\n    n = n << d\n    if n >= 0:\n        return n & 0xffffffff\n    else:\n        return -1 * (-1 * (n & 0xffffffff)) & 0xffffffff\n    \n    \ndef left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) & 0xffffffff | (n >> (32 - d)) & 0xffffffff\n    \n",
        "test": "assert left_rotate(0b00000000,6) == 0b00000000",
        "num_ids": 149,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "test": "assert remove_all_spaces('c') == 'c'",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x,y+1):\n        if i == z:\n            count = count + 1\n    return count\n",
        "test": "assert     test_three_equal(1,2,3) == 0, \"Expected value should be 0\"",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)-1,0,-1):\n        if arr[i] < arr[i-1]:\n            break\n    if i == 0:\n        print(i, \"No rotation required\")\n    else:\n        print(i, \"Rotations needed = \", i-1)\n",
        "test": "assert ",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    start = 1\n    end = n\n    while(start <= end) :\n        mid = start + (end - start)//2\n        if mid*mid == n :\n            return True\n        elif mid*mid < n :\n            start = mid + 1\n        else :\n            end = mid - 1\n    return False\n",
        "test": "assert is_perfect_square(4) == True",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return (sum(arr) % 2 == 0)\n",
        "test": "assert     is_product_even([3, 6, 7]) == True, \"is_product_even does not work correctly\"",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists\n",
        "test": "assert     max_sum_list([[5, 10, 15, 20],",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Time Complexity : O(n)\n    # Space Complexity : O(1)\n    max_len = 0\n    curr_len = 0\n    for c in test_str:\n        if c.isupper():\n            curr_len = 1\n        else:\n            curr_len = 0\n",
        "test": "assert     max_run_uppercase('ZZZ') == 4, \"Wrong result for 'ZZZ'\"",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2==1:\n            return i\n    return None\n",
        "test": "assert     first_odd([2,1,5,6,8]) == 1",
        "num_ids": 284,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_K([(1, 2), (1, 2, 3)], 3) == False, \"test 3: FAILED\"",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        if len(test_tup1) > 0:\n            for x in range(len(test_tup1)):\n                if test_tup1[x] > test_tup2[x]:\n                    return False\n                else:\n                    return True\n    else:\n        if len(test_tup2) > 0:\n            for x in range(len(test_tup2)):\n                if test_tup2[x] > test_tup1[x]:\n                    return False\n                else:\n                    return True\n",
        "test": "assert     check_smaller((1, 2), (1, 4)) == True ",
        "num_ids": 555,
        "indeed": true
    }
]