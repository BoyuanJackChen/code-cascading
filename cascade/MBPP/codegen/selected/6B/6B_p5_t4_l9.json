[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # for element in test_tup1:\n    #     if element in test_tup2:\n    #         common_el.append(element)\n    #     else:\n    #         pass\n    # return common_el\n    return set(test_tup1) & set(test_tup2)\n",
        "test": "assert     similar_elements(('x', 'y', 'z'), ('x', 'y', 'z')) == {'x', 'y', 'z'}",
        "num_ids": 884,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return False\n    elif n > 2 and n%2 == 0:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2 and n%2 == 0:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                return False\n    return True\ndef is_perfect_square(n):\n    '''\n    Write a python function to identify perfect square numbers.\n    '''\n    if n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        for i in range(1, int(math.sqrt(n))+1):\n            if i**2 == n:\n                return True\n        return False\ndef is_perfect_square_recursion(n):\n    '''\n    Write a python function to identify perfect square numbers.\n    '''\n    if n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        if n == int(math.sqrt(n))**2:\n            return True\n        else:\n            return is_perfect_square_recursion(int(math.sqrt(n))**2)\ndef is_perfect_square_iteration(n):\n    '''\n    Write a python function to identify perfect square numbers.\n    '''\n    if n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        for i in range(1, int(math.sqrt(n))+1):\n            if i**2 == n:\n                return True\n            elif i**2 > n:\n                return False\ndef factorial(n):\n    '''\n    Write a python function to compute factorial.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to compute fibonacci.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef fibonacci_recursion(n):\n    '''\n    Write a python function to compute fibonacci.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci_recursion(n-1) + fibonacci_recursion(n-2)\ndef power(n,p):\n    '''\n    Write a python function to compute n to the power of p.\n    '''\n    if p == 1:\n        return n\n    else:\n        return n*power(n,p-1)\ndef power_recursion(n,p):\n    '''\n    Write a python function to compute n to the power of p.\n    '''\n    if p == 1:\n        return n\n    elif p == 0:\n        return 1\n    else:\n        return n*power_recursion(n,p-1)\ndef factorial_recursion(n):\n    '''\n    Write a python function to compute factorial.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        return n*factorial_recursion(n-1)\ndef power_iteration(n,p):\n    '''\n    Write a python function to compute n to the power of p.\n    '''\n    product = 1\n    while p > 0:\n        if p % 2 == 1:\n            product = product * n\n        n = n * n\n        p = p/2\n    return product\ndef power_iteration_recursion(n,p):\n    '''\n    Write a python function to compute n to the power of p.\n    '''\n    if p == 1:\n        return n\n    elif p == 0:\n        return 1\n    else:\n        return n*power_iteration_recursion(n,p-1)\ndef factorial_iteration(n):\n    '''\n    Write a python function to compute factorial.\n    '''\n    product = 1\n    while n > 0:\n        product = product * n\n        n = n - 1\n    return product\ndef to_bin(n):\n    '''\n    Write a python function to convert a number to binary.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return to_bin(n/2) + n%2\ndef to_bin_recursion(n):\n    '''\n    Write a python function to convert a number to binary.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return to_bin_recursion(n/2) + n%2\ndef to_bin_iteration(n):\n    '''\n    Write a python function to convert a number to binary.\n    '''\n    product = 0\n    while n > 0:\n        product = product + n%2\n        n = n/2\n    return product\ndef to_oct(n):\n    '''\n    Write a python function to convert a number to octal.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return to_oct(n/8) + n%8\ndef to_oct_recursion(n):\n    '''\n    Write a python function to convert a number to octal.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return to_oct_recursion(n/8) + n%8\ndef to_oct_iteration(n):\n    '''\n    Write a python function to convert a number to octal.\n    '''\n    product = 0\n    while n > 0:\n        product = product + n%8\n        n = n/8\n    return product\ndef to_hex(n):\n    '''\n    Write a python function to convert a number to hexadecimal.\n    '''\n    if n == 0:\n        return 0\n    elif n > 15:\n        return to_hex(n/16) + n%16\n    else:\n        return n\ndef to_hex_recursion(n):\n    '''\n    Write a python function to convert a number to hexadecimal.\n    '''\n    if n == 0:\n        return 0\n    elif n > 15:\n        return to_hex_recursion(n/16) + n%16\n    else:\n        return n\ndef to_hex_iteration(n):\n    '''\n    Write a python function to convert a number to hexadecimal.\n    '''\n    product = 0\n    while n > 0:\n        product = product + n%16\n        n = n/16\n    return product\ndef sum_digits(n):\n    '''\n    Write a python function to compute sum of digits of a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_digits(int(n/10))\ndef sum_digits_recursion(n):\n    '''\n    Write a python function to compute sum of digits of a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_digits_recursion(int(n/10))\ndef sum_digits_iteration(n):\n    '''\n    Write a python function to compute sum of digits of a number.\n    '''\n    product = 0\n    while n > 0:\n        product = product + n%10\n        n = n/10\n    return product\ndef is_palindrome(n):\n    '''\n    Write a python function to identify palindrome.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    elif n < 10:\n        return True\n    else:\n        return n%10 == n/10%10",
        "test": "assert     is_not_prime(2) == False",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    for num in nums:\n        hq.heappush(h,(-num,num))\n    return [hq.heappop(h)[1] for i in range(n)]\n",
        "test": "assert heap_queue_largest([3,2,1,5,6,4],0) == []",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x&(x-1)) == 0\n",
        "test": "assert     (is_Power_Of_Two(1) == True)",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w+',text)\n",
        "test": "assert     find_char_long('PYTHON') == ['PYTHON']",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n",
        "test": "assert     square_nums([1,2,3,4,5]) == [1, 4, 9, 16, 25]",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotate_count = 0\n    str_len = len(str)\n    if(str_len==1):\n        return 0\n    for i in range(str_len):\n        flag = False\n        for j in range(str_len):\n            if(str[j:]+str[:j]==str):\n                rotate_count+=1\n                flag = True\n                break\n        if(flag==False):\n            return -1\n    return rotate_count\ndef palindrome(str):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    str_len = len(str)\n    if(str_len==1):\n        return True\n    for i in range(str_len//2):\n        if(str[i]!=str[str_len-i-1]):\n            return False\n    return True\ndef is_Anagram(str1,str2):\n    '''\n    Write a python function to check if two strings are Anagram or not.\n    '''\n    str1_len = len(str1)\n    str2_len = len(str2)\n    if(str1_len!=str2_len):\n        return False\n    str_len = str1_len\n    str1_dict = {}\n    str2_dict = {}\n    for i in range(str_len):\n        if(str1[i] in str1_dict):\n            str1_dict[str1[i]]+=1\n        else:\n            str1_dict[str1[i]]=1\n        if(str2[i] in str2_dict):\n            str2_dict[str2[i]]+=1\n        else:\n            str2_dict[str2[i]]=1\n    for i in str1_dict:\n        if(str1_dict[i]!=str2_dict[i]):\n            return False\n    return True\ndef longest_common_substr(str1,str2):\n    '''\n    Write a python function to find the longest common substring of two strings.\n    '''\n    str1_len = len(str1)\n    str2_len = len(str2)\n    max_len = 0\n    str_len = min(str1_len,str2_len)\n    for i in range(str_len):\n        substr = \"\"\n        for j in range(i,str_len):\n            if(str1[j]==str2[j]):\n                substr+=str1[j]\n            else:\n                break\n        if(len(substr)>max_len):\n            max_len = len(substr)\n    return max_len\ndef num_subarray_with_0_sum(arr):\n    '''\n    Write a python function to find the number of subarray with 0 sum.\n    '''\n    sum_count = 0\n    for i in range(len(arr)):\n        sum_count+=arr[i]\n        if(sum_count==0):\n            sum_count+=1\n        if(sum_count<0):\n            sum_count=0\n    return sum_count\ndef partition_array(arr,start,end):\n    '''\n    Write a python function to partition an array around a given index such that all elements in the left subarray are less than the pivot element and all elements in the right subarray are greater than or equal to the pivot element.\n    '''\n    pivot = arr[end]\n    i=start-1\n    for j in range(start,end):\n        if(arr[j]<pivot):\n            i+=1\n            arr[i],arr[j]=arr[j],arr[i]\n    arr[i+1],arr[end]=arr[end],arr[i+1]\n    return i+1\ndef largest_subarray(arr):\n    '''\n    Write a python function to find the largest subarray with sum atleast k.\n    '''\n    start = 0\n    end = 0\n    max_sum = 0\n    sum_arr = 0\n    for i in range(len(arr)):\n        if(arr[i]>0):\n            end=i\n        if(end-start>max_sum):\n            max_sum = end-start\n            sum_arr = arr[start:end+1]\n        if(arr[i]<0):\n            start=i\n    return sum_arr\ndef rotated_array_search(arr,num):\n    '''\n    Write a python function to find the index of the smallest element in an array after sorting the array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while(start<=end):\n        mid = (start+end)//2\n        if(arr[mid]>arr[end]):\n            start = mid+1\n        elif(arr[mid]<arr[start]):\n            end = mid\n        else:\n            return mid\n    return -1\ndef majority_element_rec(arr,start,end):\n    '''\n    Write a python function to find the majority element in an array.\n    '''\n    if(start>=end):\n        return -1\n    mid = (start+end)//2\n    left = majority_element_rec(arr,start,mid)\n    if(left==-1):\n        return majority_element_rec(arr,mid+1,end)\n    right = majority_element_rec(arr,mid+1,end)\n    if(left==right):\n        return left\n    left_count = 0\n    right_count = 0\n    for i in range(mid-start+1):\n        if(arr[i+start]==left):\n            left_count+=1\n        elif(arr[i+start]==right):\n            right_count+=1\n    if(left_count>right_count):\n        return left\n    else:\n        return right\ndef majority_element(arr):\n    '''\n    Write a python function to find the majority element in an array.\n    '''\n    start = 0\n    end = len(arr)-1\n    return majority_element_rec(arr,start,end)\ndef check_permutation(str1,str2):\n    '''\n    Write a python function to check if the first string is a permutation of the second string.\n    '''\n    str1_len = len(str1)\n    str2_len = len(str2)\n    if(str1_len!=str2_len):\n        return False\n    str_len = str1_len\n    str1_dict = {}\n    str2_dict = {}\n    for i in range(str_len):\n        if(str1[i] in str1_dict):\n            str1_dict[str1[i]]+=1\n        else:\n            str1_dict[str1[i]]=1\n        if(str2[i] in str2_dict):\n            str2_dict[str2[i]]+=1\n        else:\n            str2_dict[str2[i]]=1\n    for i in str1_dict:\n        if(str1_dict[i]!=str2_dict[i]):\n            return False\n    return True\ndef check_all_rotations(str):\n    '''\n    Write a python function to check if all rotations of a string are same or not.\n    '''\n    str_len = len(str)\n    for i in range(str_len):\n        flag = False\n        for j in range(str_len):\n            if(str[j:]+str[:j]!=str):\n                flag = True\n                break\n        if(flag==True):\n            return False\n    return True\ndef maximum_number_of_ones_subarray(arr):\n    '''\n    Write a python function to find the maximum number of 1s subarray in an array.\n    '''\n    start = 0\n    end = 0\n    max_ones = 0\n    ones_count = 0\n    for i in range(len(arr)):\n        if(arr[i]==0):\n            ones_count-=1\n        else:\n            ones_count+=1\n        if(ones_count>max_ones):\n            max_ones = ones_count\n            start = i-ones_count+1\n            end = i+1\n    return max_ones,start,en",
        "test": "assert     find_Rotations('a') == 0",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\").replace(ch,\"\")\n",
        "test": "assert     remove_Occ('abc', 'a') == 'bc'",
        "num_ids": 2444,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            smallest = i\n            for k in range(i, len(M)):\n                if sum(M[smallest][0:j+1]) > sum(M[k][0:j+1]):\n                    smallest = k\n            M[smallest], M[i] = M[i], M[smallest]\n    return M\n",
        "test": "assert     sort_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) ==     [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n",
        "test": "assert     find_Volume(0,0,1) == 0.0",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lower = text.lower()\n    if re.search(r'[a-z]{2,}_[a-z]{2,}',text_lower):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_lowercase_underscore('abcd') == False",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "test": "assert     square_perimeter(4)    == 16",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if(len(string) == 0):\n        return []\n    if(len(string) == 1):\n        return [string]\n    l1 = []\n    for char in string:\n        if char not in l1:\n            l1.append(char)\n    l2 = []\n    for i in l1:\n        for char in string:\n            if char == i:\n                l2.append(char)\n                string = string.replace(char,'',1)\n    return l2\n    \ndef str_to_list_comprehension(string):\n    return [i for i in string]\n",
        "test": "assert     str_to_list('hello') == ['h','e','l','l','o']",
        "num_ids": 2938,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))",
        "test": "assert not test_duplicate([1,2,3,4,5,6,7,8,9,0])",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (int(x)%2==0):\n        return True\n    else:\n        return False\n        \ndef is_sunday(x):\n    '''\n    Write a function to check if the given number is a Sunday or not.\n    '''\n    if (int(x)%7==0):\n        return True\n    else:\n        return False\n    \ndef is_eighth(x):\n    '''\n    Write a function to check if the given number is an eighth or not.\n    '''\n    if (int(x)%8==0):\n        return True\n    else:\n        return False\n    \ndef is_third(x):\n    '''\n    Write a function to check if the given number is a third or not.\n    '''\n    if (int(x)%3==0):\n        return True\n    else:\n        return False\n    \ndef is_other_eighth(x):\n    '''\n    Write a function to check if the given number is an other eighth or not.\n    '''\n    if (int(x)%15==0):\n        return True\n    else:\n        return False\n    \ndef is_fifth(x):\n    '''\n    Write a function to check if the given number is a fifth or not.\n    '''\n    if (int(x)%5==0):\n        return True\n    else:\n        return False\n    \ndef is_sixth(x):\n    '''\n    Write a function to check if the given number is a sixth or not.\n    '''\n    if (int(x)%6==0):\n        return True\n    else:\n        return False\n    \ndef is_even(x):\n    '''\n    Write a function to check if the given number is even or not.\n    '''\n    if (int(x)%2==0):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(11) == False",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    return num == 2*rev_num\n",
        "test": "assert     rev(1234) == False",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    ans = arr[-1]\n    return ans\n",
        "test": "assert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0 or x<0 and y>0:\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(12,0) == False",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n -= 1\n    result = n**2 + n\n    if result % 2 == 0:\n        return True\n    return False\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def recur(i, j, k, count):\n        if i == j:\n            return count\n        if k == 0:\n            return count + 1\n        if k > 0 and s[i] == s[j]:\n            return recur(i + 1, j - 1, k - 1, count + 1)\n        return recur(i + 1, j, k, count)\n    return recur(0, len(s) - 1, 0, 0)\n",
        "test": "assert     count_Substrings(\"1010101010101010101\") == 1",
        "num_ids": 2679,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "test": "assert     smallest_num([0, 1, 2, 3, 4, 5]) == 0",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for idx_a, a in enumerate(test_list):\n        for idx_b, b in enumerate(test_list[idx_a+1:], start=idx_a+1):\n            max_diff = max(max_diff, abs(a-b))\n    return max_diff\n",
        "test": "assert     max_difference([]) == 0",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    print(sorted(subjectmarks, key=itemgetter(1)))\n",
        "test": "assert ",
        "num_ids": 1372,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) is list:\n        return sum(data_list)\n    else:\n        return data_list\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n",
        "test": "assert     bell_number(0) == 1",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    flag = True\n    for i in range(1,len(A)):\n        if A[i-1]<=A[i]:\n            continue\n        else:\n            flag = False\n            break\n    return flag\n",
        "test": "assert     is_Monotonic(    [1, 1, 1, 1, 1, 1]) == True",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    i = 0\n    while i < len(l):\n        if s[0] == l[i]:\n            if s[:len(s)] == l[i:i+len(s)]:\n                return True\n        i += 1\n    return False\n",
        "test": "assert     is_sublist([1,2,3], [1,2]) == True",
        "num_ids": 661,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True\n",
        "test": "assert     find_equal_tuple(((2, 3), (3, 4), (4, 5))) == True",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert     comb_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]",
        "num_ids": 873,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #Code here\n    for i in range(n+1):\n        for j in range(i+1):\n            if (i**2 - j**2) == n:\n                return True\n    return False\n",
        "test": "assert     dif_Square(10) == False",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for color, pattern in zip(colors, patterns):\n        if color!= pattern:\n            return False\n    return True\n",
        "test": "assert     not is_samepatterns(['red', 'blue', 'green', 'blue', 'green', 'blue', 'green','red', 'blue', 'green','red', 'blue', 'green','red'], ['red','red', 'green', 'blue','red', 'blue', 'green','red', 'blue', 'green','red', 'blue', 'green','red'])",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tuple_elems in test_list:\n        tuple_sum = 0\n        for elem in tuple_elems:\n            if elem % K!= 0:\n                return 0\n            tuple_sum += elem\n        if tuple_sum % K == 0:\n            divisible_tuples.append(tuple_elems)\n    return divisible_tuples\n",
        "test": "assert     find_tuples([(1,1,3), (1,1,1), (1,1,1)], 1) == [(1, 1, 3), (1, 1, 1), (1, 1, 1)]",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n",
        "test": "assert     (is_Diff(11) == True)",
        "num_ids": 183,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\n",
        "test": "assert     word_len('abc') == True",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n**4\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 2373,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * math.pow(r, 3)\n    return V\n",
        "test": "assert     volume_sphere(1) == 4.1887902047863905",
        "num_ids": 398,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in strr:\n        res = res + ord(i)\n    return res%26\n",
        "test": "assert     get_Char('aa') == 57",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0,1]\n    while len(seq) < n+1:\n        seq.append(seq[-1] + seq[-2])\n    return seq[n]\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n",
        "test": "assert     surfacearea_sphere(1) == 4 * math.pi",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return ((n * (n + 1) / 2) ** 2) + 1\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for i in dict1:\n        dictionary[i] = dict1[i]\n    for i in dict2:\n        dictionary[i] = dict2[i]\n    for i in dict3:\n        dictionary[i] = dict3[i]\n    return dictionary\n",
        "test": "assert     merge_dictionaries_three({'a': 'A', 'b': 'B'}, {'b': 'B', 'c': 'C'}, {'d': 'D'})     == {'a': 'A', 'b': 'B', 'c': 'C', 'd': 'D'}",
        "num_ids": 1648,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "test": "assert     freq_count([]) == collections.Counter({})",
        "num_ids": 2720,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return 0\n",
        "test": "assert     closest_num(1) == 0",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    res = len(list1[0])\n    for word in list1:\n        if len(word) > res:\n            res = len(word)\n    return res\n",
        "test": "assert     len_log(['abc', 'bcd', 'cde']) == 3",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return True if sub_str in str1 else False\n    #return True if any(sub_str in s for s in str1) else False\n",
        "test": "assert     find_substring('abcde', 'c')",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return False\n    s = str(n)\n    return all(int(s[i]) > int(s[i+1]) for i in range(len(s)-1))\n",
        "test": "assert is_undulating(1221213) == False",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==1:\n        return a\n    elif b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n",
        "test": "assert     power(2,4) == 16",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert     index_minimum([('a', 2), ('b', 5), ('c', 9)])     == 'a'",
        "num_ids": 796,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Min_Length = float('inf')\n    for sublist in lst:\n        if len(sublist) < Min_Length:\n            Min_Length = len(sublist)\n    return Min_Length\n",
        "test": "assert     Find_Min_Length([[3, 3, 1, 1], [1, 4, 2, 2], [1, 2, 3, 3], [2, 3, 4, 5], [2, 3, 4, 5]]) == 4",
        "num_ids": 985,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor += 1\n    return divisor\n",
        "test": "assert     divisor(1) == 1",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if item not in frequency_dict:\n            frequency_dict[item] = 1\n        else:\n            frequency_dict[item] += 1\n    return frequency_dict\n",
        "test": "assert     [frequency_lists([1,2,3,4]) == {1:1, 2:1, 3:1, 4:1}]",
        "num_ids": 3158,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_multiplied = 1\n    for n in numbers:\n        numbers_multiplied *= n\n    return numbers_multiplied / len(numbers)\n",
        "test": "assert     multiply_num([0,1]) == 0",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    elif n == -1:\n        return '-1'\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n",
        "test": "assert     decimal_to_binary(0)     == '0'",
        "num_ids": 514,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 9:\n        return num + 1\n    else:\n        return int(str(num) + str(num)[::-1])\n",
        "test": "assert     next_smallest_palindrome(1) == 2",
        "num_ids": 2634,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    def partition(arr, start, end):\n        pivot = arr[end]\n        p = start\n        for i in range(start, end):\n            if arr[i] < pivot:\n                arr[p], arr[i] = arr[i], arr[p]\n                p += 1\n        arr[p], arr[end] = arr[end], arr[p]\n        return p\n    \n    def find_kth_element(arr, start, end):\n        if start == end:\n            return arr[start]\n        p = partition(arr, start, end)\n        if p == k:\n            return arr[p]\n        elif p > k:\n            return find_kth_element(arr, start, p-1)\n        else:\n            return find_kth_element(arr, p+1, end)\n    \n    return find_kth_element(arr, 0, len(arr)-1)\n",
        "test": "assert     kth_element([1], 1) == 1",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    arr = word.split('_')\n    for i in range(len(arr)):\n        if arr[i] == '':\n            continue\n        else:\n            arr[i] = arr[i][0].upper() + arr[i][1:]\n    return ''.join(arr)\n",
        "test": "assert     snake_to_camel('0123456789') == '0123456789'",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*(n-1)/2 + m*(m-1)/2\n",
        "test": "assert     eulerian_num(2, 1) == 1",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sub_lists = []\n    for item in input_list:\n        if type(item) is list:\n            sub_lists.append(item)\n    for i in range(len(sub_lists)):\n        sub_lists[i].sort()\n    \n    res = []\n    for sub_list in sub_lists:\n        res.extend(sub_list)\n    return res\n",
        "test": "assert         sort_sublists([[]]) == []",
        "num_ids": 2790,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst1 = [1 if x else 0 for x in lst]\n    return len(lst1) - lst1.count(0)\n",
        "test": "assert     (count([False, False, False, False, False]) == 0)",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        if i not in test_tup:\n            test_tup.append(i)\n    return test_tup\n",
        "test": "assert     add_lists([(1,2),], ((1,),)) == [((1,2),),]",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    nums = sorted(num1+num2+num3)\n    return nums\n",
        "test": "assert     merge_sorted_list([1,3,5,7],[2,4,6,8],[9,10,11,13]) == [1,2,3,4,5,6,7,8,9,10,11,13]",
        "num_ids": 2511,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(0,n):\n        if (int(s[-1] + s[:-1],2) % 2 == 0):\n            count += 1\n        else:\n            s = '0' + s[1:] + '0'\n    return count \n",
        "test": "assert     odd_Equivalent('1101', 1) == 1",
        "num_ids": 2188,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #An empty list to append the common elements to\n    common = []\n    #Looping over the nested lists\n    for sublist in nestedlist:\n        #If the current element is in the nested list, append it to common list\n        for element in sublist:\n            if element not in common:\n                common.append(element)\n    return common\n",
        "test": "assert     common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3], 'Not correct'",
        "num_ids": 2980,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    text = str(text)\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_float(text):\n    '''\n    Write a function to check if a string represents a float or not.\n    '''\n    \n    text = str(text)\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_string(text):\n    '''\n    Write a function to check if a string represents a string or not.\n    '''\n    \n    text = str(text)\n    if text[0] == '\"':\n        return True\n    else:\n        return False\n",
        "test": "assert     check_integer('123') == True",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for each in list1:\n        if len(each)!= 0:\n            return False\n    return True\n",
        "test": "assert     empty_dit(['a', 'b', {}]) == False",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    ret = 0\n    for x in nums:\n        ret = ret * 10 + x\n    return ret\n",
        "test": "assert     tuple_to_int((1,2,3,4)) == 1234",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) if isinstance(i, str) else i for i in test_list]\n",
        "test": "assert     list_to_float([[1,2],[3,4.0],[5,6]]) == [[1.0, 2.0],[3.0, 4.0],[5.0, 6.0]]",
        "num_ids": 994,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string=='':\n        return []\n    else:\n        string=string.split(' ')\n        return string\n",
        "test": "assert     string_to_list('python') == ['python']",
        "num_ids": 506,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n",
        "test": "assert     search([1,2,2,2,3,4,4]) == 2",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    tuple_list = []\n    for pair in list1:\n        tuple_list.append((abs(pair[0]*pair[1]),pair))\n    tuple_list.sort(reverse=True)\n    return tuple_list[0][1]\n",
        "test": "assert     max_product_tuple([(1, 1), (2, 2), (3, 3), (4, 4)]) == (4, 4)",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n    for number in range(1, limit):\n        if number in amicable_numbers:\n            continue\n        amicable_numbers.append(number)\n        sum_of_divisors = sum(number_divisors(number))\n        sum_of_amicable_numbers = sum(number_divisors(sum_of_divisors))\n        if sum_of_divisors == sum_of_amicable_numbers:\n            amicable_numbers_sum += sum_of_divisors\n            amicable_numbers.append(sum_of_divisors)\n    return amicable_numbers_sum\n",
        "test": "assert     amicable_numbers_sum(10) == 19",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = complex(a)\n    b = complex(b)\n    a_mag = abs(a)\n    b_mag = abs(b)\n    if a_mag < b_mag:\n        if a.imag < 0:\n            angle = 90 + cmath.phase(a / b)\n        else:\n            angle = cmath.phase(a / b)\n    else:\n        if b.imag < 0:\n            angle = 90 - cmath.phase(a / b)\n        else:\n            angle = -cmath.phase(a / b)\n    return angle\n",
        "test": "assert     angle_complex(1+0j,1+0j) == 0",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    #assume 2nd to nth character are all 1s\n    temp = [0 for i in range(len(string))]\n    \n    for i in range(1, len(string)):\n        if string[i] == \"0\":\n            temp[i] = temp[i-1] + 1\n        elif string[i] == \"1\":\n            temp[i] = temp[i-1]\n    \n    max_diff = 0\n    for i in range(1, len(string)):\n        if temp[i] - temp[i-1] > max_diff:\n            max_diff = temp[i] - temp[i-1]\n    \n    return max_diff\n",
        "test": "assert     find_length
        "num_ids": 3948,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return gcd(a,b)\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    while a!=b:\n        if a>b:\n            a=a-b\n        else:\n            b=b-a\n    return a\ndef diff(a,b):\n    '''\n    Write a python function to find the difference of two given numbers.\n    '''\n    return abs(a-b)\ndef multiply(a,b):\n    '''\n    Write a python function to find the product of two given numbers.\n    '''\n    return a*b\ndef power(a,b):\n    '''\n    Write a python function to find the power of a given number to the given power.\n    '''\n    return pow(a,b)\ndef sqrt(a):\n    '''\n    Write a python function to find the square root of a given number.\n    '''\n    return pow(a,0.5)\ndef divide(a,b):\n    '''\n    Write a python function to find the quotient of two given numbers.\n    '''\n    return a/b\ndef add(a,b):\n    '''\n    Write a python function to find the sum of two given numbers.\n    '''\n    return a+b\ndef subtract(a,b):\n    '''\n    Write a python function to find the difference of two given numbers.\n    '''\n    return a-b\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n<0:\n        print('Factorial of a negative number does not exist')\n    elif n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n<0:\n        print('Fibonacci sequence is not defined for negative numbers')\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef fibonacci_list(n):\n    '''\n    Write a python function to find the nth Fibonacci number in a list.\n    '''\n    a=0\n    b=1\n    fibs=[]\n    for i in range(1,n):\n        fibs.append(a+b)\n        a=b\n        b=fibs[i-1]+fibs[i]\n    return fibs[n-1]\ndef print_characters(str):\n    '''\n    Write a python function to print all the characters of a string.\n    '''\n    for i in str:\n        print(i,end=\" \")\n    print()\ndef print_integer(n):\n    '''\n    Write a python function to print all the digits of a number.\n    '''\n    if n<0:\n        print('Enter a positive number')\n    else:\n        print(n)\n        print_integer(n//10)\ndef print_digits(num):\n    '''\n    Write a python function to print all the digits of a number.\n    '''\n    if num<0:\n        print('Enter a positive number')\n    elif num==0:\n        return\n    else:\n        print(num%10)\n        print_digits(num//10)\ndef digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    if n<0:\n        print('Enter a positive number')\n    else:\n        sum=0\n        while n!=0:\n            sum+=n%10\n            n//=10\n        return sum\ndef max_digit(a,b):\n    '''\n    Write a python function to find the maximum digit of two given numbers.\n    '''\n    if a<0:\n        print('Enter a positive number')\n    elif b<0:\n        print('Enter a positive number')\n    elif a==b:\n        return a\n    elif a>b:\n        return max_digit(a%10,b%10)\n    else:\n        return max_digit(a//10,b//10)\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    if n<0:\n        print('Enter a positive number')\n    else:\n        sum=0\n        while n!=0:\n            sum+=n%10\n            n//=10\n        return sum\ndef power(a,b):\n    '''\n    Write a python function to find the power of a number to a given power.\n    '''\n    return pow(a,b)\ndef prime_number(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        return True\ndef sieve(n):\n    '''\n    Write a python function to print all the prime numbers from 1 to n.\n    '''\n    if n<2:\n        return\n    elif n==2:\n        print(2)\n    else:\n        print(2)\n        for i in range(3,n):\n            if i%2!=0:\n                print(i)\ndef count_primes(n):\n    '''\n    Write a python function to count the number of prime numbers from 1 to n.\n    '''\n    if n<1:\n        return\n    else:\n        if n==1:\n            return 0\n        elif n==2:\n            return 1\n        else:\n            count=0\n            for i in range(2,n):\n                if prime_number(i):\n                    count+=1\n            return count\ndef is_sorted(l):\n    '''\n    Write a python function to check whether a given list is sorted or not.\n    '''\n    if len(l)==1:\n        return True\n    elif l[0]<l[1]:\n        return is_sorted(l[1:])\n    else:\n        return False\ndef is_anagram(str1,str2):\n    '''\n    Write a python function to check whether two given strings are anagrams of each other or not.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        return sorted(str1)==sorted(str2)\ndef count_vowels(str):\n    '''\n    Write a python function to count the number of vowels in a given string.\n    '''\n    if len(str)==0:\n        return 0\n    elif str[0] in 'aeiouAEIOU':\n        return 1+count_vowels(str[1:])\n    else:\n        return count_vowels(str[1:])\ndef count_consonants(str):\n    '''\n    Write a python function to count the number of consonants in a given string.\n    '''\n    if len(str)==0:\n        return 0\n    elif str[0] not in 'aeiouAEIOU':\n        return 1+count_consonants(str[1:])\n    else:\n        return count_consonants(str[1:])\ndef count_capital_letters(str):\n    '''\n    Write a python function to count the number of capital letters in a given string.\n    '''\n    if len(str)==0:\n        return 0\n    elif str[0]>='A' and str[0]<='Z':\n        return 1+count_capital_letters(str[1:])\n    else:\n        return count_capital_letters(str[1:])\ndef count_lower_letters(str):\n    '''\n    Write a python function to count the number of lowercase letters in a given string.\n    '''\n    if len(str)==0:\n        return 0\n    elif str[0]>='a' and str[0]<='z':\n        return 1",
        "test": "assert     sum(9,6)    == 3",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(2, 2) == 4",
        "num_ids": 268,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # IMPLEMENT HERE\n    output = []\n    for word in str:\n        if len(word) > n:\n            output.append(word)\n    return output\n",
        "test": "assert     long_words(3, [\"hello\", \"world\", \"an\"]) ==     [\"hello\", \"world\"]",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_numbers = [\n        [8,1,6,3,5,7,4,9,2],\n        [6,1,8,7,5,3,2,9,4],\n        [4,9,2,3,5,7,8,1,6],\n        [2,9,4,7,5,3,6,1,8],\n        [8,3,4,1,5,9,6,7,2],\n        [4,3,8,9,5,1,2,7,6],\n        [6,7,2,1,5,9,8,3,4],\n        [2,7,6,9,5,1,4,3,8]\n        ]\n    magic_number_check = []\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            magic_number_check.append(my_matrix[i][j])\n    if magic_number_check == magic_numbers:\n        return True\n    else:\n        return False\n",
        "test": "assert     magic_square_test([[4, 3, 8], [9, 5, 1], [2, 7, 6]]) == False",
        "num_ids": 1186,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = 0\n    max_num = None\n    for num, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    return max_num\n",
        "test": "assert     max_occurrences([1,1,1,1,1,1,1,1,1,1,1]) == 1",
        "num_ids": 761,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = list(str1)\n    l = len(str1)\n    i = 0\n    while i < l:\n        if str1[i] in vowels and str1[i]!= 'y':\n            str1[i] = str1[l - 1 - i]\n            i += 1\n        elif str1[i] == 'y' and str1[i]!= 'y' and i + 1 < l:\n            str1[i] = str1[l - 1 - i]\n            str1[i + 1] = 'y'\n            i += 2\n        else:\n            i += 1\n    return ''.join(str1)\n",
        "test": "assert     reverse_vowels('Why') == 'Why'",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''\n    for i in range(len(tup1)):\n        tup_str += str(tup1[i])\n        if i!= len(tup1) - 1:\n            tup_str += ','\n    return tup_str\n",
        "test": "assert     (tup_string((1, 2, 3, 4)) == \"1,2,3,4\")",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])\n",
        "test": "assert     sum_negativenum([-1,-2,-3]) == -6",
        "num_ids": 760,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_of_zeros = 0\n    num_of_non_zeros = 0\n    for num in nums:\n        if num == 0:\n            num_of_zeros += 1\n        else:\n            num_of_non_zeros += 1\n    return num_of_zeros/num_of_non_zeros\n",
        "test": "assert     zero_count([1, 1, 0, 1, 1]) == 0.25",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    import operator\n    def check(x,y):\n        if x>y:\n            return False\n        if x == 0:\n            return True\n        if x==1:\n            return True\n        else:\n            return check(x//2,y) or check(x,y//2)\n    if n<1:\n        return False\n    if n==1:\n        return True\n    return check(n,2**31-1)\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 2644,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n",
        "test": "assert     12.566370614359172 == circle_circumference(2)",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for sublist in test_list for x in sublist]\n",
        "test": "assert     extract_singly([[1,2],[3,4],[5,6,7]]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted_list = nums\n    for i in range(len(nums) - 1, 0, -1):\n        temp = sorted_list[i]\n        j = i\n        while j > 0 and sorted_list[j - 1] > temp:\n            sorted_list[j] = sorted_list[j - 1]\n            j -= 1\n        sorted_list[j] = temp\n    return sorted_list\n",
        "test": "assert     pancake_sort([1]) == [1]",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_samepair([1,2,3],[3,2,1],[2,2,1]) == 1",
        "num_ids": 1128,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        if isinstance(i,tuple):\n            count+=1\n    return count\n",
        "test": "assert     find_lists(())    == 0",
        "num_ids": 2399,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n",
        "test": "assert     max_Abs_Diff([-1, 1]) == 2, 'Wrong result'",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1,n):\n        if a*i + b*n - n*n == 0:\n            return i, n*n/a\n    return None\n",
        "test": "assert     find_solution(3, 3, -7) == None",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    temp = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            temp.append(list1[i])\n    return temp\n",
        "test": "assert     remove_elements([5,3,2,1], [1,2,3,4,5]) == []",
        "num_ids": 607,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1: return n\n    else: return n + sum_series(n - 2)\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = 0.5 * s * l\n    return A\n",
        "test": "assert     area_polygon(2, 3) == 3",
        "num_ids": 4393,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    m = (int(math.sqrt(n)) + 1) / 2\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if m == 1:\n        return False\n    if n < 3:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i <= m:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n",
        "test": "assert     div_sum(48) == False",
        "num_ids": 918,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if str1=='':\n        return 0\n    if len(str1)==1:\n        if str1[0]>='a' and str1[0]<='z':\n            return 1\n        if str1[0]>='A' and str1[0]<='Z':\n            return 1\n        return 0\n    count=0\n    for i in range(len(str1)):\n        if str1[i]>='a' and str1[i]<='z':\n            if str1[i]==str1[0]:\n                count+=1\n        if str1[i]>='A' and str1[i]<='Z':\n            if str1[i]==str1[0]:\n                count+=1\n    return count\n",
        "test": "assert     count_char_position('a') == 1",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    '''\n    first we need to find the elements that xor to the even number\n    second we use a hash table to store the elements that xor to the even number\n    then we use two pointers to iterate the list and the hash table\n    when we find a number that xor to the even number, we increment the count by one\n    '''\n    hash_table = {}\n    count = 0\n    for number in A:\n        if number ^ 2 in hash_table:\n            count += 1\n        hash_table[number] = True\n    return count\n",
        "test": "assert     find_even_pair([1,2,3,4,5]) == 1",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    if (n <= 0):\n        return -1\n    \n    i = 1\n    \n    while(i <= n):\n        i *= 2\n    \n    return i\n",
        "test": "assert     next_power_of_2(17) == 32",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(0, len(a)):\n        if a[i] == x:\n            count +=1\n    return count\n",
        "test": "assert     frequency([1,2,3,1], 4) == 0",
        "num_ids": 2469,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in list1[m:n+1]:\n        result += i\n    return result\n",
        "test": "assert     sum_range_list([1, 2, 3, 4], 0, 4) == 10",
        "num_ids": 1859,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + a\n",
        "test": "assert     perimeter_pentagon(2) == 12, \"Expected 12\"",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('Hello world!') == 0",
        "num_ids": 1690,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type=None\n    for ele in test_tuple:\n        if data_type is None:\n            data_type=type(ele)\n        if data_type!=type(ele):\n            return False\n    return True\n",
        "test": "assert     check_type((0,1,2,3))",
        "num_ids": 707,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
        "test": "assert     not is_majority([1, 2, 1, 1, 3, 3, 3], 3, 3)",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Initialize result\n    res = 0\n    while (n): \n        res += n & 1\n        n >>= 1\n    return res \n",
        "test": "assert     (count_Set_Bits(0b00000000) == 0)",
        "num_ids": 395,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string = str.replace(\" \",\"\")\n    list1 = []\n    for i in range(len(string)):\n        list1.append(string[i])\n    if len(string)%2!= 0:\n        del list1[len(list1)-1]\n    return ''.join(list1)\nprint(odd_values_string(\"Hi, I am a programmer\"))\n",
        "test": "assert     odd_values_string(\"\")                    == \"\"",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     min_of_three(0, 1, 2) == 0, \"The result is incorrect.\"",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all(map(lambda x: (n & (1 << x)) == 0,range(l,r+1)))\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(13,13,13)",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0 or len(arr) == 1:\n        return arr\n    if len(arr) < n:\n        return arr\n    i = 0\n    for j in range(len(arr)):\n        if arr[j] < 0:\n            arr[i] = arr[j]\n            i += 1\n    for j in range(i, n):\n        arr[j] = arr[i]\n        i += 1\n    return arr\n",
        "test": "assert     re_arrange_array([1,2,3,4,5,6], 3)     == [1,2,3,4,5,6], 'fail'",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "test": "assert     replace_blank('','')==''",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "test": "assert     larg_nnum([1,2,3,4,5,6,7,8,9],0)     ==     []",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    return pi * r**2 + 2 * pi * r * h\n",
        "test": "assert     lateralsuface_cylinder(3,15) == 62.0, 'incorrect lateralsuface_cylinder(3,15)'",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return l**3\n",
        "test": "assert     volume_cube(2) == 8",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bit_set = 0\n    while n > 0:\n        if n & 1:\n            bit_set = bit_set + 1\n        n = n >> 1\n    return bit_set\n",
        "test": "assert     even_bit_set_number(1) == 1",
        "num_ids": 2138,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for x in test_list:\n        if x in result:\n            result[x] += 1\n        else:\n            result[x] = 1\n    return result\n",
        "test": "assert     check_occurences([(1,2),(3,3),(1,2)]) == {(1,2):2, (3,3):1}",
        "num_ids": 1212,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    ans = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if str[i] == str[j]: \n                ans += 1\n    return ans \n",
        "test": "assert     number_of_substrings('') == 0",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if n==1:\n        return m\n    elif n==2:\n        return int(m/2)\n    elif n==3:\n        return int(m/3)\n    elif n==4:\n        return int(m/4)\n    elif n==5:\n        return int(m/5)\n    elif n==6:\n        return int(m/6)\n    elif n==7:\n        return int(m/7)\n    elif n==8:\n        return int(m/8)\n    elif n==9:\n        return int(m/9)\n    elif n==10:\n        return int(m/10)\n    elif n==11:\n        return int(m/11)\n    elif n==12:\n        return int(m/12)\n    elif n==13:\n        return int(m/13)\n    elif n==14:\n        return int(m/14)\n    elif n==15:\n        return int(m/15)\n    elif n==16:\n        return int(m/16)\n    elif n==17:\n        return int(m/17)\n    elif n==18:\n        return int(m/18)\n    elif n==19:\n        return int(m/19)\n    elif n==20:\n        return int(m/20)\n    elif n==21:\n        return int(m/21)\n    elif n==22:\n        return int(m/22)\n    elif n==23:\n        return int(m/23)\n    elif n==24:\n        return int(m/24)\n    elif n==25:\n        return int(m/25)\n    elif n==26:\n        return int(m/26)\n    elif n==27:\n        return int(m/27)\n    elif n==28:\n        return int(m/28)\n    elif n==29:\n        return int(m/29)\n    elif n==30:\n        return int(m/30)\n    elif n==31:\n        return int(m/31)\n    elif n==32:\n        return int(m/32)\n    elif n==33:\n        return int(m/33)\n    elif n==34:\n        return int(m/34)\n    elif n==35:\n        return int(m/35)\n    elif n==36:\n        return int(m/36)\n    elif n==37:\n        return int(m/37)\n    elif n==38:\n        return int(m/38)\n    elif n==39:\n        return int(m/39)\n    elif n==40:\n        return int(m/40)\n    elif n==41:\n        return int(m/41)\n    elif n==42:\n        return int(m/42)\n    elif n==43:\n        return int(m/43)\n    elif n==44:\n        return int(m/44)\n    elif n==45:\n        return int(m/45)\n    elif n==46:\n        return int(m/46)\n    elif n==47:\n        return int(m/47)\n    elif n==48:\n        return int(m/48)\n    elif n==49:\n        return int(m/49)\n    elif n==50:\n        return int(m/50)\n    elif n==51:\n        return int(m/51)\n    elif n==52:\n        return int(m/52)\n    elif n==53:\n        return int(m/53)\n    elif n==54:\n        return int(m/54)\n    elif n==55:\n        return int(m/55)\n    elif n==56:\n        return int(m/56)\n    elif n==57:\n        return int(m/57)\n    elif n==58:\n        return int(m/58)\n    elif n==59:\n        return int(m/59)\n    elif n==60:\n        return int(m/60)\n    elif n==61:\n        return int(m/61)\n    elif n==62:\n        return int(m/62)\n    elif n==63:\n        return int(m/63)\n    elif n==64:\n        return int(m/64)\n    elif n==65:\n        return int(m/65)\n    elif n==66:\n        return int(m/66)\n    elif n==67:\n        return int(m/67)\n    elif n==68:\n        return int(m/68)\n    elif n==69:\n        return int(m/69)\n    elif n==70:\n        return int(m/70)\n    elif n==71:\n        return int(m/71)\n    elif n==72:\n        return int(m/72)\n    elif n==73:\n        return int(m/73)\n    elif n==74:\n        return int(m/74)\n    elif n==75:\n        return int(m/75)\n    elif n==76:\n        return int(m/76)\n    elif n==77:\n        return int(m/77)\n    elif n==78:\n        return int(m/78)\n    elif n==79:\n        return int(m/79)\n    elif n==80:\n        return int(m/80)\n    elif n==81:\n        return int(m/81)\n    elif n==82:\n        return int(m/82)\n    elif n==83:\n        return int(m/83)\n    elif n==84:\n        return int(m/84)\n    elif n==85:\n        return int(m/85)\n    elif n==86:\n        return int(m/86)\n    elif n==87:\n        return int(m/87)\n    elif n==88:\n        return int(m/88)\n    elif n==89:\n        return int(m/89)\n    elif n==90:\n        return int(m/90)\n    elif n==91:\n        return int(m/91)\n    elif n==92:\n        return int(m/92)\n    elif n==93:\n        return int(m/93)\n    elif n==94:\n        return int(m/94)\n    elif n==95:\n        return int(m/95)\n    elif n==96:\n        return int(m/96)\n    elif n==97:\n        return int(m/97)\n    elif n==98:\n        return int(m/98)\n    elif n==99:\n        return int(m/99)\n    elif n==100:\n        return int(m/100)\n    elif n==101:\n        return int(m/101)\n    elif n==102:\n        return int(m/102)\n    elif n==103:\n        return int(m/103)\n    elif n==104:\n        return int(m/104)\n    elif n==105:\n        return int(m/105)\n    elif n==106:\n        return int(m/106)\n    elif n==107:\n        return int(m/107)\n    elif n==108:\n        return int(m/108)\n    elif n==109:\n        return int(m/109)\n    elif n==110:\n        return int(m/110)\n    elif n==111:\n        return int(m/111)\n    elif n==112:\n        return int(m/112)\n    elif n==113:\n        return int(m/113)\n    elif n==114:\n        return int(m/114)\n    elif n==115:\n        return int(m/115)\n    elif n==116:\n        return int(m/116)\n    eli",
        "test": "assert     get_total_number_of_sequences(1,1) == 1",
        "num_ids": 2516,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)<len(list2):\n        print(\"Length of list1 is less than length of list2\")\n    elif len(list1)>len(list2):\n        print(\"Length of list2 is less than length of list1\")\n    else:\n        for x in range(len(list1)):\n            list1[x] = list2[x]\n    return list1\n",
        "test": "assert     replace_list([], [])                                     == []",
        "num_ids": 845,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    return count\n",
        "test": "assert     count_charac('hello') == 5",
        "num_ids": 403,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    return int((root + 1)**2)\n",
        "test": "assert     next_Perfect_Square(3)==4",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n    max_sum, left, right = arr[0], 1, len(arr) - 2\n    while left < right:\n        max_sum = max(max_sum, arr[left] + arr[right] + max(arr[left], arr[right]))\n        if arr[left] < arr[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_sum\n",
        "test": "assert     max_sum([2, 4, -1, 3, -2, -1, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, -3, -1, -2, ",
        "num_ids": 4940,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    tolerance = 0.000001\n    steps = 100000\n    x = number/2\n    for i in range(0,steps):\n        y = (x + number/x) / 2\n        if abs(y - x) < tolerance:\n            return x\n        x = y\n    return x\n",
        "test": "assert     babylonian_squareroot(4) == 2, \"4th root should be 2\"",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str_len = len(str)\n    # create a table to store result of subproblems\n    table = [[0 for j in range(str_len)] for i in range(str_len)]\n    for i in range(str_len):\n        # If current character is same as next character, then result is either 1 or 2,\n        # table[i][i+1] = (table[i+1][i+1] + 1) if str[i] == str[i+1]\n        # table[i][i+1] = 1\n        table[i][i] = 1\n    # Fill the table in diagonal manner.\n    # table[i][j] = table[i][j-1] if str[i] == str[j]\n    # table[i][j] = max(table[i][j], table[i+1][j-1] + 2) if str[i] == str[j]\n    for i in range(str_len - 1, -1, -1):\n        for j in range(i + 1, str_len):\n            if str[i] == str[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n    return table[0][str_len - 1]\n",
        "test": "assert     lps('a') == 1",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [val for val in array_nums1 if val in array_nums2]\n",
        "test": "assert     intersection_array([1,2,3,4],[1,4]) == [1,4], \"test 1 failed\"",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "test": "assert     count_X(('a', 'b', 'a'), 'a') == 2",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n",
        "test": "assert     insert_element([1,2,3,4,5],5) == [5,1,2,3,4,5]",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print('convert():')\n    for x in numbers:\n        print(x, '=', complex_to_polar(x))\n        \n        \ndef complex_to_polar(complex_num):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = cmath.polar(complex_num)\n    return [r[0], cmath.degrees(r[1])]\n",
        "test": "assert     convert((1, -1))     ==     (1.0, 90)",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if type(x) == int])\n",
        "test": "assert     count_integer([1,2,3,4]) == 4",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    all_combos = list(combinations_with_replacement(l, n))\n    return all_combos\n",
        "test": "assert     combinations_colors([1,2,3,4], 1) == [(1,), (2,), (3,), (4,)]",
        "num_ids": 759,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    from math import sqrt\n    \n    isPrime = [True for _ in range(n+1)] # 0,1,2,3,4,5,...,n is all true\n    \n    for i in range(2, int(sqrt(n))+1):\n        if isPrime[i]:\n            for j in range(i*i, n+1, i):\n                isPrime[j] = False\n    \n    count = 0\n    for i in range(2,n):\n        if isPrime[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_Primes_nums(1)     == 0",
        "num_ids": 871,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "test": "assert     swap_numbers(1,2) == (2,1)",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # t1_sum = sum(test_tup1)\n    # t2_sum = sum(test_tup2)\n    # if t1_sum < t2_sum:\n    #     return test_tup2\n    # elif t1_sum > t2_sum:\n    #     return test_tup1\n    # else:\n    #     return (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n",
        "test": "assert     maximize_elements(('a', 'b'), ('b', 'a'))     == 'a'",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return None\n    if n % 3 == 0:\n        return None\n    if n % 5 == 0:\n        return None\n    l = [2, 3, 5]\n    for i in xrange(3, n):\n        a = l[0] + (l[1]-l[0]) * (i-1)\n        if isPrime(a):\n            l.append(a)\n    return l[-1]\n",
        "test": "assert     newman_prime(2) == 3",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    ans = []\n    for i, j in zip(test_tup1, test_tup2):\n        ans.append(i/j)\n    return tuple(ans)\n",
        "test": "assert     division_elements((1,1,1),(1,1,1)) == (1,1,1)",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "test": "assert     split_two_parts(['a', 'b', 'c', 'd', 'e', 'f'], 4) == (['a', 'b', 'c', 'd'], ['e', 'f'])",
        "num_ids": 926,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 265,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not S or not isinstance(S, list) or not isinstance(step, int):\n        return None\n    if not step:\n        return S\n    res = []\n    for i in range(0, len(S), step):\n        res.append(S[i:i+step])\n    return res\n",
        "test": "assert     list_split([1,2,3,4], 2) == [[1,2], [3,4]]",
        "num_ids": 1073,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "test": "assert     lateralsurface_cube(1) == 6, 'error'",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    # initialize the result variable\n    result = 0\n    \n    # iterate through all the odd integers\n    for i in range(1, n + 1):\n        # only add the square if the integer is odd\n        if i % 2 == 1:\n            result += i ** 2\n    \n    # return the sum of the squares\n    return result\n    \ndef compound_interest(p, r, t):\n    '''\n    Write a python function that takes in 3 floats p, r and t and returns the amount p after t years of compounded interest of r.\n    '''\n    \n    # return the result of p * (pow(1 + r, t))\n    return p * (pow(1 + r, t))\n    \ndef factors(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of the factors of n.\n    '''\n    \n    # initialize the result variable\n    result = []\n    \n    # iterate through all the factors of n\n    for i in range(1, n + 1):\n        # if the factor is divisible by n\n        if n % i == 0:\n            # append the factor to the result\n            result.append(i)\n    \n    # return the result\n    return result\n    \ndef is_prime(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is prime and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the factors of n\n    for i in range(2, n):\n        # if the factor is divisible by n\n        if n % i == 0:\n            # set the result to False\n            result = False\n    \n    # return the result\n    return result\n    \ndef is_palindrome(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a palindrome and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the digits in n\n    for i in range(len(str(n))):\n        # if the last digit and the first are not the same\n        if str(n)[i]!= str(n)[len(str(n)) - i - 1]:\n            # set the result to False\n            result = False\n    \n    # return the result\n    return result\n    \ndef is_perfect(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is perfect and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the divisors of n\n    for i in range(1, n):\n        # if the divisor is not evenly divisible by n\n        if n % i!= 0:\n            # set the result to False\n            result = False\n    \n    # return the result\n    return result\n    \ndef is_pandigital(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a pandigital number and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the digits of n\n    for i in range(1, len(str(n)) + 1):\n        # if the digit is not in the string representation of n\n        if str(i) not in str(n):\n            # set the result to False\n            result = False\n    \n    # return the result\n    return result\n    \ndef sieve(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of the primes upto n.\n    '''\n    \n    # initialize the result variable\n    result = []\n    \n    # iterate through all the numbers upto n\n    for i in range(n + 1):\n        # if the number is not a prime\n        if i > 1:\n            # set the result to false\n            result.append(i)\n            \n            # iterate through all the multiples of i\n            for j in range(2 * i, n + 1, i):\n                # set the result to false\n                result[len(result) - 1] = False\n    \n    # return the result\n    return result\n    \ndef is_pandigital_triangle(n1, n2, n3):\n    '''\n    Write a python function that takes in 3 integers n1, n2 and n3 and returns True if n1, n2 and n3 can be the sides of a triangle and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the digits in n1\n    for i in range(len(str(n1))):\n        # if the last digit and the first are not the same\n        if str(n1)[i]!= str(n1)[len(str(n1)) - i - 1]:\n            # set the result to False\n            result = False\n    \n    # iterate through all the digits in n2\n    for i in range(len(str(n2))):\n        # if the last digit and the first are not the same\n        if str(n2)[i]!= str(n2)[len(str(n2)) - i - 1]:\n            # set the result to False\n            result = False\n    \n    # iterate through all the digits in n3\n    for i in range(len(str(n3))):\n        # if the last digit and the first are not the same\n        if str(n3)[i]!= str(n3)[len(str(n3)) - i - 1]:\n            # set the result to False\n            result = False\n    \n    # return the result\n    return result\n    \ndef is_fibonacci(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a fibonacci number and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the fibonacci numbers\n    for i in range(1, n):\n        # if the last two digits are not equal\n        if i < 10:\n            if str(i)[1]!= str(i)[0]:\n                # set the result to False\n                result = False\n        else:\n            # if the last three digits are not equal\n            if str(i)[2]!= str(i)[0] or str(i)[2]!= str(i)[1]:\n                # set the result to False\n                result = False\n    \n    # return the result\n    return result\n    \ndef nth_fibonacci(n):\n    '''\n    Write a python function that takes in a natural n and returns the nth fibonacci number.\n    '''\n    \n    # initialize the result variable\n    result = 1\n    \n    # iterate through all the fibonacci numbers\n    for i in range(1, n):\n        # set the result to the current result\n        result = result + result\n    \n    # return the result\n    return result\n    \ndef is_kaprekar(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a kaprekar number and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the digits in n\n    for i in range(len(str(n))):\n        # if the last digit is not equal to the sum of the first digits of n\n        if str(n)[i]!= str((int(str(n)[:i]) + int(str(n)[i + 1:]))):\n            # set the result to False\n            result = False\n    \n    # return the result\n    return result\n    \ndef is_super_pandigital(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a super pandigital number and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the digits in n\n    for i in range(1, len(str(n))):\n        # if the digit is not in the string representation of n\n        if str(i) not in str(n):\n            # set the result to False\n            result = False\n    \n    # return the result\n    return resul",
        "test": "assert     square_Sum(0)         == 0, 'incorrect definition'",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    x = n\n    y = 1\n    z = 1\n    while x > 0: \n        z = z*y\n        y = y+1\n        x = x-1\n    return z\n",
        "test": "assert     find_star_num(1)    == 1",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('A') == 65",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i]%2 == 0:\n            sum+=arr[i]\n    return sum\n",
        "test": "assert         (sum_even_and_even_index([0,0,0,0,0]) == 0)",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    if n < 2:\n        return 0\n    \n    total = 0\n    \n    for i in range(n):\n        if i % 2 == 0:\n            total += i ** 5\n            \n    return total\n    \n    ",
        "test": "assert     (even_Power_Sum(0) == 0)",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n",
        "test": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple([x1-x2 for x1,x2 in zip(test_tup1,test_tup2)])\n    else:\n        return None\n        \n        ",
        "test": "assert     substract_elements((1, 1, 1), (1, 1, 1)) == (0, 0, 0)",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0: \n        return 0\n    if n < 2: \n        return 1\n    if n == 2: \n        return 2\n    return n/2 * (2 * even_binomial_Coeff_Sum(n-2) + even_binomial_Coeff_Sum(n-4))\ndef even_binomial_Coeff(n,k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k and returns the binomial coefficient.\n    '''\n    if n < 0 or k < 0: \n        return 0\n    if n < k: \n        return 0\n    if n == k: \n        return 1\n    return (n/2 - k)/2 * (2 * even_binomial_Coeff(n-2,k) + even_binomial_Coeff(n-4,k))\ndef factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the factorial of that number\n    '''\n    if n == 0: \n        return 1\n    if n < 0: \n        return 0\n    return n * factorial(n - 1)\ndef binomial_coeff(n,k):\n    '''\n    Write a python function that takes in two positive integers n and k and returns the binomial coefficient for n and k\n    '''\n    if n < 0 or k < 0: \n        return 0\n    if n < k: \n        return 0\n    if n == 0: \n        return 1\n    return (factorial(n)/(factorial(k)*factorial(n-k)))\ndef x_plus_y(x,y):\n    '''\n    Write a python function that takes in two positive integers x and y and returns the sum of the two\n    '''\n    if x < 0 or y < 0: \n        return 0\n    if x > y: \n        return x + x_plus_y(x - y, y)\n    return y + y_plus_x(y - x, x)\ndef x_plus_y_recursive(x,y):\n    '''\n    Write a python function that takes in two positive integers x and y and returns the sum of the two\n    '''\n    if x < 0 or y < 0: \n        return 0\n    if x < y: \n        return x + x_plus_y(x - y, y)\n    return y + y_plus_x(y - x, x)\ndef count_bits(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of 1s in its binary representation.\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return 1 + count_bits(n/2)\ndef fibonacci_recursive(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\ndef fibonacci_recursive_with_memo(n, memo):\n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n in memo: \n        return memo[n]\n    memo[n] = fibonacci_recursive_with_memo(n-1, memo) + fibonacci_recursive_with_memo(n-2, memo)\n    return memo[n]\ndef find_digits_in_n(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of digits in that number.\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return 1 + find_digits_in_n(n/10)\ndef factorial_with_memo(n, memo):\n    '''\n    Write a python function that takes in a positive integer n and returns the factorial of n\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 1\n    if n in memo: \n        return memo[n]\n    memo[n] = n * factorial_with_memo(n - 1, memo)\n    return memo[n]\ndef find_digits_in_n_with_memo(n, memo):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of digits in that number.\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 1\n    if n == 1: \n        return 1\n    if n in memo: \n        return memo[n]\n    return 1 + find_digits_in_n_with_memo(n/10, memo)\ndef count_bits_with_memo(n, memo):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of 1s in its binary representation.\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n in memo: \n        return memo[n]\n    memo[n] = 1 + count_bits_with_memo(n/2, memo)\n    return memo[n]\ndef fibonacci_dynamic_programming(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number\n    '''\n    fib = [0 for i in xrange(n+1)]\n    fib[1] = 1\n    for i in xrange(2,n+1): \n        fib[i] = fib[i-1] + fib[i-2]\n    return fib[n]\ndef find_digits_in_n_dynamic_programming(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of digits in that number.\n    '''\n    fib = [0 for i in xrange(n+1)]\n    fib[1] = 1\n    for i in xrange(2,n+1): \n        fib[i] = fib[i-1] + fib[i-2]\n    return fib[n]\ndef count_bits_dynamic_programming(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of 1s in its binary representation.\n    '''\n    fib = [0 for i in xrange(n+1)]\n    fib[1] = 1\n    for i in xrange(2,n+1): \n        fib[i] = fib[i-1] + fib[i-2]\n    count = 0\n    while(n > 0): \n        count += (n % 2)\n        n /= 2\n    return count\ndef is_prime(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is prime and False otherwise\n    '''\n    if n <= 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in xrange(3,int(math.sqrt(n))+1,2):\n        if n % i == 0: \n            return False\n    return True\ndef num_divisors(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of divisors of n\n    '''\n    if n <= 1: \n        return 1\n    if n == 2: \n        return 2\n    if n % 2 == 0: \n        return num_divisors(n/2) + 1\n    return num_divisors",
        "test": "assert     even_binomial_Coeff_Sum(1) == 1, \"failed on 1\"",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi*r**2)*h\n",
        "test": "assert     volume_cylinder(3.5,0) == 0",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.items() if v >= n}\n",
        "test": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 0) == {'a': 1, 'b': 2, 'c': 3}",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for tup in test_tup:\n        if count == 0:\n            return count\n        else:\n            count += 1\n",
        "test": "assert     (count_first_elements(('', 'ab', 'cd', '', '')) == 0)",
        "num_ids": 2630,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # base case: 1, 2, 3, 4, 5,..., n\n    if n == 1:\n        return 1\n    # base case: 2, 22, 222, 22222,..., n\n    if n == 2:\n        return 22\n    # base case: 3, 33, 333, 33333,..., n\n    if n == 3:\n        return 333\n    # base case: 4, 44, 444, 4444,..., n\n    if n == 4:\n        return 444\n    # n is a multiple of 3\n    if n % 3 == 0:\n        return n/3\n    # n is a multiple of 5\n    if n % 5 == 0:\n        return n/5\n    return -1\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert     (True, 0) == sequential_search([1, 2, 3, 4, 5], 1)",
        "num_ids": 542,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert     all_unique([1,2,3,4,5,6,7,8,9,10]) == True",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) < len(nums2):\n        for i in range(0,len(nums2)):\n            nums1.append(nums1[len(nums1)-1] - nums2[len(nums2)-1-i])\n    if len(nums1) > len(nums2):\n        for i in range(0,len(nums1)):\n            nums2.append(nums2[len(nums2)-1-i] - nums1[len(nums1)-1-i])\n    return nums1[0:len(nums1)]\n",
        "test": "assert     sub_list([], []) == []",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 283,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    temp = n \n    numbers = {}\n    while temp > 0: \n        digit = temp%10\n        if digit not in numbers: \n            numbers[digit] = 1\n        else: \n            numbers[digit] += 1 \n        temp = temp//10\n    for key in numbers.keys():\n        if numbers[key] > key: \n            return False \n    return True \n",
        "test": "assert     validate(1325) == True",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list[0] == element:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_element([1,1,1,1,1],1) == True",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    if text:\n        if re.search('ab{1,3}',text):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('abbaa')",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    '''\n    ans = 0\n    n = len(a)\n    for i in range(0, n):\n        if i < n - k:\n            ans = max(ans, sum(a[i:i + k]))\n    return ans\n    '''\n    ans = a[0]\n    max_sum = a[0]\n    for i in range(0, n - k + 1):\n        max_sum = max(max_sum, sum(a[i:i + k]))\n        ans = max(ans, max_sum)\n    return ans\n",
        "test": "assert     max_sub_array_sum_repeated([-1], 1, 1) == -1",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # your code here\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n",
        "test": "assert     (square_Sum(0) == 0)",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = len(list1[0])\n    for i in range(1,len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n",
        "test": "assert     max_length([['a','b','c','d','e']]) == 5",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    c = [1, 0, 0]\n    \n    for i in range(3, n+1): \n        c.append(c[i-1] + c[i-2] + c[i-3]) \n        \n    return c[n] - (c[k] * c[n-k]) \n",
        "test": "assert     count_no_of_ways(5, 2) == 2",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 0\n    return n // m\n",
        "test": "assert     find(3,3) == 1",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w*w + h*h)\n    return a\n",
        "test": "assert     otherside_rightangle(3,4) == 5.0",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # listval=['string', 2.1, 0.4, 3.5, '1', 2.4, 'a']\n    max_value = None\n    for value in listval:\n        if max_value == None:\n            max_value = value\n        else:\n            if max_value < value:\n                max_value = value\n    return max_value\n",
        "test": "assert     max_val([2,3,5,7,8,9,0]) == 9",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for div in range(1, int(number ** 0.5) + 1):\n        if number % div == 0:\n            div_sum += div\n    return div_sum\n",
        "test": "assert     sum_div(1) == 1",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i] > arr[j]):\n                Count += 1\n    return Count\n",
        "test": "assert     get_Inv_Count([1, 2, 3]) == 0, \"Not correct!\"",
        "num_ids": 752,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for elem in list1:\n        if isinstance(elem, list):\n            output.extend(flatten_list(elem))\n        else:\n            output.append(elem)\n    return output\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for s, t in stdata:\n        d[s].append(t)\n    return max([max(v) for v in d.values()])\n",
        "test": "assert     max_aggregate([(1, 2), (3, 4), (5, 9)]) == 9",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    def count_bits(n):\n        return n * (n + 1) / 2\n    def is_same(a, b):\n        return a == b\n    for i in range(2, n + 1):\n        for j in range(2 ** i):\n            if is_same(sum(map(int, bin(j)[2:])), sum(map(int, bin(2 ** n - 1 - j)[2:]))):\n                count += 1\n    return count\n",
        "test": "assert     count_binary_seq(4) == 10",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1 + dict_depth(value)\n        else:\n            depth += 1\n    return depth\n",
        "test": "assert     dict_depth({'key': 'value'}) == 1",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    sum_arr = sum(arr)\n    if ranges[index] == 0:\n        return 0\n    elif ranges[index] == 1:\n        return arr[rotations[index]-1]\n    else :\n        return sum_arr - arr[rotations[index]-1] + arr[rotations[index]-2]\n",
        "test": "assert     find_Element([1, 2, 3, 4, 5], [ [0, 2], [3, 5] ], [ [1, 2], [3, 4], [0, 1], [5, 3] ], 4) == 2",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for i in range(0, len(words)):\n        if words[i].startswith('p'):\n            result.append(words[i])\n    return result\n",
        "test": "assert     start_withp(['apple','zebra','mouse','pig','soap','table','apple','cat','bee','bug','dog','monkey','pig']) == ['pig', 'pig']",
        "num_ids": 3331,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # a is a list of integers and n is the size of it\n    # index is the element at which we want to start our search\n    # k is the element after index (or k-th element)\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return a[0]\n    else:\n        result = -float('inf')\n        for i in range(0, index+1):\n            result = max(result, max_sum_increasing_subseq(a, n-1, i, k-1) + a[n-1])\n        return result\n",
        "test": "assert     max_sum_increasing_subseq([1,2,3], 3, 2, 1) == 6",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n",
        "test": "assert     colon_tuplex((1,2,3,4),0,3)     == (1,2,3)",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        products.append(max(nums1[i], nums2[i]))\n    return products\n",
        "test": "assert     large_product([1,3,2,4], [2,5,1,3], 1) == [2]",
        "num_ids": 864,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(3,4) == 4",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if len(str1) == 0:\n        return tuple()\n    res = []\n    for i in str1:\n        res.append(i)\n    return tuple(res)\n",
        "test": "assert     string_to_tuple(\"Hello\") == ('H','e','l','l','o')",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert n >= 0\n    n = int(n)\n    return (1 << n.bit_length()) - 1\n",
        "test": "assert     set_left_most_unset_bit(1) == 1",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*(math.pi)*(r**2)*h\n",
        "test": "assert     volume_cone(0,1)==0.0",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    i = 1\n    while(i<=n):\n        i = i*2\n    return i//2\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]\n",
        "test": "assert     add_string([], '{}{}') == []",
        "num_ids": 798,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(l1)):\n        dict1[l1[i]] = l2[i]\n        dict1[l1[i]] = l3[i]\n    return dict1\n",
        "test": "assert     convert_list_dictionary(['a', 'b', 'c'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e']) == {'a': {'a': 'a', 'b': 'b', 'c': 'c'}, 'b': {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd'}, 'c': {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e'}}",
        "num_ids": 2133,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return 0\n    result = input_list[0]\n    for element in input_list[1:]:\n        if len(element) > len(result):\n            result = element\n    return result\n",
        "test": "assert     max_length_list([]) == 0",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    res = True\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                res = False\n                break\n    return res\n",
        "test": "assert     not check_distinct(('m', 'a', 't', 'a', 'x', 'i', 'a'))",
        "num_ids": 824,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str2 = str1.lower()\n    for ch in str2:\n        if str2.count(ch) == 1:\n            return ch\n    return None\n",
        "test": "assert     first_non_repeating_character(\"abcde\") == \"a\"",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string)!=None:\n        print \"True\"\n    else:\n        print \"False\"\ncheck_char(\"abc\")\n",
        "test": "assert ",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    else:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n",
        "test": "assert     median_numbers(1,4,4) == 4",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums = [int(i) for i in nums]\n    total = sum(nums)\n    return total\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple()\n    for a,b in zip(test_tup1, test_tup2):\n        x = (a ^ b)\n        result = result + (x,)\n    return result\n",
        "test": "assert     bitwise_xor((1, 1, 1), (0, 0, 0)) == (1, 1, 1)",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    s_dict = {}\n    for s in test_list:\n        if s in s_dict:\n            s_dict[s] += 1\n        else:\n            s_dict[s] = 1\n    return len(s_dict)\n",
        "test": "assert     extract_freq([]) == 0, \"No tuple\"",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] + test_tup2[i],)\n    return new_tup\n",
        "test": "assert         (add_nested_tuples(((1,2), (3,4)), ((5,6), (7,8)) ) == ((1,2,5,6), (3,4,7,8)) )",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    #Add code here\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert     minimum(2,6) == 2",
        "num_ids": 323,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "test": "assert     check_tuplex(('a', 'b', 'c'),('d',))     == False",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = list(str(x))\n    sum = 0\n    for i in x:\n        sum = sum + int(i)\n    return sum%2\n",
        "test": "assert     find_Parity(25) == True",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    \n    arr = []\n    while n > 0:\n        arr.append(n % 10)\n        n = n // 10\n    \n    arr = sorted(arr)\n    \n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            break\n    \n    if i == 1 and arr[i] == arr[i-1]:\n        return 0\n    \n    arr[i:len(arr)] = arr[i-1:len(arr)-1][::-1]\n    \n    return int(''.join(map(str, arr)))\n",
        "test": "assert     rearrange_bigger(0) == 0",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def pair(x, y):\n        return [min(x, y), max(x, y)]\n    if not nums1 or not nums2:\n        return []\n    res = []\n    heap = []\n    if k >= len(nums1) * len(nums2):\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                res.append(pair(nums1[i], nums2[j]))\n    else:\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                heapq.heappush(heap, pair(nums1[i], nums2[j]))\n        for i in range(k):\n            res.append(heapq.heappop(heap))\n    return res\n",
        "test": "assert     k_smallest_pairs([], [], 1) == []",
        "num_ids": 1800,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    temp=[]\n    for i in list1:\n        temp.append(i[0]*i[1])\n    return min(temp)\n",
        "test": "assert     min_product_tuple([(1, 2), (2, 3), (3, 4)]) == 2",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 410,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n",
        "test": "assert     min_val([1, 4, 3, 5, 7, 6, 2, 5]) == 1",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n",
        "test": "assert     snake_to_camel('__snake__case__') == 'SnakeCase', 'incorrect'",
        "num_ids": 897,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i, tuple in enumerate(list1):\n        if i == n-1:\n            return tuple\n",
        "test": "assert     extract_nth_element([], 0) == None",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(value in list2 for value in list1)\n    #return any(value for value in list1 if value in list2)\n    #return any(value for value in list1 if value in list2)\n    #return any(value for value in list1 if value in list2)\n    #return any(value for value in list1 if value in list2)\n    \ndef smallest(list1):\n    '''\n    Write a python function to find the smallest value in a sequence.\n    '''\n    return min(list1)\n    #return min(list1)\n    #return min(list1)\n    #return min(list1)\n    #return min(list1)\n    #return min(list1)\n    \ndef largest(list1):\n    '''\n    Write a python function to find the largest value in a sequence.\n    '''\n    return max(list1)\n    #return max(list1)\n    #return max(list1)\n    #return max(list1)\n    #return max(list1)\n    #return max(list1)\n    \ndef concatenate(list1,list2):\n    '''\n    Write a python function to concatenate two lists\n    '''\n    return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    \ndef common_items(list1,list2):\n    '''\n    Write a python function to find common items in two sequences\n    '''\n    return list(set(list1).intersection(list2))\n    #return list(set(list1).intersection(list2))\n    #return list(set(list1).intersection(list2))\n    #return list(set(list1).intersection(list2))\n    #return list(set(list1).intersection(list2))\n    #return list(set(list1).intersection(list2))\n    \ndef reverse_list(list1):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return list1[::-1]\n    #return list1[::-1]\n    #return list1[::-1]\n    #return list1[::-1]\n    #return list1[::-1]\n    #return list1[::-1]\n    \ndef sum_lists(list1,list2):\n    '''\n    Write a python function to sum two lists.\n    '''\n    return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    \ndef product_list(list1,list2):\n    '''\n    Write a python function to multiply two lists.\n    '''\n    return list1 * list2\n    #return list1 * list2\n    #return list1 * list2\n    #return list1 * list2\n    #return list1 * list2\n    #return list1 * list2\n    \ndef remove_item(list1,item):\n    '''\n    Write a python function to remove an item from a list.\n    '''\n    return [item for item in list1 if item!= item]\n    #return [item for item in list1 if item!= item]\n    #return [item for item in list1 if item!= item]\n    #return [item for item in list1 if item!= item]\n    #return [item for item in list1 if item!= item]\n    #return [item for item in list1 if item!= item]\n    \ndef remove_items(list1,item):\n    '''\n    Write a python function to remove a list of items from a list.\n    '''\n    return [item for item in list1 if item not in item]\n    #return [item for item in list1 if item not in item]\n    #return [item for item in list1 if item not in item]\n    #return [item for item in list1 if item not in item]\n    #return [item for item in list1 if item not in item]\n    #return [item for item in list1 if item not in item]\n    \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    \ndef reverse_string(string1):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return string1[::-1]\n    #return string1[::-1]\n    #return string1[::-1]\n    #return string1[::-1]\n    #return string1[::-1]\n    #return string1[::-1]\n    \ndef sort_list(list1):\n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(list1)\n    #return sorted(list1)\n    #return sorted(list1)\n    #return sorted(list1)\n    #return sorted(list1)\n    #return sorted(list1)\n    \ndef unique_list(list1):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    \ndef split_list(list1):\n    '''\n    Write a python function to split a list into two equal lengths.\n    '''\n    length = len(list1)\n    half = length/2\n    return [list1[i:i+half] for i in range(0, half)]\n    #return [list1[i:i+half] for i in range(0, half)]\n    #return [list1[i:i+half] for i in range(0, half)]\n    #return [list1[i:i+half] for i in range(0, half)]\n    #return [list1[i:i+half] for i in range(0, half)]\n    \ndef swap_list(list1):\n    '''\n    Write a python function to swap first and last items in a list.\n    '''\n    return list1[-1:] + list1[:-1]\n    #return list1[-1:] + list1[:-1]\n    #return list1[-1:] + list1[:-1]\n    #return list1[-1:] + list1[:-1]\n    #return list1[-1:] + list1[:-1]\n    #return list1[-1:] + list1[:-1]\n    \ndef length_list(list1):\n    '''\n    Write a python function to calculate the length of a list.\n    '''\n    return len(list1)\n    #return len(list1)\n    #return len(list1)\n    #return len(list1)\n    #return len(list1)\n    #return len(list1)\n    \ndef mean(list1):\n    '''\n    Write a python function to calculate the mean of a list.\n    '''\n    return sum(list1)/len(list1)\n    #return sum(list1)/len(list1)\n    #return sum(list1)/len(list1)\n    #return sum(list1)/len(list1)\n    #return sum(list1)/len(list1)\n    #return sum(list1)/len(list1)\n    \ndef median(list1):\n    '''\n    Write a python function to calculate the median of a list.\n    '''\n    list1.sort()\n    length = len(list1)\n    if length % 2 == 0:\n        return (list1[length/2] + list1[length/2 -1]) / 2.0\n    else:\n        return list1[length/2]\n    #return (list1[length/2] + list1[length/2 -1]) ",
        "test": "assert     (overlapping([1, 2, 3, 4, 5, 6], [7, 8, 9, 10]) == False)",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = arr[0]\n    temp = max\n    for i in range(1,len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n        if arr[i]<0:\n            temp *=arr[i]\n    return temp\n",
        "test": "assert     max_Product([-1, -2, -3]) == -6",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Temp = []\n    for elem in Input:\n        Temp.append(elem[0])\n    Temp = set(Temp)\n    Temp = list(Temp)\n    Output = []\n    for elem in Input:\n        for item in Temp:\n            if item in elem:\n                Output.append(item)\n    return Output\n",
        "test": "assert     group_tuples([('a', 1), ('b', 1), ('c', 1)]) == ['a', 'b', 'c'], \"First element of tuples in the list\"",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_len_element = None\n    for element in lst: \n        if len(element)>max_len:\n            max_len = len(element)\n            max_len_element = element\n    return max_len_element\n",
        "test": "assert     Find_Max([]) == None",
        "num_ids": 2731,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    tot = 0\n    for i in list1:\n        tot += round(i)\n    return round(tot) * len(list1)\n",
        "test": "assert     round_and_sum([2.3, 3.5, 4.1]) == round(15.1), \"Checking round_and_sum()\"",
        "num_ids": 819,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    s = n*(n+1)*(2*n+1) / 6\n    return s\n",
        "test": "assert     (cube_Sum(0) == 0)",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_tup = \"\".join(test_tup)\n    return concatenated_tup\n",
        "test": "assert     concatenate_tuple(('I', 'am', 'a', 'boy')) == 'Iamaboy'",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    summation = 0\n    for i in range(1, n+1):\n        summation = summation + i**3\n    return summation / n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 2814,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(x[-1] for x in test_tuple)\n",
        "test": "assert     extract_rear(('Google', 'Gogle', 'Goole', 'Apple')) == ('e', 'e', 'e', 'e')",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([], 1) == 0",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2!= 0]\n",
        "test": "assert     filter_oddnumbers([0, 1, 2, 3, 4, 5]) == [1, 3, 5], \"check your function\"",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match('\\d{4}-\\d{2}-\\d{2}', dt):\n        dt = dt.replace('-', '-')\n    return dt\n",
        "test": "assert     change_date_format('12-12-12') == '12-12-12'",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([]) == [], 'error test 4'",
        "num_ids": 1302,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    # for each tuple:\n    #    for each element of the tuple:\n    #        if element of tuple1 is equal to element of tuple2:\n    #            add element to the and_list\n    #        else:\n    #            return the or_list\n    \n    return [elem1 and elem2 for elem1, elem2 in zip(test_tup1, test_tup2)]\n    \n    \n",
        "test": "assert ",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # directrix\n    x_d = (b**2) - 4*a*c\n    x_d = x_d **.5\n    \n    # solve for y\n    y_d = -1*(b/2*a)\n    \n    # calculate and return the value\n    return (x_d, y_d)\n",
        "test": "assert ",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "test": "assert     (common_element([1,2,3,4], [3,4,5,6]) == True)",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2.0\n",
        "test": "assert     median_trapezium(1,1,1) == 1",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([2, 3, 4, 6, 7, 8], 6)",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match(\"a+b\", text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_one(\"ab\") == True",
        "num_ids": 482,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "test": "assert     last_Digit(0) == 0",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    nos = []\n    for i in list1:\n        if i < 0:\n            nos.append(i)\n    return nos\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 614,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])\n",
        "test": "assert     remove_odd('Hi') == 'H'",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0] and test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count\n",
        "test": "assert     count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3), (3, 2)]) == 2",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n    \n",
        "test": "assert     multiple_to_single([1,2,3,4,5,6]) == 123456",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(' ')\n    for i in range(len(sentence)):\n        if sentence[i] == 'adverb':\n            return (i,sentence[i-1])\n",
        "test": "assert     find_adverb_position('How did you get 80?') == {'adverb': 'a student', 'position': 'How'}",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n",
        "test": "assert     surfacearea_cube(1) == 6",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\ndef search_min(nums):\n    '''\n    Write a function to find the minimum number in an array of non-negative integers.\n    '''\n    min = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min:\n            min = nums[i]\n    return min\ndef search_max(nums):\n    '''\n    Write a function to find the maximum number in an array of non-negative integers.\n    '''\n    max = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n    return max\ndef search_diff(nums):\n    '''\n    Write a function to find the maximum difference between two elements in an array\n    '''\n    diff = nums[1] - nums[0]\n    for i in range(1, len(nums)-1):\n        if nums[i+1] - nums[i] > diff:\n            diff = nums[i+1] - nums[i]\n    return diff\ndef search_range(nums):\n    '''\n    Write a function that returns the range of a given array\n    '''\n    min = nums[0]\n    max = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min:\n            min = nums[i]\n        if nums[i] > max:\n            max = nums[i]\n    return max - min + 1\ndef sort_by_index(nums, indices):\n    '''\n    Write a function to sort an array by the given indices.\n    '''\n    for i in range(0, len(nums)):\n        for j in range(i+1, len(nums)):\n            if indices[j] < indices[i]:\n                temp = indices[j]\n                indices[j] = indices[i]\n                indices[i] = temp\n                temp = nums[j]\n                nums[j] = nums[i]\n                nums[i] = temp\n    return nums\ndef most_common(nums):\n    '''\n    Write a function to find the most common element in an array.\n    '''\n    from collections import Counter\n    return Counter(nums).most_common()[0][0]\ndef palindrome(nums):\n    '''\n    Write a function to check whether an array is a palindrome.\n    '''\n    temp = nums[:]\n    temp.reverse()\n    return temp == nums\ndef rotate(nums):\n    '''\n    Write a function to rotate an array by k elements.\n    '''\n    n = len(nums)\n    k = k % n\n    for i in range(0, k):\n        temp = nums[i]\n        nums[i] = nums[n-i-1]\n        nums[n-i-1] = temp\n    return nums\ndef remove_elements(nums, val):\n    '''\n    Write a function to remove all the elements from an array that are\n    present at the given index.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i] == val:\n            del nums[i]\n            break\n    return nums\ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates from an array and keep the\n    order of elements in the original array.\n    '''\n    if len(nums) < 2:\n        return nums\n    prev = nums[0]\n    for i in range(1, len(nums)):\n        if prev!= nums[i]:\n            prev = nums[i]\n            nums[i] = nums[i-1]\n    return nums\ndef rearrange_digits(nums):\n    '''\n    Rearrange Array Elements so as to form two number such that their\n    sum is maximum.\n    '''\n    nums = sorted(nums)\n    a = 0\n    b = 0\n    for i in range(0, len(nums)):\n        a = a*10 + nums[i]\n    for i in range(len(nums)-1, -1, -1):\n        b = b*10 + nums[i]\n    return [a, b]\ndef first_and_last(nums):\n    '''\n    Write a function that returns a new array containing the first and\n    last elements of the given array.\n    '''\n    return [nums[0], nums[len(nums)-1]]\ndef find_missing_number(nums):\n    '''\n    Write a function that returns the missing element from an array.\n    '''\n    result = 0\n    for i in range(0, len(nums)):\n        result ^= nums[i]\n    for i in range(0, len(nums)):\n        result ^= i+1\n    return result\ndef max_consecutive_ones(nums):\n    '''\n    Write a function to find the maximal length of the consecutive\n    elements with the same value in an array.\n    '''\n    result = 0\n    max = 0\n    for i in range(0, len(nums)):\n        if nums[i] == 1:\n            result += 1\n        else:\n            if result > max:\n                max = result\n            result = 0\n    if result > max:\n        max = result\n    return max\ndef find_factors(nums):\n    '''\n    Write a function to find all the prime factors of an integer.\n    '''\n    result = []\n    i = 2\n    while i*i <= nums:\n        if nums % i == 0:\n            result.append(i)\n            nums /= i\n        else:\n            i += 1\n    if nums > 1:\n        result.append(nums)\n    return result\ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate an array of matrix elements.\n    '''\n    length = len(matrix)\n    for i in range(0, int(length/2)):\n        for j in range(i, length-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[length-j-1][i]\n            matrix[length-j-1][i] = matrix[length-i-1][length-j-1]\n            matrix[length-i-1][length-j-1] = matrix[j][length-i-1]\n            matrix[j][length-i-1] = temp\n    return matrix\ndef flip_matrix_horizontal(matrix):\n    '''\n    Write a function to flip an array of matrix elements vertically.\n    '''\n    length = len(matrix)\n    for i in range(0, length/2):\n        for j in range(i, length-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[length-j-1][i]\n            matrix[length-j-1][i] = matrix[length-i-1][length-j-1]\n            matrix[length-i-1][length-j-1] = matrix[j][length-i-1]\n            matrix[j][length-i-1] = temp\n    return matrix\ndef max_product_subarray(nums):\n    '''\n    Write a function to find the maximum product of two numbers\n    in an array.\n    '''\n    left = 0\n    right = 0\n    result = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > 0:\n            left = i\n        else:\n            if i - left > right - i:\n                right = i\n    for i in range(left, len(nums)):\n        if nums[i] > 0:\n            right = i\n        else:\n            if i - left > right - i:\n                right = i\n    return max",
        "test": "assert     positive_count([-1, 1, -1, 1, -1, 1, -1, 1]) == 0.5",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = min_num = 0\n    for num in list1:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return min_num\n",
        "test": "assert     largest_neg([1,-2,3,4,5,6]) == -2",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tuple in test_list:\n        new_tuple = tuple[0:K]\n        new_list.append(new_tuple)\n    return new_list\n",
        "test": "assert     trim_tuple([(0,0),(0,1),(1,2),(2,0),(2,1),(2,2)],2)    ==     [(0,0),(0,1),(1,2),(2,0),(2,1),(2,2)]",
        "num_ids": 1363,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # test_tup1 = (1, 2, 3)\n    # test_tup2 = (4, 5, 6)\n    index_multiplication = tuple((x1*x2 for x1, x2 in zip(test_tup1, test_tup2)))\n    print(index_multiplication)\n    \nindex_multiplication((1, 2, 3), (4, 5, 6))\n",
        "test": "assert ",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tup.count(lst) \ndef find_Most_common(lst): \n    '''\n    Write a python function to find the most common element of list. \n    '''\n    data = Counter(lst)\n    return max(lst, key=lambda x: data[x]) \ndef count_occur_dup(lst): \n    '''\n    Write a python function to count the number of duplicated elements in a list. \n    '''\n    return sum(1 for x in lst if lst.count(x)>1) \ndef remove_dup(lst): \n    '''\n    Write a python function to remove the duplicated elements in a list. \n    '''\n    return list(set(lst)) \ndef find_GCD(lst): \n    '''\n    Write a python function to find the GCD of a list. \n    '''\n    lst.sort()\n    gcd = lst[0] \n    for i in lst[1:]: \n        if i % gcd!= 0: \n            gcd = gcd \n        else: \n            gcd = i \n    return gcd\ndef find_LCM(lst): \n    '''\n    Write a python function to find the L.C.M of a list. \n    '''\n    lst.sort()\n    lcm = lst[0] \n    for i in lst[1:]: \n        lcm = lcm * i // gcd(lcm, i) \n    return lcm\ndef convert_string_to_list(string): \n    '''\n    Write a python function to convert a string to list. \n    '''\n    return list(string) \ndef find_common_elements(lst1, lst2): \n    '''\n    Write a python function to find the common elements of 2 lists. \n    '''\n    return list(set(lst1) & set(lst2)) \ndef find_common_element(lst1, lst2): \n    '''\n    Write a python function to find the common element of 2 lists. \n    '''\n    return list(set(lst1) & set(lst2)) \ndef is_rotation(lst1, lst2): \n    '''\n    Write a python function to find if 2 list are rotations of each other. \n    '''\n    return lst1[1:] == lst2[:-1] \ndef is_rotation2(lst1, lst2): \n    '''\n    Write a python function to find if 2 list are rotations of each other. \n    '''\n    return lst1[:-1] == lst2[1:] \ndef rotate(lst, n): \n    '''\n    Write a python function to rotate a list by n elements. \n    '''\n    return lst[n:] + lst[:n] \ndef find_rotate_sequence(lst): \n    '''\n    Write a python function to find a rotate sequence of a list. \n    '''\n    lst.sort()\n    if len(lst) == 0: \n        return 0 \n    elif len(lst) == 1: \n        return 0 \n    elif len(lst) == 2: \n        return 0 \n    else: \n        for i in range(len(lst)-2): \n            if lst[i] < lst[i+1] and lst[i+1] > lst[i+2]: \n                return i+1 \ndef find_rotate_sequence_2(lst): \n    '''\n    Write a python function to find a rotate sequence of a list. \n    '''\n    lst.sort()\n    if len(lst) == 0: \n        return 0 \n    elif len(lst) == 1: \n        return 0 \n    elif len(lst) == 2: \n        return 0 \n    else: \n        for i in range(len(lst)-2): \n            if lst[i] < lst[i+1] and lst[i+1] > lst[i+2]: \n                return i+1 \ndef find_rotate_sequence_3(lst): \n    '''\n    Write a python function to find a rotate sequence of a list. \n    '''\n    lst.sort()\n    if len(lst) == 0: \n        return 0 \n    elif len(lst) == 1: \n        return 0 \n    elif len(lst) == 2: \n        return 0 \n    else: \n        for i in range(len(lst)-2): \n            if lst[i] < lst[i+1] and lst[i+1] > lst[i+2]: \n                return i+1 \ndef find_rotate_sequence_4(lst): \n    '''\n    Write a python function to find a rotate sequence of a list. \n    '''\n    lst.sort()\n    if len(lst) == 0: \n        return 0 \n    elif len(lst) == 1: \n        return 0 \n    elif len(lst) == 2: \n        return 0 \n    else: \n        for i in range(len(lst)-2): \n            if lst[i] < lst[i+1] and lst[i+1] > lst[i+2]: \n                return i+1 \ndef find_rotate_sequence_5(lst): \n    '''\n    Write a python function to find a rotate sequence of a list. \n    '''\n    lst.sort()\n    if len(lst) == 0: \n        return 0 \n    elif len(lst) == 1: \n        return 0 \n    elif len(lst) == 2: \n        return 0 \n    else: \n        for i in range(len(lst)-2): \n            if lst[i] < lst[i+1] and lst[i+1] > lst[i+2]: \n                return i+1 \ndef find_rotate_sequence_6(lst): \n    '''\n    Write a python function to find a rotate sequence of a list. \n    '''\n    lst.sort()\n    if len(lst) == 0: \n        return 0 \n    elif len(lst) == 1: \n        return 0 \n    elif len(lst) == 2: \n        return 0 \n    else: \n        for i in range(len(lst)-2): \n            if lst[i] < lst[i+1] and lst[i+1] > lst[i+2]: \n                return i+1 \ndef find_rotate_sequence_7(lst): \n    '''\n    Write a python function to find a rotate sequence of a list. \n    '''\n    lst.sort()\n    if len(lst) == 0: \n        return 0 \n    elif len(lst) == 1: \n        return 0 \n    elif len(lst) == 2: \n        return 0 \n    else: \n        for i in range(len(lst)-2): \n            if lst[i] < lst[i+1] and lst[i+1] > lst[i+2]: \n                return i+1 \ndef is_rotate_sequence(lst1, lst2): \n    '''\n    Write a python function to find if 2 list are rotations of each other. \n    '''\n    return lst1[1:] == lst2[:-1] \ndef is_rotate_sequence2(lst1, lst2): \n    '''\n    Write a python function to find if 2 list are rotations of each other. \n    '''\n    return lst1[:-1] == lst2[1:] \ndef is_rotate_sequence3(lst1, lst2): \n    '''\n    Write a python function to find if 2 list are rotations of each other. \n    '''",
        "test": "assert     count_Occurrence((1,2,3,3), [1,2,3,2]) == 0",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 3\n    return nums\n",
        "test": "assert     [] == cube_nums([])",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n+cal_sum(n-1)\n",
        "test": "assert     cal_sum(100)     == 5050",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) > l:\n        return str[0:l]\n    else:\n        return str\n",
        "test": "assert     extract_string('abcdef', 1) == 'a', \"extract_string('abcdef', 1)!= 'a'\"",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # re.sub(pattern, replace, string)\n    # pattern : The regular expression to remove.\n    # replace : A pattern or function to replace the pattern.\n    # string : The string to remove the pattern from.\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert     remove_whitespaces(\"remove_whitespaces\")     == \"remove_whitespaces\", \"remove_whitespaces\"",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    return 0\n",
        "test": "assert     loss_amount(100,100) == 0",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n % 2 == 0) : \n        return 2\n    else : \n        sum = 0\n        for i in range(1, int(math.sqrt(n)) + 1) : \n            if (n % i == 0) : \n                if (i % 2 == 0) : \n                    sum += i \n                if (i * i == n) : \n                    sum += i \n        return sum\ndef isPerfectNumber(n) : \n    '''\n    Write a python function to find if a number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum += i\n    return (sum == n) \ndef convertToRoman(num) : \n    '''\n    Write a python function to convert a decimal integer to a Roman numeral.\n    '''\n    rn = ''\n    while (num > 0) : \n        rn += roman[num % 10]\n        num = num // 10\n    return rn\ndef printRoman(n) : \n    '''\n    Write a python function to convert a Roman numeral to a decimal integer.\n    '''\n    rn = ''\n    rn = roman[n[0]]\n    rn = rn * (10 ** (len(n) - 1))\n    rn = rn + roman[n[1]]\n    rn = rn + roman[n[2]]\n    rn = rn + roman[n[3]]\n    rn = rn + roman[n[4]]\n    rn = rn + roman[n[5]]\n    rn = rn + roman[n[6]]\n    rn = rn + roman[n[7]]\n    rn = rn + roman[n[8]]\n    rn = rn + roman[n[9]]\n    rn = rn + roman[n[10]]\n    rn = rn + roman[n[11]]\n    rn = rn + roman[n[12]]\n    rn = rn + roman[n[13]]\n    rn = rn + roman[n[14]]\n    rn = rn + roman[n[15]]\n    rn = rn + roman[n[16]]\n    rn = rn + roman[n[17]]\n    rn = rn + roman[n[18]]\n    rn = rn + roman[n[19]]\n    rn = rn + roman[n[20]]\n    rn = rn + roman[n[21]]\n    rn = rn + roman[n[22]]\n    rn = rn + roman[n[23]]\n    rn = rn + roman[n[24]]\n    rn = rn + roman[n[25]]\n    rn = rn + roman[n[26]]\n    rn = rn + roman[n[27]]\n    rn = rn + roman[n[28]]\n    rn = rn + roman[n[29]]\n    rn = rn + roman[n[30]]\n    rn = rn + roman[n[31]]\n    rn = rn + roman[n[32]]\n    rn = rn + roman[n[33]]\n    rn = rn + roman[n[34]]\n    rn = rn + roman[n[35]]\n    rn = rn + roman[n[36]]\n    rn = rn + roman[n[37]]\n    rn = rn + roman[n[38]]\n    rn = rn + roman[n[39]]\n    rn = rn + roman[n[40]]\n    rn = rn + roman[n[41]]\n    rn = rn + roman[n[42]]\n    rn = rn + roman[n[43]]\n    rn = rn + roman[n[44]]\n    rn = rn + roman[n[45]]\n    rn = rn + roman[n[46]]\n    rn = rn + roman[n[47]]\n    rn = rn + roman[n[48]]\n    rn = rn + roman[n[49]]\n    rn = rn + roman[n[50]]\n    rn = rn + roman[n[51]]\n    rn = rn + roman[n[52]]\n    rn = rn + roman[n[53]]\n    rn = rn + roman[n[54]]\n    rn = rn + roman[n[55]]\n    rn = rn + roman[n[56]]\n    rn = rn + roman[n[57]]\n    rn = rn + roman[n[58]]\n    rn = rn + roman[n[59]]\n    rn = rn + roman[n[60]]\n    rn = rn + roman[n[61]]\n    rn = rn + roman[n[62]]\n    rn = rn + roman[n[63]]\n    rn = rn + roman[n[64]]\n    rn = rn + roman[n[65]]\n    rn = rn + roman[n[66]]\n    rn = rn + roman[n[67]]\n    rn = rn + roman[n[68]]\n    rn = rn + roman[n[69]]\n    rn = rn + roman[n[70]]\n    rn = rn + roman[n[71]]\n    rn = rn + roman[n[72]]\n    rn = rn + roman[n[73]]\n    rn = rn + roman[n[74]]\n    rn = rn + roman[n[75]]\n    rn = rn + roman[n[76]]\n    rn = rn + roman[n[77]]\n    rn = rn + roman[n[78]]\n    rn = rn + roman[n[79]]\n    rn = rn + roman[n[80]]\n    rn = rn + roman[n[81]]\n    rn = rn + roman[n[82]]\n    rn = rn + roman[n[83]]\n    rn = rn + roman[n[84]]\n    rn = rn + roman[n[85]]\n    rn = rn + roman[n[86]]\n    rn = rn + roman[n[87]]\n    rn = rn + roman[n[88]]\n    rn = rn + roman[n[89]]\n    rn = rn + roman[n[90]]\n    rn = rn + roman[n[91]]\n    rn = rn + roman[n[92]]\n    rn = rn + roman[n[93]]\n    rn = rn + roman[n[94]]\n    rn = rn + roman[n[95]]\n    rn = rn + roman[n[96]]\n    rn = rn + roman[n[97]]\n    rn = rn + roman[n[98]]\n    rn = rn + roman[n[99]]\n    rn = rn + roman[n[100]]\n    rn = rn + roman[n[101]]\n    rn = rn + roman[n[102]]\n    rn = rn + roman[n[103]]\n    rn = rn + roman[n[104]]\n    rn = rn + roman[n[105]]\n    rn = rn + roman[n[106]]\n    rn = rn + roman[n[107]]\n    rn = rn + roman[n[108]]\n    rn = rn + roman[n[109]]\n    rn = rn + roman[n[110]]\n    rn = rn + roman[n[111]]\n    rn = rn + roman[n[112]]\n    rn = rn + roman[n[113]]\n    rn = rn + roman[n[114]]\n    rn = rn + roman[n[115]]\n    rn = rn + roman[n[116]]\n    rn = rn + roman[n[117]]\n    rn = rn + roman[n[118]]\n    rn = rn + roman[n[119]]\n    rn = rn + roman[n[120]]\n    rn = rn + roma",
        "test": "assert     sumofFactors(3) == 0",
        "num_ids": 2213,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('z',text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz('This is a test to see if z is there in the text')",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 17,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    return True\n",
        "test": "assert     check_monthnumb_number(1) == True",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]\n",
        "test": "assert     reverse_string_list([\"\", \"\"])                         == [\"\", \"\"]",
        "num_ids": 931,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #start your solution here\n    return lst[0]\n    \n    \n    ",
        "test": "assert     Find_Min([['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S'], ['T', 'U', 'V', 'W', 'X', 'Y', 'Z']]) == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S']",
        "num_ids": 1573,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert     rectangle_area(1,1) == 1",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    upper=False\n    str2=''\n    for c in str1:\n        if c.isupper() and upper==False:\n            str2+=c\n        elif c.isupper() and upper==True:\n            str2+=' '+c\n        else:\n            str2+=c\n        upper=not(upper)\n    return str2\n",
        "test": "assert     remove_uppercase('i am atul') == 'i am atul'",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[i][0] for i in range(len(lst))]\n",
        "test": "assert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if(ch.isupper()):\n            count = count + 1\n    return count\n",
        "test": "assert     upper_ctr('Hi All, My name is Ravi') == 4",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    output = []\n    #base case\n    if len(list1) == 1:\n        return [list1]\n",
        "test": "assert combinations_list([1]) == [[1]]",
        "num_ids": 1497,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max = arr[0]\n    global_max_list = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            global_max = max(global_max, arr[i])\n        global_max_list.append(max(arr[i], arr[i]*global_max_list[i-1]))\n    return max(global_max_list)\n",
        "test": "assert     max_subarray_product([2, 3, -2, 4]) == 6",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        val = list(dict.values())[0]\n        for item in dict:\n            if val!= dict[item]:\n                return False\n        return True\n",
        "test": "assert check_value({'a': 1, 'b': 2, 'c': 2}, 3) == False",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not dict1:\n        return dict1\n    return {k: v for k, v in dict1.items() if v}\n    \n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 648,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # take max product of all the subarrays\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], arr[i]*max_product)\n    return max_product\n",
        "test": "assert     max_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_of_pairs = 0\n    for idx, elem in enumerate(test_tup):\n        if idx == 0:\n            continue\n        sum_of_pairs += elem\n    return sum_of_pairs\n",
        "test": "assert ",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in arr:\n        res = (res * i) % n\n    return res\n",
        "test": "assert     find_remainder([2, 3, 1], 5) == 1",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l= sorted(l)\n    for i in range(1,len(l)):\n        if l[i]-l[i-1]!=1:\n            return False\n    return True\n",
        "test": "assert     check_Consecutive([1,2,3,4,5,6,7,8,9])",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list=[]\n    for i in test_list1:\n        for j in test_list2:\n            if i==j:\n                new_list.append(i)\n                test_list2.remove(j)\n                break\n    return new_list\n",
        "test": "assert     tuple_intersection([(1,2),(3,4),(5,6)],[(3,6),(1,2)]) == [(1,2)]",
        "num_ids": 1087,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    a = str1.split(ch)\n    str1 = newch.join(a)\n    return str1\n",
        "test": "assert     replace_char('love','a','A') == 'love'",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n",
        "test": "assert     sort_counter({}) == []",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = 0\n    min = 0\n    for i in range(0, len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        elif nums[i] < min:\n            min = nums[i]\n    return max + min\n",
        "test": "assert     big_sum([]) == 0",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    assert isinstance(string, str)\n    return string.lower()\n",
        "test": "assert     is_lower('python') == True,    'is_lower(\"python\") should be True'",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n",
        "test": "assert     re.sub('[aeiou]', '', 'PYthoN')    == 'ythn', \"should be ytn\"",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n < 0) :\n        n = n * (-1)\n    if (n == 0) :\n        return 0\n    while (n) :\n        r = n % 10\n        n = n / 10\n        return r\n",
        "test": "assert     first_Digit(12345)    == 5",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i%2 == 1:\n            odds.append(i)\n    return odds\n",
        "test": "assert     Split([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 2680,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # return (n * (n + 1) * (2 * n + 1)) / 6\n    return n * (n + 1) * (2 * n + 1) / 6\n",
        "test": "assert     difference(0)     == 0",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Hint: Use the xor operator\n    Cnt = 0\n    for i in range(0,N-1) : \n        for j in range(i+1,N) : \n            if A[i] ^ A[j] & 1 : \n                Cnt += 1\n    return Cnt\n",
        "test": "assert     find_Odd_Pair( [1,3,3,2,4,5,7], 1 ) == 0",
        "num_ids": 2115,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert         toggle_string('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'",
        "num_ids": 1220,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    len1 = len(str(n1))\n    len2 = len(str(n2))\n    if len1 > len2:\n        for i in range(len1 - len2):\n            n2 = '0' + str(n2)\n    else:\n        for i in range(len2 - len1):\n            n1 = '0' + str(n1)\n    num1 = str(n1)\n    num2 = str(n2)\n    num1 = num1[::-1]\n    num2 = num2[::-1]\n    arr1 = list(num1)\n    arr2 = list(num2)\n    ans = 0\n    for i in range(len(arr1)):\n        ans += abs(int(arr1[i]) - int(arr2[i]))\n    return ans\n",
        "test": "assert     digit_distance_nums(12345, 12345) == 0",
        "num_ids": 2754,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n",
        "test": "assert     max_sub_array_sum([], 0) == 0",
        "num_ids": 856,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n    else:\n        return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n",
        "test": "assert     union_elements((0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0))     ==    (0, 0, 0, 0, 0, 0)",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxlength = 0\n    for i in range(len(lst)):\n        count = 0\n        for j in range(i, len(lst)):\n            count = count + 1\n            if lst[j] == lst[i]:\n                maxlength = max(maxlength, count)\n    return maxlength\n",
        "test": "assert     Find_Max_Length([]) == 0",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        pos = text.index('\"')\n        return text[pos+1:text.rindex('\"')]\n    except ValueError:\n        return text\n",
        "test": "assert     extract_values('\"abc\"') == 'abc', extract_values('\"abc\"')",
        "num_ids": 2633,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 0 and dictionary[arr[j]] > 0:\n                count += 1\n            dictionary[arr[i]] -= 1\n            dictionary[arr[j]] -= 1\n    return count\n    \n    \ndef count_Pairs_Worst(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 1 and dictionary[arr[j]] > 1:\n                count += 1\n            dictionary[arr[i]] -= 1\n            dictionary[arr[j]] -= 1\n    return count\n    \n    \ndef count_Pairs_Best(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 0 and dictionary[arr[j]] > 0:\n                count += 1\n            dictionary[arr[i]] -= 1\n            dictionary[arr[j]] -= 1\n    return count\n    \n    \ndef count_Pairs_Best_2(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 0 and dictionary[arr[j]] > 0:\n                count += 1\n            dictionary[arr[i]] -= 1\n            dictionary[arr[j]] -= 1\n    return count\n    \n    \ndef count_Pairs_Best_3(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 0 and dictionary[arr[j]] > 0:\n                if arr[i] < arr[j]:\n                    count += 1\n                elif arr[i] > arr[j]:\n                    count += 1\n                dictionary[arr[i]] -= 1\n                dictionary[arr[j]] -= 1\n    return count\n    \n    \ndef count_Pairs_Best_4(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 0 and dictionary[arr[j]] > 0:\n                if arr[i] < arr[j]:\n                    count += 1\n                elif arr[i] > arr[j]:\n                    count += 1\n                dictionary[arr[i]] -= 1\n                dictionary[arr[j]] -= 1\n    return count\n    \n    \ndef count_Pairs_Best_5(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 0 and dictionary[arr[j]] > 0:\n                if arr[i] < arr[j]:\n                    count += 1\n                elif arr[i] > arr[j]:\n                    count += 1\n                dictionary[arr[i]] -= 1\n                dictionary[arr[j]] -= 1\n    return count\n    \n    \ndef count_Pairs_Best_6(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 0 and dictionary[arr[j]] > 0:\n                if arr[i] < arr[j]:\n                    count += 1\n                elif arr[i] > arr[j]:\n                    count += 1\n                dictionary[arr[i]] -= 1\n                ",
        "test": "assert     count_Pairs([1,2,3,4,5,6,3,2,5,2,7,1,3,4,5,2,1],12) == 4",
        "num_ids": 3144,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split('w3') == ['w', '3']",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int,str(n)))\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n",
        "test": "assert     issort_list([1, 2, 3, 4, 5])",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in range(length)]\n",
        "test": "assert     empty_list(0)     == []",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    for i in list1:\n        sublists.append(i)\n    sublists.sort(key=lambda x:x[0])\n    return sublists\n",
        "test": "assert     sort_sublists([['a', 'b'], ['c', 'd'], ['e', 'f']]) == [['a', 'b'], ['c', 'd'], ['e', 'f']]",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for num in nums:\n        if num not in unique:\n            unique.append(num)\n    return unique\n",
        "test": "assert     two_unique_nums([1, 2, 2, 1, 1, 4]) == [1, 2, 4], \"incorrect\"",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    product = 1\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n            product = product * number\n    return product\n",
        "test": "assert     unique_product([1,1,1,1,1,1,1,1,1]) == 1",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    return (2 * 3.14 * r * h) + (2 * 3.14 * (r ** 2))\n",
        "test": "assert     surfacearea_cylinder(0,1) == 0",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False\n    for i in range(len(B)): \n        if B[i] not in A: \n            return False\n    return True\n",
        "test": "assert     is_Sub_Array( [10,5,6], [4,6])     == False",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n%10\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    set1 = set(tup1)\n    set2 = set(tup2)\n    set_diff = set1.difference(set2)\n    list_diff = list(set_diff)\n    return list_diff\n",
        "test": "assert     find_dissimilar(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')) == []",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n",
        "test": "assert ",
        "num_ids": 2665,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b * s * 2 + b * (b - 1) * 2 + (s - 1) * s\n    \ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b * s) * 2 + (b * (b - 1)) * 2 + (s - 1) * s\n",
        "test": "assert     surface_Area(2,3) == 22",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return False\n    return True\n",
        "test": "assert     my_dict({\"key\":\"value\"}) == True",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return 2*catalan_number(num-1) - catalan_number(num-2)\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    a=re.findall('ly\\b',text)\n    print a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     find_adverbs('i am a pen is a pen') == [('i', '1'), ('a', '5'), ('pen', '10')]",
        "num_ids": 2828,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for item in items:\n        heapq.heappush(heap,item)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return heap\n",
        "test": "assert expensive_items([],0) == []",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr=[]\n    for i in range(0, len(l), n):\n        arr.append(l[i:i+n])\n    return arr\n",
        "test": "assert     split_Arr([1,2,3,4,5], 3) == [[1,2,3], [4,5]]",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1,2,3,4,5]) == (1,2,3,4,5)",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([7,6,5,4,3,2,1]) == 6, 'incorrect'",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i*i for i in range(a, b+1) if i*i >= a and i*i <= b]\n",
        "test": "assert     perfect_squares(1, 1) == [1]",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)+abs(y)\n    angle = cmath.phase(complex(x,y))\n    if x < 0 and y < 0:\n        angle = abs(angle)\n    elif x < 0 and y > 0:\n        angle = abs(angle)+cmath.pi\n    elif x > 0 and y > 0:\n        angle = cmath.pi+abs(angle)\n    elif x > 0 and y < 0:\n        angle = abs(angle)+cmath.pi\n    elif x == 0 and y == 0:\n        angle = 0\n    return r,angle\n",
        "test": "assert     polar_rect(1,0)     == (1,0)",
        "num_ids": 2059,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n",
        "test": "assert     swap_List([1]) == [1], \"Failed\"",
        "num_ids": 670,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    if n>k:\n        for i in range(1,k+1):\n            res = res*(n-i+1)/i\n    elif n==k:\n        res = 1\n    else:\n        for i in range(1,n+1):\n            res = res*i/k\n    return res\n",
        "test": "assert     binomial_Coeff(10, 0) == 1",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if not ip:\n        return None\n    if ip.startswith('0.'):\n        ip = ip.replace('0.', '', 1)\n    return ip\n",
        "test": "assert     removezero_ip(\"1.2.3.4\") == \"1.2.3.4\"",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[1] - list1[0]\n",
        "test": "assert     diff_even_odd([0,0,1,2,3,4,5,6,7,8,9,10,11]) == 0",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1, str2 = str1.lower(), str2.lower()\n    k = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] : \n            k += 1\n            str1 = str1[:i] + str1[i+1:] + str1[i] + str2[i+1:]\n            str2 = str2[:i] + str2[i+1:] + str2[i] + str1[i+1:]\n    return k\n",
        "test": "assert     min_Swaps('101010110101010110101010110010','101010110101010110101010110010') == 0",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_list = [1,2,3,4,5]\n    tuple_len = 0\n    for i in tuple_list:\n        tuple_len += sys.getsizeof(i)\n    print(tuple_len)\n    # 5\n    \ndef tuple_len(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_len = 0\n    for i in tuple_list:\n        tuple_len += sys.getsizeof(i)\n    print(tuple_len)\n    # 6\n",
        "test": "assert ",
        "num_ids": 2898,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    if k == 0:\n        return arr1[0]\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if i + 1 == k:\n                return arr1[i]\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if j + 1 == k:\n                return arr2[j]\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return arr1[i] if i < len(arr1) else arr2[j]\n",
        "test": "assert     find_kth([1,3,4,5,6], [2,4,7,8,9], 0) == 1",
        "num_ids": 1008,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    order = len(str(number))\n    sum = 0\n    while num:\n        digit = num % 10\n        sum += digit ** order\n        num //= 10\n    if number == sum:\n        return True\n    else:\n        return False\n",
        "test": "assert     armstrong_number(12) == False",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    sum = 0\n    average = 0\n    \n    for i in range(1, number+1):\n        sum += i\n    \n    average = sum / number\n    \n    return sum, average\n",
        "test": "assert     sum_average(1) == (1.0, 1.0)",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True\n    else :\n        return False\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 :\n        for i in range(2, n) :\n            if (n % i) == 0 :\n                return False\n        return True\n    else :\n        return False\n    \ndef factorial(n) : \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if n == 0 :\n        return 1\n    else :\n        return n * factorial(n-1)\n",
        "test": "assert     is_Even(10) == True",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = {}\n    for i in str1:\n        if i in seen:\n            return i\n        else:\n            seen[i] = 1\n    return 'None'\n    ",
        "test": "assert     first_repeated_char('test') == 't', \"Test 1 Failed\"",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_ludic(n):\n        return n < 4 and n % 2 == 0 or n < 9 and n % 3 == 0\n    return list(filter(is_ludic, range(1, n)))\n",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "test": "assert     reverse_words(\"  hi\") == \"hi\"",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, int(num/2)):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n",
        "test": "assert     prime_num(2) == True,'should return True'",
        "num_ids": 553,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef radian_arcmin(arcmin):\n    '''\n    Write a function to convert arcmins to radians.\n    '''\n    return arcmin*(math.pi/180)*60\ndef radian_arcsec(arcsec):\n    '''\n    Write a function to convert arcsec to radians.\n    '''\n    return arcsec*(math.pi/180)*3600\ndef radian_ha(ha):\n    '''\n    Write a function to convert hours to radians.\n    '''\n    return ha*(math.pi/12)\ndef radian_lst(lst):\n    '''\n    Write a function to convert lst to radians.\n    '''\n    return lst*(math.pi/12)\n",
        "test": "assert     radian_degree(0) == 0",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if pattern == \"\":\n        return None\n    # O(n)\n    try:\n        index = 0\n        # O(n)\n        while index < len(text):\n            # O(1)\n            m = re.search(pattern, text[index:])\n            # O(m.end()-m.start())\n            if m:\n                return m.group(), index, index + m.end()\n            index += 1\n    except Exception as e:\n        print(\"Error: {0}\".format(e))\n    return None\n",
        "test": "assert     find_literals('1234abcd', '1234') == ('1234', 0, 4)",
        "num_ids": 943,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_n = 1\n    for i in range(1, n+1):\n        bell_n = bell_n * i\n    return bell_n\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 2318,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    del list1[L]\n    return list1\n",
        "test": "assert     remove_kth_element(['A', 'B', 'C', 'D', 'E'], 4) == ['A', 'B', 'C', 'D']",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not test_list:\n        return\n    else:\n        col_list = list(zip(*test_list))\n        #print(col_list)\n        if not col_list:\n            return\n        else:\n            return max(col_list[N - 1])\n",
        "test": "assert     max_of_nth([[10, 3], [10, -10], [-10, 8]], 1) == 10",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[x[0],x[1]] for x in zip(*lst)]\n",
        "test": "assert     merge([[1, 2], [3, 4]])     == [[1, 3], [2, 4]]",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum_list = []\n    cummulative_sum_list.append(test_list[0])\n    for i in range(1, len(test_list)):\n        cummulative_sum_list.append(test_list[i] + cummulative_sum_list[i-1])\n    return cummulative_sum_list\n",
        "test": "assert     cummulative_sum([1]) == [1]",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Convert each tuple to a list\n    # TODO: make this more efficient\n    # Convert each value in the list into a float\n    # Sum the values in the list\n    # Divide the sum by the length of the list\n    # Return a list with the average values of each tuple in the list\n    \n    return [float(sum(x))/len(x) for x in zip(*nums)]\n",
        "test": "assert     average_tuple(((1,2),(3,4),(5,6))) == [(1+3+5)/3, (2+4+6)/3]",
        "num_ids": 1114,
        "indeed": true
    },
    {
        "number": 616,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([(a % b) for a, b in zip(test_tup1, test_tup2)])\n",
        "test": "assert     tuple_modulo((1, 2, 3), (2, 2, 2)) == (1, 0, 1)",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 0\n    if steps == 1: \n        return abs(d)\n    if d == 0: \n        return steps\n    return min(abs(d - 1), min_Jumps(steps - 1, d), min_Jumps(steps - 2, d - 1))\n",
        "test": "assert     min_Jumps(1, 0) == 0",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    answer = []\n    for i in range(len(nums1)):\n        answer.append(nums1[i] / nums2[i])\n    return answer\n",
        "test": "assert ",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_list = []\n    for x in test_str:\n        if x.isdigit():\n            test_list.append(x)\n    return ''.join(test_list)+''.join(sorted(set(test_str).difference(test_list)))\n",
        "test": "assert     move_num(    '12345678') == '12345678'",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_len = 1\n    a.sort()\n    for i in range(len(a) - 1, 0, -1):\n        for j in range(i - 1, -1, -1):\n            if a[i] % a[j] == 0:\n                a[j] = 0\n                max_len = max(max_len, i - j)\n                break\n    print(max_len)\n",
        "test": "assert ",
        "num_ids": 1209,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    median = (arr1[n//2] + arr2[n//2])/2\n    \n    return median\n",
        "test": "assert     get_median([3,4,5],[1,2,3],3) == 3",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums\n",
        "test": "assert     nth_nums([1,2,3,4],2) == [1,4,9,16]",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "test": "assert     is_upper('hello') == False",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n",
        "test": "assert     []                         == swap_List([])",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    return 0.25 * r * r\n    \ndef triangle_perimeter(a, b, c) :\n    return a + b + c\n",
        "test": "assert     triangle_area(0) == 0",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>=end:\n        return start\n    if array[start]!=start:\n        return start\n    if array[end]!=end:\n        return end\n    return find_First_Missing(array,start+1,end-1)\n",
        "test": "assert     find_First_Missing([1,2,3,4,5]) == 0",
        "num_ids": 2152,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "test": "assert     replace_spaces(\"hello world\")    == \"hello%20world\"",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens=[]\n    for x in list:\n        if x%2==0:\n            evens.append(x)\n    return evens\n",
        "test": "assert     Split([2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] > 0:\n        return ((ele[0] - 1, ele[1]),(ele[0] - 1, ele[1] + 1))\n    elif ele[1] > 0:\n        return ((ele[0], ele[1] - 1),(ele[0], ele[1] - 1))\n    else:\n        return ((ele[0], ele[1] + 1),(ele[0], ele[1] + 1))\n",
        "test": "assert ",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "test": "assert     replace_spaces('Hi') == 'Hi', 'String with one space'",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = num_list.count(0)\n    for i in range(zero_count):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n",
        "test": "assert     move_zero([2,2,1,1,1,0]) == [2,2,1,1,1,0]",
        "num_ids": 2857,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xored = 0\n    for i in range(0,len(arr)) : \n        for j in range(i+1,len(arr)) : \n            xored = xored ^ arr[i] ^ arr[j]\n    return xored \n",
        "test": "assert     pair_xor_Sum([],4) == 0",
        "num_ids": 2976,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in range(len(iterable)):\n        hq.heappush(h,iterable[i])\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     [1, 2, 3, 4, 5, 6] == heap_sort([6, 5, 4, 3, 2, 1])",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True\n",
        "test": "assert     (noprofit_noloss(100,50) == 0)",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    F = 1.8*(v**0.16)+35.5\n    if F >= t:\n        return t\n    else:\n        return int(F)\n",
        "test": "assert ",
        "num_ids": 1135,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper() == False:\n            count += len(name)\n    return count\n",
        "test": "assert     sample_nam(['hello', 'world', 'Python', 'python', 'Python.exe', 'C:\\\\Python34\\\\python.exe','sys', 'abcd']) == 23",
        "num_ids": 2410,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub('[^A-Za-z0-9]','',items)\n    items = items.replace('(','')\n    items = items.replace(')','')\n    return items\n",
        "test": "assert     remove_parenthesis(\"()\") == \"\"",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n - 1\n    if n == 0:\n        return 1\n    else:\n        return n*(n+1) + n + 1\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if not re.search(r'z', text):\n        return False\n    if re.search(r'z', text[0:1]) and re.search(r'z', text[-1:]):\n        return True\n    if re.search(r'z', text[1:2]) and re.search(r'z', text[-2:]):\n        return True\n    if re.search(r'z', text[2:3]) and re.search(r'z', text[-3:]):\n        return True\n    if re.search(r'z', text[3:4]) and re.search(r'z', text[-4:]):\n        return True\n    if re.search(r'z', text[4:5]) and re.search(r'z', text[-5:]):\n        return True\n    if re.search(r'z', text[5:6]) and re.search(r'z', text[-6:]):\n        return True\n    if re.search(r'z', text[6:7]) and re.search(r'z', text[-7:]):\n        return True\n    if re.search(r'z', text[7:8]) and re.search(r'z', text[-8:]):\n        return True\n    if re.search(r'z', text[8:9]) and re.search(r'z', text[-9:]):\n        return True\n    if re.search(r'z', text[9:10]) and re.search(r'z', text[-10:]):\n        return True\n    if re.search(r'z', text[10:11]) and re.search(r'z', text[-11:]):\n        return True\n    if re.search(r'z', text[11:12]) and re.search(r'z', text[-12:]):\n        return True\n    if re.search(r'z', text[12:13]) and re.search(r'z', text[-13:]):\n        return True\n    if re.search(r'z', text[13:14]) and re.search(r'z', text[-14:]):\n        return True\n    if re.search(r'z', text[14:15]) and re.search(r'z', text[-15:]):\n        return True\n    if re.search(r'z', text[15:16]) and re.search(r'z', text[-16:]):\n        return True\n    if re.search(r'z', text[16:17]) and re.search(r'z', text[-17:]):\n        return True\n    if re.search(r'z', text[17:18]) and re.search(r'z', text[-18:]):\n        return True\n    if re.search(r'z', text[18:19]) and re.search(r'z', text[-19:]):\n        return True\n    if re.search(r'z', text[19:20]) and re.search(r'z', text[-20:]):\n        return True\n    if re.search(r'z', text[20:21]) and re.search(r'z', text[-21:]):\n        return True\n    if re.search(r'z', text[21:22]) and re.search(r'z', text[-22:]):\n        return True\n    if re.search(r'z', text[22:23]) and re.search(r'z', text[-23:]):\n        return True\n    if re.search(r'z', text[23:24]) and re.search(r'z', text[-24:]):\n        return True\n    if re.search(r'z', text[24:25]) and re.search(r'z', text[-25:]):\n        return True\n    if re.search(r'z', text[25:26]) and re.search(r'z', text[-26:]):\n        return True\n    if re.search(r'z', text[26:27]) and re.search(r'z', text[-27:]):\n        return True\n    if re.search(r'z', text[27:28]) and re.search(r'z', text[-28:]):\n        return True\n    if re.search(r'z', text[28:29]) and re.search(r'z', text[-29:]):\n        return True\n    if re.search(r'z', text[29:30]) and re.search(r'z', text[-30:]):\n        return True\n    if re.search(r'z', text[30:31]) and re.search(r'z', text[-31:]):\n        return True\n    if re.search(r'z', text[31:32]) and re.search(r'z', text[-32:]):\n        return True\n    if re.search(r'z', text[32:33]) and re.search(r'z', text[-33:]):\n        return True\n    if re.search(r'z', text[33:34]) and re.search(r'z', text[-34:]):\n        return True\n    if re.search(r'z', text[34:35]) and re.search(r'z', text[-35:]):\n        return True\n    if re.search(r'z', text[35:36]) and re.search(r'z', text[-36:]):\n        return True\n    if re.search(r'z', text[36:37]) and re.search(r'z', text[-37:]):\n        return True\n    if re.search(r'z', text[37:38]) and re.search(r'z', text[-38:]):\n        return True\n    if re.search(r'z', text[38:39]) and re.search(r'z', text[-39:]):\n        return True\n    if re.search(r'z', text[39:40]) and re.search(r'z', text[-40:]):\n        return True\n    if re.search(r'z', text[40:41]) and re.search(r'z', text[-41:]):\n        return True\n    if re.search(r'z', text[41:42]) and re.search(r'z', text[-42:]):\n        return True\n    if re.search(r'z', text[42:43]) and re.search(r'z', text[-43:]):\n        return True\n    if re.search(r'z', text[43:44]) and re.search(r'z', text[-44:]):\n        return True\n    if re.search(r'z', text[44:45]) and re.search(r'z', text[-45:]):\n        return True\n    if re.search(r'z', text[45:46]) and re.search(r'z', text[-46:]):\n        return True\n    if re.search(r'z', text[46:47]) and re.search(r'z', text[-47:]):\n        return True\n    if re.search(r'z', text[47:48]) and re.search(r'z', text[-48:]):\n        return True\n    if re.search(r'z', text[48:49]) and re.search(r'z', text[-49:]):\n        return True\n    if re.search(r'z', text[49:50]) and re.search(r'z', text[-50:]):\n        return True\n    if re.search(r'z', text[50:51]) and re.search(r'z', text[-51:]):\n        return True\n    if re.search(r'z', text[51:52]) and re.search(r'z', text[-52:]):\n        return True\n    if re.search(r'z', text[52:53]) and re.search(r'z', text[-53:]):\n        return True\n    if re.search(r'z', text[53:54]) and re.search(r'z', text[-54:]):\n        return True\n    if re.search(r'z', text[54:55]) and re.search(r'z', text[-55:]):\n        return True\n    i",
        "test": "assert     text_match_wordz_middle(\"z\") == True, \"text_match_wordz_middle\"",
        "num_ids": 4512,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    first_k = input[0:k]\n    first_k.reverse()\n    second_k = input[k:len(input)]\n    second_k.reverse()\n    return first_k + second_k\n",
        "test": "assert         reverse_Array_Upto_K([1,2,3,4,5], 5) == [5,4,3,2,1], \"Failed 4\"",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n",
        "test": "assert     add_dict_to_tuple(('a', 'b', 'c'), {'a': 1})     == ('a', 'b', 'c', 1)",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_average = 0\n    max_path = []\n",
        "test": "assert ",
        "num_ids": 1225,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    students = {student: (float(height), float(weight)) for student, (height, weight) in students.items()}\n    \n    def filter_data(students, h, w):\n        return {student: (height, weight) for student, (height, weight) in students.items() if height > h and weight > w}\n    \n    return filter_data(students, h, w)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     (filter_data({'Abby': (1.60, 98.0), 'Ben': (1.70, 96.0), 'Cassie': (1.50, 92.0), 'Emily': (1.80, 87.0), 'Fred': (1.45, 76.0), 'Gina': (1.50, 67.0), 'Isla': (1.55, 85.0)}, 1.4, 103) == {})",
        "num_ids": 4085,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return False\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([0,0,1,1], [0,0,1,1]) == 4",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(num)**power for num in str(base)])\n",
        "test": "assert     power_base_sum(5, 1) == 5, 'Test 3 failed'",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    output = re.findall(r'\"([^\"]*)\"', text1)\n    return output\n",
        "test": "assert     extract_quotation('\"Hello\"') == ['Hello']",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        if i == 0:\n            new_tup = new_tup + (test_tup[i],)\n        else:\n            new_tup = new_tup + (test_tup[i]*test_tup[i-1],)\n    return new_tup\n",
        "test": "assert     multiply_elements((5,2)) == (5,10), \"The result should be (5,10)\"",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # your code here\n    return [x+y for x,y in zip(lst1,lst2)]\n",
        "test": "assert     sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9], \"Test 1\"",
        "num_ids": 809,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped = groupby(nums)\n    return [k for k, _ in grouped]\n",
        "test": "assert     consecutive_duplicates([])    == []",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi*r**2+math.pi*r**2*h\n    return s\n",
        "test": "assert     lateralsurface_cone(0,2) == 0",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #solution\n    #list_of_char=[' ','.',',']\n    #for char in list_of_char:\n    #    text=re.sub(char,':',text)\n    #return text\n    return text.replace(' ',':').replace('.',':').replace(',',':')\n",
        "test": "assert     replace_specialchar('f:o:r:e:b:o:r:a:t:s:i:s:a:') == 'f:o:r:e:b:o:r:a:t:s:i:s:a:'",
        "num_ids": 3624,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    if n == 0:\n        return -1\n    low = 0\n    high = n-1\n    while low <= high:\n        mid = (low+high)//2\n        if x < A[mid]:\n            high = mid-1\n        elif A[mid] < x:\n            low = mid+1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid-1\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6], 7) == -1",
        "num_ids": 1116,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    m = len(arr)\n    res = [0]*(m+1)\n    res[0] = 1\n    for i in range(1, m+1):\n        res[i] = res[i-1]*arr[i-1]\n    tmp = 1\n    for i in range(1, m+1):\n        tmp *= arr[i-1]\n        res[i] = res[i] // tmp\n    return res[m]\n",
        "test": "assert     sum_Of_Subarray_Prod([5,4,6,2,1,7,8,9,10]) == 2340",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & 0x55555555) << 1) | ((n & 0x55555555) >> 1)\n",
        "test": "assert ",
        "num_ids": 2590,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #TODO: ADD YOUR CODE HERE\n    return bisect.bisect_left(a, x)\n",
        "test": "assert     left_insertion([1,3,5,6,7], 0) == 0",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_str('aeiou') == True, 'aeiou'",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return pow(2,n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    n = int(n)\n    if n == 1:\n        return 0\n    else:\n        for i in range(int(math.pow(10, n-1))):\n            p = str(int(math.pow(10, n-1))+i)\n            if p[-1] == '0':\n                continue\n            if p[0] == '0':\n                t = int(p) + int(str(int(p)+int(p))+str(int(p)+int(str(int(p))+p)))\n            else:\n                t = int(p) + int(str(int(p)+int(p))+str(int(p)+int(str(int(p))+p)))\n            if int(math.pow(10, n)) < t < int(math.pow(10, n+1)):\n                return i\n        return None\n",
        "test": "assert     find_Index(1) == 0 ",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key = test_tup[0]\n    value = test_tup[1]\n    return {key:value}\n",
        "test": "assert     tuple_to_dict(('p','q')) == {'p':'q'}",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # return len(set(s)) == 1\n    return not len(set(s))\n",
        "test": "assert     all_Characters_Same('abcd') == False",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/4*(side**2)\n    \ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return side**2\n",
        "test": "assert     area_tetrahedron(1) == 1.0/4.0",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    r = n - m\n    return list[r:] + list[:r]\n",
        "test": "assert     rotate_right([1, 2, 3, 4, 5, 6, 7], 0)     == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert     check_none( (None, 2, 3, 4) ) is True",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    return list(filter(lambda x: x % int(str(x)[0]) == 0, range(startnum, endnum + 1)))\n",
        "test": "assert     divisible_by_digits(11, 13)",
        "num_ids": 4561,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        return (math.pi*r**2)*a/360\n",
        "test": "assert     sector_area(3.0, 360.1) == None",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[None]*(o+1) for i in xrange(n+1)] for j in xrange(m+1)] \n    for i in xrange(m+1): \n        for j in xrange(n+1): \n            for k in xrange(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    return L[m][n][o]\n",
        "test": "assert     lcs_of_three(\"tattca\", \"catttct\", \"ctaattct\") == \"attca\"",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('[A-Z][a-z]*[^ ]','\\g<0> ', str1)\n",
        "test": "assert     capital_words_spaces(\"\") == \"\"",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for item in nums_str:\n        nums.append(int(item))\n    nums.sort()\n    return nums\n",
        "test": "assert     sort_numeric_strings([\"3\",\"4\",\"2\",\"1\"]) == [1, 2, 3, 4]",
        "num_ids": 1369,
        "indeed": true
    },
    {
        "number": 750,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([], (1,2,3)) == [(1,2,3)]",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    n = len(arr)\n    \n    if i >= (n/2):\n        return True\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < n and arr[left] < arr[i]:\n        return False\n    \n    if right < n and arr[right] < arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n",
        "test": "assert     check_min_heap_helper([], 0) == True",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0: return 0\n    if n==1: return 1\n    if n==2: return 1\n    if n==3: return 2\n    if n==4: return 4\n    if n==5: return 4\n    if n%2==0:\n        return (2*jacobsthal_num(n-1) + 4*jacobsthal_num(n-2))%10\n    else:\n        return (jacobsthal_num(n-1) + 3*jacobsthal_num(n-2))%10\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 2453,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    max_heap = []\n    heapq.heapify(max_heap)\n    for elem in test_list:\n        heapq.heappush(max_heap, elem)\n        if len(max_heap) > K:\n            heapq.heappop(max_heap)\n",
        "test": "assert     min_k(test_list, 4) == [('sunny', '199', '9:45'), ('sunny', '199', '9:46'), ('sunny', '199', '9:47'), ('sunny', '199', '9:48')]",
        "num_ids": 3181,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in range(len(l1)) if l1[i] in l2 and l1[i] in l3]\n",
        "test": "assert     extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min1 = second_min = float('inf')\n    for number in numbers:\n        if number < min1:\n            second_min = min1\n            min1 = number\n        elif number < second_min:\n            second_min = number\n    return second_min\n",
        "test": "assert     second_smallest([1, 2, 3]) == 2",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one('ababbab') == True",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs([\"ba\", \"bb\", \"bb\", \"aa\"]) == 4",
        "num_ids": 2743,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dictionary = {}\n    for sublist in list1:\n        count = list1.count(sublist)\n        sublist = tuple(sublist)\n        if count == 1:\n            dictionary[sublist] = 1\n        else:\n            dictionary[sublist] = count\n    return dictionary\n",
        "test": "assert     {} == unique_sublists([])",
        "num_ids": 1356,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_list = list(num)\n    if num_list[0] == '-':\n        num_list.pop(0)\n        for x in num_list:\n            if x not in '0123456789.e':\n                return False\n        return True\n    else:\n        for x in num_list:\n            if x not in '0123456789.e':\n                return False\n        return True\n",
        "test": "assert     is_decimal('abc') == False, 'failed'",
        "num_ids": 4516,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True\n",
        "test": "assert     unique_Element([1,2,3,3,3,3]) == False",
        "num_ids": 2489,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    else:\n        if monthnum3 % 2 == 0:\n            return False\n        else:\n            return True\n",
        "test": "assert     check_monthnumber_number(4) == False",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_val = arr[0]\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n):\n        curr_diff = abs(arr[i] - arr[i-1])\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n            min_val = arr[i]\n    return min_val\n",
        "test": "assert     find_min_diff([1,3,5,7,9],5) == 1",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    return len(str)\n",
        "test": "assert     number_ctr(\"1234567890\") == 10",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 5\n    if n % 2 == 0:\n        return n // 2 + 2\n    if n % 2 == 1:\n        return (n + 1) // 2\n",
        "test": "assert     is_polite(2) == True",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 813,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert     get_pairs_count([1,2,3,4,5,6,7,8,9],0) == 0",
        "num_ids": 2762,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "test": "assert     Diff([1,2,3,4,5],[1,2,4]) == [3,5]",
        "num_ids": 1915,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i**4 for i in range(1, n+1) if i%2 == 1])\n",
        "test": "assert     odd_num_sum(27) == 48801",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for c in exp:\n        if c in '({':\n            stack.append(c)\n        else:\n            if not stack:\n                return False\n            open = stack.pop()\n            if c == ')':\n                if open!= '(':\n                    return False\n            else:\n                if open!= '{':\n                    return False\n    return not stack\n",
        "test": "assert     check_expression(\"{{())}()}\") == False",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) == 0:\n        return []\n    if K > len(test_str):\n        return [test_str]\n    if K == len(test_str):\n        return []\n",
        "test": "assert     remove_length(test_str, 7) == ''",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    if pattern in text:\n        substring = re.search(pattern,text)\n        start = substring.start()\n        end = substring.end()\n        print('\\noccurance_substring')\n        print('start position: ',start)\n        print('end position: ',end)\n    else:\n        print('\\noccurance_substring')\n        print('No match found')\n",
        "test": "assert     occurance_substring('0123456789abcdef','123') == None",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2:\n            return False\n    return True\n",
        "test": "assert     odd_position([1,3,5,7,9,12]) == False",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiouAEIOU':\n            if i-1 >= 0 and test_str[i-1] in 'aeiouAEIOU':\n                vowels += 1\n            if i+1 < len(test_str) and test_str[i+1] in 'aeiouAEIOU':\n                vowels += 1\n    return vowels\n",
        "test": "assert     count_vowels('xyz') == 0",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum = sum + i\n    return sum\n",
        "test": "assert     find_sum([1,2,3,4,4,5]) == 11",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    for k, g in groupby(list1):\n        res.append(list(g))\n    return res\n",
        "test": "assert     (pack_consecutive_duplicates([]) == [])",
        "num_ids": 1225,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Example: list1 = [[1, 1, 2], [2, 3, 4], [3, 4, 5]]\n    # Output: {(1, 1, 2): 1, (2, 3, 4): 2, (3, 4, 5): 1}\n    \n    d = {}\n    for x in list1:\n        if tuple(x) not in d:\n            d[tuple(x)] = 1\n        else:\n            d[tuple(x)] += 1\n    return d\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 3286,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = []\n    for num in range(len(test_list)):\n        comb_list = list(combinations(test_list,num+1))\n        for item in comb_list:\n            final_list.append(item)\n    return final_list\n",
        "test": "assert     (find_combinations([(1, 2, 3, 4, 5)]) == [(1, 2, 3, 4, 5)]), 'find_combinations: Should work for different test cases'",
        "num_ids": 2205,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, (n//2)+1) :\n        if (n%i == 0) :\n            divisors = divisors + 1\n    if (divisors % 2 == 0) :\n        return True\n    else :\n        return False\n",
        "test": "assert     count_divisors(0) == 1",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum(arr)\n",
        "test": "assert     odd_length_sum([0,1,2]) == 3",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (g-b)/df\n    elif mx == g:\n        h = (b-r)/df + 2\n    else:\n        h = (r-g)/df + 4\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0, 0, 0)",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list_even_odd = []\n    for ele in list1:\n        if ele % 2 == 0:\n            list_even_odd.append(ele)\n        else:\n            list_even_odd.append(ele)\n    list_even_odd.sort()\n    final_result = list_even_odd[0] * list_even_odd[-1]\n    return final_result\n",
        "test": "assert     mul_even_odd([0,1,2,3]) == 0",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    res = []\n    test_str = test_str.replace('(', '')\n    test_str = test_str.replace(')', '')\n    test_str = test_str.split(',')\n    for i in test_str:\n        res.append(int(i))\n    return tuple(res)\n",
        "test": "assert     tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    a.append(float('inf'))\n    pos = bisect.bisect(a, x)\n    return pos\n",
        "test": "assert     right_insertion([1, 2, 3, 4, 5, 6, 7, 8], 10) == 8",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a{3}b')\n    if pattern.search(text):\n        return True\n    return False\n",
        "test": "assert     text_match_three('abb') == False",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # first: convert the string to a list\n    # 2nd: remove the ','\n    # 3rd: add each item to the list\n    # 4th: convert the list to a tuple\n    return tuple(test_list)\n",
        "test": "assert         new_tuple([1,2,3], \"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    for i in range(0, len(nums), 2):\n        if i == 0:\n            if nums[i] % 2 == 0:\n                return 1\n        if nums[i] % 2 == 0 and nums[i - 1] % 2 == 0:\n            return 1\n    return 0\n",
        "test": "assert     even_position([1, 3, 5, 7]) == False",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #return tuple(list(remove_nested(tup) for tup in tup_list))\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(x) for x in test_tup)\n    return test_tup\n",
        "test": "assert     remove_nested(tuple()) ==         tuple()",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if len(input_list) == 0:\n        return 0\n    else:\n        return 1 + count_list(input_list[1:])\n",
        "test": "assert     count_list([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == 3",
        "num_ids": 792,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[-1]==x:\n        return len(arr)-1\n    for i in range(len(arr)-2,-1,-1):\n        if arr[i]==x:\n            return i\n    return -1\n    \n",
        "test": "assert     last([0, 1, 2, 4, 5, 6, 7, 8, 9, 10], 2) == 2",
        "num_ids": 970,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    myRegex = re.compile(r'^a.*b$')\n    mo = myRegex.search(text)\n    if mo!= None:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_starta_endb('ab')",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n    \n",
        "test": "assert     (return_sum({'a': 1, 'b': 2, 'c': 3}) == 6)",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return (n * (n + 1)) / 2\n",
        "test": "assert     sum_odd(0) == 0 ",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([1,2,3]) == 6, 'incorrect sum'",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n",
        "test": "assert     left_rotate(0b1111101,0) == 0b1111101",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Create a new variable\n    new_text = ''\n    # for each character in the text\n    for i in text:\n        # If i is not a space\n        if i!='':\n            # Add i to the new_text variable\n            new_text += i\n    # Return the new_text variable\n    return new_text\n",
        "test": "assert     remove_all_spaces('Hi') == 'Hi', \"Test 2 Error: remove_all_spaces('Hi') == 'Hi', but it should be ''\"",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or y==z or x==z:\n        return 2\n    else:\n        return 0\n",
        "test": "assert     test_three_equal(1,2,3) == 0",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0\n",
        "test": "assert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8]) == 0",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 803,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 :\n        return True\n    if n == 0 :\n        return False\n    if n < 0 :\n        n = -n\n    return pow(n, 1/2) == int(pow(n, 1/2))\n",
        "test": "assert     (is_perfect_square(1000) == False)",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product%2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([3,4,5,6]) == True",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    curr_max = 0\n    for l in lists:\n        curr_sum = sum(l)\n        if curr_sum > curr_max:\n            curr_max = curr_sum\n            result = [l]\n        elif curr_sum == curr_max:\n            result.append(l)\n    return result\n",
        "test": "assert     max_sum_list([[1,2,3],[5,1,6]]) == [[5,1,6]]",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    temp_count = 0\n    for i in range(0, len(test_str)):\n        if test_str[i].isupper():\n            temp_count += 1\n        elif temp_count > max_count:\n            max_count = temp_count\n        else:\n            temp_count = 0\n    return max_count\n",
        "test": "assert     max_run_uppercase(\"c\") == 0",
        "num_ids": 3034,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Your code here\n",
        "test": "assert     first_odd([]) == None",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 808,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    # Your Code Here\n    \n    if test_tup[K] == None:\n        return True\n    else:\n        return False\n    \ndef check_K_range(test_tup, K, I):\n    '''\n    Write a function to check if the given tuple contains the Kth tuple in the given range or not.\n    '''\n    \n    # Your Code Here\n    \n    if test_tup[K] == None:\n        return False\n    else:\n        return I\n",
        "test": "assert     check_K(('a', 1, 'b', 2, 'c', 3, 'd', 4), 2) == False",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert     check_smaller((1,2,3,4), (1,2,3,4)) == True",
        "num_ids": 830,
        "indeed": true
    }
]