[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return tuple(shared_elements)\n",
        "test": "assert     similar_elements((2, 3, 4, 5), (3, 4, 5, 6)) == (3, 4, 5)",
        "num_ids": 795
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    for i in range(7, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n    return False\n",
        "test": "assert     is_not_prime(10) == True",
        "num_ids": 319
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(-nums[i])\n    hq.sort()\n    ans = []\n    for i in range(n):\n        ans.append(-hq[i])\n    return ans\n",
        "test": "assert ",
        "num_ids": 552
    },
    {
        "number": 6,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x==2 or x&(x-1)==0\n",
        "test": "assert     is_Power_Of_Two(32)",
        "num_ids": 270
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w+', text)\n",
        "test": "assert     find_char_long('Hi There')!= ['Hi Therea']",
        "num_ids": 362
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "test": "assert     square_nums([1, 2, 3, 4]) == [1, 4, 9, 16]",
        "num_ids": 280
    },
    {
        "number": 9,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 0\n    if len(str) == 2:\n        if str[0]!= str[1]:\n            return 1\n        else:\n            return 0\n    if len(str) == 3:\n        if str[0]!= str[2]:\n            return 1\n        elif str[1]!= str[2]:\n            return 2\n        else:\n            return 0\n    return 1+min(find_Rotations(str[1:]),find_Rotations(str[1:] + str[0]))\n",
        "test": "assert     find_Rotations('CAA') == 1",
        "num_ids": 383
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    string = s\n    x = string.replace(ch, '')\n    return x\n",
        "test": "assert     remove_Occ(\"Python\", \"\") == \"Python\", \"remove_Occ() is not correct\"",
        "num_ids": 356
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n    # create a new array with the same number of rows as the input matrix\n    A = []\n    # iterate through each row of the input matrix, add them to A\n    for i in range(0,m):\n        A.append([])\n        for j in range(0,n):\n            A[i].append(M[i][j])\n    # sort A by its rows, which is the sum of each row\n    A.sort(key=sum)\n    # iterate through each row in A, and add them to M\n    for i in range(0,m):\n        for j in range(0,n):\n            M[i][j] = A[i][j]\n    return M\n",
        "test": "assert     sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 843
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/3.0\n    ",
        "test": "assert     find_Volume([2,2,2],3,2) == 12, 'Failed test for find_Volume'",
        "num_ids": 302
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = re.match(r'^[a-z]+_[a-z]+$', text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_lowercase_underscore('test') == False",
        "num_ids": 310
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "test": "assert     square_perimeter(4)     == 16",
        "num_ids": 142
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = [] \n    for i in string: \n        if i not in output: \n            output.append(i) \n    return output \n",
        "test": "assert ",
        "num_ids": 349
    },
    {
        "number": 19,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    visited = set()\n    for num in arraynums:\n        if num in visited:\n            return True\n        else:\n            visited.add(num)\n    return False\n",
        "test": "assert     test_duplicate([2, 3, 1, 0, 2, 5, 3]) == True",
        "num_ids": 434
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(x)>=7 and x[0]=='w' and x[1]=='o' and x[2]=='d' and x[3]=='l' and x[4]=='l' and x[5]=='b' and x[6]=='a' and x[7]=='l':\n        return True\n    return False\n",
        "test": "assert     is_woodall(3) == True, '3 should be a Woodball'",
        "num_ids": 400
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num == int(str(num)[::-1]))\n",
        "test": "assert     rev(1234) == False",
        "num_ids": 137
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(1, len(arr)) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\n",
        "test": "assert     find_Max_Num([1,2,3,4,5]) == 5",
        "num_ids": 240
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0)==(y<0)\n",
        "test": "assert     opposite_Signs(3,-4)==True,    '3,-4'",
        "num_ids": 270
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        last_n = 0\n        while result <= n:\n            if result < n:\n                last_n += result\n            else:\n                last_n -= result\n            result += 1\n        return last_n\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 268
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    hash = defaultdict(int)\n    for i in range(n):\n        hash[s[i]] += 1\n        if i < n-1:\n            hash[s[i]+s[i+1]] += 1\n    total = 0\n    for i in range(10):\n        if i in hash:\n            total += hash[i] * (hash[i] - 1)//2\n    return total\n",
        "test": "assert     count_Substrings('12') == 0",
        "num_ids": 421
    },
    {
        "number": 62,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # the first element of the list is the smallest\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
        "test": "assert     smallest_num([3, 2, 1]) == 1",
        "num_ids": 303
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    # TODO\n    \n    return max_diff\n",
        "test": "assert     max_difference(((0,0,0,0,0),(0,0,0,0,0),(0,0,0,0,0),(0,0,0,0,0),(0,0,0,0,0))) == 0",
        "num_ids": 507
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks = sorted(subjectmarks, key = lambda subject_marks: subject_marks[1])\n    return subject_marks\n",
        "test": "assert     subject_marks([('English', 80), ('Physics', 70), ('Chemistry', 100)]) == [('Chemistry', 100), ('Physics', 70), ('English', 80)]",
        "num_ids": 280
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([1,2,3]) == 6",
        "num_ids": 518
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([1, -1, -1]) == 1",
        "num_ids": 343
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    n = n + 1\n    a = [0] * (n)\n    a[0] = 1\n    for i in range(1, n):\n        a[i] = i * a[i-1]\n    return a[n-1]\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 281
    },
    {
        "number": 68,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)==0:\n        return True\n    elif len(A)==1:\n        return True\n    else:\n        return (A[0]<=A[1] and A[-1]>=A[-2]) or (A[0]>=A[1] and A[-1]<=A[-2])\n",
        "test": "assert     is_Monotonic([1,2,3,2,1]) == False",
        "num_ids": 409
    },
    {
        "number": 69,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1, 2, 3, 4, 5], [6, 7, 8]) == False",
        "num_ids": 503
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return 0\n    x = len(Input[0])\n    for i in range(1,len(Input)):\n        if len(Input[i])!= x:\n            return 0\n    return 1\n",
        "test": "assert     find_equal_tuple([('a', 1), ('b', 2), ('c', 3)]) == True",
        "num_ids": 477
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        if i == 0:\n            continue\n        temp = nums[i]\n        j = i - 1\n        while j >= 0 and nums[j] > temp:\n            nums[j + 1] = nums[j]\n            j = j - 1\n            nums[j + 1] = temp\n    return nums\n",
        "test": "assert     [1, 2, 3, 4, 5] == comb_sort([1, 2, 3, 4, 5])",
        "num_ids": 614
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = math.floor(math.sqrt(n))\n    b = math.ceil(math.sqrt(n))\n    return (a*a == n or b*b == n)\n",
        "test": "assert     dif_Square(1) == True",
        "num_ids": 302
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] == '#':\n            if not colors[i] == colors[i+1]:\n                return False\n        elif patterns[i] == '.':\n            if colors[i] == colors[i+1]:\n                return False\n    return True\n",
        "test": "assert     is_samepatterns(['red', 'white', 'blue'], ['red', 'white', 'blue']) == True",
        "num_ids": 2467
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return list(filter(lambda x: all([True if (y % K == 0) else False for y in x]), test_list))\n",
        "test": "assert     find_tuples([(3,4,5),(6,8,10),(9,12,15)], 3) == [(9, 12, 15)]",
        "num_ids": 789
    },
    {
        "number": 77,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n",
        "test": "assert     is_Diff(12) == False",
        "num_ids": 186
    },
    {
        "number": 79,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "test": "assert     word_len('A') == True",
        "num_ids": 248
    },
    {
        "number": 80,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # n = 1\n    # 1\n    # 1 + 3 + 3 + 3 = 10\n    # 1 + 3 + 3 + 3 + 3 = 22\n    # 1 + 3 + 3 + 3 + 3 + 3 = 38\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 = 82\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 164\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 302\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 728\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 2256\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 6800\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 15552\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3024\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3936\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 5840\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 7552\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1672\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3264\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 5248\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 8280\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1488\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 2828\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 4704\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 832\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1520\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 2976\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 4992\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 728\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1568\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3024\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3936\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 5840\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 7552\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1672\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3264\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 5248\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 8280\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1488\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 2828\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 4704\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 832\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1520\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 2976\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 4992\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 728\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1568\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3024\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3936\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 5840\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 7552\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1672\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3264\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 5248\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 8280\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1488\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 2828\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 4704\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 832\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1520\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 2976\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 4992\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 728\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1568\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3024\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3936\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 5840\n    # 1 + 3 + 3 ",
        "test": "assert     tetrahedral_number(4) == 10",
        "num_ids": 4231
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * (r ** 3)\n",
        "test": "assert     volume_sphere(1) == 4/3 * math.pi",
        "num_ids": 313
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in strr:\n        res = res + ord(i)\n    return res%26\ndef get_Key(text):  \n    '''\n    Write a python function to convert the string to a key by adding the ASCII value of all the characters of the string modulo 26.\n    '''\n    res = 0\n    for i in text:\n        res = res + ord(i)\n    return res%26\ndef caesar(plain_text,shift):  \n    '''\n    Write a python function to encode the given plain text using caesar cipher.\n    \n    '''\n    result = \"\"  \n    for i in plain_text:  \n        if (ord(i)>=97 and ord(i)<=122):  \n            result += chr((ord(i)-97+shift)%26 + 97)  \n        else:  \n            result += i  \n    return result\ndef get_plain_text(cipher_text):  \n    '''\n    Write a python function to decode the given cipher text using caesar cipher.\n    \n    '''\n    result = \"\"  \n    for i in cipher_text:  \n        if (ord(i)>=97 and ord(i)<=122):  \n            result += chr((ord(i)-97-get_Char(get_key(result)))%26 + 97)  \n        else:  \n            result += i  \n    return result\ndef encrypt(text):  \n    '''\n    Write a python function to encode the given plain text using caesar cipher.\n    \n    '''\n    return caesar(text,3)\ndef decrypt(cipher):  \n    '''\n    Write a python function to decode the given cipher text using caesar cipher.\n    \n    '''\n    return caesar(cipher,-3)\ndef xor(plain_text,key):\n    '''\n    Write a python function to encode the given plain text using xor cipher.\n    \n    '''\n    return plain_text ^ key\ndef xor_decrypt(cipher_text,key):\n    '''\n    Write a python function to decode the given cipher text using xor cipher.\n    \n    '''\n    return xor(cipher_text,key)\ndef xor_decrypt_file(file,key):\n    '''\n    Write a python function to decode the given file using xor cipher.\n    \n    '''\n    f = open(file, 'rb')\n    contents = f.read()\n    f.close()\n    f = open(file, 'wb')\n    f.write(xor_decrypt(contents,key))\n    f.close()\ndef print_menu():\n    print \"1. Encode\"\n    print \"2. Decode\"\n    print \"3. Exit\"\n    print \"Enter choice:\",\ndef get_choice():\n    return int(raw_input())\ndef get_text():\n    return raw_input(\"Enter plain text: \")\ndef get_key():\n    return raw_input(\"Enter key: \")\ndef main():\n    while(1):\n        print_menu()\n        choice = get_choice()\n        if(choice==1):\n            text = get_text()\n            print \"Encrypted text:\",encrypt(text)\n        elif(choice==2):\n            text = get_text()\n            key = get_key()\n            print \"Decrypted text:\",decrypt(text)\n        elif(choice==3):\n            break\n        else:\n            print \"Enter valid choice\"\nmain(",
        "test": "assert     get_Char(\"ABC\") == 89",
        "num_ids": 436
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n * (n + 1) / 2\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 336
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r == 0:\n        return 0\n    return 4 * math.pi * r**2\n",
        "test": "assert     surfacearea_sphere(1) == 12.566370614359172, \"Incorrect surfacearea of a sphere\"",
        "num_ids": 279
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return int(((n+1)**(3/2))/2)\n",
        "test": "assert     centered_hexagonal_number(0) == 1",
        "num_ids": 262
    },
    {
        "number": 87,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key1 in dict1:\n        res[key1] = dict1[key1]\n    for key2 in dict2:\n        res[key2] = dict2[key2]\n    for key3 in dict3:\n        res[key3] = dict3[key3]\n    return res\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        res[key] = dict1[key]\n    for key in dict2:\n        res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key1 in dict1:\n        res[key1] = dict1[key1]\n    for key2 in dict2:\n        res[key2] = dict2[key2]\n    for key3 in dict3:\n        res[key3] = dict3[key3]\n    return res\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        res[key] = dict1[key]\n    for key in dict2:\n        res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key1 in dict1:\n        res[key1] = dict1[key1]\n    for key2 in dict2:\n        res[key2] = dict2[key2]\n    for key3 in dict3:\n        res[key3] = dict3[key3]\n    return res\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        res[key] = dict1[key]\n    for key in dict2:\n        res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key1 in dict1:\n        res[key1] = dict1[key1]\n    for key2 in dict2:\n        res[key2] = dict2[key2]\n    for key3 in dict3:\n        res[key3] = dict3[key3]\n    return res\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        res[key] = dict1[key]\n    for key in dict2:\n        res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key1 in dict1:\n        res[key1] = dict1[key1]\n    for key2 in dict2:\n        res[key2] = dict2[key2]\n    for key3 in dict3:\n        res[key3] = dict3[key3]\n    return res\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        res[key] = dict1[key]\n    for key in dict2:\n        re",
        "test": "assert     merge_dictionaries_three({}, {'b':3, 'c':4}, {}) == {'b':3, 'c':4}",
        "num_ids": 719
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = collections.Counter(list1)\n    return count_dict\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 490
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 10:\n        return N-1\n    elif N > 10 and N <= 20:\n        return N-10\n    elif N > 20 and N <= 100:\n        return N-20\n    elif N > 100 and N <= 1000:\n        return N-100\n    elif N > 1000 and N <= 10000:\n        return N-1000\n    elif N > 10000:\n        return N-10000\n",
        "test": "assert     closest_num(1) == 0",
        "num_ids": 2330
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a=0\n    for i in list1:\n        if len(i)>a:\n            a=len(i)\n    return a\n",
        "test": "assert     len_log([['abc', 'abc'], ['hello', 'hi']])    == 2",
        "num_ids": 591
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n",
        "test": "assert     find_substring([\"cat\", \"bat\", \"rat\"], \"cat\") == True",
        "num_ids": 2169
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in range(1, len(s)):\n        if s[i] < s[i-1]:\n            return False\n    return True\n    \ndef is_undulating_v2(n): \n    s = str(n)\n    for i in range(1, len(s)):\n        if s[i] < s[i-1]:\n            return False\n    return True\n",
        "test": "assert     is_undulating(10) == False ",
        "num_ids": 318
    },
    {
        "number": 93,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b-1)\n",
        "test": "assert     (power(2,3)==8)",
        "num_ids": 308
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n",
        "test": "assert     index_minimum([('a',6),('b',4),('c',1)]) == 'c'",
        "num_ids": 494
    },
    {
        "number": 95,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = min([len(i) for i in lst])\n    return m\n    \ndef Find_Index_of_Min_Length(lst):  \n    '''\n    Write a python function to find the index of the smallest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = min([len(i) for i in lst])\n    return lst.index(min(lst, key = len))\n    \ndef Find_Index_of_Max_Length(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(max(lst, key = len))\n    \ndef Find_Sum_of_Lengths(lst):\n    '''\n    Write a python function to find the sum of lengths of all lists in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = sum([len(i) for i in lst])\n    return m\n    \ndef Find_Average_Length(lst):  \n    '''\n    Write a python function to find the average length of all lists in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = Find_Sum_of_Lengths(lst)/len(lst)\n    return m\n    \ndef Find_Index_of_Average_Length(lst):  \n    '''\n    Write a python function to find the index of the list with the average length in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = Find_Average_Length(lst)\n    return lst.index(m)\n    \ndef Find_Maximum_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return m\n    \ndef Find_Index_of_Maximum_Length(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Number_of_Lists(lst):  \n    '''\n    Write a python function to find the number of lists in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    return m\n    \ndef Find_Average_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the average length of all lists in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = Find_Sum_of_Lengths(lst)/m\n    return m\n    \ndef Find_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return m\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  ",
        "test": "assert ",
        "num_ids": 370
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i <= n:\n        if n % i == 0:\n            count = count + 1\n        i = i + 1\n    return count\n",
        "test": "assert     divisor(5) == 2",
        "num_ids": 264
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in list1:\n        try:\n            frequency_dict[i] += 1\n        except KeyError:\n            frequency_dict[i] = 1\n    return frequency_dict\n",
        "test": "assert     frequency_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}",
        "num_ids": 782
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    for i in range(len(numbers)):\n        numbers[i] *= len(numbers)\n        numbers[i] /= len(numbers)\n    return numbers\n",
        "test": "assert     multiply_num([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 336
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 241
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    temp=num\n    while temp<=num:\n        temp+=1\n    return temp\n",
        "test": "assert     next_smallest_palindrome(10) == 11",
        "num_ids": 355
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == []:\n        return None\n    if k > len(arr):\n        return None\n    left, right = 0, len(arr)\n    while left < right:\n        pivot = left + (right - left) // 2\n        if arr[pivot] == k:\n            return arr[pivot]\n        elif arr[pivot] > k:\n            right = pivot\n        else:\n            left = pivot + 1\n    return arr[left]\n",
        "test": "assert     kth_element([1, 2, 3, 4, 5], 0) == 1",
        "num_ids": 547
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[:1].upper() + word[1:].lower() for word in word.split('_')])\n",
        "test": "assert     snake_to_camel(\"camel_case\") == \"CamelCase\"",
        "num_ids": 372
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # if the n and m are equal, then the number is 3n + 2m = 2m + 3n + 2\n    # if the n and m are not equal, then the number is 3n + 2m + 2 = 2m + 3n + 2 + 2\n    if n == m:\n        return 2*m\n    else:\n        return 2*m + 2\n",
        "test": "assert ",
        "num_ids": 271
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for string in input_list:\n        sorted_list.append(sorted(string))\n    return sorted_list\n",
        "test": "assert     sort_sublists([[],[],['a','b','c','d']]) == [[],[],['a','b','c','d']]",
        "num_ids": 651
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([True for i in lst if i])\n    ",
        "test": "assert     count([True, True, True, False, False, False]) == 3",
        "num_ids": 318
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup\n",
        "test": "assert     add_lists(['a'], []) == ['a']",
        "num_ids": 351
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    m = []\n    n = []\n    o = []\n    heapq.merge(m,num1)\n    heapq.merge(n,num2)\n    heapq.merge(o,num3)\n    if m==n and n==o:\n        return m\n    else:\n        return m+n+o\n",
        "test": "assert     merge_sorted_list([1,3,4,6,7,9],[2,4,6,8,10],[2,3,4,6,7,9,10,11]) == [2,2,2,3,3,4,4,4,6,6,7,7,7,9,9,9,10,10,10,11,11]",
        "num_ids": 1319
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    N=len(s)\n    count=0\n    for i in range(n):\n        val=''\n        for j in range(N-1,-1,-1):\n            val=val+s[j]\n        if (int(val,2)%2):\n            count=count+1\n        s=val\n    return count\n    \nif __name__=='__main__':\n    s=input(\"Enter the string:\")\n    n=int(input(\"Enter the number of times to rotate:\"))\n    print(odd_Equivalent(s,n))\n    \n    ",
        "test": "assert     odd_Equivalent(\"101011100101001001\",1) == 0",
        "num_ids": 420
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set(reduce(lambda x,y:x if y in x else x+[y], nestedlist,[]))\n",
        "test": "assert ",
        "num_ids": 2404
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('123') == True",
        "num_ids": 249
    },
    {
        "number": 115,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "test": "assert     empty_dit([{},{}])",
        "num_ids": 306
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "test": "assert         tuple_to_int((8,)) == 8",
        "num_ids": 304
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n",
        "test": "assert     list_to_float([[1,2,3],[4,5,6]]) == [[1, 2, 3], [4, 5, 6]]",
        "num_ids": 609
    },
    {
        "number": 118,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('a b c') == ['a', 'b', 'c']",
        "num_ids": 2351
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None or len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    return search(arr[1:]) if arr[0] == arr[1] else arr[0]\n",
        "test": "assert     search([1,1,1,1,2,2,2,3,4,4]) == 1",
        "num_ids": 411
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(tuple(i))\n    list3 = sorted(list2, key=lambda x:x[0]*x[1])\n    return list3[-1]\n",
        "test": "assert     max_product_tuple([(5,4),(0,-2),(3,4),(0,-7),(2,5)]) == (5,4)",
        "num_ids": 681
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(x for x in range(1, limit) if get_sum(x) == x)\n",
        "test": "assert     amicable_numbers_sum(1000) == 636",
        "num_ids": 334
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_a = complex(a)\n    complex_b = complex(b)\n    angle = cmath.phase(complex_a * complex_b)\n    if angle < 0:\n        angle = 2 * math.pi + angle\n    return angle\n",
        "test": "assert     angle_complex(complex(0,1),complex(1,0))==cmath.pi/2",
        "num_ids": 475
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n        elif string[i] == '0':\n            count -= 1\n        if count > max_diff:\n            max_diff = count\n    return max_diff\n",
        "test": "assert     find_length(\"01111100\") == 4",
        "num_ids": 2412
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum=0\n    for i in range(1,a):\n        if (a%i==0) and (b%i==0):\n            sum+=i\n    return sum\n",
        "test": "assert     sum(9,10) == 1",
        "num_ids": 319
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(1,2) == 2",
        "num_ids": 270
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long = []\n    for word in str:\n        if len(word) > n:\n            long.append(word)\n    return long\n",
        "test": "assert     long_words(6, ['this', 'is', 'a','sample','string']) == []",
        "num_ids": 448
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    matrix_size = len(my_matrix)\n    if matrix_size == 0:\n        return False\n    if matrix_size == 1:\n        if sum(my_matrix) == 0:\n            return True\n    total = 0\n    for i in range(matrix_size):\n        total += my_matrix[i][i]\n    if total!= 0:\n        return False\n    for i in range(matrix_size):\n        total += my_matrix[i][matrix_size - 1 - i]\n    if total!= 0:\n        return False\n    total = 0\n    for i in range(matrix_size):\n        total += my_matrix[i][matrix_size - 1 - i]\n    if total!= 0:\n        return False\n    return True\n    \ndef test_magic_square_test():\n    print('test magic_square_test...')\n    matrix_a = [[1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12],\n                [13,14,15,16]]\n    assert magic_square_test(matrix_a) == True\n    matrix_b = [[2,3,4,5],\n                [6,7,8,9],\n                [10,11,12,13],\n                [14,15,16,17]]\n    assert magic_square_test(matrix_b) == False\n    matrix_c = [[1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12],\n                [13,14,15,16]]\n    assert magic_square_test(matrix_c) == False\n    matrix_d = [[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]]\n    assert magic_square_test(matrix_d) == True\n    matrix_e = [[1,2,3,4,5,6],\n                [7,8,9,10,11,12],\n                [13,14,15,16,17,18],\n                [19,20,21,22,23,24],\n                [25,26,27,28,29,30],\n                [31,32,33,34,35,36]]\n    assert magic_square_test(matrix_e) == True\n    matrix_f = [[1,2,3,4,5,6,7],\n                [8,9,10,11,12,13,14],\n                [15,16,17,18,19,20,21],\n                [22,23,24,25,26,27,28],\n                [29,30,31,32,33,34,35],\n                [36,37,38,39,40,41,42],\n                [43,44,45,46,47,48,49]]\n    assert magic_square_test(matrix_f) == False\n    matrix_g = [[1,2,3,4,5,6,7,8],\n                [9,10,11,12,13,14,15,16],\n                [17,18,19,20,21,22,23,24],\n                [25,26,27,28,29,30,31,32],\n                [33,34,35,36,37,38,39,40],\n                [41,42,43,44,45,46,47,48],\n                [49,50,51,52,53,54,55,56],\n                [57,58,59,60,61,62,63,64]]\n    assert magic_square_test(matrix_g) == True\n    matrix_h = [[1,2,3,4,5,6,7,8,9],\n                [10,11,12,13,14,15,16,17,18],\n                [19,20,21,22,23,24,25,26,27],\n                [28,29,30,31,32,33,34,35,36],\n                [37,38,39,40,41,42,43,44,45],\n                [46,47,48,49,50,51,52,53,54],\n                [55,56,57,58,59,60,61,62,63],\n                [64,65,66,67,68,69,70,71,72]]\n    assert magic_square_test(matrix_h) == False\n    matrix_i = [[1,2,3,4,5,6,7,8,9,10],\n                [11,12,13,14,15,16,17,18,19,20],\n                [21,22,23,24,25,26,27,28,29,30],\n                [31,32,33,34,35,36,37,38,39,40],\n                [41,42,43,44,45,46,47,48,49,50],\n                [51,52,53,54,55,56,57,58,59,60],\n                [61,62,63,64,65,66,67,68,69,70],\n                [71,72,73,74,75,76,77,78,79,80]]\n    assert magic_square_test(matrix_i) == True\n    matrix_j = [[1,2,3,4,5,6,7,8,9,10,11],\n                [12,13,14,15,16,17,18,19,20,21,22],\n                [23,24,25,26,27,28,29,30,31,32,33],\n                [34,35,36,37,38,39,40,41,42,43,44],\n                [45,46,47,48,49,50,51,52,53,54,55],\n                [56,57,58,59,60,61,62,63,64,65,66],\n                [67,68,69,70,71,72,73,74,75,76,77],\n                [78,79,80,81,82,83,84,85,86,87,88]]\n    assert magic_square_test(matrix_j) == False\n    matrix_k = [[1,2,3,4,5,6,7,8,9,10,11],\n                [12,13,14,15,16,17,18,19,20,21,22],\n                [23,24,25,26,27,28,29,30,31,32,33],\n                [34,35,36,37,38,39,40,41,42,43,44],\n                [45,46,47,48,49,50,51,52,53,54,55],\n                [56,57,58,59,60,61,62,63,64,65,66],\n                [67,68,69,70,71,72,73,74,75,76,77],\n                [78,79,80,81,82,83,84,85,86,87,88,89],\n                [90,91,92,93,94,95,96,97,98,99,100]]\n    assert magic_square_test(matrix_k) == False\n    matrix_l = [[1,2,3,4,5,6,7,8,9,10,11],\n                [12,13,14,15,16,17,18,19,20,21,22],\n                [23,24,25,26,27,28,29,30,31,32,33],\n                [34,35,36,37,38,39,40,41,42,43,44],\n                [45,46,47,48,49,50,51,52,53,54,55],\n                [56,57,58,59,60,61,62,63,64,65,66],\n                [67,68,69,70,71,72,73,74,75,76,77],\n                [78,79,80,81,82,83,84,85,86,87,88,89],\n                [90,91,92,93,94,95,96,97,98,99,100",
        "test": "assert ",
        "num_ids": 2808
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    nums = list(set(nums))\n    \n    if not nums:\n        return None\n    \n    max_count = 0\n    for i in nums:\n        if nums.count(i) > max_count:\n            max_count = nums.count(i)\n            max_item = i\n    return max_item\n",
        "test": "assert     max_occurrences([]) == None",
        "num_ids": 449
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str1 = list(str1)\n    i,j = 0,len(str1)-1\n    while i<j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n",
        "test": "assert     reverse_vowels('a') == 'a'",
        "num_ids": 740
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert     tup_string((1, 2, 3)) == '(1, 2, 3)'",
        "num_ids": 569
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        if i < 0:\n            total += i\n    return total\n",
        "test": "assert     sum_negativenum([1, 2, -4, -5]) == -9",
        "num_ids": 422
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n*(2*n-1))\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 292
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count\n",
        "test": "assert     zero_count([0,0,0,0]) == 4",
        "num_ids": 339
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 2: return False\n    while n > 1:\n        if n%2 == 1: return False\n        n //= 2\n    return True\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(1) == False",
        "num_ids": 379
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    from math import pi\n    return 2 * pi * r\n",
        "test": "assert     circle_circumference(2) == 12.566370614359172",
        "num_ids": 283
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    import itertools\n    return list(itertools.chain.from_iterable(test_list))\n",
        "test": "assert     extract_singly([]) == []",
        "num_ids": 457
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        j = i\n        while j >= 0:\n            if nums[j] >= nums[j+1]:\n                break\n            nums[j], nums[j+1] = nums[j+1], nums[j]\n            j -= 1\n        print(nums)\n        if j!= 0:\n            nums[:j+1] = nums[:j+1][::-1]\n            print(nums)\n    return nums\n",
        "test": "assert     pancake_sort([5, 1, 3, 2, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 543
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\ndef max_different(list1,list2,list3):\n    '''\n    Write a function to find the maximum number of different items between two lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]!=list2[i]:\n            count+=1\n    return count\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string\n    '''\n    return string[::-1]\ndef remove_string(string,char):\n    '''\n    Write a function to remove a character from a string\n    '''\n    return string.replace(char,'')\ndef add_string(string,char):\n    '''\n    Write a function to add a character to a string\n    '''\n    return string+char\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates in a list\n    '''\n    return set(list1)\ndef split_string(string,delimiter):\n    '''\n    Write a function to split a string by delimiter\n    '''\n    return string.split(delimiter)\ndef multiply_string(string,num):\n    '''\n    Write a function to multiply a string by a number\n    '''\n    return string*num\ndef capitalize_string(string):\n    '''\n    Write a function to capitalize the first letter of a string\n    '''\n    return string.capitalize()\ndef add_in_place(list1,list2):\n    '''\n    Write a function to add items in a list in place\n    '''\n    for i in range(len(list1)):\n        list1[i]+=list2[i]\n    return list1\ndef join_string(list1,delimiter):\n    '''\n    Write a function to join a list items by delimiter\n    '''\n    return delimiter.join(list1)\ndef find_max_index(list1):\n    '''\n    Write a function to find the max index of a list\n    '''\n    max_index=list1[0]\n    for i in range(len(list1)):\n        if list1[i]>max_index:\n            max_index=list1[i]\n    return max_index\ndef find_min_index(list1):\n    '''\n    Write a function to find the min index of a list\n    '''\n    min_index=list1[0]\n    for i in range(len(list1)):\n        if list1[i]<min_index:\n            min_index=list1[i]\n    return min_index\ndef find_max_value(list1):\n    '''\n    Write a function to find the max value of a list\n    '''\n    max_value=list1[0]\n    for i in range(len(list1)):\n        if list1[i]>max_value:\n            max_value=list1[i]\n    return max_value\ndef find_min_value(list1):\n    '''\n    Write a function to find the min value of a list\n    '''\n    min_value=list1[0]\n    for i in range(len(list1)):\n        if list1[i]<min_value:\n            min_value=list1[i]\n    return min_value\ndef sort_list(list1):\n    '''\n    Write a function to sort a list in ascending order\n    '''\n    return sorted(list1)\ndef count_letters(string):\n    '''\n    Write a function to count the number of letters in a string\n    '''\n    count=0\n    for i in range(len(string)):\n        if string[i].isalpha():\n            count+=1\n    return count\ndef find_str_index(string,search):\n    '''\n    Write a function to find the index of the first occurrence of a substring in a string\n    '''\n    return string.find(search)\ndef reverse_list(list1):\n    '''\n    Write a function to reverse a list\n    '''\n    list1.reverse()\n    return list1\ndef merge_two_dicts(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into one\n    '''\n    return dict2.update(dict1)\ndef reverse_nested_list(list1):\n    '''\n    Write a function to reverse a nested list\n    '''\n    list1.reverse()\n    for i in range(len(list1)):\n        list1[i].reverse()\n    return list1\ndef flatten_list(list1):\n    '''\n    Write a function to flatten a nested list\n    '''\n    flat_list=[]\n    for i in range(len(list1)):\n        if type(list1[i])==list:\n            flat_list+=list1[i]\n        else:\n            flat_list.append(list1[i])\n    return flat_list\ndef print_key(dict1):\n    '''\n    Write a function to print keys of a dictionary\n    '''\n    for i in dict1.keys():\n        print i\ndef print_value(dict1):\n    '''\n    Write a function to print values of a dictionary\n    '''\n    for i in dict1.values():\n        print i\ndef remove_key(dict1,key):\n    '''\n    Write a function to remove a key from a dictionary\n    '''\n    del dict1[key]\n    return dict1\ndef copy_list(list1):\n    '''\n    Write a function to copy a list\n    '''\n    return list(list1)\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by key\n    '''\n    sorted_dict=sorted(dict1.iteritems(),key=lambda d:d[0])\n    return sorted_dict\ndef remove_duplicates_in_dict(dict1):\n    '''\n    Write a function to remove duplicates in a dictionary\n    '''\n    return {k:v for k,v in dict1.iteritems() if v not in dict1.itervalues()}\ndef modify_dict(dict1):\n    '''\n    Write a function to modify a dictionary\n    '''\n    dict1['A']='A1'\n    return dict1\ndef print_dict_key(dict1):\n    '''\n    Write a function to print keys of a dictionary\n    '''\n    for i in dict1.keys():\n        print i\ndef print_dict_value(dict1):\n    '''\n    Write a function to print values of a dictionary\n    '''\n    for i in dict1.values():\n        print i\ndef remove_dict_key(dict1,key):\n    '''\n    Write a function to remove a key from a dictionary\n    '''\n    del dict1[key]\n    return dict1\ndef map_dict_key(dict1,func):\n    '''\n    Write a function to map a dictionary key by a function\n    '''\n    return dict((func(k),v) for k,v in dict1.iteritems())\ndef map_dict_value(dict1,func):\n    '''\n    Write a function to map a dictionary value by a function\n    '''\n    return dict((k,func(v)) for k,v in dict1.iteritems())\ndef get_dict_key(dict1,key):\n    '''\n    Write a function to get a key of a dictionary\n    '''\n    return dict1[key]\ndef get_dict_value(dict1,key):\n    '''\n    Write a function to get a value of a dictionary\n    '''\n    return dict1[key]\ndef get_dict_item(dict1,key,value):\n    '''\n    Write a function to get a dictionary item\n    '''\n    return dict1[key]==value\ndef remove_dict_item(dict1,key,value):\n    '''\n    Write a function to remove a dictionary item\n    '''\n    del dict1[key]\n    return dict1\ndef get_dict_items(dict1,key",
        "test": "assert     count_samepair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 4",
        "num_ids": 481
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input) - 1\n",
        "test": "assert     find_lists((1,)) == 0",
        "num_ids": 466
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    n = len(arr)\n    max_diff = arr[n-1] - arr[0]\n    for i in range(1,n):\n        max_diff = max(max_diff,arr[i]-arr[i-1])\n    return max_diff\n",
        "test": "assert     max_Abs_Diff([1, 10, 30, 8, 4, 2, 11]) == 29, \"Wrong answer for max_Abs_Diff([1, 10, 30, 8, 4, 2, 11])\"",
        "num_ids": 587
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #Takes very long if a is too big\n    #Just for practice. Remove if you can, and write the code in about 20 lines\n    #print(a, b, n)\n    x = [a, -n % a]\n    y = [b, -n // a]\n    if x[0] == y[0] and x[1] == y[1]:\n        #print('Solution found')\n        return x\n    return None\n",
        "test": "assert     find_solution(1, 2, 4) == None",
        "num_ids": 544
    },
    {
        "number": 161,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    for i in list2:\n        list1.remove(i)\n    return list1\n",
        "test": "assert         remove_elements([1, 2, 3], [2, 3]) == [1]",
        "num_ids": 410
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return sum_series(n/2)\n    else:\n        return n + sum_series(n-2)",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 257
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25*s*(s+2*l)*(l+2*s))\n",
        "test": "assert     area_polygon(8, 3) == 30",
        "num_ids": 338
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_of_divisors += i\n    if sum_of_divisors == n:\n        return True\n    else:\n        return False\n",
        "test": "assert    div_sum(12) == False",
        "num_ids": 331
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([letter for letter in str1.lower() if letter == letter.upper()])\n",
        "test": "assert     count_char_position('bbbbbcccc') == 6",
        "num_ids": 392
    },
    {
        "number": 166,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    s = set(A)\n    count = 0\n    for a in s:\n        if (a ^ 2) in s:\n            count += 1\n    return count\n",
        "test": "assert     find_even_pair([]) == 0",
        "num_ids": 2329
    },
    {
        "number": 167,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 1\n    while p < n:\n        p *= 2\n    return p\n",
        "test": "assert     next_power_of_2(7)     == 8",
        "num_ids": 247
    },
    {
        "number": 168,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for n in a:\n        if x == n:\n            count = count + 1\n    return count\n",
        "test": "assert     frequency([1, 1, 2, 2, 3],2) == 2",
        "num_ids": 346
    },
    {
        "number": 170,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = sum(list1[m:n+1])\n    return result\n",
        "test": "assert     sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9",
        "num_ids": 400
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "test": "assert     perimeter_pentagon(6) == 30",
        "num_ids": 158
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = 0\n    for word in s.split():\n        if word =='std':\n            counter += 1\n    return counter\n",
        "test": "assert     count_occurance('test') == 0",
        "num_ids": 208
    },
    {
        "number": 222,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all([type(i)==type(test_tuple[0]) for i in test_tuple])\n",
        "test": "assert     check_type((1,2,\"3\",4,5))     == False, \"Failed Check_type\"",
        "num_ids": 331
    },
    {
        "number": 223,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_majority([1, 2, 3, 4, 4, 4], 5, 3) == False",
        "num_ids": 2313
    },
    {
        "number": 224,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n",
        "test": "assert     count_Set_Bits(4) == 1",
        "num_ids": 270
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n",
        "test": "assert     odd_values_string('hello') == 'hlo', 'Failed'",
        "num_ids": 227
    },
    {
        "number": 227,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     min_of_three(1,2,3) == 1",
        "num_ids": 305
    },
    {
        "number": 228,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n&l)==0 and (n&r)==0:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(0,0,5) == True",
        "num_ids": 430
    },
    {
        "number": 229,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for x in arr:\n        if x < 0:\n            negative.append(x)\n        else:\n            positive.append(x)\n    negative.extend(positive)\n    return negative\n",
        "test": "assert     [re_arrange_array([2, -1, 1, 3, 0, -1, -3, 2, 4], 3) == [2, -1, 1, -3, -1, 2, 3, 0, 4]]",
        "num_ids": 2530
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "test": "assert     replace_blank('string', 'char') =='string','replace_blank is not working'",
        "num_ids": 328
    },
    {
        "number": 232,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse = True)\n    return list1[0:n]\n",
        "test": "assert     larg_nnum([1,3,5,7,9,2,4,6,8,0],1) == [9]",
        "num_ids": 553
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 2*3.1415*r*h\n    return s\n",
        "test": "assert     lateralsuface_cylinder(1,1.5) == 4*math.pi*r**2",
        "num_ids": 360
    },
    {
        "number": 234,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(2) == 8",
        "num_ids": 145
    },
    {
        "number": 235,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n & 0x55)\n",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 156
    },
    {
        "number": 237,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n",
        "test": "assert     check_occurences([(1,1), (2, 2), (3, 3)]) ==     {(1,1):1, (2,2):1, (3,3):1}",
        "num_ids": 575
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def substrings(s): \n        return len([i for i in range(len(s)) if s[i]!= s[i-1]])\n    return sum([substrings(s) for s in str.split()])\n",
        "test": "assert     number_of_substrings('abc') == 3",
        "num_ids": 401
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # m = 26, n = 4\n    # there are 2 sequences of length 4, (12,13,14,15), (16,17,18,19)\n    # there are 2 sequences of length 3, (13,14,15), (16,17,18)\n    # there are 2 sequences of length 2, (14,15), (16,17)\n    # there are 2 sequences of length 1, (15), (16)\n    # there are 2 sequences of length 0, (15,16)\n    # there are 3 sequences of length 1, (15,16,17), (16,17,18)\n    # there are 4 sequences of length 2, (13,14,15,16), (16,17,18,19), (16,17,18,19), (17,18,19,20)\n    # there are 5 sequences of length 3, (13,14,15,16,17), (16,17,18,19,20), (16,17,18,19,20), (17,18,19,20,21), (17,18,19,20,21), (18,19,20,21,22)\n    # there are 6 sequences of length 4, (13,14,15,16,17,18), (16,17,18,19,20,21), (16,17,18,19,20,21), (17,18,19,20,21,22), (17,18,19,20,21,22), (18,19,20,21,22,23), (18,19,20,21,22,23), (19,20,21,22,23,24)\n    # there are 8 sequences of length 5, (13,14,15,16,17,18,19), (16,17,18,19,20,21,22,23), (16,17,18,19,20,21,22,23), (17,18,19,20,21,22,23,24), (17,18,19,20,21,22,23,24), (18,19,20,21,22,23,24,25), (18,19,20,21,22,23,24,25), (19,20,21,22,23,24,25,26)\n    # there are 10 sequences of length 6, (13,14,15,16,17,18,19,20,21), (16,17,18,19,20,21,22,23,24,25), (16,17,18,19,20,21,22,23,24,25), (17,18,19,20,21,22,23,24,25,26), (17,18,19,20,21,22,23,24,25,26), (18,19,20,21,22,23,24,25,26,27), (18,19,20,21,22,23,24,25,26,27), (19,20,21,22,23,24,25,26,27,28), (19,20,21,22,23,24,25,26,27,28)\n    # there are 12 sequences of length 7, (13,14,15,16,17,18,19,20,21,22), (16,17,18,19,20,21,22,23,24,25,26,27), (16,17,18,19,20,21,22,23,24,25,26,27), (17,18,19,20,21,22,23,24,25,26,27,28), (17,18,19,20,21,22,23,24,25,26,27,28), (18,19,20,21,22,23,24,25,26,27,28,29), (18,19,20,21,22,23,24,25,26,27,28,29), (19,20,21,22,23,24,25,26,27,28,29,30), (19,20,21,22,23,24,25,26,27,28,29,30)\n    # there are 14 sequences of length 8, (13,14,15,16,17,18,19,20,21,22,23), (16,17,18,19,20,21,22,23,24,25,26,27), (16,17,18,19,20,21,22,23,24,25,26,27), (17,18,19,20,21,22,23,24,25,26,27,28), (17,18,19,20,21,22,23,24,25,26,27,28), (18,19,20,21,22,23,24,25,26,27,28,29), (18,19,20,21,22,23,24,25,26,27,28,29), (19,20,21,22,23,24,25,26,27,28,29,30), (19,20,21,22,23,24,25,26,27,28,29,30), (20,21,22,23,24,25,26,27,28,29,30,31)\n    # there are 16 sequences of length 9, (13,14,15,16,17,18,19,20,21,22,23,24), (16,17,18,19,20,21,22,23,24,25,26,27), (16,17,18,19,20,21,22,23,24,25,26,27), (17,18,19,20,21,22,23,24,25,26,27,28), (17,18,19,20,21,22,23,24,25,26,27,28), (18,19,20,21,22,23,24,25,26,27,28,29), (18,19,20,21,22,23,24,25,26,27,28,29), (19,20,21,22,23,24,25,26,27,28,29,30), (19,20,21,22,23,24,25,26,27,28,29,30), (20,21,22,23,24,25,26,27,28,29,30,31), (20,21,22,23,24,25,26,27,28,29,30,31)\n    # there are 18 sequences of length 10, (13,14,15,16,17,18,19,20,21,22,23,24,25), (16,17,18,19,20,21,22,23,24,25,26,27,28), (16,17,18,19,20,21,22,23,24,25,26,27,28), (17,18,19,20,21,22,23,24,25,26,27,28,29), (17,18,19,20,21,22,23,24,25,26,27,28,29), (18,19,20,21,22,23,24,25,26,27,28,29,30), (18,19,20,21,22,23,24,25,26,27,28,29,30), (19,20,21,22,23,24,25,26,27,28,29,30,31), (19,20,21,22,23,24,25,26,27,28,29,30,31), (20,21,22,23,24,25,26,27,28,29,30,31,32)\n    # there are 22 sequences of length 11, (13,14,15,16,17,18,19,20,21,22,23,24,25,26), (16,17,18,19,20,21,22,23,24,25,26,27,28,29), (16,17,18,19,20,21,22,23,24,25,26,27,28,29), (17,18,19,20,21,22,23,24,25,26,27,28,29,30), (17,18,19,20,21,22,23,24,25,26,27,28,29,30), (18,19,20,21,22,23,24,25,26,27,28,29,30,31), (18,1",
        "test": "assert     get_total_number_of_sequences(5, 3) ==     8",
        "num_ids": 2347
    },
    {
        "number": 240,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1):\n        list1[i] = list1[i]\n    for j in range(len(list2)):\n        list1[len(list1)-1] = list2[j]\n    return list1\n",
        "test": "assert     replace_list([1,2,3,4], [5,6,7])    == [1,2,3,7], \"test 1\"",
        "num_ids": 485
    },
    {
        "number": 242,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac('aaaa') == 4",
        "num_ids": 227
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n",
        "test": "assert     next_Perfect_Square(1) == 1",
        "num_ids": 281
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i = 1\n    max_sum = arr[0]\n    while i < len(arr):\n        if arr[i] > arr[i-1]:\n            max_sum += arr[i]\n        else:\n            max_sum -= arr[i-1]\n        i += 1\n    return max_sum\n",
        "test": "assert ",
        "num_ids": 2244
    },
    {
        "number": 246,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    while guess*guess!= number:\n        guess = (guess + number/guess)/2.0\n    return guess\n",
        "test": "assert     babylonian_squareroot(16) == 4",
        "num_ids": 260
    },
    {
        "number": 247,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    n = len(str)\n    T = [[0 for x in range(n)] for x in range(n)] \n    maxLen = 1\n    i=0\n    while i<n:\n        T[i][i] = 1\n        i+=1\n    j = 2\n    while j<n:\n        if str[j-1]==str[j-2] and j<n-1:\n            T[j-1][j] = 2\n            j+=1\n        elif str[j-1]==str[j-2] and j==n-1:\n            T[j-1][j] = 2\n            j+=1\n        elif str[j-1]!=str[j-2]:\n            T[j-1][j] = max(T[j-2][j-1],T[j-1][j-1])\n            j+=1\n        maxLen = max(maxLen, T[j-1][j])\n    return maxLen\n",
        "test": "assert     lps('a') == 1",
        "num_ids": 689
    },
    {
        "number": 248,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 260
    },
    {
        "number": 249,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n    \n    if len(nums1) <= len(nums2):\n        nums = nums1\n    else:\n        nums = nums2\n    \n    return list(nums)\n",
        "test": "assert     intersection_array([1,2,3,4,5], [1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 457
    },
    {
        "number": 250,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n",
        "test": "assert     count_X((1, 2, 3, 4, 5, 2, 1), 4) == 1",
        "num_ids": 346
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+list\n",
        "test": "assert     insert_element([1,2,3,4,5],10) == [10,1,2,3,4,5]",
        "num_ids": 390
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function t",
        "test": "assert     convert([complex(4, 2), complex(2, -4), complex(3, -5.5)]) == [4.0, 2.0, 90.0, 2.0, 0.0]",
        "num_ids": 444
    },
    {
        "number": 253,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([a for a in list1 if type(a) is int])\n",
        "test": "assert     count_integer([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 10",
        "num_ids": 286
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # list_combinations = list(combinations_with_replacement(l, n))\n    # return list_combinations\n    # return list(combinations_with_replacement(l, n))\n    return [(a, b, c) for a in l for b in l for c in l if a!= b!= c]\n",
        "test": "assert     [(1,2,3,4,5), (1,2,3,5,4), (1,2,4,3,5), (1,2,4,5,3), (1,2,5,3,4), (1,2,5,4,3), (1,3,4,2,5), (1,3,4,5,2), (1,3,5,2,4), (1,3,5,4,2), (1,4,2,3,5), (1,4,2,5,3), (1,4,3,2,5), (1,4,3,5,2), (1,4,5,2,3), (1,4,5,3,2), (1,5,2,3,4), (1,5,2,4,3), (1,5,3,2,4), (1,5,3,4,2), (1,5,4,2,3), (2,1,3,4,5), (2,1,3,5,4), (2,1,4,3,5), (2,1,4,5,3), (2,1,5,3,4), (2,1,5,4,3), (2,3,4,1,5), (2,3,4,5,1), (2,3,5,1,4), (2,3,5,4,1), (2,4,1,3,5), (2,4,1,5,3), (2,4,3,1,5), (2,4,3,5,1), (2,4,5,1,3), (2,4,5,3,1), (2,5,1,3,4), (2,5,1,4,3), (2,5,3,1,4), (2,5,3,4,1), (2,5,4,1,3), (3,1,2,4,5), (3,1,2,5,4), (3,1,4,2,5), (3,1,4,5,2), (3,1,5,2,4), (3,1,5,4,2), (3,2,4,1,5), (3,2,4,5,1), (3,2,5,1,4), (3,2,5,4,1), (3,3,4,1,5), (3,3,4,5,1), (3,3,5,1,4), (3,3,5,4,1), (3,4,1,2,5), (3,4,1,5,2), (3,4,2,1,5), (3,4,2,5,1), (3,4,5,1,2), (3,4,5,2,1), (3,5,1,2,4), (3,5,1,4,2), (3,5,2,1,4), (3,5,2,4,1), (3,5,4,1,2), (4,1,2,3,5), (4,1,2,5,3), (4,1,3,2,5), (4,1,3,5,2), (4,1,5,2,3), (4,1,5,3,2), (4,2,3,1,5), (4,2,3,5,1), (4,2,5,1,3), (4,2,5,3,1), (4,3,1,2,5), (4,3,1,5,2), (4,3,2,1,5), (4,3,2,5,1), (4,3,5,1,2), (4,3,5,2,1), (4,4,1,2,5), (4,4,1,5,2), (4,4,2,1,5), (4,4,2,5,1), (4,4,5,1,2), (4,4,5,2,1), (4,5,1,2,3), (4,5,1,3,2), (4,5,2,1,3), (4,5,2,3,1), (4,5,3,1,2), (5,1,2,3,4), (5,1,2,4,3), (5,1,3,2,4), (5,1,3,4,2), (5,1,4,2,3), (5,1,4,3,2), (5,2,3,1,4), (5,2,3,4,1), (5,2,4,1,3), (5,2,4,3,1), (5,3,1,2,4), (5,3,1,4,2), (5,3,2,1,4), (5,3,2,4,1), (5,3,4,1,2), (5,3,4,2,1), (5,4,1,2,3), (5,4,1,3,2), (5,4,2,1,3), (5,4,2,3,1), (5,4,3,1,2), (5,4,3,2,1), (5,5,1,2,4), (5,5,1,4,2), (5,5,2,1,4), (5,5,2,4,1), (5,5,3,1,4), (5,5,3,4,1)] == combinations_colors([1,2,3,4,5], 5)",
        "num_ids": 2253
    },
    {
        "number": 256,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        is_Prime = True\n        for num in range(2, n):\n            if n % num == 0:\n                is_Prime = False\n                break\n        if is_Prime:\n            return 1 + count_Primes_nums(n-1)\n        else:\n            return count_Primes_nums(n-1)\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 2369
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "test": "assert     swap_numbers(1,2) == (2,1)",
        "num_ids": 152
    },
    {
        "number": 259,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert     maximize_elements([1, 2, 3, 4, 5], [9, 8, 7, 6, 5]) == [9, 8, 7, 6, 5]",
        "num_ids": 755
    },
    {
        "number": 260,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    s = 0\n    m = 0\n    d = 1\n    a = 1\n    b = 0\n    while d!= 1:\n        m = a + s**2\n        d = gcd(m - 1, n)\n        b = (a - s*m)//d\n        a = m\n        s = b\n    return (m + 1)\n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 516
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n",
        "test": "assert     division_elements(('1', '2', '3', '4'), ('a', 'b', 'c')) == (1/2, 'b', 'c/4')",
        "num_ids": 443
    },
    {
        "number": 262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n",
        "test": "assert ",
        "num_ids": 355
    },
    {
        "number": 264,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert     0 == dog_age(0)",
        "num_ids": 180
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "test": "assert         list_split([], 1)     == [[]]",
        "num_ids": 475
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateral_surface_area = 6*l**2\n    return lateral_surface_area\n",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 213
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total = total + i**2\n    return total\n",
        "test": "assert     square_Sum(3) == 10",
        "num_ids": 226
    },
    {
        "number": 268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1:\n        return\n    if n == 1:\n        print('*',end='')\n        return\n    stars = 1\n    row = 1\n    while row <= n:\n        for _ in range(1,stars+1):\n            print('*',end='')\n        stars += 2\n        print()\n        row += 1\n    for _ in range(1,stars+1):\n        print('*',end='')\n    print()\nfind_star_num(3)\n",
        "test": "assert     find_star_num(20) == 3125",
        "num_ids": 439
    },
    {
        "number": 269,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97, \"ascii_value: Should be 97\"",
        "num_ids": 206
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0,len(arr),2):\n        total = total + arr[i]\n    return total\n",
        "test": "assert     sum_even_and_even_index([5,4,3,2,1,0,-1,-2,-3,-4,-5]) == 0",
        "num_ids": 453
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for x in range(2,n+1,2):\n        total += x**5\n    return total\n",
        "test": "assert     even_Power_Sum(1) == 0",
        "num_ids": 2266
    },
    {
        "number": 272,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[1])\n    return result\n",
        "test": "assert     rear_extract([(1,2),(3,4),(5,6)]) == [2,4,6]",
        "num_ids": 491
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n",
        "test": "assert     substract_elements( (1, 2, 3, 4, 5), (6, 7, 8, 9, 10) ) == (1, -2, -3, -4, -5)",
        "num_ids": 487
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2* n * even_binomial_Coeff_Sum(n-1)\n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 337
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return ((math.pi/4)*(r**2)*h)\n",
        "test": "assert     volume_cylinder(0, 1)    ==    0",
        "num_ids": 256
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n",
        "test": "assert     dict_filter({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5}, 3) == {\"3\": 3, \"4\": 4, \"5\": 5}",
        "num_ids": 525
    },
    {
        "number": 278,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(1, len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert     (count_first_elements(tuple()) == 0)",
        "num_ids": 494
    },
    {
        "number": 279,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int((10 * n) + (9 * ((n * (n + 1)) / 2)))\n",
        "test": "assert     is_num_decagonal(0) == 0",
        "num_ids": 235
    },
    {
        "number": 280,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert     (sequential_search([1, 2, 3, 4, 5], 1) == (True, 0)), \"Error\"",
        "num_ids": 476
    },
    {
        "number": 281,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert     all_unique( [1,2,3,4,1,2,3,4,5,6,7,8,9,0] ) == False",
        "num_ids": 336
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in nums1:\n        for j in nums2:\n            if i == j:\n                nums2.remove(j)\n                break\n    return nums2\n",
        "test": "assert     sub_list([1,2,3], [1,2,3]) == []",
        "num_ids": 309
    },
    {
        "number": 283,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n) == int:\n        num = str(n)\n        for i in range(len(num)):\n            if num.count(str(i)) > num.count(str(i)):\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert     validate(12) == True, 'Case 2'",
        "num_ids": 304
    },
    {
        "number": 284,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "test": "assert     check_element([1,2,3],1) == False",
        "num_ids": 311
    },
    {
        "number": 285,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search('ab{2,3}', text)\n",
        "test": "assert     text_match_two_three('abbabbb')",
        "num_ids": 258
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    repeated_array = a * k \n    max_sum = 0 \n    for i in range(n):\n        max_sum = max(max_sum, repeated_array[i]+max_sub_array_sum_repeated(a, n, k+1)[i])\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([2,3,6,-7,3], 3, 2) == 12",
        "num_ids": 597
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    # n = input('Enter a number: ')\n    # print n\n    if not isinstance(n,int):\n        raise TypeError\n    if n < 0:\n        raise ValueError\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return square_Sum(n-1) + (n**2)\n",
        "test": "assert     square_Sum(10) == 385",
        "num_ids": 277
    },
    {
        "number": 290,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    m=0\n    for i in range(len(list1)):\n        if len(list1[i])>=m:\n            m=len(list1[i])\n            m_list=list1[i]\n    return m_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5, 6]]) == [4, 5, 6]",
        "num_ids": 910
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0 or n == 0:\n        return 0\n    elif k == 1:\n        return n\n    else:\n        # return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n",
        "test": "assert     count_no_of_ways(4, 2) == 13",
        "num_ids": 535
    },
    {
        "number": 292,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        raise ZeroDivisionError('Denominator should be non zero')\n    else:\n        return int(n / m)\n",
        "test": "assert     find(8,4) == 2",
        "num_ids": 238
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # s=(w**2+h**2)**0.5\n    # return s*2/w\n    return (w**2+h**2)**0.5\n    \n    \ndef three_perim(a,b,c):\n    '''\n    Write a function that takes in three integer values a, b, and c and returns True if they can be the sides of a right\n    angled triangle and False if they cannot.\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    return False\n    \ndef area_of_triangle(a,b,c):\n    '''\n    Write a function that takes in three integer values a, b, and c and returns the area of a right angled triangle\n    using Heron's formula.\n    '''\n    s=(a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n    \ndef change_sign(x):\n    '''\n    Write a function that takes in a number x and returns -x if x is negative and x if x is positive.\n    '''\n    if x>0:\n        return x\n    return -x\n    \ndef quadratic_equation(a,b,c):\n    '''\n    Write a function that takes in three integer values a, b, and c and returns True if they are the solution of a\n    quadratic equation and False if they cannot be the solution of a quadratic equation.\n    '''\n    # x=(-b+((b**2)-(4*a*c))**0.5)/2*a\n    # if x>0:\n    #     return x\n    # return -x\n    return (-b+((b**2)-(4*a*c))**0.5)/2*a\n    \n    \ndef change_if_even(n):\n    '''\n    Write a function that takes in a number n and returns -n if it is even and n+1 if it is odd.\n    '''\n    if n%2==0:\n        return -n\n    return n+1\n    \n    \ndef compute_gcd(a,b):\n    '''\n    Write a function that takes in two integers a and b and returns their greatest common divisor.\n    '''\n    # if b==0:\n    #     return a\n    # return compute_gcd(b,a%b)\n    return a if b==0 else compute_gcd(b,a%b)\n    \ndef max_sequence(nums):\n    '''\n    Write a function that takes in a list of integers and returns the max sum of non-adjacent numbers in the list.\n    '''\n    # if len(nums)==0:\n    #     return 0\n    # if len(nums)==1:\n    #     return nums[0]\n    # max_so_far=nums[0]\n    # max_ending_here=max_ending_here+nums[1]\n    # for i in range(2,len(nums)):\n    #     max_ending_here=max(nums[i],max_ending_here+nums[i])\n    #     max_so_far=max(max_so_far,max_ending_here)\n    # return max_so_far\n    # return sum(nums) if len(nums)==0 else max(nums[0],max_sequence(nums[1:]))\n    return max(nums[0],max_sequence(nums[2:])) if len(nums)==0 else max(nums[0],max_sequence(nums[1:]),max_sequence(nums[2:]))\n    \ndef sum_of_the_numbers(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the numbers 1 to n.\n    '''\n    # return n*(n+1)/2\n    return int(n*(n+1)/2)\n    \ndef find_integer(n):\n    '''\n    Write a function that takes in a number n and returns True if the number is a perfect number and False if it is not.\n    '''\n    # if n==1:\n    #     return False\n    # if n==2:\n    #     return True\n    # if n%2==0:\n    #     return False\n    # return find_integer(n-1)\n    return n==1 or n==2 or n%2==0 and find_integer(n-2)\n    \ndef sum_of_the_numbers_lst(lst):\n    '''\n    Write a function that takes in a list and returns the sum of the numbers in the list.\n    '''\n    # if len(lst)==0:\n    #     return 0\n    # return sum_of_the_numbers(lst[0])+sum_of_the_numbers(lst[1:])\n    return sum(lst)\n    \ndef is_fib(n):\n    '''\n    Write a function that takes in a number n and returns True if n is a Fibonacci number and False if it is not.\n    '''\n    # if n<0:\n    #     return False\n    # if n==0 or n==1:\n    #     return True\n    # return is_fib(n-1)+is_fib(n-2)\n    return is_fib_helper(n,0,1)\n    \ndef is_fib_helper(n,a,b):\n    if n==0:\n        return True\n    if n<0:\n        return False\n    return is_fib_helper(n-1,b,a+b)\n    \n    \ndef fib_with_memo(n,memo):\n    '''\n    Write a function that takes in a number n and returns the nth Fibonacci number.\n    '''\n    # if n<0:\n    #     return 0\n    # if n==0:\n    #     return 0\n    # if n==1:\n    #     return 1\n    # if n in memo:\n    #     return memo[n]\n    # result=fib_with_memo(n-1,memo)+fib_with_memo(n-2,memo)\n    # memo[n]=result\n    # return result\n    return fib_with_memo_helper(n,0,1,memo)\n    \ndef fib_with_memo_helper(n,a,b,memo):\n    if n==0:\n        return a\n    if n==1:\n        return b\n    if n in memo:\n        return memo[n]\n    result=fib_with_memo_helper(n-1,a,b,memo)+fib_with_memo_helper(n-2,a,b,memo)\n    memo[n]=result\n    return result\n    \ndef fib_with_dp(n):\n    '''\n    Write a function that takes in a number n and returns the nth Fibonacci number.\n    '''\n    # if n<0:\n    #     return 0\n    # if n==0 or n==1:\n    #     return 1\n    # result=fib_with_dp(n-1)+fib_with_dp(n-2)\n    # return result\n    return fib_with_dp_helper(n,0,1)\n    \ndef fib_with_dp_helper(n,a,b):\n    if n==0:\n        return a\n    if n==1:\n        return b\n    return fib_with_dp_helper(n-1,b,a+b)\n    \ndef rotate_matrix(matrix):\n    '''\n    Write a function that takes in a matrix and returns a new matrix which is the transpose of the input matrix.\n    '''\n    if len(matrix)==0:\n        return []\n    return [list(row) for row in zip(*matrix)]\n    \ndef rotation_matrix(n):\n    '''\n    Write a function that takes in a number n and returns a matrix that has been rotated by n times.\n    '''\n    return [[1]*n for i in range(n)]\n    ",
        "test": "assert ",
        "num_ids": 241
    },
    {
        "number": 294,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return\n    if len(listval) == 1:\n        return listval[0]\n    return max(listval[0], max_val(listval[1:]))\n",
        "test": "assert     max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 337
    },
    {
        "number": 295,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    list = []\n    for i in range(1,number+1):\n        if number % i == 0:\n            list.append(i)\n    return sum(list)\n",
        "test": "assert     sum_div(1) == 1",
        "num_ids": 260
    },
    {
        "number": 296,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    sz = len(arr)\n    if sz < 2:\n        return 0\n    inv_count = 0\n    for i in range(sz):\n        for j in range(i+1, sz):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n    \n",
        "test": "assert     get_Inv_Count([1,2,5,7,4,6]) == 3",
        "num_ids": 369
    },
    {
        "number": 297,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in list1:\n        if isinstance(i,list):\n            list2.extend(flatten_list(i))\n        else:\n            list2.append(i)\n    return list2\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 477
    },
    {
        "number": 299,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(x[0] for x in stdata)\n",
        "test": "assert     max_aggregate([[(0,0), (0,0)], [(0,0), (0,0)], [(0,0), (0,0)], [(0,0), (0,0)]]) == (0,0)",
        "num_ids": 1060
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n<1:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n==3:\n        return 1\n    if n==4:\n        return 2\n    \n    result=0\n    result+=(n-1) * (n-2) * count_binary_seq(n-2)\n    if n%2==1:\n        result+=(n-1) * count_binary_seq(n-1)\n    if n%3==1:\n        result+=(n-1) * count_binary_seq(n-3)\n    \n    return result\n    ",
        "test": "assert     count_binary_seq(1) == 1",
        "num_ids": 424
    },
    {
        "number": 301,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n",
        "test": "assert     dict_depth({1:'a', 2:'b', 3:'c'})     ==     1",
        "num_ids": 2325
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[index] == 0 :\n        return arr[0]\n    elif ranges[index] == 1 :\n        return arr[1]\n    else :\n        return arr[index-rotations[index]]\n",
        "test": "assert     find_Element([1,2,3,4,5,6,7,8,9],(0,3),(2,5),0) == 1",
        "num_ids": 596
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0] == 'p':\n            result.append(word)\n    return result\n",
        "test": "assert     start_withp(['a', 'b', 'c']) == []",
        "num_ids": 491
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k <= index:\n        return 0\n    if n == 0:\n        return 0\n",
        "test": "assert ",
        "num_ids": 281
    },
    {
        "number": 307,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:m+n]\n",
        "test": "assert     colon_tuplex((4,9,2,6,1,3,5,7),3,7) == (6, 1, 3, 5, 7)",
        "num_ids": 402
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    s1, s2, s3, s4 = set(nums1), set(nums2), set(nums1), set(nums2)\n    prod = 1\n    for i in s1:\n        for j in s2:\n            prod = max(prod, i*j)\n    for i in s3:\n        for j in s4:\n            prod = max(prod, i*j)\n    return prod\n",
        "test": "assert     large_product([1,2,3,4,5,6,7,8,9,10], [2,4,6,8,10,12,14,16,18,20], 8) == [1,2,3,4,5,6,7,8]",
        "num_ids": 922
    },
    {
        "number": 309,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(10,20)    ==    20",
        "num_ids": 206
    },
    {
        "number": 310,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef tuple_to_string(tup):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    return ''.join(tup)\n",
        "test": "assert     string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 593
    },
    {
        "number": 311,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (n & (n - 1)) \n",
        "test": "assert    1 == set_left_most_unset_bit(1)",
        "num_ids": 287
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3.0)*math.pi*r*r*h\n    \ndef mass_cone(r,h):\n    '''\n    Write a function to find the mass of a cone.\n    '''\n    return (1/3.0)*math.pi*r*r*h\n",
        "test": "assert     volume_cone(1,1) == math.pi/3.0",
        "num_ids": 328
    },
    {
        "number": 388,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(n,0,-1):\n        if(i & (i-1)==0):\n            return i\n    return 0\n",
        "test": "assert     highest_Power_of_2(4) == 4",
        "num_ids": 216
    },
    {
        "number": 389,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 334
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "test": "assert     add_string([1,2,3], '{:d}\\n{:d}\\n{:d}\\n') == '1\\n2\\n3\\n1\\n2\\n3'",
        "num_ids": 569
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {key: {l1[i]: l2[i], l3[i]: l4[i]} for i, key in enumerate(l1)}\n",
        "test": "assert ",
        "num_ids": 219
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "test": "assert     get_max_sum (10) == 4",
        "num_ids": 353
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    input_list_len = []\n    for i in input_list:\n        input_list_len.append(len(i))\n    return input_list[input_list_len.index(max(input_list_len))]\n",
        "test": "assert max_length_list([1,2,3,4,5,6,7,8,9,10]) == 10",
        "num_ids": 589
    },
    {
        "number": 394,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_distinct(('a', 'b', 'c')) == True",
        "num_ids": 366
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for c in str1:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    for c in str1:\n        if d[c] == 1:\n            return c\n    return None\n",
        "test": "assert     first_non_repeating_character('a') == 'a'",
        "num_ids": 442
    },
    {
        "number": 396,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        print('True')\n    else:\n        print('False')\ncheck_char('abc')\ncheck_char('abcd')\ncheck_char('abcdz')\n",
        "test": "assert     not check_char('aa')",
        "num_ids": 247
    },
    {
        "number": 397,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    l = [a,b,c]\n    l.sort()\n    return l[1]\n",
        "test": "assert     median_numbers(1,2,3) == 2",
        "num_ids": 345
    },
    {
        "number": 398,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for i in nums:\n        total += sum(map(int, str(i)))\n    return total\n",
        "test": "assert     (sum_of_digits([121]) == 4)",
        "num_ids": 527
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print 'Tuple lengths not equal'\n        return None\n",
        "test": "assert     bitwise_xor((3, 1), (2, 0)) == (3, 2)",
        "num_ids": 305
    },
    {
        "number": 400,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for i in test_list:\n        if i not in freq_list:\n            freq_list.append(i)\n    return len(freq_list)\n",
        "test": "assert     extract_freq(['a','b','a','c','a','b','b']) == 3",
        "num_ids": 478
    },
    {
        "number": 401,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = [test_tup1[i] + test_tup2[i] for i in range(len(test_tup1))]\n    return tuple(res)\n",
        "test": "assert     (add_nested_tuples(('ab', 'cd'), ('ef', 'gh'))!= ('ae', 'be'))",
        "num_ids": 668
    },
    {
        "number": 404,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n",
        "test": "assert     minimum(3,4) == 3",
        "num_ids": 115
    },
    {
        "number": 405,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert     not check_tuplex(('a','b'),('a','b','c','e'))",
        "num_ids": 324
    },
    {
        "number": 406,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\n",
        "test": "assert     find_Parity(3) == True",
        "num_ids": 275
    },
    {
        "number": 407,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    n_list = list(str_n)\n    i = 0\n    while i < len(n_list) - 1:\n        if n_list[i] < n_list[i+1]:\n            j = len(n_list) - 1\n            while j > i:\n                if n_list[j] > n_list[i]:\n                    n_list[i],n_list[j] = n_list[j],n_list[i]\n                    break\n                j -= 1\n        i += 1\n    str_n = ''.join(n_list)\n    return int(str_n)\n",
        "test": "assert     rearrange_bigger(3) == 3",
        "num_ids": 678
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    if k < 0:\n        return None\n    if k == 0:\n        return []\n    for i in range(0, len(nums1)):\n        for j in range(0, len(nums2)):\n            heapq.heappush(h, (nums1[i] + nums2[j], [i, j]))\n            #if len(h) > k:\n            #    heapq.heappop(h)\n    ans = []\n    for i in range(k):\n        ans.append(heapq.heappop(h)[1])\n    return ans\n",
        "test": "assert     k_smallest_pairs([], [], 0) == []",
        "num_ids": 951
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x:x[0]*x[1])\n    return list1[0][0]*list1[0][1]\n",
        "test": "assert     min_product_tuple([(3,4), (1,3), (9,2), (4,4), (2,3), (5,2)]) == 60",
        "num_ids": 633
    },
    {
        "number": 410,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    minimum = None\n    \n    for x in listval:\n        if minimum == None or x < minimum:\n            minimum = x\n            \n    return minimum\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    maximum = None\n    \n    for x in listval:\n        if maximum == None or x > maximum:\n            maximum = x\n            \n    return maximum\n",
        "test": "assert     min_val([]) == None",
        "num_ids": 302
    },
    {
        "number": 411,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    elif word.isupper():\n        return word\n    else:\n        return re.sub('_([a-z])',lambda x: x.group(1).upper(),word)\n",
        "test": "assert     snake_to_camel('data') == 'data', \"Failed to Convert string: 'data'\"",
        "num_ids": 505
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n",
        "test": "assert     remove_odd([0,2,4,6,8,10]) == [0,2,4,6,8,10]",
        "num_ids": 437
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n-1] for tup in list1]\n",
        "test": "assert     extract_nth_element([(1,2), (2,3)], 1) == (1,2)",
        "num_ids": 416
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return(any(val in list1 for val in list2))\n",
        "test": "assert     overlapping([1,2,3,4],[1,2,3,4,5]) == True",
        "num_ids": 344
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    # Sort the array\n    arr.sort(reverse = True) \n    product = 1 \n    # Pick the first two elements \n    for i in xrange(n-1): \n        for j in xrange(i+1, n): \n            if arr[i] * arr[j] > product: \n                product = arr[i] * arr[j] \n                # print product \n    return product\n    \nprint max_Product([2, 3, -2, 4]) # 24\nprint max_Product([-2, -3, -1, -4]) # -24\nprint max_Product([-2, -3, 1, -4]) # 24\nprint max_Product([-2, -3, 4, 1]) # 24\nprint max_Product([-2, -3, -4, 1]) # 24\nprint max_Product([-2, -3, -4, 0]) # 0\nprint max_Product([-2, -3, -4, 1, 0]) # 24\nprint max_Product([-2, -3, -4, 1, 2, 3]) # 24\nprint max_Product([-2, -3, -4, 1, 2, -3]) # 24\nprint max_Product([-2, -3, -4, 1, 2, -1]) # 24",
        "test": "assert     (max_Product([-4,-3,-2,4,-2,-3,-5,-3]) == (-3, -2, -3))",
        "num_ids": 891
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for tup in Input:\n        if tup[0] == tup[1]:\n            print \"common first element:\",tup[0]\n            break\n",
        "test": "assert     group_tuples([('w', 'x', 'y'), ('t', 'u', 'v'), ('s', 't', 'r'), ('s', 't', 'a'), ('q', 'w', 'e'), ('s', 't', 'a')]) == (('w', 'x', 'y'), ('s', 't', 'r'), ('t', 'u', 'v'), ('s', 't', 'a'), ('q', 'w', 'e'), ('s', 't', 'a'))",
        "num_ids": 1346
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length=len(lst)\n    max=lst[0]\n    for i in lst:\n        if len(i)>=len(max):\n            max=i\n    print('The maximum length is',len(max))\nFind_Max(lst)",
        "test": "assert     Find_Max([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18]]) == 18, 'wrong output'",
        "num_ids": 514
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    res = 0\n    for n in list1:\n        res = res + round(n)\n    return res\n",
        "test": "assert     round_and_sum([1.5, 2.5, 3.5]) == 8",
        "num_ids": 378
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a = 0\n    for x in range(n):\n        a += x**3\n    return a\n    \ndef gen_prime(n):\n    '''\n    Write a python function to generate all prime numbers upto n.\n    '''\n    if n < 2: return []\n    prime = [2]\n    for x in range(3,n+1,2):\n        for y in prime:\n            if x%y == 0: break\n        else: prime.append(x)\n    return prime\n",
        "test": "assert     cube_Sum(0)         == 0",
        "num_ids": 283
    },
    {
        "number": 421,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for elem in test_tup:\n        result += elem\n    return result\n",
        "test": "assert     concatenate_tuple(('one','two','three')) == 'onetwothree', \"concatenate_tuple('one','two','three')\"",
        "num_ids": 475
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(n+1):\n        avg += (i ** 3)\n    return avg / n\n    \ndef find_Sqaure_Of_Cube(n):\n    '''\n    Write a python function to find the square of cubes of first n natural numbers.\n    '''\n    return n ** 3\n",
        "test": "assert     find_Average_Of_Cube(1) == 1.0",
        "num_ids": 280
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda s: s[-1], test_tuple))\n",
        "test": "assert     extract_rear(('I', 'am', 'a', 'test', 'tuple', 'of','strings', 'and', 'lists', 'that', 'contains', 'dictionaries')) == ('a', 'tuple', 'of','strings', 'and', 'lists', 'that', 'contains', 'dictionaries')",
        "num_ids": 484
    },
    {
        "number": 425,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if (list1[i] == x):\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list(['a', 'b', 'c', 'a', 'b', 'c', 'a'], 'a') == 3",
        "num_ids": 486
    },
    {
        "number": 426,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = [x for x in nums if x % 2!= 0]\n    return odds\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7]",
        "num_ids": 463
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return '{:02d}-{:02d}-{:04d}'.format(int(dt[6:8]), int(dt[4:6]), int(dt[:4]))\n    \n",
        "test": "assert     change_date_format(\"2005-01-12\") == \"12-01-2005\"",
        "num_ids": 593
    },
    {
        "number": 428,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def insertion_sort(my_list):\n        '''\n        Implement insertion sort as explained in class\n        '''\n        for i in xrange(1,len(my_list)):\n            temp = my_list[i]\n            j = i - 1\n            while j >= 0 and temp < my_list[j]:\n                my_list[j + 1] = my_list[j]\n                j -= 1\n            my_list[j + 1] = temp\n        return my_list\n    \n    def shell_sort_algo(my_list):\n        '''\n        Algorithm for shell sort\n        '''\n        h = 1\n        while h < len(my_list)/3:\n            h = 3*h + 1\n        while h >= 1:\n            for i in xrange(h,len(my_list)):\n                temp = my_list[i]\n                j = i - h\n                while j >= 0 and temp < my_list[j]:\n                    my_list[j + h] = my_list[j]\n                    j -= h\n                my_list[j + h] = temp\n            h /= 3\n        return my_list\n    \n    def shell_sort_2(my_list):\n        '''\n        Write a function to sort the given array by using shell sort.\n        '''\n        n = len(my_list)\n        h = n/2\n        while h > 0:\n            for i in xrange(h,n):\n                temp = my_list[i]\n                j = i\n                while j >= h and temp < my_list[j-h]:\n                    my_list[j] = my_list[j-h]\n                    j -= h\n                my_list[j] = temp\n            h /= 2\n        return my_list\n    \n    def shell_sort_3(my_list):\n        '''\n        Write a function to sort the given array by using shell sort.\n        '''\n        n = len(my_list)\n        h = n/2\n        while h > 0:\n            for i in xrange(h,n):\n                temp = my_list[i]\n                j = i\n                while j >= h and temp < my_list[j-h]:\n                    my_list[j] = my_list[j-h]\n                    j -= h\n                my_list[j] = temp\n            h /= 2\n        return my_list\n    \n    \n    #Check\n    #print \"Algorithm 3\",shell_sort_3([1,4,5,2,3,6,7,8,9])\n    #print \"Algorithm 2\",shell_sort_2([1,4,5,2,3,6,7,8,9])\n    #print \"Insertion\",insertion_sort([1,4,5,2,3,6,7,8,9])\n    #print \"Shell\",shell_sort_algo([1,4,5,2,3,6,7,8,9])\n    \n    if my_list == []:\n        return []\n    #print \"Shell_2\",shell_sort_2(my_list)\n    #print \"Shell_3\",shell_sort_3(my_list)\n    #print \"Shell\",shell_sort(my_list)\n    return shell_sort_algo(my_list)\n    \n    #Insertion sort\n    #for i in range(1,len(my_list)):\n    #    temp = my_list[i]\n    #    j = i - 1\n    #    while j >= 0 and temp < my_list[j]:\n    #        my_list[j + 1] = my_list[j]\n    #        j -= 1\n    #    my_list[j + 1] = temp\n    #return my_list\n",
        "test": "assert     shell_sort([]) == []",
        "num_ids": 1141
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(zip(test_tup1, test_tup2))\n",
        "test": "assert     and_tuples((1,2,3), (4,5)) == (1,2,3,4,5)",
        "num_ids": 477
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)\n",
        "test": "assert     parabola_directrix(1, 0, 0) ==     0",
        "num_ids": 399
    },
    {
        "number": 431,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n",
        "test": "assert     common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == False",
        "num_ids": 392
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n",
        "test": "assert     median_trapezium(1,1,0) == 0",
        "num_ids": 305
    },
    {
        "number": 433,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n        else:\n            return False\n",
        "test": "assert     check_greater([2, 4, 6, 8, 10, 11, 15], 4) == False",
        "num_ids": 514
    },
    {
        "number": 434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a{1}.*?b')\n    #pattern = re.compile(r'a(.*?)b')\n    #pattern = re.compile(r'a(.*?)b',re.DOTALL)\n    #pattern = re.compile(r'a(.*?)b',re.DOTALL)\n    #pattern = re.compile(r'a(.*?)b',re.DOTALL)\n    pattern = re.compile(r'a(.*?)b',re.DOTALL)\n    #pattern = re.compile(r'a(.*?)b',re.DOTALL)\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert ",
        "num_ids": 491
    },
    {
        "number": 435,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n",
        "test": "assert     last_Digit(0)         == 0",
        "num_ids": 253
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    return list2\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 243
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([x for i,x in enumerate(str1) if i%2==0])\n",
        "test": "assert     'b' == remove_odd('b')",
        "num_ids": 353
    },
    {
        "number": 438,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if (test_list[i],test_list[j]) == (test_list[j],test_list[i]):\n                result += 1\n    return result\n",
        "test": "assert     count_bidirectional( [(1,1),(2,2),(3,3)] ) == 0",
        "num_ids": 813
    },
    {
        "number": 439,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Make a list out of the single integer\n    return int(''.join([str(e) for e in L]))\n",
        "test": "assert     multiple_to_single([1, 2, 3, 4, 5, 6, 7]) == 1234567",
        "num_ids": 342
    },
    {
        "number": 440,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pat = re.compile(r'(?<=\\w)ad(?=\\s)')\n    m = pat.search(text)\n    # print m.group()\n    pos = []\n    if m:\n        pos.append(m.start())\n        pos.append(m.end())\n    # print pos\n    return pos\n",
        "test": "assert     find_adverb_position('') == []",
        "num_ids": 493
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "test": "assert     surfacearea_cube(2) == 24",
        "num_ids": 129
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            neg_count += 1\n        elif nums[i] > 0:\n            pos_count += 1\n    return (float(pos_count)/float(len(nums)))\n",
        "test": "assert     positive_count([-1,-2,-3,-4]) == 0.0",
        "num_ids": 541
    },
    {
        "number": 443,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    return list1[0]\n",
        "test": "assert     largest_neg([1, 2, -4, 10, 7, 1]) == -4",
        "num_ids": 504
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    def trim(tuple):\n        if len(tuple) > K:\n            return tuple[:K]\n        elif len(tuple) < K:\n            return tuple + (0,) * (K - len(tuple))\n        else:\n            return tuple\n",
        "test": "assert         trim_tuple([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == [(1, 2), (5, 6), (7, 8)]",
        "num_ids": 821
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n",
        "test": "assert     index_multiplication((1,3,5,7),(2,4,6)) == ((2,4,6,8),(3,6,9,12))",
        "num_ids": 405
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    ct = Counter(tup) \n    for item in lst: \n        ct[item] -= 1\n        if ct[item] < 0: \n            return False \n    return True \n",
        "test": "assert     count_Occurrence((1,2,3,4,5,6,7,8,9,10),[]) == [[]]",
        "num_ids": 1093
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x**3, nums)\n",
        "test": "assert     [cube_nums([2,3,4]) == [8,27,64], \"Test case 1 failed.\"]",
        "num_ids": 450
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n):\n        if is_palin(i):\n            total += i\n    return total\n",
        "test": "assert     cal_sum(1) == 0",
        "num_ids": 239
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if not str:\n        return []\n    return str[0:l]\n",
        "test": "assert     extract_string('word', 3) == 'wor', 'word'",
        "num_ids": 412
    },
    {
        "number": 451,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n    \ndef convert_string_to_list(text1):\n    '''\n    Write a function to convert the string to list\n    '''\n    return text1.split()\n",
        "test": "assert     remove_whitespaces('    ') == '',     'incorrect output'",
        "num_ids": 245
    },
    {
        "number": 452,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return (actual_cost-sale_amount)\n    return 0\n",
        "test": "assert     loss_amount(10,10) == 0",
        "num_ids": 326
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i=1\n    sum=0\n    while(i*i<=n):\n        if n%i==0:\n            if i%2==0:\n                sum=sum+i\n        i=i+1\n    return sum\n",
        "test": "assert     sumofFactors(24) == 34",
        "num_ids": 320
    },
    {
        "number": 454,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # the pattern will match the letters 'a' to 'z', the latter\n    # means that we can create a word that contains 'z' anywhere\n    pattern = '\\w*z\\w*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz('helloworldz')",
        "num_ids": 321
    },
    {
        "number": 455,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(1) == True",
        "num_ids": 399
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n",
        "test": "assert     reverse_string_list([\"\", \"\", \"\", \"\"])     ==     ['', '', '', '']",
        "num_ids": 455
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n",
        "test": "assert     Find_Min([9,12,2,5,3,8,9,10,11,1,4]) == 3",
        "num_ids": 402
    },
    {
        "number": 458,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(1,1) == 1,    'incorrect'",
        "num_ids": 218
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = ''.join(x for x in str1 if x.islower())\n    return result\n",
        "test": "assert     remove_uppercase('Flipper in the morning') == 'Flipper in the mornin'",
        "num_ids": 359
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    i = 0\n    for item in lst:\n        lst[i] = item[0]\n        i = i+1\n    return lst\n",
        "test": "assert     Extract([9, 19, 29, 39, 49, 59, 69, 79, 89, 99]) == [9, 19, 29, 39, 49, 59, 69, 79, 89, 99]",
        "num_ids": 364
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (i.isupper()):\n            count = count + 1\n    return count\n",
        "test": "assert     upper_ctr('Python') == 1",
        "num_ids": 283
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(chain.from_iterable(combinations(list1, r) for r in range(len(list1)+1)))\n",
        "test": "assert     combinations_list([1,2,3,4,5,6,7]) == [[], [1], [2], [3], [4], [5], [6], [1, 6], [2, 6], [1, 2, 6], [3, 6], [1, 3, 6], [2, 3, 6], [1, 2, 3, 6], [4, 6], [1, 4, 6], [2, 4, 6], [1, 2, 4, 6], [3, 4, 6], [1, 3, 4, 6], [2, 3, 4, 6], [1, 2, 3, 4, 6], [7], [1, 7], [2, 7], [1, 2, 7], [3, 7], [1, 3, 7], [2, 3, 7], [1, 2, 3, 7], [4, 7], [1, 4, 7], [2, 4, 7], [1, 2, 4, 7], [3, 4, 7], [1, 3, 4, 7], [2, 3, 4, 7], [1, 2, 3, 4, 7]]",
        "num_ids": 1102
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr is None:\n        return\n    if len(arr) == 0:\n        return\n    max_product = arr[0]\n    max_product_idx = 0\n    curr_product = arr[0]\n    curr_product_idx = 0\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            curr_product *= arr[i]\n            curr_product_idx = i\n        else:\n            curr_product = arr[i]\n            curr_product_idx = i\n        if curr_product > max_product:\n            max_product = curr_product\n            max_product_idx = curr_product_idx\n    return max_product, max_product_idx\n",
        "test": "assert max_subarray_product([-1,-2,-3,-4]) == 24",
        "num_ids": 574
    },
    {
        "number": 464,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) <= 1:\n        return True\n    return False\n",
        "test": "assert     check_value({'a': 1, 'b': 1, 'c': 1}, 'a') is True",
        "num_ids": 375
    },
    {
        "number": 465,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}\n",
        "test": "assert     drop_empty({\"a\":1, \"b\":2, \"c\":3}) == {\"a\":1, \"b\":2, \"c\":3}",
        "num_ids": 611
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 3:\n        return None\n    max_product = arr[0] * arr[1] * arr[2]\n    if max_product < arr[0] * arr[1]:\n        max_product = arr[0] * arr[1]\n    if max_product < arr[1] * arr[2]:\n        max_product = arr[1] * arr[2]\n    if max_product < arr[2] * arr[0]:\n        max_product = arr[2] * arr[0]\n    return max_product\n",
        "test": "assert     max_product([2,3,4,5]) == 24, 'Failed test case 2'",
        "num_ids": 639
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a, b = test_tup\n    return a+b\n",
        "test": "assert     add_pairwise((0, 2, 4)) == (0, 0, 0), \"Test 4 failed\"",
        "num_ids": 400
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for i in range(len(arr)):\n        mul = (mul * arr[i]) % n\n    return mul\n",
        "test": "assert     find_remainder([7, 2, 9], 19) == 9",
        "num_ids": 355
    },
    {
        "number": 472,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return len(l)==len(set(l))\n",
        "test": "assert     check_Consecutive([1,2,3,4,5]) == True, \"Failed on [1,2,3,4,5]\"",
        "num_ids": 447
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n    \n    \ndef non_repeating_elements(test_list):\n    '''\n    Write a function to find the non repeating elements in a given list. \n    '''\n    return list(set(test_list))\n",
        "test": "assert     tuple_intersection((1,2,3,4), (2,3,4,5)) == ()",
        "num_ids": 385
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n    ",
        "test": "assert     replace_char('kitten', 'a', 'a') == 'kitten'",
        "num_ids": 2252
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1 = dict1.items()\n    list2 = sorted(list1, key = lambda x : x[1])\n    return list2\n",
        "test": "assert ",
        "num_ids": 548
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(",
        "test": "assert     big_sum([]) == 0, \"Error\"",
        "num_ids": 407
    },
    {
        "number": 477,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    return string.lower()\n",
        "test": "assert     'abc'.isupper() is False, 'is_upper() is not working'",
        "num_ids": 224
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pass\n",
        "test": "assert     remove_lowercase('How can a computer learn?') == 'How can a computer learn?', 'case 4'",
        "num_ids": 597
    },
    {
        "number": 479,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n",
        "test": "assert     first_Digit(11) == 1",
        "num_ids": 186
    },
    {
        "number": 554,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i%2!= 0:\n            odds.append(i)\n    return odds\n",
        "test": "assert     Split([1, 2, 3, 4, 5, 6]) == [1, 3, 5], \"incorrect output\"",
        "num_ids": 433
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # use numpy to calculate sum of cubes\n    a = n*(n+1)*(2*n+1)/6\n    b = n*(n+1)/2\n    return a - b\n",
        "test": "assert     difference(1) == 0",
        "num_ids": 302
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    counter = 0\n    for i in range(N-1) :\n        for j in range(i+1,N) :\n            if (A[i]^A[j])%2 == 1 :\n                counter += 1\n    return counter\n",
        "test": "assert     find_Odd_Pair([5,3,1,9,6],10) == 0",
        "num_ids": 389
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n",
        "test": "assert     toggle_string('hello') == 'HELLO'",
        "num_ids": 386
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1, num2 = str(n1), str(n2)\n    if len(num1) > len(num2):\n        num1, num2 = num2, num1\n    longest = max(len(num1), len(num2))\n    dif = 0\n    for i in range(longest):\n        dif += abs(int(num1[i]) - int(num2[i]))\n    return dif\n",
        "test": "assert         digit_distance_nums(10, 10) == 0",
        "num_ids": 272
    },
    {
        "number": 559,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = max_so_far = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
        "test": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6",
        "num_ids": 734
    },
    {
        "number": 560,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set()\n    union_set.update(test_tup1)\n    union_set.update(test_tup2)\n    union_list = list(union_set)\n    union_list.sort()\n    return tuple(union_list)\n",
        "test": "assert     union_elements(('a', 'b'), ('c', 'd')) == ('a', 'b', 'c', 'd')",
        "num_ids": 494
    },
    {
        "number": 562,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if max_len < len(lst[i]):\n            max_len = len(lst[i])\n    return max_len\n",
        "test": "assert     Find_Max_Length([[1,2,3,4,5],[4,5,6,7,8],[4,5,6,7,8]]) == 5",
        "num_ids": 579
    },
    {
        "number": 563,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\\"(.*?)\\\"', text)\n",
        "test": "assert     extract_values('\"hello\"') == ['hello']",
        "num_ids": 259
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count = count + 1\n    return count\n",
        "test": "assert count_Pairs([1,3,4,2,6],5) == 3",
        "num_ids": 434
    },
    {
        "number": 565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert ",
        "num_ids": 50
    },
    {
        "number": 566,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert type(n) == int\n    assert n >= 0\n    return sum([int(d) for d in str(n)])\n",
        "test": "assert     sum_digits(1) == 1",
        "num_ids": 257
    },
    {
        "number": 567,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([])",
        "num_ids": 300
    },
    {
        "number": 568,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert     empty_list(3) == [{}, {}, {}]",
        "num_ids": 223
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(sorted(i))\n    return list2\n",
        "test": "assert     sort_sublists([['c', 'b', 'a'], ['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'c', 'a']]) == [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]",
        "num_ids": 573
    },
    {
        "number": 572,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for i in nums:\n        if i not in unique:\n            unique.append(i)\n    return unique\n",
        "test": "assert     two_unique_nums([]) == [], 'incorrect'",
        "num_ids": 656
    },
    {
        "number": 573,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    temp = 1\n    for i in list_data:\n        temp *= i\n    return temp\n",
        "test": "assert     unique_product([0,1,1,1,1]) == 0",
        "num_ids": 237
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Define radius and height\n    r = float(r)\n    h = float(h)\n    # Calculate the surface area of the cylinder\n    s = 2 * math.pi * r * (r + math.sqrt(r*r + h*h))\n    # Return surface area of the cylinder\n    return s\n",
        "test": "assert     surfacearea_cylinder(20,50) == 850",
        "num_ids": 347
    },
    {
        "number": 576,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        return False\n    elif len(A)==len(B):\n        return all(A[i] in B for i in range(len(A)))\n    else:\n        return any(B[i] in A[i+1:] for i in range(len(B)))\n",
        "test": "assert     is_Sub_Array([1, 2, 3, 4], [1, 2]) == False",
        "num_ids": 630
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return int(n%10)\n",
        "test": "assert     last_Digit_Factorial(10) == 0",
        "num_ids": 259
    },
    {
        "number": 578,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "test": "assert     interleave_lists([],[],[]) == []",
        "num_ids": 670
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # find the indices of matching elements\n    indices1 = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            indices1.append(i)\n    # find the indices of dissimilar elements\n    indices2 = []\n    for i in range(len(test_tup1)):\n        if i not in indices1:\n            indices2.append(i)\n    # return the dissimilar elements\n    return [test_tup1[x] for x in indices2]\n",
        "test": "assert     find_dissimilar((1, 2, 3, 4, 5, 6, 7, 8, 9), ",
        "num_ids": 605
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, (tuple, list)) and isinstance(test_tuple[0], (tuple, list)):\n        result = []\n        for item in test_tuple:\n            result.append(even_ele(item, even_fnc))\n        return tuple(result)\n    return even_fnc(test_tuple)\n",
        "test": "assert     (even_ele((1,2,3,4,5,6,7,8), lambda x: x % 2!= 0) == ",
        "num_ids": 457
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n",
        "test": "assert     surface_Area(7,6) == 36",
        "num_ids": 170
    },
    {
        "number": 582,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    return False\n",
        "test": "assert     my_dict({})",
        "num_ids": 189
    },
    {
        "number": 583,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return (2 * (2 * num - 1)) / (num - 1)\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 271
    },
    {
        "number": 584,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    search = re.search(r'\\w+ly',text)\n    if search:\n        return (search.span(),search.group())\n    else:\n        return ('No matches found')\n",
        "test": "assert     re.search('\\w{2}ly$','manly')",
        "num_ids": 835
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==0:\n        return []\n    if n>len(items):\n        n=len(items)\n    #print n\n    items=sorted(items,key=lambda x:x[1],reverse=True)\n    #print items\n    return items[:n]\n",
        "test": "assert     expensive_items(['A', 'B', 'C', 'D', 'E'], 0) == []",
        "num_ids": 551
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element, add the first part to the end\n    a = l[:n]\n    b = l[n:]\n    return a + b\n",
        "test": "assert     split_Arr([1,2,3,4,5,6,7,8,9], 5) == [1,2,3,4,5,6,7,8,9,None]",
        "num_ids": 477
    },
    {
        "number": 587,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1, 2, 3]) == tuple([1, 2, 3])",
        "num_ids": 313
    },
    {
        "number": 588,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([1,2,3,4,5]) == 4, 'Nope'",
        "num_ids": 383
    },
    {
        "number": 589,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a,b+1):\n        if i**0.5 == int(i**0.5):\n            result.append(i)\n    return result\n",
        "test": "assert     perfect_squares(10, 1) == [], \"Case 3\"",
        "num_ids": 378
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cos(y), x*sin(y)\n",
        "test": "assert     polar_rect(-1,-1)     == (-1,-1)",
        "num_ids": 283
    },
    {
        "number": 591,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Your Code Here\n    newList[0],newList[len(newList)-1] = newList[len(newList)-1],newList[0]\n    return newList\n    \n",
        "test": "assert     swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1], \"test1 for swap_List\"",
        "num_ids": 508
    },
    {
        "number": 592,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(0,k):\n        res = res * (n-i)\n        res = res // (i+1)\n    return res\n",
        "test": "assert     binomial_Coeff(5,0) == 1",
        "num_ids": 379
    },
    {
        "number": 593,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('\\.0*$','.0',ip)\n",
        "test": "assert     removezero_ip('1.1.1.1') == '1.1.1.1'",
        "num_ids": 385
    },
    {
        "number": 594,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    return list1[1] - list1[0]\n",
        "test": "assert     diff_even_odd([1,1,2,3,4,5,6,7,8,9]) == 0",
        "num_ids": 497
    },
    {
        "number": 595,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    if len(str1)!= len(str2) : \n        return -1\n    else : \n        count = 0\n        for i in range(len(str1)) : \n            if str1[i] == '0' and str2[i] == '1' : \n                str1[i] = '1'\n                str2[i] = '0'\n                count += 1\n            elif str1[i] == '1' and str2[i] == '0' : \n                continue\n            else : \n                continue\n    return count \n",
        "test": "assert     min_Swaps('0001000', '1100001') == 3",
        "num_ids": 567
    },
    {
        "number": 596,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for x in tuple_list:\n        count = count + sys.getsizeof(x)\n    return count\n",
        "test": "assert     tuple_size([]) == 0",
        "num_ids": 327
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len2 == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    else:\n        pivot1 = arr1[int(len1 / 2)]\n        pivot2 = arr2[int(len2 / 2)]\n        if pivot1 < pivot2:\n            if k <= int(len1 / 2):\n                return find_kth(arr1[:int(len1 / 2)], arr2, k)\n            else:\n                return find_kth(arr1, arr2[int(len2 / 2):], k - int(len1 / 2) - 1)\n        else:\n            if k <= int(len2 / 2):\n                return find_kth(arr1, arr2[:int(len2 / 2)], k)\n            else:\n                return find_kth(arr1[int(len1 / 2):], arr2[int(len2 / 2):], k - int(len2 / 2) - 1)\n",
        "test": "assert     find_kth([1, 2], [3, 4], 4) == 1",
        "num_ids": 1009
    },
    {
        "number": 598,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    sum = 0\n    while n:\n        rem = n%10\n        sum = sum + rem**3\n        n = n//10\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert     armstrong_number(12) == False",
        "num_ids": 360
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    return total, total/number\n",
        "test": "assert     sum_average(100) ==    (1405, 55.0)",
        "num_ids": 237
    },
    {
        "number": 600,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n",
        "test": "assert     ( is_Even(2) == True )",
        "num_ids": 169
    },
    {
        "number": 602,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for index in range(len(str1)):\n        if str1.count(str1[index]) > 1:\n            return str1[index]\n    return \"No repeated character found in the given string.\"\n    \n",
        "test": "assert     first_repeated_char('aba') == 'a'",
        "num_ids": 321
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    def get_lucid_nums(n, pre):\n        if n == 1:\n            return [1]\n        elif n == 2:\n            return [2]\n        elif n == 3:\n            return [3]\n        else:\n            pre.append(n)\n            return get_lucid_nums(n-1, pre) + get_lucid_nums(n-2, pre) + get_lucid_nums(n-3, pre)\n    \n    lucid_nums = []\n    lucid_nums = get_lucid_nums(n, [])\n    lucid_nums = sorted(lucid_nums)\n    return lucid_nums\n",
        "test": "assert     get_ludic(1) == [1]",
        "num_ids": 691
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(\" \")\n    words = list(reversed(words))\n    return \" \".join(words)\n    \ndef reverse_words_2(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(\" \")\n    words = list(reversed(words))\n    return \" \".join(words)\n    \ndef reverse_words_3(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_4(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_5(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(\" \")\n    words = words[::-1]\n    return \" \".join(words)\n    \ndef reverse_words_6(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_7(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n    \ndef reverse_words_8(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = reversed(s)\n    return \" \".join(s)\n    \ndef reverse_words_9(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = reversed(s)\n    return \" \".join(s)\n    \ndef reverse_words_10(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_11(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_12(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_13(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_14(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_15(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_16(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_17(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_18(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_19(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_20(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_21(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_22(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_23(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_24(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_25(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_26(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_27(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_28(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_29(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_30(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_31(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_32(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = ",
        "test": "assert     reverse_words('The quick brown fox jumped over the lazy dog') == 'dog lazy over the quick brown', 'fail'",
        "num_ids": 391
    },
    {
        "number": 605,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    else:\n        for n in range(2,num):\n            if num % n == 0:\n                return False\n        return True\n",
        "test": "assert     prime_num(2) == True, \"Two is a prime number\"",
        "num_ids": 571
    },
    {
        "number": 606,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "test": "assert     0 == radian_degree(0), radian_degree(0)",
        "num_ids": 253
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n",
        "test": "assert     find_literals('a', 'a') == ('a', 0, 1)",
        "num_ids": 342
    },
    {
        "number": 608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    count = 0\n    for i in range(n):\n        count = count + 1 \n        for j in range(i):\n            count = count + 1\n    return count\n",
        "test": "assert     bell_Number(100) == 5761478412288",
        "num_ids": 270
    },
    {
        "number": 610,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list=[]\n    i=0\n    while i<len(list1):\n        if i==L:\n            i=i+1\n        else:\n            new_list.append(list1[i])\n            i=i+1\n    return new_list\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 4, 5]",
        "num_ids": 418
    },
    {
        "number": 611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        print(\"N must be less than the length of the list\")\n        return None\n    return max(list(zip(*test_list))[N - 1])\n    # '''\n    # for row in test_list:\n    #     print(row)\n    #     print(row[N - 1])\n    # '''\n",
        "test": "assert     max_of_nth([",
        "num_ids": 561
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for i in range(0,len(lst)):\n        new_list.append([lst[i][0],lst[i][1]])\n    return new_list\n",
        "test": "assert     merge([[1, 2],[3, 4]]) == [[1, 2],[3, 4]]",
        "num_ids": 485
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    output = list(test_list)\n    for i in range(1,len(output)):\n        output[i] = output[i-1] + output[i]\n    return output\n",
        "test": "assert     cummulative_sum((1,2,3,4,5,6,7,8,9)) == [1,3,6,10,15,21,28,36,45]",
        "num_ids": 498
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(0, len(nums)):\n        total = 0\n        for j in range(0, len(nums[i])):\n            total += nums[i][j]\n        averages.append(total/len(nums[i]))\n    return averages\n",
        "test": "assert     average_tuple( ()) == []",
        "num_ids": 626
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    def tuple_mod(num1, num2):\n        return num1 % num2\n    return tuple(map(tuple_mod, test_tup1, test_tup2))\n",
        "test": "assert     (2, 3)     == tuple_modulo((2, 3), (3, 3))",
        "num_ids": 381
    },
    {
        "number": 617,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return 1\n    if d > steps: return 0\n    if d == steps: return 0\n    if d < 0: return 0\n    minimum_jumps = float(\"inf\")\n    for i in range(steps):\n        minimum_jumps = min(minimum_jumps, 1+min_Jumps(steps-i-1, d-i))\n    return minimum_jumps\n",
        "test": "assert     min_Jumps(3, 0) == 1",
        "num_ids": 396
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = [0] * len(nums1)\n    for i in range(len(nums1)):\n        result[i] = nums1[i] / nums2[i]\n    return result\n",
        "test": "assert     div_list([0,0,0], [1,2,3,4,5]) == [0,0,0,0,0]",
        "num_ids": 270
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    number_list = [x for x in test_str if x in \"0123456789\"]\n    space_list = [x for x in test_str if x in \" \"]\n    space_list.sort()\n    temp = [x for x in test_str if x not in \"0123456789\"]\n    for i in number_list:\n        temp.append(i)\n    for i in space_list:\n        temp.append(i)\n    return ''.join(temp)\n",
        "test": "assert     move_num(\"\") == \"\", \"wrong\"",
        "num_ids": 585
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if a == []:\n        return 0\n    if len(a) == 1:\n        return 1\n    a.sort()\n    index = 0\n    n = len(a)\n    while index < n - 1:\n        if a[index] < a[index + 1] / 2:\n            index += 1\n        else:\n            return n - index\n    return n\n",
        "test": "assert     largest_subset([1, 4, 4, 8]) == 3, \"WRONG\"",
        "num_ids": 357
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    res = []\n    for i in range(n):\n        res.append(arr1[i])\n        res.append(arr2[i])\n    res.sort()\n    med = res[n/2]\n    return med\n",
        "test": "assert get_median([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 6) == 5",
        "num_ids": 745
    },
    {
        "number": 623,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n",
        "test": "assert     nth_nums([1,2,3,4],2) == [1,4,9,16]",
        "num_ids": 504
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = ''\n    for letter in string:\n        upper_string += letter.upper()\n    return upper_string\n",
        "test": "assert     is_upper('c') == 'C',    'True'",
        "num_ids": 207
    },
    {
        "number": 625,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef add_List(newList):\n    '''\n    Write a python function to sum all elements in a given list.\n    '''\n    sum = 0\n    for i in newList:\n        sum += i\n    return sum\n    \ndef min_List(newList):\n    '''\n    Write a python function to return the smallest element in a given list.\n    '''\n    return min(newList)\n    \ndef max_List(newList):\n    '''\n    Write a python function to return the largest element in a given list.\n    '''\n    return max(newList)\n    \ndef num_List(newList):\n    '''\n    Write a python function to count the number of elements in a given list.\n    '''\n    return len(newList)\n    \ndef empty_List(newList):\n    '''\n    Write a python function to check if a list is empty or not.\n    '''\n    return True if len(newList)==0 else False\n    \ndef remove_List(newList, ele):\n    '''\n    Write a python function to remove the first occurrence of a given element from a given list.\n    '''\n    newList.remove(ele)\n    return newList\n    \ndef remove_List_1(newList, ele):\n    '''\n    Write a python function to remove the first occurrence of a given element from a given list.\n    '''\n    newList.remove(ele)\n    return newList\n    \ndef concatenate_List(newList1, newList2):\n    '''\n    Write a python function to concatenate two lists.\n    '''\n    newList1.extend(newList2)\n    return newList1\n    \ndef print_List(newList):\n    '''\n    Write a python function to print a given list elements.\n    '''\n    for i in newList:\n        print(i)\n        \ndef map_List(newList, func):\n    '''\n    Write a python function to map a list using a specified function\n    '''\n    newList = [func(i) for i in newList]\n    return newList\n    \ndef filter_List(newList, func):\n    '''\n    Write a python function to filter a list using a specified function.\n    '''\n    newList = [i for i in newList if func(i)]\n    return newList\n    \ndef reduce_List(newList, func, initializer=None):\n    '''\n    Write a python function to reduce a list using a specified function.\n    '''\n    from functools import reduce\n    newList = reduce(func, newList, initializer)\n    return newList\n    \ndef deep_reverse(newList):\n    '''\n    Write a python function to deep reverse a given list.\n    '''\n    newList2 = []\n    for i in newList:\n        if type(i) is list:\n            newList2.append(deep_reverse(i))\n        else:\n            newList2.append(i)\n    return newList2\n    \ndef power_List(newList, n):\n    '''\n    Write a python function to compute the nth power of a given list.\n    '''\n    newList = [i**n for i in newList]\n    return newList\n    \ndef find_min_List(newList):\n    '''\n    Write a python function to find the minimum element in a given list.\n    '''\n    return min(newList)\n    \ndef find_max_List(newList):\n    '''\n    Write a python function to find the maximum element in a given list.\n    '''\n    return max(newList)\n    \ndef sort_List(newList):\n    '''\n    Write a python function to sort a given list.\n    '''\n    newList.sort()\n    return newList\n    \ndef sort_List_1(newList):\n    '''\n    Write a python function to sort a given list in descending order.\n    '''\n    newList.sort(reverse=True)\n    return newList\n    \ndef sort_List_2(newList):\n    '''\n    Write a python function to sort a given list in ascending order.\n    '''\n    newList.sort()\n    return newList\n    \ndef sort_List_3(newList):\n    '''\n    Write a python function to sort a given list in descending order.\n    '''\n    return sorted(newList, reverse=True)\n    \ndef sort_List_4(newList):\n    '''\n    Write a python function to sort a given list in descending order.\n    '''\n    return sorted(newList)\n    \ndef sort_List_5(newList):\n    '''\n    Write a python function to sort a given list in descending order.\n    '''\n    newList = sorted(newList, reverse=True)\n    return newList\n    \ndef split_List(newList, i):\n    '''\n    Write a python function to split a given list into two parts.\n    '''\n    newList1 = newList[:i]\n    newList2 = newList[i:]\n    return newList1, newList2\n    \ndef avg_List(newList):\n    '''\n    Write a python function to compute the average of all elements in a given list.\n    '''\n    sum = 0\n    for i in newList:\n        sum += i\n    return sum/len(newList)\n    \ndef count_List(newList, ele):\n    '''\n    Write a python function to count the number of occurrences of a given element in a given list.\n    '''\n    return newList.count(ele)\n    \ndef get_List(newList):\n    '''\n    Write a python function to get the index of the first occurrence of a given element in a given list.\n    '''\n    return newList.index(ele)\n    \ndef get_List_1(newList):\n    '''\n    Write a python function to get the index of the last occurrence of a given element in a given list.\n    '''\n    return newList.index(ele)\n    \ndef insert_List(newList, ele, index):\n    '''\n    Write a python function to insert a given element at a given index in a given list.\n    '''\n    newList.insert(index, ele)\n    return newList\n    \ndef insert_List_1(newList, ele, index):\n    '''\n    Write a python function to insert a given element at a given index in a given list.\n    '''\n    newList.insert(index, ele)\n    return newList\n    \ndef insert_List_2(newList, ele, index):\n    '''\n    Write a python function to insert a given element at a given index in a given list.\n    '''\n    newList.insert(index, ele)\n    return newList\n    \ndef remove_List(newList, ele):\n    '''\n    Write a python function to remove the first occurrence of a given element from a given list.\n    '''\n    newList.remove(ele)\n    return newList\n    \ndef remove_List_1(newList, ele):\n    '''\n    Write a python function to remove the first occurrence of a given element from a given list.\n    '''\n    newList.remove(ele)\n    return newList\n    \ndef remove_List_2(newList, ele):\n    '''\n    Write a python function to remove the first occurrence of a given element from a given list.\n    '''\n    newList.remove(ele)\n    return newList\n    \ndef pop_List(newList):\n    '''\n    Write a python function to remove the last element of a given list.\n    '''\n    return newList.pop()\n    \ndef pop_List_1(newList):\n    '''\n    Write a python function to remove the last element of a given list.\n    '''\n    return newList.pop()\n    \ndef pop_List_2(newList):\n    '''\n    Write a python function to remove the last element of a given list.\n    '''\n",
        "test": "assert     swap_List([9,10]) == [10,9]",
        "num_ids": 403
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    print(r)\n    return math.pi * r**2 / 4\n",
        "test": "assert     ( 0.0 == triangle_area(0) )",
        "num_ids": 289
    },
    {
        "number": 627,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if end <= 0:\n        return 1\n    if start >= end:\n        return 1\n    if array[start]!= start:\n        return start\n    # find the largest num that is >= than the current num\n    for i in range(start+1,end):\n        if array[i] - array[start] >= 0:\n            return array[i]+1\n    return array[start]+1\ndef test_find_First_Missing():\n    array = [1,2,4,5,6,7,8,9,10]\n    assert(find_First_Missing(array)==11)\n    assert(find_First_Missing(array,start=3)==1)\n    assert(find_First_Missing(array,start=2,end=4)==2)\n    array = [1,2,3,5,6,7,8,9,10,11,12]\n    assert(find_First_Missing(array)==13)\n    assert(find_First_Missing(array,start=3)==1)\n    assert(find_First_Missing(array,start=2,end=4)==2)\n    assert(find_First_Missing(array,start=3,end=5)==3)\n    array = [1,2,3,5,6,7,8,9,10,11,12]\n    assert(find_First_Missing(array,start=3,end=5)==1)\n    assert(find_First_Missing(array,start=3,end=5)==1)\ndef find_Missing_Integer(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if end <= 0:\n        return 1\n    if array[start]!= start:\n        return start\n    # find the largest num that is >= than the current num\n    for i in range(start+1,end):\n        if array[i] - array[start] >= 0:\n            return array[i]+1\n    return array[start]+1\ndef test_find_Missing_Integer():\n    array = [1,2,4,5,6,7,8,9,10]\n    assert(find_Missing_Integer(array)==11)\n    assert(find_Missing_Integer(array,start=3)==1)\n    assert(find_Missing_Integer(array,start=2,end=4)==2)\n    array = [1,2,3,5,6,7,8,9,10,11,12]\n    assert(find_Missing_Integer(array)==13)\n    assert(find_Missing_Integer(array,start=3)==1)\n    assert(find_Missing_Integer(array,start=2,end=4)==2)\n    assert(find_Missing_Integer(array,start=3,end=5)==3)\n    array = [1,2,3,5,6,7,8,9,10,11,12]\n    assert(find_Missing_Integer(array,start=3,end=5)==1)\n    assert(find_Missing_Integer(array,start=3,end=5)==1)\n    assert(find_Missing_Integer(array,start=3,end=5)==1)\n",
        "test": "assert     find_First_Missing(array=[1,2,3,4,5,6,7,8,9],start=0,end=8) == 0",
        "num_ids": 813
    },
    {
        "number": 628,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "test": "assert     replace_spaces('hello') == 'hello'",
        "num_ids": 328
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n",
        "test": "assert         [2, 4, 6, 8, 10] == Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "num_ids": 301
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    coor = []\n    for x in range(1, max(ele[0], ele[1]) + 1):\n        if ele[0] + x <= max(ele[0], ele[1]) and ele[1] + x <= max(ele[0], ele[1]):\n            coor.append((ele[0] + x, ele[1] + x))\n        if ele[0] + x <= max(ele[0], ele[1]) and ele[1] - x >= min(ele[0], ele[1]):\n            coor.append((ele[0] + x, ele[1] - x))\n        if ele[0] - x >= min(ele[0], ele[1]) and ele[1] - x >= min(ele[0], ele[1]):\n            coor.append((ele[0] - x, ele[1] - x))\n        if ele[0] - x >= min(ele[0], ele[1]) and ele[1] + x <= max(ele[0], ele[1]):\n            coor.append((ele[0] - x, ele[1] + x))\n    if ele in coor:\n        coor.remove(ele)\n    return coor\n",
        "test": "assert     adjac((2,3)) == [(3,2),(3,-2),(2,-3),(-2,-3),(-3,2)]",
        "num_ids": 824
    },
    {
        "number": 631,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if not text:\n        return text\n    result = []\n    for c in text:\n        if c.isspace():\n            result.append('_')\n        else:\n            result.append(c)\n    return ''.join(result)\n",
        "test": "assert     replace_spaces(\"hello\") == \"hello\"",
        "num_ids": 429
    },
    {
        "number": 632,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for elem in num_list:\n        if elem!= 0:\n            new_list.append(elem)\n    for i in range(len(num_list)-len(new_list)):\n        new_list.append(0)\n    return new_list\n",
        "test": "assert     move_zero([1, 2, 0, 4, 0, 6, 8, 0, 9, 0]) == [1, 2, 4, 6, 8, 9, 0, 0, 0, 0]",
        "num_ids": 783
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum([x ^ y for x, y in zip(arr, arr[1:])])\n",
        "test": "assert     ( pair_xor_Sum([1,2,3,4,5,6],2) == 3",
        "num_ids": 452
    },
    {
        "number": 635,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     [1, 2, 3, 4, 5, 6, 7] == sorted( [7, 6, 5, 4, 3, 2, 1] )",
        "num_ids": 567
    },
    {
        "number": 637,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0.0:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return noprofit_noloss(actual_cost - sale_amount, sale_amount)\n",
        "test": "assert     noprofit_noloss(3,3) == True, \"Test 3 failed\"",
        "num_ids": 354
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc_index = 35.74 + 0.6215*t + (0.4275*t - 35.75)*math.pow(v,0.16)\n    return round(wc_index)\n",
        "test": "assert ",
        "num_ids": 326
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].islower()])\n",
        "test": "assert     sample_nam([\"Jim\", \"Jim\", \"Willow\", \"Willow\", \"Daffy\", \"Ho\", \"Ariel\", \"Neal\"]) == 22",
        "num_ids": 498
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.split('(',1)[1][:-1]\n    return items\n",
        "test": "assert     'hello' == remove_parenthesis('(hello)')",
        "num_ids": 317
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 3\n    if n == 2:\n        return 7\n    return n**2 + n - 2 * (n - 1)\n",
        "test": "assert ",
        "num_ids": 359
    },
    {
        "number": 643,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.lower().startswith('z') or text.lower().endswith('z'):\n        return False\n    else:\n        return bool(re.search('z', text.lower()))\n",
        "test": "assert     text_match_wordz_middle('z') == False",
        "num_ids": 359
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if input == None or len(input) < 2:\n        return input\n    k = k % len(input)\n    input = input[:k] + input[::-1] + input[k:]\n    return input\n",
        "test": "assert     reverse_Array_Upto_K([0,1,2,3,4,5,6], 7)     == [6,5,4,3,2,1], 'check the reverse_Array_Upto_K function'",
        "num_ids": 617
    },
    {
        "number": 720,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup = test_tup + (test_dict[key],)\n    return test_tup\n",
        "test": "assert     add_dict_to_tuple(('a', 'b', 'c'), {}) == ('a', 'b', 'c')",
        "num_ids": 565
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    \n    # Base case - if matrix is size 1x1 then its path is itself,\n    # so average is simply cost of that cell\n    if N == 1:\n        return cost[0][0]\n    \n    # Store max average over all subpaths\n    maxAverage = float('-inf')\n    \n    # Compute max average for all subpaths\n    for i in range(N):\n        for j in range(N):\n            # Compute max average for current path and store it\n            maxAverage = max(maxAverage, averageOfPath(i,j,cost))\n    \n    # Return max average\n    return maxAverage\n",
        "test": "assert     maxAverageOfPath([",
        "num_ids": 778
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [a for a in students.values() if a[0] > h and a[1] > w]\n",
        "test": "assert     filter_data({'john':(1.7,79.5),'mary':(1.9,72.5),'peter':(1.8,67.0)},1.8,66) == {}",
        "num_ids": 625
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    cnt = 0\n    for i in range(0, len(nums1)):\n        if nums1[i] == nums2[i]:\n            cnt += 1\n    return cnt\n",
        "test": "assert     count_same_pair([1, 2, 3, 4, 5], [1, 3, 4, 5, 5]) == 2",
        "num_ids": 595
    },
    {
        "number": 724,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(i) ** power for i in str(base))\n",
        "test": "assert     power_base_sum(2, 0) == 1",
        "num_ids": 352
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = re.findall(r'\\\".*?\\\"',text1)\n    return text2\n",
        "test": "assert     extract_quotation('\"John Doe\"')     ==     ['\"John Doe\"']",
        "num_ids": 407
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    def multiply(t1, t2):\n        if len(t2) > 1:\n            return t1 + (multiply(t1, t2[1:]))\n        else:\n            return t1 + t2\n",
        "test": "assert     multiply_elements((-5,1,2,3,4,5,-7,-2,-3,-6,-5)) == (-155, -7, -15, -15, -7, -8, -8, -3, -15, -6, -5)",
        "num_ids": 557
    },
    {
        "number": 728,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # write your code here\n    return [a+b for a,b in zip(lst1,lst2)]\n",
        "test": "assert     sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 373
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped = []\n    for k, g in groupby(nums):\n        grouped.append(list(g))\n    return list(map(lambda x: x[0], grouped))\n",
        "test": "assert     [0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, ",
        "num_ids": 2353
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r*r*h/3\n    return s\n",
        "test": "assert     lateralsurface_cone(1,2) == math.pi * (r ** 2)",
        "num_ids": 165
    },
    {
        "number": 732,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('\\s',':',text)\n    text = re.sub('\\s',':',text)\n    text = re.sub('\\.|,',':',text)\n    return text\n",
        "test": "assert     replace_specialchar('')         == ''",
        "num_ids": 282
    },
    {
        "number": 733,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def find_first_occurrence_recursive(A, x, start, end):\n        # base case\n        if end < 0:\n            return -1\n        # recursive case\n        mid = int((start + end) / 2)\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                return find_first_occurrence_recursive(A, x, start, mid-1)\n        elif A[mid] > x:\n            return find_first_occurrence_recursive(A, x, start, mid-1)\n        else:\n            return find_first_occurrence_recursive(A, x, mid+1, end)\n    return find_first_occurrence_recursive(A, x, 0, len(A)-1)\n",
        "test": "assert     find_first_occurrence([-2, -1, 1, 2, 3], -3) == -1",
        "num_ids": 764
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_len = len(arr)\n    left_subarray_sum = []\n    for i in range(arr_len):\n        left_subarray_sum.append(arr[:i+1])\n    return sum([sum(x) for x in left_subarray_sum])\n",
        "test": "assert     sum_Of_Subarray_Prod([2,3,4,5]) == 30",
        "num_ids": 511
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & 0x55555555) << 1) | ((n & 0x55555555) >> 1)\n",
        "test": "assert ",
        "num_ids": 365
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    j = bisect.bisect_left(a, a[i-1])\n    if j == i:\n        return i\n    return j\n",
        "test": "assert     left_insertion([1,2,3,4],3) == 1",
        "num_ids": 480
    },
    {
        "number": 737,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    return bool(pattern.match(string))\n",
        "test": "assert     check_str('abcdef') == True",
        "num_ids": 162
    },
    {
        "number": 738,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1.0",
        "num_ids": 245
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    s=math.pow(10,n)\n    return int((math.sqrt(8*s+1)-1)/2)\n",
        "test": "assert     find_Index(5) ==     3",
        "num_ids": 253
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
        "test": "assert     tuple_to_dict((1,2,3,4,5,6)) == {1:2, 3:4, 5:6}",
        "num_ids": 404
    },
    {
        "number": 741,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s.count(s[0]) == len(s) :\n        return True\n    else :\n        return False\n",
        "test": "assert     all_Characters_Same('Hello') == False",
        "num_ids": 289
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2 * 3**0.5 / 4.\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side**2 * 6\ndef area_cone(radius, height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return math.pi * radius**2 * height / 3.\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side**3 / 4.\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side**3\ndef volume_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return (math.pi * radius**2 * height) / 3.\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return math.pi * radius**2\ndef area_rhombus(diagonal):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    return diagonal**2 / 2.\ndef area_rectangle(length, breadth):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return length * breadth\ndef area_triangle(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return (side1 + side2 + side3) / 2.\ndef volume_cuboid(length, breadth, height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return length * breadth * height\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * radius**3\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return math.pi * radius**2 * height\ndef volume_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return math.pi * radius**2 * height / 3.\ndef volume_rectangular_prism(length, breadth, height):\n    '''\n    Write a function to caluclate the volume of a rectangular prism.\n    '''\n    return length * breadth * height\ndef volume_hemisphere(radius):\n    '''\n    Write a function to caluclate the volume of a hemisphere.\n    '''\n    return math.pi * radius**2 * 2\ndef volume_pyramid(base, height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return base * height / 3.\ndef volume_cone_shell(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone shell.\n    '''\n    return math.pi * radius**2 * height\ndef volume_cone_hemisphere(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone hemisphere.\n    '''\n    return math.pi * radius**2 * height / 3.\ndef volume_cone_sphere(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone sphere.\n    '''\n    return math.pi * radius**2 * height / 4.\ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return side**3 * 5**0.5 / 12.\ndef volume_octahedron(side):\n    '''\n    Write a function to caluclate the volume of an octahedron.\n    '''\n    return side**3 / 6.\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side**3 / 4.\ndef volume_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron.\n    '''\n    return side**3 * 5**0.5 / 120.\ndef volume_truncated_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a truncated cone.\n    '''\n    return math.pi * radius**2 * height\ndef volume_prism(length, breadth, height):\n    '''\n    Write a function to caluclate the volume of a rectangular prism.\n    '''\n    return length * breadth * height\ndef volume_box(length, breadth, height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return length * breadth * height\ndef volume_prism_shell(length, breadth, height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return length * breadth * height\ndef volume_pyramid_shell(base, height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return base * height\ndef volume_pyramid_cone_shell(base, height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return base * height\ndef volume_triangle_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    return side1 * side2 * side3 / 2.\ndef volume_triangle_cone_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    return side1 * side2 * side3 / 2.\ndef volume_triangle_prism_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    return side1 * side2 * side3 / 2.\ndef volume_octahedron_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a octahedron.\n    '''\n    return side1 * side2 * side3 / 2.\ndef volume_icosahedron_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a octahedron.\n    '''\n    return side1 * side2 * side3 / 2.\ndef volume_tetrahedron_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side1 * side2 * side3 / 2.\ndef volume_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron.\n    '''\n    return side**3 * 5**0.5 / 120.\ndef volume_dodecahedron_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return side1 * side2 * side3 / 2.\ndef volume_cube_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return side1 * side2 * side3\ndef volume_cylinder_shell(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return math.pi * radius**2 * height\ndef volume_cone_shell(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return math.pi * radius**2 * height / 3.\ndef volume_rectangular_prism_shell(length, breadth, height):\n    '''\n    Write a function to caluclate the volum",
        "test": "assert     area_tetrahedron(5) == 0.30948",
        "num_ids": 212
    },
    {
        "number": 743,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = m % len(list)\n    return list[-m:] + list[:-m]\n",
        "test": "assert     rotate_right([1,2,3,4,5], 5) == [1,2,3,4,5]",
        "num_ids": 211
    },
    {
        "number": 744,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem == None:\n            return True\n    return False\n",
        "test": "assert     check_none((1, 2, None, 5, 6, 7, 8, 9, 10)) == True, 'test failed'",
        "num_ids": 361
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #def divisible_by_digits(startnum, endnum):\n    if startnum > endnum:\n        return\n    else:\n        for i in range(startnum, endnum+1):\n            divisor = i\n            for j in range(1, len(str(i))+1):\n                divisor = divisor * int(str(i)[j-1])\n            if divisor == i:\n                print i\n",
        "test": "assert     divisible_by_digits(0, 10000) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 50",
        "num_ids": 6019
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (math.pi)*(r**2)*(a/360)\n        return area\n",
        "test": "assert     sector_area(1,361) is None",
        "num_ids": 344
    },
    {
        "number": 747,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    # Initialize the dp[i][j] array \n    dp = [[[0 for k in range(o + 1)] for j in range(n + 1)] for i in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if (i == 0 or j == 0 or k == 0): \n                    dp[i][j][k] = 0\n                elif (X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]): \n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1] \n                else: \n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]) \n    return dp[m][n][o]\n",
        "test": "assert     lcs_of_three(X = \"ab\", Y = \"abc\", Z = \"abd\") == 2",
        "num_ids": 878
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    res=''\n    lst=re.split(' ',str1)\n    for i in lst:\n        if i[0].isupper():\n            res+=i+' '\n        else:\n            res+=i\n    return res\n",
        "test": "assert     capital_words_spaces('hello world!!!') == 'hello world!!!'",
        "num_ids": 610
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums_str = sorted(nums_str, key=lambda x: float(x))\n    return sorted_nums_str\n    \n",
        "test": "assert     sort_numeric_strings(['2','1','3','6','7','9','5','7','8']) == ['1','2','3','5','6','7','7','8','9']",
        "num_ids": 826
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([], t) == [t]",
        "num_ids": 512
    },
    {
        "number": 751,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    \n    left = i * 2 + 1\n    right = i * 2 + 2\n    if left < n and arr[left] < arr[i]:\n        return False\n    if right < n and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n",
        "test": "assert     not check_min_heap_helper([3,2,1,5,4], 0)",
        "num_ids": 479
    },
    {
        "number": 752,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 2\n    if n == 4: return 4\n    if n == 5: return 7\n    if n == 6: return 22\n    if n == 7: return 42\n    if n == 8: return 109\n    if n == 9: return 274\n    if n == 10: return 477\n    if n == 11: return 724\n    if n == 12: return 1224\n    if n == 13: return 1620\n    if n == 14: return 2442\n    if n == 15: return 3123\n    if n == 16: return 3432\n    if n == 17: return 4786\n    if n == 18: return 5876\n    if n == 19: return 7749\n    if n == 20: return 8911\n    if n == 21: return 10242\n    if n == 22: return 11287\n    if n == 23: return 12695\n    if n == 24: return 14317\n    if n == 25: return 16489\n    if n == 26: return 18753\n    if n == 27: return 21102\n    if n == 28: return 24709\n    if n == 29: return 28496\n    if n == 30: return 32181\n    if n == 31: return 36371\n    if n == 32: return 47864\n    if n == 33: return 51527\n    if n == 34: return 64464\n    if n == 35: return 74874\n    if n == 36: return 85964\n    if n == 37: return 10056\n    if n == 38: return 12233\n    if n == 39: return 14443\n    if n == 40: return 16672\n    if n == 41: return 18772\n    if n == 42: return 2154\n    if n == 43: return 24181\n    if n == 44: return 29376\n    if n == 45: return 34054\n    if n == 46: return 41256\n    if n == 47: return 45504\n    if n == 48: return 52379\n    if n == 49: return 57430\n    if n == 50: return 59231\n    if n == 51: return 62680\n    if n == 52: return 67426\n    if n == 53: return 71391\n    if n == 54: return 76624\n    if n == 55: return 81856\n    if n == 56: return 87943\n    if n == 57: return 92479\n    if n == 58: return 97638\n    if n == 59: return 102546\n    if n == 60: return 108253\n    if n == 61: return 111869\n    if n == 62: return 121469\n    if n == 63: return 124587\n    if n == 64: return 128179\n    if n == 65: return 131613\n    if n == 66: return 134592\n    if n == 67: return 137431\n    if n == 68: return 142464\n    if n == 69: return 149442\n    if n == 70: return 153541\n    if n == 71: return 161466\n    if n == 72: return 164583\n    if n == 73: return 167554\n    if n == 74: return 172734\n    if n == 75: return 177921\n    if n == 76: return 183011\n    if n == 77: return 188310\n    if n == 78: return 193206\n    if n == 79: return 197797\n    if n == 80: return 201194\n    if n == 81: return 205582\n    if n == 82: return 212852\n    if n == 83: return 219747\n    if n == 84: return 225560\n    if n == 85: return 231811\n    if n == 86: return 234283\n    if n == 87: return 236365\n    if n == 88: return 238606\n    if n == 89: return 241587\n    if n == 90: return 244972\n    if n == 91: return 247167\n    if n == 92: return 250159\n    if n == 93: return 253945\n    if n == 94: return 256235\n    if n == 95: return 259550\n    if n == 96: return 263008\n    if n == 97: return 267641\n    if n == 98: return 270019\n    if n == 99: return 275470\n    if n == 100: return 277781\n",
        "test": "assert     jacobsthal_num(2) == 1",
        "num_ids": 1338
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    result = []\n    for item in test_list:\n        if len(result) < K:\n            result.append(item)\n        elif item[1] < result[0][1]:\n            result[0] = item\n    return result\n",
        "test": "assert     min_k([('Google', 99), ('Github', 0), ('Yahoo', 50)], 4) == [('Google', 99), ('Github', 0), ('Yahoo', 50)]",
        "num_ids": 2643
    },
    {
        "number": 754,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    final = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k] and l1[i] not in final:\n                    final.append(l1[i])\n    return final\n",
        "test": "assert     extract_index_list(['abcd', 'abcd', 'efgh'], ['abcd', 'abcd', 'efgh'], ['efgh', 'efgh']) == ['efgh']",
        "num_ids": 625
    },
    {
        "number": 755,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]\n",
        "test": "assert     second_smallest([1,2,3]) == 2",
        "num_ids": 232
    },
    {
        "number": 756,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match_object = re.match(r'^a[ab]+$', text)\n    if match_object:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one('abababab') == True",
        "num_ids": 309
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0, len(test_list) - 1):\n        if test_list[i] == test_list[len(test_list) - 1 - i]:\n            count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs(['r', 'a', 't', 'e','s', 'o', 'p', 'a', 'r']) == 4",
        "num_ids": 646
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n",
        "test": "assert     unique_sublists([1,1,2,2,2,3,3,4]) == {(1,):2, (2,):2, (3,):3, (4,):1}",
        "num_ids": 717
    },
    {
        "number": 759,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return len(num) == 5 and num[-1] == '.' and num[-2] == '.' and num.count('.') == 1 and num.count('e') == 0 and 'e' not in num[:-1] and 'E' not in num[:-1] and all(map(lambda x: ord(x) >= 48 and ord(x) <= 57, num[:-1]))\n",
        "test": "assert     is_decimal('8.00') == False",
        "num_ids": 353
    },
    {
        "number": 760,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    i=0\n    while i<len(arr):\n        if arr.count(arr[i])>1:\n            return False\n        i+=1\n    return True\n",
        "test": "assert         unique_Element([1, 2, 3, 4, 5]) is True",
        "num_ids": 273
    },
    {
        "number": 762,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(1)",
        "num_ids": 274
    },
    {
        "number": 763,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1,n):\n        min_diff = min(min_diff,arr[i] - arr[i-1])\n    return min_diff\n",
        "test": "assert     find_min_diff([3,4,1,2],4) == 1",
        "num_ids": 268
    },
    {
        "number": 764,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr(\"\") == 0",
        "num_ids": 215
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #print n\n    p = 0\n    for i in range(2,n):\n        if math.gcd(n,i) == 1:\n            p+=1\n    return p==n-1\n",
        "test": "assert     is_polite(1) == 1",
        "num_ids": 557
    },
    {
        "number": 766,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) % 2:\n        return []\n    else:\n        return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 346
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    m = {}\n    for i in arr:\n        if i in m:\n            m[i] += 1\n        else:\n            m[i] = 1\n    for key in m:\n        if (sum - key) in m:\n            return (m[key] * m[(sum - key)])\n    return 0\n    \narr = [1,4,2,2,5,5]\nsum = 4\nprint(get_pairs_count(arr, sum))\n",
        "test": "assert     get_pairs_count([-1, -2, -3], 0) == 0",
        "num_ids": 552
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n",
        "test": "assert     Diff([1,2,3], [1,2,3]) == []",
        "num_ids": 204
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(x ** 4 for x in range(1, n + 1, 2))\n",
        "test": "assert     odd_num_sum(0) == 0",
        "num_ids": 262
    },
    {
        "number": 771,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    # create a queue for the expression\n    q = deque()\n    # iterate through the expression\n    for item in exp:\n        # add item to the queue\n        q.append(item)\n    # the stack\n    s = []\n    # boolean to check if the brackets are balanced\n    balanced = True\n    # iterate through the queue\n    while q:\n        # pop the first item from the queue\n        item = q.popleft()\n        # check if item is an opening bracket\n        if item in [\"(\", \"{\", \"[\"]:\n            # add it to the stack\n            s.append(item)\n        # check if item is a closing bracket\n        elif item in [\")\", \"}\", \"]\"]:\n            # if item is a closing bracket, check if the stack is empty and if it is not return false\n            if len(s) == 0:\n                balanced = False\n                return balanced\n            # if item is not a closing bracket, check if the top item in the stack is a corresponding opening bracket and if it is not return false\n            else:\n                top_item = s[-1]\n                if top_item == \"(\" and item == \")\":\n                    s.pop()\n                elif top_item == \"{\" and item == \"}\":\n                    s.pop()\n                elif top_item == \"[\" and item == \"]\":\n                    s.pop()\n                else:\n                    balanced = False\n                    return balanced\n        else:\n            return balanced\n    # if the queue is empty and the stack is empty, return true\n    if len(q) == 0 and len(s) == 0:\n        return balanced\n    else:\n        return False\n",
        "test": "assert     check_expression(\"(a+b)\") == True",
        "num_ids": 897
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # write your code here\n    start = 0\n    end = len(test_str)\n    while start < len(test_str) and end >= start:\n        if len(test_str[start:end]) == K:\n            test_str = test_str.replace(test_str[start:end],'')\n        start = start + 1\n        end = end - 1\n    return test_str\n",
        "test": "assert     remove_length('', 0) == ''",
        "num_ids": 548
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern,text)\n    if result:\n        print(result.span())\n    else:\n        print(\"None\")\n",
        "test": "assert     occurance_substring('abcdaf','')==None",
        "num_ids": 362
    },
    {
        "number": 775,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n",
        "test": "assert     odd_position([]) == True",
        "num_ids": 388
    },
    {
        "number": 776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if type(test_str)!= str:\n        return 0\n",
        "test": "assert     count_vowels('hll') == 1",
        "num_ids": 385
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    summation = 0\n    for i in arr:\n        summation += i\n    return summation\n",
        "test": "assert find_sum([1,2,4,5,2,5,1,1,3,3,5]) == 5+5+3+3+2+2",
        "num_ids": 237
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    final_list=[]\n    for k,g in groupby(list1):\n        final_list.append(list(g))\n    return final_list\n",
        "test": "assert     pack_consecutive_duplicates(['a','b','c','a','d','e','e']) == [",
        "num_ids": 2883
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n    for index, item in enumerate(list1):\n        if item in dictionary:\n            dictionary[item] += 1\n        else:\n            dictionary[item] = 1\n        list1[index] = tuple(item)\n    return dictionary\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 685
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in test_list:\n        for j in combinations(test_list, i):\n            print(j)\nfind_combinations([(4, 5, 6), (7, 8, 9)])\n",
        "test": "assert     find_combinations([(1,2,3,4,5,6,7,8,9),(2,3,4,5,6,7,8,9,10),(3,4,5,6,7,8,9,10,11),(4,5,6,7,8,9,10,11,12),(5,6,7,8,9,10,11,12,13),(6,7,8,9,10,11,12,13,14,15),(7,8,9,10,11,12,13,14,15,16),(8,9,10,11,12,13,14,15,16,17),(9,10,11,12,13,14,15,16,17,18),(10,11,12,13,14,15,16,17,18,19),(11,12,13,14,15,16,17,18,19,20),(12,13,14,15,16,17,18,19,20,21),(13,14,15,16,17,18,19,20,21,22),(14,15,16,17,18,19,20,21,22,23),(15,16,17,18,19,20,21,22,23,24)]) == [(0,24),(1,23),(2,22),(3,21),(4,20),(5,19),(6,18),(7,17),(8,16),(9,15),(10,14),(11,13),(12,12),(13,11),(14,10),(15,9),(16,8),(17,7),(18,6),(19,5),(20,4),(21,3),(22,2),(23,1)]",
        "num_ids": 1882
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    i = 1\n    while i < (n/2) + 1 :\n        if n%i == 0 :\n            divisors_count += 1\n        i += 1\n    if divisors_count%2 == 0 :\n        return True\n    else :\n        return False\n",
        "test": "assert     count_divisors(1) == False",
        "num_ids": 391
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n",
        "test": "assert     odd_length_sum([]) == 0",
        "num_ids": 2257
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n",
        "test": "assert rgb_to_hsv(255, 255, 255) == (359.0/360.0, 1.0, 1.0)",
        "num_ids": 555
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1 = list(list1)\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i%2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    even_list = list(map(lambda x: x*2, even_list))\n    result = list(map(lambda x, y: x*y, even_list, odd_list))\n    return result\n",
        "test": "assert     mul_even_odd([0,2,4,6]) == 0, \"Should be 0\"",
        "num_ids": 521
    },
    {
        "number": 785,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    import re\n    return tuple(map(int,re.findall(r'\\d+',test_str)))\n",
        "test": "assert     tuple_str_int('(1,2,3)') == (1,2,3)",
        "num_ids": 197
    },
    {
        "number": 786,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    assert isinstance(a,list)\n    assert isinstance(x,int)\n    assert len(a)>=1\n    index = bisect.bisect_right(a, x)\n    return index\n    \ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    assert isinstance(a,list)\n    assert isinstance(x,int)\n    assert len(a)>=1\n    index = bisect.bisect_left(a, x)\n    return index\n    \ndef reverse(a,p,r):\n    '''\n    Write a function to reverse a list in-place (i.e. without creating a new list)\n    '''\n    assert isinstance(a,list)\n    assert isinstance(p,int)\n    assert isinstance(r,int)\n    assert p<r\n    assert p>=0\n    assert r<len(a)\n    for i in range(p,(r+1)/2):\n        a[i],a[r-i] = a[r-i],a[i]\n    return a\n    \ndef rotate(a,d,p):\n    '''\n    Write a function to rotate a list in-place (i.e. without creating a new list)\n    '''\n    assert isinstance(a,list)\n    assert isinstance(d,int)\n    assert isinstance(p,int)\n    assert d>0\n    assert p>=0\n    assert p<len(a)\n    if d==1:\n        return\n    for i in range(p,(len(a)+p-d)/2):\n        a[i],a[i+d] = a[i+d],a[i]\n    for i in range((len(a)+p-d)/2,len(a)):\n        a[i],a[i-d] = a[i-d],a[i]\n    return a\n    \ndef rotate_dict(d,k,delta):\n    '''\n    Write a function to rotate a dictionary in-place (i.e. without creating a new dictionary)\n    '''\n    assert isinstance(d,dict)\n    assert isinstance(k,str)\n    assert isinstance(delta,int)\n    assert delta>=0\n    assert k in d\n    for i in range(delta):\n        d[k+'-'+str(i+1)] = d[k]\n        del d[k]\n    return d\n    \ndef reverse_dict(d,k,delta):\n    '''\n    Write a function to reverse a dictionary in-place (i.e. without creating a new dictionary)\n    '''\n    assert isinstance(d,dict)\n    assert isinstance(k,str)\n    assert isinstance(delta,int)\n    assert delta>=0\n    assert k in d\n    for i in range(delta):\n        d[k+'-'+str(i+1)] = d[k]\n        del d[k]\n    return d\n",
        "test": "assert     right_insertion([1, 3, 5, 6], 2) == 1",
        "num_ids": 356
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #pattern = re.compile(r'a{3}')\n    pattern = re.compile(r'ab{3}')\n    return pattern.findall(text)\ndef text_match_two_or_three(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 to 3 'b'.\n    '''\n    pattern = re.compile(r'a{1,3}')\n    return pattern.findall(text)\ndef text_match_exactly_one_or_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or 2 'b'.\n    '''\n    pattern = re.compile(r'a{1,2}')\n    return pattern.findall(text)\ndef text_match_only_alpha(text):\n    '''\n    Write a function that matches a string that has only alpha characters.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.findall(text)\ndef text_match_digits(text):\n    '''\n    Write a function that matches a string that has only digits.\n    '''\n    pattern = re.compile(r'[0-9]+')\n    return pattern.findall(text)\ndef text_match_digits_or_letters(text):\n    '''\n    Write a function that matches a string that has only letters or digits.\n    '''\n    pattern = re.compile(r'[a-z0-9]+')\n    return pattern.findall(text)\ndef text_match_alpha_or_digit(text):\n    '''\n    Write a function that matches a string that has only alpha characters or digits.\n    '''\n    pattern = re.compile(r'[a-z0-9]+')\n    return pattern.findall(text)\ndef text_match_alpha_or_space(text):\n    '''\n    Write a function that matches a string that has only alpha characters or spaces.\n    '''\n    pattern = re.compile(r'[a-z\\s]+')\n    return pattern.findall(text)\ndef text_match_alpha_or_space_or_digit(text):\n    '''\n    Write a function that matches a string that has only alpha characters, spaces or digits.\n    '''\n    pattern = re.compile(r'[a-z\\s0-9]+')\n    return pattern.findall(text)\ndef text_match_alphanum(text):\n    '''\n    Write a function that matches a string that has only alpha-numeric characters.\n    '''\n    pattern = re.compile(r'[a-z0-9]+')\n    return pattern.findall(text)\ndef text_match_word(text):\n    '''\n    Write a function that matches a string that has only one word.\n    '''\n    pattern = re.compile(r'\\w+')\n    return pattern.findall(text)\ndef text_match_word_or_number(text):\n    '''\n    Write a function that matches a string that has only one word or number.\n    '''\n    pattern = re.compile(r'\\w+')\n    return pattern.findall(text)\ndef text_match_word_or_number_or_space(text):\n    '''\n    Write a function that matches a string that has only one word or number, or spaces.\n    '''\n    pattern = re.compile(r'\\w+')\n    return pattern.findall(text)\ndef text_match_word_or_number_or_space_or_alpha(text):\n    '''\n    Write a function that matches a string that has only one word or number, or spaces or letters.\n    '''\n    pattern = re.compile(r'\\w+')\n    return pattern.findall(text)\ndef text_match_word_or_number_or_alpha_or_space(text):\n    '''\n    Write a function that matches a string that has only one word or number, or letters, or spaces.\n    '''\n    pattern = re.compile(r'\\w+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits(text):\n    '''\n    Write a function that matches a string that has letters and digits.\n    '''\n    pattern = re.compile(r'[a-z0-9]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_space(text):\n    '''\n    Write a function that matches a string that has letters and digits or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_space_or_alpha(text):\n    '''\n    Write a function that matches a string that has letters and digits or spaces or letters.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_space_or_alpha_or_space(text):\n    '''\n    Write a function that matches a string that has letters and digits or spaces or letters or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_alpha_or_space_or_alpha(text):\n    '''\n    Write a function that matches a string that has letters and digits or alpha or spaces or alpha or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s\\w]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_alpha_or_space_or_alpha_or_space(text):\n    '''\n    Write a function that matches a string that has letters and digits or alpha or spaces or alpha or spaces or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s\\w]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_alpha_or_space_or_alpha_or_space_or_space(text):\n    '''\n    Write a function that matches a string that has letters and digits or alpha or spaces or alpha or spaces or spaces or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s\\w]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_alpha_or_space_or_alpha_or_space_or_space_or_space(text):\n    '''\n    Write a function that matches a string that has letters and digits or alpha or spaces or alpha or spaces or spaces or spaces or spaces or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s\\w]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_alpha_or_space_or_alpha_or_space_or_space_or_space_or_space_or_space_or_space(text):\n    '''\n    Write a function that matches a string that has letters and digits or alpha or spaces or alpha or spaces or spaces or spaces or spaces or spaces or spaces or spaces or spaces or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s\\w]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_alpha_or_space_or_alpha_or_space_or_space_or_space_or_space_or_space_or_space_or_space_or_space_or_space_or_space_or_space(text):\n    '''\n    Write a function that matches a string that has letters and digits or alpha or spaces or alpha or spaces or spaces or spaces or spaces or spaces or spaces or spaces or spaces or spaces or spaces or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s\\",
        "test": "assert     text_match_three('ab')==False",
        "num_ids": 955
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + test_str)\n    return new_tuple\n",
        "test": "assert     new_tuple('abcd', 'xyz') == ('a', 'b', 'c', 'd', 'x', 'y', 'z')",
        "num_ids": 269
    },
    {
        "number": 790,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(nums[i]%2==0 for i in range(0,len(nums),2))\n",
        "test": "assert     (even_position([10,10,10]) == True)",
        "num_ids": 455
    },
    {
        "number": 791,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x: x!= test_tup, test_tup))\n",
        "test": "assert     (remove_nested(((1,2,3),(4,5))) == ((1, 2, 3), (4, 5)))",
        "num_ids": 472
    },
    {
        "number": 792,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_lists = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) is list:\n            num_lists += 1\n    return num_lists\n",
        "test": "assert     count_list([[1, 2], [3, 4]]) == 2, 'Failed'",
        "num_ids": 417
    },
    {
        "number": 793,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in reversed(range(len(arr))):\n        if arr[i]==x:\n            return i\n    return -1\n",
        "test": "assert     last([1,2,3,4,4,5,5],1) == 0",
        "num_ids": 295
    },
    {
        "number": 794,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    pattern = re.compile('.*?a.*?b')\n    if pattern.match(text):\n        return True\n    return False\n",
        "test": "assert     text_starta_endb('aba') == True",
        "num_ids": 321
    },
    {
        "number": 796,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "test": "assert     return_sum({1:2, 3:4, 5:6}) == 12",
        "num_ids": 262
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i\n    return sum\n",
        "test": "assert     sum_odd(0) == 0",
        "num_ids": 225
    },
    {
        "number": 798,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    # Initialize the sum as 0\n    sum = 0\n    \n    # Iterate over the array\n    for ele in arr:\n        \n        # Add current element to sum\n        sum = sum + ele\n    \n    # Return the sum of array\n    return sum\n",
        "test": "assert     _sum([1,2,3,4]) == 10",
        "num_ids": 190
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    return (n << d) | ((n & mask) >> (32-d))\n",
        "test": "assert     left_rotate(0b00000110,0) == 0b00000110",
        "num_ids": 188
    },
    {
        "number": 800,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s', '', text)\ndef num_vowels(word):\n    '''\n    Write a function that counts the number of vowels in a word. \n    \n    The function should have one parameter (string). \n    \n    Return the result as an integer.\n    '''\n    return len(re.findall('[aeiou]', word))\n",
        "test": "assert     remove_all_spaces('my string') =='mystring'",
        "num_ids": 292
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if (x==y==z):\n        return 3\n    elif (x==y) or (x==z) or (y==z):\n        return 2\n    else:\n        return 0\n    \n",
        "test": "assert     (test_three_equal(5,6,7) == 0)",
        "num_ids": 363
    },
    {
        "number": 802,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0\n",
        "test": "assert     (count_rotation([1,2,3,4,5]) == 0)",
        "num_ids": 388
    },
    {
        "number": 803,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    else:\n        if (n % int(math.sqrt(n))) == 0:\n            return True\n        else:\n            return False\n",
        "test": "assert     is_perfect_square(1000) == False",
        "num_ids": 245
    },
    {
        "number": 804,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    total = 1\n    for num in arr: \n        total *= num\n    return total % 2 == 0\n",
        "test": "assert     is_product_even([2, 4, 6]) == True",
        "num_ids": 339
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max = -1\n    max_list = []\n    for l in lists:\n        sum = 0\n        for i in l:\n            sum += i\n        if sum > max:\n            max = sum\n            max_list = l\n    return max_list\n",
        "test": "assert     max_sum_list([[1,2,3],[2,3,5],[1,3,5],[3,2,1]]) == [[1,3,5],[1,3,5]]",
        "num_ids": 510
    },
    {
        "number": 806,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = test_str.lower()\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            current_run = current_run + 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 1\n    return max_run\n",
        "test": "assert     max_run_uppercase(\"Xyz\") == 1",
        "num_ids": 562
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n",
        "test": "assert     first_odd([1]) == 1",
        "num_ids": 297
    },
    {
        "number": 808,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[K] == 'K'\n",
        "test": "assert     check_K(((1,3,2),(1,3,2)), 1) == False, \"case2\"",
        "num_ids": 419
    },
    {
        "number": 809,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all([test_tup1[i]>=test_tup2[i] for i in range(len(test_tup2))])\n",
        "test": "assert     check_smaller((1, 2, 3, 4, 5, 6, 7, 8), (1, 2, 3, 4, 5, 6, 7, 8)) == True",
        "num_ids": 521
    }
]