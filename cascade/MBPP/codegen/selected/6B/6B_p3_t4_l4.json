[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements\n",
        "test": "assert     (similar_elements((1, 2, 3), (1, 2, 3, 4, 5)) == (1, 2, 3)), \"Fourth\"",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return False\n    if n > 2 and n % 2 == 0:\n        return False\n    max = math.ceil(math.sqrt(n))\n    for j in range(3, max+1, 2):\n        if n % j == 0:\n            return False\n    return True\n",
        "test": "assert     is_not_prime(2) == False",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums == None or len(nums) == 0 or n == 0:\n        return []\n    heap = []\n    for i in range(len(nums)):\n        hq.heappush(heap,nums[i])\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if nums == None or len(nums) == 0 or n == 0:\n        return []\n    heap = []\n    for i in range(len(nums)):\n        hq.heappush(heap,nums[i])\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef heap_sorted(nums,n):\n    '''\n    Write a function to sort a given list of numbers using heapsort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    heap = []\n    for i in range(len(nums)):\n        hq.heappush(heap,nums[i])\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef bubble_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using bubblesort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\ndef insertion_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using insertion sort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    for i in range(1,len(nums)):\n        j = i\n        while j > 0 and nums[j] < nums[j-1]:\n            nums[j],nums[j-1] = nums[j-1],nums[j]\n            j -= 1\n    return nums\ndef shell_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using shellsort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    gap = int(len(nums)/2)\n    while gap > 0:\n        for i in range(gap,len(nums)):\n            j = i\n            while j > 0 and nums[j] < nums[j-gap]:\n                nums[j],nums[j-gap] = nums[j-gap],nums[j]\n                j -= gap\n        gap = int(gap/2)\n    return nums\ndef merge_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using mergesort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums)//2\n    left,right = merge_sort(nums[:mid]),merge_sort(nums[mid:])\n    return merge(left,right)\ndef merge(left,right):\n    '''\n    Merge two given lists in ascending order.\n    '''\n    if left == None or len(left) == 0:\n        return right\n    if right == None or len(right) == 0:\n        return left\n    i,j = 0,0\n    result = []\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    while i < len(left):\n        result.append(left[i])\n        i += 1\n    while j < len(right):\n        result.append(right[j])\n        j += 1\n    return result\ndef radix_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using radixsort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    max_length = 1\n    for i in range(len(str(max(nums)))):\n        max_length = max_length*10\n    buckets = [[] for i in range(max_length)]\n    for i in range(len(nums)):\n        buckets[nums[i]//(max_length//10**i)%10].append(nums[i])\n    i = 0\n    for bucket in buckets:\n        for num in bucket:\n            nums[i] = num\n            i += 1\n    return nums\ndef quick_sort(nums,start,end):\n    '''\n    Write a function to sort a given list of numbers using quicksort.\n    '''\n    if start >= end:\n        return\n    pivot = nums[start]\n    left = start+1\n    right = end\n    while left <= right:\n        while left <= end and nums[left] < pivot:\n            left += 1\n        while right > start and nums[right] > pivot:\n            right -= 1\n        if left <= right:\n            nums[left],nums[right] = nums[right],nums[left]\n            left += 1\n            right -= 1\n    quick_sort(nums,start,right-1)\n    quick_sort(nums,right+1,end)\n    return nums\ndef bucket_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using bucket sort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    length = len(nums)\n    size = max(nums)-min(nums)+1\n    buckets = [[] for i in range(size)]\n    for i in range(length):\n        buckets[nums[i]-min(nums)//size].append(nums[i])\n    for i in range(size):\n        buckets[i].sort()\n    i = 0\n    for bucket in buckets:\n        for num in bucket:\n            nums[i] = num\n            i += 1\n    return nums\ndef count_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using counting sort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    max_num = max(nums)\n    counts = [0 for i in range(max_num+1)]\n    for i in range(len(nums)):\n        counts[nums[i]] += 1\n    index = 0\n    for i in range(max_num+1):\n        while counts[i] > 0:\n            nums[index] = i\n            counts[i] -= 1\n            index += 1\n    return nums\ndef radix_count_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using radix counting sort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    max_length = 1\n    for i in range(len(str(max(nums)))):\n        max_length = max_length*10\n    buckets = [[] for i in range(max_length)]\n    for i in range(len(nums)):\n        buckets[nums[i]//(max_length//10**i)%10]",
        "test": "assert     hq.heapify([1,2,3,4,5,6,7])==[7,6,5,4,3,2,1]",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1) == 0) and x!= 0\n",
        "test": "assert     is_Power_Of_Two(1) == True ",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall('[A-Za-z]+', text)\n    return result\n",
        "test": "assert     find_char_long(\"pizza-eating\") == ['pizza', 'eating']",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert         [i*i for i in [1,2,3,4,5,6,7,8,9,10]] == square_nums([1,2,3,4,5,6,7,8,9,10])",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    temp = str + str\n    for i in range(0, n):\n        if str[i:] == temp[i:n]:\n            return i\n    return -1\n",
        "test": "assert     find_Rotations('A') == 0",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if (s.count(ch)>1):\n        s=s[:s.rfind(ch)]+s[s.rfind(ch)+1:]\n    return s\n",
        "test": "assert     remove_Occ('ABC', 'D') == 'ABC'",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows, cols = len(M), len(M[0])\n    print(rows, cols)\n    for i in range(rows - 1):\n        idx_min, idx_max = i, i\n        for j in range(i, rows):\n            if sum(M[idx_max]) < sum(M[idx_min]):\n                idx_max = j\n            if sum(M[idx_max]) > sum(M[idx_min]):\n                idx_min = j\n        if idx_max!= i:\n            M[i], M[idx_max] = M[idx_max], M[i]\n        print(idx_max)\n    return M\n",
        "test": "assert     sort_matrix([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [[1, 2, 3], [1, 2, 3], [1, 2, 3]]",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n",
        "test": "assert     ( find_Volume(1,2,3) == 2.0 )",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    if len(re.findall(r'[a-z]+_[a-z]+',text)) > 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_lowercase_underscore('hello_world') == True",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert     square_perimeter(4) == 16",
        "num_ids": 168,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = [0] * NO_OF_CHARS \n    l2 = [0] * NO_OF_CHARS \n    for i in string: \n        l1[ord(i)] += 1\n    for j in string: \n        l2[ord(j)] += 1\n    for i in string: \n        if l2[ord(i)] > l1[ord(i)]: \n            return False\n    return True\nif __name__ == '__main__':\n    string1 = raw_input(\"Enter the first string: \")\n    string2 = raw_input(\"Enter the second string: \")\n    if(str_to_list(string1) and str_to_list(string2)):\n        print \"Both strings are anagrams\"\n    else:\n        print \"Both strings are not anagrams\"\n",
        "test": "assert     str_to_list(\"!\", \"!\") == True",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    elif len(arraynums) == 1:\n        return False\n    else:\n        for i in range(len(arraynums)):\n            for j in range(i+1, len(arraynums)):\n                if arraynums[i] == arraynums[j]:\n                    return True\n    return False\n",
        "test": "assert     test_duplicate([1, 2, 3, 4, 1, 2, 3, 4]) == True",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x == '3':\n        return True\n    elif x == '6':\n        return True\n    elif x == '9':\n        return True\n    elif x == '8':\n        return True\n    elif x == '7':\n        return True\n    elif x == '6':\n        return True\n    elif x == '4':\n        return True\n    elif x == '5':\n        return True\n    elif x == '2':\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(19) == False",
        "num_ids": 2352,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    if rev_num == 2 * rev_num:\n        return True\n    return False\n    \n",
        "test": "assert     rev(7) == False, \"Testcase 1 - Expected False\"",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[-1]\n    \n",
        "test": "assert     find_Max_Num([1,2,3,4]) == 4 ",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    elif x>0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return False\n    elif x==0 and y!=0:\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(-2, -3) == True",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 0\n    while True:\n        i += 1\n        if (i ** 2 + i) == 2 * i * (i + 1):\n            if i == n:\n                return True\n",
        "test": "assert     is_octagonal(4) == 36",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        sums = 0\n        for j in range(i,len(s)):\n            sums = sums + int(s[j])\n            if sums == len(s):\n                count = count + 1\n    return count\n",
        "test": "assert     count_Substrings('1') == 1",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # xs = [1,2,3,4,5]\n    # return the value of the smallest number\n    # in the list xs\n    return min(xs)\n",
        "test": "assert     smallest_num([1, 3, 2, 4, 5, 6]) == 1",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    if n < 2:\n        return 0\n    else:\n        # sort the list\n        sorted_list = sorted(test_list)\n        # find the maximum difference\n        diff = abs(sorted_list[n - 1] - sorted_list[0])\n        # compare with the pair from right\n        for i in range(1, n - 1):\n            diff = max(diff, abs(sorted_list[i] - sorted_list[i + 1]))\n        # compare with the pair from left\n        for i in range(1, n - 1):\n            diff = max(diff, abs(sorted_list[i - 1] - sorted_list[i]))\n        return diff\n",
        "test": "assert     max_difference( (1, 2, 3, 4, 5) ) == 4",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert ",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        data = data_list[0]\n        \n        if isinstance(data, list):\n            return recursive_list_sum(data) + recursive_list_sum(data_list[1:])\n        else:\n            return data + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([1, 2, -3, 4, -5, 6, -7, 8, -9, 10]) == 6",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([1,2,2,3])",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == s:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i: i + len(s)] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1, 2, 3, 4, 5], [1, 2, 3]) == True",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Tuple = set(Input)\n    return len(Tuple) == len(Input)\n    \ndef find_all_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:\n        return False\n    else:\n        return all(find_equal_tuple(tup) for tup in Input)\n",
        "test": "assert     find_equal_tuple([(0,0),(0,1),(0,2),(1,0),(1,1),(1,2)]) == True, \"All the tuples are equal length\"",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # TODO: Implement this function.\n    # nums = nums.copy()\n    for i in range(len(nums)):\n        min_index = i\n        for j in range(i, len(nums)):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 599,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    for i in range(1,n):\n        a=i*i\n        b=n-a\n        if a+b==n:\n            print(\"Yes\")\n            break\n    else:\n        print(\"No\")\n    \ndef sum_n_Squares(n):\n    '''\n    Write a python function to calculate the sum of the first n numbers, where n can be a variable.\n    '''\n    \n    s=0\n    for i in range(1,n+1):\n        s+=i*i\n    print(s)\n    \ndef sum_of_Squares(n):\n    '''\n    Write a python function to calculate the sum of the first n numbers, where n can be a variable.\n    '''\n    \n    s=0\n    for i in range(1,n+1):\n        s+=i\n    print(s)\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of the given number n.\n    '''\n    \n    s=1\n    for i in range(1,n+1):\n        s*=i\n    print(s)\n    \ndef factorial_Recursive(n):\n    '''\n    Write a python function to calculate the factorial of the given number n using recursion\n    '''\n    \n    if n==1:\n        return 1\n    else:\n        return n*factorial_Recursive(n-1)\n        \ndef count_words(s,d):\n    '''\n    Write a python function to count the occurrences of each word in a sentence s.\n    '''\n    \n    s_dict={}\n    \n    for word in d.split():\n        if word in s_dict:\n            s_dict[word]+=1\n        else:\n            s_dict[word]=1\n    \n    print(s_dict)\n    \ndef char_hist(s):\n    '''\n    Write a python function to count the occurrences of each character in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for c in s:\n        if c in s_dict:\n            s_dict[c]+=1\n        else:\n            s_dict[c]=1\n    \n    print(s_dict)\n    \ndef unique_chars(s):\n    '''\n    Write a python function to calculate the number of unique characters in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for c in s:\n        if c in s_dict:\n            s_dict[c]+=1\n        else:\n            s_dict[c]=1\n    \n    print(len(s_dict))\n    \ndef unique_words(s):\n    '''\n    Write a python function to calculate the number of unique words in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for word in s.split():\n        if word in s_dict:\n            s_dict[word]+=1\n        else:\n            s_dict[word]=1\n    \n    print(len(s_dict))\n    \ndef anagrams(s):\n    '''\n    Write a python function to calculate the number of anagrams in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for word in s.split():\n        if word==''.join(sorted(word)):\n            if word in s_dict:\n                s_dict[word]+=1\n            else:\n                s_dict[word]=1\n    \n    print(len(s_dict))\n    \ndef palindromes(s):\n    '''\n    Write a python function to calculate the number of palindromes in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for word in s.split():\n        if word==''.join(sorted(word)):\n            if word in s_dict:\n                s_dict[word]+=1\n            else:\n                s_dict[word]=1\n    \n    print(len(s_dict))\n    \ndef palindromes_List(s):\n    '''\n    Write a python function to calculate the number of palindromes in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for word in s.split():\n        if word==''.join(sorted(word)):\n            if word in s_dict:\n                s_dict[word]+=1\n            else:\n                s_dict[word]=1\n    \n    print(len(s_dict))\n    \ndef count_occurrences(s,d):\n    '''\n    Write a python function to count the occurrences of each letter in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for c in s:\n        if c in s_dict:\n            s_dict[c]+=1\n        else:\n            s_dict[c]=1\n    \n    for c in d:\n        if c in s_dict:\n            print(c,s_dict[c])\n        else:\n            print(\"0\")\n            \ndef single_char(s):\n    '''\n    Write a python function to calculate the number of words with single characters in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for word in s.split():\n        if len(word)==1:\n            if word in s_dict:\n                s_dict[word]+=1\n            else:\n                s_dict[word]=1\n    \n    print(len(s_dict))\n    \ndef single_char_List(s):\n    '''\n    Write a python function to calculate the number of words with single characters in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for word in s.split():\n        if len(word)==1:\n            if word in s_dict:\n                s_dict[word]+=1\n            else:\n                s_dict[word]=1\n    \n    print(len(s_dict))\n    \ndef non_repeated_characters(s):\n    '''\n    Write a python function to calculate the number of non-repeated characters in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for c in s:\n        if c in s_dict:\n            s_dict[c]+=1\n        else:\n            s_dict[c]=1\n    \n    print(len(s_dict))\n    \ndef non_repeated_characters_List(s):\n    '''\n    Write a python function to calculate the number of non-repeated characters in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for c in s:\n        if c in s_dict:\n            s_dict[c]+=1\n        else:\n            s_dict[c]=1\n    \n    print(len(s_dict))\n    \ndef repeated_characters(s):\n    '''\n    Write a python function to calculate the number of repeated characters in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for c in s:\n        if c in s_dict:\n            s_dict[c]+=1\n        else:\n            s_dict[c]=1\n    \n    print(len(s_dict)-len(s_dict))\n    \ndef repeated_characters_List(s):\n    '''\n    Write a python function to calculate the number of repeated characters in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for c in s:\n        if c in s_dict:\n            s_dict[c]+=1\n        else:\n            s_dict[c]=1\n    \n    print(len(s_dict)-len(s_dict))\n    \ndef all_capital(s):\n    '''\n    Write a python function to check whether a given string s has all characters in upper case or not.\n    '''\n    \n    for c in s:\n        if c.isupper()==False:\n            return False\n    \n    return True\n    \ndef all_capital_List(s):\n    '''\n    Write a python function to check whether a given string s has all characters in upper case or not.\n    '''\n    \n    for c in s:\n        i",
        "test": "assert     dif_Square(29) == True",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)-1):\n        if patterns[i]==1 and patterns[i+1]==2 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==1 and patterns[i+1]==3 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==2 and patterns[i+1]==1 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==2 and patterns[i+1]==3 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==3 and patterns[i+1]==1 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==3 and patterns[i+1]==2 and colors[i]==colors[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_samepatterns([\"yellow\",\"cyan\"], [\"y\", \"y\", \"c\", \"c\", \"y\"])",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return list(filter(lambda x: all(x[i]%K==0 for i in range(len(x))), test_list))\n",
        "test": "assert     find_tuples([(1,2),(3,4),(5,6)], 1) == [(1,2),(3,4),(5,6)]",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "test": "assert     is_Diff( 11 ) == True",
        "num_ids": 178,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "test": "assert     word_len('abcdf') == True",
        "num_ids": 229,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n**3\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\n",
        "test": "assert     abs(volume_sphere(1) - 4.1887902047863905) < 0.0000001",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return (sum % 26)\n",
        "test": "assert     get_Char('xyz') == 25",
        "num_ids": 241,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return sum([2**i for i in range(n)])\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n",
        "test": "assert     surfacearea_sphere(1) == 4*math.pi, 'Error'",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "test": "assert         centered_hexagonal_number(1) == 1",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {**dict1, **dict2, **dict3}\n    return dict4\n",
        "test": "assert     merge_dictionaries_three({\"A\": [1,2,3,4,5],\"B\": [6,7,8,9,10],\"C\": [11,12,13,14,15],\"D\": [16,17,18,19,20]},",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # list1=input('Enter the list: ')\n    d={}\n    for i in list1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n",
        "test": "assert     freq_count([1, 2, 3, 4, 5, 6]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = [int(x) for x in str(N)]\n    if l == sorted(l, reverse=True):\n        return None\n    else:\n        return sorted(l, reverse=True)[0]\n",
        "test": "assert     closest_num(100) == 98",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    # find the length of longest word in the list\n    max_len = 0\n    for word in list1:\n        if(len(word) > max_len):\n            max_len = len(word)\n    \n    return max_len\n",
        "test": "assert     len_log(['1', '', '1']) == 1",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any([True for i in str1 if sub_str in i])\n",
        "test": "assert         find_substring('1', []) == -1",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    flag = False\n    while n: \n        x = n%10\n        if x%2 == 1: \n            flag = True\n            break\n        n //= 10\n    return flag\n",
        "test": "assert     is_undulating(14) == True, \"Failed 1\"",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b%2 == 0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a,b-1)\n",
        "test": "assert     (power(2,3) == 8)",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    new_list=sorted(test_list,key=itemgetter(1))\n    return new_list[0][0]\n",
        "test": "assert     index_minimum([(2, 3), (1, 2), (4, 4)]) == 1",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_min = []\n    for item in lst:\n        lst_min.append(len(item))\n    return min(lst_min)\n",
        "test": "assert     Find_Min_Length([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == 4",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        return 1\n    divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors = divisors + 1\n    return divisors\n",
        "test": "assert divisor(2) == 1",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n    \ndef sum_list(list1):\n    '''\n    Write a function to find sum of elements in a list, where the list is an\n    arbitrary number of nested lists.\n    '''\n    sum = 0\n    for i in list1:\n        if type(i) is list:\n            sum += sum_list(i)\n        else:\n            sum += i\n    return sum\n",
        "test": "assert     frequency_lists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for n in numbers:\n        total = total * n\n    return total\n",
        "test": "assert     multiply_num([0]) == 0",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n % 2 == 0:\n        return decimal_to_binary(n//2) + '0'\n    else:\n        return decimal_to_binary(n//2) + '1'\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_as_str = str(num)\n    for i in range(len(num_as_str)-1,-1,-1):\n        if num_as_str[i] < num_as_str[i+1]:\n            return int(num_as_str[:i]+num_as_str[i]+num_as_str[i+1:])\n    return -1\n",
        "test": "assert     next_smallest_palindrome(1234) == 10111",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert     kth_element([3,4,5,6], 1) == 3",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n",
        "test": "assert     snake_to_camel(\"snake_case\")     == \"SnakeCase\", \"Failed test for snake_to_camel\"",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Your code here\n    #return sum([(-1)**(i+j) * factorial(n-i-1) * factorial(m-j-1) for i in range(n) for j in range(m)])\n    \n    def is_valid(n):\n        if n<0:\n            return False\n        elif n==0:\n            return True\n        else:\n            return is_valid(n-1)\n    \n    def func(n, m):\n        if n==0:\n            return 0\n        if n<0 or m<0:\n            return 0\n        if is_valid(n) and is_valid(m):\n            return 1 + func(n-1, m)\n        else:\n            return 0 + func(n-1, m)\n    return func(n, m)\n",
        "test": "assert     eulerian_num(3, 2) == 3",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in input_list]\n",
        "test": "assert     sort_sublists([['A'], ['B', 'C'], ['D', 'E', 'F']]) == [['A'], ['B', 'C'], ['D', 'E', 'F']]",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            count += 1\n    return count\n",
        "test": "assert     count([]) == 0",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n",
        "test": "assert     add_lists([], ()) == ()",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=j=k=0\n    result=[]\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            result.append(num1[i])\n            i+=1\n        elif num2[j]<num3[k]:\n            result.append(num2[j])\n            j+=1\n        else:\n            result.append(num3[k])\n            k+=1\n    while i<len(num1):\n        result.append(num1[i])\n        i+=1\n    while j<len(num2):\n        result.append(num2[j])\n        j+=1\n    while k<len(num3):\n        result.append(num3[k])\n        k+=1\n    return result\n",
        "test": "assert     merge_sorted_list([1,3,5,7],[2,4,6,8],[0,9,10,11,12])==[0,1,2,3,4,5,6,7,8,9,10,11,12]",
        "num_ids": 1538,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif len(s) == 1:\n        return 0\n    else:\n        if s[:1] == '1':\n            return odd_Equivalent(s[1:],n-1)\n        else:\n            return odd_Equivalent(s[:-1],n-1)\n",
        "test": "assert     odd_Equivalent('100', 3) == 0",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Use sets to remove duplicates\n    return list(set.intersection(*(set(item) for item in nestedlist)))\n",
        "test": "assert     common_in_nested_lists( [ [1, 2, 3], [2, 4], [2, 1, 3, 5] ] ) == [2]",
        "num_ids": 746,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # try:\n    #     int(text)\n    #     return True\n    # except ValueError:\n    #     return False\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_integer(\"\") == False",
        "num_ids": 250,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True\n",
        "test": "assert     empty_dit( [ {}, {} ] ) == True",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "test": "assert     tuple_to_int(())    == 0",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n",
        "test": "assert     list_to_float([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]]) == [[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0], [12.0, 13.0, 14.0, 15.0]]",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('hello') == ['hello']",
        "num_ids": 200,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return None\n    for i in range(0,len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n",
        "test": "assert search([1,2,3,4,5,6,7,8,9,10]) == None",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) % 2!= 0:\n        return\n    if len(list1) == 0:\n        return\n    if len(list1) == 2:\n        return\n    list2 = []\n    list3 = []\n    for a,b in list1:\n        list2.append(abs(a*b))\n    return max(list2)\n",
        "test": "assert     max_product_tuple([(4, 3), (1, 7), (0, 2), (5, -3), (5, -4), (0, 4)]) ==     20",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        s = i\n        l = []\n        for j in range(i+1, limit):\n            s += j\n            l.append(j)\n        l.remove(i)\n        if sum_of_factors(s) == i and sum_of_factors(s) in l:\n            sum += s\n    return sum\n",
        "test": "assert     amicable_numbers_sum(100) == 55",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #This function is based on the angle_between function, which is based on the trigonometric sum of the complex number.\n    #I don't think we need cmath here, but I don't know how to set up a library for this.\n    return cmath.phase(complex(a,b))\n",
        "test": "assert     angle_complex(a=cmath.rect(0,1), b=cmath.rect(0,1)) == 0.0",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #O(n) time and O(n) space\n    max_diff = 0\n    zeros = 0\n    ones = 0\n    for i in range(len(string)):\n        zeros += string[i] == \"0\"\n        ones += string[i] == \"1\"\n        if zeros == ones:\n            max_diff = max(max_diff, zeros-ones)\n        elif zeros > ones:\n            max_diff = max(max_diff, zeros-ones)\n            zeros = ones\n        elif ones > zeros:\n            max_diff = max(max_diff, zeros-ones)\n            ones = zeros\n    return max_diff\n",
        "test": "assert     find_length('10011') == 1",
        "num_ids": 2029,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lcm = max(a,b)\n    for i in range(1, lcm):\n        if a % i == 0 and b % i == 0:\n            lcm = i\n    return lcm\n",
        "test": "assert     sum(1,2) == 1",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(2,3) == 6",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert     long_words(8, [\"i\", \"am\", \"here\", \"to\", \"live\", \"so\", \"long\", \"and\", \"welcome\"])    ==    []",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sums = []\n    col_sums = []\n    for i in range(len(my_matrix)):\n        row_sums.append(sum(my_matrix[i]))\n        col_sums.append(sum(row_sums[i]))\n    \n    diag_sum = 0\n    for i in range(len(my_matrix)):\n        diag_sum += my_matrix[i][i]\n",
        "test": "assert     magic_square_test([[1, 2, 3],",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for item in nums:\n        count[item] += 1\n    return max(count, key=count.get)\n",
        "test": "assert     max_occurrences([1,2,2,1,2]) == 2",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    new_str = []\n    for char in str1:\n        if char in vowels:\n            new_str.append(char)\n    new_str.reverse()\n    new_str = ''.join(new_str)\n    return new_str\n",
        "test": "assert     reverse_vowels('This is a test') == 'tset a hsi a siht'",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i)\n    return string\n",
        "test": "assert     tup_string(('123', )) == '123'",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    else:\n        return hexagonal_num(n-1) + 2*hexagonal_num(n-2) + hexagonal_num(n-3)\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n=len(nums)\n    p = 0\n    q = 0\n    for i in nums:\n        if i == 0:\n            p += 1\n        else:\n            q += 1\n    return p/q\n",
        "test": "assert     zero_count([1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "num_ids": 2306,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while(n): \n        if(n%2==0): \n            n = n/2\n        else: \n            count+=1\n            n-=1\n    if(count>1): \n        return False\n    else: \n        return True\ndef is_Sum_Of_Powers_Of_Two2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<=0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two(): \n    assert(is_Sum_Of_Powers_Of_Two(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two(26)==False)\ndef is_Sum_Of_Powers_Of_Two_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    elif n%2==0: \n        return is_Sum_Of_Powers_Of_Two_2(n/2)\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_2(): \n    assert(is_Sum_Of_Powers_Of_Two_2(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_2(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two_2(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two_2(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(26)==False)\ndef is_Sum_Of_Powers_Of_Two_3(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_3(): \n    assert(is_Sum_Of_Powers_Of_Two_3(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_3(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two_3(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two_3(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(26)==False)\ndef is_Sum_Of_Powers_Of_Two_4(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_4(): \n    assert(is_Sum_Of_Powers_Of_Two_4(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_4(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two_4(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two_4(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(26)==False)\ndef is_Sum_Of_Powers_Of_Two_5(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_5(): \n    assert(is_Sum_Of_Powers_Of_Two_5(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_5(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(17)==False)",
        "test": "assert     is_Sum_Of_Powers_Of_Two(2) == True",
        "num_ids": 2546,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "test": "assert     circle_circumference(1) == 2*math.pi",
        "num_ids": 232,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output_list = []\n    for x in test_list:\n        if type(x) == list:\n            for y in x:\n                output_list.append(y)\n        else:\n            output_list.append(x)\n    return output_list\n",
        "test": "assert extract_singly([[3, 1, 4, 1], [], [5, 9, 2], [6], []]) == [3, 1, 4, 1, 5, 9, 2, 6]",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        j = min(i, nums[i-1])\n        if j > 1:\n            for k in range(j, 1, -1):\n                if nums[k-1] > nums[k]:\n                    nums[k], nums[k-1] = nums[k-1], nums[k]\n                else:\n                    break\n",
        "test": "assert ",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum(1 for item1,item2,item3 in zip(list1,list2,list3) if item1==item2==item3)\n",
        "test": "assert     count_samepair([1,2,3],[2,1,3],[1,1,1])==0",
        "num_ids": 567,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        if(isinstance(i,list)):\n            count=count+1\n    return count\n    \ndef find_max(Input):\n    '''\n    Write a function to find maximum integer value in a tuple.\n    '''\n    max_number=Input[0]\n    for i in Input:\n        if(i>max_number):\n            max_number=i\n    return max_number\n",
        "test": "assert     find_lists(()) == 0",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n",
        "test": "assert     max_Abs_Diff([1, 2, 3]) == 2",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (0, -b / a) if n * a >= b else None\n    if b == 0:\n        return (n / a, 0) if n * a <= a else None\n    \n    D = b * b - 4 * a * n\n    if D < 0:\n        return None\n    if D == 0:\n        return (n / (2 * a), -b / (2 * a))\n    x1 = (-b + D ** 0.5) / (2 * a)\n    x2 = (-b - D ** 0.5) / (2 * a)\n    if x1 < x2:\n        return (x1, x2)\n    return (x2, x1)\n",
        "test": "assert     find_solution(2, 2, 3) == None",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n",
        "test": "assert     remove_elements([1,2,3,4], [1,2,3]) == [4]",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    return n + sum_series(n - 2)\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25*s*l**2)/tan(pi/s)\n",
        "test": "assert     area_polygon(7, 2) == 14.0 * 7.0 / 4.0",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 164,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    d = n\n    s1 = 0\n    while d > 1:\n        if n % d == 0:\n            s1 = s1 + d\n        d = d - 1\n    d = n\n    s2 = 0\n    while d > 1:\n        if n % d == 0:\n            s2 = s2 + d\n        d = d - 1\n    if s1 == s2:\n        return True\n    else:\n        return False\n",
        "test": "assert     div_sum(1)     == True",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = [chr(i) for i in range(97, 123)]\n    total = 0\n    for index in range(len(str1)):\n        if str1[index] in alphabet:\n            total += 1\n    return total\n",
        "test": "assert     count_char_position('a') == 1, \"Counting character position should be 1 for a\"",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    from collections import Counter \n    import operator\n",
        "test": "assert     find_even_pair([1, 3, 5, 7, 9]) == 1",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    res = 1\n    while res <= n:\n        res = res * 2\n    return res\n",
        "test": "assert     (next_power_of_2(1) == 2)",
        "num_ids": 268,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len([i for i in a if i == x])\n    \n    ",
        "test": "assert     frequency([1,2,3,4,5,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9],10) == 0",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert     sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 10) == 45",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n",
        "test": "assert     perimeter_pentagon(0) == 0",
        "num_ids": 221,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('std') == 1",
        "num_ids": 194,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    return len(set([type(item) for item in test_tuple])) <= 1\n",
        "test": "assert     check_type((1,2,3)) == True",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[0] == x:\n        return True\n    if arr[0]!= x:\n        return is_majority(arr[1:], n-1, x)\n",
        "test": "assert     is_majority([1, 2, 3, 1, 2, 1, 1, 3, 3, 3], 9, 4) == False",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while(n):\n        count=count+1\n        n=n&(n-1)\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 266,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = ''.join(x for x in str if x.isalpha())\n    string = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            string += str[i]\n    return string\nprint(odd_values_string('hello_there'))\n",
        "test": "assert     odd_values_string('dab') == 'ba'",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n",
        "test": "assert     min_of_three(5, 3, 1) == 1",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x = (1 << l) - 1\n    y = (1 << r) - 1\n    res = ((n & x) == 0) and ((n & y) == 0)\n    return res\n",
        "test": "assert         all_Bits_Set_In_The_Given_Range(2,3,5) == False",
        "num_ids": 2387,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n <= 0:\n        return arr\n    elif n == len(arr):\n        return arr\n    else:\n        sorted_arr = sorted(arr)\n        for i in range(len(arr)):\n            if arr[i] > 0:\n                arr[i], arr[n - 1] = arr[n - 1], arr[i]\n                n -= 1\n        return arr\n",
        "test": "assert     re_arrange_array([], 3) == []",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n",
        "test": "assert     replace_blank(\"hello\", \" \") == \"hello\", 'wrong'",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n",
        "test": "assert     larg_nnum([3,2,1,4,5,6,7,8,9],1)     == [9]",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510\n    return pi * (r**2) * (h/2)\n",
        "test": "assert     lateralsuface_cylinder(2,1)    ==     6.283185307179586",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(2) == 8, 'failure'",
        "num_ids": 154,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    x = bin(n).replace(\"0b\",\"\")\n    l = [x[i] for i in range(len(x)) if i % 2 == 0]\n    z = \"\".join(l)\n    return int(z, 2)\n",
        "test": "assert     even_bit_set_number(0) == 0 ",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence = Counter(test_list)\n    return occurence\n",
        "test": "assert     check_occurences(",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    length=len(str)\n    count=0\n    for i in range(length):\n        if str[i]!=' ':\n            for j in range(i,length):\n                if str[j]==' ':\n                    break\n                count+=1\n    return count\n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m - 2, n-1)\n",
        "test": "assert     get_total_number_of_sequences(10,13) == 40813",
        "num_ids": 2301,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    result = list1[:]\n    result[-1:] = list2\n    return result\n",
        "test": "assert     replace_list([1, 2, 3], [3]) == [1, 2, 3]",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac('abcdefghijklmnopqrstuvwxyz') == 26,     \"Incorrect count\"",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    temp = N\n    if (temp & 1):\n        temp += 1\n        while (temp & 1):\n            temp += 1\n    else:\n        temp += 2\n        while (temp & 1):\n            temp += 1\n    return temp\n",
        "test": "assert     next_Perfect_Square(1)     == 2",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return max(arr[0], max_sum(arr[1:]))\n",
        "test": "assert     max_sum([10, 2, 22, 4, 7, 6, -1, 3, 8, 5, 2, 1, 9, 10]) == 22, 'incorrect result'",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    x = guess\n    while abs(number - x * x) > 0.000001:\n        x = (x + number / x) / 2\n    return x\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2: \n        return len(str)\n",
        "test": "assert     lps(\"\") == 0",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if not array_nums1:\n        return []\n    result = []\n    # result = array_nums2.copy()\n    for num in array_nums1:\n        if num in array_nums2:\n            result.append(num)\n    return result\n    \n",
        "test": "assert     intersection_array([1,2,3],[2,3,4])    == [2,3]",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    cnt = 0\n    for e in tup:\n        if x == e:\n            cnt+=1\n    return cnt\n",
        "test": "assert     (count_X((0,0,0,0,0), 0) == 5),     'Not correct'",
        "num_ids": 223,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Your Code Here\n    return [element] + list\n",
        "test": "assert     insert_element([1,2,3],10) == [10,1,2,3]",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    converted = []\n    for item in numbers:\n        converted.append(cmath.polar(item))\n    return converted\n",
        "test": "assert     convert([complex(0,0),complex(0,1)])==[(0.0+1.0j),(0.0-1.0j)]",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    return count\n",
        "test": "assert     count_integer([])    == 0",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(comb) for comb in combinations_with_replacement(l, n)]\n    ",
        "test": "assert     [tuple(x) for x in combinations_colors(['a', 'b', 'c', 'd'], 3)] == [('a', 'a', 'a'), ('a', 'a', 'b'), ('a', 'a', 'c'), ('a', 'a', 'd'), ('a', 'b', 'b'), ('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'c', 'c'), ('a', 'c', 'd'), ('a', 'd', 'd'), ('b', 'b', 'b'), ('b', 'b', 'c'), ('b', 'b', 'd'), ('b', 'c', 'c'), ('b', 'c', 'd'), ('b', 'd', 'd'), ('c', 'c', 'c'), ('c', 'c', 'd'), ('c', 'd', 'd'), ('d', 'd', 'd')]",
        "num_ids": 1046,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a = [True for _ in xrange(n)]\n        for i in xrange(2, n):\n            if a[i]:\n                j = 2\n                while i * j < n:\n                    a[i * j] = False\n                    j += 1\n        return sum(a)\n",
        "test": "assert     count_Primes_nums(1) == 0",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     swap_numbers(5, 10) == (10, 5)",
        "num_ids": 163,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert     maximize_elements((1, 5), (1, 5)) == (1, 5)",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    primes = [2]\n    i = 3\n    while i < n:\n        isPrime = True\n        for p in primes:\n            if i % p == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n        i = i + 1\n    \n    return primes[-1]\n",
        "test": "assert     newman_prime(0) == 2",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    def division(a, b):\n        return a/b\n    \n    return (division(test_tup1[0], test_tup2[0]), division(test_tup1[1], test_tup2[1]))\n    \n",
        "test": "assert ",
        "num_ids": 251,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "test": "assert     (split_two_parts(['a','b','c','d','e','f','g','h'], 2) == (['a','b'], ['c','d','e','f','g','h']))",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # h_age = input(\"Enter your dog's age in human years: \")\n    h_age = float(h_age)\n    return h_age * 7.0\n",
        "test": "assert     dog_age(1) == 7",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    i = 0\n    while i < len(S):\n        res.append(S[i:i+step])\n        i += step\n    return res\n",
        "test": "assert     list_split([1, 2, 3], 1) == [[1], [2], [3]]",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    A = pow(l,2)\n    A2 = 6 * l\n    print 'The area of a cube is ', A\n    print 'The area of a square is ', A2\n    \n    \n",
        "test": "assert     lateralsurface_cube(4) == 24",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def square_sum(n):\n        if n == 1:\n            return n\n        else:\n            return n + square_sum(n-1)\n    return square_sum(n)\n",
        "test": "assert     square_Sum(10) == 55",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 5*find_star_num(n-2)\n",
        "test": "assert     find_star_num(1) ==    1",
        "num_ids": 272,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('0') == 48",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even_index += arr[i]\n    return sum_even_index\n",
        "test": "assert     sum_even_and_even_index([10,21,4,2,1,4,0,7,3,0,5,9,8,11])==32,    'fail the test'",
        "num_ids": 573,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        print(\"Enter a positive integer\")\n    else:\n        total = 0\n        for i in range(n):\n            if i % 2 == 0:\n                total = total + i**5\n        return total\n",
        "test": "assert     (even_Power_Sum(4) == 64)",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [val[-1] for val in test_list]\n",
        "test": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print \"Length mismatch\"\n        return None\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1\n    \n",
        "test": "assert     substract_elements( (4,2,3), (2,2,2) ) == (4,0,3)",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif n % 2 == 0:\n        return int(n / 2) * (int(n / 2) + 1)\n    else:\n        return int(n / 2) * (int(n / 2) + 1) + 1\n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = math.pi * (r**2)*h\n    return V\n    ",
        "test": "assert     volume_cylinder(3,3) == 12",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    #a new dictionary with only keys that are greater than or equal to n\n    new_dict = {key:value for key,value in dict.items() if value >= n}\n    return new_dict\n",
        "test": "assert     dict_filter({1:5, 2:4, 3:7, 4:9, 5:1, 6:2, 7:3, 8:4}, 1) == {1:5, 2:4, 3:7, 4:9, 5:1, 6:2, 7:3, 8:4}",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_list = list(test_tup)\n    for i in range(1, len(test_list)):\n        if test_list[i] == test_list[0]:\n            return i\n",
        "test": "assert     count_first_elements((1,2,3,1,2)) == 3",
        "num_ids": 2334,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    nth_num = n - n % 10\n    nth_num = nth_num // 10\n    return nth_num\n",
        "test": "assert     is_num_decagonal(0) == 0",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert     (True, 0) == sequential_search([0, 1, 2, 3, 4], 0)",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert     all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print('Lengths must be equal')\n        return\n    else:\n        return [nums1[i]-nums2[i] for i in range(len(nums1))]\n",
        "test": "assert ",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def dig(n): \n        n=str(n)\n        return [int(i) for i in n]\n    def digit_freq(n): \n        dic={}\n        for i in dig(n): \n            if i not in dic: \n                dic[i]=1\n            else: \n                dic[i]+=1\n        return dic\n    def digit_freq_check(dic): \n        for k,v in dic.items(): \n            if v>k: \n                return False\n        return True\n    n=str(n)\n    dic=digit_freq(n)\n    return digit_freq_check(dic)\n",
        "test": "assert     validate(1234) ==     True",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n    \n    \ndef check_element_bool(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return element in list\n    \n    \ndef check_element_bool_2(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n    \n",
        "test": "assert     check_element(['A','B','C'],'D') == False",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'(.)b{2,3}(.)',text))\n",
        "test": "assert     text_match_two_three('') == False",
        "num_ids": 322,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    curr_sum = max_sum = k*a[0]\n    for i in range(1, n):\n        curr_sum = max(a[i], curr_sum+a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([1,-2,0,3], 3, 3) == 6",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n<0:\n        return\n    \n    if n==0:\n        return 0\n    else:\n        return square_Sum(n-1)+n*n\n    \n    \ndef consecutive_product(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of consecutive product of first n natural numbers.\n    '''\n    if n<0:\n        return\n    \n    if n==0:\n        return 1\n    else:\n        return consecutive_product(n-1)*n\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 2220,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = len(list1[0])\n    for sublist in list1:\n        if len(sublist) > max:\n            max = len(sublist)\n    return max\n",
        "test": "assert     max_length([[1, 2], [3, 4], [5, 6], [7, 8, 9], [4, 3, 2, 1]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1]",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return k\n    else:\n        return count_no_of_ways(n-1, k) + k*count_no_of_ways(n-2, k)\n",
        "test": "assert     count_no_of_ways(2, 1) == 1",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert     find(3,5) == 0",
        "num_ids": 179,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2+h**2 == (w+h)*(w-h)*(w+h)*(w-h):\n        return (w+h)*2\n    return False\ndef rightangledtriangle(a,b,c):\n    '''\n    Write a function that returns true if a triangle can be formed with the given side lengths, and false otherwise.\n    '''\n    if a**2+b**2 == c**2:\n        return True\n    return False\ndef kangaroo(x1, v1, x2, v2):\n    '''\n    Write a function to find the first time when two kangaroos meet.\n    '''\n    if x1 == x2 and v1 == v2:\n        return True\n    if x1 < x2:\n        return x2 < x1+v2\n    return x1+v1 < x2\ndef reverse_str(s):\n    '''\n    Write a function that takes a string and returns a new string with the letters in reverse order.\n    '''\n    s = s[::-1]\n    return s\ndef reverse_str_2(s):\n    '''\n    Write a function that takes a string and returns a new string with the letters in reverse order.\n    '''\n    s = list(s)\n    return s[::-1]\ndef prime_summation(n):\n    '''\n    Write a function that returns the sum of all the primes below n.\n    '''\n    primes = []\n    if n < 2:\n        return 0\n    for i in range(2, n):\n        is_prime = True\n        for j in primes:\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return sum(primes)\ndef rotate_string(s,k):\n    '''\n    Write a function that takes in a string and a number of characters to rotate and returns the rotated string.\n    '''\n    if len(s) < 2:\n        return s\n    k = k%len(s)\n    s = list(s)\n    for i in range(k):\n        s.append(s.pop(0))\n    return ''.join(s)\ndef rotate_string_2(s,k):\n    '''\n    Write a function that takes in a string and a number of characters to rotate and returns the rotated string.\n    '''\n    if len(s) < 2:\n        return s\n    k = k%len(s)\n    s = list(s)\n    for i in range(k):\n        s.insert(0, s.pop())\n    return ''.join(s)\ndef sherlock_and_anagrams(s):\n    '''\n    Write a function that takes in a string and returns the number of anagrams of substrings of that string.\n    '''\n    anagrams = 0\n    if len(s) <= 2:\n        return 0\n    for i in range(len(s)):\n        s1 = list(s)\n        s1.pop(i)\n        s2 = ''.join(s1)\n        if s2 not in s:\n            continue\n        for j in range(len(s) - i):\n            s1 = list(s)\n            s1.pop(i)\n            s1.pop(i)\n            s1 = ''.join(s1)\n            if s1 not in s:\n                continue\n            else:\n                anagrams += 1\n    return anagrams\ndef sherlock_and_anagrams_2(s):\n    '''\n    Write a function that takes in a string and returns the number of anagrams of substrings of that string.\n    '''\n    if len(s) < 2:\n        return 0\n    anagrams = 0\n    s1 = list(s)\n    s1.sort()\n    for i in range(len(s)):\n        s1 = list(s)\n        s1.pop(i)\n        s2 = ''.join(s1)\n        if s2 not in s:\n            continue\n        for j in range(len(s) - i):\n            s1 = list(s)\n            s1.pop(i)\n            s1.pop(i)\n            s1 = ''.join(s1)\n            if s1 not in s:\n                continue\n            else:\n                anagrams += 1\n    return anagrams\ndef adjacent_pairs(s):\n    '''\n    Write a function that takes in a string and returns a new string with all adjacent pairs removed.\n    '''\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            s.pop(i)\n            s.pop(i)\n    return ''.join(s)\ndef shift_alphabet(s,n):\n    '''\n    Write a function that takes in a string and a number of letters to shift the alphabet by, and returns the new string.\n    '''\n    if len(s) < 2:\n        return s\n    n = n%len(s)\n    s = list(s)\n    for i in range(n):\n        s.append(s.pop(0))\n    return ''.join(s)\ndef super_reduced_string(s):\n    '''\n    Write a function that takes in a string and returns the super reduced string.\n    '''\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == s[-1]:\n            s.pop()\n            s.pop()\n    return ''.join(s)\ndef string_permutations(s):\n    '''\n    Write a function that takes in a string and returns all the permutations of that string.\n    '''\n    s = list(s)\n    if len(s) <= 1:\n        return [s]\n    perms = []\n    for i in range(len(s)):\n        for j in string_permutations(s[:i] + s[i+1:]):\n            perms.append(s[i] + j)\n    return perms\ndef string_permutations_2(s):\n    '''\n    Write a function that takes in a string and returns all the permutations of that string.\n    '''\n    s = list(s)\n    if len(s) <= 1:\n        return [s]\n    perms = []\n    for i in range(len(s)):\n        for j in string_permutations_2(s[:i] + s[i+1:]):\n            perms.append(s[i] + j)\n    return perms\ndef find_two_smallest(L):\n    '''\n    Write a function that takes in a list of integers and returns the indices of the two smallest integers in the list.\n    '''\n    s = sorted(L)\n    return [L.index(s[0]), L.index(s[1])]\ndef find_two_smallest_2(L):\n    '''\n    Write a function that takes in a list of integers and returns the indices of the two smallest integers in the list.\n    '''\n    s = sorted(L)\n    return [L.index(s[0]), L.index(s[1])]\ndef find_pair_of_rotated_digits(n):\n    '''\n    Write a function that takes in a number and returns the pair of integers that rotate the number to form the maximum possible.\n    '''\n    if len(str(n)) < 2:\n        return False\n    n = str(n)\n    n = list(n)\n    n.sort()\n    return [int(''.join(n[::-1])), int(''.join(n[::-2]))]\ndef find_pair_of_rotated_digits_2(n):\n    '''\n    Write a function that takes in a number and returns the pair of integers that rotate the number to form the maximum possible.\n    '''\n    if len(str(n)) < 2:\n        return False\n    n = str(n)\n    n = list(n)\n    n.sort()\n    for i in range(len(n) - 1):\n        if int(''.join(n[i:] + n[:i])) > n[0] + n[-1]:\n            return ",
        "test": "assert     otherside_rightangle(20,20) == 0",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    maximum = listval[0]\n    for item in listval:\n        if item > maximum:\n            maximum = item\n    return maximum\n",
        "test": "assert     max_val([0, 1, 2, 3, 4, 5, 6]) == 6",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = 0\n    for divisor in range(1, number):\n        if number % divisor == 0:\n            divisors = divisors + divisor\n    return divisors\n",
        "test": "assert     sum_div(3) == 1",
        "num_ids": 268,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                Inv_Count = Inv_Count + 1\n    return Inv_Count\n",
        "test": "assert     get_Inv_Count([])        == 0",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for item in list1:\n        if isinstance(item, list):\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n",
        "test": "assert     flatten_list( [1, [2, [3], 4, [5, [6, [7]]]]]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(float)\n    for t in stdata:\n        for k,v in t:\n            aggregate[k] = aggregate.get(k,0) + v\n    return aggregate\n",
        "test": "assert     max_aggregate([(1, 2, 3, 4, 5), (1, 2, 3, 4, 5), (1, 2, 3, 4, 5)]) == 15",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 0\n    total = 0\n    for i in xrange(2**(n+1)):\n        if i & (i+1) == i+1:\n            total += 1\n    return total\n",
        "test": "assert     count_binary_seq(3) == 8",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n        else:\n            depth = max(depth, 1)\n    return depth\n",
        "test": "assert     dict_depth({'a':1, 'b':2, 'c':3}) == 1",
        "num_ids": 2314,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    ranges[index] = (ranges[index]+rotations)%len(arr)\n    return arr[ranges[index]]\n",
        "test": "assert     find_Element( [1,2,3,4,5,6,7,8,9], [[0,3],[1,2],[2,4],[1,5],[3,6],[4,7],[5,8]], [1,1,1,1,1,1,1], 9 ) == 9",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n",
        "test": "assert     start_withp(['this', 'is', 'a', 'test', 'pqr', 'pqr', 'pqr']) == ['pqr', 'pqr', 'pqr']",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n - 1:\n        return 0\n    elif k == n - 1:\n        return a[k]\n    elif k == 0:\n        return 0\n",
        "test": "assert     max_sum_increasing_subseq([1,2,3,5,6], 6, 1, 2) == 5",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=(tuplex[i][j] for i in range(m) for j in range(n) if i!=j)\n    return tuplex\n",
        "test": "assert     colon_tuplex(('a','b'),2,1)     ==     'a:b:a'",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for n in xrange(N):\n        products.append(nums1[n] * nums2[n])\n    return max(products)\n",
        "test": "assert     large_product([5,2,4,5], [7,8,3,10], 3) == [150, 150, 150]",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(5, 2)    ==    5",
        "num_ids": 194,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    l = []\n    for i in str1:\n        l.append(i)\n    return tuple(l)\n",
        "test": "assert     string_to_tuple('ab') == ('a', 'b')",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 0:\n        n = n & 0xffffffff\n    return n\n",
        "test": "assert     (set_left_most_unset_bit(0) == 0)",
        "num_ids": 1903,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=math.pi\n    v=pi*r**2*h/3\n    return v\n",
        "test": "assert     volume_cone(0, 10) == 0",
        "num_ids": 313,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(2**math.ceil(math.log(n,2)))\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n",
        "test": "assert ",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    pass\n",
        "test": "assert     convert_list_dictionary(['x','y','z'], ['a','b','c'], [1,2,3]) == \\",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 13\n    elif n%2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    elif n%3 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    elif n%4 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_length_list = element\n    print(\"the maximum length is\", max_length)\n    return max_length_list\n",
        "test": "assert     max_length_list([1,2,3,4,5,6,7]) == 7",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    t = set(test_tup)\n    return len(t) == len(test_tup)\n",
        "test": "assert     check_distinct((1, 2, 3, 4)) == True",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    list1 = []\n    for i in str1:\n        if i not in list1:\n            list1.append(i)\n        else:\n            continue\n    return list1[0]\n",
        "test": "assert     first_non_repeating_character('s') =='s'",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (string[0] == string[-1])\n",
        "test": "assert     check_char('abcd') == False",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # https://docs.python.org/2/library/statistics.html\n    # https://docs.python.org/2/library/math.html\n    # https://docs.python.org/2/library/collections.html\n    return sorted([a,b,c])[1]\n",
        "test": "assert     median_numbers(0,0,0) == 0",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum([int(i) for i in str(num)])\n    return total\n",
        "test": "assert     sum_of_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x ^ y for x, y in zip(test_tup1, test_tup2)])\n",
        "test": "assert     bitwise_xor((0, 0), (0, 1)) == (0, 1)",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    seen = set()\n    for i in test_list:\n        if i not in seen:\n            seen.add(i)\n    return len(seen)\n",
        "test": "assert     extract_freq([])     == 0,    'empty list'",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    \n",
        "test": "assert ",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "test": "assert     minimum(5,5) == 5",
        "num_ids": 212,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_tuplex(('a', 'b', 'c'), ('a', 'b', 'd')) == False, \"2nd case\"",
        "num_ids": 553,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    i = 0\n    while x & 1 == 0:\n        i = i + 1\n        x = x >> 1\n    return i & 1\n",
        "test": "assert     find_Parity(33) == False",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    nums = list(str(n))\n    if nums[0] <= nums[-1]:\n        return int(''.join(sorted(nums, reverse=True)))\n    return int(''.join(sorted(nums)))\n",
        "test": "assert     rearrange_bigger(6) == 6",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    if k > len(nums1) * len(nums2):\n        return []\n    # heap queue\n    hq = []\n    # store all the tuples\n    res = []\n    i, j = 0, 0\n    # loop thru the array and sort the tuples\n    while i < len(nums1) and j < len(nums2):\n        heapq.heappush(hq, (nums1[i] + nums2[j], i, j))\n        i += 1\n        j += 1\n    # loop thru the k elemnts and pop\n    for _ in range(k):\n        res.append(heapq.heappop(hq))\n    return res\n",
        "test": "assert     k_smallest_pairs([], [], 0) == []",
        "num_ids": 989,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    length = len(list1)\n    prod_list = []\n    for i in range(length):\n        prod_list.append(list1[i][0]*list1[i][1])\n    return min(prod_list)\n",
        "test": "assert     min_product_tuple([(1, 4), (5, 3), (8, 2)]) == 4",
        "num_ids": 566,
        "indeed": true
    },
    {
        "number": 410,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if(len(listval)==0):\n        return None\n    \n    min=listval[0]\n    for i in listval:\n        if(i<min):\n            min=i\n    return min\n",
        "test": "assert     min_val([1,2,3,4,5,6]) == 1",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word) <= 1:\n        return word\n    else:\n        return re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()\n",
        "test": "assert     snake_to_camel('foo') == 'foo'",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n    \n",
        "test": "assert     remove_odd([0,1,2,3,4,5,6,7,8,9]) == [0,2,4,6,8]",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [row[n] for row in list1]\n",
        "test": "assert     extract_nth_element([(1,2), (2,3), (3,4), (4,5)], 4) == 4",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return 1\n    return 0\n",
        "test": "assert     overlapping(range(10),range(10))",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    result = [-1,-1]\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j] > result[0]*result[1]:\n                result = [arr[i]*arr[j],i,j]\n    print result\n    \narr = [3,4,5,6,7,8,9]\nmax_Product(arr)",
        "test": "assert     max_Product([1,2]) == [2,1]",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) > 1:\n        CommonFirst = Input[0][0]\n        for i in Input:\n            if i[0]!= CommonFirst:\n                return False\n    return True\n",
        "test": "assert     group_tuples([(1, 2, 3), (3, 3, 3), (4, 5, 5), (5, 6, 6), (7, 7, 7), (7, 7, 7), (7, 7, 7), (7, 7, 7), (7, 7, 7), (7, 7, 7)]) == [(3, 3, 3), (7, 7, 7), (7, 7, 7), (7, 7, 7)]",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    for each in lst:\n        if len(each) > max_len:\n            max_len = len(each)\n            max_num = each\n    return max_num\n    \ndef Find_Max_with_key(lst, key): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0][key])\n    for each in lst:\n        if len(each[key]) > max_len:\n            max_len = len(each[key])\n            max_num = each[key]\n    return max_num\n",
        "test": "assert     Find_Max(['a', 'aa', 'bb', 'cc', 'dddd', 'e']) == 'dddd'",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = [round(x) for x in list1]\n    total = 0\n    for i in list2:\n        total += i\n    return total * len(list1)\n",
        "test": "assert     round_and_sum([]) == 0",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            result += i ** 3\n    return result\n",
        "test": "assert     (cube_Sum(0) == 0)",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    str_list = []\n    for i in test_tup:\n        str_list.append(str(i))\n    str_list = delimiter.join(str_list)\n    return str_list\n",
        "test": "assert     concatenate_tuple(('a', 'b', 'c', 'd', 'e')) == 'a_b_c_d_e'",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total = total + i * i * i\n    avg = total / n\n    return avg\n",
        "test": "assert     find_Average_Of_Cube(10) ==     30",
        "num_ids": 243,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    # unpack the tuple\n    for item in test_tuple:\n        print(item[-1])\n        \n    # return the list of tuple items\n    return test_tuple\n",
        "test": "assert     extract_rear((\"Google\", \"Run\", \"Taobao\", \"Facebook\", \"Zhihu\", \"Stack Overflow\", \"Github\", \"Leetcode\", \"Slack\")) == \\",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1:\n        if element == x:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([\"a\",\"b\",\"c\",\"d\",\"e\"], \"z\") == 0",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2==1]\n",
        "test": "assert     filter_oddnumbers([]) == [], 'Empty list should return empty list'",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_list = dt.split('-')\n    # print (date_list)\n    return (date_list[2] + '-' + date_list[1] + '-' + date_list[0])\n",
        "test": "assert     change_date_format('2016-01-01') == '01-01-2016', change_date_format('2016-01-01')",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3*h+1\n    while h >= 1:\n        for i in range(h,n):\n            val = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > val:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = val\n        h = int(h/3)\n    return my_list\n",
        "test": "assert     shell_sort([4, 3, 2, 1]) == [1, 2, 3, 4], 'Failed test 1'",
        "num_ids": 2548,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(map(lambda x: x[0] and x[1], zip(test_tup1, test_tup2)))\n",
        "test": "assert     and_tuples( (10,20,30,40,50), (30,20,10,40,50) ) == (30,10,10,40,50)",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n    ",
        "test": "assert ",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert     common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == False",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2 * (base1+base2) * height\n",
        "test": "assert     median_trapezium(1,1,1) == 1",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] > number:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_greater([0, 1, 2, 3, 4], 2) == False",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.search(r'ab+', text))\n",
        "test": "assert     text_match_one(\"have an b\") == False",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0 :\n        return n % 10\n    elif n == 0 :\n        return 0\n    else :\n        return -1 * (n % -10)\n",
        "test": "assert     last_Digit(1001) == 1",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n    \ndef neg_nos2(list2):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list2 if x < 0]\n    \ndef neg_nos3(list3):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list3 if x < 0]\n    \ndef neg_nos4(list4):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list4 if x < 0]\n    \ndef neg_nos5(list5):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list5 if x < 0]\n    \ndef neg_nos6(list6):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list6 if x < 0]\n    \ndef neg_nos7(list7):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list7 if x < 0]\n    \ndef neg_nos8(list8):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list8 if x < 0]\n    \ndef neg_nos9(list9):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list9 if x < 0]\n    \ndef neg_nos10(list10):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list10 if x < 0]\n    \ndef neg_nos11(list11):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list11 if x < 0]\n    \ndef neg_nos12(list12):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list12 if x < 0]\n    \ndef neg_nos13(list13):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list13 if x < 0]\n    \ndef neg_nos14(list14):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list14 if x < 0]\n    \ndef neg_nos15(list15):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list15 if x < 0]\n    \ndef neg_nos16(list16):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list16 if x < 0]\n    \ndef neg_nos17(list17):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list17 if x < 0]\n    \ndef neg_nos18(list18):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list18 if x < 0]\n    \ndef neg_nos19(list19):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list19 if x < 0]\n    \ndef neg_nos20(list20):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list20 if x < 0]\n    \ndef neg_nos21(list21):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list21 if x < 0]\n    \ndef neg_nos22(list22):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list22 if x < 0]\n    \ndef neg_nos23(list23):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list23 if x < 0]\n    \ndef neg_nos24(list24):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list24 if x < 0]\n    \ndef neg_nos25(list25):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list25 if x < 0]\n    \ndef neg_nos26(list26):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list26 if x < 0]\n    \ndef neg_nos27(list27):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list27 if x < 0]\n    \ndef neg_nos28(list28):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list28 if x < 0]\n    \ndef neg_nos29(list29):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list29 if x < 0]\n    \ndef neg_nos30(list30):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list30 if x < 0]\n    \ndef neg_nos31(list31):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list31 if x < 0]\n    \ndef neg_nos32(list32):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list32 if x < 0]\n    \ndef neg_nos33(list33):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list33 if x < 0]\n    \ndef neg_nos34(list34):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list34 if x < 0]\n    \ndef neg_nos35(list35):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list35 if x < 0]\n    \ndef neg_nos36(list36):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list36 if x < 0]\n    \ndef neg_nos37(list37):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list37 if x < 0]\n    \ndef neg_nos38(list38):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list38 if x < 0]\n    \ndef neg_nos39(list39):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list39 if x < 0]\n    \ndef neg_nos40(list40):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list40 if x < 0]\n    \ndef neg_nos41(list41):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list41 if x < 0]\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 154,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str\n",
        "test": "assert     remove_odd('I am in the mood to win') == 'I am in the mood to win'",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if i[0] < i[1]:\n            count += 1\n    return count\n",
        "test": "assert     count_bidirectional([(1, 2), (2, 3), (1, 3)]) == 3",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ret = 0\n    for x in L:\n        ret = ret * 10 + x\n    return ret\n",
        "test": "assert     multiple_to_single([1,2,3]) == 123",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    pattern = re.compile(r'\\w*adverb')\n    matches = re.finditer(pattern, text)\n    return [(match.start(), match.end(), match.group()) for match in matches]\n",
        "test": "assert ",
        "num_ids": 1369,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import numpy as np\n    surfacearea = 6*l**2\n    return surfacearea\n",
        "test": "assert     (surfacearea_cube(1) == 6)",
        "num_ids": 177,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>0:\n            count+=1\n    return (count/len(nums))*100\n",
        "test": "assert     positive_count([-5,-5,-5,-5,-5,-5]) == 0",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1=sorted(list1, reverse = True)\n    maxi=-1\n    for each in list1:\n        if each<0:\n            maxi=each\n    return maxi\n",
        "test": "assert     largest_neg([-1, 2, -3, 4, 5, 6, -7, 8, 9]) == -7",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    ret_list = []\n    for i in test_list:\n        ret_list.append(i[:K])\n    return ret_list\n",
        "test": "assert ",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    assert isinstance(test_tup1, tuple)\n    assert isinstance(test_tup2, tuple)\n    assert len(test_tup1) == len(test_tup2)\n    return tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n",
        "test": "assert     (1, 2, 3, 4, 5, 6) == index_multiplication((1, 2, 3, 4, 5), (6, 7, 8, 9, 10))",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst)\n    return [tup + (c, ) for c in cnt]\n",
        "test": "assert     count_Occurrence((1,2,3,4,5,6,7,8), [2,1,3,5,6,7,8]) == (1,1,1,1,1,1,1)",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x ** 3 for x in nums]\n",
        "test": "assert     [8, 64, 27, 9, 1, -2, 0] == cube_nums([-8, -6, 3, 9, 1, -2, 0])",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<0:\n        return 0\n    s = 0\n    a = 1\n    while a <= n:\n        s += a\n        a += 2\n    return s\n",
        "test": "assert     cal_sum(100) == 265252859812191058636308480000000",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    strs = []\n    for i in l:\n        strs.append(i[l[0]:l[1]])\n    return strs\n",
        "test": "assert     extract_string(['hi', 'this', 'is', 'a', 'test','string'], 5) == 't'",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r\"\\s+\",\"\",text1)\n    return text1\ndef lower_case(text1):\n    '''\n    Write a function to convert a string to lowercase.\n    '''\n    text1 = text1.lower()\n    return text1\ndef remove_hyphen(text1):\n    '''\n    Write a function to remove hyphens from the given string.\n    '''\n    text1 = text1.replace(\"-\",\"\")\n    return text1\ndef remove_special_characters(text1):\n    '''\n    Write a function to remove special characters from the given string.\n    '''\n    text1 = re.sub('[^A-Za-z0-9]+','',text1)\n    return text1\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove punctuation from the given string.\n    '''\n    text1 = re.sub('[^A-Za-z0-9 ]+', '', text1)\n    return text1\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    text1 = re.sub(r'[0-9]+', '', text1)\n    return text1\ndef remove_line_breaks(text1):\n    '''\n    Write a function to remove line breaks from the given string.\n    '''\n    text1 = re.sub(\"\\n\",\"\",text1)\n    return text1\ndef count_characters(text1):\n    '''\n    Write a function to count the number of characters in the given string.\n    '''\n    text1 = len(text1)\n    return text1\ndef remove_trailing_whitespaces(text1):\n    '''\n    Write a function to remove trailing whitespaces from the given string.\n    '''\n    text1 = re.sub(r\"\\s+$\",\"\",text1)\n    return text1\ndef capitalize_first_letter(text1):\n    '''\n    Write a function to capitalize the first letter of the given string.\n    '''\n    text1 = text1.capitalize()\n    return text1\ndef count_vowels(text1):\n    '''\n    Write a function to count the number of vowels in the given string.\n    '''\n    count = 0\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(text1)):\n        if text1[i] in vowels:\n            count += 1\n    return count\ndef word_count(text1):\n    '''\n    Write a function to count the number of words in the given string.\n    '''\n    text1 = text1.split()\n    return len(text1)\ndef count_non_alphanumeric(text1):\n    '''\n    Write a function to count the number of non-alphanumeric characters in the given string.\n    '''\n    count = 0\n    alphanumeric = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    for i in range(len(text1)):\n        if text1[i] not in alphanumeric:\n            count += 1\n    return count\ndef is_palindrome(text1):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    text1 = text1.lower()\n    if text1 == text1[::-1]:\n        return True\n    return False\ndef is_anagram(text1,text2):\n    '''\n    Write a function to check whether the two given strings are anagram of each other or not.\n    '''\n    text1 = remove_whitespaces(text1)\n    text2 = remove_whitespaces(text2)\n    text1 = lower_case(text1)\n    text2 = lower_case(text2)\n    text1 = remove_hyphen(text1)\n    text2 = remove_hyphen(text2)\n    text1 = remove_punctuation(text1)\n    text2 = remove_punctuation(text2)\n    text1 = remove_numbers(text1)\n    text2 = remove_numbers(text2)\n    text1 = remove_special_characters(text1)\n    text2 = remove_special_characters(text2)\n    text1 = remove_line_breaks(text1)\n    text2 = remove_line_breaks(text2)\n    text1 = remove_trailing_whitespaces(text1)\n    text2 = remove_trailing_whitespaces(text2)\n    text1 = capitalize_first_letter(text1)\n    text2 = capitalize_first_letter(text2)\n    if sorted(text1) == sorted(text2):\n        return True\n    return False\ndef reverse_string(text1):\n    '''\n    Write a function to reverse the given string.\n    '''\n    text1 = text1[::-1]\n    return text1\ndef is_pangram(text1):\n    '''\n    Write a function to check whether the given string is pangram or not.\n    '''\n    text1 = remove_whitespaces(text1)\n    text1 = remove_special_characters(text1)\n    text1 = remove_line_breaks(text1)\n    if len(set(text1)) == 26:\n        return True\n    return False\ndef count_punctuation(text1):\n    '''\n    Write a function to count the number of punctuation characters in the given string.\n    '''\n    text1 = re.sub('[^A-Za-z0-9]+','',text1)\n    return len(text1)\ndef count_uppercase(text1):\n    '''\n    Write a function to count the number of uppercase characters in the given string.\n    '''\n    count = 0\n    for i in range(len(text1)):\n        if text1[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            count += 1\n    return count\ndef count_lowercase(text1):\n    '''\n    Write a function to count the number of lowercase characters in the given string.\n    '''\n    count = 0\n    for i in range(len(text1)):\n        if text1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\ndef count_digits(text1):\n    '''\n    Write a function to count the number of digits in the given string.\n    '''\n    count = 0\n    for i in range(len(text1)):\n        if text1[i] in '0123456789':\n            count += 1\n    return count\ndef count_uppercase_lowercase(text1):\n    '''\n    Write a function to count the number of uppercase and lowercase characters in the given string.\n    '''\n    count = 0\n    for i in range(len(text1)):\n        if text1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\ndef count_punctuation_lowercase(text1):\n    '''\n    Write a function to count the number of punctuation and lowercase characters in the given string.\n    '''\n    count = 0\n    for i in range(len(text1)):\n        if text1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\ndef count_words(text1):\n    '''\n    Write a function to count the number of words in the given string.\n    '''\n    text1 = text1.split()\n    return len(text1)\ndef is_word(text1):\n    '''\n    Write a function to check whether the given string is word or not.\n    '''\n    text1 = text1.split()\n    if len(text1) == 1:\n        return True\n    return False\ndef count_vowels(text1):\n    '''\n    Write a function to count the number of vowels in the given string.\n    '''\n    count = 0\n    vowels = \"aeiouAEIOU\"\n    for i in range",
        "test": "assert     remove_whitespaces('he is boy\\n') == 'he is boy'",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    return 0\n",
        "test": "assert     (loss_amount(10,10) == 0)",
        "num_ids": 212,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    fact = []\n    for i in range(1, n//2+1): \n        if n%i == 0: \n            fact.append(i)\n    fact = sum(fact)\n    return fact\n",
        "test": "assert     sumofFactors(1) == 0",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # your code here\n    return re.search(r'\\b[zZ][a-zA-z]+\\b', text)\n",
        "test": "assert     text_match_wordz('HeLLo, I AM IYOu') == None",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\ndef check_yearnumb_number(yearnumb):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    if (yearnumb % 4) == 0:\n        if (yearnumb % 100) == 0:\n            if (yearnumb % 400) == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef check_monthnumb_number_leapyear(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not.\n    '''\n    if check_monthnumb_number(monthnum) == True:\n        if monthnum == 2:\n            return check_yearnumb_number(yearnumb)\n        else:\n            return True\n    else:\n        return False\ndef check_daynumb_number(daynumb):\n    '''\n    Write a function to check whether the given day number is a valid number or not.\n    '''\n    if daynumb < 1 or daynumb > 31:\n        return False\n    else:\n        return True\ndef is_valid_date(year,month,day):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if check_monthnumb_number(month) == True:\n        if check_daynumb_number(day) == True:\n            if check_monthnumb_number_leapyear(month) == True:\n                if check_yearnumb_number(year) == True:\n                    return True\n                else:\n                    return False\n            else:\n                if check_daynumb_number(day) == True:\n                    return True\n                else:\n                    return False\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(1) is True",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = [str(x) for x in stringlist]\n    stringlist = stringlist[::-1]\n    return stringlist\n",
        "test": "assert     reverse_string_list([\"aa\", \"bb\"]) == [\"bb\", \"aa\"]",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #Base Case: If the list is empty, return None\n    if lst == []: \n        return None\n    #Find the minimum element in the list\n    min = lst[0]\n    for element in lst:\n        if element < min:\n            min = element\n    #Return the minimum element\n    return min\n",
        "test": "assert     Find_Min([[1, 2, 3, 4, 5], [3, 4, 6, 7, 8], [9, 10, 11, 12, 13], [13, 14, 15, 16, 17], [19, 20, 21, 22, 23]]) == [1, 2, 3, 4, 5], \"Test 1 failed\"",
        "num_ids": 1169,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(2,3) == 6",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str1 = str1[:i] + str1[i+1:]\n            break\n    return str1\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            str1 = str1[:i] + str1[i+1:]\n            break\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            str1 = str1[:i] + str1[i+1:]\n            break\n    return str1\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in '!@#$%^&*()_+-=,;:.{}|/?':\n            str1 = str1[:i] + str1[i+1:]\n            break\n    return str1\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1 = str1[:i] + str1[i+1:]\n            break\n    return str1\ndef remove_non_ascii(str1):\n    '''\n    Write a function to remove non-ASCII characters from a given string.\n    '''\n    return ''.join([i for i in str1 if ord(i) <= 127])\ndef remove_non_alphanumeric(str1):\n    '''\n    Write a function to remove non-alphanumeric characters from a given string.\n    '''\n    return ''.join([i for i in str1 if ord(i) > 31 and ord(i) < 127])\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return ''.join([i for i in str1 if ord(i) < 127])\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return ''.join([i for i in str1 if not i.isdigit()])\ndef remove_words_1(str1):\n    '''\n    Write a function to remove words from a given string which are less than 3 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) > 2])\ndef remove_words_2(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) < 5])\ndef remove_words_3(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    less than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) >= 5 and len(i) <= 7])\ndef remove_words_4(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 5])\ndef remove_words_5(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_6(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_7(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_8(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_9(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_10(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_11(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_12(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_13(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_14(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_15(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_16(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_17(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_18(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_19(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ",
        "test": "assert     remove_uppercase('HELLO, WORLD!') == 'Hello, World!'",
        "num_ids": 2305,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst] \n",
        "test": "assert     Extract([['a'], ['b', 'c'], ['d', 'e', 'f']]) == ['a', 'b', 'd']",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr('') == 0",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    else:\n        return combinations_list(list1[1:]) + combinations_list(list1[1:])\n",
        "test": "assert     combinations_list([1, 2, 3, 4]) == [",
        "num_ids": 4273,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return None\n    \n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        # if previous number is negative, multiply it with max ending here,\n        # instead of adding it\n        if arr[i-1] < 0:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n            \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n",
        "test": "assert     max_subarray_product([-2, 0, -3]) == 0",
        "num_ids": 2407,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        for key in dict:\n            if key == n:\n                return False\n        return True\n",
        "test": "assert     check_value({'a':1, 'b':2, 'c':3}, 'a') == False",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # drop the items whose values are all empty strings\n    # dict1 = {'a': '', 'b': '', 'c': ''}\n    dict1 = {k:v for k,v in dict1.items() if v}\n    return dict1\n",
        "test": "assert         drop_empty({}) == {}",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    curr_product = 1\n    for i in range(0,len(arr)):\n        curr_product = 1\n        for j in range(i, len(arr)):\n            curr_product *= arr[j]\n            max_product = max(curr_product, max_product)\n    return max_product\n",
        "test": "assert     max_product([3,1,2]) == 6",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Define a helper function\n    def helper(l):\n        return [ l[i] + l[i+1] for i in range(len(l)-1) ]\n    # Check the edge case\n    if not test_tup:\n        return []\n    # Use the helper function to calculate the sum of the adjacent elements of the tuple\n    return helper(test_tup)\n",
        "test": "assert add_pairwise((3, 4, 5)) == (0, 1, 2)",
        "num_ids": 446,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a%b)\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return (arr[0] * arr[1]) % n\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = (res * arr[i]) % n\n    return res\n",
        "test": "assert     find_remainder([1, 2, 3], 10) == 6",
        "num_ids": 2377,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    def is_consecutive(l):\n        l.sort()\n        if(len(l) == 1):\n            return True\n        else:\n            for i in range(1,len(l)):\n                if(l[i] - l[i-1]!= 1):\n                    return False\n            return True\n    l = [int(i) for i in l]\n    return is_consecutive(l)\n",
        "test": "assert     check_Consecutive([1,2,3,4,5,6,7,8]) == True",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if (len(test_list1) == len(test_list2)):\n        result_list = []\n        for element in test_list1:\n            if element in test_list2:\n                result_list.append(element)\n        return result_list\n    else:\n        return None\n",
        "test": "assert     tuple_intersection([(1, 2, 3), (3, 4, 5), (1, 3, 2)], [(3, 4, 5), (1, 3, 2), (1, 2, 3)]) == [(1, 3, 2)]",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n",
        "test": "assert     replace_char(\"Test\",\"x\",\"a\") == \"Test\"",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n",
        "test": "assert     sort_counter({'c':1,'b':2,'a':3}) ==     [('a',3),('b',2),('c',1)]",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "test": "assert     big_sum([1,2,3]) == 4",
        "num_ids": 187,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of the given number n.\n    '''\n    res = 1\n    for i in range(1,n+1):\n        res = res * i\n    return res\n",
        "test": "assert     is_lower('C++')",
        "num_ids": 225,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    string = re.sub(r'[a-z]+', '', str1)\n    return string\n",
        "test": "assert     re.sub(r'([a-z])', r'', remove_lowercase('A')) == 'A'",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n % 10\n",
        "test": "assert     first_Digit(7) == 7",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    l=[]\n    for x in list:\n        if x%2==1:\n            l.append(x)\n    return l\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]",
        "num_ids": 352,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)]) - sum([i for i in range(1,n+1)])\n",
        "test": "assert     difference(1000) == 88372250",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i = 0\n    count = 0\n    while i<N : \n        if A[i]&1==1 : \n            count+=1\n        i+=1\n    return count\n",
        "test": "assert     find_Odd_Pair([1,2,3,4,5,6], 6) == 3",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle_letter(letter):\n        if letter.isupper():\n            return letter.lower()\n        elif letter.islower():\n            return letter.upper()\n        return letter\n    return ''.join([toggle_letter(letter) for letter in string])\n",
        "test": "assert     toggle_string('LOREM') == 'lOREM'",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1))!= len(str(n2)):\n        return 1\n    for i in range(len(str(n1))):\n        if int(str(n1)[i])!= int(str(n2)[i]):\n            return 1\n    return 0\n",
        "test": "assert     digit_distance_nums(123, 123) == 0",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0 or len(a) == 0:\n        return 0\n    max_sum = a[0]\n    s = a[0]\n    for i in range(size):\n        if s < 0:\n            s = a[i]\n        else:\n            s = s + a[i]\n        if s > max_sum:\n            max_sum = s\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([2,1,5,7,2,0,8], 6) == 19",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result_tup = ()\n    for item in test_tup1:\n        if item not in test_tup2:\n            result_tup = result_tup + (item,)\n    for item in test_tup2:\n        if item not in test_tup1:\n            result_tup = result_tup + (item,)\n    return result_tup\n    #return sorted(set(test_tup1) | set(test_tup2))\n",
        "test": "assert     union_elements(('a', 'b'), ('c', 'd')) == ('a', 'b', 'c', 'd')",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    counter = 0\n    current = 0\n    max_len = 0\n    for i in range(len(lst)):\n        if (lst[i] == 1):\n            current += 1\n        else:\n            if(current > max_len):\n                max_len = current\n            current = 0\n    if(current > max_len):\n        max_len = current\n    return max_len\n",
        "test": "assert     Find_Max_Length([]) == 0",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\\\"(.*?)\\\"', text)\n    return values\n",
        "test": "assert ",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if (arr[i]!=arr[j]):\n                count+=1\n    return count\n",
        "test": "assert     count_Pairs([1,2,3,4],0) == 0",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert     split('string') == ['s', 't', 'r', 'i', 'n', 'g']",
        "num_ids": 2328,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([]) == True, \"issort_list([]) == True\"",
        "num_ids": 2439,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert         empty_list(3) == [{}, {}, {}]",
        "num_ids": 151,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for l in list1:\n        l.sort()\n    return list1\n",
        "test": "assert     sort_sublists([['a1','a2','a3','a4','a5','a6'],['b1','b2','b3','b4','b5','b6'],['c1','c2','c3','c4','c5','c6']]) == ['a1','a2','a3','a4','a5','a6','b1','b2','b3','b4','b5','b6','c1','c2','c3','c4','c5','c6'], \"Error: sort_sublists\"",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for num in nums:\n        if num not in unique:\n            unique.append(num)\n    return unique\n",
        "test": "assert     two_unique_nums([]) == []",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    product = 1\n    for number in list_data:\n        if number not in unique_list:\n            unique_list.append(number)\n    for number in unique_list:\n        product = product * number\n    return product\n",
        "test": "assert     unique_product([1,2,3,4,5]) == 120",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*(r+h)\n",
        "test": "assert     surfacearea_cylinder(2,2) == 4*math.pi*math.pow(2,2)",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) <= len(B):\n        return all(B[i] in A for i in range(len(B)))\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3,4], [1,2,3,4,5]) == False",
        "num_ids": 503,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = n/10\n    if n==1:\n        return 1\n    else:\n        return last_Digit_Factorial(n)\n",
        "test": "assert     last_Digit_Factorial(10) == 1",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    return [x for z in zip(list1, list2, list3) for x in z]\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 760,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for tup1_ele in test_tup1:\n        for tup2_ele in test_tup2:\n            if tup1_ele!= tup2_ele:\n                dissimilar_list.append(tup1_ele)\n    for tup1_ele in test_tup1:\n        for tup2_ele in test_tup2:\n            if tup1_ele!= tup2_ele and tup1_ele not in dissimilar_list:\n                dissimilar_list.append(tup1_ele)\n    for tup1_ele in test_tup1:\n        for tup2_ele in test_tup2:\n            if tup1_ele!= tup2_ele and tup2_ele not in dissimilar_list:\n                dissimilar_list.append(tup2_ele)\n    return dissimilar_list\n",
        "test": "assert     (find_dissimilar(test_tup1, test_tup2) == expected_output)",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for el in test_tuple:\n        if even_fnc(el):\n            result.append(el)\n    return tuple(result)\n",
        "test": "assert ",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Your code here\n    b,s = str(b),str(s)\n    if len(b)!=len(s):\n        return None\n    if len(b)==0:\n        return 0\n    l = len(b)\n    if l==1:\n        return s\n    elif l==2:\n        return 2*l+2*(int(b[0])+int(b[1]))\n    elif l==3:\n        return 2*l+2*(int(b[0])+int(b[1])+int(b[2]))\n    elif l==4:\n        return l*(l+1)\n    else:\n        return l*(l+1)/2\n",
        "test": "assert     surface_Area(5,1) == 150",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({})",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = 0\n    a = 1\n    b = 0\n    c = 0\n    i = 0\n    while i < num:\n        n = a + b\n        b = a\n        a = n\n        i += 1\n    return n\n",
        "test": "assert     catalan_number(1)     == 1",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    # pattern = re.compile('\\w*ly$')\n    # if re.search(pattern, text):\n    #     return True\n    # else:\n    #     return False\n    #\n    # print(re.search(pattern,text))\n    \n    text = re.sub('\\s','',text)\n    pattern = re.compile('ly$')\n    # print(text)\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n",
        "test": "assert     find_adverbs('the bear in the bar-n') == ['in', 'in'], '''Expected ['in', 'in'], got {}'''.format(find_adverbs('the bear in the bar-n'))",
        "num_ids": 2502,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    minheap = []\n    for i in range(n):\n        heapq.heappush(minheap,items[i])\n    for i in range(n,len(items)):\n        if items[i] > minheap[0]:\n            heapq.heappop(minheap)\n            heapq.heappush(minheap,items[i])\n    return minheap\ndef least_expensive_items(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    maxheap = []\n    for i in range(n):\n        heapq.heappush(maxheap,items[i])\n    for i in range(n,len(items)):\n        if items[i] < maxheap[0]:\n            heapq.heappop(maxheap)\n            heapq.heappush(maxheap,items[i])\n    return maxheap\n",
        "test": "assert     [1,2,3,4,5] == expensive_items([1,2,3,4,5],5)",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    else:\n        return l[n-1:len(l)] + l[:n-1]\n",
        "test": "assert     split_Arr([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     (list_tuple([]) == ())",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([1, -1, -5, 3]) == 8",
        "num_ids": 289,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a >= b:\n        return []\n",
        "test": "assert     perfect_squares(0, 0) == []",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = cmath.polar(complex(x,y))\n    return a[0], a[1]\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a = complex(x,y)\n    return cmath.polar(a)\ndef polar_to_cartesian(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = cmath.rect(r,theta)\n    return a.real, a.imag\ndef cartesian_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a = complex(x,y)\n    return cmath.polar(a)\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points (defined by\n    polar coordinates).\n    '''\n    r1, theta1 = polar_rect(x1,y1)\n    r2, theta2 = polar_rect(x2,y2)\n    return cmath.rect(r1, theta1 - theta2).real\ndef is_collinear(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to determine whether three points are collinear or not.\n    '''\n    return abs(distance(x1,y1,x2,y2) - distance(x1,y1,x3,y3)) < 0.001\ndef is_right(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is on the right side of a\n    line or not.\n    '''\n    return x2 > x1 and y2 > y1\ndef is_left(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is on the left side of a\n    line or not.\n    '''\n    return x2 < x1 and y2 > y1\ndef is_above(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is above a line or not.\n    '''\n    return x2 > x1 and y2 < y1\ndef is_below(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is below a line or not.\n    '''\n    return x2 < x1 and y2 < y1\ndef is_right_of(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is on the right of a line\n    or not.\n    '''\n    return x2 > x1 and y2 > y1\ndef is_left_of(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is on the left of a line or\n    not.\n    '''\n    return x2 < x1 and y2 > y1\ndef is_above_of(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is on the above of a line\n    or not.\n    '''\n    return x2 > x1 and y2 < y1\ndef is_below_of(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is on the below of a line\n    or not.\n    '''\n    return x2 < x1 and y2 < y1\ndef point_in_box(x,y,xmin,ymin,xmax,ymax):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    box or not.\n    '''\n    if xmin < x < xmax and ymin < y < ymax:\n        return True\n    return False\ndef point_in_circle(x,y,x0,y0,r):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    circle or not.\n    '''\n    if distance(x0,y0,x,y) <= r:\n        return True\n    return False\ndef point_in_rect(x,y,x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    rectangle or not.\n    '''\n    if point_in_box(x,y,x1,y1,x2,y2):\n        return True\n    return False\ndef point_in_triangle(x,y,x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    triangle or not.\n    '''\n    a = distance(x1,y1,x2,y2)\n    b = distance(x2,y2,x3,y3)\n    c = distance(x1,y1,x3,y3)\n    if a + b < c or c + a < b or is_collinear(x1,y1,x2,y2,x3,y3):\n        return False\n    return True\ndef point_in_poly(x,y,x1,y1,x2,y2,x3,y3,x4,y4,x5,y5):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    polygon or not.\n    '''\n    a = is_left(x1,y1,x2,y2)\n    b = is_left(x2,y2,x3,y3)\n    c = is_left(x3,y3,x4,y4)\n    d = is_left(x4,y4,x5,y5)\n    e = is_left(x5,y5,x1,y1)\n    f = is_left(x1,y1,x5,y5)\n    if a and b and c and d and e and f:\n        return True\n    return False\ndef point_in_triangle_2(x,y,x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    triangle or not.\n    '''\n    a = is_right(x1,y1,x2,y2)\n    b = is_right(x2,y2,x3,y3)\n    c = is_right(x1,y1,x3,y3)\n    if a and b and c:\n        return True\n    return False\ndef point_in_triangle_3(x,y,x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    triangle or not.\n    '''\n    a = is_above(x1,y1,x2,y2)\n    b = is_above(x2,y2,x3,y3)\n    c = is_above(x3,y3,x1,y1)\n    if a and b and c:\n        return True\n    return False\ndef point_in_triangle_4(x,y,x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    triangle or not.\n    '''\n    a = is_below(x1,y1,x2,y2)\n    b = is_below(x2,y2,x3,y3)\n    c = is_below(x3,y3,x1,y1)\n    if a and b and c:\n        return True\n    return False\ndef point_in_circle_1(x,y,x0,y0,r):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    circle or not.\n    '''\n    if distance(x0,y0,x,y) <= r:\n        return True\n    return False\ndef point_in",
        "test": "assert ",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "test": "assert     (swap_List([2]) == [2]), \"Error\"",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(min(k,n-k)):\n        res = res * (n-i)\n        res = res // (i+1)\n    return res\n",
        "test": "assert     binomial_Coeff(5,3) == 10, \"binomial_Coeff is not correct\"",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    res = re.sub(r'\\.0+$','',ip)\n    return res\n",
        "test": "assert     removezero_ip('1.2.3.4') == '1.2.3.4'",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = (list1[0] - list1[1])\n    return diff\n",
        "test": "assert     diff_even_odd([2, 4, 6, 8]) == -2",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i,j = 0,0\n    count = 0\n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            elif str2[j] == '0':\n                j += 1\n            count += 1\n        i += 1\n        j += 1\n    return count\n",
        "test": "assert     min_Swaps('0001100', '00010101') == 2",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sum_of_size = 0\n    for tuple_value in tuple_list:\n        sum_of_size += sys.getsizeof(tuple_value)\n    return sum_of_size\n",
        "test": "assert     tuple_size((1,2,3,4,5,6)) == 6",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    assert k >= 1, \"K should be at least 1\"\n    if not arr1:\n        return arr2[k-1]\n    if not arr2:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if arr1[0] < arr2[0]:\n        return find_kth(arr1[1:], arr2, k)\n    else:\n        return find_kth(arr1, arr2[1:], k-1)\n",
        "test": "assert     find_kth([1,2,3,4], [4,5,6], 2) == 4",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit = []\n    n = number\n    length = len(str(number))\n    for i in range(length):\n        digit.append(n % 10)\n        n = n / 10\n    total = 0\n    for i in digit:\n        total = total + i ** length\n    if total == number:\n        return True\n    else:\n        return False\n",
        "test": "assert     armstrong_number(12) == False",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    num = 1\n    while num <= number:\n        total += num\n        num += 1\n    return total, total/number\n",
        "test": "assert     sum_average(1) == (1,1)",
        "num_ids": 266,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n == 1 : \n        return False \n    for i in range(2, n) : \n        if n % i == 0 : \n            return False \n    return True\n",
        "test": "assert     is_Even(10) == True",
        "num_ids": 244,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    hash = {}\n    for char in str1:\n        if char not in hash:\n            hash[char] = 1\n        else:\n            return char\n    return None\n",
        "test": "assert     first_repeated_char('kamal') == 'a'",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(n) if sum(list(map(lambda x: int(x) ** 2, str(i)))) == i]\n",
        "test": "assert get_ludic(3) == [1,2,3,4,6,9,12]",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #Turn the string into a list of strings\n    lst = s.split(' ')\n    #reverse the list\n    lst.reverse()\n    #Join the reversed list with spaces\n    s =''.join(lst)\n    return s\n",
        "test": "assert     reverse_words('   ') == '', 'Failed'",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n    return True\n",
        "test": "assert     prime_num(1) == False, \"1 is not a prime number\"",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "test": "assert     radian_degree(degree = 90) == 1.5707963267948966, \"90 degree is 1.5707963267948966\"",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = pattern.finditer(text)\n    if not matches:\n        return\n    # Get the substring, a start index, and end index\n    match = next(matches)\n    for m in matches:\n        if m.start() > match.start():\n            match = m\n    return match\n",
        "test": "assert     re.findall(r'\\s','') == [], 'Do not remove the spaces'",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a,b = 0,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return list1\n    \n    first = list1[0]\n    list2 = [first]\n    for i in range(1,len(list1)):\n        if i!= L:\n            list2.append(list1[i])\n    return list2\n",
        "test": "assert     remove_kth_element([1,2,3,4,5], 2) == [1,2,4,5]",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_num = 0\n    for row in test_list:\n        if len(row) >= N:\n            max_num = max(row[N-1], max_num)\n    return max_num\n",
        "test": "assert     max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 2) == 8",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[], []]\n    for l in lst:\n        result[0].append(l[0])\n        result[1].append(l[1])\n    return result\n",
        "test": "assert     merge([ [1,2], [3,4], [5,6], [7,8], [9,10] ]) == [[1,3,5,7,9], [2,4,6,8,10]]",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    cum_list = []\n    cum_list.append(test_list[0])\n    for i in range(1, len(test_list)):\n        cum_list.append(test_list[i] + cum_list[i-1])\n    return cum_list\n",
        "test": "assert     cummulative_sum([(3,5), (7,9), (10, 12)]) == [0,7,14]",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(i)/len(i)) for i in nums]\n",
        "test": "assert     average_tuple([(1, 2), (3, 4), (5, 6)]) == [(1+3+5)/3, (2+4)/2]",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    return result\n",
        "test": "assert     (0, 1) == tuple_modulo((0, 1), (1, 2))",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if steps < 0:\n        return float('inf')\n    elif steps == 0:\n        return 1\n    return min(min_Jumps(steps-1, d-1), min_Jumps(steps-2, d-2))\n",
        "test": "assert     min_Jumps(3, 3) == 0, \"Failed: min_Jumps(3, 3) = 0\"",
        "num_ids": 2353,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n",
        "test": "assert     div_list([1,2,3],[4,5,6]) == [1/4, 2/5, 3/6]",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return ''\n    stack = []\n    for i in test_str:\n        if i.isdigit():\n            stack.append(i)\n    for i in stack:\n        test_str = test_str.replace(i,'')\n    return test_str+''.join(stack)\n",
        "test": "assert     '8832123123123' == move_num('123123123123')",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 1:\n        return 1\n    \n    max_subset = 0\n    for i in range(len(a)):\n        subset = a[i]\n        if subset > max_subset:\n            max_subset = subset\n            break\n        else:\n            a.remove(subset)\n            max_subset += largest_subset(a)\n            a.append(subset)\n",
        "test": "assert     largest_subset([2,4,6]) == 0",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    return (arr1[n // 2] + arr2[n // 2]) / 2\n",
        "test": "assert     get_median([1,2], [3, 4], 2) == 3.0",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n",
        "test": "assert     nth_nums([1, 2, 3], 2) == [1, 4, 9]",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert     is_upper('hello world') == False, 'not correct'",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert     [1,2,3] == swap_List([3,2,1])",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # use (2 * pi * r^2) / 3\n    return (2 * math.pi * r**2) / 3\n    \ndef generate_numbers(start, end) :  \n    '''\n    Write a python function to generate a list of numbers from start to end. \n    '''\n    return [x for x in range(start, end)]\n    \ndef is_prime(n) :  \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    # return a boolean value \n    return True if n == 2 or n == 3 or n == 5 or n == 7 else False\n    \ndef count_primes(numbers) :  \n    '''\n    Write a python function to count the number of prime numbers from the list of numbers.\n    '''\n    # return a list of count of prime numbers\n    return [x for x in numbers if is_prime(x)]\n    \ndef is_even(n) :  \n    '''\n    Write a python function to check whether a given number is even or odd.\n    '''\n    # return a boolean value \n    return True if n%2 == 0 else False\n    \ndef find_largest_divisor(n, divisors) :  \n    '''\n    Write a python function to find the largest divisor of a given number n.\n    '''\n    # return the largest divisor of n\n    return max(divisors)\n    \ndef reverse_numbers(numbers) :  \n    '''\n    Write a python function to reverse the numbers in a list.\n    '''\n    # return a list of reversed numbers\n    return numbers[::-1]\n    \ndef get_square_digit_count(n) :  \n    '''\n    Write a python function to count the number of square digits in a given number n.\n    '''\n    # use the formula to count the number of square digits\n    return int(math.log10(n) / math.log10(2)) + 1\n    \ndef get_tuple_digit_count(t) :  \n    '''\n    Write a python function to count the number of tuple digits in a given tuple t.\n    '''\n    # use the formula to count the number of tuple digits\n    return int(math.log10(t[0]) / math.log10(10)) + 1\n    \ndef get_reverse_tuple_digit_count(t) :  \n    '''\n    Write a python function to count the number of reverse tuple digits in a given tuple t.\n    '''\n    # use the formula to count the number of tuple digits\n    return int(math.log10(t[1]) / math.log10(10)) + 1\n    \ndef get_permutations(n) :  \n    '''\n    Write a python function to get the permutations of the list of numbers.\n    '''\n    # return a list of permutations\n    return list(permutations(n))\n    \ndef get_nth_permutation(n, p) :  \n    '''\n    Write a python function to get the nth permutation of the list of numbers.\n    '''\n    # return the nth permutation of the list of numbers\n    return ''.join(p[n-1])\n    \ndef get_power_digit_count(n, p) :  \n    '''\n    Write a python function to count the number of power digit in the nth permutation of the list of numbers.\n    '''\n    # use the formula to count the number of power digit\n    return int(math.log10(n) / math.log10(p)) + 1\n    \ndef is_power_digit(n, p) :  \n    '''\n    Write a python function to check whether the nth power digit is a power digit of the nth permutation of the list of numbers.\n    '''\n    # return a boolean value\n    return True if get_power_digit_count(n, p) == get_tuple_digit_count(p) else False\n    \ndef get_largest_power_digit(n, p) :  \n    '''\n    Write a python function to get the largest power digit of the nth permutation of the list of numbers.\n    '''\n    # return the largest power digit\n    return max(p[get_tuple_digit_count(p) - 1])\n    \ndef get_smallest_power_digit(n, p) :  \n    '''\n    Write a python function to get the smallest power digit of the nth permutation of the list of numbers.\n    '''\n    # return the smallest power digit\n    return min(p[get_tuple_digit_count(p) - 1])\n    \ndef get_power_digit_list(n, p) :  \n    '''\n    Write a python function to get the list of power digits of the nth permutation of the list of numbers.\n    '''\n    # return the list of power digits\n    return list(p[get_tuple_digit_count(p) - 1])\n    \ndef get_reverse_power_digit_list(n, p) :  \n    '''\n    Write a python function to get the list of reverse power digits of the nth permutation of the list of numbers.\n    '''\n    # use the formula to get the list of reverse power digits\n    return list(p[get_tuple_digit_count(p) - 1])[::-1]\n    \ndef get_nth_power_digit(n, p) :  \n    '''\n    Write a python function to get the nth power digit of the nth permutation of the list of numbers.\n    '''\n    # return the nth power digit\n    return p[get_power_digit_count(n, p) - 1]\n    \ndef get_reverse_power_digit(n, p) :  \n    '''\n    Write a python function to get the reverse power digit of the nth permutation of the list of numbers.\n    '''\n    # return the reverse power digit\n    return p[get_reverse_tuple_digit_count(p) - 1][::-1]\n    \ndef is_power_digit_list_reverse(l) :  \n    '''\n    Write a python function to check whether the list of reverse power digits is a power digit list or not.\n    '''\n    # return a boolean value\n    return True if len(l) == len(set(l)) else False\n    \ndef get_power_digit_list_reverse(l) :  \n    '''\n    Write a python function to get the list of reverse power digits of the list of numbers.\n    '''\n    # return the list of reverse power digits\n    return [x for x in l[::-1]]\n    \ndef get_nth_power_digit_list_reverse(n, l) :  \n    '''\n    Write a python function to get the list of nth reverse power digits of the list of numbers.\n    '''\n    # use the formula to get the list of nth reverse power digits\n    return [l[get_power_digit_count(n, l) - 1][::-1]]\n    \ndef get_largest_power_digit_list_reverse(n, l) :  \n    '''\n    Write a python function to get the list of largest power digits of the list of numbers.\n    '''\n    # return the list of largest power digits\n    return [max(l[get_power_digit_count(n, l) - 1])]\n    \ndef get_smallest_power_digit_list_reverse(n, l) :  \n    '''\n    Write a python function to get the list of smallest power digits of the list of numbers.\n    '''\n    # return the list of smallest power digits\n    return [min(l[get_power_digit_count(n, l) - 1])]\n    \ndef get_power_digit_count_reverse(n, l) :  \n    '''\n    Write a python function to count the number of power digit of the nth permutation of the list of numbers.\n    '''\n    # use the formula to count the number of power digit\n    return get_power_digit_count(n, l[::-1])\n    \ndef get_nth_power_digit_list_reverse(n, l) :  \n    '''\n    Write a python function to get the list of nth power digits of the list of numbers.\n    '''\n    # return the list of nth power digits",
        "test": "assert     triangle_area(0) == 0",
        "num_ids": 187,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return None\n    mid=(start+end)//2\n    if array[mid]==mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid]==mid+1:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return array[mid]+1\n",
        "test": "assert     find_First_Missing([-1,0,2]) == 1",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces('Mr John Smith') == 'Mr%20John%20Smith'",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenlist = []\n    oddlist = []\n    for element in list:\n        if element % 2 == 0:\n            evenlist.append(element)\n        else:\n            oddlist.append(element)\n    print(\"Even numbers: \", evenlist)\n    print(\"Odd numbers: \", oddlist)\n",
        "test": "assert     [x for x in range(10) if x%2==0]     == [0, 2, 4, 6, 8]",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # your code goes here\n    \n    a, b = ele\n    for i in [-1, 0, 1]:\n        for j in [-1, 0, 1]:\n            if (i, j) == (0, 0):\n                continue\n            else:\n                sub.append((a + i, b + j))\n    return sub\n    \n",
        "test": "assert ",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\")\n    #return text.replace(\"_\",\" \")\n",
        "test": "assert     replace_spaces('1 2 3')         == '1_2_3'",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #return list(filter(lambda x: x!=0,num_list))+[0]*(len(num_list)-len(list(filter(lambda x: x!=0,num_list))))\n    return [i for i in num_list if i!=0]+[0]*(len(num_list)-len(list(filter(lambda x: x!=0,num_list))))\n",
        "test": "assert     move_zero([1,2,3,4,0,0,0,0,0]) == [1,2,3,4,0,0,0,0,0]",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    m=0\n    for i in range(n):\n        for j in range(i+1,n):\n            m=m^arr[i]^arr[j]\n    return m\n",
        "test": "assert     pair_xor_Sum([1,2,3,4,5],0) == 0",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = []\n    for val in iterable:\n        hq.heappush(l, val)\n    return [hq.heappop(l) for i in xrange(len(l))]\n",
        "test": "assert ",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount: \n        return False\n    else: \n        return True\n",
        "test": "assert     noprofit_noloss(9.0,5.0)    == False",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<=3:\n        wc=35.74+0.6215*t+(-35.75*v**0.16)+0.4275*t*v**0.16\n        return math.ceil(wc)\n    else:\n        wc=35.74+0.6215*t+(-35.75*v**0.16)+0.4275*t*v**0.16\n        return math.floor(wc)\n",
        "test": "assert     wind_chill(120,15) == -1.0",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import random\n    return sum(len(name) for name in sample_names if name[0].isupper() == False)\n",
        "test": "assert     sample_nam(['a', 'b', 'a', 'C', 'd', 'a']) == 5",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\(.*?\\)', '', items)\n",
        "test": "assert     remove_parenthesis('()()()') == ''",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # we can see that the first nonagonal number is 1. \n    # in other words, 1 is the square of 1\n    # we can see that the second nonagonal number is 1+1 = 2\n    # in other words, 1+1 is the square of 2\n    # we can see that the third nonagonal number is 2+1 = 3\n    # in other words, 2+1 is the square of 3\n    # we can see that the fourth nonagonal number is 3+1 = 4\n    # and so on. \n    return ((n*(n+1))/2)**2 == n*(n+1)\n",
        "test": "assert     is_nonagonal(5)     == False",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]','',text)\n    for word in text.split():\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    return False\n",
        "test": "assert     text_match_wordz_middle(text=\"aaa\") == False",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[-k::]\n",
        "test": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5], \"reverse_Array_Upto_K() fails for the given example\"",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n",
        "test": "assert     add_dict_to_tuple(tuple(), {}) == tuple()",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost)==0:\n        return 0\n    dp = [[0 for i in range(len(cost[0]))] for j in range(len(cost))]\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i==0 and j==0:\n                dp[i][j] = cost[i][j]\n            elif i==0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j==0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j],dp[i][j-1]) + cost[i][j]\n    return dp[len(cost)-1][len(cost[0])-1]/float(len(cost))\n",
        "test": "assert     maxAverageOfPath([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60]]) == 40.5",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key,value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[key] = value\n    return filtered_students\n",
        "test": "assert     filter_data( {'Jay': (1.7, 56.0), 'Jill': (1.8, 55.0), 'Xray': (1.7, 56.0), 'Jark': (1.8, 56.0)}, 1.8, 58.0) == {'Jill': (1.8, 55.0)}",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # the following only works for even length lists\n    if len(nums1) % 2 == 1:\n        return 0\n    else:\n        for x in xrange(len(nums1) / 2):\n            if nums1[x]!= nums2[x]:\n                return x\n",
        "test": "assert     count_same_pair([1,1,1], [1,2,3]) == 0",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return int(sum([(int(i) ** power) for i in str(base)]))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     power_base_sum(4, 1) == 4",
        "num_ids": 2339,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\\\"(.*?)\\\"',text1)\n    print result\n    \nif __name__ == '__main__':\n    text = \"The best way to earn money is to practice high-performance trading. If you have never done that, you will never make money. Some people are even more dangerous and make a mess of their money than they can bear.\"\n    extract_quotation(text)",
        "test": "assert     extract_quotation(\"Hello there's a \\\"post\\\"\") == 'post'",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    def multiply_elements(test_tup):\n        if len(test_tup) <= 1:\n            return test_tup\n        else:\n            return test_tup[0] * multiply_elements(test_tup[1:])\n    return multiply_elements(test_tup)\n",
        "test": "assert     multiply_elements((3, 2, 1)) == (6, 4, 3), \"FAILED: Test 3\"",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a_i + b_i for a_i, b_i in zip(lst1, lst2)]\n    \ndef mul_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    return [a_i * b_i for a_i, b_i in zip(lst1, lst2)]\n",
        "test": "assert     sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 395,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            del nums[i]\n            i -= 1\n        i += 1\n    return nums\n",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface=math.pi*math.pow(r,2)+math.pi*math.pow(r,2)*math.pow(h,2)/2\n    return surface\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    surface=math.pi*math.pow(r,2)\n    return surface\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    surface=math.pi*math.pow(r,2)+math.pi*math.pow(r,2)*math.pow(h,2)/2\n    return surface\ndef lateralsurface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given radius r and the height h.\n    '''\n    surface=math.pi*math.pow(r,2)*2*math.atan(h/r)\n    return surface\ndef lateralsurface_pyramid(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a pyramid given the base length, height, and apex length.\n    '''\n    surface=math.pi*math.pow(a,2)/2+math.pi*math.pow(b,2)/2+math.pi*math.pow(c,2)/2\n    return surface\ndef lateralsurface_trigon(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the base length, height, and apex length.\n    '''\n    surface=math.sqrt(math.pow(b,2)+math.pow(c,2)-math.pow(a,2))\n    return surface\ndef lateralsurface_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the width and the height.\n    '''\n    surface=a*b\n    return surface\ndef lateralsurface_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the base length, height, and apex length.\n    '''\n    surface=a*d/2+b*c/2\n    return surface\ndef lateralsurface_triangle(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the base length, height, and apex length.\n    '''\n    surface=math.sqrt(math.pow(b,2)+math.pow(c,2)-math.pow(a,2))\n    return surface\ndef lateralsurface_quad(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a quadrilateral given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_ellipse(a,b):\n    '''\n    Write a function to find the lateral surface area of an ellipse given the base length and the height.\n    '''\n    surface=math.pi*math.pow(a,2)*math.pow(b,2)/4\n    return surface\ndef lateralsurface_polygon(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a polygon given the base length, height, and apex length.\n    '''\n    surface=a*d\n    return surface\ndef lateralsurface_mesh(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a mesh given the base length, height, and apex length.\n    '''\n    surface=a*d*b/2\n    return surface\ndef lateralsurface_trisurface(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a trisurface given the base length, height, and apex length.\n    '''\n    surface=a*d*b/2\n    return surface\ndef lateralsurface_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_hexahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a hexahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_octahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a octahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_icosahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a icosahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_cono(r,h):\n    '''\n    Write a function to find the lateral surface area of a cono given the radius and the height.\n    '''\n    surface=math.pi*math.pow(r,2)+math.pi*math.pow(r,2)*math.pow(h,2)/2\n    return surface\ndef lateralsurface_hexa(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a hexahedron given the base length, height, and apex length.\n    '''\n    surface=a*d\n    return surface\ndef lateralsurface_octa(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a octahedron given the base length, height, and apex length.\n    '''\n    surface=a*d\n    return surface\ndef lateralsurface_icosa(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a icosahedron given the base length, height, and apex length.\n    '''\n    surface=a*d\n    return surface\ndef lateralsurface_tetra(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_trisurf(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a trisurface given the base length, height, and apex length.\n    '''\n    surface=a*b\n    return surface\ndef lateralsurface_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_hexahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a hexahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_octahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a octahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_icosaedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a icosahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c",
        "test": "assert     lateralsurface_cone(10,5)    == math.pi * math.pow(4,0.5) * math.pow(4,0.5)",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new = []\n    for x in text:\n        if (x =='') or (x == ',') or (x == '.'):\n            new.append(':')\n        else:\n            new.append(x)\n    return ''.join(new)\n",
        "test": "assert     replace_specialchar(',') == ':', 'failed on \",\"'",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if A[0] == x:\n        return 0\n    if A[len(A)-1] == x:\n        return len(A)-1\n    l, r = 0, len(A)-1\n    while l <= r:\n        m = l + (r-l)//2\n        if A[m] == x:\n            return m\n        elif A[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1,2,3,4,5,6], 7) == -1",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if arr == None:\n        return None\n",
        "test": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == [120, 60, 40, 30, 24, 60]",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n & 0x55555555) + ((n & 0xAAAAAAAA) >> 1)\n    return n & 0x0FFFFFFF\n",
        "test": "assert     (set_middle_bits(0) == 0)",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n",
        "test": "assert     left_insertion([1, 2, 3], 0) == 0",
        "num_ids": 354,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return True if re.match(regex,string)!=None else False\n",
        "test": "assert     check_str('eed') == True",
        "num_ids": 2190,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return n * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(50) == 5987150",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = \"\"\n    k = 1\n    while len(num)<n:\n        num = str(k*(k+1)/2)\n        k+=1\n    return num.index(num[n-1])\n    \ndef isPentagonal(n):\n    '''\n    Write a python function to check if a number is pentagonal number. https://www.geeksforgeeks.org/pentagonal-number/\n    '''\n    sq = (1+math.sqrt(1+24*n))/6\n    if sq == int(sq):\n        return True\n    else:\n        return False\n    \ndef isHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal number. https://www.geeksforgeeks.org/hexagonal-number/\n    '''\n    sq = (1+math.sqrt(1+8*n))/4\n    if sq == int(sq):\n        return True\n    else:\n        return False\n",
        "test": "assert     find_Index(1) == 0",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n",
        "test": "assert     tuple_to_dict((1, 2, 3, 4)) == {1:2, 3:4}",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n",
        "test": "assert     all_Characters_Same('abcd') == False",
        "num_ids": 259,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = ((3**0.5) / 4) * (side ** 2)\n    return area\n",
        "test": "assert     area_tetrahedron(12) == area_tetrahedron(12.0)",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1,2,3,4,5], 2) == [3,4,5,1,2]",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
        "test": "assert     check_none((\"a\", None, 0, \"a\")) == True",
        "num_ids": 262,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum) if all(num % int(digit) == 0 for digit in str(num))]\n",
        "test": "assert     divisible_by_digits
        "num_ids": 1817,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return math.pi*r*r*a/360\n",
        "test": "assert     sector_area(2.5,380) == None",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #table = [[[0 for k in range(len(Z)+1)] for j in range(len(Y)+1)] for i in range(len(X)+1)]\n    table = [[[None for k in range(len(Z)+1)] for j in range(len(Y)+1)] for i in range(len(X)+1)]\n    for i in range(len(X)+1):\n        for j in range(len(Y)+1):\n            for k in range(len(Z)+1):\n                if i==0 or j==0 or k==0:\n                    table[i][j][k] = 0\n                elif X[i-1]==Y[j-1]==Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n",
        "test": "assert     lcs_of_three('this is a test', 'w3r1s2', 't3s s') == 'is a test'",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub('(?<=[a-zA-Z0-9])([A-Z]+)', r'\\1 ', str1)\n    return result\n",
        "test": "assert     capital_words_spaces('Hi') == 'Hi'",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: int(x))\n",
        "test": "assert     sort_numeric_strings([3, 1, 8, 7, 9, 5, 0, 6]) == [0, 1, 3, 5, 6, 7, 8, 9]",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "test": "assert         [10, 20, 30] == add_tuple([10, 20, 30], (40, 50, 60, 70))",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent = i\n    while parent:\n        child = parent * 2 + 1\n        if child < len(arr) and arr[child] < arr[child+1]:\n            child += 1\n        if arr[parent] >= arr[child]:\n            return False\n        parent = child\n    return True\n",
        "test": "assert     check_min_heap_helper([4,1,3], 0) == True, 'Root is max heap'",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n==0): return 0\n    elif (n==1): return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key=lambda x:x[1])\n    return test_list[:K]\n",
        "test": "assert     min_k(test_list3, K) == [('a', 1), ('b', 1), ('c', 1), ('d', 1), ('e', 1), ('f', 1), ('g', 1), ('h', 1), ('i', 1), ('j', 1), ('k', 1), ('l', 1), ('m', 1), ('n', 1)]",
        "num_ids": 1179,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    def common_elements(l1, l2, l3):\n        return [e1 for e1 in l1 if e1 in l2 and e1 in l3]\n    return common_elements(l1, l2, l3)\n",
        "test": "assert     extract_index_list([1,2,3], [2,4,6], [3,5,7]) == []",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    second_smallest = None\n    for num in numbers:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    return second_smallest\n",
        "test": "assert second_smallest([0,2,3,4]) == 2",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # TODO\n    return False\n",
        "test": "assert     text_match_zero_one('ababbbbbaaababaabaababaa') == False",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (i < j and test_list[i] == test_list[j][::-1]):\n                count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs([\"h\",\"e\",\"e\",\"h\",\"h\"]) == 4",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Hint: Use a dictionary to store the counts of the values\n    list1_dict = {}\n    for i in list1:\n        list1_dict[tuple(i)] = list1_dict.get(tuple(i), 0) + 1\n    return list1_dict\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    if re.match(\"^-?\\d*\\.?\\d*$\", num)!= None:\n        return True\n    return False\n",
        "test": "assert     is_decimal('1.0')",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "test": "assert     unique_Element([1,1,2,3,3]) == False",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if not isinstance(monthnum3, int):\n        raise ValueError('Month number should be an integer')\n    if monthnum3 <= 0 or monthnum3 > 12:\n        raise ValueError('Month number should be between 1 and 12')\n    if not (monthnum3 == 30 or monthnum3 == 31):\n        return False\n    else:\n        return True\n",
        "test": "assert     check_monthnumber_number(1)    == False, \"Failed\"",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    minimum = arr[1] - arr[0]\n    for i in range(n):\n        if i == 0:\n            continue\n        minimum = min(minimum,arr[i]-arr[i-1])\n    return minimum\n",
        "test": "assert     find_min_diff([1,2,3,4,5],5) == 1",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(str.count(x) for x in '0123456789')\n",
        "test": "assert     number_ctr('1') == 1",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n_prime = 1\n    n_less_then_p_prime = 0\n    n_less_then_p_prime_count = 0\n    n_prime_count = 0\n    while n_prime < n :\n        n_prime_count += 1\n        n_prime = n_prime_count + n_less_then_p_prime_count\n        n_less_then_p_prime_count += 1\n        if n_prime_count % 2 == 0:\n            n_prime_count = 0\n            n_less_then_p_prime += 1\n    return n_less_then_p_prime\ndef prime_factorize(n):\n    '''\n    We need to know how many prime factors each number has. \n    Let us say number n is prime then n is dividible by 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,\n    so the function will return list with number of prime factors of each number\n    '''\n    factor = 2\n    factors = []\n    while n > 1:\n        if n % factor == 0:\n            factors.append(factor)\n            n = n / factor\n            factor = 2\n        else:\n            factor += 1\n    return factors\ndef first_prime_factors(n):\n    '''\n    We need to know the first prime factor of each number. \n    let us say number n is prime then n is dividible by 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,\n    so the function will return list with first prime factors of each number\n    '''\n    prime_factors = []\n    n_prime = 2\n    while n_prime < n:\n        if n % n_prime == 0:\n            prime_factors.append(n_prime)\n            n = n / n_prime\n        else:\n            n_prime += 1\n    return prime_factors\ndef second_prime_factors(n):\n    '''\n    We need to know the second prime factor of each number. \n    let us say number n is prime then n is dividible by 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,\n    so the function will return list with second prime factors of each number\n    '''\n    prime_factors = []\n    n_prime = 3\n    while n_prime < n:\n        if n % n_prime == 0:\n            prime_factors.append(n_prime)\n            n = n / n_prime\n        else:\n            n_prime += 2\n    return prime_factors\ndef third_prime_factors(n):\n    '''\n    We need to know the third prime factor of each number. \n    let us say number n is prime then n is dividible by 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,\n    so the function will return list with third prime factors of each number\n    '''\n    prime_factors = []\n    n_prime = 5\n    while n_prime < n:\n        if n % n_prime == 0:\n            prime_factors.append(n_prime)\n            n = n / n_prime\n        else:\n            n_prime += 4\n    return prime_factors\ndef is_perfect(n):\n    '''\n    Perfect number is a number which sum of divisors equals to the number. \n    For example if number n is 12 then the divisors are 1,2,3,4,6 and hence the function will return true\n    '''\n    sum_divisors = 0\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n            sum_divisors += i\n    if sum_divisors == n:\n        return True\n    else:\n        return False\ndef is_abundant(n):\n    '''\n    Abundant number is a number which sum of divisors is more than number. \n    For example if number n is 12 then the divisors are 1,2,3,4,6 and hence the function will return true\n    '''\n    sum_divisors = 0\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n            sum_divisors += i\n    if sum_divisors > n:\n        return True\n    else:\n        return False\ndef is_abundant_summable(n):\n    '''\n    Write a function to check if number is abundant and summable or not.\n    If the number is abundant then the function will return True and summable will be false\n    '''\n    sum_divisors = 0\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n            sum_divisors += i\n    if sum_divisors > n:\n        return True\n    else:\n        return False\ndef get_all_abundant_numbers(n):\n    '''\n    Write a function to find all abundant numbers less than n.\n    '''\n    all_abundant_numbers = []\n    for i in range(1,n):\n        if is_abundant(i):\n            all_abundant_numbers.append(i)\n    return all_abundant_numbers\ndef get_all_abundant_summable_numbers(n):\n    '''\n    Write a function to find all abundant numbers less than n.\n    '''\n    all_abundant_numbers = []\n    for i in range(1,n):\n        if is_abundant_summable(i):\n            all_abundant_numbers.append(i)\n    return all_abundant_numbers\ndef is_amicable(n):\n    '''\n    Write a function to check if two numbers are amicable or not.\n    '''\n    sum_of_divisors = 0\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n            sum_of_divisors += i\n    if sum_of_divisors == n:\n        return True\n    else:\n        return False\ndef is_amicable_sum(n):\n    '''\n    Write a function to check if two numbers are amicable or not.\n    '''\n    sum_of_divisors = 0\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n            sum_of_divisors += i\n    if sum_of_divisors == n:\n        return True\n    else:\n        return False\ndef get_amicable_numbers(n):\n    '''\n    Write a function to find amicable numbers.\n    '''\n    amicable_numbers = []\n    for i in range(1,n):\n        if is_amicable_sum(i):\n            amicable_numbers.append(i)\n    return amicable_numbers\ndef get_abundant_numbers(n):\n    '''\n    Write a function to find all abundant numbers less than n.\n    '''\n    abundant_numbers = []\n    for i in range(1,n):\n        if is_abundant(i):\n            abundant_numbers.append(i)\n    return abundant_numbers\ndef get_all_perfect_numbers(n):\n    '''\n    Write a function to find all perfect numbers less than n.\n    '''\n    perfect_numbers = []\n    for i in range(1,n):\n        if is_perfect(i):\n            perfect_numbers.append(i)",
        "test": "assert     is_polite( 3) == True",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[x], l1[x+1]) for x in range(len(l1)-1)]\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 1453,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n",
        "test": "assert     get_pairs_count([1, 2, 3, 4, 5], 6) == 2",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    li_dif.sort()\n    return li_dif\n",
        "test": "assert     Diff([1,2,3],[1,2,3]) == []",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 0 : \n        return 'enter a positive number'\n",
        "test": "assert     ( odd_num_sum(4) == 13 )",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for token in exp.split():\n        if token in '{[(':\n            stack.append(token)\n        elif token == '}':\n            if len(stack) == 0 or stack.pop()!= '{':\n                return False\n        elif token == ']':\n            if len(stack) == 0 or stack.pop()!= '[':\n                return False\n        elif token == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n",
        "test": "assert     check_expression(\"( (a + b) )\")",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    s = test_str.split(' ')\n    return''.join([s[i] for i in range(len(s)) if len(s[i])!=K])\n",
        "test": "assert     remove_length('foobar', 1) == 'foobar'",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while True:\n        start=text.find(pattern,index)\n        if start!=-1:\n            index=start+1\n            yield (start,start+len(pattern))\n        else:\n            break\n",
        "test": "assert     occurance_substring('haha is a test for substring','is')",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not nums[i]%2:\n            return False\n    return True\n",
        "test": "assert     not odd_position([1,2,3,4,5,6,7,8,9])",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i, j in enumerate(test_str):\n        if j in vowels and i < len(test_str)-1:\n            if test_str[i+1] in vowels:\n                count += 1\n    return count\n",
        "test": "assert     count_vowels('a') == 0, 'error'",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in arr:\n        if arr.count(i)==1:\n            s = s+i\n    return s\n",
        "test": "assert find_sum([]) == 0",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #list1 = [1,2,3,4,4,4,5,6,6,7,8,8]\n    l1 = []\n    for k,g in groupby(list1):\n        l1.append(list(g))\n    print l1\n",
        "test": "assert     ( pack_consecutive_duplicates([1,1,1,2,2,3,3,3,3]) == [[1,1,1,2,2,3,3],[3,3]])",
        "num_ids": 2344,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    sublist = []\n    for l in list1:\n        if type(l) == list:\n            sublist.append(tuple(l))\n    for i in sublist:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combs = []\n    # print all_combs\n    for l in range(1,len(test_list)):\n        combs_of_sum = list(combinations(test_list,l))\n        # print combs_of_sum\n        for comb in combs_of_sum:\n            all_combs.append(comb)\n    # print all_combs\n    return all_combs\n",
        "test": "assert     find_combinations([",
        "num_ids": 1005,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            if n / i == i :\n                count += 1\n            else :\n                count += 2\n    return count\n",
        "test": "assert     count_divisors(0) == 0,     'count_divisors(0) should be 0'",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n    res = sum(arr[0::2])\n    for i in range(1, len(arr)):\n        if i % 2:\n            res += sum(arr[i::2])\n        else:\n            res -= sum(arr[i::2])\n    return res\n",
        "test": "assert     odd_length_sum([1, 2, 3]) == 3",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    R = r / 255\n    G = g / 255\n    B = b / 255\n    mx = max(R, G, B)\n    mn = min(R, G, B)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == R:\n        h = (60 * ((G - B) / df) + 360) % 360\n    elif mx == G:\n        h = (60 * ((B - R) / df) + 120) % 360\n    elif mx == B:\n        h = (60 * ((R - G) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0.0, 0.0, 0.0)",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for num in list1:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n",
        "test": "assert     mul_even_odd([1,2,3,4,5]) == [6,12]",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    import re\n    return tuple(map(int, re.findall(r'\\d+', test_str)))\n",
        "test": "assert     tuple_str_int('(1, 2, 3)') == tuple([1, 2, 3])",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a)==0 or a[-1]<x:\n        return len(a)\n    elif a[0]>x:\n        return 0\n    else:\n        # Binary search\n        left = 0\n        right = len(a)\n        while right-left>1:\n            middle = (right+left)//2\n            if a[middle]<x:\n                left = middle\n            else:\n                right = middle\n        return right\n",
        "test": "assert     right_insertion([], 1) == 0",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'a(.)b{3}', text)\n",
        "test": "assert     re.search(r'a.*?b{3}', 'aabbbbbbaaabababaaabbbbbbaaaabbbbbbaaaaabbbbbbaaaa')!= None",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # print(test_list, test_str)\n    new_tuple = tuple(test_str)\n    # print(new_tuple)\n    return new_tuple\n",
        "test": "assert         new_tuple(['a', 'b', 'c'], 'xyz') == ('x', 'y', 'z')",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     even_position([3,6,2,3]) == False",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([i for i in test_tup if not isinstance(i, tuple)])\n",
        "test": "assert     remove_nested((1, (2, 3), 4)) == (1, 4)",
        "num_ids": 470,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert     count_list([[]]) == 1",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,0,-1):\n        if arr[i] == x:\n            return i\n    return None\n",
        "test": "assert     last([],3) == None",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #text = text.replace(\" \",\"\")\n    #text = text.lower()\n    match = re.search(r'^[a-z].*b$', text)\n    return bool(match)\n",
        "test": "assert     text_starta_endb('a') == False",
        "num_ids": 288,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k,v in dict.items():\n        total += v\n    return total\n",
        "test": "assert     return_sum({\"a\":1, \"b\":2, \"c\":3}) == 6",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_odd(2) == 1",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     (_sum([1,2,3,4]) == 10)",
        "num_ids": 159,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff\n",
        "test": "assert ",
        "num_ids": 93,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\n",
        "test": "assert     remove_all_spaces('') == ''",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    if x == y!= z:\n        return 2\n    if x == z!= y:\n        return 2\n    if y == z!= x:\n        return 2\n    return 0\n",
        "test": "assert     test_three_equal(3,3,2) == 2",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count = count+1\n    return count\n",
        "test": "assert     count_rotation([]) == 0",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = math.sqrt(n)\n    return root * root == n\n",
        "test": "assert     is_perfect_square(0) == True",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product = product*num\n    if product%2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([4, 5, 6]) == True, 'WRONG'",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return 0\n    current_sum = sum(lists[0])\n    result = lists[0]\n    for l in lists[1:]:\n        if current_sum < sum(l):\n            current_sum = sum(l)\n            result = l\n    return result\n",
        "test": "assert     max_sum_list([[1,2,3,4], [4,5,6,7], [7,8,9,10]]) == [7,8,9,10]",
        "num_ids": 995,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # convert to lowercase\n    test_str = test_str.lower()\n    # convert each character to unicode\n    lst = [ord(x) for x in test_str]\n    # list of maximum uppercase run for each character\n    max_run = [1]\n    # loop through each character\n    for i in range(1, len(lst)):\n        # if character is uppercase, update max_run\n        if lst[i] >= 65 and lst[i] <= 90:\n            max_run.append(max_run[i-1] + 1)\n        # otherwise, update max_run\n        else:\n            max_run.append(1)\n    return max(max_run)\n",
        "test": "assert     max_run_uppercase('google') == 1",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n",
        "test": "assert     first_odd([]) == None",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #return K in test_tup\n    return len([1 for i in range(len(test_tup)) if test_tup[i] == K]) == len(test_tup)\n",
        "test": "assert     check_K(('a', 'b', 'c', 'd'), 1) == False",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for index in range(0, len(test_tup1)):\n        if test_tup1[index] < test_tup2[index]:\n            return False\n    return True\n",
        "test": "assert     check_smaller(('a', 'c'), ('b', 'd')) is False",
        "num_ids": 492,
        "indeed": true
    }
]