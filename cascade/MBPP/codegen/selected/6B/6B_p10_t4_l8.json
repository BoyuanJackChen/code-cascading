[
    {
        "number": 2,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # compare the first element from each list\n    if test_tup1[0] == test_tup2[0]:\n        if test_tup1[0] == test_tup2[0]:\n            return True\n        else:\n            return False\n    # compare the second element from each list\n    elif test_tup1[1] == test_tup2[1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     similar_elements([1,2,3], [4,5,6]) == False",
        "num_ids": 2068,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return False\n    if n%2==0:\n        return True\n    for x in range(3,int(math.sqrt(n))+1,2):\n        if n%x==0:\n            return True\n    return False\n",
        "test": "assert     is_not_prime(0) == True",
        "num_ids": 1096,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap,-1*num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    result = []\n    while len(heap) > 0:\n        result.append(-1*hq.heappop(heap))\n    return result\n",
        "test": "assert     [] == heap_queue_largest([],0)",
        "num_ids": 1549,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Initialize the result\n    res = False\n    if (x!= 0):\n        if ((x & (x - 1)) == 0):\n            res = True\n    return res\n",
        "test": "assert     is_Power_Of_Two(0b10) == True",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile('[a-zA-Z]+')\n    return [m.group() for m in regex.finditer(text)]\n",
        "test": "assert     'find_char_long' == 'find_char_long'",
        "num_ids": 1337,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x ** 2, nums))\n",
        "test": "assert     [x**2 for x in range(1,11)] == square_nums(range(1,11))",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotation_count = 0\n    len_str = len(str)\n    while rotation_count < len_str:\n        if str[rotation_count:] == str[:len_str - rotation_count]:\n            break\n        rotation_count += 1\n    if rotation_count == len_str:\n        return 0\n    return rotation_count\n",
        "test": "assert     find_Rotations('a') == 0",
        "num_ids": 3194,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        x = s.index(ch)\n        s = s[:x] + s[x+1:]\n    return s\n",
        "test": "assert     remove_Occ('abcd', 'd') == 'abc'",
        "num_ids": 1229,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        min_num = min(M[i])\n        min_index = M[i].index(min_num)\n        min_row = min_index\n        for j in range(len(M)):\n            M[i][j], M[min_row][j] = M[min_row][j], M[i][j]\n    return M\n",
        "test": "assert     sort_matrix([[1,1,2],[1,1,2],[1,1,2]]) == [[1,1,2],[1,1,2],[1,1,2]]",
        "num_ids": 3010,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/6\n",
        "test": "assert     find_Volume(2,2,0) == 0",
        "num_ids": 2862,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    string = re.findall(r'[a-z]+', text)\n    if len(string)>=1:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_lowercase_underscore('12345') == False",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "test": "assert     square_perimeter(1) == 4",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new = [] \n    for i in string: \n        if i not in new: \n            new.append(i) \n    return new \n",
        "test": "assert     'string1' not in str_to_list.__code__.co_varnames",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "test": "assert     test_duplicate([1]) == False",
        "num_ids": 1351,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if type(x)==int:\n        if len(str(x))==6:\n            s=str(x)\n            s=s[-1]\n            t=s[-1]\n            s=s[0]\n            if int(s)+int(t)==int(t):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     (is_woodall(5) == False)",
        "num_ids": 1122,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if(num == num[::-1]):\n        return True\n    else:\n        return False\n",
        "test": "assert     rev(1234) == False",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return arr[0]\n    l = len(arr)\n    max_num = 0\n    if arr[0] > arr[1]:\n        max_num = arr[0]\n    else:\n        max_num = arr[1]\n    for i in range(2,l):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\n",
        "test": "assert     find_Max_Num([0,0,0,0,0,0,0,0,0]) == 0",
        "num_ids": 1578,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0)\n    \ndef palindrome(x):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    if x < 0:\n        return False\n    num = x\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num%10\n        num = num / 10\n    return reverse == x\n",
        "test": "assert     opposite_Signs(1, 0) == False",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return 1/2**(1/4)*(2*n+1)**2\n    \ndef get_all_octagonals(n):\n    '''\n    Return a list of all the octagonals up to n.\n    '''\n    res = []\n    for i in range(n):\n        res.append(is_octagonal(i+1))\n    return res\n",
        "test": "assert     is_octagonal(2)",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 390,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            d[sum(int(a) for a in s[i:j+1])]+=1\n    print(d)\n",
        "test": "assert     count_Substrings('1122223334444455555') == 1",
        "num_ids": 2919,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    else:\n        return min(xs)\n",
        "test": "assert     smallest_num([7, -4, 5, -3, -1, 2, 8, 7, 4]) == -4",
        "num_ids": 928,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append(abs(test_list[i] - test_list[j]))\n    return max(result)\n    \ndef max_difference_list(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                result.append(abs(test_list[i] - test_list[j]))\n    return max(result)\n    \ndef max_difference_list(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                result.append(abs(test_list[i] - test_list[j]))\n    return max(result)\n",
        "test": "assert     max_difference([1,1,1,1,1]) == 0",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n",
        "test": "assert     subject_marks([('a',1),('a',1),('b',2),('c',3),('d',4)]) == [('a', 1), ('a', 1), ('b', 2), ('c', 3), ('d', 4)]",
        "num_ids": 1962,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 1348,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([-1,-3,2,4]) == 2",
        "num_ids": 1776,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 2836,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 28,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or \n            all(A[i] >= A[i+1] for i in range(len(A)-1)))\n",
        "test": "assert     is_Monotonic([1]) == True",
        "num_ids": 1712,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 28,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(s)):\n        if l[i] == s[0]:\n            if is_sublist(l[i+1:], s[1:]):\n                return True\n    return False\n",
        "test": "assert     is_sublist([], []) == True",
        "num_ids": 1534,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = 0\n    for x in Input:\n        if len(x) == len(Input[0]):\n            result = 1\n            break\n    return result\n",
        "test": "assert     find_equal_tuple([(1,2),(3,4),(5,6)]) == True",
        "num_ids": 3473,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return nums\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped:\n        swapped = False\n        gap = max(1, int(gap / 1.25))\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 2651,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    from math import sqrt\n    for i in range(n): \n        if i*i <= n and sqrt(n-i*i) * sqrt(n-i*i) == n-i*i: \n            return True\n    return False\n",
        "test": "assert     dif_Square(3)==False",
        "num_ids": 2930,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if i > len(patterns) - 1:\n            return False\n        if not patterns[i] == colors[i]:\n            return False\n    return True\n",
        "test": "assert     is_samepatterns([\"#FF0000\",\"#00FF00\",\"#0000FF\"],[\"#FF0000\",\"FF0000\",\"FF0000\"]) == False",
        "num_ids": 3901,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    list_of_tuples = []\n    for i in test_list:\n        if i[0]%K == 0 and i[1]%K == 0:\n            list_of_tuples.append(i)\n    return list_of_tuples\n",
        "test": "assert     find_tuples([(2, 4), (3, 9), (4, 10)], 2) == [(2, 4), (4, 10)]",
        "num_ids": 2555,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n",
        "test": "assert     is_Diff(3) == False",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n",
        "test": "assert     word_len('Hello World') == False",
        "num_ids": 2655,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n * (n + 1) * (n + 2) * (n + 3) / 6)\n",
        "test": "assert     tetrahedral_number(0)     == 0",
        "num_ids": 2886,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n",
        "test": "assert     volume_sphere(1) == 4.1887902047863905",
        "num_ids": 1108,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 0:\n        return None\n    if len(strr) == 1:\n        return strr\n    strr = strr.upper()\n    result = ''\n    for i in strr:\n        result += chr((ord(i) + ord('A') - ord('A'))%26 + ord('A'))\n    return result\n",
        "test": "assert     get_Char('a') == 'a',     'expected a'",
        "num_ids": 1579,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    conway = [1,2,1]\n    for i in range(3, n+1):\n        conway.append(conway[-1] + conway[-3])\n    return conway[-1]\n",
        "test": "assert     sequence(0) == 1, \"n=0: \" + str(sequence(0))",
        "num_ids": 3027,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere using the formula 4/3 * pi * radius^2\n    return 4 * math.pi * r * r\n",
        "test": "assert     surfacearea_sphere(0) == 0",
        "num_ids": 826,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    result = 0\n    \n    if n < 0:\n        return 0\n    \n    if n == 0:\n        return 1\n    \n    for i in range(1, n + 1):\n        result += i\n        \n    return result\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n",
        "test": "assert     merge_dictionaries_three({1: 'one', 2: 'two'}, {3: 'three', 4: 'four'}, {5: 'five'}) == {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five'}",
        "num_ids": 2655,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dictionary=collections.defaultdict(int)\n    for i in list1:\n        dictionary[i]+=1\n    return dictionary\n    \ndef num_unique(list1):\n    '''\n    Write a function to get the number of unique elements in a list\n    '''\n    return len(set(list1))\n",
        "test": "assert     freq_count([1, 2, 3, 3, 2, 1]) == {1:2, 2:2, 3:2}",
        "num_ids": 3856,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    else:\n        return N - 1 if abs(N - 1) < abs(N - 2) else N - 2\n",
        "test": "assert     closest_num(1) == 0",
        "num_ids": 1299,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert     len_log(['hello', 'python', 'here', 'python', 'hello']) == 6",
        "num_ids": 1483,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert     find_substring('', '123') == False",
        "num_ids": 1243,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in range(len(s)-1):\n        if int(s[i]) > int(s[i+1]):\n            return False\n    return True\n",
        "test": "assert     is_undulating(123232) == False",
        "num_ids": 1079,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n",
        "test": "assert     (pow(2, 2) == 4)",
        "num_ids": 887,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n    \ndef get_coast(trajectory, grid):\n    '''\n    Given a dictionary of the form {(x,y): value,...}, return the number of coast cells.\n    '''\n    coast = 0\n    for (x, y) in trajectory:\n        if grid[x][y] == 'c':\n            coast += 1\n    return coast\n",
        "test": "assert     index_minimum([(5, 5), (5, 5), (5, 5), (5, 5)]) == 5",
        "num_ids": 1680,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst)\n    for i in lst:\n        if len(i) < length:\n            length = len(i)\n    return length\n    \ndef Min_List(lst):\n    '''\n    Write a python function to find the shortest list in a list of lists.\n    '''\n    length = Find_Min_Length(lst)\n    return [i for i in lst if len(i) == length]\n",
        "test": "assert     Find_Min_Length([[1, 2], [3, 4], [5, 6, 7]]) == 2",
        "num_ids": 1664,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = [1]\n    for i in range(2, n):\n        if n%i == 0:\n            divisors.append(i)\n    return len(divisors)\n",
        "test": "assert     divisor(1) == 1",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        for j in i:\n            if j in dict1:\n                dict1[j] += 1\n            else:\n                dict1[j] = 1\n    return dict1\n",
        "test": "assert     (    frequency_lists([]) == {}    )",
        "num_ids": 2176,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[0] * multiply_num(numbers[1:])\n",
        "test": "assert     multiply_num([1]) == 1",
        "num_ids": 1964,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 38,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n))[2:]\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 1218,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if str(num) == str(num)[::-1]:\n        return int(num) + 1\n",
        "test": "assert     next_smallest_palindrome(0) == 1",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr is None or len(arr) == 0 or k < 0 or k > len(arr):\n        return None\n    \n    return arr[k-1]\n",
        "test": "assert     kth_element([3,2,5,7,1,9],6) == 9",
        "num_ids": 1363,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # if word is None:\n    #     return word\n    # elif len(word) == 1:\n    #     return word\n    # else:\n    #     return word.title()\n    return ''.join(word.title() for word in word.split('_'))\n",
        "test": "assert     snake_to_camel('snake')         == 'Snake'",
        "num_ids": 1564,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (eulerian_num(n-1, m) + m * eulerian_num(n-1, m)) % (10**9 + 7)\n    \n",
        "test": "assert     eulerian_num(1, 1) == 1",
        "num_ids": 1546,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "test": "assert     sort_sublists([[], [], []]) == [[], [], []]",
        "num_ids": 1278,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst1 = []\n    for i in lst:\n        if i == True:\n            lst1.append(i)\n        else:\n            lst1.append(i)\n    print(lst1.count(True))\n    return lst1.count(True)\n",
        "test": "assert     (count([True, False, True, False]) == 2)",
        "num_ids": 1280,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    try:\n        for item in test_tup:\n            test_list.append(item)\n    except:\n        for item in test_tup:\n            test_list.append(item)\n    return test_list\n",
        "test": "assert     add_lists([1,2,3,4], (1,)) == [1, 2, 3, 4, 1]",
        "num_ids": 1757,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n",
        "test": "assert     merge_sorted_list([],[],[]) == []",
        "num_ids": 3825,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    string = s\n    i = 0\n    count = 0\n    while i < n:\n        a = string[1:]\n        a = a+string[0]\n        string = a\n        i+=1\n        \n    for i in string:\n        if int(i)%2!= 0:\n            count+=1\n    return count\n",
        "test": "assert     odd_Equivalent('01',0) == 1",
        "num_ids": 2860,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for item in nestedlist:\n        if type(item) == list:\n            for item2 in item:\n                if item2 not in common:\n                    common.append(item2)\n        elif type(item) == str:\n            if item not in common:\n                common.append(item)\n    return common\n",
        "test": "assert     common_in_nested_lists([]) == []",
        "num_ids": 2524,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('3.14') == False",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(len(x) == 0 for x in list1)\n",
        "test": "assert     empty_dit([{'name': 'Jack'}, {'name': 'Bob'}, {}]) == False",
        "num_ids": 1258,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n",
        "test": "assert     tuple_to_int((0, 0, 0)) == 0",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(item) for item in test_list]\n",
        "test": "assert     list_to_float([1.0, 2.0, 3.0]) == [1.0, 2.0, 3.0]",
        "num_ids": 2184,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('this is a string') == ['this', 'is', 'a','string']",
        "num_ids": 915,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None:\n        return None\n    start, end = 0, len(arr) - 1\n    while start < end:\n        mid = start + (end - start) // 2\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] > arr[mid]:\n                count += 1\n        if count > mid:\n            end = mid\n        else:\n            start = mid + 1\n    return arr[start]\n",
        "test": "assert         search([1,1,1,1,1,1,1,1,1,1]) == 1",
        "num_ids": 1509,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max(map(lambda x:max(x)*min(x),list1))\n",
        "test": "assert     max_product_tuple([(1,2),(-2,-3),(-3,4),(5,6)]) == 30",
        "num_ids": 4056,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        is_amicable = True\n        if num % 2 == 0:\n            if num/2 in sieve_of_eratosthenes(num/2):\n                amicable_sum += num\n                is_amicable = False\n        if num % 3 == 0:\n            if num/3 in sieve_of_eratosthenes(num/3):\n                amicable_sum += num\n                is_amicable = False\n        if num % 5 == 0:\n            if num/5 in sieve_of_eratosthenes(num/5):\n                amicable_sum += num\n                is_amicable = False\n        if is_amicable:\n            amicable_sum += num\n    return amicable_sum\n",
        "test": "assert     amicable_numbers_sum(1000) == 1216",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a,b = complex(a), complex(b)\n    return cmath.phase(a-b)\n",
        "test": "assert     angle_complex(1,0) == 0",
        "num_ids": 1618,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Approach 1:\n    \n    # In Approach 1, we have a set of all sub-strings of the given binary string and for each sub-string we compute the number of zeroes and the number of ones. Then we find the maximum difference between the number of zeroes and number of ones in any sub-string.\n    \n    # Time Complexity: O(n)\n    \n    # Auxiliary Space: O(n)\n    \n    if not string:\n        return 0\n    \n    # If a string is empty, then the difference is zero\n    if len(string) == 1:\n        return 0\n        \n    # Initialize the lengths of the number of zeroes and the number of ones\n    zeroes = 1\n    ones = 1\n    \n    # Initialize the maximum difference\n    max_diff = 1\n    \n    for i in range(1,len(string)):\n        \n        # Determine the number of zeroes and the number of ones\n        # for the current substring\n        if string[i] == '0':\n            zeroes += 1\n        else:\n            ones += 1\n            \n        # If the number of zeroes is greater than the number of ones, then\n        # the number of zeroes is not the same as the number of ones. \n        # Therefore, we update the maximum difference\n        max_diff = max(max_diff, abs(zeroes-ones))\n    \n    return max_diff\n    \n    # Approach 2:\n    \n    # We can also apply the same algorithm from Approach 1, but we will need a extra hash map to store the number of zeroes and number of ones.\n    \n    # Time Complexity: O(n)\n    \n    # Auxiliary Space: O(n)\n    \n    if not string:\n        return 0\n    \n    # If a string is empty, then the difference is zero\n    if len(string) == 1:\n        return 0\n        \n    # Initialize the lengths of the number of zeroes and the number of ones\n    zeroes = 1\n    ones = 1\n    \n    # Initialize the maximum difference\n    max_diff = 1\n    \n    # Initialize the hash map\n    hash_map = {string[0] : 1}\n    \n    # For the rest of the elements of the string\n    for i in range(1,len(string)):\n        \n        # If the current character is a zero, then increment the number of zeroes\n        if string[i] == '0':\n            zeroes += 1\n        else:\n            ones += 1\n            \n        # If the number of zeroes is greater than the number of ones, then\n        # the number of zeroes is not the same as the number of ones. \n        # Therefore, we update the maximum difference\n        max_diff = max(max_diff, abs(zeroes-ones))\n        \n        # If the current character is present in the hash map, then we just\n        # increment the counter of the current character\n        if string[i] in hash_map:\n            hash_map[string[i]] += 1\n        else:\n            # If the character is not present in the hash map, then we simply\n            # add it to the hash map\n            hash_map[string[i]] = 1\n    \n    return max_diff\n    \n    # Approach 3:\n    \n    # This approach is similar to Approach 1, but we will use a more efficient approach.\n    \n    # Time Complexity: O(n)\n    \n    # Auxiliary Space: O(1)\n    \n    if not string:\n        return 0\n    \n    # If a string is empty, then the difference is zero\n    if len(string) == 1:\n        return 0\n        \n    # Initialize the lengths of the number of zeroes and the number of ones\n    zeroes = 1\n    ones = 1\n    \n    # Initialize the maximum difference\n    max_diff = 1\n    \n    # Initialize the start index of the zero and the start index of the one\n    start_zero = 0\n    start_one = 0\n    \n    # For the rest of the elements of the string\n    for i in range(1,len(string)):\n        \n        # If the current character is a zero, then increment the number of zeroes\n        if string[i] == '0':\n            zeroes += 1\n        else:\n            ones += 1\n            \n        # If the number of zeroes is greater than the number of ones, then\n        # the number of zeroes is not the same as the number of ones. \n        # Therefore, we update the maximum difference\n        max_diff = max(max_diff, abs(zeroes-ones))\n        \n        # If the current character is present in the hash map, then we just\n        # increment the counter of the current character\n        if string[i] in hash_map:\n            hash_map[string[i]] += 1\n        else:\n            # If the character is not present in the hash map, then we simply\n            # add it to the hash map\n            hash_map[string[i]] = 1\n        \n        # If the current character is a zero, then we check if it is\n        # the first zero encountered in the string. If it is, then we store\n        # the start index of the zero\n        if string[i] == '0':\n            if start_zero == 0:\n                start_zero = i\n        \n        # If the current character is a one, then we check if it is\n        # the first one encountered in the string. If it is, then we store\n        # the start index of the one\n        if string[i] == '1':\n            if start_one == 0:\n                start_one = i\n    \n    # If the string has a zero at the end, then we update the difference\n    # by subtracting the last zero from the number of ones. \n    if string[-1] == '0':\n        max_diff = max(max_diff, ones - hash_map[string[-1]])\n    \n    # If the string has a one at the end, then we update the difference\n    # by subtracting the last one from the number of zeroes\n    if string[-1] == '1':\n        max_diff = max(max_diff, zeroes - hash_map[string[-1]])\n    \n    # Return the maximum difference\n    return max_diff\n",
        "test": "assert     find_length(\"\") == 0",
        "num_ids": 6999,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==b:\n        return a\n    else:\n        i=min(a,b)\n        while i>1:\n            if a%i==0 and b%i==0:\n                return i\n            i-=1\n    return 1\n",
        "test": "assert     sum(1,1)==1",
        "num_ids": 1102,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # return x*y\n    return int(x) * int(y)\n",
        "test": "assert     multiply_int(1, 1)     == 1",
        "num_ids": 851,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Remove the stop words and punctuations.\n    # Also, convert the words to lower case and remove all whitespaces\n    # Create a list to store the long words\n    long_words = []\n    for word in str:\n        if len(word) > n and word not in stop_words:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(5, \"this is a test\") == []",
        "num_ids": 1671,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_matrix = np.array(my_matrix)\n    if my_matrix.shape[0] == my_matrix.shape[1]:\n        row_sum = np.sum(my_matrix, axis=1)\n        col_sum = np.sum(my_matrix, axis=0)\n        diagonal_sum = my_matrix.trace()\n        if (np.all(row_sum == col_sum) and np.all(diagonal_sum == np.trace(my_matrix))):\n            return True\n    return False\n",
        "test": "assert     magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 17]]) == False",
        "num_ids": 4195,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counter = defaultdict(int)\n    for item in nums:\n        counter[item] += 1\n    max_freq = 0\n    max_item = None\n    for k, v in counter.items():\n        if v > max_freq:\n            max_freq = v\n            max_item = k\n    return max_item\n",
        "test": "assert max_occurrences([]) == None",
        "num_ids": 1577,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    j = len(str1) - 1\n    i = 0\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i = i + 1\n        elif str1[j].lower() not in vowels:\n            j = j - 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i = i + 1\n            j = j - 1\n    return ''.join(str1)\n",
        "test": "assert     reverse_vowels(\"\")         == \"\", \"Incorrect\"",
        "num_ids": 1833,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # if not tup1:\n    #     return '()'\n    # new_str = '('\n    # for i in tup1[:-1]:\n    #     new_str += str(i) + ','\n    # new_str += str(tup1[-1]) + ')'\n    # return new_str\n    return ''.join(map(str, tup1))\n    # return '(' + ','.join(map(str, tup1)) + ')'\n",
        "test": "assert     (tup_string(('a', 'b', 'c'))) == 'abc'",
        "num_ids": 1278,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum = sum + i\n    return sum\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(n+1))/2\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    c = 0\n    for num in nums:\n        if num == 0:\n            c += 1\n    return c\n",
        "test": "assert     zero_count([0]) == 1",
        "num_ids": 5279,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #if n==0:\n    #    return True\n    #while n!=0:\n    #    if n%2!=0:\n    #        return False\n    #    n/=2\n    #return True\n    if n==0:\n        return True\n    while n%2==0:\n        n/=2\n    return n==1\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(3) == False",
        "num_ids": 1473,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 661,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result = []\n    for i in test_list:\n        if isinstance(i,list):\n            result = result + extract_singly(i)\n        else:\n            result.append(i)\n    return result\n",
        "test": "assert     extract_singly([[1, 2], [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 3527,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # If you dont know how many times you need to\n    # flip over the array, you can use this approach\n    # and the code will be O(n^2) in time and O(1) in space.\n    # Then, you can just keep doing this till you get\n    # an empty array.\n    # TC - O(nlogn)\n    # SC - O(1)\n    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # max_index is the max index of the list\n        # swap the element at max_index with the last index\n        nums[i-1], nums[max_index] = nums[max_index], nums[i-1]\n        # We have to find the rightmost index of the list\n        # from which we need to start the sort\n        # again by doing this for the indices upto the max index\n        if i % 2 == 0:\n            nums[:i] = sorted(nums[:i])\n        else:\n            nums[:i] = nums[:i][::-1]\n    return nums\n",
        "test": "assert     [2, 3, 1, 4] == pancake_sort([3, 1, 4, 2])",
        "num_ids": 1974,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count+=1\n    return count\n",
        "test": "assert     count_samepair([1,2,3], [1,2,3], [1,2,3]) == 3",
        "num_ids": 2083,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input)<2:\n        return 0\n    if type(Input[0]) is not tuple:\n        return 1\n    else:\n        return 1+find_lists(Input[0])\n",
        "test": "assert     find_lists(()) == 0",
        "num_ids": 1704,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n",
        "test": "assert max_Abs_Diff([1,1,1]) == 0",
        "num_ids": 1422,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def find_solution_recursive(a, b, n, x, y, last_x, last_y):\n        if x == last_x and y == last_y:\n            return (x, y)\n        if x > last_x:\n            return find_solution_recursive(a, b, n, x, y + b, x, y) or find_solution_recursive(a, b, n, x, y - b, x, y)\n        return find_solution_recursive(a, b, n, x + a, y, x, y) or find_solution_recursive(a, b, n, x + a, y, x, y)\n",
        "test": "assert     find_solution(4, 2, 1) == None",
        "num_ids": 1781,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n    \n    \ndef min_elements(list1, list2):\n    '''\n    Write a function to return the minimum number of elements that must be removed from list1 to make it equal to list2.\n    '''\n    list3 = remove_elements(list1, list2)\n    return len(list3)\n    \n    \ndef flip_dict(d):\n    '''\n    Write a function to flip the key and values of a dictionary.\n    '''\n    return {v:k for k,v in d.items()}\n    \n    \ndef reverse_dict(d):\n    '''\n    Write a function to flip the key and values of a dictionary.\n    '''\n    return {k:v for k,v in d.items()}\n    \n    \ndef get_max_of_two(a,b):\n    '''\n    Write a function to return the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \n        \ndef get_max_of_three(a,b,c):\n    '''\n    Write a function to return the maximum of three numbers.\n    '''\n    return max(a,b,c)\n    \n    \ndef generate_permutations(list1, l):\n    '''\n    Write a function to generate all permutations of a given list.\n    '''\n    if l == 1:\n        return [list1]\n    else:\n        return [list1] + list(generate_permutations(list1[1:], l-1))\n    \n    \ndef get_combinations(list1, l):\n    '''\n    Write a function to generate all combinations of a given list.\n    '''\n    if l == 1:\n        return [[list1]]\n    else:\n        combinations = []\n        for i in range(len(list1)):\n            combinations += get_combinations(list1[i+1:], l-1)\n        return combinations + get_combinations(list1[1:], l-1)\n    \n    \ndef get_permutation_count(list1):\n    '''\n    Write a function to count the number of permutations of a given list.\n    '''\n    return len(generate_permutations(list1, len(list1)))\n    \n    \ndef get_combination_count(list1):\n    '''\n    Write a function to count the number of combinations of a given list.\n    '''\n    return len(get_combinations(list1, len(list1)))\n    \n    \ndef get_permutations_helper(list1, l, string):\n    if l == 0:\n        print(string)\n    else:\n        for i in range(len(list1)):\n            get_permutations_helper(list1[:i]+list1[i+1:], l-1, string+' '+list1[i])\n    \n    \ndef get_combinations_helper(list1, l, string):\n    if l == 0:\n        print(string)\n    else:\n        for i in range(len(list1)):\n            get_combinations_helper(list1[i+1:], l-1, string+' '+list1[i])\n    \n    \ndef get_permutations(list1, l):\n    '''\n    Write a function to generate all permutations of a given list.\n    '''\n    return get_permutations_helper(list1, l, '')\n    \n    \ndef get_combinations(list1, l):\n    '''\n    Write a function to generate all combinations of a given list.\n    '''\n    return get_combinations_helper(list1, l, '')\n    \n    \ndef get_permutation_count(list1):\n    '''\n    Write a function to count the number of permutations of a given list.\n    '''\n    return len(get_permutations(list1, len(list1)))\n    \n    \ndef get_combination_count(list1):\n    '''\n    Write a function to count the number of combinations of a given list.\n    '''\n    return len(get_combinations(list1, len(list1)))\n    \n    \ndef get_permutations_helper2(list1, l, string, result):\n    if l == 0:\n        result.append(string)\n    else:\n        for i in range(len(list1)):\n            get_permutations_helper2(list1[i+1:], l-1, string+' '+list1[i], result)\n    \n    \ndef get_combinations_helper2(list1, l, string, result):\n    if l == 0:\n        result.append(string)\n    else:\n        for i in range(len(list1)):\n            get_combinations_helper2(list1[i+1:], l-1, string+' '+list1[i], result)\n    \n    \ndef get_permutations(list1, l):\n    '''\n    Write a function to generate all permutations of a given list.\n    '''\n    return get_permutations_helper2(list1, l, '', [])\n    \n    \ndef get_combinations(list1, l):\n    '''\n    Write a function to generate all combinations of a given list.\n    '''\n    return get_combinations_helper2(list1, l, '', [])\n    \n    \ndef get_permutation_count(list1):\n    '''\n    Write a function to count the number of permutations of a given list.\n    '''\n    return len(get_permutations(list1, len(list1)))\n    \n    \ndef get_combination_count(list1):\n    '''\n    Write a function to count the number of combinations of a given list.\n    '''\n    return len(get_combinations(list1, len(list1)))\n    \n    \ndef get_permutations_helper3(list1, l, string, result):\n    if l == 0:\n        result.append(string)\n    else:\n        for i in range(len(list1)):\n            get_permutations_helper3(list1[i+1:], l-1, string+' '+list1[i], result)\n    \n    \ndef get_combinations_helper3(list1, l, string, result):\n    if l == 0:\n        result.append(string)\n    else:\n        for i in range(len(list1)):\n            get_combinations_helper3(list1[i+1:], l-1, string+' '+list1[i], result)\n    \n    \ndef get_permutations(list1, l):\n    '''\n    Write a function to generate all permutations of a given list.\n    '''\n    return get_permutations_helper3(list1, l, '', [])\n    \n    \ndef get_combinations(list1, l):\n    '''\n    Write a function to generate all combinations of a given list.\n    '''\n    return get_combinations_helper3(list1, l, '', [])\n    \n    \ndef get_permutation_count(list1):\n    '''\n    Write a function to count the number of permutations of a given list.\n    '''\n    return len(get_permutations(list1, len(list1)))\n    \n    \ndef get_combination_count(list1):\n    '''\n    Write a function to count the number of combinations of a given list.\n    '''\n    return len(get_combinations(list1, len(list1)))\n    \n    \ndef n_choose_k(n, k):\n    '''\n    Write a function to calculate n choose k.\n    '''\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return n * n_choose_k(n-1, k-1)\n",
        "test": "assert     remove_elements([1, 2, 3, 4, 5, 6], []) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 2038,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i, sum = 0, 0\n    while i < n:\n        sum = sum + i\n        i += 1\n    return sum\n",
        "test": "assert     (sum_series(0) == 0)",
        "num_ids": 2784,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 360,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/2*tan(pi/s)\n",
        "test": "assert     area_polygon(3, 6) == 18",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1,int(math.sqrt(n))+1): \n        if n%i == 0: \n            if int(n/i) == i: \n                return True\n            else: \n                if i*i == n: \n                    return False\n                else: \n                    return True\n    return False\n",
        "test": "assert     div_sum(0) == div_sum(0)",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict_count = {}\n    for c in str1:\n        if c in dict_count:\n            dict_count[c] += 1\n        else:\n            dict_count[c] = 1\n    return dict_count\n",
        "test": "assert     count_char_position('e') == {'e': 1}",
        "num_ids": 1976,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] & 1 == 0 and A[j] & 1 == 0:\n                xor_even_pairs += 1\n    return xor_even_pairs\n",
        "test": "assert     find_even_pair([2, 4, 6, 8, 10, 12]) == 0",
        "num_ids": 1838,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n).bit_length()\n",
        "test": "assert     next_power_of_2(15) == 16",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if len(a)==0:\n        return 0\n    if a[0]==x:\n        return 1 + frequency(a[1:],x)\n    return frequency(a[1:],x)\n",
        "test": "assert     frequency( [1, 2, 3, 4, 5, 1, 3, 4, 5, 1], 4 ) == 2, \"2\"",
        "num_ids": 2030,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:                                                                                                                                                                                                                                                                    \n        return sum(list1[m:n+1])\n    return sum(list1[m:n+1])\n",
        "test": "assert     sum_range_list([1,3,5,7], 0, 2) == 9",
        "num_ids": 1484,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5+a\n",
        "test": "assert     perimeter_pentagon(5) == 30, \"testcase #1: regular pentagon with sides of length 5\"",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    n = len(s)\n    \n    index = 0\n    count = 0\n    \n    while index < n:\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count\n",
        "test": "assert     count_occurance('aaaaaa') == 0, 'Fail 1'",
        "num_ids": 945,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(i) is type(test_tuple[0]) for i in test_tuple)\n",
        "test": "assert not     check_type((1, 2, 'a'))",
        "num_ids": 1283,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # i, count = 0, 0\n    # while i < n:\n    #     if arr[i] == x:\n    #         count += 1\n    #     i += 1\n    # return count > n/2\n    start, end = 0, n-1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1]!= x:\n                return True\n            end = mid - 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n",
        "test": "assert     is_majority([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 1, 1) == True",
        "num_ids": 1990,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        if (n & 1):\n            count = count+1\n        n = n >> 1\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 1195,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([i for j, i in enumerate(str) if j % 2 == 0])\n",
        "test": "assert     odd_values_string(\"\") == \"\"",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        min = a\n    else:\n        min = b\n    if c<min:\n        min = c\n    return min\n",
        "test": "assert     min_of_three(1,2,3) == 1",
        "num_ids": 2885,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n & (1<<l)!= 0:\n        return False\n    for i in range(l+1,r):\n        if n & (1<<i)!= 0:\n            return False\n    return True\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(4,2,3)         == False",
        "num_ids": 1688,
        "indeed": true
    },
    {
        "number": 229,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n",
        "test": "assert     re_arrange_array([], 2) == []",
        "num_ids": 4344,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str2 += char\n        else:\n            str2 += str1[i]\n    return str2\n",
        "test": "assert     replace_blank('', '@') == '', 'Should return an empty string'",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse = True)\n    return list1[0:n]\n",
        "test": "assert     larg_nnum([], 2)                  == []",
        "num_ids": 1396,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=pi*r*r+2*h*r+2*pi*r*r\n    return S\ndef lateralsphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=4*pi*r*r+2*pi*r*r+2*pi*r*r\n    return S\ndef lateralspring_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=4*pi*r*r+2*pi*r*r\n    return S\ndef lateralspring_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r+2*pi*r*r\n    return S\ndef lateralspring_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=4*pi*r*r+2*pi*r*r\n    return S\ndef lateralspring_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r+2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r+2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n",
        "test": "assert     lateralsuface_cylinder(5,6) == 4*pi*5**2",
        "num_ids": 2767,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(3) == 27",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & (n-1)\n",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n",
        "test": "assert     check_occurences( [ (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1) ] ) ==     { (1, 1): 6 }",
        "num_ids": 2462,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str) - str.count(' ')\n",
        "test": "assert         number_of_substrings(\"\") == 0, \"function not working\"",
        "num_ids": 1315,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    from math import ceil\n    total_number = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if ceil(i/2) == j:\n                total_number += 1\n    return total_number\n",
        "test": "assert     get_total_number_of_sequences(1,2) == 1",
        "num_ids": 3237,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    i = 0\n    for item in list2:\n        if i == len(list1) -1:\n            list1[i] = item\n        i += 1\n    return list1\n",
        "test": "assert     replace_list([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "test": "assert     count_charac('Hello') == 5",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = int(math.sqrt(N))+1\n    return n**2\n    \ndef fib(n):\n    '''\n    Write a python function to compute the nth Fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     next_Perfect_Square(13) == 16",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    if len(arr) == 0:\n        return 0\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    left = arr[:len(arr)//2]\n    right = arr[len(arr)//2:]\n    \n    return max(max_sum(left), max_sum(right))\n",
        "test": "assert     max_sum([-1,-3,-2]) == -1",
        "num_ids": 2092,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 24,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # TODO - finish the function implementation\n    return number**0.5\n",
        "test": "assert     babylonian_squareroot(1) == 1",
        "num_ids": 2182,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    t = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        t[i][i] = 1\n    for L in range(2,n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            if str[i] == str[j] and L == 2:\n                t[i][j] = 2\n            elif str[i] == str[j]:\n                t[i][j] = 2 + t[i+1][j-1]\n            else:\n                t[i][j] = max(t[i][j-1], t[i+1][j])\n    return t[0][n-1]\n",
        "test": "assert     lps('cddpd') == 3",
        "num_ids": 1860,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 887,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                result.append(num1)\n                break\n    return result\n",
        "test": "assert     intersection_array([],[]) == []",
        "num_ids": 2277,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for t in tup: \n        if t == x: \n            count += 1\n    return count\n    \n",
        "test": "assert     count_X(('a', 'a', 'b'), 'a') == 2",
        "num_ids": 3119,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+list\n",
        "test": "assert     [insert_element([3,4,5,6,7],5)    == [3,4,5,5,5,6,7]    ]",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for n in numbers:\n        z = cmath.polar(n)\n        result.append(z)\n    return result\n",
        "test": "assert     convert([1+2j]) == [cmath.polar(1+2j)]",
        "num_ids": 1677,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if isinstance(x,int):\n            count = count + 1\n    return count\n",
        "test": "assert     count_integer([])    == 0, 'incorrect'",
        "num_ids": 1659,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i+n]) for i in range(len(l)-n+1)]\n",
        "test": "assert     combinations_colors([1,2,3], 1)         == [(1,), (2,), (3,)]",
        "num_ids": 1303,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<2:\n        return 0\n    primes = [True]*(n+1)\n    primes[0] = primes[1] = False\n    for i in range(2,int(math.sqrt(n))+1):\n        if primes[i]==True:\n            for j in range(i*i,n+1,i):\n                primes[j]=False\n    return sum(primes[2:])\n",
        "test": "assert     count_Primes_nums(1) == 0",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "test": "assert     swap_numbers(3,4) == (4,3)",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if len(test_tup1) == 0 and len(test_tup2) == 0:\n        return ()\n    elif len(test_tup1) == 0:\n        return test_tup2\n    elif len(test_tup2) == 0:\n        return test_tup1\n    elif len(test_tup1) > len(test_tup2):\n        max_tup = test_tup1\n    elif len(test_tup2) > len(test_tup1):\n        max_tup = test_tup2\n    elif len(test_tup1) == len(test_tup2):\n        if test_tup1[0] > test_tup2[0]:\n            max_tup = test_tup1\n        elif test_tup1[0] < test_tup2[0]:\n            max_tup = test_tup2\n        else:\n            if test_tup1[1] > test_tup2[1]:\n                max_tup = test_tup1\n            elif test_tup1[1] < test_tup2[1]:\n                max_tup = test_tup2\n            else:\n                if test_tup1[2] > test_tup2[2]:\n                    max_tup = test_tup1\n                elif test_tup1[2] < test_tup2[2]:\n                    max_tup = test_tup2\n    return max_tup\n",
        "test": "assert     maximize_elements(('a', 10), ('b', 50)) == ('b', 50), \"wrong answer\"",
        "num_ids": 3202,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1: return 2\n    if n == 2: return 3\n    if n == 3: return 5\n    else:\n        for i in range(2,n):\n            if is_newman_williams(i):\n                return i\n        return newman_prime(n)\n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        div_res = tuple(a/b for a, b in zip(test_tup1, test_tup2))\n    except ZeroDivisionError:\n        print(\"Division by zero is undefined\")\n    else:\n        return div_res\n",
        "test": "assert     division_elements((4, 2), (2, 2)) == (2, 1)",
        "num_ids": 1603,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 2) == ([1, 2], [3, 4, 5, 6, 7])",
        "num_ids": 2116,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age > 2:\n        age_in_dogs = h_age * 7\n    elif h_age == 2:\n        age_in_dogs = 10\n    else:\n        age_in_dogs = 0\n    \n    return age_in_dogs\n    \ndef dog_years(age):\n    '''\n    Write a function to calculate a dog's age in years.\n    '''\n    \n    if age > 2:\n        age_in_years = age * 14\n    elif age == 2:\n        age_in_years = 22\n    else:\n        age_in_years = 0\n    \n    return age_in_years\n    \ndef dog_years_in_month(age):\n    '''\n    Write a function to calculate a dog's age in months.\n    '''\n    \n    if age > 2:\n        age_in_months = age * 12\n    elif age == 2:\n        age_in_months = 24\n    else:\n        age_in_months = 0\n    \n    return age_in_months\n    \ndef dog_months_in_year(age):\n    '''\n    Write a function to calculate a dog's age in months.\n    '''\n    \n    if age > 2:\n        age_in_months = age * 360\n    elif age == 2:\n        age_in_months = 24 * 30\n    else:\n        age_in_months = 0\n    \n    return age_in_months\n    \ndef dog_months_in_day(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 365\n    elif age == 2:\n        age_in_days = 24 * 31\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_days_in_year(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 365\n    elif age == 2:\n        age_in_days = 24 * 365\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_days_in_month(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 30\n    elif age == 2:\n        age_in_days = 24 * 30\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_years_in_week(age):\n    '''\n    Write a function to calculate a dog's age in weeks.\n    '''\n    \n    if age > 2:\n        age_in_weeks = age * 52\n    elif age == 2:\n        age_in_weeks = 10\n    else:\n        age_in_weeks = 0\n    \n    return age_in_weeks\n    \ndef dog_weeks_in_year(age):\n    '''\n    Write a function to calculate a dog's age in weeks.\n    '''\n    \n    if age > 2:\n        age_in_weeks = age * 52\n    elif age == 2:\n        age_in_weeks = 10\n    else:\n        age_in_weeks = 0\n    \n    return age_in_weeks\n    \ndef dog_weeks_in_month(age):\n    '''\n    Write a function to calculate a dog's age in weeks.\n    '''\n    \n    if age > 2:\n        age_in_weeks = age * 12\n    elif age == 2:\n        age_in_weeks = 8\n    else:\n        age_in_weeks = 0\n    \n    return age_in_weeks\n    \ndef dog_years_in_day(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 365\n    elif age == 2:\n        age_in_days = 7\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_months_in_week(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 7\n    elif age == 2:\n        age_in_days = 4\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_years_in_week(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_weeks = age * 52\n    elif age == 2:\n        age_in_weeks = 2\n    else:\n        age_in_weeks = 0\n    \n    return age_in_weeks\n    \ndef dog_months_in_day(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 30\n    elif age == 2:\n        age_in_days = 4\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_weeks_in_month(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 8\n    elif age == 2:\n        age_in_days = 2\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_years_in_month(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_months = age * 12\n    elif age == 2:\n        age_in_months = 2\n    else:\n        age_in_months = 0\n    \n    return age_in_months\n    \ndef dog_years_in_day(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 365\n    elif age == 2:\n        age_in_days = 7\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_months_in_year(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_months = age * 12\n    elif age == 2:\n        age_in_months = 4\n    else:\n        age_in_months = 0\n    \n    return age_in_months\n    \ndef dog_days_in_month(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 30\n    elif age == 2:\n        age_in_days = 4\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_weeks_in_year(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_weeks = age * 52\n    elif age == 2:\n        age_in_weeks = 10\n    else:\n        age_in_weeks = 0\n    \n    return age_in_weeks\n    \ndef dog_days_in_week(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 7\n    elif age == 2:\n        age_in_days = 4\n    else:\n        age_in_days = 0\n    \n    return age_in_days",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = []\n    for i in range(len(S)):\n        if i % step == 0:\n            l.append(S[i:i+step])\n    return l\n",
        "test": "assert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 1653,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n*(n + 1)*(2 * n + 1)/6\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    ans = 1\n    i = 0\n    while i < n:\n        ans *= (2*i + 1)\n        i += 1\n    return ans\n",
        "test": "assert     find_star_num(0) == 1",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('$') == 36",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_e = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum_e += arr[i]\n    return sum_e\n",
        "test": "assert     sum_even_and_even_index([]) == 0",
        "num_ids": 1540,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for num in range(n):\n        if num**5 % 2 == 0:\n            total += num\n    return total\n",
        "test": "assert     even_Power_Sum(0) == 0",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n",
        "test": "assert     rear_extract([]) == []",
        "num_ids": 1332,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    res_tup = tuple()\n    for i in range(len(test_tup1)):\n        res_tup += (test_tup1[i] - test_tup2[i],)\n    return res_tup\n",
        "test": "assert     substract_elements( (1,2,3,4,5,6), (1,2,3,4,5,6)) == (0,0,0,0,0,0)",
        "num_ids": 1757,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int(math.factorial(n) / ( math.factorial(2 * n) * math.factorial(n) ) )\n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 0",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi*r*r*h)/3\n",
        "test": "assert     volume_cylinder(0,3) == 0",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #TO DO\n    return {k: v for (k, v) in dict.items() if v >= n}\n",
        "test": "assert     dict_filter({\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5,\"f\":6},3) == {\"f\":6,\"e\":5,\"d\":4,\"c\":3}",
        "num_ids": 1948,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements(('a', 'a', 'a')) == 3",
        "num_ids": 1869,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * (n + 1)) // 2\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 1319,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            break\n    if found == True:\n        return True, i\n    return False, -1\n",
        "test": "assert     ( sequential_search(['apple', 'banana', 'coconut'], 'banana') == (True, 1) )",
        "num_ids": 3529,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                return unique\n    return unique\n",
        "test": "assert     all_unique([]) == True",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)>len(nums2):\n        for i in range(len(nums1)-len(nums2)):\n            nums2.append(0)\n    else:\n        for i in range(len(nums2)-len(nums1)):\n            nums1.append(0)\n    return [num1-num2 for num1,num2 in zip(nums1,nums2)]\n    \ndef factorial(num):\n    '''\n    Write a recursive function to calculate the factorial of a number.\n    '''\n    if num<0:\n        raise ValueError('Invalid factorial value')\n    elif num==0:\n        return 1\n    else:\n        return num*factorial(num-1)\n        \ndef inverse(num):\n    '''\n    Write a recursive function to calculate the inverse of a number.\n    '''\n    if num==0:\n        return 0\n    elif num<0:\n        return -(abs(num)+inverse(num-1))\n    else:\n        return num+inverse(num-1)\n",
        "test": "assert     sub_list([1,2,3,4,5],[1,2,3,4,5]) == [0,0,0,0,0]",
        "num_ids": 1442,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n=str(n)\n    s=[]\n    for i in n:\n        s.append(int(i))\n    s.sort()\n    freq=[]\n    for i in range(10):\n        freq.append(s.count(i))\n    for i in range(10):\n        if freq[i]>=i:\n            print(i)\n            return False\n    return True\n",
        "test": "assert     validate(11) == False, \"validate(11) is expected to be False\"",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_element([1,2,3],4) == False",
        "num_ids": 1076,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 27,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #find a\n    if text.count('a') > 0:\n        #find b\n        if text.find('b', text.find('a')) > 0:\n            if text.find('b', text.find('b')) > 0:\n                if text.find('b', text.find('b', text.find('a')+1)) > 0:\n                    return True\n    return False\n",
        "test": "assert     text_match_two_three('a') == False",
        "num_ids": 1242,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(k):\n            if i + j < n:\n                res = max(res, a[i + j] + sum(a[i + j:i + k]))\n    return res\n",
        "test": "assert     max_sub_array_sum_repeated([1, 2, -1, -4, -2, 3], 6, 4) == 6",
        "num_ids": 1789,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return (n * (n + 1) * (2 * n + 1)) / 6\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlen = 0\n    for i in range(0, len(list1)):\n        if len(list1[i]) > maxlen:\n            maxlen = len(list1[i])\n    return maxlen\n",
        "test": "assert     max_length([[1, 2, 3, 4]]) == 4",
        "num_ids": 1899,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # dict to store all the ways \n    res = {}\n    # count the ways for 0 and 1\n    res[0] = 1\n    res[1] = 1\n    # now loop till k and till n \n    for i in range(k, n+1):\n        # if i-1 not present, add 1 to both\n        if i-1 not in res:\n            res[i-1] = 1\n            res[i] = 1\n        else:\n            # if i-1 present\n            res[i] = res[i-1] + res[i-2]\n    return res[n-1]\n",
        "test": "assert     count_no_of_ways(6, 3) == 3",
        "num_ids": 1478,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return -1\n    else:\n        return n // m\n",
        "test": "assert     find(7,7) == 1",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle=math.degrees(math.atan(w/h))\n    print(angle)\n    b=math.sqrt((h**2)+(w**2))\n    print(b)\n    print(math.tan(math.radians(angle)))\n    print(math.degrees(math.atan(w/h)))\n    c=b*math.tan(math.radians(angle))\n    print(c)\n",
        "test": "assert     math.sqrt(3) == otherside_rightangle(5,5)",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return max(listval)\ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return min(listval)\ndef list_gen(listval):\n    '''\n    Write a function to return a list with each number doubled.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return [x*2 for x in listval]\ndef sum_list(listval):\n    '''\n    Write a function to return the sum of all the values in a given list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return sum(listval)\ndef sort_list(listval):\n    '''\n    Write a function to return a sorted list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return sorted(listval)\ndef sum_val(listval):\n    '''\n    Write a function to return the sum of all the values in a given list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return sum(listval)\ndef index_val(listval,val):\n    '''\n    Write a function to return the index of the first occurence of a given value\n    in a given list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return listval.index(val)\ndef count_val(listval,val):\n    '''\n    Write a function to return the number of occurrences of a given value in a\n    given list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return listval.count(val)\ndef all_equal(listval):\n    '''\n    Write a function to determine if all values in a given list are the same.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return len(set(listval)) == 1\ndef any_equal(listval):\n    '''\n    Write a function to determine if any values in a given list are the same.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return len(set(listval)) > 1\ndef remove_duplicate(listval):\n    '''\n    Write a function to remove all duplicates from a given list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return list(set(listval))\ndef remove_duplicate_dict(listval):\n    '''\n    Write a function to remove duplicates from a dictionary (not values).\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return dict([(x,True) for x in listval])\ndef duplicate_dict(listval):\n    '''\n    Write a function to return a new dictionary with the duplicate values from a given\n    dictionary removed.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return dict([(x,True) for x in listval])\ndef unique_values(dictval):\n    '''\n    Write a function to return a list of the unique values from a dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return list(set(dictval.values()))\ndef unique_values_dict(dictval):\n    '''\n    Write a function to return a dictionary with the unique values from a dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return dict(set(dictval.items()))\ndef common_elements(listval):\n    '''\n    Write a function to return a list of common elements in a list of lists.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return list(set.intersection(*[set(x) for x in listval]))\ndef uncommon_elements(listval):\n    '''\n    Write a function to return a list of uncommon elements in a list of lists.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return list(set.difference(*[set(x) for x in listval]))\ndef max_dict_val(dictval):\n    '''\n    Write a function to return the maximum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return max(dictval.values())\ndef min_dict_val(dictval):\n    '''\n    Write a function to return the minimum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return min(dictval.values())\ndef max_val_dict(dictval):\n    '''\n    Write a function to return the maximum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return max(dictval.values())\ndef min_val_dict(dictval):\n    '''\n    Write a function to return the minimum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return min(dictval.values())\ndef list_to_dict(listval,key):\n    '''\n    Write a function to return a dictionary with the keys being the values in a list\n    and the values being a list of the corresponding keys.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return dict([(x,key) for x in listval])\ndef dict_to_list(dictval,val):\n    '''\n    Write a function to return a list of the values for a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return [dictval[x] for x in dictval]\ndef dict_to_list_val(dictval,val):\n    '''\n    Write a function to return a list of the values for a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return dictval[val]\ndef max_val_dict_val(dictval):\n    '''\n    Write a function to return the maximum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return max(dictval.values())\ndef min_val_dict_val(dictval):\n    '''\n    Write a function to return the minimum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return min(dictval.values())\ndef dict_val_max(dictval):\n    '''\n    Write a function to return the maximum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return max(dictval.values())\ndef dict_val_min(dictval):\n    '''\n    Write a function to return the minimum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return min(dictval.values())\ndef dict_val_sum(dictval):\n    '''\n    Write a function to return the sum of the values in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return sum(dictval.values())\ndef dict_val_avg(dictval):\n    '''\n    Write a function to return the average of the values in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return sum(dictval.values())/len(dictval)\ndef dict_val_max_key(dictval):\n    '''\n    Write a function to return the key of the maximum value in a given dictionary.\n    '''",
        "test": "assert     max_val([1, 2, 3, 4]) == 4",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(i for i in range(1, int(number**0.5) + 1) if number % i == 0)\n",
        "test": "assert     sum_div(0) == 0",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)):\n            if (arr[i] > arr[j]):\n                count = count + 1\n    return count\n",
        "test": "assert     get_Inv_Count([2,1]) == 1",
        "num_ids": 1172,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for element in list1:\n        if type(element) == list:\n            output += flatten_list(element)\n        else:\n            output.append(element)\n    return output\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 1971,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata.sort()\n    sorted_list = []\n    for item in stdata:\n        if len(sorted_list) == 0:\n            sorted_list.append(item)\n        elif item[1] >= sorted_list[-1][1]:\n            sorted_list.append(item)\n        else:\n            if item[1] > sorted_list[-1][1]:\n                sorted_list[-1] = item\n    return sorted_list[-1][1]\n",
        "test": "assert     max_aggregate([(1,2), (5,6), (10,11)]) == 11",
        "num_ids": 3684,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    s = 0\n    for i in range(1,n+1):\n        s += count_binary_seq(i-1)\n    return s\n",
        "test": "assert     count_binary_seq(1) == 1",
        "num_ids": 3227,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n        else:\n            depth += 1\n    return depth\n",
        "test": "assert     dict_depth( {'a': 1} ) == 1",
        "num_ids": 3874,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)) :\n        if i == index :\n            return arr[i]\n    return arr[index]\n",
        "test": "assert     find_Element([1,2,3,4,5,6], [2, 3, 3, 4, 4, 5], [3, 1, 2, 1, 2, 3], 4) == 5",
        "num_ids": 4059,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [x for x in words if x.startswith('p')]\n",
        "test": "assert     start_withp(['paul', 'is', 'funny', 'and', 'has', 'a','mac'])    ==    ['paul', 'has']",
        "num_ids": 2537,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n",
        "test": "assert     max_sum_increasing_subseq([1,10,2,4,5,6,7,8,9,10,3,1,12,5,6,7,8,10,3], 19, 9, 3) == 6",
        "num_ids": 1875,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n<0:\n        return tuplex[n:]\n    if m<0:\n        return tuplex[:m]\n    return tuplex[m:n]\n",
        "test": "assert     colon_tuplex((1,2,3),1,3) == (2,3)",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    biggest = []\n    for i in range(N):\n        biggest.append(max(nums1[i], nums2[i]))\n    return biggest\n",
        "test": "assert     large_product([1, 1, 1], [1, 1, 1], 3)             ==  [1, 1, 1]",
        "num_ids": 2577,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(1,2) == 2",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple(\"abc\") == ('a', 'b', 'c')",
        "num_ids": 1248,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (n & (n - 1))\n",
        "test": "assert     set_left_most_unset_bit(1) == 1",
        "num_ids": 1102,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3.0*math.pi*r*r*h\n",
        "test": "assert     (volume_cone(1,0) == 0)",
        "num_ids": 1143,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    i=1\n    while i<=n:\n        i=i*2\n    return i/2\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(2) == 3",
        "num_ids": 3027,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for i in list_:\n        new_list.append(string.format(i))\n    return new_list\n",
        "test": "assert     add_string([1, 2, 3], '{:d}') == ['1', '2', '3']",
        "num_ids": 1807,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: l3[i]} for i in range(0, len(l1))}\n",
        "test": "assert     convert_list_dictionary([1, 2, 3], ['a', 'b'], [1, 2, 3]) ==     {'a': 1, 'b': 2}",
        "num_ids": 2094,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==1:\n        return n\n    if n%2==0:\n        return max(n+get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n    if n%3==0:\n        return max(n+get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n    if n%4==0:\n        return max(n+get_max_sum(n/4), get_max_sum(n/5))\n    return n\n",
        "test": "assert     get_max_sum (1) == 1, \"get_max_sum(1) == 1\"",
        "num_ids": 1281,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n",
        "test": "assert     max_length_list(['aa', 'bb', 'cc', 'dd', 'ee'])     == 2, 'error'",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert not check_distinct((1, 2, 2, 4))",
        "num_ids": 1021,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = dict()\n    for i in str1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in str1:\n        if d[i] == 1:\n            return i\n    return None\n",
        "test": "assert     first_non_repeating_character('abcdef') == 'a'",
        "num_ids": 1444,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    return False\n    \n    \ndef compare_strings(str1,str2):\n    '''\n    Write a function to check whether two given strings are anagram or not.\n    '''\n    if check_char(str1) and check_char(str2):\n        return str1 == str2\n    return False\n",
        "test": "assert     check_char(\"abcdefg\") == False",
        "num_ids": 2778,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    elif b > a:\n        if a > c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b\n    else:\n        if a > c:\n            return c\n        elif b > c:\n            return c\n        else:\n            return a\n        \nprint(median_numbers(4,8,3))\n",
        "test": "assert     median_numbers(0,0,0) == 0",
        "num_ids": 1272,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        num_digits = []\n        while num > 0:\n            num_digits.append(num % 10)\n            num = num // 10\n        total += sum(num_digits)\n    return total\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x^y for x, y in zip(test_tup1, test_tup2)])\n",
        "test": "assert     bitwise_xor((0, 0), (0, 0)) == (0, 0)",
        "num_ids": 1539,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "test": "assert     extract_freq(['a', 'a', 'b', 'b', 'c']) == 3",
        "num_ids": 3572,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([x + y for x, y in zip(test_tup1, test_tup2)])\n",
        "test": "assert     add_nested_tuples((0,0,0), (0,0,0)) == (0,0,0)",
        "num_ids": 1942,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n    \ndef compute_average(numbers):\n    '''\n    Write a function that computes the average of a list of numbers.\n    '''\n    average = sum(numbers)/len(numbers)\n    return average\n",
        "test": "assert     minimum(10,20) == 10",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert not check_tuplex(('t','u','p','e'),('t','u','p','c'))",
        "num_ids": 1496,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x&1:\n        return 1\n    else:\n        return 0\n    \n    \ndef is_divisible_by_K(x, k):\n    '''\n    Write a python function to check whether a given number is divisible by K.\n    '''\n    return x%k==0\n",
        "test": "assert     find_Parity(2**11) == 0",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # 1. Turn the number into a list\n    # 2. Then create a new list by excluding the smallest digit from the left and then adding the\n    #   smallest digit to the right. Then rearrange the list.\n    # 3. Turn the list back into a number.\n    l = list(str(n))\n    l.sort()\n    l.reverse()\n    l = ''.join(l)\n    l = int(l)\n    return l\n",
        "test": "assert     rearrange_bigger(555555) == 555555",
        "num_ids": 1985,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    pq = []\n    for i in range(len(nums1)):\n        heapq.heappush(pq, (nums1[i] + nums2[0], i, 0))\n",
        "test": "assert k_smallest_pairs([1,7,11], [2,4,6], 3) == [[1,2],[1,4],[1,6]]",
        "num_ids": 6730,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    l = list1\n    min_prod = l[0][0] * l[0][1]\n    for i in range(len(l)):\n        if l[i][0] * l[i][1] < min_prod:\n            min_prod = l[i][0] * l[i][1]\n    return min_prod\n",
        "test": "assert     min_product_tuple([(0,1),(1,2),(1,3)]) == 0",
        "num_ids": 1997,
        "indeed": true
    },
    {
        "number": 410,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < val:\n            val = listval[i]\n    return val\n",
        "test": "assert     min_val([9,2,3,4,5,6]) == 2",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 29,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n    return ''.join(words)\n",
        "test": "assert     snake_to_camel('hello_world') == 'HelloWorld'",
        "num_ids": 3671,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i%2!= 0:\n            odd.append(i)\n    return odd\n",
        "test": "assert     remove_odd([]) == [], \"remove_odd\"",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return None\n    if n == 1:\n        return list1[0][1]\n    else:\n        return extract_nth_element(list1[1:], n - 1)\n",
        "test": "assert     extract_nth_element([('1', '2'), ('3', '4'), ('5', '6')], 3) == '6'",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return 1 if set(list1).intersection(set(list2)) else 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     overlapping('', ['aa', 'bb', 'cc']) == False",
        "num_ids": 3081,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    a = arr[:]\n    max_product = a[0] * a[1] * a[2]\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            product = a[i] * a[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert     max_Product([1,2,3]) == 6",
        "num_ids": 1782,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    temp = []\n    for item in Input:\n        temp.append(item[0])\n    return temp\n",
        "test": "assert     group_tuples([(1,2),(3,4),(5,6)]) == [1,3,5]",
        "num_ids": 5918,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_item = 0\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_item = i\n    return max_item\n",
        "test": "assert     Find_Max([3,3,3,3]) == 3",
        "num_ids": 1818,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(map(lambda x: round(x,2), list1)) * len(list1)\n",
        "test": "assert     round_and_sum([]) == 0.",
        "num_ids": 3558,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #if n < 0:\n    #    return 0\n    return n * n * n\n",
        "test": "assert     1**3        ==    sum([1])",
        "num_ids": 2726,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(map(str,test_tup))\n",
        "test": "assert     concatenate_tuple(('L')) == 'L'",
        "num_ids": 1517,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    return (n * (n + 1) * (2 * n + 1)) / 6\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 1029,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(el[-1] for el in test_tuple)\n",
        "test": "assert     extract_rear(('Z', 'W', 'W', 'Z')) == ('Z', 'W', 'W', 'Z')",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([], 2) == 0",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 1]\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 1545,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 32,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if not dt:\n        return None\n    return re.sub('^(\\d{4})-(\\d{2})-(\\d{2})$', '\\\\3-\\\\2-\\\\1', dt)\n",
        "test": "assert     change_date_format(\"2015-10-15\") == \"15-10-2015\"",
        "num_ids": 1763,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 32,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    assert isinstance(my_list, list)\n    N = len(my_list)\n    h = N//2\n    while h > 0:\n        for i in range(h,N):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h //= 2\n    return my_list\n",
        "test": "assert     shell_sort([1, 4, 3, 2, 5, 6, 8, 7]) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 2375,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([a&b for a,b in zip(test_tup1, test_tup2)])\n",
        "test": "assert     (and_tuples((), ()) == ())",
        "num_ids": 1624,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b / (2 * a)\n",
        "test": "assert         parabola_directrix(1, -2, 3) == 1.0",
        "num_ids": 3430,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if not(isinstance(list1, list) and isinstance(list2, list)):\n        raise ValueError('One of the inputs is not a list.')\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert     common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == False",
        "num_ids": 1406,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return height/2.0 + min(base1,base2)/2.0\n",
        "test": "assert     median_trapezium(0,0,0) == 0",
        "num_ids": 1232,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i]>number:\n            return True\n    return False\n",
        "test": "assert     check_greater([1, 2, 3, 4], 1) == True",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[a]+b')\n    if pattern.match(text):\n        return True\n    return False\n",
        "test": "assert     not text_match_one('a')",
        "num_ids": 1005,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "test": "assert     last_Digit(0) == 0",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l1=[]\n    for i in list1:\n        if i < 0:\n            l1.append(i)\n    return l1\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 1381,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.replace('x','')\n    return str1\n",
        "test": "assert     remove_odd('') == ''",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list = sorted(test_list)\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 3945,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n",
        "test": "assert     multiple_to_single([0, 0, 0, 0]) == 0",
        "num_ids": 2722,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    match_object = re.search(r'adverb', text)\n    adverb_positions = []\n    if match_object:\n        adverb_positions = match_object.span()\n    return adverb_positions\n",
        "test": "assert     find_adverb_position('all the king will be happy...') == ('all',0,len('all the king will be happy...'))",
        "num_ids": 2013,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "test": "assert     surfacearea_cube(0) == 0",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return float(nums.count(1))/float(len(nums))\n",
        "test": "assert     positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]) == 0",
        "num_ids": 1568,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1==[]:\n        return None\n    if len(list1)==1:\n        return list1[0]\n    max1=list1[0]\n    for i in range(1,len(list1)):\n        if max1>list1[i] and list1[i]<0:\n            max1=list1[i]\n    return max1\n",
        "test": "assert     -1 == largest_neg([-1, 0])",
        "num_ids": 1752,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) >= K:\n            result.append(tup[0:K])\n    return result\n",
        "test": "assert trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], 4) == [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]",
        "num_ids": 1699,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(test_tup1[i]*test_tup2[i] for i in range(len(test_tup1)))\n    \ndef index_multiplication_map(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(operator.mul, test_tup1, test_tup2))\n",
        "test": "assert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 1846,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count = count+1\n    return count\n",
        "test": "assert     count_Occurrence((1,2,3,4), [5,6,7,8,9]) == 0",
        "num_ids": 1702,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n",
        "test": "assert     cube_nums([0, 1, 2, 3, 4]) == [0, 1, 8, 27, 64], cube_nums([0, 1, 2, 3, 4])",
        "num_ids": 1035,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return (n*(n+1))/2\n",
        "test": "assert     (cal_sum(1) == 1)",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    from itertools import islice\n    return list(islice(str, l))\n",
        "test": "assert extract_string(['python', 'java', 'c++', 'haskell'], 0) == []",
        "num_ids": 3850,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if not text1:\n        return text1\n    text2 =''.join(text1.split())\n    return text2\n",
        "test": "assert     remove_whitespaces('abc') == 'abc'",
        "num_ids": 1034,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return abs(actual_cost - sale_amount)\n",
        "test": "assert     loss_amount(50,50)== 0",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(n/2)+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n    return sum \n    \n",
        "test": "assert     sumofFactors(1) == 0",
        "num_ids": 1232,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('z',text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz(\"We have some zebra cows.\")",
        "num_ids": 3026,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_monthnumb_number(3) == True",
        "num_ids": 1658,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [value[::-1] for value in stringlist]\n",
        "test": "assert     reverse_string_list(['', '', '', '', '']) == ['', '', '', '', '']",
        "num_ids": 1227,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m=lst[0]\n    for i in lst[1:]:\n        if len(i)<len(m):\n            m=i\n    return m\n",
        "test": "assert     (Find_Min([[1,2,3,4], [4,5], [6,7,8], [9,10], [11,12]])==[4,5]), 'Find_Min([[1,2,3,4], [4,5], [6,7,8], [9,10], [11,12]]) should return [4,5].'",
        "num_ids": 2560,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(4,5) == 4*5",
        "num_ids": 619,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n",
        "test": "assert     remove_uppercase(\"\") == \"\"",
        "num_ids": 1100,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = lst[0]\n    return lst[0]\n",
        "test": "assert     Extract(['a','b','c','d','e']) == 'a'",
        "num_ids": 1192,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for i in str:\n        if i.isupper():\n            upper_ctr += 1\n    return upper_ctr\n",
        "test": "assert     upper_ctr(\"hi\") == 0",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==0:\n        return []\n    if len(list1)==1:\n        return [[list1[0]]]\n    res=[]\n    for i in range(len(list1)):\n        for x in combinations_list(list1[:i]+list1[i+1:]):\n            res.append([list1[i]]+x)\n    return res\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 6996,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    maximum = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = 1\n            for k in range(i,j+1):\n                product *= arr[k]\n            maximum = max(maximum, product)\n    return maximum\n",
        "test": "assert max_subarray_product([-2, 0, -1]) == 0",
        "num_ids": 6066,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    n_set = set()\n    for key, value in dict.items():\n        if value in n_set:\n            return False\n        else:\n            n_set.add(value)\n    return True\n",
        "test": "assert     check_value({\"a\": 1, \"b\": 2, \"c\": 1}, 1) == False, \"Wrong answer\"",
        "num_ids": 1430,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 1555,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    max_ = 1\n    for i in range(1, len(arr)):\n        max_ = max(max_ * arr[i], arr[i])\n    return max_\n",
        "test": "assert     max_product([-2, 0, -1]) == 0",
        "num_ids": 3298,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    output_tup = ()\n    for i in range(len(test_tup)-1):\n        output_tup += (test_tup[i] + test_tup[i+1],)\n    output_tup += (test_tup[-1],)\n    return output_tup\n",
        "test": "assert     add_pairwise((0,0,0,0,0)) == (0,0,0,0,0)",
        "num_ids": 1680,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = list(arr)\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod\n",
        "test": "assert     find_remainder(    [1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 1219,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1, len(l)):\n        if l[i]!= l[i - 1] + 1:\n            return False\n    return True\n",
        "test": "assert     check_Consecutive([5,7,9,1,2,3]) == False, \"Failed\"",
        "num_ids": 1427,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1, set2 = set(test_list1), set(test_list2)\n    return tuple(set1.intersection(set2))\n",
        "test": "assert     tuple_intersection(('a', 'b', 'c'), ('a', 'b', 'c', 'd')) == ('a', 'b', 'c')",
        "num_ids": 1984,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char('abcdef','d', 'z') == 'abczef'",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "test": "assert     sort_counter({'a':3, 'b':2, 'c':2}) ==     [('a',3),('b',2),('c',2)]",
        "num_ids": 1856,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum\n",
        "test": "assert     big_sum([]) == 0",
        "num_ids": 1283,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('HELLO, HOW ARE YOU') == False",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('\\s+', '', re.sub(r'\\b[a-z]+\\b', '', str1))\n",
        "test": "assert     remove_lowercase('5') == '5'",
        "num_ids": 1424,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    return [x for x in list if x%2!=0]\n    ",
        "test": "assert     Split([1,3,5,7,9]) == [1,3,5,7,9]",
        "num_ids": 1995,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n**3 - (n * (n+1)) / 2\n",
        "test": "assert     difference(1) == 0",
        "num_ids": 2929,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        if A[i] & 1 == 1 :\n            count += 1\n    return count\n",
        "test": "assert     find_Odd_Pair([1,2,3,4,5,6,7],6) ==     3",
        "num_ids": 3439,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('string')    == 'STRING'",
        "num_ids": 1134,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < n2:\n        (n1, n2) = (n2, n1)\n    n1 = str(n1)\n    n2 = str(n2)\n    length = max(len(n1), len(n2))\n    n1, n2 = (n1.zfill(length), n2.zfill(length))\n    return sum(abs(int(a) - int(b)) for a, b in zip(n1, n2))\n",
        "test": "assert     digit_distance_nums(1234, 1234) == 0",
        "num_ids": 1595,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    max_ending_here = a[0]\n    max_so_far = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "test": "assert     max_sub_array_sum([1], 1) == 1",
        "num_ids": 2172,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 27,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if test_tup1 is None and test_tup2 is None:\n        return None\n    if test_tup1 is None:\n        return test_tup2\n    if test_tup2 is None:\n        return test_tup1\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
        "test": "assert     union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 1995,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) <= 0:\n        return 0\n    else:\n        return max(Find_Max_Length(lst[1:]), len(lst))\n",
        "test": "assert     Find_Max_Length([]) == 0",
        "num_ids": 2117,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quote_pat = re.compile(r'\"(.*)\"')\n    patt = re.findall(quote_pat,text)\n    return patt\n",
        "test": "assert     extract_values('\"a\"')    == ['a']",
        "num_ids": 5415,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dic = {}\n    for num in arr:\n        if num in dic:\n            dic[num]+=1\n        else:\n            dic[num]=1\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dic[arr[i]]>0 and dic[arr[j]]>0:\n                count+=1\n                dic[arr[i]]-=1\n                dic[arr[j]]-=1\n    return count\n",
        "test": "assert     (count_Pairs([1,2,3,4],1) == 0)",
        "num_ids": 3560,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split('he') == ['h', 'e']",
        "num_ids": 1294,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(x) for x in str(n))\n",
        "test": "assert     (sum_digits(0) == 0)",
        "num_ids": 746,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([1,3,2]) == False",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n",
        "test": "assert     type(empty_list(3)) == list",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[x[i] for x in list1] for i in range(len(list1[0]))]\n",
        "test": "assert     sort_sublists([['a1', 'b1', 'c1'], ['a2', 'b2', 'c2'], ['a3', 'b3', 'c3']]) == [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3']]",
        "num_ids": 1796,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 35,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    x = []\n    for i in nums:\n        if i not in x:\n            x.append(i)\n    return x\n",
        "test": "assert     two_unique_nums([]) == []",
        "num_ids": 1766,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_data = []\n    for num in list_data:\n        if num not in unique_data:\n            unique_data.append(num)\n    product = 1\n    for num in unique_data:\n        product *= num\n    return product\n",
        "test": "assert     unique_product([1,1,1,1,1,1,1,1]) == 1, \"function unique_product is not working correctly\"",
        "num_ids": 3133,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return np.pi*r**2+np.pi*r*h+2*np.pi*h*r\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*np.pi*r**2\n    \ndef surfacearea_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*r**2\n    \ndef surfacearea_prism(r,h):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return 2*np.pi*r**2+2*np.pi*r*h+2*np.pi*h*r\n",
        "test": "assert     surfacearea_cylinder(2,2)     ==  4 * math.pi * 2**2",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B): \n        return False \n    \n    #since it is possible that B is a sublist of A, we use a for loop to check\n    #if A[0] == B[0] and A[1] == B[1] and A[2] == B[2] and A[3] == B[3] and A[4] == B[4] and A[5] == B[5] and...:\n    for i in range(len(B)): \n        if A[i] == B[i]: \n            pass \n        else: \n            return False \n    \n    return True \n",
        "test": "assert     is_Sub_Array([1, 2, 3], [1, 2, 3]) == True",
        "num_ids": 1487,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    temp = 1\n    while(n > 0):\n        temp = temp * n % 10\n        n = int(n/10)\n    return temp\n",
        "test": "assert     last_Digit_Factorial(10) == 0, \"Test 2 failed\"",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i = i + 1\n    return result\n",
        "test": "assert     interleave_lists([],[],[]) == []",
        "num_ids": 2253,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [x for x in test_tup1 if x not in test_tup2]\n",
        "test": "assert     find_dissimilar(('x','y','a','b'),('x','y','a','b')) == []",
        "num_ids": 2254,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n",
        "test": "assert         (even_ele(((1,2,3,4,5), (1,2,3,4,5,6), (1,2,3), (1,2,3,4), (1,2,3,4,5)), ",
        "num_ids": 4390,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)\n    return area\n",
        "test": "assert     surface_Area(1,1) == 1,    \"Wrong surface area\"",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not bool(dict1)\n",
        "test": "assert     my_dict({}) == True",
        "num_ids": 847,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 28,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    catalan_numbers = []\n    for n in range(num+1):\n        catalan_numbers.append(0)\n    catalan_numbers[0] = 1\n    \n    for i in range(1,num+1):\n        for j in range(i):\n            catalan_numbers[i] = catalan_numbers[i] + catalan_numbers[j]*catalan_numbers[i-j-1]\n    \n    return catalan_numbers[num]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 2993,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_pos=[]\n    if not isinstance(text,str):\n        return ly_pos\n    text=text.lower()\n    regex = re.compile(r'(.*ly$)')\n    regex.findall(text)\n    for match in regex.finditer(text):\n        ly_pos.append(match.start())\n    return ly_pos\n",
        "test": "assert     re.findall(r'\\w+ly$','stringly') == ['stringly']",
        "num_ids": 1714,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==0:\n        return []\n    if len(items)<n:\n        return []\n    sorted_items = []\n    for item in items:\n        if len(sorted_items)<n:\n            heapq.heappush(sorted_items,item)\n        else:\n            if item<sorted_items[0]:\n                heapq.heappop(sorted_items)\n                heapq.heappush(sorted_items,item)\n    return sorted_items\n",
        "test": "assert [5]",
        "num_ids": 1892,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    list1 = l[:n]\n    list2 = l[n:]\n    return list1 + list2\n",
        "test": "assert     split_Arr([1, 2, 3, 4, 5, 6], 7) == [1, 2, 3, 4, 5, 6], \"incorrect\"",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1,2,3])     ==    (1,2,3)",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([5, 4, 3, 2, 1]) == 4",
        "num_ids": 3111,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            result.append(i)\n    return result\n",
        "test": "assert     perfect_squares(1, 4) == [1, 4], \"1, 4 => 1, 4\"",
        "num_ids": 1386,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\n",
        "test": "assert     polar_rect(1,0) == (1,0)",
        "num_ids": 1415,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n",
        "test": "assert     (swap_List([1,2,3,4,5]) == [5,2,3,4,1]), 'Failed test for swap_List'",
        "num_ids": 3405,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    f = math.factorial\n    return f(n) / f(k) / f(n-k)\n",
        "test": "assert     binomial_Coeff(1,0)    == 1",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    numList = re.findall(r'\\d+',ip)\n    ip = '.'.join(numList)\n    return ip\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from a port number.\n    '''\n    numList = re.findall(r'\\d+',port)\n    port = ''.join(numList)\n    return port\ndef remove_trail_zero(port):\n    '''\n    Write a function to remove trailing zeroes from a port number.\n    '''\n    port = port.strip('0')\n    return port\ndef check_ip_port(ip,port):\n    '''\n    Write a function to check whether a port is open, the ip is a valid ip address and port is a valid port number.\n    '''\n    if re.match('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$',ip) and port.isdigit():\n        if int(port)>0 and int(port)<65535:\n            return True\n    return False\ndef check_ip_port_2(ip,port):\n    '''\n    Write a function to check whether a port is open, the ip is a valid ip address and port is a valid port number.\n    '''\n    ip_pattern = r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n    if re.match(ip_pattern,ip) and port.isdigit():\n        if int(port)>0 and int(port)<65535:\n            return True\n    return False\n",
        "test": "assert removezero_ip('12345678') == '12345678'",
        "num_ids": 1735,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if list1[0] % 2 == 0:\n        return list1[1] - list1[0]\n    else:\n        return list1[0] - list1[1]\n",
        "test": "assert     diff_even_odd([5, 5]) == 0",
        "num_ids": 1882,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i] :\n            count += 1\n            str1 = str1[:i] + str1[i+1:] + str1[i] + str1[i+1:]\n            str2 = str2[:i] + str2[i+1:] + str2[i] + str2[i+1:]\n    return count\n",
        "test": "assert     min_Swaps('010101010','010101010') == 0",
        "num_ids": 9271,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "test": "assert     tuple_size((1,2,3,4,5,6,7,8,9,10)) == 120",
        "num_ids": 8111,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i+=1\n        elif arr2[j] < arr1[i]:\n            j+=1\n        else:\n            j+=1\n            i+=1\n    if i < len(arr1):\n        return arr1[i]\n    elif j < len(arr2):\n        return arr2[j]\n    else:\n        return False\n",
        "test": "assert     find_kth([0], [], 0) == 0",
        "num_ids": 2298,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    if number > 0:\n        length = len(num)\n        total = 0\n        for i in range(length):\n            total += int(num[i])**length\n        return total == number\n    else:\n        return False\n",
        "test": "assert     not armstrong_number(10)",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return sum_average(number - 1) + number\n",
        "test": "assert     sum_average(1) == 1",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #Using modulo operator\n    if n % 2 == 0 : \n        return True\n    else :\n        return False\n",
        "test": "assert     is_Even(2) == True",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    mydict = {}\n    for i in str1:\n        if i not in mydict.keys():\n            mydict[i] = 1\n        else:\n            return i\n",
        "test": "assert     first_repeated_char('axb') == None",
        "num_ids": 1078,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    l = [1, 2]\n    for i in range(3, n + 1):\n        if i%2 == 0 and i%3!= 0:\n            l.append(i)\n    return l\n",
        "test": "assert     get_ludic(1) == [1]",
        "num_ids": 4594,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    return \" \".join(s)\n    \n    \n    \ndef reverse_words_2(s):\n    return \" \".join(s.split()[::-1])\n",
        "test": "assert     reverse_words('') == ''",
        "num_ids": 1183,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2,int(num**(1/2))+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(2)",
        "num_ids": 993,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "test": "assert     radian_degree(180) == math.pi, \"WRONG\"",
        "num_ids": 2978,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None\n",
        "test": "assert         re.findall(r'(\\d+)\\s(\\d+)\\s(\\d+)', '1 2 3') == [('1', '2', '3')]",
        "num_ids": 1527,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    l=[1]\n    for i in range(1,n):\n        l.append(l[i-1]*(n-i))\n    return l[n-1]\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for item in list1:\n        if list1.index(item)!= L:\n            new_list.append(item)\n    return new_list\n",
        "test": "assert     remove_kth_element([1,2,3,4,5], 2) == [1, 2, 4, 5]",
        "num_ids": 1811,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    test_list.sort(key=lambda x: x[N-1])\n    return test_list[-1][N-1]\n",
        "test": "assert     max_of_nth([[10,1,2],[3,4,5]], 2) == 4",
        "num_ids": 1702,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0],lst[i][1]] for i in range(len(lst))]\n",
        "test": "assert     merge([['a', 'b'], ['c', 'd']])    == [['a','b'], ['c','d']]",
        "num_ids": 1883,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list.sort()\n    cum_sum = [i for i in test_list]\n    print(cum_sum)\n    for i in range(1, len(test_list)):\n        cum_sum[i] = cum_sum[i-1] + test_list[i]\n    return cum_sum\n",
        "test": "assert     cummulative_sum([0,0,0])==[0,0,0]",
        "num_ids": 3328,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(num)/len(num)) for num in zip(*nums)]\n",
        "test": "assert     (average_tuple(())) == []",
        "num_ids": 1426,
        "indeed": true
    },
    {
        "number": 616,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n",
        "test": "assert     tuple_modulo( (10,20,30,40,50),(1,2,3,4,5) ) == (0,0,0,0,0)",
        "num_ids": 1711,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jump = 0\n    cur = 0\n    if steps == 0:\n        return 0\n    while cur < d:\n        if cur + 1 < d:\n            jump += 1\n            cur += 1\n        else:\n            return -1\n    return jump\n",
        "test": "assert     min_Jumps(10, 0) == 0",
        "num_ids": 1619,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert(isinstance(nums1, list) and isinstance(nums2, list)), \"Inputs must be lists\"\n    return [x/y for x,y in zip(nums1, nums2)]\n",
        "test": "assert     div_list( [0,0,0,0], [2,4,6,8] ) == [0,0,0,0]",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([s for s in test_str if not s.isdigit()]) + ''.join([s for s in test_str if s.isdigit()])\n",
        "test": "assert     move_num('') == ''",
        "num_ids": 1552,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    size = 0\n    result = []\n    for i in range(len(a)-1):\n        if a[i]%a[i+1] == 0:\n            result.append(a[i+1])\n            size+=1\n    if a[-1]%a[0] == 0:\n        result.append(a[0])\n        size+=1\n    return size\n",
        "test": "assert     largest_subset([1]) == 1",
        "num_ids": 3764,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return (arr1[0] + arr2[0])/2\n    if n == 2:\n        return (arr1[0] + arr2[1])/2\n    if n % 2 == 0:\n        return get_median(arr1[n//2:], arr2[:(n//2)], n//2)\n    else:\n        return get_median(arr1[:(n//2)], arr2[n//2:], n//2)\n",
        "test": "assert     get_median([1, 2, 3], [4, 5, 6], 0) == None",
        "num_ids": 1808,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==1:\n        return nums\n    else:\n        return [x**n for x in nums]\n",
        "test": "assert     nth_nums([1,2,3,4,5],2) == [1, 4, 9, 16, 25]",
        "num_ids": 1088,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string[0] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return True\n    else:\n        return False\n",
        "test": "assert     is_upper('This is a string')",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return newList\n    elif len(newList) == 1:\n        return newList\n    else:\n        return newList[-1:] + newList[1:-1] + newList[:1]\n",
        "test": "assert     swap_List([1, 2, 3])    == [3, 2, 1], 'incorrect'",
        "num_ids": 1335,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    def triangle_area(r) :  \n    \n        if r > 0 :  \n            return r**2*pi\n        else :  \n            return 0\n    return triangle_area(r)\n",
        "test": "assert     triangle_area(0) == 0",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if end<start:\n        return start+1\n    if array[start]!=start:\n        return start\n    if array[end]!=end+1:\n        return end+1\n    return find_First_Missing(array,start+1,end-1)\n",
        "test": "assert     find_First_Missing([0, 1, 3]) == 2",
        "num_ids": 1988,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split())\n",
        "test": "assert     replace_spaces(\"\") == \"\"",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_even = []\n    for item in list:\n        if item % 2 == 0:\n            list_even.append(item)\n    return list_even\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10]",
        "num_ids": 1454,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # your code here\n    return [ (x,y) for x,y in zip(ele, sub) ]\n",
        "test": "assert     len(adjac( (0,0), [])) == 0",
        "num_ids": 2415,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if not text:\n        return ''\n    else:\n        res = []\n        for c in text:\n            if c.isspace():\n                res.append('_')\n            else:\n                res.append(c)\n        return ''.join(res)\n",
        "test": "assert     replace_spaces('1') == '1'",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        for j in range(i+1,len(num_list)):\n            if num_list[i] == 0:\n                temp = num_list[i]\n                num_list[i] = num_list[j]\n                num_list[j] = temp\n    return num_list\n",
        "test": "assert     move_zero([]) == [], \"Wrong Result\"",
        "num_ids": 4207,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return arr[0]\n    else : \n        return arr[0] ^ pair_xor_Sum(arr[1:],n-1)\n",
        "test": "assert     pair_xor_Sum([0,0,0],0) == 0",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for v in iterable:\n        hq.heappush(h, v)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     list(heap_sort([])) == []",
        "num_ids": 1286,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 31,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True\n",
        "test": "assert     noprofit_noloss(0,0) == True",
        "num_ids": 2766,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Using wind chill index equation:\n    wci = 35.74 + 0.6215*t + (0.4275*t - 35.75) * math.pow(v,0.16)\n    return int(round(wci,0))\n",
        "test": "assert     wind_chill(30,10) == -12.0",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    final_names = []\n    for sample_name in sample_names:\n        if sample_name[0].isupper():\n            final_names.append(sample_name)\n    return sum(map(len, final_names))\n",
        "test": "assert     sample_nam(['a', 'b', 'c']) == 0",
        "num_ids": 5537,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^()]*\\)', '', items)\n",
        "test": "assert     remove_parenthesis('1 + 2') == '1 + 2'",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 0\n    b = 0\n    c = 1\n    for i in range(n):\n        a, b, c = b, c, a+b+c\n    return c\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 24,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z', text) is None:\n        return False\n    else:\n        return True\n",
        "test": "assert         text_match_wordz_middle('z') == True",
        "num_ids": 7281,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) == 0:\n        return input\n    else:\n        i = 0\n        if k > len(input):\n            return input\n        while i < k:\n            input[i],input[len(input)-1-i] = input[len(input)-1-i], input[i]\n            i += 1\n        return input\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5], 6) == [1,2,3,4,5]",
        "num_ids": 1998,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    return tuple(test_tup)\n",
        "test": "assert     add_dict_to_tuple((1,2), {'a': 1, 'b': 2}) == (1,2,{'a': 1, 'b': 2})",
        "num_ids": 1420,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Get the dimensions of the matrix\n    rows, cols = len(cost), len(cost[0])\n    # Initialize a 2D array to store the result\n    result = [[0 for x in range(cols)] for y in range(rows)]\n    # Initialize a 2D array to store the max value from previous row\n    prevRow = [[0 for x in range(cols)] for y in range(rows)]\n    # Initialize a 2D array to store the max value from previous column\n    prevCol = [[0 for x in range(rows)] for y in range(cols)]\n    # Initialize a 2D array to store the max value from the cell (i,j)\n    prevCell = [[0 for x in range(rows)] for y in range(cols)]\n    # Iterate for each cell\n    for i in range(rows):\n        for j in range(cols):\n            # If the cost is 0, ignore it\n            if cost[i][j] == 0:\n                result[i][j] = 0\n            # If the cost is negative, ignore it\n            elif cost[i][j] < 0:\n                result[i][j] = -1\n            # If the cost is positive, update the cell with previous max value\n            else:\n                result[i][j] = cost[i][j] + max(prevRow[i][j], prevCol[j][i])\n                # Update the previous cell to be equal to result from above\n                prevCell[i][j] = result[i][j]\n                # Update the previous row and column to be equal to the result from above\n                prevRow[i][j] = max(prevRow[i][j], prevCol[j][i])\n                prevCol[j][i] = max(prevRow[i][j], prevCol[j][i])\n    # Find the maximum sum from the previous cell\n    # Sum the values in the result array\n    maxTotal = 0\n    for i in range(rows):\n        for j in range(cols):\n            maxTotal += result[i][j]\n    # Return the maximum sum\n    return maxTotal / (rows*cols)\n",
        "test": "assert         (maxAverageOfPath([[1]]) == 1)",
        "num_ids": 4253,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res = {}\n    for student in students:\n        if students[student][0] >= h and students[student][1] >= w:\n            res[student] = students[student]\n    return res\n",
        "test": "assert     filter_data({'Sandy':(180.1,78.7),'James':(170.1,75.6),'Mary':(160.6,74.7),'John':(150.5,74.8)},180,80)!= {'Sandy':(180.1,78.7),'James':(170.1,75.6),'Mary':(160.6,74.7),'John':(150.5,74.8)}",
        "num_ids": 3578,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    i, j = 0, 0\n    count = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            count += 1\n        if nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return count\n",
        "test": "assert     count_same_pair([1,1,1],[1,2,3]) == 1",
        "num_ids": 1950,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        return 0\n    elif power == 0:\n        return 1\n    else:\n        return base * power_base_sum(base, power - 1)\n",
        "test": "assert     power_base_sum(1, 1) == 1",
        "num_ids": 1122,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list_of_strings = re.findall('\\\"(.*?)\\\"', text1)\n    return list_of_strings\n",
        "test": "assert     extract_quotation(\"\\\"How can I help you\\\"\") == [\"How can I help you\"]",
        "num_ids": 1187,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) == 0:\n        return tuple()\n    if len(test_tup) == 1:\n        return (test_tup[0],)\n    else:\n        return (test_tup[0],) + multiply_elements(test_tup[1:])\n",
        "test": "assert     multiply_elements(()) == ()",
        "num_ids": 1567,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==0:\n        return lst2\n    elif len(lst2)==0:\n        return lst1\n    else:\n        return lst1+lst2\n",
        "test": "assert     sum_list([],[]) == []",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 730,
        "max_answer_num": 23,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # dups = [k for k, g in groupby(nums)]\n    # res = []\n    # for item in dups:\n    #     res.append(item)\n    # return res\n    return [item for item, _ in groupby(nums)]\n",
        "test": "assert     consecutive_duplicates([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]",
        "num_ids": 4142,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #S = 2.22*pi*r*h\n    \n    return 2.22*math.pi*r*h\ndef cone_basearea(r,h):\n    '''\n    Write a function to find the base area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #A = 1.01*pi*r^2\n    \n    return 1.01*math.pi*r*r\ndef cone_height(r,h):\n    '''\n    Write a function to find the height of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #h = h/2\n    \n    return h\ndef cone_basearea(r,h):\n    '''\n    Write a function to find the base area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #A = 1.01*pi*r^2\n    \n    return 1.01*math.pi*r*r\ndef cone_sidearea(r,h):\n    '''\n    Write a function to find the side area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #A = 1.01*pi*r^2\n    \n    return 1.01*math.pi*r*r\ndef cone_surfacearea(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #S = 2.22*pi*r*h\n    \n    return 2.22*math.pi*r*h\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_vaparea(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*h*h\ndef cone_area(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #A = 1.01*pi*r^2\n    \n    return 1.01*math.pi*r*r\ndef cone_volumeparsec(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_vaparea(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_secvol(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_height(r,h):\n    '''\n    Write a function to find the height of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #h = h/2\n    \n    return h\ndef cone_sidearea(r,h):\n    '''\n    Write a function to find the side area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #A = 1.01*pi*r^2\n    \n    return 1.01*math.pi*r*r\ndef cone_surfacearea(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #S = 2.22*pi*r*h\n    \n    return 2.22*math.pi*r*h\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_vaparea(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_area(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #A = 1.01*pi*r^2\n    \n    return 1.01*math.pi*r*r\ndef cone_volumeparsec(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_vaparea(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_secvol(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_volumetometer(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_volumetometer2(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_volumetometer3",
        "test": "assert     lateralsurface_cone(4,3) == 15.0",
        "num_ids": 3515,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[\\s,]+',':',text)\n    return text\ndef format_address(address_string):\n    '''\n    Write a function to capitalize the first and last name in an address string\n    in the form of \"firstname lastname address\"\n    '''\n    return replace_specialchar(address_string.replace(',','').replace('.','').replace(' ',', ').title())\n",
        "test": "assert     replace_specialchar(\"\") == \"\"",
        "num_ids": 1265,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A)-1\n    while i <= j:\n        mid = (i+j)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 2, 2, 2, 3], 1) == 0",
        "num_ids": 1966,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    result = arr[0]\n    for i in range(1,len(arr)):\n        temp = arr[i]\n        for j in range(i):\n            temp = temp*arr[j]\n        result = result + temp\n    return result\n",
        "test": "assert     (sum_Of_Subarray_Prod([-2,-1]) == 0)",
        "num_ids": 1507,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    i=1\n    while i<n:\n        bit = n & 1\n        n >>= 1\n        n |= bit << (i-1)\n        i += 1\n    return n\n",
        "test": "assert     (10 & (10 << 1)) == 0",
        "num_ids": 2951,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n",
        "test": "assert     left_insertion([], 7) == 0",
        "num_ids": 1188,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = string.lower()\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n",
        "test": "assert     not check_str('rty'),     'Fail: rty should not be a starting word'",
        "num_ids": 1111,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #print \"Calling find_Index() with n =\", n \n    i = 1\n    while i < n: \n        i += 1\n    return i - 1\n",
        "test": "assert     (find_Index(0) == 0)",
        "num_ids": 1592,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    temp_dict = {}\n    for key, value in zip(test_tup, test_tup[1:]):\n        temp_dict[key] = value\n    return temp_dict\n",
        "test": "assert     tuple_to_dict((5,5,5,5,5)) ==     {5:5}",
        "num_ids": 1524,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s))==1 :\n        return True\n    else :\n        return False\n",
        "test": "assert     all_Characters_Same('S\\r\\x85\\x81\\x81\\x90\\x81\\x10\\x06\\x01') == False",
        "num_ids": 1117,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side = float(side)\n    area = (3 * (side ** 2)) / 4\n    return area\n",
        "test": "assert     area_tetrahedron(4) == 12.0",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1,2,3,4,5], 0) == [1,2,3,4,5]",
        "num_ids": 1037,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert     check_none((0, None, 1, 2)) == True",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 390,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #assign a variable to startnum\n    #variable to endnum\n    #variable to result\n    #variable to loop through each number from startnum to endnum\n    #variable to use to store result of divisible by each digit\n    #variable to store result\n    #create a function for divisible by digits\n    #loop through each number from startnum to endnum\n        #store result of each number to result\n        #loop through each digit in each number\n            #if each number is divisible by that digit, add it to variable to store result\n    #return result\n    return list(filter(lambda x: all(x % i == 0 for i in map(int, str(x))), range(startnum, endnum + 1)))\n",
        "test": "assert     divisible_by_digits(1, 9) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 2898,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    \n    \n    if a>360:\n        return None\n    else:\n        area = (math.pi*r**2)*(a/360)\n        return area\n",
        "test": "assert     sector_area(2, 360.1) == None",
        "num_ids": 1191,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n1 = len(X) \n    n2 = len(Y) \n    n3 = len(Z) \n    if (n1 == 0): \n        return n2 \n    if (n2 == 0): \n        return n3 \n    if (n3 == 0): \n        return n1 \n    L = [[[0 for i in range(n3 + 1)] for j in range(n2 + 1)] for k in range(n1 + 1)] \n    for i in range(n1 + 1): \n        for j in range(n2 + 1): \n            for k in range(n3 + 1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]): \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n    return L[n1][n2][n3] \n",
        "test": "assert     lcs_of_three('x', 'xx', 'xx') == 1",
        "num_ids": 2585,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub(r'(?<=[a-z])([A-Z])', r' \\1', str1)\n    return result\n",
        "test": "assert     capital_words_spaces(\"\") == \"\"",
        "num_ids": 1739,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n",
        "test": "assert     sort_numeric_strings([ '2', '1', '3', '8', '9', '5', '7', '4', '6', '10', '11', '0']) == [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']",
        "num_ids": 2845,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([1, 2, 3], (4, 5, 6))",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child_i = 2*i + 1\n    right_child_i = 2*i + 2\n    left_child_exists = True if left_child_i < len(arr) else False\n    right_child_exists = True if right_child_i < len(arr) else False\n    if left_child_exists and arr[left_child_i] < arr[i]:\n        return False\n    if right_child_exists and arr[right_child_i] < arr[i]:\n        return False\n    if left_child_exists:\n        if right_child_exists:\n            if arr[left_child_i] > arr[right_child_i]:\n                return False\n    return True\n",
        "test": "assert     check_min_heap_helper([1, 2, 3, 4, 5], 0) == True",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0: return 0\n    if n==1: return 1\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 3130,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(K):\n        min_list.append(test_list[i])\n    min_list.sort()\n    return min_list\n",
        "test": "assert     min_k([(1,2,3), (2,3,4), (3,4,5)], 3) == [(1,2,3), (2,3,4), (3,4,5)]",
        "num_ids": 4129,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l4 = []\n    for x in l1:\n        if x in l2 and x in l3:\n            l4.append(x)\n    return l4\n",
        "test": "assert     extract_index_list(list(range(0,5)), list(range(1,8)), list(range(5,9))) == []",
        "num_ids": 2677,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return sorted(numbers)[1]\n    if len(numbers) == 3:\n        return sorted(numbers)[1]\n    if len(numbers) == 4:\n        return sorted(numbers)[1]\n    else:\n        numbers.sort()\n        return numbers[2]",
        "test": "assert     second_smallest([2, 2, 2, 2, 2]) == 2",
        "num_ids": 1336,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return bool(re.search(r'a*b', text))\n",
        "test": "assert     text_match_zero_one('aab') == True",
        "num_ids": 3366,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j][::-1] and i < j:\n                count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs(['abc', 'bcd', 'bef', 'cde']) == 0",
        "num_ids": 3974,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    list2 = []\n    \n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n    \n    list3 = {}\n    \n    for i in range(len(list2)):\n        for j in range(len(list1)):\n            if list2[i] == list1[j]:\n                if tuple([list2[i]]) not in list3:\n                    list3[tuple([list2[i]])] = 1\n                else:\n                    list3[tuple([list2[i]])] += 1\n    \n    return list3\n",
        "test": "assert     unique_sublists([1,2,3,4,5]) == {(1,):1,(2,):1,(3,):1,(4,):1,(5,):1}",
        "num_ids": 4793,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True\n",
        "test": "assert     is_decimal('12.34')",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(0, len(arr)):\n        if arr.count(arr[i]) > 1:\n            return False\n    return True\n",
        "test": "assert     unique_Element([1,2,2,3,4,5,6]) == False",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 27,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3) in (1,3,5,7,8,10,12):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(1)",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = 1000000000\n    for i in range(0,n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n",
        "test": "assert     find_min_diff([1,3,5,6],2) == 2",
        "num_ids": 1537,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\n",
        "test": "assert     number_ctr(\"\") == 0",
        "num_ids": 2006,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    arr = [1,1] \n    for i in range(2,n): \n        arr.append(arr[i-1] + arr[i-2]) \n    return arr[n-1] \n    \ndef nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    arr = [1,1] \n    for i in range(2,n): \n        arr.append(arr[i-1] + arr[i-2]) \n    return arr[n-1] \n",
        "test": "assert     is_polite(1) == 1",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(0,len(l1)-1)]\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 1436,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert     get_pairs_count([1, 2, 3, 4, 5, 6, 7], -3) == 0",
        "num_ids": 1669,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [li1[i] for i in range(len(li1)) if li1[i] not in li2]\n    return li_dif\n    \ndef Diff2(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n    \ndef Diff3(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li2)-set(li1))\n",
        "test": "assert     Diff([1, 2, 3, 4, 5], []) == [1, 2, 3, 4, 5]",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 1:\n        return 1\n    return n**4 + odd_num_sum(n-1)\n",
        "test": "assert     odd_num_sum(1) == 1",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for letter in exp:\n        if letter == '(':\n            stack.append(letter)\n        elif letter == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     check_expression(\"a+(b*(c+d)*(e+f))*g)\")     ==    False",
        "num_ids": 1882,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = ''\n    for i in range(len(test_str)):\n        if test_str[i]!='':\n            new_str += test_str[i]\n        elif test_str[i] =='':\n            if len(new_str) > K:\n                new_str = new_str[0:-K]\n    return new_str\n",
        "test": "assert     remove_length('', 0) == ''",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m=re.search(pattern,text)\n    if m:\n        print(m.start())\n        print(m.end())\n        print(m.span())\n    else:\n        print(None)\n",
        "test": "assert     occurance_substring('aaa', 'b') == None",
        "num_ids": 1415,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n",
        "test": "assert     odd_position([1,2,3,4,5,6,7,9]) == False",
        "num_ids": 1585,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i-1] in 'aeiou' and test_str[i+1] in 'aeiou':\n            vowel_count += 1\n    return vowel_count\n",
        "test": "assert     count_vowels(\"\") == 0",
        "num_ids": 3395,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = [int(i) for i in arr]\n    arr.sort()\n    #print(arr)\n    s = set()\n    res = 0\n    for i in arr:\n        if i not in s:\n            s.add(i)\n            res += i\n    return res\n",
        "test": "assert     find_sum([]) == 0",
        "num_ids": 1382,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[x]*len(list(group)) for x, group in groupby(list1)]\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 4326,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Counting the number of occurences of each list\n    counts = {}\n    for i in list1:\n        if tuple(i) in counts:\n            counts[tuple(i)] += 1\n        else:\n            counts[tuple(i)] = 1\n    return counts\n",
        "test": "assert     unique_sublists([[1,2],[2,3],[3,4]]) == {tuple(l): 1 for l in [[1,2],[2,3],[3,4]]}",
        "num_ids": 1606,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuple_comb = []\n    for l in test_list:\n        l = list(l)\n        for i in combinations(l,2):\n            tuple_comb.append(i)\n    return tuple_comb\n",
        "test": "assert find_combinations([]) == []",
        "num_ids": 6633,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divs = 0\n    for i in range(1,n):\n        if n%i == 0 : \n            divs+=1\n    return divs%2 == 0\ndef is_prime(n):\n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef get_prime_factors(n) :\n    '''\n    Write a python function to get prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    primes = []\n    for i in range(2,n+1):\n        if is_prime(i) :\n            primes.append(i)\n    return primes\ndef is_perfect(n) :\n    '''\n    Write a python function to check whether a number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum+=i\n    return sum == n\ndef is_palindrome(n) :\n    '''\n    Write a python function to check whether a number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    return str(n) == str(n)[::-1]\ndef get_palindrome_factors(n) :\n    '''\n    Write a python function to get all palindrome factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if is_palindrome(n) :\n        return [n]\n    else :\n        for i in range(1,n):\n            if is_palindrome(i) and n%i == 0:\n                return [n,i]\ndef get_factors(n) :\n    '''\n    Write a python function to get factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef get_large_factors(n) :\n    '''\n    Write a python function to get factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    factors = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef get_small_factors(n) :\n    '''\n    Write a python function to get factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    factors = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef get_divisors(n) :\n    '''\n    Write a python function to get all divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors\ndef get_perfect_divisors(n) :\n    '''\n    Write a python function to get all perfect divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if is_perfect(i) and i not in divisors:\n            divisors.append(i)\n    return divisors\ndef get_amicable_numbers(n) :\n    '''\n    Write a python function to get all amicable numbers up to a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    amicable_numbers = []\n    for i in range(1,n+1):\n        if is_amicable(i) and i not in amicable_numbers:\n            amicable_numbers.append(i)\n    return amicable_numbers\ndef get_amicable_pairs(n) :\n    '''\n    Write a python function to get all amicable pairs up to a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    amicable_pairs = []\n    for i in range(1,n+1):\n        j = get_amicable_number(i)\n        if i!= j and i < j:\n            amicable_pairs.append([i,j])\n    return amicable_pairs\ndef get_amicable_number(n) :\n    '''\n    Write a python function to get the amicable number of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if is_amicable(n) :\n        return n\n    else :\n        return get_amicable_number(n-1)\ndef get_factorial(n) :\n    '''\n    Write a python function to get factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial*i\n    return factorial\ndef get_factorial_factors(n) :\n    '''\n    Write a python function to get factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef get_factors_sum(n) :\n    '''\n    Write a python function to get sum of factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    return sum(factors)\ndef get_factors_prod(n) :\n    '''\n    Write a python function to get product of factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    return math.prod(factors)\ndef get_factors_geo_mean(n) :\n    '''\n    Write a python function to get geometric mean of factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n",
        "test": "assert     count_divisors(1) == 1",
        "num_ids": 1135,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    summ = 0\n    for i in range(0, len(arr), 2):\n        summ += sum(arr[i:i+2])\n    return summ\n",
        "test": "assert     odd_length_sum([1]) == 1",
        "num_ids": 3047,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    if min_val == max_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / (max_val - min_val)\n    elif max_val == g:\n        h = 2 + (b - r) / (max_val - min_val)\n    else:\n        h = 4 + (r - g) / (max_val - min_val)\n    h *= 60\n    if h < 0:\n        h += 360\n    s = (max_val - min_val) / max_val\n    v = max_val\n    return (h, s, v)\n",
        "test": "assert     rgb_to_hsv(0, 0, 1) == (240, 1, 1)",
        "num_ids": 2499,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    #print even,odd\n    even_product = 1\n    odd_product = 1\n    for i in range(len(even)):\n        even_product *= even[i]\n    for i in range(len(odd)):\n        odd_product *= odd[i]\n    #print even_product,odd_product\n    return even_product*odd_product\n",
        "test": "assert     mul_even_odd([]) == 1",
        "num_ids": 3341,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n",
        "test": "assert     tuple_str_int('(2, 3, 4)')     == (2, 3, 4)",
        "num_ids": 1228,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i == 0 or a[i-1]!= x:\n        return i\n    else:\n        return i-1\n",
        "test": "assert     right_insertion([0,1,2,3,4,5,6,7,8,9], 10) == 10",
        "num_ids": 1209,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a{3}b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert not     text_match_three('baab')",
        "num_ids": 3667,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # create a new tuple\n    new_tuple = (test_str, test_list)\n    # return the new tuple\n    return new_tuple\n",
        "test": "assert     new_tuple([1, 2, 3], \"abc\") == ('abc', [1, 2, 3])",
        "num_ids": 1416,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i + 1) % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "test": "assert     even_position([10])                 == True",
        "num_ids": 1637,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) is tuple:\n        return tuple(remove_nested(element) for element in test_tup)\n    else:\n        return test_tup\n",
        "test": "assert     remove_nested((\"a\", \"b\", \"c\"))    ==    (\"a\", \"b\", \"c\")",
        "num_ids": 1654,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return sum([isinstance(i, list) for i in input_list])\n",
        "test": "assert     count_list([]) == 0",
        "num_ids": 1130,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    i = 0\n    while i < l:\n        if arr[i] == x:\n            return i\n        i += 1\n    return -1\n",
        "test": "assert     last([1,2,3,4,5,6], 1) == 0",
        "num_ids": 3389,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^a.*b$', text)\n    if match:\n        return True\n    return False\n",
        "test": "assert     re.match(r'^.+\\w$', 'a_b') is not None",
        "num_ids": 1096,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum = sum + value\n    return sum\n",
        "test": "assert     return_sum({}) == 0",
        "num_ids": 896,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    l=0\n    r=n\n    s=0\n    \n    while l <= r:\n        if l%2==1:\n            s=s+l\n        l=l+1\n    return s\n",
        "test": "assert     sum_odd(1) == 1",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([1,2,3]) == 6, \"Test 1 failed\"",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d)))\n",
        "test": "assert     left_rotate( 0b00000000, 4)     ==     0b00000000",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n",
        "test": "assert     remove_all_spaces(\"   \") == \"\"",
        "num_ids": 1097,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    else:\n        return 0\n",
        "test": "assert     test_three_equal(2,3,4) == 0",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return 0\n",
        "test": "assert     count_rotation([1,2,3]) == 0, \"Incorrect count_rotation\"",
        "num_ids": 1658,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n & (n-1) == 0) and n!= 0\n",
        "test": "assert     is_perfect_square(15) == False",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return all(x%2 == 0 for x in arr)\n",
        "test": "assert     is_product_even([1, 3, 5, 7, 9]) == False",
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = None\n    for l in lists:\n        if sum(l) > max_sum:\n            max_list = l\n            max_sum = sum(l)\n    return max_list\n",
        "test": "assert     max_sum_list([[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]]) == [1,2,3,4,5,6]",
        "num_ids": 2262,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    lst = []\n    max_len = 0\n    for i in range(0, len(test_str)):\n        if test_str[i] in lst:\n            lst.append(test_str[i])\n        else:\n            max_len = max(max_len, len(lst))\n            lst = []\n            lst.append(test_str[i])\n    max_len = max(max_len, len(lst))\n    return max_len\n",
        "test": "assert     max_run_uppercase('') == 0",
        "num_ids": 1492,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n",
        "test": "assert     first_odd([1,2,3,4]) == 1",
        "num_ids": 1059,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup) == K\n",
        "test": "assert     not check_K(('a','b','c','d','e'), 2)",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(x < y for x, y in zip(test_tup1, test_tup2))\n",
        "test": "assert     check_smaller((4,5,2,2),(4,2,5,7)) == False",
        "num_ids": 1922,
        "indeed": false
    }
]