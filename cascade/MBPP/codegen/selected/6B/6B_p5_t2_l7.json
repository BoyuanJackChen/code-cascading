[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # write your code here\n    # a = set(test_tup1)\n    # b = set(test_tup2)\n    # return list(a & b)\n    return list(set(test_tup1) & set(test_tup2))\n",
        "test": "assert     similar_elements( (1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 7, 6) ) == [1, 2, 3, 4, 6]",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1 or n == 2:\n        return False\n    else:\n        if n%2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n))+1):\n                if n%i == 0:\n                    return False\n    return True\ndef prime_factorization(n):\n    '''\n    Write a python function to find prime factors of a given number.\n    '''\n    i = 2\n    factors = []\n    while n!= 1:\n        if is_not_prime(i):\n            while n%i == 0:\n                factors.append(i)\n                n /= i\n        else:\n            i += 1\n    return factors\n",
        "test": "assert     is_not_prime(2) == False, 'Fail'",
        "num_ids": 2083,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0:\n        return []\n    if nums==[]:\n        return []\n    if n > len(nums):\n        return nums\n    max_heap=[]\n    for num in nums:\n        hq.heappush(max_heap,-num)\n    while len(max_heap)!=n:\n        hq.heappop(max_heap)\n    return [-hq.heappop(max_heap) for i in range(len(max_heap))]\n",
        "test": "assert     hq.nlargest(1,range(4))==[3]",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # return (x & (x - 1)) == 0\n    return (x & (x - 1)) == 0\n",
        "test": "assert     is_Power_Of_Two(0b10010100) == False",
        "num_ids": 2284,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if type(text)!= str:\n        return None\n    \n    words = re.findall('\\w{4,}', text)\n    if words:\n        return words\n    else:\n        return None\n    \ndef find_words_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if type(text)!= str:\n        return None\n    \n    words = re.findall('\\w{4,}', text)\n    if words:\n        return words\n    else:\n        return None\n    \ndef find_words_long2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if type(text)!= str:\n        return None\n    \n    words = re.findall('\\w{4,}', text)\n    if words:\n        return words\n    else:\n        return None\n",
        "test": "assert     find_char_long('I love you.') == ['love']",
        "num_ids": 1248,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # for i in range(len(nums)):\n    #     nums[i] = nums[i]**2\n    # return nums\n    # return [x**2 for x in nums]\n    return list(map(lambda x: x**2, nums))\n",
        "test": "assert     square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    n = len(str)\n    # your code here\n    \n    def helper(s, result):\n        if s == \"\":\n            return result\n        else:\n            if s[0] == s[-1]:\n                result += helper(s[1:-1], result)\n            else:\n                result += helper(s[1:], result)\n            return result\n        \n    return helper(str, 0)\n",
        "test": "assert     find_Rotations(\"abc\") == 0",
        "num_ids": 2390,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1 = s.replace(ch, '')\n    s1 = s1.replace(ch, '')\n    return s1\n    \n",
        "test": "assert     remove_Occ('python','o') == 'hton'",
        "num_ids": 2230,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    return sorted(M, key = lambda row: row_sums.index(sum(row)))\n",
        "test": "assert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    return (b*h)/2.0\n",
        "test": "assert     find_Volume(0,0,0) == 0",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = re.match('^[a-z]*_?[a-z]+$', text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_lowercase_underscore('ABC') == False",
        "num_ids": 2309,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert     square_perimeter(4) == 16,    'Wrong answer: %s' % square_perimeter(4)",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #list1 = list(string)\n    #list2 = list(string2)\n    #list2 = list2[:len(list1)]\n    #return \"\".join(list2)\n    string2 = ''.join(list(string))\n    string1 = list(string)\n    return \"\".join(string1[:len(string2)])\n",
        "test": "assert     str_to_list('geeksforgeeks','eeksfor') == ['g', 'f', 'e', 'e', 'r', 'k','s', 'f', 'o', 'r']",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 1:\n        return False\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n",
        "test": "assert     test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # You may assume woodball numbers are 6-digit numbers.\n    return len(str(x)) == 6\n",
        "test": "assert     is_woodall(0) == False",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (2*(num%10))\n",
        "test": "assert     rev(123) == False",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest_num = -1\n    for i in range(len(arr)) : \n        if arr[i] > largest_num : \n            largest_num = arr[i]\n    return largest_num\n",
        "test": "assert     find_Max_Num([1,9,9,9]) == 9",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0\n",
        "test": "assert     opposite_Signs(1,-1) == True, 'function opposite_Signs(1,-1) returns wrong'",
        "num_ids": 389,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = [1,8,36,64,100,144,196,256,384,512,600,768,1024,1536,2048,3072,4096,65536,858993459]\n    if n <= 0:\n        return False\n    elif n in octagonal:\n        return True\n    else:\n        return is_octagonal(n-1)\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s = list(s)\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[i] = 0\n        for j in range(i,len(s)):\n            d[i] += (len(s[i:j+1])==j-i+1)\n    return d[len(s)-1]\n",
        "test": "assert     count_Substrings('a') == 1",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_val = xs[0]\n    for item in xs:\n        if item < min_val:\n            min_val = item\n    return min_val\n",
        "test": "assert     smallest_num([1,2,3,4,5]) == 1",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    differences = []\n    for i in range(0, len(test_list)):\n        for j in range(i, len(test_list)):\n            differences.append(abs(test_list[i] - test_list[j]))\n    return max(differences)\n",
        "test": "assert ",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subject_marks = sorted(subjectmarks,key=lambda x:x[1])\n    return sorted_subject_marks\n",
        "test": "assert     subject_marks([('English', 78), ('Maths', 98), ('Physics', 91), ('Chemistry', 87), ('Biology', 100)]) == [('Biology', 100), ('Chemistry', 87), ('Physics', 91), ('English', 78), ('Maths', 98)]",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) is list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return list.count('pos')\n",
        "test": "assert     pos_count([]) == 0, 'expect 0'",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    res = [0] * (n + 1)\n    res[0] = 1\n    res[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, i):\n            res[i] += res[j-1] * res[i - j - 1]\n    return res[n]\n",
        "test": "assert     bell_number(1) == 1, \"INCORRECT!\"",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0,len(A)):\n        if A[i]>=A[i-1]:\n            continue\n        else:\n            return False\n    return True\ndef is_Monotonic(A):\n    return all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1))\ndef is_Monotonic(A):\n    return all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1))\n",
        "test": "assert     is_Monotonic([1,2,2,3]) == True",
        "num_ids": 691,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s==[]: return True\n    if len(s) > len(l): return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)]==s: return True\n    return False\n",
        "test": "assert     is_sublist([1,2,3], [1,2,3]) == True",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(x)==len(Input[0]) for x in Input)\n",
        "test": "assert     find_equal_tuple([(1,2,3),(1,2,3),(1,2),(1,2,3)]) == False",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 1055,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n**0.5 == int(n**0.5):\n        return True\n    else:\n        return False\n",
        "test": "assert     dif_Square(5) == False",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if colors[i]==colors[i+1] and colors[i] not in patterns:\n            return False\n    return True\n",
        "test": "assert     is_samepatterns([\"red\", \"yellow\", \"blue\", \"green\", \"blue\", \"orange\", \"red\", \"yellow\", \"green\", \"blue\", \"orange\"], [\"rgb\", \"bgr\", \"gbr\", \"rgg\", \"rrr\", \"bgrr\", \"gbrg\", \"rrgg\", \"rgbr\", \"rgbg\"])",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in test_list:\n        if sum(i)%K==0:\n            divisible_tuples.append(i)\n    return divisible_tuples\n",
        "test": "assert     find_tuples([(1,2),(2,3),(3,4)], 1) == [(1,2),(2,3),(3,4)]",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n",
        "test": "assert     is_Diff(10)     == False",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n",
        "test": "assert     (word_len(\"banana\") == True)",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = 0\n    for i in range(n):\n        tetrahedral += ((1+i)**4)\n    return tetrahedral\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 2892,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n",
        "test": "assert     volume_sphere(4) == 613.61002",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    arr = []\n    for i in range(len(strr)):\n        arr.append(ord(strr[i])%26)\n    return arr\n",
        "test": "assert     get_Char('b') == 98",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*sequence(n-1)\n",
        "test": "assert ",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n",
        "test": "assert     surfacearea_sphere(1) == 4.0 * math.pi",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**2 + n) / 2\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if isinstance(dict1,dict) and isinstance(dict2,dict) and isinstance(dict3,dict):\n        dict_m = dict()\n        for k, v in dict1.items():\n            dict_m[k] = v\n        for k, v in dict2.items():\n            dict_m[k] = v\n        for k, v in dict3.items():\n            dict_m[k] = v\n        return dict_m\n    return {}\n",
        "test": "assert     merge_dictionaries_three({'a':1, 'b':2},{'x':3, 'y':4},{'z':5}) ==     {'a':1, 'b':2, 'x':3, 'y':4, 'z':5}",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = collections.Counter(list1)\n    return counts\n",
        "test": "assert     freq_count(['a','b','c','d']) == collections.Counter(['a','b','c','d'])",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    res = 0\n    for i in range(N-1, 0, -1):\n        if abs(i-N) < abs(res-N):\n            res = i\n    return res\n",
        "test": "assert     closest_num(14) == 13",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #print len(max(list1))\n    return len(max(list1))\n",
        "test": "assert     len_log(['one','two','three']) == 3",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in string for string in str1)\n",
        "test": "assert     find_substring([\"ab\", \"ba\", \"ba\", \"cd\", \"abcd\"], \"ba\") == True",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 2: \n        return False\n    \n    for i in range(2,n): \n        if n % i == 0: \n            return False\n",
        "test": "assert     is_undulating(10) == False, 'wrong answer'",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1/power(a,-b)\n    if b%2 == 0:\n        return power(a*a,b/2)\n    else:\n        return power(a*a,(b-1)/2)*a\n",
        "test": "assert     power(2,3) == 8",
        "num_ids": 394,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # your code here\n    min_value = min(test_list, key=itemgetter(1))\n    return min_value[1]\n",
        "test": "assert     index_minimum([(2,5), (1,2), (4,4), (2,3), (2,1)]) == 1",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_length = len(lst[0])\n    \n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    \n    return min_length\n",
        "test": "assert     Find_Min_Length(['a', 'b', 'c', 'd', 'e']) == 1",
        "num_ids": 622,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    c = 0\n    while i<=n:\n        if n%i==0:\n            c+=1\n        i+=1\n    return c\n",
        "test": "assert     divisor(2) == 2",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for element in list1:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\n",
        "test": "assert     frequency_lists([['hello', 'world'], 'goodbye']) == {",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[0] * multiply_num(numbers[1:])\n",
        "test": "assert     multiply_num([1, 2, 3]) == 6",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n)[2:]) \n",
        "test": "assert     decimal_to_binary(0)         == '0', \"Fail: decimal_to_binary(0)\"",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    num_length = len(num_str)\n    last_half = num_str[num_length // 2:]\n    first_half = num_str[:num_length // 2]\n    if last_half == first_half:\n        num_str = '1' + num_str\n    else:\n        num_str = int(last_half + first_half[1:])\n    return num_str\n",
        "test": "assert     next_smallest_palindrome(7) == 7",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return \"Invalid input\"\n    \n    # sort array\n    arr.sort()\n    # return kth element\n    return arr[k-1]\n",
        "test": "assert     kth_element([1,2,3,4], 1) == 1",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake_case_split = word.split('_')\n    return str.join('',map(str.capitalize,snake_case_split))\n",
        "test": "assert     snake_to_camel('snake_case') == 'SnakeCase'",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    if n == 0:\n        return 0\n    return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n",
        "test": "assert     eulerian_num(0, 0) == 1, \"test case: a(0, 0) = 1\"",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0])\n",
        "test": "assert     sort_sublists([['cat','bat','rat'],['dog','cat','monkey'],['lion','tiger','elephant']]) == [['cat','bat','rat'],['dog','cat','monkey'],['lion','tiger','elephant']]",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for each in lst:\n        if each:\n            cnt += 1\n    return cnt\n",
        "test": "assert     count([True, True, False, True, False]) == 3",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_lists([4,5,6], [1,2,3]) == [4, 5, 6, 1, 2, 3]",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #num1 = [1, 3, 5, 7, 8, 10]\n    #num2 = [2, 4, 6, 9, 11, 15]\n    #num3 = [0, 6, 12]\n    #print(num1)\n    #print(num2)\n    #print(num3)\n    #merge_sorted_list(num1,num2,num3)\n    #print(num1)\n    #print(num2)\n    #print(num3)\n    if(len(num1) == 0):\n        return num2 + num3\n    if(len(num2) == 0):\n        return num1 + num3\n    if(len(num3) == 0):\n        return num1 + num2\n    if(num1[0] < num2[0]):\n        return [num1[0]] + merge_sorted_list(num1[1:], num2, num3)\n    else:\n        return [num2[0]] + merge_sorted_list(num1, num2[1:], num3)\n    \n    \n",
        "test": "assert     merge_sorted_list([], [], []) == []",
        "num_ids": 1363,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n < 0:\n        return odd_Equivalent(s[::-1],n*-1)\n    if n == 0:\n        return 1 if s.count('1')%2==0 else 0\n    rotated_string = s[n:] + s[:n]\n    return len([x for x in rotated_string if x == '1'])%2\n",
        "test": "assert     odd_Equivalent('100110101', 2) == 1",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    common = []\n    for i in nestedlist[0]:\n        if all(i in nestedlist[j] for j in range(1, len(nestedlist))):\n            common.append(i)\n    return common\n",
        "test": "assert     common_in_nested_lists([[], [], []]) == []",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('123') == True",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "test": "assert         empty_dit([{}]*10)",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for x in nums:\n        num = num * 10 + x\n    return num\n",
        "test": "assert     tuple_to_int((1,2,3)) == 123",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        try:\n            result.append(float(i))\n        except:\n            result.append(i)\n    return result\n",
        "test": "assert     list_to_float([1, '2.5', 'a']) == [1, 2.5, 'a']",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "test": "assert     string_to_list('Hello World') == ['Hello', 'World']",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    hashmap = {}\n    for i in range(len(arr)):\n        if arr[i] not in hashmap:\n            hashmap[arr[i]] = 1\n        else:\n            hashmap[arr[i]] += 1\n    for i in range(len(arr)):\n        if hashmap[arr[i]] == 1:\n            return arr[i]\n    return -1\n",
        "test": "assert     search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    t1 = sorted(list1, key = lambda x: abs(x[0]*x[1]), reverse=True)\n    return t1[0]\n",
        "test": "assert     max_product_tuple([(1, 10), (3, 30), (9, 90)]) == (9, 90)",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_ = 0\n    for n in range(1, limit):\n        if is_amicable_number(n):\n            sum_ += n\n",
        "test": "assert     amicable_numbers_sum(200) == 46137",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a.conjugate()\n    angle = math.atan2(b.imag,b.real) - math.atan2(c.imag,c.real)\n    return angle\n",
        "test": "assert     angle_complex(1+0j,0+0j)==0",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    result = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            result = max(result, string[i+1:].count('0'))\n        else:\n            result = max(result, string[i+1:].count('1'))\n    return result\n",
        "test": "assert     find_length(\"011110\") == 3",
        "num_ids": 3763,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lst = []\n    divisors = []\n    for i in range(1,int((b/2)+1)):\n        if b%i == 0:\n            lst.append(i)\n    for j in lst:\n        if j > 1:\n            divisors.append(j)\n    divisors = list(set(divisors))\n    return sum(a,b)\n",
        "test": "assert     sum(6,6) == 6",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    return x*y\n",
        "test": "assert     multiply_int(1, 2) == 2",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert     long_words(2, ['hello', 'world', 'python', 'is', 'cool']) == ['hello', 'world', 'python']",
        "num_ids": 1839,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Method #1:\n    # matrix = map(map,my_matrix)\n    # for row in zip(*matrix):\n    #     if sum(row)!= sum(my_matrix[0]):\n    #         return False\n    # return True\n    # Method #2:\n    # square_sum = []\n    # for i in range(len(my_matrix)):\n    #     square_sum.append(sum(my_matrix[i]))\n    # if sum(square_sum)!= sum(my_matrix[0]):\n    #     return False\n    # return True\n    # Method #3:\n    # if sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix)))!= sum(my_matrix[0]):\n    #     return False\n    # return True\n    # Method #4:\n    # for i in range(len(my_matrix)):\n    #     if not my_matrix[i][i] == sum(my_matrix[i]):\n    #         return False\n    # return True\n    # Method #5:\n    # if sum(my_matrix[0])!= sum(my_matrix[i][i] for i in range(len(my_matrix))):\n    #     return False\n    # if sum(my_matrix[0])!= sum(my_matrix[-1][i] for i in range(len(my_matrix) - 1, -1, -1)):\n    #     return False\n    # if sum(my_matrix[-1])!= sum(my_matrix[i][-1] for i in range(1, len(my_matrix))):\n    #     return False\n    # return True\n    # Method #6:\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    rows, cols = (1,1) if len(my_matrix) < 3 else (2,2) if len(my_matrix) < 5 else (3,3)\n    for i in range(rows):\n        if sum(my_matrix[i])!= sum(my_matrix[0][j] for j in range(cols)):\n            return False\n        if sum(my_matrix[i][-1])!= sum(my_matrix[j][-1] for j in range(1, len(my_matrix)-1)):\n            return False\n        if sum(my_matrix[-1][-1])!= sum(my_matrix[-1][j] for j in range(1, len(my_matrix[0])-1)):\n            return False\n    return True\n    # Method #7:\n    # magic_squares = 0\n    # for i in range(1, int(math.sqrt(len(my_matrix)))+1):\n    #     magic_squares += i**2\n    # if magic_squares!= sum(sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))):\n    #     return False\n    # if magic_squares!= sum(sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0])-1, -1, -1)):\n    #     return False\n    # if magic_squares!= sum(sum(my_matrix[i][j] for i in range(len(my_matrix)-1, -1, -1)) for j in range(len(my_matrix[0]))):\n    #     return False\n    # return True\n",
        "test": "assert     not magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "num_ids": 1917,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    res = nums[0]\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            if count > max_count:\n                res = nums[i-1]\n                max_count = count\n            count = 1\n    if count > max_count:\n        res = nums[-1]\n        max_count = count\n    return res\n",
        "test": "assert max_occurrences([1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3]) == 3",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = list(str1)\n    vowel_list = []\n    for index, value in enumerate(str1):\n        if value in vowels:\n            vowel_list.append(value)\n            str1[index] = vowel_list.pop()\n    str1 = \"\".join(str1)\n    return str1\n",
        "test": "assert reverse_vowels(\"Why not?\") == \"Ycy not?\"",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert     tup_string((1, 2, 3)) == '(1, 2, 3)', \"Failed\"",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_num = 0\n    for num in nums:\n        if num < 0:\n            sum_num += num\n    return sum_num\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    nums = []\n    for i in range(1, n + 1):\n        nums.append(int((i * (i + 1)) / 2))\n    return nums[n - 1]\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        if nums[0] == 0:\n            return 1\n        else:\n            return 0\n    else:\n        n = len(nums)\n        first = 0\n        second = 0\n        if nums[0] == 0:\n            first += 1\n        else:\n            second += 1\n        for i in range(1,n):\n            if nums[i] == 0:\n                first += 1\n            else:\n                second += 1\n        return float(first)/float(second)\n",
        "test": "assert     zero_count([]) == 0",
        "num_ids": 4451,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    number = bin(n)[2:]\n    power_of_two = [2**i for i in range(len(number)) if number[-i-1] == '1']\n    return sum(power_of_two) == n\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(0)",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = math.pi\n    return 2 * pi * r\n    \ndef get_radius(r, length):\n    '''\n    Write a function to calculate the radius of a circle.\n    '''\n    return length / 2 / math.pi\n",
        "test": "assert     circle_circumference(2) == 12.566370614359172",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    res = []\n    for item in test_list:\n        if type(item) == list:\n            res.extend(item)\n        else:\n            res.append(item)\n    return res\n",
        "test": "assert     extract_singly([]).__class__ == list",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    left_most_pos = 0\n    while(length > 1):\n        max_pos = -1\n        for i in range(length):\n            if nums[i] > nums[max_pos]:\n                max_pos = i\n        if max_pos!= length - 1:\n            nums[:max_pos + 1] = nums[:max_pos + 1][::-1]\n            nums[:length - 1] = nums[:length - 1][::-1]\n        if max_pos!= 0:\n            nums[:length - 1] = nums[:length - 1][::-1]\n        left_most_pos = left_most_pos + 1\n        length = length - 1\n    return nums\n",
        "test": "assert     pancake_sort([1,2,3]) == [1,2,3]",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count = count + 1\n    return count\n",
        "test": "assert     count_samepair([1,2,3], [1,2,3], [1,2,3]) == 3",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count = 0\n    if type(Input) == tuple:\n        for i in Input:\n            if type(i) == list:\n                count += 1\n    else:\n        return -1\n    return count\n",
        "test": "assert     find_lists(()) == 0",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        max_diff = max(max_diff, arr[i] - arr[i - 1])\n    return max_diff\n",
        "test": "assert     max_Abs_Diff( [1,2,3,4,5,6,7]) == 1",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = None, None\n    \n    for i in range(0, n):\n        for j in range(0, n):\n            if i * a + j * b == n:\n                x, y = i, j\n    return x, y\n",
        "test": "assert     find_solution(1, 2, 3) == (1, 1)",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            new_list.append(list1[i])\n    return new_list\n",
        "test": "assert         remove_elements([1,2,3,4],[1,2,3]) == [4]",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return (n - 2*sum_series(n - 1)) + sum_series(n - 1)\n",
        "test": "assert     (sum_series(0) == 0)",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # height ='s**2 / (2 * tan(2 * pi / l * n))'\n    # height = '((s**2) / (2 * tan(2 * pi / l * n))) / 2'\n    # height = '2 * s**2 / (tan(2 * pi / l * n) * 2)'\n    height = '2 * s**2 / tan(2 * pi / l * n)'\n    area ='s * l / n'\n    area = '(((s * l) / n)**2) / 4'\n    area ='s * l / n * (2 * n) / 4'\n    area = '((s * l) / n) * (2 * n) / 4'\n    area = '((s * l) / n) * (2 * n) / 4'\n    area = '((s * l) / n) * (2 * n) / 4'\n    return area\n",
        "test": "assert     area_polygon(2, 3) == 12.5",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_divisors(n): \n        i = 1\n        total = 0\n        while i <= math.sqrt(n):\n            if n % i == 0:\n                if n // i == i:\n                    total += i\n                else:\n                    total += i\n                    total += n // i\n            i += 1\n        return total - n\n    num1, num2 = 0, 0\n    num1 = sum_divisors(n)\n    num2 = sum_divisors(n)\n    return num1 == num2\n",
        "test": "assert     div_sum(1) == True",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if alphabet.lower().index(str1[i].lower()) == i:\n            count += 1\n    return count\n",
        "test": "assert     count_char_position('a') == 1",
        "num_ids": 576,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                cnt += 1\n    return cnt\n",
        "test": "assert     find_even_pair([]) == 0",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    x = 1\n    while x <= n:\n        x = x * 2\n    return x\n",
        "test": "assert     next_power_of_2(7) == 8",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x not in a:\n        return 0\n    else:\n        return a.count(x)\n",
        "test": "assert     frequency([1, 2, 3, 4, 4, 4, 4, 5], 5) == 1",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert     sum_range_list([0,1,2,3,4,5,6,7,8,9], 0, 3) == sum([1,2,3])",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * (a**2)\n",
        "test": "assert     perimeter_pentagon(3) == 22",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('std') == 1",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(1,len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n    return True\n",
        "test": "assert     check_type((1,2,3,4,5,5)) == True, 'incorrect'",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == arr[1] and arr[0] == x or arr[1] == arr[0] and arr[1] == x\n    if arr[0] == x:\n        return is_majority(arr[1:], n-1, x)\n    if arr[-1] == x:\n        return is_majority(arr[:-1], n-1, x)\n    else:\n        return is_majority(arr[1:], n-1, x) or is_majority(arr[:-1], n-1, x)\n",
        "test": "assert     is_majority([1, 2, 1, 1, 1, 2, 2, 2], 7, 3) == False",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n &= n - 1\n        count += 1\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list=list(str)\n    if len(str_list)%2==0:\n        for i in range(len(str_list)//2):\n            str_list[i],str_list[-i-1]=str_list[-i-1],str_list[i]\n    return ''.join(str_list)\n",
        "test": "assert     'A-man' == odd_values_string('A-man')",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     min_of_three(3,1,2)    == 1",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #n is the given number\n    #l is the lower bound of the range\n    #r is the upper bound of the range\n    return not any(1<<i for i in range(l,r+1))\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(8,1,10)==False",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n    while j < n and i < len(arr):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n        i += 1\n    return arr\n",
        "test": "assert     re_arrange_array([-6, -3, -2, -1, 0, 2, 1, 3, 6], 3) == [-6, -3, -2, -1, 0, 2, 1, 3, 6]",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    output = ''\n    for letter in str1:\n        if letter =='':\n            letter = char\n        output = output + letter\n    return output\n",
        "test": "assert     replace_blank('hello','a') == 'hello'",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # print list1\n    # max = 0\n    # for i in range(len(list1)):\n    #     if list1[i] > max:\n    #         max = list1[i]\n    # print max\n    # return max\n    # print heapq.nlargest(n, list1)\n    # print heapq.nsmallest(n, list1)\n    # return heapq.nsmallest(n, list1)\n    return heapq.nlargest(n, list1)\n",
        "test": "assert     larg_nnum([0, 1, 3, 5, 8, 7, 2, 4, 6, 9], 4) == [9, 8, 7, 6]",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    L = 2*pi*r\n    H = 2*pi*r*h\n    A = L*H\n    print('The lateral surface area of a cylinder with radius'+ str(r) +'and height'+ str(h) +'is:'+ str(A))\n    \nlateralsuface_cylinder(3,3)\n",
        "test": "assert     lateralsuface_cylinder(2,3) == (pi/4) * (3**2 - 2)",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "test": "assert     volume_cube(2) == 8",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    n_bits = 32\n    n_bit_str = bin(n)[2:]\n    even_bits = []\n    for i in range(len(n_bit_str)):\n        if n_bit_str[i] == '1':\n            if i%2 == 0:\n                even_bits.append('0')\n            else:\n                even_bits.append('1')\n        else:\n            even_bits.append('0')\n    return int(''.join(even_bits), 2)\n",
        "test": "assert     even_bit_set_number(0) == False",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tup in test_list:\n        occurence_dict[tup] = occurence_dict.get(tup,0) + 1\n    return occurence_dict\n",
        "test": "assert check_occurences([('a', 'a', 'a', 'b'), ('a', 'b', 'a', 'b'), ('a', 'a', 'b', 'b'), ('a', 'a', 'a', 'a'), ('a', 'a', 'a', 'a')]) == {('a', 'a', 'a', 'b'): 4, ('a', 'a', 'a', 'b'): 2, ('a', 'a', 'b', 'b'): 2, ('a', 'a', 'b', 'b'): 1, ('a', 'a', 'a', 'a'): 3, ('a', 'a', 'a', 'a'): 1}, \"incorrect\"",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(list(filter(lambda x:x!=\"\",str.split(' '))))\n",
        "test": "assert     number_of_substrings('123') == 1",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    if n == 2:\n        return ((m//2) * (m//2) + (m//2) + 1)\n    return (m*(m+1))/2 + (n-1)\n",
        "test": "assert     get_total_number_of_sequences(5,2) == 7",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        return list1\n    i = len(list1)-1\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    return list1\n",
        "test": "assert     replace_list([1,3,5,7,9,10], [2,4,6]) == [1,3,5,7,9,10]",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str1 = str1\n    charac = len(str1)\n    return charac\n",
        "test": "assert     count_charac('a') == 1",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    A = int(math.sqrt(N))\n    return (A+1)*(A+1)\ndef find_Unsorted_Interval(nums): \n    '''\n    Write a python function to find the Unsorted Interval of a given array. The function should return a tuple consisting of the first and last index of the smallest number out of the numbers in the array. The first element of the tuple is the index of the smallest number, while the last element is the index of the largest number. If there is no number out of the array, then return a tuple with -1 as the first element and -1 as the last element. \n    '''\n    l = []\n    i = 0\n    while i<len(nums): \n        if len(l)==0: \n            l.append(i)\n        else: \n            if nums[i] < nums[l[0]]: \n                l.insert(0,i)\n            elif nums[i] > nums[l[-1]]: \n                l.append(i)\n            else: \n                l.append(i)\n        i+=1\n    return (l[0],l[-1])\ndef break_WAV(st): \n    '''\n    Write a python function to break a string in a WAV sequence. The string can contain special characters such as `{`, `}`, `,`, `[`, `]`, `>`, `<`, `_`, `-`. The function should return a list of strings that each represents a word in the string. If a character is not a letter, it should not be part of the word. \n    '''\n    l = []\n    for i in st: \n        if i.isalpha(): \n            l.append(i)\n    return l\ndef number_of_Vowels(st): \n    '''\n    Write a python function to count the number of vowels in a string. The function should return a count of the vowels in the string. For example, `number_of_Vowels(\"the boy is a boy\")` should return `2`. \n    '''\n    s = 'aeiou'\n    c = 0\n    for i in st: \n        if i in s: \n            c+=1\n    return c\ndef find_Sorted_Interval(nums): \n    '''\n    Write a python function to find the sorted interval of a given array. The function should return a tuple consisting of the first and last index of the smallest number out of the numbers in the array. The first element of the tuple is the index of the smallest number, while the last element is the index of the largest number. If there is no number out of the array, then return a tuple with -1 as the first element and -1 as the last element. \n    '''\n    l = []\n    for i in range(len(nums)): \n        if len(l)==0: \n            l.append(i)\n        else: \n            if nums[i] > nums[l[-1]]: \n                l.append(i)\n            elif nums[i] < nums[l[0]]: \n                l.insert(0,i)\n            else: \n                l.append(i)\n    return (l[0],l[-1])\ndef is_Valid_Permutation(nums): \n    '''\n    Write a python function to check whether a given string is a valid permutation of a given dictionary. The function should return a boolean value. \n    '''\n    d = {}\n    for i in nums: \n        if i in d: \n            d[i]+=1\n        else: \n            d[i]=1\n    n = 0\n    for i in nums: \n        if i in d: \n            n+=1\n    if n == len(nums): \n        return True\n    return False\ndef count_Vowels(st): \n    '''\n    Write a python function to count the number of vowels in a string. The function should return a count of the vowels in the string. For example, `count_Vowels(\"the boy is a boy\")` should return `2`. \n    '''\n    s = 'aeiou'\n    c = 0\n    for i in st: \n        if i in s: \n            c+=1\n    return c\ndef count_Vowels_2(st): \n    '''\n    Write a python function to count the number of vowels in a string. The function should return a count of the vowels in the string. For example, `count_Vowels(\"the boy is a boy\")` should return `2`. \n    '''\n    return len([i for i in st if i in 'aeiou'])\ndef separate_Characters(st): \n    '''\n    Write a python function to separate a string into groups of two characters. The function should return a list of strings which each represent a pair of characters in the string. The number of pairs in the returned list should be equal to the number of characters in the string. \n    '''\n    l = []\n    i = 0\n    while i<len(st): \n        l.append(st[i]+st[i+1])\n        i+=2\n    return l\ndef count_Vowels_3(st): \n    '''\n    Write a python function to count the number of vowels in a string. The function should return a count of the vowels in the string. For example, `count_Vowels(\"the boy is a boy\")` should return `2`. \n    '''\n    s = 'aeiou'\n    c = 0\n    for i in st: \n        if i in s: \n            c+=1\n    return c\ndef is_Valid_Permutation_2(nums): \n    '''\n    Write a python function to check whether a given string is a valid permutation of a given dictionary. The function should return a boolean value. \n    '''\n    d = {}\n    for i in nums: \n        if i in d: \n            d[i]+=1\n        else: \n            d[i]=1\n    n = 0\n    for i in nums: \n        if i in d: \n            n+=1\n    if n == len(nums): \n        return True\n    return False\ndef max_Number_Of_Vowels(st): \n    '''\n    Write a python function to find the maximum number of vowels in a string. The function should return a count of the vowels in the string. For example, `max_Number_Of_Vowels(\"the boy is a boy\")` should return `2`. \n    '''\n    s = 'aeiou'\n    c = 0\n    for i in st: \n        if i in s: \n            c+=1\n    return c\ndef number_of_Subsets(N, r): \n    '''\n    Write a python function to find the number of subsets with a given r-value. The function should return a count of the subsets with a given r-value in the range [0,N]. \n    '''\n    return int(math.factorial(N)/(math.factorial(N-r)*math.factorial(r)))\ndef max_Sum_of_Two_Numbers(nums): \n    '''\n    Write a python function to find the maximum sum of two numbers out of a given array of numbers. The function should return the maximum sum of two numbers out of a given array of numbers. \n    '''\n    l = []\n    for i in range(len(nums)-1): \n        for j in range(i+1,len(nums)): \n            l.append(nums[i]+nums[j])\n    return max(l)\ndef sum_of_Digits(n): \n    '''\n    Write a python function to find the sum of the digits of a number. The function should return the sum of the digits of a number. \n    '''\n    s = 0\n    while n>0: \n        s+=n%10\n        n//=10\n    return s\ndef is_Valid_Permutation_3(nums): \n    '''\n    Write a python function to check whether a given string is a valid permutation of a given dictionary. The function should return a boolean value. \n    '''\n    d = {}\n    for i in nums: \n        if i in d: \n            d[i",
        "test": "assert     next_Perfect_Square(2) == 2**2",
        "num_ids": 2288,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n",
        "test": "assert     max_sum([]) == 0",
        "num_ids": 528,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess ** 2 - number) > 0.000000000000001:\n        guess = (guess + (number / guess)) / 2\n    return guess\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    dp = [[0 for i in range(len(str))] for j in range(len(str))]\n    for i in range(len(str)-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                if j-i == 1 or dp[i+1][j-1]:\n                    dp[i][j] = 1\n    return max([max(x) for x in dp])\n",
        "test": "assert     lps(\"cbbd\") == 1",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert     harmonic_sum(2) == 1.5",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array1 = array_nums1\n    array2 = array_nums2\n    array1.sort()\n    array2.sort()\n    length1 = len(array1)\n    length2 = len(array2)\n    intersection = []\n    i = 0\n    j = 0\n    while i<length1 and j<length2:\n        if array1[i] == array2[j]:\n            intersection.append(array1[i])\n            i += 1\n            j += 1\n        elif array1[i] > array2[j]:\n            j += 1\n        else:\n            i += 1\n    return intersection\n",
        "test": "assert     [1,2,2,1]",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # the number of times the element appears in the tuple\n    count = 0\n    for element in tup:\n        if element == x:\n            count = count + 1\n    return count\n",
        "test": "assert     (count_X(('a', 'a', 'b'), 'a') == 2), \"Error in count_X\"",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # for i in range(0,len(list)):\n    #     list.insert(i,element)\n    # return list\n    return [element]*len(list)\n    \n    # return [element for i in range(0,len(list))]\n",
        "test": "assert     insert_element([1,2,3,4], 5) == [1,5,2,3,4]",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #Iterating through every number and returning a list of tuples with x and y components\n    polar_coordinates = []\n    for i in numbers:\n        x = i.real\n        y = i.imag\n        polar_coordinates.append((x, y))\n    return polar_coordinates\n",
        "test": "assert     convert([(1,0)]) == [(1, 0), (0, 1)]",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    # initialize variable\n    count = 0\n    # check each element\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n    \ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    \n    # initialize variable\n    count = 0\n    # check each element\n    for i in list1:\n        if isinstance(i, str):\n            count += 1\n    return count\n    \ndef count_float(list1):\n    '''\n    Write a python function that returns the number of float elements in a given list.\n    '''\n    \n    # initialize variable\n    count = 0\n    # check each element\n    for i in list1:\n        if isinstance(i, float):\n            count += 1\n    return count\n    \ndef count_boolean(list1):\n    '''\n    Write a python function that returns the number of boolean elements in a given list.\n    '''\n    \n    # initialize variable\n    count = 0\n    # check each element\n    for i in list1:\n        if isinstance(i, bool):\n            count += 1\n    return count\n",
        "test": "assert     count_integer([1, 1, 1]) == 3",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    res = []\n    for i in comb:\n        res.append(i)\n    return res\n",
        "test": "assert     all(len(combinations_colors(list(range(1, 10)), 4)) == 120) == True, 'Error in combinations_colors'",
        "num_ids": 957,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # IMPLEMENT THIS\n    if n==0:\n        return 0\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n%2==0:\n        return 0\n    if n==3:\n        return 1\n    else:\n        return count_Primes_nums(n-1) + count_Primes_nums(n-2)\n",
        "test": "assert     count_Primes_nums(3)     == 1",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     (4,5) == swap_numbers(5,4)",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Define a dictionary to store the result\n    result = {}\n",
        "test": "assert     maximize_elements((2, 3), (6, 9, 7)) == (6, 9)",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    else:\n        x = newman_prime(n-1)\n        d = 1\n        while True:\n            d += 1\n            y = (x**2 + 1) % n\n            if d == n:\n                return y\n            x = y\n",
        "test": "assert     newman_prime(10) == 7",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    return tuple((test_tup1[i] / test_tup2[i]) for i in range(len(test_tup1)))\n",
        "test": "assert     (division_elements((0, 0, 0, 0, 0), (5, 2, 4, 3, 4)) == (0, 0, 0, 0, 0))",
        "num_ids": 1168,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    left_list = []\n    right_list = []\n    for i in range(0,L):\n        left_list.append(list1[i])\n    for j in range(L,len(list1)):\n        right_list.append(list1[j])\n    return(left_list, right_list)\n",
        "test": "assert     split_two_parts([1,2,3,4,5,6], 3) == ( [1,2,3], [4,5,6] )",
        "num_ids": 676,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert     dog_age(1) == 7",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    ret = []\n    for i in range(0, len(S), step):\n        ret.append(S[i:i + step])\n    return ret\n",
        "test": "assert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side_length = l\n    side_area = side_length ** 2\n    lateral_area = 6 * side_area\n    return lateral_area\n",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n**2 + square_Sum(n-1)\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    number_of_stars = 1\n    for i in range(1,n+1):\n        number_of_stars *= i\n    return number_of_stars\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 2331,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97, 'Error: ascii_value of a is wrong'",
        "num_ids": 262,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index_sum = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0) and (arr[i] % 2 == 0):\n            even_index_sum += arr[i]\n",
        "test": "assert     (sum_even_and_even_index([1,3,5,7,9]) == 26)",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #assign the variables\n    total_sum = 0\n    i = 1\n    #while loop\n    while i < n:\n        if i**5 % 2 == 0:\n            total_sum += i**5\n        i += 1\n    return total_sum\n",
        "test": "assert     even_Power_Sum(0)     ==     0",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(i[-1]) for i in test_list]\n",
        "test": "assert     rear_extract([(1, 2), (3, 4)]) == [2, 4]",
        "num_ids": 487,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([(a - b) for a, b in zip(test_tup1, test_tup2)])\n",
        "test": "assert     (substract_elements((1,2,3,4,5), (1,2,3,4,5)) == (0,0,0,0,0))",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    \n    n_factorial=1\n    for i in range(1,n+1):\n        n_factorial=n_factorial*i\n        \n    n_factorial=n_factorial/math.factorial(n)\n    \n    final_result=0\n    for j in range(0,n/2+1):\n        final_result=final_result+pow(2,j)*pow(n_factorial,n-2*j)\n    return final_result\n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = math.pi*(r**2)*h\n    return v\n",
        "test": "assert     volume_cylinder(0.5,2) == math.pi*(0.5**2)*2",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n",
        "test": "assert     dict_filter({'b': 2, 'a': 1, 'c': 3, 'd': 4, 'e': 5}, 2) == {'b': 2, 'd': 4, 'e': 5}",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    return len([item for item in test_tup[1:] if item <= test_tup[0]])\n",
        "test": "assert     count_first_elements((1,1,1,1)) == 3",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n -= 1\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    n = n * 10\n    res = n + (n % 100)\n    if res < 100:\n        return False\n    for i in range(1, n // 100):\n        x = 100 * i\n        y = (i + 1) * (i + 1)\n        z = (i + 2) * (i + 2)\n        res = x + y + z\n        if res == n:\n            return True\n    return False\n",
        "test": "assert     is_num_decagonal(0) == False",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, x in enumerate(dlist):\n        if x == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert     sequential_search([1,2,3,4,5], 2) == (True, 1)",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for x in test_list:\n        for y in test_list:\n            if x == y:\n                return False\n    return True\n",
        "test": "assert not all_unique([1,1,2,2,3,3,4,4,5,5])",
        "num_ids": 2381,
        "indeed": false
    },
    {
        "number": 282,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    ans = []\n    for i in range(len(nums1)):\n        ans.append(nums1[i] - nums2[i])\n    return ans\n",
        "test": "assert     sub_list([], []) == []",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return len([x for x in str(n) if int(x) <= int(x)]) == len(str(n))\n",
        "test": "assert     validate(1234)     == True",
        "num_ids": 2313,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "test": "assert     check_element([1,1,1,1,1,1],1) == True",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    res = re.search(r'ab*', text)\n    return True if res else False\n    \nprint(text_match_two_three('aabbb'))\nprint(text_match_two_three('ababab'))\nprint(text_match_two_three('abbb'))\nprint(text_match_two_three('ab'))\nprint(text_match_two_three('baa'))\nprint(text_match_two_three('aa'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('abab'))\nprint(text_match_two_three('ababab'))\nprint(text_match_two_three('aba'))\n",
        "test": "assert     text_match_two_three('abb') == True",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < 1:\n        return 0\n    if n == k:\n        return max(a)\n    if k == 1:\n        return max(a)\n    if k > n:\n        return max(a)\n    \n    m = len(a)\n    sum_array = [0] * m\n    \n    sum_array[0] = a[0]\n    for i in range(1, k):\n        sum_array[i] = max(a[i], a[i] + sum_array[i-1])\n    \n    max_ending_here = max(sum_array)\n    \n    for i in range(k, n):\n        sum_array[i] = max(a[i], a[i] + sum_array[i-1])\n        max_ending_here = max(max_ending_here, sum_array[i])\n    \n    return max_ending_here\n",
        "test": "assert     max_sub_array_sum_repeated([1, 2, 1, 4, 3, 3, 2], 7, 3) == 16",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return square_Sum(n - 1) + n * n\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list2 = []\n    for element in list1:\n        list2.append(len(element))\n    return max(list2)\n",
        "test": "assert     max_length([[3, 4, 5], [7, 8, 9], [1, 2, 3]]) == 3",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for x in range(n + 1)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            elif i > 0:\n                if colors[j - 1] == colors[j]:\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i][j - 1]\n    return dp[k][n]\n",
        "test": "assert     count_no_of_ways(5, 2) == 5",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    return int(math.floor(n/m))\n",
        "test": "assert     find(8,4) == 2",
        "num_ids": 168,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = (w**2 - h**2) / 2\n    return a,b\n",
        "test": "assert     otherside_rightangle(12,7) == 5",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maximum = 0\n    for i in listval:\n        if i>maximum:\n            maximum = i\n    return maximum\n",
        "test": "assert     max_val([4,3,2,1,-10,-5,-2]) == 4",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_div(2) == 1",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n",
        "test": "assert     get_Inv_Count([]) == 0, \"empty list\"",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for item in list1:\n        if isinstance(item, list):\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n",
        "test": "assert     flatten_list([[1,'a','b'],[2,'c','d'],[3,'e','f']]) == [1,'a','b',2,'c','d',3,'e','f']",
        "num_ids": 567,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for s,a in stdata:\n        d[s].append(a)\n    n = max(d,key=lambda x: max(d[x]))\n    return n\n",
        "test": "assert max_aggregate([(1, 2), (3, 4)]) == 3",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        count += count_binary_seq(n-2)\n        count += count_binary_seq(n-1)\n        count += (count_binary_seq(n-1)//2)*(count_binary_seq(n-1)//2+1)\n    return count\n",
        "test": "assert     count_binary_seq(1) == 1",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n",
        "test": "assert     dict_depth({'a':1, 'b': {'c':{'d':{'e':'foo'}}}}) == 4",
        "num_ids": 2401,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        arr = arr[1:] + [arr[0]]\n    return arr[index]\n",
        "test": "assert     find_Element([1,2,3,4,5],[[0,2],[4,6],[0,5]],2,0) == 3",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n",
        "test": "assert     start_withp(['peter', 'robert', 'geoffrey', 'george', 'paula']) ==     ['peter', 'paula']",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return a[index]\n    elif k == index:\n        return a[index] + a[index-1]\n    else:\n        max1 = max_sum_increasing_subseq(a, n, index+1, k)\n        max2 = max_sum_increasing_subseq(a, n, index+1, k+1)\n        return max1 if max1 > max2 else max2\n",
        "test": "assert     max_sum_increasing_subseq([1,2,4,3,5,7], 6, 5, 5) == 12",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    try:\n        colon=tuplex[m:n]\n        return colon\n    except IndexError:\n        return IndexError\n",
        "test": "assert     colon_tuplex((), 2, 3) == (())",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    large_products = []\n    for _ in range(N):\n        large_products.append(max(nums1) * max(nums2))\n        nums1.remove(max(nums1))\n        nums2.remove(max(nums2))\n",
        "test": "assert     large_product([10, 1, 2, 3, 4, 5], [50, 5, 2, 100, 10, 5], 7) == [500, 50, 100, 10, 10, 10, 5]",
        "num_ids": 938,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n",
        "test": "assert     maximum(2,3) == 3",
        "num_ids": 177,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #import re\n    #return tuple(re.findall(r'\\w', str1))\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('a') == ('a',)",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & (n-1)\n    n = n + 1\n    return n\n    \ndef test_set_left_most_unset_bit():\n    assert(set_left_most_unset_bit(12) == 15)\n    assert(set_left_most_unset_bit(1) == 2)\n    assert(set_left_most_unset_bit(9) == 10)\n    assert(set_left_most_unset_bit(15) == 16)\n    print 'Passed'\n",
        "test": "assert ",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3 * math.pi * r**2 * h\n    return V\n",
        "test": "assert     volume_cone(1,1) == 1.0471975511965976",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    while p < n:\n        p *= 2\n    return p\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "test": "assert     find_lucas(3) == 4",
        "num_ids": 429,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    format_string = string.strip()\n    for i in range(len(list_)):\n        list_[i] = format_string % list_[i]\n    return list_\n",
        "test": "assert     add_string(['a', 'b', 'c'], '%s') == ['a', 'b', 'c']",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: l3[i]} for i in range(len(l1))}\n",
        "test": "assert     convert_list_dictionary(['a', 'b', 'c'], ['1', '2', '3'], ['x', 'y', 'z']) == {'a': {'1': 'x'}, 'b': {'2': 'y'}, 'c': {'3': 'z'}}",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = len(input_list[0])\n    result = input_list[0]\n    for i in input_list:\n        if len(i) > length:\n            length = len(i)\n            result = i\n    return result\n",
        "test": "assert max_length_list(['abcd','abcd']) == 'abcd'",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_distinct((1, 2, 3, 4, 5))",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n    return \"No non repeating character\"\n",
        "test": "assert     first_non_repeating_character('abc') == 'a'",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    result = re.match(regex,string)\n    if result:\n        return True\n    else:\n        return False\n    \nprint(check_char('a'))\nprint(check_char('b'))\nprint(check_char('aaaaa'))\nprint(check_char('ab'))\nprint(check_char('abcd'))\n",
        "test": "assert     check_char(\"ab\") == False",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    return (a+b+c)/3.0\n",
        "test": "assert     median_numbers(1,1,1) == 1",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum([int(digit) for digit in str(num)])\n    return digit_sum\n",
        "test": "assert     (sum_of_digits([1, 2, 3, 4, 5]) == 15)",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n",
        "test": "assert     bitwise_xor((1, 1, 0), (1, 0, 1)) == (0, 1, 1)",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i])\n    unique_list = set(test_list)\n    for each in unique_list:\n        count += 1\n    return count\n",
        "test": "assert     extract_freq([(1, 2), (1, 2, 3), (1, 3)]) == 3",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    # Initialize a list to store the result\n    res = []\n    \n    # Iterate over the length of the tuples\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] + test_tup2[i])\n    \n    return tuple(res)\n",
        "test": "assert     add_nested_tuples((1,2,3),(4,5,6)) == (5,7,9)",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n",
        "test": "assert     minimum(1,2) == 1",
        "num_ids": 221,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "test": "assert     not check_tuplex( (1,2,3), (1,2,3,4) )",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = str(x)\n    # if the lenght of the string is odd, then the parity is 1\n    if (len(x) % 2) == 1:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     find_Parity(3) == 1",
        "num_ids": 281,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    if len(s) == 1:\n        return int(s)\n    else:\n        l = len(s)\n        for i in range(l):\n            for j in range(i + 1, l):\n                if int(s[i] + s[j]) > int(s):\n                    return int(s[:i] + s[j] + s[i] + s[j+1:])\n",
        "test": "assert     rearrange_bigger(2834)    == 7334",
        "num_ids": 811,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    res = []\n    index1, index2 = 0, 0\n    while index1 < len(nums1) and index2 < len(nums2):\n        if nums1[index1] < nums2[index2]:\n            res.append((nums1[index1], nums2[index2]))\n            index1 += 1\n            index2 += 1\n        elif nums1[index1] > nums2[index2]:\n            index2 += 1\n        else:\n            index1 += 1\n            index2 += 1\n        if len(res) == k:\n            break\n    return res\n",
        "test": "assert     k_smallest_pairs([], [], 1) == []",
        "num_ids": 795,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    res = []\n    for ele in list1:\n        if res:\n            if res[0][0]*ele[1] > ele[0]*res[0][1]:\n                res = [ele,]\n            elif res[0][0]*ele[1] == ele[0]*res[0][1]:\n                res.append(ele)\n        else:\n            res.append(ele)\n    return res[0][0]*res[0][1]\n",
        "test": "assert     min_product_tuple([(4,8), (10,16), (2,5)]) == (5,16)",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==1:\n        return listval[0]\n    elif len(listval)==0:\n        return None\n    else:\n        return min(listval[0],min_val(listval[1:]))\n",
        "test": "assert     min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    splited = re.split(r'_', word)\n    camel = [splited[0]]\n    for i in range(1, len(splited)):\n        camel.append(splited[i].title())\n    return ''.join(camel)\n",
        "test": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = l[::2]\n    return l\n",
        "test": "assert     remove_odd([2,3,4,5])==[2,4]",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item[n] for item in list1]\n",
        "test": "assert ",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 414,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return True if bool(set(list1).intersection(set(list2))) else False\n",
        "test": "assert     overlapping([1,2,3,4],[2,3,4,5]) == True",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    max_so_far = max(arr[0], arr[1])\n    min_so_far = min(arr[0], arr[1])\n    res = max_so_far\n    for i in range(2, len(arr)):\n        curr = max(arr[i], arr[i]*max_so_far, arr[i]*min_so_far)\n        min_so_far = min(arr[i], arr[i]*max_so_far, arr[i]*min_so_far)\n        max_so_far = curr\n        res = max(res, max_so_far)\n    return res\n",
        "test": "assert     max_Product([2, 2, 4]) == 8",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for each in Input: \n        if len(each) > 1: \n            return each[0]\n    return None\n",
        "test": "assert group_tuples([(1, 1), (2, 4), (1, 1)]) == [1, 1], 'Failed'",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    x=len(lst)\n    return lst[x-1]\n",
        "test": "assert     Find_Max([1,1,2,3,3,3,4,5,5,5,5]) == 5",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum([round(x) for x in list1])*len(list1)\n",
        "test": "assert     round_and_sum([1.2, 2.5, 3.7, 4.8]) == 48, \"numbers: 1.2, 2.5, 3.7, 4.8\"",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for x in range(0, n):\n        if x%2 == 0:\n            cube_sum = cube_sum + x*x*x\n    return cube_sum\n",
        "test": "assert     (cube_Sum(0) == 0)",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    result = \"\"\n    for tup_element in test_tup:\n        result += str(tup_element)\n        result += DELIMITER\n    \n    return result[:-1]\n",
        "test": "assert     concatenate_tuple(('a', 'b', 'c', 'd')) == 'a,b,c,d'",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    nums = range(1,n+1)\n    #print nums\n    return (sum(nums))**(1.0/3.0)\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(i[-1] for i in test_tuple)\n",
        "test": "assert     extract_rear(('apple', 'banana', 'coconut', 'grapefruit')) == ('coconut', 'grapefruit')",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    from itertools import groupby\n    return sum(1 for i in groupby(list1))\n",
        "test": "assert     count_element_in_list([1,2,3,4,5,6], 7) == 0",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #return list(filter(lambda num: num % 2 == 0, nums))\n    return list(filter(lambda num: not num % 2 == 0, nums))\n",
        "test": "assert     filter_oddnumbers([1,2,3]) == [1,3]",
        "num_ids": 521,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import datetime\n    date_format = '%Y-%m-%d'\n    d = datetime.datetime.strptime(dt, date_format)\n    dd = d.strftime('%d-%m-%Y')\n    return dd\ndef get_city_details(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    details = []\n    reg_ex = r'[<h1>](.+)[<\\/h1>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        details = match_obj.group(1)\n    details = re.split(',', details)\n    details = details[0].split('<br>')\n    for i in range(len(details)):\n        details[i] = details[i].strip()\n    details[-1] = change_date_format(details[-1])\n    return details\ndef get_geo_details(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    details = []\n    reg_ex = r'[<div class=\"city-details\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        details = match_obj.group(1)\n    details = re.split(',', details)\n    details = details[0].split('<br>')\n    for i in range(len(details)):\n        details[i] = details[i].strip()\n    details[-1] = change_date_format(details[-1])\n    return details\ndef get_temperature(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    temperature = []\n    reg_ex = r'[<div class=\"temperature\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        temperature = match_obj.group(1)\n    temperature = re.split(',', temperature)\n    temperature = temperature[0].split('<br>')\n    for i in range(len(temperature)):\n        temperature[i] = temperature[i].strip()\n    temperature[-1] = change_date_format(temperature[-1])\n    return temperature\ndef get_weather_details(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    details = []\n    reg_ex = r'[<h2>](.+)[<\\/h2>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        details = match_obj.group(1)\n    details = re.split(',', details)\n    details = details[0].split('<br>')\n    for i in range(len(details)):\n        details[i] = details[i].strip()\n    details[-1] = change_date_format(details[-1])\n    return details\ndef get_wind_details(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    details = []\n    reg_ex = r'[<div class=\"wind\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        details = match_obj.group(1)\n    details = re.split(',', details)\n    details = details[0].split('<br>')\n    for i in range(len(details)):\n        details[i] = details[i].strip()\n    details[-1] = change_date_format(details[-1])\n    return details\ndef get_probability(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    probability = []\n    reg_ex = r'[<div class=\"probability\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        probability = match_obj.group(1)\n    probability = re.split(',', probability)\n    probability = probability[0].split('<br>')\n    for i in range(len(probability)):\n        probability[i] = probability[i].strip()\n    probability[-1] = change_date_format(probability[-1])\n    return probability\ndef get_snowfall(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    snowfall = []\n    reg_ex = r'[<div class=\"snowfall\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        snowfall = match_obj.group(1)\n    snowfall = re.split(',', snowfall)\n    snowfall = snowfall[0].split('<br>')\n    for i in range(len(snowfall)):\n        snowfall[i] = snowfall[i].strip()\n    snowfall[-1] = change_date_format(snowfall[-1])\n    return snowfall\ndef get_rainfall(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    rainfall = []\n    reg_ex = r'[<div class=\"rainfall\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        rainfall = match_obj.group(1)\n    rainfall = re.split(',', rainfall)\n    rainfall = rainfall[0].split('<br>')\n    for i in range(len(rainfall)):\n        rainfall[i] = rainfall[i].strip()\n    rainfall[-1] = change_date_format(rainfall[-1])\n    return rainfall\ndef get_moisture(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    moisture = []\n    reg_ex = r'[<div class=\"moisture\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        moisture = match_obj.group(1)\n    moisture = re.split(',', moisture)\n    moisture = moisture[0].split('<br>')\n    for i in range(len(moisture)):\n        moisture[i] = moisture[i].strip()\n    moisture[-1] = change_date_format(moisture[-1])\n    return moisture\ndef get_rain_probability(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page",
        "test": "assert     change_date_format(\"2013-01-01\") == \"01-01-2013\"",
        "num_ids": 2429,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([5,3,4,1,2,6]) == [1,2,3,4,5,6]",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [x & y for x, y in zip(test_tup1, test_tup2)]\n",
        "test": "assert     and_tuples(('a', 'b'), ('x', 'y', 'z')) == ('a', 'b', 'x', 'y', 'z')",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 < 4 * a * c:\n        return None\n    elif b**2 == 4 * a * c:\n        return -b / (2 * a)\n    else:\n        x1 = (-b - math.sqrt(b**2 - 4 * a * c)) / (2 * a)\n        x2 = (-b + math.sqrt(b**2 - 4 * a * c)) / (2 * a)\n        return x1, x2\n",
        "test": "assert     parabola_directrix(1, 4, 5) == None     ",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n",
        "test": "assert     common_element([1, 2, 3, 4], [2, 4, 6])",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 <= base2:\n        return median_trapezium(base1,base2,height)\n    else:\n        return height * 1/2 * (base1 + base2)\n",
        "test": "assert     median_trapezium(2,3,2)     == 2.5",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # TODO: Write your code here\n    for i in arr:\n        if number > i:\n            return True\n        else:\n            return False\n",
        "test": "assert     check_greater([5, 6, 7, 8, 9], 10)",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if 'a' in text:\n        if text.count('a') < 2:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     text_match_one('aaab') == False",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = (n%10)\n    return last\n",
        "test": "assert     last_Digit(1) == 1",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_negative=[]\n    for i in list1:\n        if i<0:\n            list_negative.append(i)\n    return list_negative\n",
        "test": "assert     neg_nos([10,0,-20,-30,40,50]) == [-20,-30]",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x%2==0, str1))\n",
        "test": "assert     remove_odd('asdff') == ''",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) < 2:\n        return 0\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1] <= test_list[j][0] and test_list[i][0] >= test_list[j][1]):\n                count += 1\n    return count\n",
        "test": "assert     count_bidirectional([('abc', 'xyz'), ('xyz', 'abc'), ('abc', 'xyz')]) == 2",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    if len(L) == 1:\n        return L[0]\n    if len(L) == 2:\n        return L[0]*10 + L[1]\n    if len(L) == 3:\n        return L[0]*100 + L[1]*10 + L[2]\n    if len(L) == 4:\n        return L[0]*1000 + L[1]*100 + L[2]*10 + L[3]\n    return 0\n",
        "test": "assert     multiple_to_single([1,2,3,4]) == 1234",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    \n    index = text.find('adverb')\n    if index!= -1:\n        return index\n",
        "test": "assert find_adverb_position('I will go to the bedroom to sleep') == [('will', 1)]",
        "num_ids": 2761,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "test": "assert     surfacearea_cube(1) ==     6",
        "num_ids": 196,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums: return 0\n    if len(nums) == 1: return nums[0]\n    return nums.count(1)/len(nums)\n",
        "test": "assert     positive_count([0, 0, 0, 1]) == 0.25",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #list1 = [-5,4,-3,2,-1,-2,4,-5]\n    #list1 = [-4,2,5,1,0,-2,2,4,6,8,10]\n    list1.sort()\n    for i in range(0,len(list1)):\n        if list1[i]<0:\n            return list1[i]\n",
        "test": "assert     largest_neg([-3,2,1,4,0])==-3",
        "num_ids": 553,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][0:K])\n    return test_list\n",
        "test": "assert trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], 4) == [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i*j for i, j in zip(test_tup1, test_tup2))\n",
        "test": "assert     index_multiplication((1, 2, 3), (3, 2, 1)) == ((1*3), (2*2), (3*1))",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dict = {} \n    for i in lst: \n        if i in dict: \n            dict[i] += 1\n        else: \n            dict[i] = 1 \n    return dict \n",
        "test": "assert     count_Occurrence((1,2,3,1,3,4,2,3,3,1,2), [1,2,3,1,3,4,2,3,3,1,2]) == Counter([1,2,3,1,3,4,2,3,3,1,2])",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n",
        "test": "assert     cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<1:\n        return 0\n    else:\n        return n+cal_sum(n-1)\n    \ndef perrin_num(n):\n    '''\n    Write a function to calculate the number of perrin numbers for nth term.\n    '''\n    if n==1:\n        return 1\n    else:\n        return perrin_num(n-1)+perrin_num(n-2)\n    \ndef even_sum(n):\n    '''\n    Write a function to calculate the sum of all even numbers less than n.\n    '''\n    if n<0:\n        return 0\n    else:\n        if n%2==0:\n            return n+even_sum(n-2)\n        else:\n            return even_sum(n-2)\n    \ndef fib_num(n):\n    '''\n    Write a function to calculate nth fibonacci number.\n    '''\n    if n==1 or n==2:\n        return 1\n    else:\n        return fib_num(n-1)+fib_num(n-2)\n",
        "test": "assert     cal_sum(1)    ==    1",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n",
        "test": "assert     extract_string([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"ff\", \"gg\"], ",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'[\\s]+', '', text1)\n",
        "test": "assert     remove_whitespaces(\" h        d r        \") == \"hdr\"",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return sale_amount-actual_cost\n    return 0\n",
        "test": "assert     loss_amount(30,30) == 0",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    sum = 0\n    while i < n : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n        i += 1\n    return sum \ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n    return sum \ndef findPrimes(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes2(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes3(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes4(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes5(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes6(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes7(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes8(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes9(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes10(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes11(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes12(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes13(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes14(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes15(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes16(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    p",
        "test": "assert     sumofFactors(0) == 0 ",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    words = re.findall('[a-z]+',text)\n    return any(['z' in word for word in words])\n",
        "test": "assert     text_match_wordz( 'z' ) == True",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 12 and monthnum2 >= 1:\n        return True\n    else:\n        return False\ndef check_leapyear(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    elif year % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_1(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_2(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_3(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    elif year % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_4(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        return True\n    else:\n        return False\ndef find_number_of_days(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    days_in_month = {\n        1 : 31,\n        2 : 28,\n        3 : 31,\n        4 : 30,\n        5 : 31,\n        6 : 30,\n        7 : 31,\n        8 : 31,\n        9 : 30,\n        10 : 31,\n        11 : 30,\n        12 : 31\n    }\n    if check_monthnumb_number(month) == True:\n        return days_in_month[month]\n    else:\n        if check_leapyear(year) == True:\n            return days_in_month[month] + 1\n        else:\n            return days_in_month[month]\ndef find_number_of_days_1(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 29\n        else:\n            return 28\ndef find_number_of_days_2(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 31\ndef find_number_of_days_3(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_4(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_5(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 30\ndef find_number_of_days_6(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_7(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_8(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_9(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 30\ndef find_number_of_days_10(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 31\ndef find_number_of_days_11(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_12(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 31\ndef find_number_of_days_13(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_14(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_15(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            retur",
        "test": "assert     check_monthnumb_number(1)",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return map(lambda x: x[::-1], stringlist)\n",
        "test": "assert     reverse_string_list([\"hello\", \"bruh\", \"welcome\", \"sir\"]) ==     [\"sir\", \"welcome\", \"bruh\", \"hello\"]",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = len(lst[0])\n    result = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i])<minimum:\n            minimum = len(lst[i])\n            result = lst[i]\n    return result\n",
        "test": "assert     Find_Min([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3], 'Incorrect'",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(3,4) == 12",
        "num_ids": 191,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n",
        "test": "assert     remove_uppercase('hello world') == 'hello world'",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = [] \n    for i in lst: \n        res.append(i[0]) \n    return res \n",
        "test": "assert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for letter in str:\n        if letter.isupper():\n            upper += 1\n    return upper\n",
        "test": "assert     (upper_ctr('abC') == 1)",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    elif len(list1) == 2:\n        return [[list1[0], list1[1]], [list1[1], list1[0]]]\n    else:\n        result = []\n        for i in range(len(list1)):\n            list2 = list1[:i] + list1[i+1:]\n            for x in combinations_list(list2):\n                result.append([list1[i]] + x)\n        return result\n",
        "test": "assert     combinations_list([1,2,3,4]) == [[1,2,3,4], [1,2,4,3], [1,3,2,4], [1,3,4,2], [1,4,2,3], [1,4,3,2], [2,1,3,4], [2,1,4,3], [2,3,1,4], [2,3,4,1], [2,4,1,3], [2,4,3,1], [3,1,2,4], [3,1,4,2], [3,2,1,4], [3,2,4,1], [3,4,1,2], [3,4,2,1], [4,1,2,3], [4,1,3,2], [4,2,1,3], [4,2,3,1], [4,3,1,2], [4,3,2,1]]",
        "num_ids": 2365,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_ending = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_ending = max_ending * arr[i]\n        else:\n            max_ending = arr[i]\n        max_so_far = max(max_ending, max_so_far)\n    return max_so_far\n",
        "test": "assert     max_subarray_product([1, 2, 3, -2]) == 6",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n",
        "test": "assert     not check_value({'a': 1, 'b': 2, 'c': 3}, 'd')",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 0\n    current_prod = 1\n    for i in range(len(arr)):\n        current_prod = 1\n        for j in range(i, len(arr)):\n            current_prod *= arr[j]\n            max_prod = max(max_prod, current_prod)\n    return max_prod\n",
        "test": "assert     max_product([-2, 0, -1]) == 0",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise = []\n    #iterate over the length of the tuple\n    for index in range(len(test_tup)):\n        #if the index is the length of the tuple, then add the last and first element\n        if index == len(test_tup)-1:\n            pairwise.append(test_tup[index] + test_tup[0])\n        #else add the current index and index+1\n        else:\n            pairwise.append(test_tup[index] + test_tup[index+1])\n    #return the resulting list\n    return pairwise\n",
        "test": "assert     add_pairwise(('Hello', 'World')) == 'Hello', 'incorrect'",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod*i\n    return prod%n\n",
        "test": "assert     find_remainder([1,2,3,4,5], 1) == 0",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    d = {}\n    for e in l:\n        if e in d:\n            d[e] = d[e] + 1\n        else:\n            d[e] = 1\n    for e in d:\n        if d[e] > 1:\n            return False\n    return True\n    \n    \n    ",
        "test": "assert     check_Consecutive([1, 2, 3, 4, 5]) == 1",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    # you can also use a set of sets to make this faster\n    return list(set(test_list1).intersection(test_list2))\n",
        "test": "assert     tuple_intersection(('a', 'b', 'c'), ('b', 'a', 'c', 'd')) == ('b',)",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char('hello','l','L') == 'heLLo'",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "test": "assert     sort_counter({'a': 1, 'b': 2, 'c': 3}) == [('c', 3), ('b', 2), ('a', 1)]",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "test": "assert     big_sum([1, 2, -3, 4, 5]) == 3",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower(\"python\") == False",
        "num_ids": 169,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\n",
        "test": "assert     remove_lowercase('abcef') == 'abcef'",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if (n < 10) :  \n        return n\n    else : \n        return first_Digit(n//10) \n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    if (n % 10) : \n        return n % 10\n    else :\n        return last_Digit(n//10)\n",
        "test": "assert     first_Digit(111) == 1",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]",
        "num_ids": 1189,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(range(n+1))**3 - sum(range(n+1))**2\n",
        "test": "assert     (difference(10) == 4404)",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1 == 1:\n                return 1\n    return 0\n",
        "test": "assert find_Odd_Pair([1, 2, 4, 8], 4) == 0",
        "num_ids": 2471,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n",
        "test": "assert     toggle_string(\"abc\") == \"Abc\"",
        "num_ids": 395,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = abs(n1), abs(n2)\n    dif = 0\n    while n1 > 0:\n        if n1 % 10 > n2 % 10:\n            dif += n1 % 10 - n2 % 10\n            n1 //= 10\n        else:\n            n1 //= 10\n    return dif\n",
        "test": "assert     digit_distance_nums(1234, 1234) == 0",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_max = a[0]\n    max_so_far = a[0]\n    for i in range(1, size):\n        current_max = max(a[i], current_max + a[i])\n        max_so_far = max(current_max, max_so_far)\n    return max_so_far\n",
        "test": "assert     max_sub_array_sum([1, -2, 5, -9, 3, -6, 5, -7, 0, 2, -1], 10) == 5",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_tup = list(union_set)\n    union_tup.sort()\n    return tuple(union_tup)\n",
        "test": "assert     union_elements((1, 2, 3, 4, 5, 6), (4, 5, 6, 7, 8, 9)) == (1, 2, 3, 4, 5, 6, 7, 8, 9)",
        "num_ids": 619,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    len_max = 0\n    for sublist in lst:\n        len_sublist = len(sublist)\n        if len_sublist > len_max:\n            len_max = len_sublist\n    return len_max\n",
        "test": "assert     Find_Max_Length([[1,2,3,4,5], [1,2,3,4], [1,2,3,4,5], [1,2,3,4]]) == 5",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\\"(.*?)\\\"',text)\n",
        "test": "assert     extract_values(\"1. \\\"Good\\\"\") == [\"Good\"]",
        "num_ids": 468,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    arr.sort()\n    count = 0\n    for i in range(n):\n        if(i>0):\n            if(arr[i]!=arr[i-1]):\n                count+=1\n    return count\n",
        "test": "assert     count_Pairs([1,2,3,4,5],4) == 3",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n",
        "test": "assert     sum_digits(5) == 5",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n",
        "test": "assert     issort_list([1, 2, 3]) == True",
        "num_ids": 415,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert     empty_list(5) == [{}] * 5",
        "num_ids": 236,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda l:l[0])\n",
        "test": "assert     sort_sublists([[1,2,3,4],[2,3,4,5],[3,4,5,6]]) == [[1,2,3,4],[2,3,4,5],[3,4,5,6]]",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for i in nums:\n        if i not in unique:\n            unique.append(i)\n    return unique\n",
        "test": "assert     two_unique_nums([1, 1, 2, 3, 3, 4, 4, 5, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for data in list_data:\n        product *= data\n    return product\n",
        "test": "assert     unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    sa = 2*pi*r*(r+h)\n    return sa\n",
        "test": "assert     surfacearea_cylinder(0, 2) == 0",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(B[start:start + len(A)] == A for start in range(len(B) - len(A) + 1))\n    \n",
        "test": "assert     not is_Sub_Array([1,2,3],[4,5,6,7,8])",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while(n > 1):\n        factorial *= n\n        n -= 1\n    return factorial % 10\n",
        "test": "assert     last_Digit_Factorial(3)    == 6",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for a,b,c in zip(list1,list2,list3):\n        new_list.extend([a,b,c])\n    return new_list\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar_elems.append(elem1)\n    return dissimilar_elems\n",
        "test": "assert     find_dissimilar(('a', 'b', 'c', 'd'), ('a', 'b', 'x', 'y')) == ('a', 'b')",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # use return on non iterable object\n    if not isinstance(test_tuple, tuple):\n        return even_fnc(test_tuple)\n    else:\n        return tuple([even_fnc(item) for item in test_tuple if isinstance(item, tuple)])\n",
        "test": "assert     (1,1,1,(1,1,1,'a'),'a'),'The elements that are even should be removed'",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*b + (b/2)*(s - b)\n",
        "test": "assert     surface_Area(0,1) == 0",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n",
        "test": "assert     my_dict({}) == True",
        "num_ids": 232,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    res = 0\n    for i in range(num):\n        res += catalan_number(i) * catalan_number(num-i-1)\n    return res\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'adverb[\\-]+ly',text)\n    return adverbs\n",
        "test": "assert     find_adverbs('she sells sea shells on the sea shore'.split()) == [('sea shore', 1)]",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    ans = []\n    while len(ans) < n:\n        ans.append(-heapq.heappop(heap))\n    return ans\n",
        "test": "assert     expensive_items([1,2,3,4,5,6],3)    == [6,5,4]",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    for i in range(0, len(l), n):\n        arr.append(l[i:i + n])\n    return arr\n",
        "test": "assert     split_Arr([1, 2, 3, 4], 2) == [[1, 2], [3, 4]]",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     (list_tuple([1,2,3]) == (1,2,3))",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([3, 2, 1, 5, 4]) == 4",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        return []\n",
        "test": "assert     perfect_squares(2, 1) == []",
        "num_ids": 2329,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x,y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x,y)\ndef polar_to_rect(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r,t)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x,y)\ndef polar_to_rect(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r,t)\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return Tru",
        "test": "assert     polar_rect(1,1)     == (1,1)",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    if n < 2:\n        return newList\n    temp = newList[0]\n    newList[0] = newList[n - 1]\n    newList[n - 1] = temp\n    return newList\n",
        "test": "assert     [4, 1, 3, 2] == swap_List([2, 1, 3, 4])",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binom_coeff = 1\n    for i in range(1,k+1):\n        binom_coeff = binom_coeff*int(n-i+1)//int(i)\n    return binom_coeff\n",
        "test": "assert     binomial_Coeff(5,2) == 10",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    '''\n    ip = '0.0.0.0'\n    \n    ip = \"123.456.789.0\"\n    print(ip.strip('0'))\n    '''\n    ip = re.sub(r'\\.(\\d)\\0+', r'\\1', ip)\n    return ip\n",
        "test": "assert     removezero_ip('123.123.123.123') == '123.123.123.123'",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return abs(list1[0] - list1[1])\n",
        "test": "assert     diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    for i in range(len(str1)):\n        if str1[i]!=str2[i] :\n            count+=1\n            a=i\n            b=i+1\n            while b<len(str2):\n                if str1[a]==str2[b]:\n                    break\n                a+=1\n                b+=1\n            str1=str1[:a]+str1[a+1:]+str1[a]+str1[:a]\n    return count\n",
        "test": "assert     min_Swaps('1100','1100') == 0",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size=0\n    for i in tuple_list:\n        size = sys.getsizeof(i)\n        tuple_size+=size\n    return tuple_size\n",
        "test": "assert     tuple_size(()) == 0",
        "num_ids": 2449,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    p1 = 0\n    p2 = 0\n    c = 0\n    while(c < k):\n        if arr1[p1] < arr2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n        c += 1\n    if p1 < len(arr1):\n        return arr1[p1]\n    if p2 < len(arr2):\n        return arr2[p2]\n",
        "test": "assert     find_kth([1,3,5,7], [2,4,6,8,9], 3) == 5",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digits = 0\n    temp = number\n    while temp!= 0:\n        digits += 1\n        temp = temp // 10\n    return number == sum(int(digit) ** digits for digit in str(number))\n",
        "test": "assert     armstrong_number(153) == True",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 0:\n        return 'The number should be positive'\n    else:\n        sum = 0\n        for x in range(number):\n            sum += x\n        average = sum / number\n        return average\n",
        "test": "assert     sum_average(10) == (55,50)",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "test": "assert     is_Even(1) == False",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return None\n",
        "test": "assert     first_repeated_char('oobe') == 'o'",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    if n <= 0:\n        return lucids\n    elif n == 1:\n        lucids.append(1)\n    elif n == 2:\n        lucids.append(1)\n        lucids.append(2)\n    elif n > 2:\n        lucids.append(1)\n        lucids.append(2)\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                if i % 3 == 0:\n                    lucids.append(i)\n            else:\n                lucids.append(i)\n    return lucids\n",
        "test": "assert     get_ludic(2) == [1, 2]",
        "num_ids": 2685,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split(\" \")))\n",
        "test": "assert     reverse_words('hello world') ==     'world hello'",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 0:\n        num = num * -1\n    if num < 2:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n",
        "test": "assert     prime_num(2) == True",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef degree_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef degree_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.",
        "test": "assert     radian_degree(0) == 0.0",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    pattern_match = pattern.search(text)\n    if pattern_match:\n        return pattern_match.group(), pattern_match.start(), pattern_match.end()\n    return None, 0, 0\n",
        "test": "assert     find_literals('abcd', '[a-z]{2}')     == ('ab', 0, 2)",
        "num_ids": 618,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*bell_Number(n-1)\n",
        "test": "assert     bell_Number(0) == 1",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [element for index, element in enumerate(list1) if index!= L]\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 4, 5]",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N-1] for row in test_list])\n",
        "test": "assert     max_of_nth([[1,2,3], [2,3,4], [4,5,6]], 2) == 4",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n",
        "test": "assert     merge([[1, 2], [2, 3], [3, 4], [4, 5]]) == [[1, 2], [2, 3], [3, 4], [4, 5]]",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:x+1]) for x in range(len(test_list))]\n    \n    \ndef test_cummulative_sum():\n    print(cummulative_sum([1,2,3]))\n    print(cummulative_sum((1,2,3,4)))\n    print(cummulative_sum((1,2,3,4,5)))\n    print(cummulative_sum([]))\n    \n    \ntest_cummulative_sum()",
        "test": "assert     cummulative_sum([-1, -2, -3]) == [-1, -3, -6], \"testcase2 failed\"",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        average = sum(nums[i])/len(nums[i])\n        averages.append(average)\n    return averages\n",
        "test": "assert     average_tuple([(1, 2), (3, 4), (5, 6)]) == [3, 4, 5]",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((3,2,1),(2,2,2)) == (1,0,1)",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # If there are no steps, there are no jumps\n    if (steps == 0):\n        return 0\n    \n    # This array stores the minimum number of jumps required to reach a point with coordinates (d, 0)\n    # We initialize this array with -1 since we can't reach a point from origin with length 0\n    min_jumps = [-1 for i in range(steps)]\n    \n    # Recursive function to calculate the minimum number of jumps required to reach the point (d, 0)\n    min_jumps[0] = 0\n    return min_jumps_helper(steps, d, 0, min_jumps)\n",
        "test": "assert     min_Jumps(0, (0, 0)) == 0",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l = len(nums1)\n    result = []\n    for i in range(0,l):\n        result.append(nums1[i]/nums2[i])\n    return result\n",
        "test": "assert ",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    t = list(test_str)\n    for i in t:\n        if i.isdigit():\n            t.remove(i)\n            t.append(i)\n    return \"\".join(t)\n",
        "test": "assert     move_num('1f2a3b4c5d6e7') == '7d6e5b4c1f2a3b4'",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    d = {}\n    for item in a:\n        d[item] = True\n    largest_sz = 1\n    for i in range(1, len(a) + 1):\n        for j in range(i + 1, len(a) + 1):\n            if (a[i - 1] % a[j - 1] == 0 and d[a[i - 1] / a[j - 1]]):\n                largest_sz = max(largest_sz, j - i + 1)\n    return largest_sz\n",
        "test": "assert ",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    mid = n // 2\n",
        "test": "assert     get_median([], [], 0) == None",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n    \ndef odd_even(nums):\n    '''\n    Write a function to check if a list contains a particular number.\n    '''\n    return nums[-1] in nums\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function that removes duplicates from a list.\n    '''\n    return set(nums)\n    \ndef compute_average(nums):\n    '''\n    Write a function to compute the average of a list of numbers.\n    '''\n    return sum(nums)/len(nums)\n    \ndef is_palindrome(nums):\n    '''\n    Write a function that checks whether a list is a palindrome.\n    '''\n    return nums[::-1] == nums\n    \ndef remove_stop_words(sentence, stop_words):\n    '''\n    Write a function to remove all the stop words from a sentence.\n    '''\n    return''.join([word for word in sentence.split() if word not in stop_words])\n    \ndef compute_number_to_letters(number):\n    '''\n    Write a function to convert a number to letters.\n    '''\n    letters = []\n    number_string = str(number)\n    if number_string[0] == '0':\n        return ''\n    for char in number_string:\n        letters.append(str(int(char) + 96))\n    return ''.join(letters)\n    \ndef get_integer(string):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    return int(string)\n    \ndef get_letters(number):\n    '''\n    Write a function to convert a number to letters.\n    '''\n    return chr(number - 96)\n    \ndef palindrome_permutation(str):\n    '''\n    Write a function that checks whether a string is a permutation of a palindrome.\n    '''\n    str = str.lower()\n    str_dict = {}\n    for letter in str:\n        if letter in str_dict:\n            str_dict[letter] += 1\n        else:\n            str_dict[letter] = 1\n    count = 0\n    for key in str_dict.keys():\n        if str_dict[key] % 2!= 0:\n            count += 1\n    if count > 1:\n        return False\n    else:\n        return True\n    \ndef get_largest_palindrome(max_num):\n    '''\n    Write a function to find the largest palindrome which is less than a given number.\n    '''\n    for num in range(max_num,0,-1):\n        if palindrome_permutation(str(num)):\n            return num\n    \ndef is_prime(num):\n    '''\n    Write a function that returns True if a number is prime, False otherwise.\n    '''\n    if num == 2:\n        return True\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef fibonacci(num):\n    '''\n    Write a function that returns the nth number in the fibonacci series.\n    '''\n    if num == 0 or num == 1:\n        return num\n    a,b = 0,1\n    for i in range(num - 1):\n        a,b = b,a+b\n    return b\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function that removes duplicates from a list.\n    '''\n    return list(set(nums))\n    \ndef reverse(nums):\n    '''\n    Write a function that reverses a list.\n    '''\n    nums.reverse()\n    return nums\n    \ndef find_duplicates(nums):\n    '''\n    Write a function that returns a list of the indices of all the numbers that appear more than once in the list.\n    '''\n    num_dict = {}\n    for i in range(len(nums)):\n        if nums[i] in num_dict:\n            num_dict[nums[i]] += 1\n        else:\n            num_dict[nums[i]] = 1\n    result = []\n    for key in num_dict:\n        if num_dict[key] > 1:\n            result.append(key)\n    return result\n    \ndef get_fib_seq(n):\n    '''\n    Write a function that returns a list of all fibonacci numbers less than n.\n    '''\n    fib_list = [0,1]\n    while True:\n        if fib_list[-1] > n:\n            break\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list\n    \ndef check_permutation(str1,str2):\n    '''\n    Write a function that returns True if two strings are permutations of each other, False otherwise.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    for char in str1:\n        if str1.count(char)!= str2.count(char):\n            return False\n    return True\n    \ndef get_duplicates(nums):\n    '''\n    Write a function that returns a list of all duplicates in the list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        if nums[i] in nums[i+1:]:\n            result.append(nums[i])\n    return result\n    \ndef is_valid(s):\n    '''\n    Write a function that returns True if a string is a valid variable name, False otherwise.\n    '''\n    if s == 'a' or s == 'e' or s == 'i' or s == 'o' or s == 'u':\n        return False\n    for char in s:\n        if char not in 'abcdefghijklmnopqrstuvwxyz_0123456789':\n            return False\n    return True\n    \ndef is_valid_tld(tld):\n    '''\n    Write a function that returns True if a string is a valid TLD, False otherwise.\n    '''\n    if tld in ['com','net','org','edu','gov','biz','info','mil','name','aero','asia','biz','cat','com','coop','edu','gov','info','int','jobs','mil','mobi','museum','name','net','org','pro','tel','travel']:\n        return True\n    else:\n        return False\n    \ndef get_longest_word(words):\n    '''\n    Write a function that returns the longest word in a list.\n    '''\n    return max(words,key=len)\n    \ndef get_longest_num(nums):\n    '''\n    Write a function that returns the longest number in a list.\n    '''\n    return max(nums,key=len)\n    \ndef is_vowel(char):\n    '''\n    Write a function that returns True if a character is a vowel, False otherwise.\n    '''\n    if char in ['a','e','i','o','u']:\n        return True\n    else:\n        return False\n    \ndef pig_latin(text):\n    '''\n    Write a function that returns the pig latin translation of a string.\n    '''\n    text = text.lower()\n    result = ''\n    if text[0] not in ['a','e','i','o','u']:\n        result = text[1:] + text[0] + 'ay'\n    else:\n        result = text + 'way'\n    return result\n    \ndef is_anagram(str1,str2):\n    '''\n    Write a function that returns True if two strings are anagrams of each other, False otherwise.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    for char in str1:\n        if str1.count(char)!= str2.count(char):\n            return False\n    return True\n    ",
        "test": "assert     nth_nums([2, 3, 4], 2) == [4, 9, 16]",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for letter in string:\n        if letter.islower():\n            return False\n    return True\n",
        "test": "assert     is_upper('foo') == False",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n",
        "test": "assert     swap_List([1,2,3,4,5]) == [5,2,3,4,1], 'incorrect'",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return math.pi * r * r / 4\n",
        "test": "assert     triangle_area(2) == 1.0",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    if start == end:\n        return start\n    elif start == end-1:\n        if array[start]!= start:\n            return start\n        else:\n            return start+1\n    else:\n        mid = (start + end)//2\n        if array[mid] == mid:\n            return find_First_Missing(array,start,mid)\n        else:\n            if array[mid] < mid:\n                return find_First_Missing(array,mid,end)\n            else:\n                return find_First_Missing(array,start,mid)\n",
        "test": "assert     find_First_Missing([0,1,2,3,4,6,7,8,9,10],0,10) == 5",
        "num_ids": 1342,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces('Hello World')     == 'Hello%20World', \"test case 1\"",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = [number for number in list if number % 2 == 0]\n    return even\n",
        "test": "assert     [x for x in range(10) if x % 2 == 0] == Split(range(10))",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row = ele[0]\n    col = ele[1]\n    \n    adjacent = []\n    \n    if row > 0:\n        adjacent.append((row - 1, col))\n    if row < 3:\n        adjacent.append((row + 1, col))\n    if col > 0:\n        adjacent.append((row, col - 1))\n    if col < 3:\n        adjacent.append((row, col + 1))\n        \n    return adjacent\n",
        "test": "assert     [(0, 0), (1, 0), (2, 0), (0, 1), (1, 1), (2, 1), (0, 2), (1, 2), (2, 2)] == adjac( (0,0) )",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.translate(str.maketrans(' ','_'))\n",
        "test": "assert     replace_spaces(\"Hello\") == \"Hello\"",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n            num_list.append(i)\n    return num_list\n",
        "test": "assert     move_zero([0, 1, 0, 2, 0, 3, 0, 4, 0]) == [1, 2, 3, 4, 0, 0, 0, 0, 0]",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            s = s ^ (arr[i] ^ arr[j])\n    return s\n",
        "test": "assert     pair_xor_Sum([1,2,3,4,5,6,7,8,9,10],10) == (1^2 + 2^3 + 3^4 + 4^5 + 5^6 + 6^7 + 7^8 + 9^9 + 10^10)",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable)\n    # import heapq as hq\n    # result = []\n    # h = []\n    # for item in iterable:\n    #     hq.heappush(h, item)\n    # while h:\n    #     result.append(hq.heappop(h))\n    # return result\n    \n    ",
        "test": "assert     [1, 2, 3, 4, 5] == heap_sort([5, 1, 4, 3, 2])",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return True\n    elif actual_cost>sale_amount:\n        return False\n    else:\n        return noprofit_noloss(actual_cost*0.99,sale_amount)\n",
        "test": "assert     noprofit_noloss(23.5,23.5)==True",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #c = 35.74 + 0.6215*t + (35.75*v**0.16) - (0.4275*t*v**0.16)\n    return round((35.74 + 0.6215*t + (35.75*v**0.16) - (0.4275*t*v**0.16))*10)\n    \ndef wind_chill_index(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return round(c)\n    \ndef wind_chill_index_round(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.ceil(c)\n    \ndef wind_chill_index_rounded(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.floor(c)\n    \ndef wind_chill_rounded(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return round(c)\n    \ndef wind_chill_round(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return round(c)\n    \ndef wind_chill_round_up(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.ceil(c)\n    \ndef wind_chill_round_down(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.floor(c)\n    \ndef wind_chill_round_up_int(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return int(math.ceil(c))\n    \ndef wind_chill_round_down_int(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return int(math.floor(c))\n    \ndef wind_chill_round_up_float(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.ceil(c)\n    \ndef wind_chill_round_down_float(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.floor(c)\n    \ndef wind_chill_round_float(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return round(c)\n    \ndef wind_chill_up(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.ceil(c)\n    \ndef wind_chill_down(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.floor(c)\n    \ndef wind_chill_down_int(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return int(math.floor(c))\n    \ndef wind_chill_down_float(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.floor(c)\n    \ndef wind_chill_down_float_rounded(velocity,temperature):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74 + 0.6215*temperature + (35.75*velocity**0.16) - (0.4275*temperature*velocity**0.16)\n    return math.floor(c)\n",
        "test": "assert     wind_chill(80,70) == 3.0",
        "num_ids": 2070,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names\n    return sum(len(name) for name in sample_names if name[0].islower())\n",
        "test": "assert     sample_nam(['a','b']) == 2",
        "num_ids": 2433,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('[()]','',items)\n",
        "test": "assert     remove_parenthesis('hello (world)') == 'hello world'",
        "num_ids": 1715,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * n - 1\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.match(r'z*z',text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz_middle(\"The cat has meow in the middle\") == False, \"Failed\"",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0 \n    list1 = []\n    while i < k:\n        list1.append(input[i])\n        i += 1\n    while i < len(input):\n        list1.append(input[i])\n        i += 1\n    return list1\n",
        "test": "assert     reverse_Array_Upto_K([0,1,2,3,4,5,6,7,8,9], 5) == [0,1,2,3,4,5,6,7,8,9]",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "test": "assert     add_dict_to_tuple((1,2), {'x': 3})!= (1,2,{'y': 3})",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    m = len(cost)\n    n = len(cost[0])\n    dp = [[0 for i in range(n)] for j in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[m-1][n-1] / (m+n)\n",
        "test": "assert ",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    print \"Filtering data...\"\n    students_new = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            students_new[student] = students[student]\n        else:\n            print \"Filtering data failed! Invalid data.\"\n            return None\n    return students_new\n",
        "test": "assert     filter_data({'vishal': (0.86, 1.92),'meenu': (1.5, 0.9), 'vishu': (0.94, 1.98), 'vignesh': (1.9, 0.9), 'prashant': (0.9, 1.8)}, 0.9, 0.9) == {'vishu': (0.94, 1.98), 'prashant': (0.9, 1.8), 'vignesh': (1.9, 0.9), 'vishal': (0.86, 1.92)}",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert len(nums1) == len(nums2)\n    return sum([int(nums1[i] == nums2[i]) for i in range(len(nums1))])\ndef can_delete(s1, s2):\n    '''\n    The input is two strings. Determine if we can delete one of the strings to make the other a substring.\n    '''\n    return len(s1) >= len(s2) and s1.startswith(s2)\ndef huffman(strs):\n    '''\n    The input is a list of strings. The list represents a set of words (that are all the same length). We want to use the Huffman Coding method to encode this set of words.\n    '''\n    # To do this, we'll need to sort the strings by length, so that the smallest string is at the front\n    strs = sorted(strs, key=len)\n    # Initialize the root node of the Huffman tree with the first string\n    root = TreeNode(strs[0])\n    # This is the list of strings that we are going to traverse the Huffman tree in order to encode the set of strings\n    traversal = []\n    # For each string, insert it into the traversal list\n    for s in strs:\n        traversal.append(s)\n    # While there are still strings in the traversal list\n    while traversal:\n        # This is the list of nodes that we will traverse in the following loop.\n        traversed = []\n        # For each node in the traversal list, append the left and right nodes to traversed\n        for i in range(0, len(traversal), 2):\n            traversed.append(TreeNode(traversal[i], traversal[i + 1]))\n        # The new node will be the child of the two nodes at the front of traversed\n        node = traversed[0]\n        # For each node in traversed\n        for i in range(1, len(traversed)):\n            # If the nodes are not the same length\n            if not (node.val == traversed[i].val):\n                # If the string is longer than the other, make the longer one the parent\n                if len(traversed[i].val) > len(node.val):\n                    node = traversed[i]\n                # Otherwise, make the shorter one the parent\n                else:\n                    node = TreeNode(node.val + traversed[i].val)\n                    # Add the left and right nodes to traversed\n                    for j in range(0, len(traversed), 2):\n                        if j < i:\n                            node.left = traversed[j]\n                        else:\n                            node.right = traversed[j]\n        # This is the list of nodes that we have traversed. If the parent node has a left child, add it to the traversed list\n        if node.left:\n            traversed.append(node.left)\n        # Otherwise, we have no left child\n        else:\n            # This is the list of nodes that we have traversed. If the parent node has a right child, add it to the traversed list\n            if node.right:\n                traversed.append(node.right)\n            # Otherwise, we have no right child\n            else:\n                traversal.pop(0)\n        # The current node becomes the parent of the new nodes\n        node = traversed[0]\n        # For each node in traversed\n        for i in range(1, len(traversed)):\n            # If the nodes are not the same length\n            if not (node.val == traversed[i].val):\n                # If the string is longer than the other, make the longer one the parent\n                if len(traversed[i].val) > len(node.val):\n                    node = traversed[i]\n                # Otherwise, make the shorter one the parent\n                else:\n                    node = TreeNode(node.val + traversed[i].val)\n                    # Add the left and right nodes to traversed\n                    for j in range(0, len(traversed), 2):\n                        if j < i:\n                            node.left = traversed[j]\n                        else:\n                            node.right = traversed[j]\n    # Return the root node\n    return node\ndef is_anagram(s1, s2):\n    '''\n    The input is two strings. Determine if the strings are anagrams of each other.\n    '''\n    return sorted(s1) == sorted(s2)\ndef count_letters(word):\n    '''\n    The input is a string. Determine how many times each letter occurs in the string.\n    '''\n    return dict(zip(list('abcdefghijklmnopqrstuvwxyz'), [0] * 26))\ndef count_anagrams(strs):\n    '''\n    The input is a list of strings. Determine how many strings from the list are anagrams of each other.\n    '''\n    # This is a helper function that counts how many times each letter occurs in a word\n    def count(word):\n        return count_letters(word)\n    # This is the list of lists of anagrams\n    anagrams = []\n    # For each string\n    for s in strs:\n        # Sort the string\n        s = sorted(s)\n        # Insert the sorted string into the list of lists of anagrams\n        anagrams.append(s)\n    # For each anagram\n    for i in range(0, len(anagrams)):\n        # For each letter\n        for j in range(0, 26):\n            # If the letter occurs in the anagram\n            if count(anagrams[i][0])[j] > 0:\n                # Count the number of times the letter occurs in the anagram\n                count(anagrams[i][0])[j] -= 1\n                # The anagram is not an anagram of itself\n                if i!= 0:\n                    # Check to see if the anagram is an anagram of the previous anagram\n                    if sorted(anagrams[i - 1][0]) == sorted(anagrams[i][0]):\n                        # If so, add one to the number of anagrams\n                        anagrams[i][1] += 1\n    # Return the list of lists of anagrams\n    return anagrams\ndef number_characters(strs):\n    '''\n    The input is a list of strings. Determine how many characters each string contains.\n    '''\n    # This is a helper function that counts how many times each letter occurs in a word\n    def count(word):\n        return count_letters(word)\n    # This is the list of lists of a character\n    characters = []\n    # For each string\n    for s in strs:\n        # Sort the string\n        s = sorted(s)\n        # Insert the sorted string into the list of lists of characters\n        characters.append(s)\n    # For each character\n    for i in range(0, 26):\n        # For each string\n        for j in range(0, len(characters)):\n            # If the character occurs in the string\n            if count(characters[j][0])[i] > 0:\n                # Count the number of times the letter occurs in the string\n                count(characters[j][0])[i] -= 1\n                # The character is not a character of itself\n                if j!= 0:\n                    # Check to see if the character is a character of the previous string\n                    if sorted(characters[j - 1][0]) == sorted(characters[j][0]):\n                        # If so, add one to the number of characters\n                        characters[j][1] += 1\n    # Return the list of lists of characters\n    return characters\ndef contains_pair(strs, pair):\n    '''\n    The input is a list of strings. Determine if the list contains a pair of strings that are anagrams of each other.\n    '''\n    # This is a helper function that counts how many times each letter occurs in a word\n    def count(word):\n        return count_letters(word)\n    # This is the list of lists of anagrams\n    anagrams = []\n    # For each string\n    for s in strs:\n        # Sort the string\n        s = sorted(s)\n        # Insert the sorted string into the list of lists of anagrams\n        anagrams.append(s)\n    # Thi",
        "test": "assert     count_same_pair([1,1,2,2,1,2,1,2,1,1], [1,2,1,2,1,1,1,1,2,1]) == 9",
        "num_ids": 2685,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    else:\n        return base * power_base_sum(base, power - 1)\n",
        "test": "assert     power_base_sum(2, 1) == 2",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    reg = re.compile(r'\\\"(.*?)\\\"')\n    return re.findall(reg, text1)\n",
        "test": "assert     extract_quotation('Have you tried our tutorial section on using data visualization in Python?  See if you can create a graph and print the top 10 countries by total number of visitors. Go to the tutorial section of this course for more information and get started with your visualization') ==     [{'name': 'tutorial', 'value': 'tutorial'}, {'name': 'Python', 'value': 'Python'}, {'name': 'visualization', 'value': 'visualization'}, {'name': 'countries', 'value': 'countries'}, {'name': 'Top 10', 'value': 'Top 10'}, {'name': 'visitors', 'value': 'visitors'}, {'name': 'visitor', 'value': 'visitor'}, {'name': 'top', 'value': 'top'}, {'name': 'visitors', 'value': 'visitors'}, {'name': 'visitors', 'value': 'visitors'}, {'name': 'visitors', 'value': 'visitors'}, {'name': 'visitors', 'value': 'visitors'}, {'name': 'visitors', 'value': 'visitors'}, {'name': 'visitors', 'value': 'visitors'}]",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) <= 1:\n        return test_tup\n    else:\n        return tuple([test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1)])\n",
        "test": "assert     multiply_elements((0,)) == (0,)",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i + j for i, j in zip(lst1, lst2)]\n",
        "test": "assert     sum_list( [1,2,3,4], [5,6,7,8]) == [6,8,10,12], \"example 1\"",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(k for k, _ in groupby(nums))\n",
        "test": "assert     consecutive_duplicates([1,2,3,3,4,4,4,5]) == [1,2,3,4,5]",
        "num_ids": 970,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # radius = float(raw_input('Enter radius: '))\n    # height = float(raw_input('Enter height: '))\n    #print(r,h)\n    area_cone = math.pi * r**2 * h/3\n    return area_cone\n",
        "test": "assert     lateralsurface_cone(1,0) == 0",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^0-9a-zA-Z\\s\\w\\d]+', '', text)\n",
        "test": "assert     replace_specialchar('')             == ''",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 2, 2, 3, 3], 1) == 0",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum(arr)\n",
        "test": "assert     (sum_Of_Subarray_Prod([1,2,3,4,5]) == 15)",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n ^ (n >> 1)\n    m = (m & ~0x55555555) | ((m & 0x55555555) << 1)\n    return m\n",
        "test": "assert     set_middle_bits(0b0101010101010101) == 0b1010101010101010, \"FAILED\"",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0 or a[i - 1]!= x:\n        return i\n    else:\n        return i - 1\n",
        "test": "assert     left_insertion([1, 2, 3, 5, 6, 7, 8], 2) == 1",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = re.findall(regex,string)\n    return bool(string)\n",
        "test": "assert     check_str('aeiou') == True",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return (1*n)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    m = int(math.ceil(math.log(n,2)))\n    count =0\n    for i in range(1,m+1):\n        count += n**(i+1)//(i+1)\n    if count>n:\n        print(n)\n        return True\n    return False\n",
        "test": "assert     find_Index(1)==0",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n",
        "test": "assert     tuple_to_dict((1, 2)) == {1: 2}",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    c = s[0]\n    for i in range(len(s)-1) :\n        if s[i+1]!= c :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('a') == True",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area=0.3333333333333333333333333333\n    return area\n",
        "test": "assert     area_tetrahedron(5) == 10",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right(['A', 'B', 'C', 'D', 'E'], 1)     ==     ['B', 'C', 'D', 'E', 'A']",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n    \ndef main():\n    test_tuple = (1,2,3,None)\n    print(check_none(test_tuple))\n",
        "test": "assert     check_none(())    == False",
        "num_ids": 288,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: (x%int(str(x)[0])==0) and (x%int(str(x)[-1])==0), range(startnum, endnum)))\n    \ndef is_prime(num):\n    '''\n    Write a function that checks if a number is prime or not. https://www.w3resource.com/python-exercises/number-range/python-number-range-exercise-10.php\n    '''\n    if num > 1:\n        if num > 2:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    return False\n            return True\n    return False\n",
        "test": "assert     divisible_by_digits(30, 100) == [30, 30, 30, 30, 30, 30, 30, 30]",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a<0):\n        return None\n    if(a>360):\n        return None\n    else:\n        return r*r*math.pi/180*a/360\ndef radians_to_degrees(radians):\n    '''\n    Write a function to convert radians to degrees. The function takes the radians as input.\n    '''\n    if radians>math.pi:\n        return (radians-2*math.pi)*180/math.pi\n    else:\n        return radians*180/math.pi\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between two points. The function takes the two points as inputs.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)\n",
        "test": "assert     sector_area(1,270) == 2.0 * math.pi * 1**2",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n1 = len(X)\n    n2 = len(Y)\n    n3 = len(Z)\n    LCS = [[[0 for i in range(n3 + 1)] for j in range(n2 + 1)] for k in range(n1 + 1)]\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            for k in range(1, n3 + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    LCS[i][j][k] = LCS[i - 1][j - 1][k - 1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i][j][k - 1])\n    return LCS[n1][n2][n3]\n",
        "test": "assert     lcs_of_three('ABCDGH', 'AEDFHR', 'AEGHRF') == 'AEDFHR', 'The longest common substring is AEDFHR'",
        "num_ids": 1117,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    try:\n        string = str1\n        \n        #Letters are divided by space\n        new_string = re.split('[a-zA-Z]',string)\n        \n        #Letters and spaces are put in dictionary\n        dic = {}\n        for i in new_string:\n            if i.isalpha() == True:\n                if i.isupper() == True:\n                    dic[i] =''\n                else:\n                    dic[i] = i\n            else:\n                dic[i] =''\n                \n        #Values are put in a list\n        values = list(dic.values())\n        \n        #Join the list to one string and print\n        final_string = \"\".join(values)\n        print(final_string)\n        \n    except ValueError:\n        print(\"Please enter a valid string\")\n",
        "test": "assert     capital_words_spaces('What is your name?') == 'What is your name?'",
        "num_ids": 1404,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(n) for n in x.split('.')])\n",
        "test": "assert     sort_numeric_strings(['10', '1', '2', '9', '5', '3']) == ['1', '2', '3', '5', '9', '10']",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "test": "assert     add_tuple(a, (2, 2)) == [3, 3]",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # corner case for empty array\n    if i >= len(arr):\n        return\n    # check if arr[i] is less than arr[2i+1] or arr[i] is less than arr[2*i+2]\n    if i < len(arr)-1 and arr[i] > arr[i+1] or arr[i] > arr[2*i+2]:\n        return False\n    # recursively check the rest of the nodes\n    return check_min_heap_helper(arr, 2*i+2) and check_min_heap_helper(arr, 2*i+1)\n",
        "test": "assert     check_min_heap_helper([2,1,4,3], 2) == False",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = [0, 1, 1]\n    for i in range(n):\n        a.append(a[i] + a[i-1])\n    return a[n]\n",
        "test": "assert     jacobsthal_num(1)     == 1",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    d = {}\n    for i in test_list:\n        if i[0] in d:\n            d[i[0]].append(i[1])\n        else:\n            d[i[0]] = [i[1]]\n    \n    min_list = []\n    \n    for j in d:\n        min_list.append(d[j])\n        min_list.sort(key = lambda x: x)\n        if len(min_list) == K:\n            break\n    \n    return min_list\n",
        "test": "assert     min_k(lst, 2) == ('d', ['a', 'b'])",
        "num_ids": 2674,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if l1 == l2 == l3:\n        return l1\n    if l1 == l2:\n        return [item for item in l1 if item in l3]\n    if l1 == l3:\n        return [item for item in l1 if item in l2]\n    if l2 == l3:\n        return [item for item in l2 if item in l1]\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    l1_ = []\n    l2_ = []\n    l3_ = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(l1) and j < len(l2) and k < len(l3):\n        if l1[i] == l2[j] == l3[k]:\n            l1_.append(l1[i])\n            l2_.append(l2[j])\n            l3_.append(l3[k])\n        if l1[i] < l2[j]:\n            i += 1\n        elif l2[j] < l3[k]:\n            j += 1\n        else:\n            k += 1\n    return l1_ + l2_ + l3_\n",
        "test": "assert     extract_index_list(['a', 'b', 'c'], [0, 1, 1], [1, 2, 3, 4, 5]) == ['b']",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers)<2:\n        return None\n    else:\n        numbers = sorted(numbers)\n        return numbers[1]\n",
        "test": "assert     second_smallest([1, 2, 3, 4, 5, 6, 7, 1]) == 1",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one('ab') == True",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    length = len(test_list)\n    #creating a count variable\n    count = 0\n    #looping over each string in the list\n    for i in range(length):\n        #creating a reverse copy of each string\n        #the slice operator will reverse the string and return it\n        reverse_string = test_list[i][::-1]\n        #checking if the reverse copy is also present in the list\n        if reverse_string in test_list:\n            #incrementing the count\n            count += 1\n    #returning the count\n    return count\n",
        "test": "assert     count_reverse_pairs([\"cat\", \"dog\", \"mouse\"]) == 0",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1={}\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n            dict1[tuple(i)]=list1.count(i)\n    return dict1\n",
        "test": "assert     unique_sublists([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == {(1, 2, 3, 4): 4}",
        "num_ids": 2876,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    return re.match(r'^[+-]?(0|[1-9][0-9]*)(\\.\\d{1,2})?$', num) is not None\n",
        "test": "assert     is_decimal('10.00') == True",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) > len(set(arr)):\n        return False\n    else:\n        return True\n",
        "test": "assert     unique_Element([1, 2, 3, 4, 5, 5]) == False",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    return True\n",
        "test": "assert     check_monthnumber_number(2) == True, 'check_monthnumber_number(2)'",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n    return min_diff\n",
        "test": "assert     find_min_diff([5,2,3,4,1],5) == 1",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n",
        "test": "assert     number_ctr('1234567890') == 10",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n//2 in [0,1,2,3,4,6,8,9,12,13,14,16,18,19,20,22,23,24,25,26,27,28,29,30,32,33,34,36,37,38,39,40,42,43,44,45,46,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n",
        "test": "assert     is_polite(1) == 1",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    out = []\n    for i in range(n):\n        if i + 1 < n:\n            out.append([l1[i], l1[i+1]])\n    return out\n",
        "test": "assert     pair_wise([1, 2, 3, 4, 5]) ==     [[1, 2], [2, 3], [3, 4], [4, 5]]",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    if n == 1:\n        return (1 if sum == arr[0] else 0)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert     get_pairs_count([1, 2, 3, 4, 6, 5], 5) == 2, \"function is broken\"",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "test": "assert     Diff([1,2,3,4],[1,2,3]) == [4]",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1) : \n        if i % 2!= 0 : \n            total += i**4\n    return total\n",
        "test": "assert     (odd_num_sum(1) == 1) ",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Takes a string and returns a stack\n    # LIFO\n    stack = []\n    \n    # Traversing the Expression\n    for item in exp:\n        if item == \"(\":\n            stack.append(item)\n        elif item == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    \n    # If stack is empty, expression is balanced\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_expression('(()))') == False",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    splitted_str = test_str.split(' ')\n    \n    return''.join([word for word in splitted_str if len(word)!= K])\n",
        "test": "assert     remove_length(\"ABCDEFG\", 2)     == \"ABCDEFG\"",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=re.findall(pattern,text)\n    if(len(occurance)!=0):\n        print(\"\\nPattern %s has occured %s times in %s\"%(pattern,len(occurance),text))\n        for i in occurance:\n            print(\"\\tPattern found at index %s\"%(text.index(i)))\n    else:\n        print(\"\\nPattern %s not found in %s\"%(pattern,text))\n    \ndef occurance_string(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=re.findall(pattern,text)\n    if(len(occurance)!=0):\n        print(\"\\nPattern %s has occured %s times in %s\"%(pattern,len(occurance),text))\n    else:\n        print(\"\\nPattern %s not found in %s\"%(pattern,text))\n    \n",
        "test": "assert     occurance_substring(\"abc\", \"d\") == None",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n",
        "test": "assert     odd_position([1,2,3,4,5]) == True",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for idx, char in enumerate(test_str):\n        if char in vowels and (idx == 0 or not test_str[idx-1] in vowels):\n            count += 1\n    return count\n",
        "test": "assert     count_vowels('Monday') == 2",
        "num_ids": 2588,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "test": "assert     find_sum([1,2,3,4,5]) == 15",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    consecutive_duplicates_of_list1 = []\n    grouped_by_consecutive_duplicates = []\n    list1 = list(list1)\n    for i in list1:\n        grouped_by_consecutive_duplicates.append(list(groupby(list1, lambda x: x == i)))\n    for i in grouped_by_consecutive_duplicates:\n        for j in i[1]:\n            consecutive_duplicates_of_list1.append(i[0]+[j])\n    return consecutive_duplicates_of_list1\n",
        "test": "assert     pack_consecutive_duplicates([1,1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5]) == [[1,1,1],[2,2],[3,3,3],[4,4,4,4],[5,5,5,5]]",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    #This is a very interesting problem!\n    #Lets first get the unique elements within a list.\n    #I will return a dictionary with the unique elements as the keys, and the values as the number of times they appeared in the list\n    #example: {1:1, 2:1, 3:1} would represent 1,2,3 as unique elements within a list\n    #we can then proceed to return the number of lists within a list\n    #first lets find the unique elements within a list\n    #this is going to be a very slow operation, so we will create a helper function to return the unique elements within a list\n    #we will use the python set class, which is a hash table data structure\n    def helper(list1):\n        list1 = list(set(list1))\n        return list1\n    #now lets begin the counting of elements within a list\n    #we will use the count method to count the number of times an element appears in a list\n    #we will then use the helper function to create a dictionary with unique elements as the keys, and the number of times they appear as the values\n    dict1 = {}\n    for element in list1:\n        if element not in dict1:\n            dict1[element] = list1.count(element)\n    #we will now create a dictionary for the number of lists within a list\n    #we will create a helper function to do this\n    #We will use a simple loop to create a dictionary of lists\n    #The keys will be the number of lists, and the values will be a list of lists\n    dict2 = {}\n    for element in list1:\n        if list1.count(element) not in dict2:\n            dict2[list1.count(element)] = [element]\n        else:\n            dict2[list1.count(element)].append(element)\n    return dict2\n",
        "test": "assert ",
        "num_ids": 1158,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list.sort()\n    combs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] + test_list[j] not in combs:\n                combs.append(test_list[i] + test_list[j])\n    return combs\n",
        "test": "assert     find_combinations([(1, 7), (7, 6), (4, 5), (3, 5), (6, 8)]) == [(1, 7), (3, 5), (6, 8), (1, 6), (3, 6), (6, 8), (1, 5), (3, 5), (6, 8)]",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    div = 1\n    for i in range(1, n+1) :\n        if(n%i == 0) :\n            div = div + 1\n    if div%2 == 0 :\n        return True\n    else :\n        return False\n",
        "test": "assert     count_divisors(2)    == 0",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    # if array is empty or of length 1\n    if len(arr)==0 or len(arr)==1:\n        return 0\n",
        "test": "assert ",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert the rgb values to their respective ranges.\n    rgb_range = 255.0\n    red = r / rgb_range\n    green = g / rgb_range\n    blue = b / rgb_range\n    max_of_rgb = max(red, green, blue)\n    min_of_rgb = min(red, green, blue)\n    # Determine the value of hue, saturation and brightness\n    if max_of_rgb == min_of_rgb:\n        hue = 0\n    elif max_of_rgb == red:\n        hue = 60 * (((green - blue) / (max_of_rgb - min_of_rgb)) % 6)\n    elif max_of_rgb == green:\n        hue = 60 * (((blue - red) / (max_of_rgb - min_of_rgb)) + 2)\n    elif max_of_rgb == blue:\n        hue = 60 * (((red - green) / (max_of_rgb - min_of_rgb)) + 4)\n    # Now determine the saturation and brightness\n    if max_of_rgb == 0:\n        sat = 0\n    else:\n        sat = 1 - min_of_rgb / max_of_rgb\n    if sat == 0:\n        val = max_of_rgb\n    else:\n        val = max_of_rgb * (1 - min_of_rgb / 255)\n    return hue, sat, val\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    num1=1\n    num2=1\n    for item in list1:\n        if item%2==0:\n            num1=num1*item\n        else:\n            num2=num2*item\n    return num1,num2\n",
        "test": "assert     mul_even_odd([1,2,3,4,5,6,7,8]) == [2,16,0]",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n",
        "test": "assert     (0,0,0) == tuple_str_int('0,0,0')",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    i = len(a)-1\n    j = i -1\n    while(i>0 and a[i-1]>x):\n        a[i], a[j] = a[j], a[i]\n        i=i-1\n        j=j-1\n    return i\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    i = len(a)-1\n    j = i -1\n    while(i>0 and a[i-1]>x):\n        a[i], a[j] = a[j], a[i]\n        i=i-1\n        j=j-1\n    return i\n",
        "test": "assert     right_insertion([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 9",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"(?<!^)(a)([b]{3})(?!$)\"\n    result = re.match(pattern, text)\n    if result:\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n",
        "test": "assert     text_match_three('abcd')",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)\n",
        "test": "assert ",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 0 and i % 2 == 0:\n            count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False\n",
        "test": "assert     even_position([1, 2, 3, 4, 6]) == False",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    l=[]\n    for each in test_tup:\n        if type(each)==tuple:\n            l.append(each)\n    return tuple(l)\n",
        "test": "assert     (remove_nested(((1, 2), [3, 4], (5, 6))) == ((1, 2), (5, 6)))",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "test": "assert     count_list([[0]]) == 1,     'incorrect count'",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    for i in range(length-1,0,-1):\n        if arr[i] == x:\n            return i\n    return -1\n",
        "test": "assert     last([1,2,3,4,5],5) == 4",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\ba[^\\ba]*b')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_starta_endb(\"ab\") == True",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "test": "assert     return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n*(n+1)/2\n",
        "test": "assert     (sum_odd(1) == 1)",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([1,2,3]) == 6, 'incorrect implementation of _sum'",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if not isinstance(n,int) or not isinstance(d,int):\n        return None\n    if n<0 or d<0:\n        return None\n    n=bin(n)[2:]\n    n=n[-32:]\n    if d>len(n):\n        return None\n    else:\n        n=n[-d:]+n[:-d]\n        return int(n,2)\n",
        "test": "assert 00000000000000000000000000000000000000000000000 == left_rotate(0b00000000000000000000000000000000000000000000000,1)",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\" \", \"\", text)\n",
        "test": "assert     remove_all_spaces('') == ''",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y and y==z:\n        return 3\n    else:\n        return 0\n",
        "test": "assert     test_three_equal(1,2,1) == 0",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #code\n    if len(arr) == 0 or len(arr) == 1:\n        return 0\n",
        "test": "assert ",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    x = int(math.sqrt(n))\n    if (x*x == n) :\n        return True\n    else :\n        return False\n",
        "test": "assert     is_perfect_square(1) == True",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product*i\n    if product%2==0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([2,2,2,2]) == True, \"Test 1 failed\"",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # sums = [sum(x) for x in lists]\n    # highest_sum = max(sums)\n    # highest_sum_index = sums.index(highest_sum)\n    # return lists[highest_sum_index]\n    def max_sum(lists):\n        sums = [sum(x) for x in lists]\n        max_sum = max(sums)\n        return [x for (i, x) in enumerate(lists) if sums[i] == max_sum][0]\n    return max_sum(lists)\n",
        "test": "assert     max_sum_list([[1, 2, 3], [4, 5, 6]]) == [4, 5, 6]",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run=0\n    run=0\n    for i in range(len(test_str)):\n        if test_str[i]==test_str[i].upper():\n            run+=1\n        else:\n            if run>max_run:\n                max_run=run\n            run=0\n    if run>max_run:\n        max_run=run\n    return max_run\n",
        "test": "assert     max_run_uppercase('Python') == 1",
        "num_ids": 612,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert     first_odd([1,2,3,4,5]) == 1",
        "num_ids": 2268,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_K(('a', 1), 1) == True",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert     check_smaller(('a', 2, 3), ('b', 3, 2)) == False",
        "num_ids": 514,
        "indeed": false
    }
]