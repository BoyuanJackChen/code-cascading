[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # write your code here\n    # a = set(test_tup1)\n    # b = set(test_tup2)\n    # return list(a & b)\n    return list(set(test_tup1) & set(test_tup2))\n",
        "test": "assert     similar_elements( (1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 7, 6) ) == [1, 2, 3, 4, 6]",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1 or n == 2:\n        return False\n    else:\n        if n%2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n))+1):\n                if n%i == 0:\n                    return False\n    return True\ndef prime_factorization(n):\n    '''\n    Write a python function to find prime factors of a given number.\n    '''\n    i = 2\n    factors = []\n    while n!= 1:\n        if is_not_prime(i):\n            while n%i == 0:\n                factors.append(i)\n                n /= i\n        else:\n            i += 1\n    return factors\n",
        "test": "assert     is_not_prime(2) == False, 'Fail'",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\n",
        "test": "assert     hq.nlargest(1,range(4))==[3]",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # return (x & (x - 1)) == 0\n    return (x & (x - 1)) == 0\n",
        "test": "assert     is_Power_Of_Two(0b10010100) == False",
        "num_ids": 2163,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return re.findall(r'\\w+', text)\ndef find_char_long_v2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v3(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return re.findall('\\w+', text)\ndef find_char_long_v4(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v5(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v6(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v7(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v8(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v9(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return re.findall(r'\\w+', text)\ndef find_char_long_v10(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v11(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v12(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v13(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v14(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v15(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v16(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v17(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v18(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v19(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v20(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v21(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return list(filter(lambda x: len(x)>=4, re.findall(r'\\w+', text)))\ndef find_char_long_v22(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return 'invalid input'\n    else:\n        return [x for x in re.findall(r'\\w+', text) if len(x)>=4]\ndef find_char_long_v23(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n",
        "test": "assert     find_char_long('I love you.') == ['love']",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # for i in range(len(nums)):\n    #     nums[i] = nums[i]**2\n    # return nums\n    # return [x**2 for x in nums]\n    return list(map(lambda x: x**2, nums))\n",
        "test": "assert     square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    n = len(str)\n    # your code here\n    \n    def helper(s, result):\n        if s == \"\":\n            return result\n        else:\n            if s[0] == s[-1]:\n                result += helper(s[1:-1], result)\n            else:\n                result += helper(s[1:], result)\n            return result\n        \n    return helper(str, 0)\n",
        "test": "assert     find_Rotations(\"abc\") == 0",
        "num_ids": 2221,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    import re\n    return re.sub(ch+'+','',s)\n",
        "test": "assert ",
        "num_ids": 168,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    return sorted(M, key = lambda row: row_sums.index(sum(row)))\n",
        "test": "assert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (h*(h+l))/2.0*b\n",
        "test": "assert     find_Volume(0,0,0) == 0",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = re.match('^[a-z]*_?[a-z]+$', text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_lowercase_underscore('ABC') == False",
        "num_ids": 216,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert     square_perimeter(4) == 16,    'Wrong answer: %s' % square_perimeter(4)",
        "num_ids": 142,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in range(len(string)):\n        if string[i] not in list1:\n            list1.append(string[i])\n    return list1\n",
        "test": "assert     str_to_list('ABC', 'CBA') == False",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 1:\n        return False\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n",
        "test": "assert     test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # You may assume woodball numbers are 6-digit numbers.\n    return len(str(x)) == 6\n",
        "test": "assert     is_woodall(0) == False",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (2*(num%10))\n",
        "test": "assert     rev(123) == False",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest_num = -1\n    for i in range(len(arr)) : \n        if arr[i] > largest_num : \n            largest_num = arr[i]\n    return largest_num\n",
        "test": "assert     find_Max_Num([0,0,0,1,1,2,2,2,3,3,3]) == 3",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0\n",
        "test": "assert     opposite_Signs(1,-1) == True, 'function opposite_Signs(1,-1) returns wrong'",
        "num_ids": 260,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = [1,8,36,64,100,144,196,256,384,512,600,768,1024,1536,2048,3072,4096,65536,858993459]\n    if n <= 0:\n        return False\n    elif n in octagonal:\n        return True\n    else:\n        return is_octagonal(n-1)\n",
        "test": "assert     is_octagonal(2) == 1",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s = list(s)\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[i] = 0\n        for j in range(i,len(s)):\n            d[i] += (len(s[i:j+1])==j-i+1)\n    return d[len(s)-1]\n",
        "test": "assert     count_Substrings('a') == 1",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_val = xs[0]\n    for item in xs:\n        if item < min_val:\n            min_val = item\n    return min_val\n",
        "test": "assert     smallest_num([1,2,3,4,5]) == 1",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    length = len(test_list)\n    if length < 2:\n        return -1\n    else:\n        test_list.sort()\n        min = test_list[0] + test_list[1]\n        for i in range(2, length):\n            min = test_list[i] - test_list[i - 1]\n        return min\n",
        "test": "assert     max_difference(test_list2) == 4",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    import operator\n    return sorted(subjectmarks,key=operator.itemgetter(1))\n",
        "test": "assert     subject_marks([(3, 5), (2, 4), (2, 4), (2, 4), (2, 4), (1, 3)]) == [(2, 4), (1, 3), (2, 4), (2, 4), (2, 4), (3, 5)]",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) is list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert         recursive_list_sum([1, 2, [3, 4, 5], 6]) == 21",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return list.count('pos')\n",
        "test": "assert     pos_count([]) == 0, 'expect 0'",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0 or n==1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n",
        "test": "assert     bell_number(1) == 1, \"INCORRECT!\"",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0,len(A)):\n        if A[i]>=A[i-1]:\n            continue\n        else:\n            return False\n    return True\ndef is_Monotonic(A):\n    return all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1))\ndef is_Monotonic(A):\n    return all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1))\n",
        "test": "assert     is_Monotonic([1,2,2,3]) == True",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return False\n    else:\n        if l[0] == s:\n            return True\n        else:\n            return is_sublist(l[1:], s)\n",
        "test": "assert     is_sublist([1,2,3], [1,2]) == False",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(x)==len(Input[0]) for x in Input)\n",
        "test": "assert     find_equal_tuple([(1,2),(4,5),(7,8,9)]) == False",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert     comb_sort([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n**0.5 == int(n**0.5):\n        return True\n    else:\n        return False\n",
        "test": "assert     dif_Square(5) == False",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if colors[i]==colors[i+1] and colors[i] not in patterns:\n            return False\n    return True\n",
        "test": "assert     is_samepatterns([\"red\", \"yellow\", \"blue\", \"green\", \"blue\", \"orange\", \"red\", \"yellow\", \"green\", \"blue\", \"orange\"], [\"rgb\", \"bgr\", \"gbr\", \"rgg\", \"rrr\", \"bgrr\", \"gbrg\", \"rrgg\", \"rgbr\", \"rgbg\"])",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        for i in range(len(tup)):\n            if (tup[i] % K!= 0):\n                break\n        else:\n            result.append(tup)\n    return result\n",
        "test": "assert     find_tuples([(1,2),(2,3),(3,4)], 1) == [(1,2),(2,3),(3,4)]",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n",
        "test": "assert     is_Diff(10)     == False",
        "num_ids": 153,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n",
        "test": "assert     (word_len(\"banana\") == True)",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = 0\n    for i in range(n):\n        tetrahedral += ((1+i)**4)\n    return tetrahedral\n",
        "test": "assert     tetrahedral_number(0) == 0",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r < 0:\n        return 'Invalid input'\n    else:\n        return (4/3)*math.pi*math.pow(r,3)\n    \ndef sphere_surface_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r < 0:\n        return 'Invalid input'\n    else:\n        return 4*math.pi*math.pow(r,2)\n",
        "test": "assert     volume_sphere(4) == 12.566370614359172, \"incorrect\"",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    print(chr( (sum( map(ord, strr)) % 26) + 97 ) )\n    return \n",
        "test": "assert ",
        "num_ids": 148,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0]\n    for i in xrange(1, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq[-1]\n",
        "test": "assert ",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n",
        "test": "assert     surfacearea_sphere(1) == 4.0 * math.pi",
        "num_ids": 179,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**2 + n) / 2\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if isinstance(dict1,dict) and isinstance(dict2,dict) and isinstance(dict3,dict):\n        dict_m = dict()\n        for k, v in dict1.items():\n            dict_m[k] = v\n        for k, v in dict2.items():\n            dict_m[k] = v\n        for k, v in dict3.items():\n            dict_m[k] = v\n        return dict_m\n    return {}\n",
        "test": "assert     merge_dictionaries_three({'a':1, 'b':2},{'x':3, 'y':4},{'z':5}) ==     {'a':1, 'b':2, 'x':3, 'y':4, 'z':5}",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = collections.Counter(list1)\n    return counts\n",
        "test": "assert     freq_count(['a','b','c','d']) == collections.Counter(['a','b','c','d'])",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    res = 0\n    for i in range(N-1, 0, -1):\n        if abs(i-N) < abs(res-N):\n            res = i\n    return res\n",
        "test": "assert     closest_num(14) == 13",
        "num_ids": 174,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #print len(max(list1))\n    return len(max(list1))\n",
        "test": "assert     len_log(['one','two','three']) == 3",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in string for string in str1)\n",
        "test": "assert     find_substring([\"ab\", \"ba\", \"ba\", \"cd\", \"abcd\"], \"ba\") == True",
        "num_ids": 148,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 2: \n        return False\n    \n    for i in range(2,n): \n        if n % i == 0: \n            return False\n",
        "test": "assert     is_undulating(10) == False, 'wrong answer'",
        "num_ids": 188,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1/power(a,-b)\n    if b%2 == 0:\n        return power(a*a,b/2)\n    else:\n        return power(a*a,(b-1)/2)*a\n",
        "test": "assert     power(2,3) == 8",
        "num_ids": 253,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert     index_minimum([(1,2), (2,1), (2,3), (2,5), (1,1)]) == 1",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_length = len(lst[0])\n    \n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    \n    return min_length\n",
        "test": "assert     Find_Min_Length([[1,2], [3,4], [5,6]]) == 2",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    c = 0\n    while i<=n:\n        if n%i==0:\n            c+=1\n        i+=1\n    return c\n",
        "test": "assert     divisor(10) == 4",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1 = [item for sublist in list1 for item in sublist]\n    return Counter(list1)\n",
        "test": "assert     frequency_lists([[1,2],[3],[4,5,6]]) == {1:1, 2:1, 3:2, 4:1, 5:1, 6:2}",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[0] * multiply_num(numbers[1:])\n",
        "test": "assert     multiply_num([1, 2, 3]) == 6",
        "num_ids": 198,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n    return decimal_to_binary(n//2) + str(n%2)\n",
        "test": "assert     decimal_to_binary(1)         == '1', \"Fail: decimal_to_binary(1)\"",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    num_length = len(num_str)\n    last_half = num_str[num_length // 2:]\n    first_half = num_str[:num_length // 2]\n    if last_half == first_half:\n        num_str = '1' + num_str\n    else:\n        num_str = int(last_half + first_half[1:])\n    return num_str\n",
        "test": "assert     next_smallest_palindrome(7) == 7",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return \"Invalid input\"\n    \n    # sort array\n    arr.sort()\n    # return kth element\n    return arr[k-1]\n",
        "test": "assert     kth_element([1,2,3,4], 1) == 1",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake_case_split = word.split('_')\n    return str.join('',map(str.capitalize,snake_case_split))\n",
        "test": "assert     snake_to_camel('snake_case') == 'SnakeCase'",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * (n - 1) // 2 + m\n",
        "test": "assert     eulerian_num(0, 0) == 0",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for i in input_list:\n        result.append(sorted(i))\n    return result\n",
        "test": "assert     sort_sublists([[], [], [], []]) == [[], [], [], []]",
        "num_ids": 313,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(i) for i in lst)\n",
        "test": "assert ",
        "num_ids": 147,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_lists(['a', 'b', 'c'], ('d', 'e', 'f')) == \\",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #num1 = [1, 3, 5, 7, 8, 10]\n    #num2 = [2, 4, 6, 9, 11, 15]\n    #num3 = [0, 6, 12]\n    #print(num1)\n    #print(num2)\n    #print(num3)\n    #merge_sorted_list(num1,num2,num3)\n    #print(num1)\n    #print(num2)\n    #print(num3)\n    if(len(num1) == 0):\n        return num2 + num3\n    if(len(num2) == 0):\n        return num1 + num3\n    if(len(num3) == 0):\n        return num1 + num2\n    if(num1[0] < num2[0]):\n        return [num1[0]] + merge_sorted_list(num1[1:], num2, num3)\n    else:\n        return [num2[0]] + merge_sorted_list(num1, num2[1:], num3)\n    \n    \n",
        "test": "assert     merge_sorted_list([], [], []) == []",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n < 0:\n        return odd_Equivalent(s[::-1],n*-1)\n    if n == 0:\n        return 1 if s.count('1')%2==0 else 0\n    rotated_string = s[n:] + s[:n]\n    return len([x for x in rotated_string if x == '1'])%2\n",
        "test": "assert     odd_Equivalent('100110101', 2) == 1",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    common = []\n    for i in nestedlist[0]:\n        if all(i in nestedlist[j] for j in range(1, len(nestedlist))):\n            common.append(i)\n    return common\n",
        "test": "assert     [1, 2, 3]     == common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]])",
        "num_ids": 610,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('123') == True",
        "num_ids": 167,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic == {}:\n            return True\n    return False\n    ",
        "test": "assert         empty_dit([{}]*10)",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for x in nums:\n        num = num * 10 + x\n    return num\n",
        "test": "assert     tuple_to_int((1,2,3)) == 123",
        "num_ids": 191,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        try:\n            result.append(float(i))\n        except:\n            result.append(i)\n    return result\n",
        "test": "assert     list_to_float([1, '2.5', 'a']) == [1, 2.5, 'a']",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "test": "assert     string_to_list('Hello World') == ['Hello', 'World']",
        "num_ids": 158,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return arr[next((i for i, val in enumerate(arr[1:], 1) if val!= arr[i-1]), len(arr))]\n",
        "test": "assert     search([]) == None",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = list1.sort()\n    return(list1[-1] * list1[-2])\n",
        "test": "assert     (max_product_tuple(test_list2) == (60,60))",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(range(1, limit, 1))\n",
        "test": "assert     amicable_numbers_sum(10000) == 1633",
        "num_ids": 167,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n",
        "test": "assert     angle_complex(1+0j,0+0j)==0",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    result = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            result = max(result, string[i+1:].count('0'))\n        else:\n            result = max(result, string[i+1:].count('1'))\n    return result\n",
        "test": "assert     find_length(\"011110\") == 3",
        "num_ids": 2359,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = set(a) & set(b)\n    return sum(common_divisors)\n",
        "test": "assert     sum(100,100)==1",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    return x*y\n",
        "test": "assert     multiply_int(1, 2) == 2",
        "num_ids": 200,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if len(str) < n:\n        return False\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert     long_words(3, ['this', 'is', 'a', 'function', 'to', 'find', 'words', 'that', 'are', 'longer', 'than', 'n']) == ['is', 'a', 'function']",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_squares = [\n        [[8, 1, 6], [3, 5, 7], [4, 9, 2]],\n        [[6, 1, 8], [7, 5, 3], [2, 9, 4]],\n        [[4, 9, 2], [3, 5, 7], [8, 1, 6]],\n        [[2, 9, 4], [7, 5, 3], [6, 1, 8]],\n        [[8, 3, 4], [1, 5, 9], [6, 7, 2]],\n        [[4, 3, 8], [9, 5, 1], [2, 7, 6]],\n        [[6, 7, 2], [1, 5, 9], [8, 3, 4]],\n        [[2, 7, 6], [9, 5, 1], [4, 3, 8]],\n    ]\n",
        "test": "assert     not magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    res = nums[0]\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            if count > max_count:\n                res = nums[i-1]\n                max_count = count\n            count = 1\n    if count > max_count:\n        res = nums[-1]\n        max_count = count\n    return res\n",
        "test": "assert max_occurrences([1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3]) == 3",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = ['a','e','i','o','u','y']\n    string = list(str1)\n    \n    for i in range(len(string)):\n        if string[i] not in vowels:\n            string[i] = string[i]\n        elif string[i] in vowels:\n            string[i] = string[i].replace(string[i],'',1)\n    \n    string = \"\".join(string)\n    \n    return string\n",
        "test": "assert     reverse_vowels(\"programming\") == \"gmringng\"",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert     tup_string((1, 2, 3)) == '(1, 2, 3)', \"Failed\"",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_num = 0\n    for num in nums:\n        if num < 0:\n            sum_num += num\n    return sum_num\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 158,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        if nums[0] == 0:\n            return 1\n        else:\n            return 0\n    else:\n        n = len(nums)\n        first = 0\n        second = 0\n        if nums[0] == 0:\n            first += 1\n        else:\n            second += 1\n        for i in range(1,n):\n            if nums[i] == 0:\n                first += 1\n            else:\n                second += 1\n        return float(first)/float(second)\n",
        "test": "assert     zero_count([]) == 0",
        "num_ids": 2333,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    number = bin(n)[2:]\n    power_of_two = [2**i for i in range(len(number)) if number[-i-1] == '1']\n    return sum(power_of_two) == n\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(0)",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = math.pi\n    return 2 * pi * r\n    \ndef get_radius(r, length):\n    '''\n    Write a function to calculate the radius of a circle.\n    '''\n    return length / 2 / math.pi\n",
        "test": "assert     circle_circumference(2) == 12.566370614359172",
        "num_ids": 191,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for i in test_list:\n        flattened_list.append(i)\n    return flattened_list\n",
        "test": "assert     extract_singly([]).__class__ == list",
        "num_ids": 251,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in xrange(n//2):\n        nums[i], nums[n-i-1] = nums[n-i-1], nums[i]\n        n -= 1\n        if n % 2!= 0:\n            nums[n//2], nums[n//2-1] = nums[n//2-1], nums[n//2]\n        else:\n            nums[n//2], nums[n//2] = nums[n//2], nums[n//2]\n    return nums\n",
        "test": "assert     [1,2,3,4,5]         == pancake_sort([5,1,2,3,4])",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count = count + 1\n    return count\n",
        "test": "assert     count_samepair([1,2,3], [1,2,3], [1,2,3]) == 3",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count = 0\n    if type(Input) == tuple:\n        for i in Input:\n            if type(i) == list:\n                count += 1\n    else:\n        return -1\n    return count\n",
        "test": "assert     find_lists(()) == 0",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        max_diff = max(max_diff, arr[i] - arr[i - 1])\n    return max_diff\n",
        "test": "assert     max_Abs_Diff([-1, -2, -3, -4, -5, -6]) == -1",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Linear equations\n    # a * x + b * y = n\n    # x = (n - b * y) / a\n    # y = (n - a * x) / b\n",
        "test": "assert     find_solution(7,4,17) == (2,3)",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            new_list.append(list1[i])\n    return new_list\n",
        "test": "assert         remove_elements([1,2,3,4],[1,2,3]) == [4]",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + sum_series(n-2)\n",
        "test": "assert     sum_series(1) == 1",
        "num_ids": 198,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * tan(pi/s) * l**2) / 4\n",
        "test": "assert     area_polygon(2, 3) == 7.28, 'area of a triangle is 7.28'",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_divisors(n): \n        i = 1\n        total = 0\n        while i <= math.sqrt(n):\n            if n % i == 0:\n                if n // i == i:\n                    total += i\n                else:\n                    total += i\n                    total += n // i\n            i += 1\n        return total - n\n    num1, num2 = 0, 0\n    num1 = sum_divisors(n)\n    num2 = sum_divisors(n)\n    return num1 == num2\n",
        "test": "assert     div_sum(1) == True",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if alphabet.lower().index(str1[i].lower()) == i:\n            count += 1\n    return count\n",
        "test": "assert     count_char_position('a') == 1",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # count = 0\n    # for i in range(len(A)):\n    #     for j in range(i+1, len(A)):\n    #         if (A[i] ^ A[j]) % 2 == 0:\n    #             count += 1\n    # return count\n    return len([a for a in A if a % 2 == 0]) * len([a for a in A if a % 2 == 1])\n",
        "test": "assert     find_even_pair([]) == 0",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    x = 1\n    while x <= n:\n        x = x * 2\n    return x\n",
        "test": "assert     next_power_of_2(7) == 8",
        "num_ids": 154,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x not in a:\n        return 0\n    else:\n        return a.count(x)\n",
        "test": "assert     frequency([1, 2, 3, 4, 4, 4, 4, 5], 5) == 1",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= n:\n        return sum(list1[m:n+1])\n    else:\n        return sum(list1[m:n-1:-1])\n    \n    \ndef even_numbers_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find all even numbers in a list within a range specified by two indices.\n    '''\n    return [x for x in list1[m:n+1] if x%2 == 0]\n    \n    \ndef odd_numbers_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find all odd numbers in a list within a range specified by two indices.\n    '''\n    return [x for x in list1[m:n+1] if x%2!= 0]\n    \n    \ndef longest_common_prefix_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the longest common prefix of a list within a range specified by two indices.\n    '''\n    return list1[m].split('.')[0]\n    \n    \ndef minimum_value_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the minimum value in a list within a range specified by two indices.\n    '''\n    return min(list1[m:n+1])\n    \n    \ndef maximum_value_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the maximum value in a list within a range specified by two indices.\n    '''\n    return max(list1[m:n+1])\n    \n    \ndef average_value_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the average of all values in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])/float(n-m+1)\n    \n    \ndef sum_of_list_values(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of all values in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n    \n    \ndef sum_of_list_values_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of all values in a list within a range specified by two indices.\n    '''\n    return sum([x for x in list1[m:n+1]])\n    \n    \ndef absolute_value_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the absolute value of all values in a list within a range specified by two indices.\n    '''\n    return [abs(x) for x in list1[m:n+1]]\n    \n    \ndef absolute_value_list_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the absolute value of all values in a list within a range specified by two indices.\n    '''\n    return [abs(x) for x in list1[m:n+1]]\n    \n    \ndef reverse_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to reverse a list within a range specified by two indices.\n    '''\n    list1[m:n+1] = list1[m:n+1][::-1]\n    \n    \ndef reverse_list_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to reverse a list within a range specified by two indices.\n    '''\n    list1[m:n+1] = list1[m:n+1][::-1]\n    \n    \ndef length_of_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the length of a list within a range specified by two indices.\n    '''\n    return n-m+1\n    \n    \ndef length_of_list_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the length of a list within a range specified by two indices.\n    '''\n    return [len(list1[m:n+1])]\n    \n    \ndef sort_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to sort a list within a range specified by two indices.\n    '''\n    list1[m:n+1] = sorted(list1[m:n+1])\n    \n    \ndef sort_list_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to sort a list within a range specified by two indices.\n    '''\n    list1[m:n+1] = sorted(list1[m:n+1])\n    \n    \ndef split_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to split a list into two parts within a range specified by two indices.\n    '''\n    list1[m:n+1], list1[m:n+1] = list1[m:n+1][:n-m], list1[m:n+1][n-m:]\n    \n    \ndef split_list_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to split a list into two parts within a range specified by two indices.\n    '''\n    list1[m:n+1], list1[m:n+1] = list1[m:n+1][:n-m], list1[m:n+1][n-m:]\n    \n    \ndef sum_all_values_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of all values in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n    \n    \ndef sum_all_values_list_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of all values in a list within a range specified by two indices.\n    '''\n    return sum([x for x in list1[m:n+1]])\n    \n    \ndef average_all_values_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the average of all values in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])/float(n-m+1)\n    \n    \ndef average_all_values_list_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the average of all values in a list within a range specified by two indices.\n    '''\n    return sum([x for x in list1[m:n+1]])/float(n-m+1)\n    \n    \ndef standard_deviation_value(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the standard deviation of all values in a list within a range specified by two indices.\n    '''\n    return statistics.stdev(list1[m:n+1])\n    \n    \ndef standard_deviation_value_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the standard deviation of all values in a list within a range specified by two indices.\n    '''\n    return statistics.stdev([x for x in list1[m:n+1]])\n    \n    \ndef sum_of_squares_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of squares of all values in a list within a range specified by two indices.\n    '''\n    return sum([x**2 for x in list1[m:n+1]])\n    \n    \ndef sum_of_squares_list_list(list1, m, n)",
        "test": "assert     sum_range_list([-5,-4,-3,-2,-1], -5, -2) == -5",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*5*3**0.5\n",
        "test": "assert     perimeter_pentagon(4) == 26.24, 'Error'",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('std') == 1",
        "num_ids": 171,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for ele in test_tuple:\n        type_list.append(type(ele))\n    return type_list\n",
        "test": "assert check_type((1,2)) == True",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # set count to 0\n    count = 0\n    # iterate through arr\n    for i in arr:\n        # if x is the current element\n        if i == x:\n            # increment count\n            count += 1\n    # if count is greater than n/2\n    if count > n/2:\n        # return true\n        return True\n    # otherwise false\n    return False\n",
        "test": "assert     is_majority([1, 2, 1, 1, 1, 2, 2, 2], 7, 3) == False",
        "num_ids": 313,
        "indeed": true
    },
    {
        "number": 224,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n &= n - 1\n        count += 1\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list=list(str)\n    if len(str_list)%2==0:\n        for i in range(len(str_list)//2):\n            str_list[i],str_list[-i-1]=str_list[-i-1],str_list[i]\n    return ''.join(str_list)\n",
        "test": "assert     'A-man' == odd_values_string('A-man')",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     min_of_three(3,1,2)    == 1",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #n is the given number\n    #l is the lower bound of the range\n    #r is the upper bound of the range\n    return not any(1<<i for i in range(l,r+1))\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(8,1,10)==False",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # helper function to sort the array\n    def helper(arr, n):\n        return [x for (y,x) in sorted(zip(arr[:n],range(n)), key=lambda p: p[0])]\n",
        "test": "assert     re_arrange_array([-1, 2, -3, 4, 5, -6], 3) == [-1, -3, -6, -2, 4, 5]",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Your code here\n    # Replace blank spaces with a character.\n    str1 = str1.replace(\" \",char)\n    return str1\n",
        "test": "assert     replace_blank('spamspamspamspamspam', 'a')     =='spamaaamaaamaaamaaamaaamaaam', 'Error in replace_blank'",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # print list1\n    # max = 0\n    # for i in range(len(list1)):\n    #     if list1[i] > max:\n    #         max = list1[i]\n    # print max\n    # return max\n    # print heapq.nlargest(n, list1)\n    # print heapq.nsmallest(n, list1)\n    # return heapq.nsmallest(n, list1)\n    return heapq.nlargest(n, list1)\n",
        "test": "assert     larg_nnum([0, 1, 3, 5, 8, 7, 2, 4, 6, 9], 4) == [9, 8, 7, 6]",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h\n",
        "test": "assert ",
        "num_ids": 229,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "test": "assert     volume_cube(2) == 8",
        "num_ids": 128,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n",
        "test": "assert     even_bit_set_number(0) == False",
        "num_ids": 187,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    for each in test_list:\n        if each[0] in my_dict:\n            my_dict[each[0]] += 1\n        else:\n            my_dict[each[0]] = 1\n    return my_dict\n",
        "test": "assert     check_occurences([(1, 2), (1, 2), (1, 2), (1, 3), (2, 2)]) == Counter({(1, 2): 2, (1, 3): 1, (2, 2): 1})",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(list(filter(lambda x:x!=\"\",str.split(' '))))\n",
        "test": "assert     number_of_substrings('123') == 1",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    assert type(m) == int and type(n) == int, 'The inputs m and n must be integers'\n    assert m >= 1 and n >= 1, 'The inputs m and n must be greater than 0'\n    return math.factorial(n) / ( math.factorial(n - 2) * math.factorial(2) )\n",
        "test": "assert     get_total_number_of_sequences(5,2) == 6, \"FAILED: get_total_number_of_sequences(5,2) should be 6\"",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        return list1\n    i = len(list1)-1\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    return list1\n",
        "test": "assert     replace_list([1,3,5,7,9,10], [2,4,6]) == [1,3,5,7,9,10]",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str1 = str1\n    charac = len(str1)\n    return charac\n",
        "test": "assert     count_charac('a') == 1",
        "num_ids": 152,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if (root - math.floor(root)) == 0:\n        return math.ceil(root) ** 2\n    else:\n        return math.ceil(root) ** 2 + 1\ndef power(x,n):\n    '''\n    Write a python function to find the nth power of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return x * power(x,n-1)\ndef subsetSum(arr,n,sum):\n    '''\n    Write a python function to find all the subset sums that equal to a given number.\n    '''\n    if sum == 0:\n        return True\n    if sum < 0 or n < 0:\n        return False\n    if sum == arr[n-1] and n!= 0:\n        return subsetSum(arr,n-1,sum)\n    return subsetSum(arr,n-1,sum) or subsetSum(arr,n-1,sum-arr[n-1])\ndef subsetSum_trivial(arr,n,sum):\n    '''\n    Write a python function to find all the subset sums that equal to a given number.\n    '''\n    if sum == 0:\n        return True\n    if sum < 0 or n < 0:\n        return False\n    if sum == arr[n-1]:\n        return True\n    return subsetSum(arr,n-1,sum)\ndef maximum_subarray(arr):\n    '''\n    Write a python function to find the maximum subarray sum in a given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    for i in range(1,len(arr)):\n        curr_max = max(arr[i],curr_max+arr[i])\n        max_so_far = max(max_so_far,curr_max)\n    return max_so_far\ndef maximum_subarray_trivial(arr):\n    '''\n    Write a python function to find the maximum subarray sum in a given array.\n    '''\n    max_so_far = arr[0]\n    for i in range(len(arr)):\n        max_so_far = max(max_so_far+arr[i],arr[i])\n    return max_so_far\ndef knapsack(wt,val,W,n):\n    '''\n    Write a python function to find the maximum possible value of items\n    that can be carried within a knapsack of a given capacity.\n    '''\n    if n == 0 or W == 0:\n        return 0\n    if wt[n-1] > W:\n        return knapsack(wt,val,W,n-1)\n    else:\n        return max(val[n-1]+knapsack(wt,val,W-wt[n-1],n-1),knapsack(wt,val,W,n-1))\ndef knapsack_trivial(wt,val,W,n):\n    '''\n    Write a python function to find the maximum possible value of items\n    that can be carried within a knapsack of a given capacity.\n    '''\n    if n == 0 or W == 0:\n        return 0\n    if wt[n-1] > W:\n        return knapsack_trivial(wt,val,W,n-1)\n    else:\n        return max(val[n-1]+knapsack_trivial(wt,val,W-wt[n-1],n-1),knapsack_trivial(wt,val,W,n-1))\ndef binary_search(arr,target,low,high):\n    '''\n    Write a python function to find the index of a given element in a sorted array.\n    '''\n    if low > high:\n        return -1\n    mid = (low+high)/2\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] > target:\n        return binary_search(arr,target,low,mid-1)\n    else:\n        return binary_search(arr,target,mid+1,high)\ndef binary_search_trivial(arr,target,low,high):\n    '''\n    Write a python function to find the index of a given element in a sorted array.\n    '''\n    if low > high:\n        return -1\n    mid = (low+high)/2\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] > target:\n        return binary_search_trivial(arr,target,low,mid-1)\n    else:\n        return binary_search_trivial(arr,target,mid+1,high)\ndef rotated_array_search(arr,target):\n    '''\n    Write a python function to find the index of a given element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low+high)/2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\ndef rotated_array_search_trivial(arr,target):\n    '''\n    Write a python function to find the index of a given element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low+high)/2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\ndef minimum_swaps(arr):\n    '''\n    Write a python function to find the minimum number of swaps required to sort an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            temp = arr[i]\n            arr[i] = arr[temp-1]\n            arr[temp-1] = temp\n            count += 1\n    return count\ndef minimum_swaps_trivial(arr):\n    '''\n    Write a python function to find the minimum number of swaps required to sort an array.\n    '''\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            return i\n    return 0\ndef next_permutation(nums):\n    '''\n    Write a python function to find the next permutation of a given array.\n    '''\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            break\n    if i == 0:\n        return []\n    else:\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        nums[i],nums[j] = nums[j],nums[i]\n    nums[i+1:] = nums[i+1:][::-1]\n    return nums\ndef next_permutation_trivial(nums):\n    '''\n    Write a python function to find the next permutation of a given array.\n    '''\n    if len(nums) <= 1:\n        return nums\n    if nums[-1] >= nums[-2]:\n        return nums\n    i = len(nums) - 2\n    while nums[i] >= nums[i+1]:\n        i -= 1\n    j = len(nums) - 1\n    while nums[j] <= nums[i]:\n        j -= 1\n    nums[i],nums[j] = nums[j],nums[i]\n    nums[i+1:] = nums[i+1:][::-1]\n    return nums\ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a given matrix 90 degrees counterclockwise.\n    '''\n    temp = []\n    for i in range(len(matrix)):\n        temp.append([])\n        for j in range(len(matrix[0])):\n            temp[i].append(matrix[len(matrix)-j",
        "test": "assert     next_Perfect_Square(14) == 18",
        "num_ids": 198,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n    curr_sum = arr[0]\n    for i in xrange(1, len(arr)):\n        curr_sum = max(curr_sum + arr[i], arr[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
        "test": "assert     max_sum([-3, 3, 3, 3, 3]) == 6",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess ** 2 - number) > 0.000000000000001:\n        guess = (guess + (number / guess)) / 2\n    return guess\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    dp = [[0 for i in range(len(str))] for j in range(len(str))]\n    for i in range(len(str)-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                if j-i == 1 or dp[i+1][j-1]:\n                    dp[i][j] = 1\n    return max([max(x) for x in dp])\n",
        "test": "assert     lps(\"cbbd\") == 1",
        "num_ids": 272,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 169,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_nums = []\n",
        "test": "assert     [1,2,2,1] == intersection_array([1,2,2,1],[1,2,3,1])",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # the number of times the element appears in the tuple\n    count = 0\n    for element in tup:\n        if element == x:\n            count = count + 1\n    return count\n",
        "test": "assert     (count_X(('a', 'a', 'b'), 'a') == 2), \"Error in count_X\"",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [list[i]+element for i in range(len(list))]\n",
        "test": "assert     insert_element(['a','b','c'], 'd') == ['a','d','b','c']",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    pass\n",
        "test": "assert     convert([1+2j,3+4j,4+5j]) == [(1.4142135623730951+1.0j), (1.7320508075688772+2.0j), (3.1622776601683795+3.0j)]",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n    \ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==str:\n            count+=1\n    return count\n",
        "test": "assert     count_integer(['abc',2.5,2,0,1.5]) == 4",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert     [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)] == list(combinations_with_replacement(range(1, 6), 2))",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # Initialize a list of zeros (that is, a list of False values, which corresponds to each number being 0)\n    list_of_zeros = [0] * (n + 1)\n    \n    # Set the first index of the list of zeros to True (which corresponds to each number being 1)\n    list_of_zeros[1] = 1\n    \n    # Loop through each index of the list of zeros starting with index 2 (skipping index 1)\n    for index in range(2, n + 1):\n        # If the index is divisible by an integer between 2 and the square root of the index, then set the value of that index to False\n        # (which corresponds to the index being 0)\n        if index % 2 == 0:\n            list_of_zeros[index] = 0\n        # If the index is not divisible by an integer between 2 and the square root of the index, then it is prime\n        # and we add 1 to the value of that index\n        else:\n            list_of_zeros[index] = 1\n    \n    # Return the value of the last index of the list of zeros, which is the number of prime numbers less than the given non-negative number\n    return list_of_zeros[-1]\n",
        "test": "assert     count_Primes_nums(3)     == 1",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     (4,5) == swap_numbers(5,4)",
        "num_ids": 140,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        tuple_len = len(test_tup1)\n    else:\n        tuple_len = len(test_tup2)\n",
        "test": "assert     (maximize_elements((10, 6, 7), (5, 6, 7)) == (10, 5))",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    \n    i = 1\n    j = 2\n    \n    while True:\n        \n        if j%2 == 0:\n            i += 1\n            j += 2\n            continue\n        \n        j_ = j**2\n        \n        for i_ in range(3, int(j_**0.5 + 1), 2):\n            if j_ % i_ == 0:\n                j += 2\n                break\n        \n        else:\n            return j\n",
        "test": "assert     newman_prime(10) == 13",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]),\n        (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1])\n    )\n",
        "test": "assert     division_elements(((2, 2, 2), (2, 2, 2)), ((1, 1, 1), (1, 1, 1))) == ((2 / 2, 2 / 2, 2 / 2), (2 / 2, 2 / 2, 2 / 2))",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    left_list = []\n    right_list = []\n    for i in range(0,L):\n        left_list.append(list1[i])\n    for j in range(L,len(list1)):\n        right_list.append(list1[j])\n    return(left_list, right_list)\n",
        "test": "assert     split_two_parts([1,2,3,4,5,6], 3) == ( [1,2,3], [4,5,6] )",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert     dog_age(1) == 7",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    ret = []\n    for i in range(0, len(S), step):\n        ret.append(S[i:i + step])\n    return ret\n",
        "test": "assert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side_length = l\n    side_area = side_length ** 2\n    lateral_area = 6 * side_area\n    return lateral_area\n",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 149,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize running sum variable\n    sum = 0\n    # For each natural number from 1 to n\n    for i in range(1, n + 1):\n        # If the current number is odd\n        if i % 2!= 0:\n            # Add the current number to the running sum\n            sum += i ** 2\n    # Return the running sum\n    return sum\n",
        "test": "assert     square_Sum(10) == 385",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num_of_stars = 0\n    count = 1\n    while num_of_stars < n:\n        count = count * 2\n        num_of_stars = num_of_stars + count\n    return count\n",
        "test": "assert     find_star_num(4) == 4",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97, 'Error: ascii_value of a is wrong'",
        "num_ids": 140,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0,len(arr),2):\n        total += arr[i]\n    return total\n",
        "test": "assert     (sum_even_and_even_index([20, 10, 11, 12, 13]) == 22)",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return n*(n+1)*(2*n+1)*(3*n+2)*(4*n+3)\n    \n",
        "test": "assert     even_Power_Sum(0)     ==     0",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(i[-1]) for i in test_list]\n",
        "test": "assert     rear_extract([(1, 2), (3, 4)]) == [2, 4]",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n",
        "test": "assert ",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coefficient = 1.0\n    for i in range(2,n+1):\n        coefficient += ( math.factorial(n)/(math.factorial(n-i)*(i+1)))\n    return coefficient\n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = math.pi*(r**2)*h\n    return v\n",
        "test": "assert     volume_cylinder(0.5,2) == math.pi*(0.5**2)*2",
        "num_ids": 184,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    ret = {}\n    for key, value in dict.iteritems():\n        if value >= n:\n            ret[key] = value\n    return ret\n",
        "test": "assert     dict_filter( {'a':1,'b':2,'c':3,'d':4,'e':5},3 )     == {'a':1,'b':2,'c':3,'e':5}",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    return len([item for item in test_tup[1:] if item <= test_tup[0]])\n",
        "test": "assert     (count_first_elements((1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7)) == 5), 'incorrect'",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n -= 1\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    n = n * 10\n    res = n + (n % 100)\n    if res < 100:\n        return False\n    for i in range(1, n // 100):\n        x = 100 * i\n        y = (i + 1) * (i + 1)\n        z = (i + 2) * (i + 2)\n        res = x + y + z\n        if res == n:\n            return True\n    return False\n",
        "test": "assert     is_num_decagonal(0) == False",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, x in enumerate(dlist):\n        if x == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert     sequential_search([1,2,3,4,5], 2) == (True, 1)",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(test_list)\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert     all_unique([1,2,3,4,5,6,7,8,9,10]) == True",
        "num_ids": 2208,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n",
        "test": "assert ",
        "num_ids": 128,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return len([x for x in str(n) if int(x) <= int(x)]) == len(str(n))\n",
        "test": "assert     validate(1234)     == True",
        "num_ids": 2159,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return list[0] == element\n    else:\n        if list[0] == element:\n            return check_element(list[1:],element)\n        else:\n            return False\n",
        "test": "assert     check_element([1,1,1,1,1,1],1) == True",
        "num_ids": 240,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab(?=ab)'\n    match = re.search(pattern, text)\n    if match:\n        print(match.group())\n    else:\n        print('Not found')\n",
        "test": "assert     text_match_two_three(",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    sum = 0\n    m = max_sub_array_sum(a, n)\n    \n    for i in range(n):\n        for j in range(k):\n            sum += a[i]\n            \n        if m < sum:\n            m = sum\n        \n        sum = 0\n    \n    return m\n",
        "test": "assert     (max_sub_array_sum_repeated([1, -2, 3, -4, 5], 5, 4) == 11), \"Failed\"",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        if i%2 == 0:\n            total += i*i\n    return total\n",
        "test": "assert     square_Sum(1) == 0",
        "num_ids": 191,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list2 = []\n    for element in list1:\n        list2.append(len(element))\n    return max(list2)\n",
        "test": "assert     max_length([[1, 2, 3, 4, 5], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 5",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n:\n        return 0\n",
        "test": "assert     count_no_of_ways(2, 3) == 1",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    return int(math.floor(n/m))\n",
        "test": "assert     find(5,2) == 2",
        "num_ids": 108,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # return w*h/2/((h**2 + w**2)**0.5)\n    return w*h/2/math.hypot(w,h)\n",
        "test": "assert     otherside_rightangle(5,9) == 3",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maximum = 0\n    for i in listval:\n        if i>maximum:\n            maximum = i\n    return maximum\n",
        "test": "assert     max_val([4,3,2,1,-10,-5,-2]) == 4",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = range(1, number)\n    return sum(div)\n",
        "test": "assert     sum_div(2) == 1",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n",
        "test": "assert     get_Inv_Count([1,2,3,4]) == 0",
        "num_ids": 287,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    elif not isinstance(list1, list):\n        return list1\n    else:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n",
        "test": "assert     flatten_list(['foo',['bar','baz']]) == ['foo', 'bar', 'baz']",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #preprocessing\n    data = []\n    for each in stdata:\n        data.append(each[0])\n    data = sorted(data)\n    #variables\n    aggregate = 0\n    max_count = 0\n    #main logic\n    for i in range(len(data)):\n        count = 1\n        for j in range(i+1,len(data)):\n            if data[j] - data[i] <= 3:\n                count += 1\n            else:\n                if count > max_count:\n                    max_count = count\n                    aggregate = count\n                    break\n                break\n    #return\n    return aggregate\n",
        "test": "assert     max_aggregate([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == (5, 5)",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(0, 2**n):\n        s = bin(i)[2:]\n        if sum([int(j) for j in s[:n]]) == sum([int(j) for j in s[n:]]):\n            count += 1\n    return count\n",
        "test": "assert     count_binary_seq(1) == 1",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    def depth(d, curr_depth = 0):\n        if type(d) is dict:\n            for key in d:\n                depth(d[key], curr_depth+1)\n        return curr_depth\n",
        "test": "assert     dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {'a': {'b': {'c': {'d': {'e': {'",
        "num_ids": 2243,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[index] == 0 :\n        return arr[index]\n    elif ranges[index] == 1 :\n        return arr[rotations[index] - 1]\n    else :\n        return find_Element(arr,ranges,rotations,rotations[index] - 1)\n",
        "test": "assert     find_Element([1,2,3,4,5], [1,2], 1, 2) == 5",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n",
        "test": "assert     start_withp(['peter', 'robert', 'geoffrey', 'george', 'paula']) ==     ['peter', 'paula']",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return a[index]\n    elif k == index:\n        return a[index] + a[index-1]\n    else:\n        max1 = max_sum_increasing_subseq(a, n, index+1, k)\n        max2 = max_sum_increasing_subseq(a, n, index+1, k+1)\n        return max1 if max1 > max2 else max2\n",
        "test": "assert     max_sum_increasing_subseq([1,2,4,3,5,7], 6, 5, 5) == 12",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a,b = tuple_index(tuplex,m)\n    if a == b:\n        return ':('\n    else:\n        new_tuplex = tuplex[:a]+tuplex[b+1:]\n        return new_tuplex\n",
        "test": "assert     colon_tuplex((1,2,3,4,5),2,2) == (3,4,5)",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    count = 0\n    product1 = 1\n    product2 = 1\n    for num1 in nums1:\n        for num2 in nums2:\n            product1 *= num1\n            product2 *= num2\n            if (product1 > product2):\n                count += 1\n            elif (product2 > product1):\n                count += 1\n            if (count == N):\n                return [product1, product2]\n    return [product1, product2]\n",
        "test": "assert     large_product([1,1,1,1,1,1,1], [1,2,3,4,5], 4) == [2,4,6,8]",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n",
        "test": "assert     maximum(2,3) == 3",
        "num_ids": 120,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    ",
        "test": "assert     string_to_tuple('couple') == ('c','o','u','p','e','a','t','e')",
        "num_ids": 114,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # convert the number to binary\n    n = int(n)\n    s = bin(n)\n    s = s[2:]\n    s = list(s)\n    # set all unset bits to 1\n    for i in range(len(s)):\n        if s[i] == '0':\n            s[i] = '1'\n            break\n    # convert the list back to a string\n    s = ''.join(s)\n    return s\n",
        "test": "assert     (get_left_most_unset_bit(0b0) == 0)",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*r*h/3.0\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*w*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_rect_prism(l,w,h):",
        "test": "assert     volume_cone(2,4) == 2.8284271247461903",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    while p < n:\n        p *= 2\n    return p\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "test": "assert     find_lucas(3) == 4",
        "num_ids": 266,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    format_string = string.strip()\n    for i in range(len(list_)):\n        list_[i] = format_string % list_[i]\n    return list_\n",
        "test": "assert     add_string(['a', 'b', 'c'], '%s') == ['a', 'b', 'c']",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == 0:\n        return dict()\n    elif len(l1) == 1:\n        return {l1[0]: l2}\n    elif len(l1) == 2:\n        return {l1[0]: {l1[1]: l3}}\n    else:\n        return {l1[0]: {l1[1]: l2}, l1[2]: l3}\n    \n",
        "test": "assert     convert_list_dictionary(",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for l in input_list:\n        if len(l)>max_len:\n            max_len = len(l)\n            max_len_list = [l]\n        elif len(l)==max_len:\n            max_len_list.append(l)\n    return max_len_list\n",
        "test": "assert     max_length_list([]) == []",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_distinct((1, 2, 3, 4, 5))",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n    return \"No non repeating character\"\n",
        "test": "assert     first_non_repeating_character('AABBAAAB') == 'A'",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    result = re.match(regex,string)\n    if result:\n        return True\n    else:\n        return False\n    \nprint(check_char('a'))\nprint(check_char('b'))\nprint(check_char('aaaaa'))\nprint(check_char('ab'))\nprint(check_char('abcd'))\n",
        "test": "assert     check_char(\"ab\") == False",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    return (a+b+c)/3.0\n",
        "test": "assert     median_numbers(1,2,3)     == 2",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum([int(digit) for digit in str(num)])\n    return digit_sum\n",
        "test": "assert     (sum_of_digits([1, 2, 3, 4, 5]) == 15)",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n",
        "test": "assert     bitwise_xor((0, 0), (1, 0)) == (1, 1)",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    assert type(test_list)==list,'Input needs to be a list'\n    count=len(test_list)\n    lst=[]\n    for i in test_list:\n        lst.append(i)\n    if lst==[]:\n        return None\n    elif type(lst[0])==list:\n        for j in lst:\n            for i in j:\n                lst.append(i)\n    elif type(lst[0])==dict:\n        for i in lst:\n            for j in i.keys():\n                lst.append(j)\n    else:\n        pass\n    count=len(lst)\n    return count\n",
        "test": "assert     extract_freq([1]) == [1]",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    # Initialize a list to store the result\n    res = []\n    \n    # Iterate over the length of the tuples\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] + test_tup2[i])\n    \n    return tuple(res)\n",
        "test": "assert     add_nested_tuples((1,2,3),(4,5,6)) == (5,7,9)",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n",
        "test": "assert     minimum(1,2) == 1",
        "num_ids": 133,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "test": "assert     not check_tuplex( (1,2,3), (1,2,3,4) )",
        "num_ids": 184,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     find_Parity(3) == 1",
        "num_ids": 178,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    res = ''\n    for i in range(len(n)):\n        if i == 0:\n            continue\n        temp = i\n        while temp > 0:\n            if n[i] > n[temp - 1]:\n                break\n            temp -= 1\n        res += n[temp-1] * (10**(i-temp))\n    return int(res)\n",
        "test": "assert     rearrange_bigger(971) == 972",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n",
        "test": "assert ",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return reduce(lambda a, b: (a[0] * a[1], a[1] * b[1], b[0] * b[1]), list1)\n",
        "test": "assert     min_product_tuple([(3, 3), (1, 9), (2, 3)]) == 54",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    listval.sort()\n    return listval[0]\n",
        "test": "assert     min_val([['a', 'b', 'c'], [4, 5, 6, 7, -7]]) == -7",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    splited = re.split(r'_', word)\n    camel = [splited[0]]\n    for i in range(1, len(splited)):\n        camel.append(splited[i].title())\n    return ''.join(camel)\n",
        "test": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = l[::2]\n    return l\n",
        "test": "assert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # populate dictionary with key value pairs of the form (number, list)\n    list_dict = {}\n    for x in list1:\n        list_dict[x[0]] = x[1]\n    # check that n is less than the number of keys in the dictionary\n    if n < len(list_dict):\n        return list_dict[n]\n    return None\n",
        "test": "assert ",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return True if bool(set(list1).intersection(set(list2))) else False\n",
        "test": "assert     overlapping([1,2,3,4],[2,3,4,5]) == True",
        "num_ids": 270,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #code here\n    if len(arr)==0:\n        return 0\n    max1=arr[0]\n    max2=arr[0]\n    for i in arr[1:]:\n        if max1*i>i*max2:\n            max2=max1*i\n        if max2*i>i*max1:\n            max1=max2*i\n        if max1>max2:\n            max2=max1\n    return max1\n    \nif __name__=='__main__':\n    arr=[1,2,3,4,5]\n    print(max_Product(arr))\n",
        "test": "assert     max_Product([-10, -2, -2, -1]) == -10",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = [] \n    for i in Input:\n        try: Output.append(i[0])\n        except: pass\n    Output = sorted(set(Output))\n    return Output\n",
        "test": "assert     group_tuples([(1, 2), (1, 3), (1, 4)]) == [(1,), (1,)]",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if len(i)>max:\n            max=len(i)\n            max_str=i\n    return max_str\n",
        "test": "assert     Find_Max(['a','b','c','d','e','f','g','h','i','j']) == 'h'",
        "num_ids": 320,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum([round(x) for x in list1])*len(list1)\n",
        "test": "assert     round_and_sum([1.2, 2.5, 3.7, 4.8]) == 48, \"numbers: 1.2, 2.5, 3.7, 4.8\"",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for x in range(0, n):\n        if x%2 == 0:\n            cube_sum = cube_sum + x*x*x\n    return cube_sum\n",
        "test": "assert     (cube_Sum(10) == sum([x**3 for x in range(10) if x%2==0]))",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(x.split('|') for x in test_tup)\n",
        "test": "assert ",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    nums = range(1,n+1)\n    #print nums\n    return (sum(nums))**(1.0/3.0)\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 241,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1::2]\n",
        "test": "assert     extract_rear(('a', 'b', 'c', 'd', 'e')) == ('d', 'e')",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8], 4) == 1",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            new_nums.append(num)\n    return new_nums\n",
        "test": "assert     filter_oddnumbers([2, 4, 6, 8]) == [2, 4, 6, 8]",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 427,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import datetime\n    date_format = '%Y-%m-%d'\n    d = datetime.datetime.strptime(dt, date_format)\n    dd = d.strftime('%d-%m-%Y')\n    return dd\ndef get_city_details(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    details = []\n    reg_ex = r'[<h1>](.+)[<\\/h1>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        details = match_obj.group(1)\n    details = re.split(',', details)\n    details = details[0].split('<br>')\n    for i in range(len(details)):\n        details[i] = details[i].strip()\n    details[-1] = change_date_format(details[-1])\n    return details\ndef get_geo_details(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    details = []\n    reg_ex = r'[<div class=\"city-details\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        details = match_obj.group(1)\n    details = re.split(',', details)\n    details = details[0].split('<br>')\n    for i in range(len(details)):\n        details[i] = details[i].strip()\n    details[-1] = change_date_format(details[-1])\n    return details\ndef get_temperature(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    temperature = []\n    reg_ex = r'[<div class=\"temperature\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        temperature = match_obj.group(1)\n    temperature = re.split(',', temperature)\n    temperature = temperature[0].split('<br>')\n    for i in range(len(temperature)):\n        temperature[i] = temperature[i].strip()\n    temperature[-1] = change_date_format(temperature[-1])\n    return temperature\ndef get_weather_details(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    details = []\n    reg_ex = r'[<h2>](.+)[<\\/h2>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        details = match_obj.group(1)\n    details = re.split(',', details)\n    details = details[0].split('<br>')\n    for i in range(len(details)):\n        details[i] = details[i].strip()\n    details[-1] = change_date_format(details[-1])\n    return details\ndef get_wind_details(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    details = []\n    reg_ex = r'[<div class=\"wind\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        details = match_obj.group(1)\n    details = re.split(',', details)\n    details = details[0].split('<br>')\n    for i in range(len(details)):\n        details[i] = details[i].strip()\n    details[-1] = change_date_format(details[-1])\n    return details\ndef get_probability(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    probability = []\n    reg_ex = r'[<div class=\"probability\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        probability = match_obj.group(1)\n    probability = re.split(',', probability)\n    probability = probability[0].split('<br>')\n    for i in range(len(probability)):\n        probability[i] = probability[i].strip()\n    probability[-1] = change_date_format(probability[-1])\n    return probability\ndef get_snowfall(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    snowfall = []\n    reg_ex = r'[<div class=\"snowfall\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        snowfall = match_obj.group(1)\n    snowfall = re.split(',', snowfall)\n    snowfall = snowfall[0].split('<br>')\n    for i in range(len(snowfall)):\n        snowfall[i] = snowfall[i].strip()\n    snowfall[-1] = change_date_format(snowfall[-1])\n    return snowfall\ndef get_rainfall(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    rainfall = []\n    reg_ex = r'[<div class=\"rainfall\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        rainfall = match_obj.group(1)\n    rainfall = re.split(',', rainfall)\n    rainfall = rainfall[0].split('<br>')\n    for i in range(len(rainfall)):\n        rainfall[i] = rainfall[i].strip()\n    rainfall[-1] = change_date_format(rainfall[-1])\n    return rainfall\ndef get_moisture(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page_source\n    moisture = []\n    reg_ex = r'[<div class=\"moisture\">](.+)[<\\/div>]'\n    match_obj = re.search(reg_ex, html)\n    if match_obj:\n        moisture = match_obj.group(1)\n    moisture = re.split(',', moisture)\n    moisture = moisture[0].split('<br>')\n    for i in range(len(moisture)):\n        moisture[i] = moisture[i].strip()\n    moisture[-1] = change_date_format(moisture[-1])\n    return moisture\ndef get_rain_probability(row):\n    from selenium import webdriver\n    browser = webdriver.Firefox()\n    browser.get('http://www.city-data.com/city/details/'+row)\n    html = browser.page",
        "test": "assert     change_date_format(\"2013-01-01\") == \"01-01-2013\"",
        "num_ids": 2211,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([5,3,4,1,2,6]) == [1,2,3,4,5,6]",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (list(zip(test_tup1, test_tup2)), list(zip(test_tup1, test_tup2)))\n",
        "test": "assert     and_tuples((1,2,3),(2,3,4)) == ((1,2),(2,3),(3,4))",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # your code here\n    x1 = -b / (2*a)\n    y1 = a * x1**2 + b * x1 + c\n    x2 = -b / (2*a)\n    y2 = a * x2**2 + b * x2 + c\n    print(x1)\n    print(y1)\n    print(x2)\n    print(y2)\n    return\n",
        "test": "assert     parabola_directrix(3, -2, -4) == -1.0",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n",
        "test": "assert     common_element([1, 2, 3, 4], [2, 4, 6])",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print(median_trapezium(3,4,5))\n    print(median_trapezium(10,15,25))\n    print(median_trapezium(5,12,7))\n",
        "test": "assert median_trapezium(base1 = 2,base2 = 3,height = 4) == 3",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([5, 6, 7, 8, 9], 5)",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.match(r'a(.*?)b',text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert     text_match_one('aab') == True",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = (n%10)\n    return last\n",
        "test": "assert     last_Digit(1) == 1",
        "num_ids": 143,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_negative=[]\n    for i in list1:\n        if i<0:\n            list_negative.append(i)\n    return list_negative\n",
        "test": "assert     neg_nos([10,0,-20,-30,40,50]) == [-20,-30]",
        "num_ids": 216,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for i in range(len(str1)):\n        if ord(str1[i]) % 2 == 1:\n            odd_chars.append(str1[i])\n    for i in range(len(odd_chars)):\n        str1 = str1.replace(odd_chars[i], '')\n    return str1\n",
        "test": "assert     remove_odd(\"Python\")             == \"Python\", \"Test 2 failed\"",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #f is forward, b is backward\n    f, b, r = 0, 0, 0\n    for a, b in test_list:\n        if a < b:\n            f += 1\n        elif b < a:\n            b += 1\n        else:\n            r += 1\n    return f, b, r\n",
        "test": "assert     count_bidirectional([(1,2),(2,3),(3,4)]) == 2",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    print(\"Input list:\", L)\n    res = \"\"\n    for x in L:\n        res = res + str(x)\n    print(\"Single int:\", res)\n",
        "test": "assert     multiple_to_single([1,2,3,4,5,6,7,8]) == 12345678",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    position_of_adverb = []\n    words = text.split()\n    for word in words:\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"er\") or word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"ed\") or word.endswith(\"ing\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"er\") or word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"ed\") or word.endswith(\"ing\"):\n            word = word[:-2]\n        if word.endswith(\"ed\") or word.endswith(\"ing\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\") or word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\") or word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(\"ed\"):\n            word = word[:-2]\n        if word.endswith(\"est\"):\n            word = word[:-2]\n        if word.endswith(\"er\"):\n            word = word[:-2]\n        if word.endswith(\"ly\"):\n            word = word[:-2]\n        if word.endswith(\"ing\"):\n            word = word[:-3]\n        if word.endswith(",
        "test": "assert     find_adverb_position(",
        "num_ids": 2532,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "test": "assert     surfacearea_cube(1) ==     6",
        "num_ids": 104,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    #If array is empty, it is not possible to find the ratio\n    if len(nums) == 0:\n        return 0\n    \n    #Calculate the sum of the array\n    total = 0\n    for num in nums:\n        total += num\n    \n    #The final count is the ratio of positive numbers to the sum of all numbers\n    #E.g. if the array was [1,2,-5,7,-8,9,0] then the ratio would be 6/9\n    final_count = 0\n    for num in nums:\n        if num > 0:\n            final_count += 1\n    \n    return final_count / total\n",
        "test": "assert     positive_count([]) == 0",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > max_neg:\n                max_neg = list1[i]\n    return max_neg\n    ",
        "test": "assert     largest_neg([-1,-2,-3,-4,-5]) == -1",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for t in test_list:\n        if len(t) == K:\n            trimmed_list.append(t)\n    return trimmed_list\n",
        "test": "assert trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], 4) == [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i*j for i, j in zip(test_tup1, test_tup2))\n",
        "test": "assert     index_multiplication((1, 2, 3), (3, 2, 1)) == ((1*3), (2*2), (3*1))",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dict = {} \n    for i in lst: \n        if i in dict: \n            dict[i] += 1\n        else: \n            dict[i] = 1 \n    return dict \n",
        "test": "assert     count_Occurrence((1,2,3,1,3,4,2,3,3,1,2), [1,2,3,1,3,4,2,3,3,1,2]) == Counter([1,2,3,1,3,4,2,3,3,1,2])",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n",
        "test": "assert     cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<1:\n        return 0\n    else:\n        return n+cal_sum(n-1)\n    \ndef perrin_num(n):\n    '''\n    Write a function to calculate the number of perrin numbers for nth term.\n    '''\n    if n==1:\n        return 1\n    else:\n        return perrin_num(n-1)+perrin_num(n-2)\n    \ndef even_sum(n):\n    '''\n    Write a function to calculate the sum of all even numbers less than n.\n    '''\n    if n<0:\n        return 0\n    else:\n        if n%2==0:\n            return n+even_sum(n-2)\n        else:\n            return even_sum(n-2)\n    \ndef fib_num(n):\n    '''\n    Write a function to calculate nth fibonacci number.\n    '''\n    if n==1 or n==2:\n        return 1\n    else:\n        return fib_num(n-1)+fib_num(n-2)\n",
        "test": "assert     cal_sum(1)    ==    1",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) > l:\n        return str[:l]\n    else:\n        return str\n",
        "test": "assert extract_string(['string','string','string','string'], 3) == [",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'[\\s]+', '', text1)\n",
        "test": "assert     remove_whitespaces(\" h        d r        \") == \"hdr\"",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return sale_amount-actual_cost\n    return 0\n",
        "test": "assert     loss_amount(30,30) == 0",
        "num_ids": 148,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    sum = 0\n    while i < n : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n        i += 1\n    return sum \ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n    return sum \ndef findPrimes(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes2(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes3(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes4(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes5(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes6(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes7(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes8(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes9(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes10(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes11(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes12(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes13(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes14(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes15(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    primes = []\n    for i in range(2, n + 1) : \n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1) : \n            if i % j == 0 : \n                isPrime = False\n        if isPrime : \n            primes.append(i)\n    return primes\ndef findPrimes16(n) : \n    '''\n    Write a python function to find the prime numbers in a given list.\n    '''\n    p",
        "test": "assert     sumofFactors(0) == 0 ",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    words = re.findall('[a-z]+',text)\n    return any(['z' in word for word in words])\n",
        "test": "assert     text_match_wordz( 'z' ) == True",
        "num_ids": 192,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 12 and monthnum2 >= 1:\n        return True\n    else:\n        return False\ndef check_leapyear(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    elif year % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_1(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_2(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_3(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    elif year % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_4(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        return True\n    else:\n        return False\ndef find_number_of_days(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    days_in_month = {\n        1 : 31,\n        2 : 28,\n        3 : 31,\n        4 : 30,\n        5 : 31,\n        6 : 30,\n        7 : 31,\n        8 : 31,\n        9 : 30,\n        10 : 31,\n        11 : 30,\n        12 : 31\n    }\n    if check_monthnumb_number(month) == True:\n        return days_in_month[month]\n    else:\n        if check_leapyear(year) == True:\n            return days_in_month[month] + 1\n        else:\n            return days_in_month[month]\ndef find_number_of_days_1(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 29\n        else:\n            return 28\ndef find_number_of_days_2(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 31\ndef find_number_of_days_3(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_4(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_5(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 30\ndef find_number_of_days_6(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_7(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_8(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_9(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 30\ndef find_number_of_days_10(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 31\ndef find_number_of_days_11(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_12(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 31\ndef find_number_of_days_13(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_14(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_15(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            retur",
        "test": "assert     check_monthnumb_number(1)",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n",
        "test": "assert     reverse_string_list([\"this\",\"is\",\"a\",\"string\",\"list\",[1,2,3]]) == [\"gnirts\",\"is\",\"a\",\"string\",\"list\",[1,2,3]]",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = len(lst[0])\n    result = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i])<minimum:\n            minimum = len(lst[i])\n            result = lst[i]\n    return result\n",
        "test": "assert     Find_Min([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3], 'Incorrect'",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(3,4) == 12",
        "num_ids": 108,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = str1.upper()\n    return res\n",
        "test": "assert     remove_uppercase('tEST') =='st', \"Failed test 2\"",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = [] \n    for i in lst: \n        res.append(i[0]) \n    return res \n",
        "test": "assert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
        "num_ids": 268,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for letter in str:\n        if letter.isupper():\n            upper += 1\n    return upper\n",
        "test": "assert     (upper_ctr('abC') == 1)",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) > 1:\n        for i in list1:\n            temp = [i]\n            result = result + combinations_list(list1[list1.index(i)+1:])\n    else:\n        result.append(list1)\n    return result\n",
        "test": "assert     combinations_list([1,2,3,4]) ==     [[1,2,3,4], [1,2,4,3], [1,3,2,4], [1,3,4,2], [1,4,2,3], [1,4,3,2], [2,1,3,4], [2,1,4,3], [2,3,1,4], [2,3,4,1], [2,4,1,3], [2,4,3,1], [3,1,2,4], [3,1,4,2], [3,2,1,4], [3,2,4,1], [3,4,1,2], [3,4,2,1], [4,1,2,3], [4,1,3,2], [4,2,1,3], [4,2,3,1], [4,3,1,2], [4,3,2,1]]",
        "num_ids": 2118,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_ending = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_ending = max_ending * arr[i]\n        else:\n            max_ending = arr[i]\n        max_so_far = max(max_ending, max_so_far)\n    return max_so_far\n",
        "test": "assert     max_subarray_product([1, 2, 3, -2]) == 6",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # dict = {'a': 1, 'b': 2, 'c': 1, 'd': 4, 'e': 4}\n    # n = '1'\n    if len(dict) == len(n):\n        pass\n    else:\n        print('The length of the dict and the number must be equal')\n        return False\n    # for key, value in dict.items():\n    #     if value == n:\n    #         pass\n    #     else:\n    #         return False\n    return True\n",
        "test": "assert     check_value({'a': 1, 'b': 1, 'c': 1}, 'c') == False",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 0\n    current_prod = 1\n    for i in range(len(arr)):\n        current_prod = 1\n        for j in range(i, len(arr)):\n            current_prod *= arr[j]\n            max_prod = max(max_prod, current_prod)\n    return max_prod\n",
        "test": "assert     max_product([-2, 0, -1]) == 0",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[2]\n",
        "test": "assert     add_pairwise((1, 2, 3, 4)) == (3, 4, 5, 6)",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod*i\n    return prod%n\n",
        "test": "assert     find_remainder([1,2,3,4,5], 1) == 0",
        "num_ids": 159,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    d = {}\n    for e in l:\n        if e in d:\n            d[e] = d[e] + 1\n        else:\n            d[e] = 1\n    for e in d:\n        if d[e] > 1:\n            return False\n    return True\n    \n    \n    ",
        "test": "assert     check_Consecutive([1, 2, 3, 4, 5]) == 1",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n",
        "test": "assert     tuple_intersection([1, 2, 3], [3, 2, 1, 1]) == (1, 1)",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char('hello','l','L') == 'heLLo'",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "test": "assert     sort_counter({'a': 1, 'b': 2, 'c': 3}) == [('c', 3), ('b', 2), ('a', 1)]",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n",
        "test": "assert     big_sum([1, 2, -5, 3, 4, -1]) == 4 + -1",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower(\"ABC\") == False",
        "num_ids": 105,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = re.sub(r'[a-z]+', '', str1)\n    return new_str\n",
        "test": "assert ",
        "num_ids": 259,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if (n < 10) :  \n        return n\n    else : \n        return first_Digit(n//10) \n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    if (n % 10) : \n        return n % 10\n    else :\n        return last_Digit(n//10)\n",
        "test": "assert     first_Digit(10) == 1",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i%2!= 0:\n            odd_list.append(i)\n    return odd_list\n",
        "test": "assert     [1, 3, 5] == Split([1, 3, 5, 7, 9, 11])",
        "num_ids": 976,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return ((n*(n+1)*(2*n+1))/6) - sum_of_cubes(n)\n",
        "test": "assert     difference(100) == 686500",
        "num_ids": 176,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if len(A)%2!= 0 :\n        return -1\n",
        "test": "assert     find_Odd_Pair([1,3,5,7,9],10) == 0",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('abc') == 'AbC'",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = abs(n1), abs(n2)\n    dif = 0\n    while n1 > 0:\n        if n1 % 10 > n2 % 10:\n            dif += n1 % 10 - n2 % 10\n            n1 //= 10\n        else:\n            n1 //= 10\n    return dif\n",
        "test": "assert     digit_distance_nums(1234, 1234) == 0",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_max = a[0]\n    max_so_far = a[0]\n    for i in range(1, size):\n        current_max = max(a[i], current_max + a[i])\n        max_so_far = max(current_max, max_so_far)\n    return max_so_far\n",
        "test": "assert     max_sub_array_sum([1, -2, 5, -9, 3, -6, 5, -7, 0, 2, -1], 10) == 5",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_tup = list(union_set)\n    union_tup.sort()\n    return tuple(union_tup)\n",
        "test": "assert     union_elements((1, 2, 3, 4, 5, 6), (4, 5, 6, 7, 8, 9)) == (1, 2, 3, 4, 5, 6, 7, 8, 9)",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    len_max = 0\n    for sublist in lst:\n        len_sublist = len(sublist)\n        if len_sublist > len_max:\n            len_max = len_sublist\n    return len_max\n",
        "test": "assert     Find_Max_Length([[1,2,3,4,5], [1,2,3,4], [1,2,3,4,5], [1,2,3,4]]) == 5",
        "num_ids": 323,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\\"(.*?)\\\"',text)\n",
        "test": "assert     extract_values(\"1. \\\"Good\\\"\") == [\"Good\"]",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n",
        "test": "assert     (count_Pairs([1,2,3,4,5,6,7,8,9],10) == 70)",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 153,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n",
        "test": "assert     sum_digits(5) == 5",
        "num_ids": 167,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n",
        "test": "assert     issort_list([1, 2, 3]) == True",
        "num_ids": 232,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert     empty_list(5) == [{}] * 5",
        "num_ids": 109,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda l:l[0])\n",
        "test": "assert     sort_sublists([[1,2,3,4],[2,3,4,5],[3,4,5,6]]) == [[1,2,3,4],[2,3,4,5],[3,4,5,6]]",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for i in nums:\n        if i not in unique:\n            unique.append(i)\n    return unique\n",
        "test": "assert     two_unique_nums([1, 1, 2, 3, 3, 4, 4, 5, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for data in list_data:\n        product *= data\n    return product\n",
        "test": "assert     unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n",
        "test": "assert     surfacearea_cylinder(2,0)     == 0",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(B[start:start + len(A)] == A for start in range(len(B) - len(A) + 1))\n    \n",
        "test": "assert     is_Sub_Array([1,2,3,4,5], [1,2,3,4,5])",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = n % 10\n    return n\n",
        "test": "assert     last_Digit_Factorial(12345) == 5",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for a,b,c in zip(list1,list2,list3):\n        new_list.extend([a,b,c])\n    return new_list\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for item1 in test_tup1:\n        for item2 in test_tup2:\n            if item1!= item2:\n                result.append(item1)\n    return result\n",
        "test": "assert     (find_dissimilar(('A', 'C', 'F', 'B', 'D'), ('A', 'B', 'C', 'D', 'F')) == ('F', 'B', 'D'))",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return (test_tuple[0], even_fnc(test_tuple[1]), even_fnc(test_tuple[2]))\n",
        "test": "assert     even_ele(('a', 'b', 'c', 2, 3, 4, 5, 6, 7, 8), even_ele) ==     ('b', 'c', 2, 4, 6, 7)",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*4\n",
        "test": "assert     surface_Area(0,1) == 0",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n",
        "test": "assert     my_dict({}) == True",
        "num_ids": 135,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        return sum([catalan_number(num-i)*catalan_number(i) for i in range(1,num)])\n",
        "test": "assert         catalan_number(1) == 1",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #return [m.start() for m in re.finditer(r'(ly)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b\\s)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b\\s\\b)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b\\s\\b)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b\\s\\b)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b\\s\\b)', text)]\n    #return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b\\s\\b)', text)]\n    return [m.start() for m in re.finditer(r'(ly\\b\\s\\b\\s\\b\\s\\b)', text)]\n",
        "test": "assert     find_adverbs('My job is to find the first adverb ending with ly')     == ('ly', 1, 8)",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    ans = []\n    while len(ans) < n:\n        ans.append(-heapq.heappop(heap))\n    return ans\n",
        "test": "assert     expensive_items([1,2,3,4,5,6],3)    == [6,5,4]",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:][::-1]\n",
        "test": "assert ",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     (list_tuple([1,2,3]) == (1,2,3))",
        "num_ids": 190,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([3, 2, 1, 5, 4]) == 4",
        "num_ids": 160,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # while a <= b:\n    #     if a**.5 == int(a**.5):\n    #         yield a**2\n    #     a += 1\n",
        "test": "assert ",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import numpy as np\n    \n    r=np.sqrt(x**2+y**2)\n    phi=np.arctan2(y,x)\n    return r, phi\ndef rect_polar(r,phi):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import numpy as np\n    \n    x=r*np.cos(phi)\n    y=r*np.sin(phi)\n    return x,y\ndef cartesian_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import numpy as np\n    \n    r=np.sqrt(x**2+y**2)\n    phi=np.arctan2(y,x)\n    return r, phi\ndef cartesian_rect_2(r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import numpy as np\n    \n    x=r*np.cos(phi)\n    y=r*np.sin(phi)\n    return x, y\ndef polar_cart(r,phi):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import numpy as np\n    \n    x=r*np.cos(phi)\n    y=r*np.sin(phi)\n    return x, y\ndef polar_rect_2(r,phi):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import numpy as np\n    \n    x=r*np.cos(phi)\n    y=r*np.sin(phi)\n    return x, y\ndef rect_cart(r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import numpy as np\n    \n    x=r*np.cos(phi)\n    y=r*np.sin(phi)\n    return x, y\ndef rectangular_cartesian(r, phi):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import numpy as np\n    \n    x=r*np.cos(phi)\n    y=r*np.sin(phi)\n    return x, y\ndef rectangular_polar(r, phi):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import numpy as np\n    \n    x=r*np.cos(phi)\n    y=r*np.sin(phi)\n    return x, y\ndef create_generator(func, *args, **kwargs):\n    '''\n    Creates a generator function that will execute func with *args and **kwargs.\n    '''\n    def generator():\n        while True:\n            yield func(*args, **kwargs)\n    return generator\ndef get_complex_roots(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_2(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_3(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_4(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_5(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_6(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_7(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_8(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_9(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_10(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_11(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef get_complex_roots_12(a,b,c):\n    '''\n    Write a function that takes in 3 arguments, a, b, and c and returns the roots of the quadratic a x^2 + b x + c = 0.\n    '''\n    return (-b+cmath.sqrt(b*",
        "test": "assert     polar_rect(complex(1,0),complex(1,1)) == complex(1,0)",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    if n < 2:\n        return newList\n    temp = newList[0]\n    newList[0] = newList[n - 1]\n    newList[n - 1] = temp\n    return newList\n",
        "test": "assert     [4, 1, 3, 2] == swap_List([2, 1, 3, 4])",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binom_coeff = 1\n    for i in range(1,k+1):\n        binom_coeff = binom_coeff*int(n-i+1)//int(i)\n    return binom_coeff\n",
        "test": "assert     binomial_Coeff(5,2) == 10",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.startswith('0'):\n        ip = ip[1:]\n    return ip\n",
        "test": "assert     removezero_ip('123.123.123.123') == '123.123.123.123'",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return abs(list1[0] - list1[1])\n",
        "test": "assert     diff_even_odd([1, 3, 5, 7]) == -1",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    # We need to convert both the strings to integer values to calculate minimum number of swaps\n    str1 = [int(x) for x in str1]\n    str2 = [int(x) for x in str2]\n    count = 0\n    # Traverse through both the strings\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            index = str2.index(str1[i])\n            # if not the same, then it is equivalent to doing a swap\n            # update the strings in index\n            str2[index] = str1[i]\n            str2[i] = str1[i]\n            # increment the count\n            count += 1\n    return count\n",
        "test": "assert     min_Swaps('1100','1100') == 0",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n    \nprint(tuple_size((1,2,3,4,5)))\nprint(tuple_size(tuple_size((1,2,3,4,5))))\nprint(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12)))\nprint(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12))))\nprint(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))\nprint(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))))\nprint(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size(tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))))))))))))))\nprint(tuple_size(tuple_size(tuple_size(tuple_size",
        "test": "assert     tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36))    == 72",
        "num_ids": 2320,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    p1 = 0\n    p2 = 0\n    c = 0\n    while(c < k):\n        if arr1[p1] < arr2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n        c += 1\n    if p1 < len(arr1):\n        return arr1[p1]\n    if p2 < len(arr2):\n        return arr2[p2]\n",
        "test": "assert     find_kth([1,3,5,7], [2,4,6,8,9], 3) == 5",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digits = 0\n    temp = number\n    while temp!= 0:\n        digits += 1\n        temp = temp // 10\n    return number == sum(int(digit) ** digits for digit in str(number))\n",
        "test": "assert     armstrong_number(153) == True",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n    total = 0\n    total += number\n    return (total/number)\n",
        "test": "assert     sum_average(1) == (1,1)",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "test": "assert     is_Even(1) == False",
        "num_ids": 130,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict_={}\n    for i in str1:\n        if i not in dict_.keys():\n            dict_[i]=1\n        else:\n            return i\n",
        "test": "assert     first_repeated_char('oobe') == 'o'",
        "num_ids": 223,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = [1,2]\n    if n<=2:\n        return ludic_numbers\n    else:\n        while ludic_numbers[-1]<n:\n            ludic_numbers.append(ludic_numbers[-1]+ludic_numbers[-2])\n        return ludic_numbers\n",
        "test": "assert     get_ludic(28) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28]",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split(\" \")))\n",
        "test": "assert     reverse_words('hello world') ==     'world hello'",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 0:\n        num = num * -1\n    if num < 2:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n",
        "test": "assert     prime_num(2) == True",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef degree_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef degree_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.",
        "test": "assert     radian_degree(0) == 0.0",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = len(text)\n    while True:\n        m = pattern.search(text, start, end)\n        if m:\n            yield m\n            start = m.start() + 1\n            end = m.end()\n        else:\n            break\n",
        "test": "assert     find_literals('foo', r'bar') == (0, 0, 0)",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*bell_Number(n-1)\n",
        "test": "assert     bell_Number(0) == 1",
        "num_ids": 148,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [element for index, element in enumerate(list1) if index!= L]\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 4, 5]",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    return max([max(row[N]) for row in test_list])\n    \ndef matrix_mult(A, B):\n    '''\n    Write a function which given two matrices of equal dimension returns the product of the two.\n    '''\n    \n    return [[sum(a*b for a,b in zip(A_row,B_col)) for B_col in zip(*B)] for A_row in A]\n    \ndef matrix_transpose(A):\n    '''\n    Write a function which given a matrix A returns the transpose of A.\n    '''\n    \n    return [list(row) for row in zip(*A)]\n    \ndef matrix_mult_by_scalar(A, scalar):\n    '''\n    Write a function which given a matrix A and a scalar returns the scalar times the matrix.\n    '''\n    \n    return [[scalar*element for element in row] for row in A]\n",
        "test": "assert     max_of_nth(",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n",
        "test": "assert     merge([[1, 2], [2, 3], [3, 4], [4, 5]]) == [[1, 2], [2, 3], [3, 4], [4, 5]]",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:x+1]) for x in range(len(test_list))]\n    \n    \ndef test_cummulative_sum():\n    print(cummulative_sum([1,2,3]))\n    print(cummulative_sum((1,2,3,4)))\n    print(cummulative_sum((1,2,3,4,5)))\n    print(cummulative_sum([]))\n    \n    \ntest_cummulative_sum()",
        "test": "assert     cummulative_sum([-1, -2, -3]) == [-1, -3, -6], \"testcase2 failed\"",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        average_list.append(total/len(nums[i]))\n    return average_list\n",
        "test": "assert     average_tuple([(1, 2), (3, 4), (5, 6)]) == [(2.5, 3.5), (4.5, 5.5), (6.5, 7.5)]",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((3,2,1),(2,2,2)) == (1,0,1)",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    arr = [False]*(steps+1)\n    arr[0] = True\n    if d == 0:\n        return 0\n    if arr[d]:\n        return 1\n    min = float('inf')\n    for i in range(1, d+1):\n        if arr[i]:\n            continue\n        arr[i] = True\n        for j in range(i+1, min(i+steps, d+1)):\n            arr[j] = True\n            min = min(min, 1 + min_Jumps(steps-j, d-j))\n        arr[i] = False\n    return min\n",
        "test": "assert     min_Jumps(1, (0, 0)) == 0",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    def div(a,b):\n        if b == 0:\n            return float('Inf')\n        return a/b\n    return [div(a,b) for a,b in zip(nums1,nums2)]\n",
        "test": "assert     div_list(nums2,nums1) == [2.0, 1.0, 2.0, 1.0]",
        "num_ids": 244,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    res_str = ''\n    for each_char in test_str:\n        if each_char.isdigit():\n            res_str += each_char\n    return res_str\n",
        "test": "assert move_num('woe') == 'ej'",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    a.sort()\n    n = len(a)\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2 if a[1] % a[0] == 0 else 1\n    else:\n        a.insert(0,0)\n        i = 1\n        j = n\n        max_div = 0\n        while i < j:\n            if a[i] % a[j] == 0:\n                max_div = max(max_div,i)\n                j -= 1\n            else:\n                i += 1\n        return max_div\n",
        "test": "assert     largest_subset([2, 3, 9, 1, 7, 9, 2, 6, 5]) == 3",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2.0\n    \n    l1 = n // 2\n    l2 = n - l1\n    \n    if arr1[l1] > arr2[0]:\n        return get_median(arr1[:l1], arr2, l2)\n    else:\n        return get_median(arr1, arr2[:l2], l1)\n    \narr1 = [1, 5, 7, 9, 11, 13]\narr2 = [2, 3, 8, 10]\nn = len(arr1)\nprint(get_median(arr1, arr2, n))",
        "test": "assert ",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n    \ndef odd_even(nums):\n    '''\n    Write a function to check if a list contains a particular number.\n    '''\n    return nums[-1] in nums\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function that removes duplicates from a list.\n    '''\n    return set(nums)\n    \ndef compute_average(nums):\n    '''\n    Write a function to compute the average of a list of numbers.\n    '''\n    return sum(nums)/len(nums)\n    \ndef is_palindrome(nums):\n    '''\n    Write a function that checks whether a list is a palindrome.\n    '''\n    return nums[::-1] == nums\n    \ndef remove_stop_words(sentence, stop_words):\n    '''\n    Write a function to remove all the stop words from a sentence.\n    '''\n    return''.join([word for word in sentence.split() if word not in stop_words])\n    \ndef compute_number_to_letters(number):\n    '''\n    Write a function to convert a number to letters.\n    '''\n    letters = []\n    number_string = str(number)\n    if number_string[0] == '0':\n        return ''\n    for char in number_string:\n        letters.append(str(int(char) + 96))\n    return ''.join(letters)\n    \ndef get_integer(string):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    return int(string)\n    \ndef get_letters(number):\n    '''\n    Write a function to convert a number to letters.\n    '''\n    return chr(number - 96)\n    \ndef palindrome_permutation(str):\n    '''\n    Write a function that checks whether a string is a permutation of a palindrome.\n    '''\n    str = str.lower()\n    str_dict = {}\n    for letter in str:\n        if letter in str_dict:\n            str_dict[letter] += 1\n        else:\n            str_dict[letter] = 1\n    count = 0\n    for key in str_dict.keys():\n        if str_dict[key] % 2!= 0:\n            count += 1\n    if count > 1:\n        return False\n    else:\n        return True\n    \ndef get_largest_palindrome(max_num):\n    '''\n    Write a function to find the largest palindrome which is less than a given number.\n    '''\n    for num in range(max_num,0,-1):\n        if palindrome_permutation(str(num)):\n            return num\n    \ndef is_prime(num):\n    '''\n    Write a function that returns True if a number is prime, False otherwise.\n    '''\n    if num == 2:\n        return True\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef fibonacci(num):\n    '''\n    Write a function that returns the nth number in the fibonacci series.\n    '''\n    if num == 0 or num == 1:\n        return num\n    a,b = 0,1\n    for i in range(num - 1):\n        a,b = b,a+b\n    return b\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function that removes duplicates from a list.\n    '''\n    return list(set(nums))\n    \ndef reverse(nums):\n    '''\n    Write a function that reverses a list.\n    '''\n    nums.reverse()\n    return nums\n    \ndef find_duplicates(nums):\n    '''\n    Write a function that returns a list of the indices of all the numbers that appear more than once in the list.\n    '''\n    num_dict = {}\n    for i in range(len(nums)):\n        if nums[i] in num_dict:\n            num_dict[nums[i]] += 1\n        else:\n            num_dict[nums[i]] = 1\n    result = []\n    for key in num_dict:\n        if num_dict[key] > 1:\n            result.append(key)\n    return result\n    \ndef get_fib_seq(n):\n    '''\n    Write a function that returns a list of all fibonacci numbers less than n.\n    '''\n    fib_list = [0,1]\n    while True:\n        if fib_list[-1] > n:\n            break\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list\n    \ndef check_permutation(str1,str2):\n    '''\n    Write a function that returns True if two strings are permutations of each other, False otherwise.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    for char in str1:\n        if str1.count(char)!= str2.count(char):\n            return False\n    return True\n    \ndef get_duplicates(nums):\n    '''\n    Write a function that returns a list of all duplicates in the list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        if nums[i] in nums[i+1:]:\n            result.append(nums[i])\n    return result\n    \ndef is_valid(s):\n    '''\n    Write a function that returns True if a string is a valid variable name, False otherwise.\n    '''\n    if s == 'a' or s == 'e' or s == 'i' or s == 'o' or s == 'u':\n        return False\n    for char in s:\n        if char not in 'abcdefghijklmnopqrstuvwxyz_0123456789':\n            return False\n    return True\n    \ndef is_valid_tld(tld):\n    '''\n    Write a function that returns True if a string is a valid TLD, False otherwise.\n    '''\n    if tld in ['com','net','org','edu','gov','biz','info','mil','name','aero','asia','biz','cat','com','coop','edu','gov','info','int','jobs','mil','mobi','museum','name','net','org','pro','tel','travel']:\n        return True\n    else:\n        return False\n    \ndef get_longest_word(words):\n    '''\n    Write a function that returns the longest word in a list.\n    '''\n    return max(words,key=len)\n    \ndef get_longest_num(nums):\n    '''\n    Write a function that returns the longest number in a list.\n    '''\n    return max(nums,key=len)\n    \ndef is_vowel(char):\n    '''\n    Write a function that returns True if a character is a vowel, False otherwise.\n    '''\n    if char in ['a','e','i','o','u']:\n        return True\n    else:\n        return False\n    \ndef pig_latin(text):\n    '''\n    Write a function that returns the pig latin translation of a string.\n    '''\n    text = text.lower()\n    result = ''\n    if text[0] not in ['a','e','i','o','u']:\n        result = text[1:] + text[0] + 'ay'\n    else:\n        result = text + 'way'\n    return result\n    \ndef is_anagram(str1,str2):\n    '''\n    Write a function that returns True if two strings are anagrams of each other, False otherwise.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    for char in str1:\n        if str1.count(char)!= str2.count(char):\n            return False\n    return True\n    ",
        "test": "assert     nth_nums([2, 3, 4], 2) == [4, 9, 16]",
        "num_ids": 254,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for letter in string:\n        if letter.islower():\n            return False\n    return True\n",
        "test": "assert     is_upper('foo') == False",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n",
        "test": "assert     swap_List([1,2,3,4,5]) == [5,2,3,4,1], 'incorrect'",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    #Area of Triangle\n    A = 3 * math.pi * pow(r,2) / 4\n    #Area of Semicircle\n    A2 = math.pi * pow(r,2) / 4\n    #Area of the Semicircle\n    return A2 - A\n",
        "test": "assert     triangle_area(1.0) == np.pi",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end = len(array) if end==None else end\n    if start>=end:\n        return 1\n    if array[start]<array[end]:\n        return array[start]+1 if array[start+1]-array[start]==1 else find_First_Missing(array,start+1,end)\n    return find_First_Missing(array,start+1,end)\n    \ndef find_First_Missing(array,start=0,end=None):\n    end = len(array) if end==None else end\n    if start>=end:\n        return 1\n    mid = start+end/2\n    if array[start]==array[mid]:\n        return find_First_Missing(array,start+1,end)\n    if array[start]<array[mid]:\n        if array[mid]==array[end-1]:\n            return find_First_Missing(array,mid+1,end-1)\n        else:\n            return find_First_Missing(array,mid+1,end)\n    else:\n        if array[end-1]==array[mid]:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return find_First_Missing(array,start,mid-1)\n",
        "test": "assert ",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces('Hello World')     == 'Hello%20World', \"test case 1\"",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = [number for number in list if number % 2 == 0]\n    return even\n",
        "test": "assert     [x for x in range(10) if x % 2 == 0] == Split(range(10))",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    (x,y) = ele\n    new_list = [(x+1,y),(x-1,y),(x,y+1),(x,y-1)]\n    return [(i,j) for i,j in new_list if i > -1 and j > -1 and i < 101 and j < 101]\n",
        "test": "assert ",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "test": "assert     replace_spaces(\"Hello\") == \"Hello\"",
        "num_ids": 198,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n            num_list.append(i)\n    return num_list\n",
        "test": "assert     move_zero([0, 1, 0, 2, 0, 3, 0, 4, 0]) == [1, 2, 3, 4, 0, 0, 0, 0, 0]",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            s = s ^ (arr[i] ^ arr[j])\n    return s\n",
        "test": "assert     pair_xor_Sum([1,2,3,4,5,6,7,8,9,10],10) == (1^2 + 2^3 + 3^4 + 4^5 + 5^6 + 6^7 + 7^8 + 9^9 + 10^10)",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable)\n    # import heapq as hq\n    # result = []\n    # h = []\n    # for item in iterable:\n    #     hq.heappush(h, item)\n    # while h:\n    #     result.append(hq.heappop(h))\n    # return result\n    \n    ",
        "test": "assert     [1, 2, 3, 4, 5] == heap_sort([5, 1, 4, 3, 2])",
        "num_ids": 326,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return True\n    elif actual_cost>sale_amount:\n        return False\n    else:\n        return noprofit_noloss(actual_cost*0.99,sale_amount)\n",
        "test": "assert     noprofit_noloss(23.5,23.5)==True",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 0:\n        return 35.74 + 0.6215 * t + (35.75 * math.pow(v, 0.16)) - (0.4275 * t * math.pow(v, 0.16)) + 0.5525 * math.pow(t, 2) - 35.75 * math.pow(t, 3) + 0.4275 * math.pow(t, 4) - 0.2255 * math.pow(v, 2) + 0.1466 * math.pow(v, 3) + 0.2183 * math.pow(v, 4)\n    else:\n        return None\n",
        "test": "assert     ( wind_chill(15, 30) == -2.5 )",
        "num_ids": 1892,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names\n    return sum(len(name) for name in sample_names if name[0].islower())\n",
        "test": "assert     sample_nam(['a','b']) == 2",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('[()]','',items)\n",
        "test": "assert     remove_parenthesis('hello (world)') == 'hello world'",
        "num_ids": 188,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * n - 1\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]=='z' or text[-1]=='z':\n        return False\n    for i in range(1,len(text)-1):\n        if text[i]=='z':\n            return True\n    return False\n",
        "test": "assert     text_match_wordz_middle('xyz')     == True,    'incorrect'",
        "num_ids": 224,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\n    ",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10], 9) == [9,8,7,6,5,4,3,2,1,10]",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n",
        "test": "assert     add_dict_to_tuple((1,2), {'x': 3})!= (1,2,{'y': 3})",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    from collections import deque\n    \n    # convert cost into a dictionary\n    cost = {(i, j): cost[i][j] for i in range(len(cost)) for j in range(len(cost[0]))}\n",
        "test": "assert     maxAverageOfPath([[1, 4, 3], [2, 5, 6], [7, 8, 9]]) == 9",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key,value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[key] = value\n    return filtered_students\n",
        "test": "assert     filter_data({'Tony':(170.5,110), 'Bruce':(175.5,110), 'Natasha':(183.5,110)}, 170, 150) == [('Bruce', 'Bruce', 'Bruce', 'Bruce')]",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # we can use two dict to save the index\n    dict1 = {}\n    dict2 = {}\n    result = 0\n    for i in xrange(len(nums1)):\n        dict1[nums1[i]] = i\n        dict2[nums2[i]] = i\n    for i in xrange(len(nums1)):\n        if dict1[nums1[i]]!= dict2[nums2[i]]:\n            result += 1\n    return result\n",
        "test": "assert     count_same_pair([1, 2, 3], [1, 2, 3]) == 2",
        "num_ids": 2313,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    import math\n    if power < 0:\n        return 0\n    if power == 0:\n        return 1\n    if power == 1:\n        return base\n    digits = math.floor(math.log10(power) + 1)\n    result = 0\n    for digit in range(digits):\n        result += base ** (power-digit-1)\n    return result\n",
        "test": "assert     power_base_sum(2, 10) == 6",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2=text1.strip()\n    regex = re.compile(r'\"[^\"]*\"|\\'.\\'|\\\"[^\\\"]*\\\"')\n    test_str=regex.findall(text2)\n    print(test_str)\n    return test_str\ndef combine_str(str1, str2, str3):\n    '''\n    Write a function to combine two strings and return the combined string.\n    '''\n    result=str1+str2+str3\n    return result\ndef solution(string):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = re.compile(r'\"[^\"]*\"|\\'.\\'|\\\"[^\\\"]*\\\"')\n    test_str=regex.findall(string)\n    print(test_str)\n    return test_str\ndef print_c(c):\n    print(\"\\n\")\n    print(c)\ndef return_c(c):\n    return print_c(c)\ndef is_null(c):\n    '''\n    Write a function to check if a string is null or not.\n    '''\n    if c == 'NULL':\n        return True\n    else:\n        return False\ndef is_null(c):\n    '''\n    Write a function to check if a string is null or not.\n    '''\n    if c == 'NULL':\n        return True\n    else:\n        return False\ndef is_blank(c):\n    '''\n    Write a function to check if a string is blank or not.\n    '''\n    if c == \"\":\n        return True\n    else:\n        return False\ndef is_blank(c):\n    '''\n    Write a function to check if a string is blank or not.\n    '''\n    if c == \"\":\n        return True\n    else:\n        return False\ndef is_white(c):\n    '''\n    Write a function to check if a string is white space or not.\n    '''\n    if c == \" \":\n        return True\n    else:\n        return False\ndef is_white(c):\n    '''\n    Write a function to check if a string is white space or not.\n    '''\n    if c == \" \":\n        return True\n    else:\n        return False\ndef is_digit(c):\n    '''\n    Write a function to check if a string is digit or not.\n    '''\n    if c.isdigit():\n        return True\n    else:\n        return False\ndef is_digit(c):\n    '''\n    Write a function to check if a string is digit or not.\n    '''\n    if c.isdigit():\n        return True\n    else:\n        return False\ndef is_alphabet(c):\n    '''\n    Write a function to check if a string is alphabet or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_alphabet(c):\n    '''\n    Write a function to check if a string is alphabet or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_lowercase(c):\n    '''\n    Write a function to check if a string is lowercase or not.\n    '''\n    if c.islower():\n        return True\n    else:\n        return False\ndef is_lowercase(c):\n    '''\n    Write a function to check if a string is lowercase or not.\n    '''\n    if c.islower():\n        return True\n    else:\n        return False\ndef is_uppercase(c):\n    '''\n    Write a function to check if a string is uppercase or not.\n    '''\n    if c.isupper():\n        return True\n    else:\n        return False\ndef is_uppercase(c):\n    '''\n    Write a function to check if a string is uppercase or not.\n    '''\n    if c.isupper():\n        return True\n    else:\n        return False\ndef is_alpha(c):\n    '''\n    Write a function to check if a string is alpha or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_alpha(c):\n    '''\n    Write a function to check if a string is alpha or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_alnum(c):\n    '''\n    Write a function to check if a string is alnum or not.\n    '''\n    if c.isalnum():\n        return True\n    else:\n        return False\ndef is_alnum(c):\n    '''\n    Write a function to check if a string is alnum or not.\n    '''\n    if c.isalnum():\n        return True\n    else:\n        return False\ndef is_letter(c):\n    '''\n    Write a function to check if a string is letter or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_letter(c):\n    '''\n    Write a function to check if a string is letter or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_space(c):\n    '''\n    Write a function to check if a string is space or not.\n    '''\n    if c == \" \":\n        return True\n    else:\n        return False\ndef is_space(c):\n    '''\n    Write a function to check if a string is space or not.\n    '''\n    if c == \" \":\n        return True\n    else:\n        return False\ndef is_digit(c):\n    '''\n    Write a function to check if a string is digit or not.\n    '''\n    if c.isdigit():\n        return True\n    else:\n        return False\ndef is_digit(c):\n    '''\n    Write a function to check if a string is digit or not.\n    '''\n    if c.isdigit():\n        return True\n    else:\n        return False\ndef is_alnum(c):\n    '''\n    Write a function to check if a string is alnum or not.\n    '''\n    if c.isalnum():\n        return True\n    else:\n        return False\ndef is_alnum(c):\n    '''\n    Write a function to check if a string is alnum or not.\n    '''\n    if c.isalnum():\n        return True\n    else:\n        return False\ndef is_alphabet(c):\n    '''\n    Write a function to check if a string is alphabet or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_alphabet(c):\n    '''\n    Write a function to check if a string is alphabet or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_lowercase(c):\n    '''\n    Write a function to check if a string is lowercase or not.\n    '''\n    if c.islower():\n        return True\n    else:\n        return False\ndef is_lowercase(c):\n    '''\n    Write a function to check if a string is lowercase or not.\n    '''\n    if c.islower():\n        return True\n    else:\n        return False\ndef is_uppercase(c):\n    '''\n    Write a function to check if a string is uppercase or not.\n    '''\n    if c.isupper():\n        return True\n    else:\n        return False\ndef is_uppercase(c):\n    '''\n    Write a function to check if a string is uppercase or not.\n    '''\n    if c.isupper():\n        return True\n    else:\n        return False\ndef is_letter(c):\n    '''\n    Write a function to check if a string is letter or not.\n    '''\n    if c.isalpha():\n        return True\n    else:\n        return False\ndef is_letter(c):\n    '''\n    Write a function to check if a string is letter or not.\n    '''\n    if c",
        "test": "assert     extract_quotation(\"\"\"I have three questions:",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) <= 1:\n        return test_tup\n    else:\n        return tuple([test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1)])\n",
        "test": "assert     multiply_elements((0,)) == (0,)",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i + j for i, j in zip(lst1, lst2)]\n",
        "test": "assert     sum_list( [1,2,3,4], [5,6,7,8]) == [6,8,10,12], \"example 1\"",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(k for k, _ in groupby(nums))\n",
        "test": "assert     consecutive_duplicates([1,2,3,3,4,4,4,5]) == [1,2,3,4,5]",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*(r+h)\n    \n    # or\n    # return math.pi*(r**2+(h**2))\n",
        "test": "assert     lateralsurface_cone(1,10) == 110.54122264638",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[\\s,\\.]', ':', text)\n    return text\n",
        "test": "assert replace_specialchar(' Hi. There') == 'Hi:There'",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n",
        "test": "assert     find_first_occurrence(range(0, 200), -1) == -1",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # arr = [1,4,5,3,2]\n    n = len(arr)\n    return sum(arr[i]*arr[j] for i in range(n) for j in range(i+1,n))\n",
        "test": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6]) == 96, \"Wrong answer\"",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n ^ (n >> 1)\n    m = (m & ~0x55555555) | ((m & 0x55555555) << 1)\n    return m\n",
        "test": "assert     set_middle_bits(0b0101010101010101) == 0b1010101010101010, \"FAILED\"",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    a.insert(i, x)\n    return i\n",
        "test": "assert     left_insertion([1, 2, 3, 5, 6, 7, 8], 2) == 1",
        "num_ids": 173,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = re.findall(regex,string)\n    return bool(string)\n",
        "test": "assert     check_str('aeiou') == True",
        "num_ids": 125,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1/0\n",
        "test": "assert     geometric_sum(4) == 3.2",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n -= 1\n    return int(math.pow(10, n) * (n + 1) / 2) \ndef is_triangular(n): \n    '''\n    Write a python function to check if the given number is triangular or not\n    '''\n    x = int((math.sqrt(8 * n + 1) - 1) / 2) \n    return x * (x + 1) == 8 * n + 1 \ndef triangle(n): \n    '''\n    Write a python function to return the smallest triangular number with n digits. https://www.geeksforgeeks.org/smallest-triangular-number-with-n-digits/\n    '''\n    n -= 1\n    return int(math.pow(10, n) * (n + 1) / 2) \ndef find_smallest_triangular(n): \n    '''\n    Write a python function to return the smallest triangular number with n digits. https://www.geeksforgeeks.org/smallest-triangular-number-with-n-digits/\n    '''\n    n -= 1\n    return int(math.pow(10, n) * (n + 1) / 2) \ndef find_largest_triangular(n): \n    '''\n    Write a python function to return the largest triangular number with n digits. https://www.geeksforgeeks.org/largest-triangular-number-with-n-digits/\n    '''\n    return int(math.pow(10, n) * (n + 1) / 2) - 1 \ndef find_smallest_triangular_Number(n): \n    '''\n    Write a python function to return the smallest triangular number with n digits. https://www.geeksforgeeks.org/smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.pow(10, n) * (n + 1) / 2) - 1 \ndef find_largest_triangular_Number(n): \n    '''\n    Write a python function to return the largest triangular number with n digits. https://www.geeksforgeeks.org/largest-triangular-number-with-n-digits/\n    '''\n    return int(math.pow(10, n) * (n + 1) / 2) - 1 \ndef find_smallest_triangular_Number(n): \n    '''\n    Write a python function to return the smallest triangular number with n digits. https://www.geeksforgeeks.org/smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.pow(10, n) * (n + 1) / 2) - 1 \ndef is_pentagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 24 * n)) / 6 \n    return x == int(x) \ndef is_hexagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_pentagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 24 * n)) / 6 \n    return x == int(x) \ndef is_hexagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_heptagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 40 * n)) / 10 \n    return x == int(x) \ndef is_octagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_heptagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 40 * n)) / 10 \n    return x == int(x) \ndef is_octagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_pentagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 24 * n)) / 6 \n    return x == int(x) \ndef is_hexagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_heptagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 40 * n)) / 10 \n    return x == int(x) \ndef is_octagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_heptagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 40 * n)) / 10 \n    return x == int(x) \ndef is_octagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_pentagonal(n): \n    '''\n    Write a python function to check if the given number is pentagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 24 * n)) / 6 \n    return x == int(x) \ndef is_hexagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_heptagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 40 * n)) / 10 \n    return x == int(x) \ndef is_octagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return x == int(x) \ndef is_heptagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 40 * n)) / 10 \n    return x == int(x) \ndef is_octagonal(n): \n    '''\n    Write a python function to check if the given number is hexagonal number or not\n    '''\n    x = (1 + math.sqrt(1 + 8 * n)) / 4 \n    return ",
        "test": "assert     find_Index(1)==0",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n",
        "test": "assert     tuple_to_dict((1, 2)) == {1: 2}",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    c = s[0]\n    for i in range(len(s)-1) :\n        if s[i+1]!= c :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('a') == True",
        "num_ids": 223,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (4*math.sqrt(3))/2*(3*side**2)\n",
        "test": "assert     area_tetrahedron(5)    ==     10, 'error'",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right(['A', 'B', 'C', 'D', 'E'], 1)     ==     ['B', 'C', 'D', 'E', 'A']",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n    \ndef main():\n    test_tuple = (1,2,3,None)\n    print(check_none(test_tuple))\n",
        "test": "assert     check_none(())    == False",
        "num_ids": 172,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum):\n        if num % (num % 10)!= 0:\n            print(num)\n",
        "test": "assert     divisible_by_digits(11, 100) == [11, 22, 33, 44, 55, 66, 77, 88, 99]",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    r=float(r)\n    a=float(a)\n    if(a>360):\n        return None\n    else:\n        area = math.pi * r**2*(math.sin(math.radians(a)))\n        return area\n",
        "test": "assert     sector_area(5,360) == None",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X_len = len(X)\n    Y_len = len(Y)\n    Z_len = len(Z)\n    LCS = [[[0 for i in range(Z_len+1)] for j in range(Y_len+1)] for k in range(X_len+1)]\n",
        "test": "assert lcs_of_three('gxct', 'grxf', 'grxcg') == 'gx'",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall('[A-Z][a-z]+', str1)\n    result = ''\n    for word in words:\n        result += word +''\n    return result\n",
        "test": "assert     capital_words_spaces('Hello World') == 'Hello World'",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(n) for n in x.split('.')])\n",
        "test": "assert     sort_numeric_strings(['10', '1', '2', '9', '5', '3']) == ['1', '2', '3', '5', '9', '10']",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([], ()) == ()",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) - 1:\n        return True\n",
        "test": "assert     check_min_heap_helper([1, 2, 3, 4], 0) == False",
        "num_ids": 198,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = [0, 1, 1]\n    for i in range(n):\n        a.append(a[i] + a[i-1])\n    return a[n]\n",
        "test": "assert     jacobsthal_num(1)     == 1",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        print(\"K is greater than the length of tuple list\")\n        return\n    return min(test_list, key=lambda x: x[1])\n",
        "test": "assert     min_k(('a', 'b', 'c', 'd', 'e'), 3) == ('b', 'c', 'd')",
        "num_ids": 2323,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            res.append(l1[i])\n    return res\n",
        "test": "assert     extract_index_list([0,1,2,3,4,5],[1,2,3,4,5,6],[3,4,5,6,7,8,9]) == []",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers)<2:\n        return None\n    else:\n        numbers = sorted(numbers)\n        return numbers[1]\n",
        "test": "assert     second_smallest([1, 2, 3, 4, 5, 6, 7, 1]) == 1",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one('ab') == True",
        "num_ids": 217,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    length = len(test_list)\n    #creating a count variable\n    count = 0\n    #looping over each string in the list\n    for i in range(length):\n        #creating a reverse copy of each string\n        #the slice operator will reverse the string and return it\n        reverse_string = test_list[i][::-1]\n        #checking if the reverse copy is also present in the list\n        if reverse_string in test_list:\n            #incrementing the count\n            count += 1\n    #returning the count\n    return count\n",
        "test": "assert     count_reverse_pairs([\"cat\", \"dog\", \"mouse\"]) == 0",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1={}\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n            dict1[tuple(i)]=list1.count(i)\n    return dict1\n",
        "test": "assert     unique_sublists([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == {(1, 2, 3, 4): 4}",
        "num_ids": 816,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    return re.match(r'^[+-]?(0|[1-9][0-9]*)(\\.\\d{1,2})?$', num) is not None\n",
        "test": "assert     is_decimal('1.1') == True",
        "num_ids": 187,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) > len(set(arr)):\n        return False\n    else:\n        return True\n",
        "test": "assert     unique_Element([1, 2, 3, 4, 5, 5]) == False",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    return True\n",
        "test": "assert     check_monthnumber_number(2) == True, 'check_monthnumber_number(2)'",
        "num_ids": 159,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    diff = arr[-1] - arr[0]\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < diff:\n            diff = arr[i+1] - arr[i]\n    return diff\n",
        "test": "assert     find_min_diff([1,2,3,4],4) == 0",
        "num_ids": 310,
        "indeed": true
    },
    {
        "number": 764,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n",
        "test": "assert     number_ctr('1234567890') == 10",
        "num_ids": 185,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n//2 in [0,1,2,3,4,6,8,9,12,13,14,16,18,19,20,22,23,24,25,26,27,28,29,30,32,33,34,36,37,38,39,40,42,43,44,45,46,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n",
        "test": "assert     is_polite(1) == 1",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    out = []\n    for i in range(n):\n        if i + 1 < n:\n            out.append([l1[i], l1[i+1]])\n    return out\n",
        "test": "assert     pair_wise([1, 2, 3, 4, 5]) ==     [[1, 2], [2, 3], [3, 4], [4, 5]]",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    if n == 1:\n        return (1 if sum == arr[0] else 0)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert     get_pairs_count([1, 2, 3, 4, 6, 5], 5) == 2, \"function is broken\"",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "test": "assert     Diff([1,2,3],[1,2,3,4,5]) == [4,5]",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1) : \n        if i % 2!= 0 : \n            total += i**4\n    return total\n",
        "test": "assert     (odd_num_sum(1) == 1) ",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Takes a string and returns a stack\n    # LIFO\n    stack = []\n    \n    # Traversing the Expression\n    for item in exp:\n        if item == \"(\":\n            stack.append(item)\n        elif item == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    \n    # If stack is empty, expression is balanced\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_expression('(()))') == False",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    splitted_str = test_str.split(' ')\n    \n    return''.join([word for word in splitted_str if len(word)!= K])\n",
        "test": "assert     remove_length(\"ABCDEFG\", 2)     == \"ABCDEFG\"",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=re.findall(pattern,text)\n    if(len(occurance)!=0):\n        print(\"\\nPattern %s has occured %s times in %s\"%(pattern,len(occurance),text))\n        for i in occurance:\n            print(\"\\tPattern found at index %s\"%(text.index(i)))\n    else:\n        print(\"\\nPattern %s not found in %s\"%(pattern,text))\n    \ndef occurance_string(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=re.findall(pattern,text)\n    if(len(occurance)!=0):\n        print(\"\\nPattern %s has occured %s times in %s\"%(pattern,len(occurance),text))\n    else:\n        print(\"\\nPattern %s not found in %s\"%(pattern,text))\n    \n",
        "test": "assert     occurance_substring(\"abc\", \"d\") == None",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 0:\n            return True\n    return False\n",
        "test": "assert     odd_position([1,2,3,4,5,6]) == False",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for idx, char in enumerate(test_str):\n        if char in vowels and (idx == 0 or not test_str[idx-1] in vowels):\n            count += 1\n    return count\n",
        "test": "assert     count_vowels('Monday') == 2",
        "num_ids": 2311,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "test": "assert     (find_sum([1,2,3,1]) == 4)",
        "num_ids": 178,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    duplicates = []\n    i = 0\n    while i < len(list1) - 1:\n        if list1[i] == list1[i + 1]:\n            duplicates.append(list1[i])\n            i += 2\n        else:\n            duplicates.append(list1[i])\n            i += 1\n    if i == len(list1) - 1:\n        duplicates.append(list1[i])\n    return duplicates\n",
        "test": "assert pack_consecutive_duplicates([1, 2, 2, 2, 3, 3]) == [[1], [2, 2], [3, 3]]",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for index in range(len(list1)):\n        for sublist in list1[index+1:]:\n            if tuple(sublist) in sublist_count:\n                sublist_count[tuple(sublist)] += 1\n            else:\n                sublist_count[tuple(sublist)] = 1\n    return sublist_count\n",
        "test": "assert     unique_sublists([1,2,3,4,5,6,7,8,9])    == { (1,): 1, (2,): 1, (3,): 1, (4,): 1, (5,): 1, (6,): 1, (7,): 1, (8,): 1, (9,): 1 }",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # your code here\n    #print test_list\n    final_list = []\n    for i in range(1,len(test_list)):\n        for j in combinations(test_list,i):\n            final_list.append(sum(j))\n    #print final_list\n    return final_list\ndef is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2 and n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i == 0:\n                return False\n    return True\ndef prime_sums(n):\n    final_list = []\n    for i in range(1,n+1):\n        if is_prime(i) and is_prime(n-i):\n            final_list.append((i,n-i))\n    return final_list\n",
        "test": "assert     find_combinations([",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    div = 1\n    for i in range(1, n+1) :\n        if(n%i == 0) :\n            div = div + 1\n    if div%2 == 0 :\n        return True\n    else :\n        return False\n",
        "test": "assert     count_divisors(2)    == 0",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(0,len(arr)):\n        if len(arr[i:])%2!=0:\n            for j in range(i,len(arr)):\n                s += arr[j]\n    return s\n",
        "test": "assert     odd_length_sum([1,3,2,5,4,2,6,2,2,3]) == 22",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert the rgb values to their respective ranges.\n    rgb_range = 255.0\n    red = r / rgb_range\n    green = g / rgb_range\n    blue = b / rgb_range\n    max_of_rgb = max(red, green, blue)\n    min_of_rgb = min(red, green, blue)\n    # Determine the value of hue, saturation and brightness\n    if max_of_rgb == min_of_rgb:\n        hue = 0\n    elif max_of_rgb == red:\n        hue = 60 * (((green - blue) / (max_of_rgb - min_of_rgb)) % 6)\n    elif max_of_rgb == green:\n        hue = 60 * (((blue - red) / (max_of_rgb - min_of_rgb)) + 2)\n    elif max_of_rgb == blue:\n        hue = 60 * (((red - green) / (max_of_rgb - min_of_rgb)) + 4)\n    # Now determine the saturation and brightness\n    if max_of_rgb == 0:\n        sat = 0\n    else:\n        sat = 1 - min_of_rgb / max_of_rgb\n    if sat == 0:\n        val = max_of_rgb\n    else:\n        val = max_of_rgb * (1 - min_of_rgb / 255)\n    return hue, sat, val\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return reduce(lambda x, y: x*y, [x for x in list1 if x % 2 == 0]) * reduce(lambda x, y: x*y, [x for x in list1 if x % 2!= 0])\n",
        "test": "assert ",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n",
        "test": "assert     (0,0,0) == tuple_str_int('0,0,0')",
        "num_ids": 182,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    i = len(a)-1\n    j = i -1\n    while(i>0 and a[i-1]>x):\n        a[i], a[j] = a[j], a[i]\n        i=i-1\n        j=j-1\n    return i\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    i = len(a)-1\n    j = i -1\n    while(i>0 and a[i-1]>x):\n        a[i], a[j] = a[j], a[i]\n        i=i-1\n        j=j-1\n    return i\n",
        "test": "assert     right_insertion([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 9",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"(?<!^)(a)([b]{3})(?!$)\"\n    result = re.match(pattern, text)\n    if result:\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n",
        "test": "assert     text_match_three('abcd')",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Python 3\n    #new_tuple = tuple(test_list)\n    #return new_tuple\n    # Python 2\n    return tuple(test_list) + (test_str,)\n    \ndef merge(test_tuple, test_string):\n    '''\n    Write a function to merge a tuple and a string into a new tuple.\n    '''\n    # Python 3\n    #new_tuple = tuple(test_tuple) + (test_string,)\n    #return new_tuple\n    # Python 2\n    return test_tuple + (test_string,)\n    \ndef filter_words(test_string):\n    '''\n    Write a function to filter the empty strings in the list of strings.\n    '''\n    # Python 3\n    #new_list = [string for string in test_string if string!= \"\"]\n    #return new_list\n    # Python 2\n    return filter(lambda word: word!= \"\", test_string)\n    \ndef odd_even(test_int):\n    '''\n    Write a function to convert an integer into an odd or even number.\n    '''\n    # Python 3\n    #if test_int % 2 == 0:\n    #    return \"even\"\n    #return \"odd\"\n    # Python 2\n    return \"even\" if test_int % 2 == 0 else \"odd\"\n    \ndef is_consonant(test_char):\n    '''\n    Write a function that returns True if the given character is a consonant and False if it is a vowel.\n    '''\n    # Python 3\n    #return test_char.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    # Python 2\n    return test_char.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    \ndef rev_word(test_string):\n    '''\n    Write a function to reverse a word.\n    '''\n    # Python 3\n    #return \"\".join(reversed(test_string))\n    # Python 2\n    return \"\".join(reversed(test_string))\n    \ndef left_join(test_tuple):\n    '''\n    Write a function to join a tuple together.\n    '''\n    # Python 3\n    #return \"\".join(test_tuple)\n    # Python 2\n    return \"\".join(test_tuple)\n    \ndef create_deck(test_num):\n    '''\n    Write a function to create a deck of cards.\n    '''\n    # Python 3\n    #return [test_num + \"-\" + suit for suit in suits]\n    # Python 2\n    return [test_num + \"-\" + suit for suit in suits]\n    \ndef compare(test_tuple1, test_tuple2):\n    '''\n    Write a function to compare two tuples.\n    '''\n    # Python 3\n    #return \"\".join(test_tuple1) == \"\".join(test_tuple2)\n    # Python 2\n    return test_tuple1 == test_tuple2\n    \ndef check_tuple(test_tuple):\n    '''\n    Write a function to check if a tuple is a triangle or not.\n    '''\n    # Python 3\n    #return len(test_tuple) == 3 and all(isinstance(number, int) for number in test_tuple)\n    # Python 2\n    return len(test_tuple) == 3 and all(isinstance(number, (int, long)) for number in test_tuple)\n    \ndef check_dict(test_dict):\n    '''\n    Write a function to check if a dictionary is a triangle or not.\n    '''\n    # Python 3\n    #return len(test_dict) == 3 and all(isinstance(key, str) and isinstance(value, int) for (key, value) in test_dict.items())\n    # Python 2\n    return len(test_dict) == 3 and all(isinstance(key, (str, unicode)) and isinstance(value, (int, long)) for (key, value) in test_dict.items())\n    \ndef check_list(test_list):\n    '''\n    Write a function to check if a list is a triangle or not.\n    '''\n    # Python 3\n    #return len(test_list) == 3 and all(isinstance(value, int) for value in test_list)\n    # Python 2\n    return len(test_list) == 3 and all(isinstance(value, (int, long)) for value in test_list)\n    \ndef f_string(test_str):\n    '''\n    Write a function to print out a string in format: '{name},{lastname}'.\n    '''\n    # Python 3\n    #return f\"{test_str} {test_str[-2::-1]}\"\n    # Python 2\n    return \"Hello %s %s\" % (test_str, test_str[-2::-1])\n    \ndef distance(test_tuple1, test_tuple2):\n    '''\n    Write a function to calculate the distance between two tuples.\n    '''\n    # Python 3\n    #return sum([abs(test_tuple1[i] - test_tuple2[i]) for i in range(len(test_tuple1))])\n    # Python 2\n    return sum(abs(test_tuple1[i] - test_tuple2[i]) for i in range(len(test_tuple1)))\n    \ndef insert(test_list, test_dict, test_str):\n    '''\n    Write a function to insert a new key:value pair into a dictionary.\n    '''\n    # Python 3\n    #test_dict[test_str] = test_list\n    #return test_dict\n    # Python 2\n    return test_dict.update({test_str: test_list})\n    \ndef loop_thru_list(test_list):\n    '''\n    Write a function to loop through a list and print out each element.\n    '''\n    # Python 3\n    for i in test_list:\n        print(i)\n    # Python 2\n    for i in test_list:\n        print i\n    \ndef loop_thru_dict(test_dict):\n    '''\n    Write a function to loop through a dictionary and print out each key and value pair.\n    '''\n    # Python 3\n    for i in test_dict:\n        print(i, test_dict[i])\n    # Python 2\n    for i in test_dict:\n        print i, test_dict[i]\n    \ndef duplicate_list(test_list):\n    '''\n    Write a function to check if a list contains duplicate values.\n    '''\n    # Python 3\n    #return len(test_list)!= len(set(test_list))\n    # Python 2\n    return len(test_list)!= len(set(test_list))\n    \ndef get_kth_element(test_list, test_int):\n    '''\n    Write a function to find the Kth element of a list.\n    '''\n    # Python 3\n    #return test_list[test_int]\n    # Python 2\n    return test_list[test_int]\n    \ndef get_count(test_list, test_value):\n    '''\n    Write a function to get the number of occurrences of a given value in a list.\n    '''\n    # Python 3\n    #return test_list.count(test_value)\n    # Python 2\n    return test_list.count(test_value)\n    \ndef get_count_list(test_list, test_value):\n    '''\n    Write a function to get the count of each element of a list.\n    '''\n    # Python 3\n    #return [test_list.count(element) for element in test_list]\n    # Python 2\n    return [test_list.count(element) for element in test_list]\n    \ndef find_k_largest(test_list, test_int):\n    '''\n    Write a function to find the kth largest element of a list.\n    '''\n    # Python 3\n    #return sorted(test_list, reverse=True)[test_int - 1]\n    # Python 2\n    return sorted(test_list, reverse=True)[test_int - 1]\n    \ndef find_k_smallest(test_list, test_int)",
        "test": "assert ",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(num%2==0 for num in nums[::2])\n",
        "test": "assert     [True, False, False, True, True, True, True, False, False, True] == even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while True:\n        try:\n            test_tup = tuple(filter(lambda x: not isinstance(x, tuple), test_tup))\n        except ValueError:\n            return test_tup\n",
        "test": "assert ",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "test": "assert     count_list([[0]]) == 1,     'incorrect count'",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    for i in range(length-1,0,-1):\n        if arr[i] == x:\n            return i\n    return -1\n",
        "test": "assert     last([1,2,3,4,5],5) == 4",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\ba[^\\ba]*b')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_starta_endb(\"ab\") == True",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "test": "assert     return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n*(n+1)/2\n",
        "test": "assert     (sum_odd(0) == 0)",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([1,2,3]) == 6, 'incorrect implementation of _sum'",
        "num_ids": 167,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d)))\n",
        "test": "assert ",
        "num_ids": 181,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\" \", \"\", text)\n",
        "test": "assert     remove_all_spaces('') == ''",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y and y==z:\n        return 3\n    else:\n        return 0\n",
        "test": "assert     test_three_equal(1,1,1)==3",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    length = len(arr)\n    # print(length)\n    start = 0\n    end = length - 1\n    rotate = 0\n    while start <= end:\n        if arr[start] > arr[end]:\n            rotate += 1\n            end -= 1\n        else:\n            start += 1\n    return rotate\n",
        "test": "assert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    x = int(math.sqrt(n))\n    if (x*x == n) :\n        return True\n    else :\n        return False\n",
        "test": "assert     is_perfect_square(4) == True",
        "num_ids": 200,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product*i\n    if product%2==0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([2,2,2,2]) == True, \"Test 1 failed\"",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # sums = [sum(x) for x in lists]\n    # highest_sum = max(sums)\n    # highest_sum_index = sums.index(highest_sum)\n    # return lists[highest_sum_index]\n    def max_sum(lists):\n        sums = [sum(x) for x in lists]\n        max_sum = max(sums)\n        return [x for (i, x) in enumerate(lists) if sums[i] == max_sum][0]\n    return max_sum(lists)\n",
        "test": "assert     max_sum_list([[1, 2, 3], [4, 5, 6]]) == [4, 5, 6]",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and test_str[i].isupper():\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and test_str[i].islower():\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_alphabet(test_str):\n    '''\n    Write a function to find maximum run of alphabet characters in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and ord(test_str[i]) >= 97 and ord(test_str[i]) <= 122:\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_digit(test_str):\n    '''\n    Write a function to find maximum run of digits in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and ord(test_str[i]) >= 48 and ord(test_str[i]) <= 57:\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_special(test_str):\n    '''\n    Write a function to find maximum run of special characters in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and not (ord(test_str[i]) >= 48 and ord(test_str[i]) <= 57):\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_nonalpha(test_str):\n    '''\n    Write a function to find maximum run of non-alphabet characters in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and not (ord(test_str[i]) >= 97 and ord(test_str[i]) <= 122):\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_white(test_str):\n    '''\n    Write a function to find maximum run of white space characters in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and test_str[i].isspace():\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_nonwhite(test_str):\n    '''\n    Write a function to find maximum run of non-white space characters in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and not test_str[i].isspace():\n            count += 1\n            i += 1\n        if max < count:\n            max = count\n    return max\n    \ndef max_run_multiline(test_str):\n    '''\n    Write a function to find maximum run of multi-line strings in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and test_str[i:i+3] == '\"\"\"' or test_str[i:i+3] == \"'''\" or test_str[i:i+2] == '\"\"\"':\n            count += 1\n            i += 3\n        if max < count:\n            max = count\n    return max\n    \ndef longest_palindrome(test_str):\n    '''\n    Write a function to find the longest palindrome in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 1\n        while i < len(test_str) - 1 and test_str[i] == test_str[i+1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n        count = 1\n        while i < len(test_str) - 1 and test_str[i] == test_str[i-1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n    return max\n    \ndef longest_palindrome_non_alphanumeric(test_str):\n    '''\n    Write a function to find the longest palindrome in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 1\n        while i < len(test_str) - 1 and test_str[i] == test_str[i+1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n        count = 1\n        while i < len(test_str) - 1 and test_str[i] == test_str[i-1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n    return max\n    \ndef longest_palindrome_with_odd_length(test_str):\n    '''\n    Write a function to find the longest palindrome in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 1\n        while i < len(test_str) - 1 and test_str[i] == test_str[i+1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n        count = 1\n        while i < len(test_str) - 1 and test_str[i] == test_str[i-1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n    return max\n    \ndef longest_palindrome_with_even_length(test_str):\n    '''\n    Write a function to find the longest palindrome in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        if len(test_str) % 2 == 0:\n            while i < len(test_str) and test_str[i] == test_str[i+count]:\n                count += 1\n                i += 1\n            if count > max:\n                max = count\n        else:\n            while i < len(test_str) and test_str[i] == test_str[i+count]:\n                count += 1\n                i += 1\n            if count > max:\n                max = count\n    return max\n    \ndef longest_palindrome_without_spaces(test_str):\n    '''\n    Write a function to find the longest palindrome in the given string.\n    '''\n    i = 0\n    max = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) - 1 and test_str[i] == test_str[i+1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n        count = 0\n        while i < len(test_str) - 1 and test_str[i] == test_str[i-1]:\n            count += 1\n            i += 1\n        if count > max:\n            max = count\n    return max\n    \ndef longest_palindrome_with_spaces(test_str):",
        "test": "assert     max_run_uppercase('i') == 1",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert     first_odd([1,2,3,4,5]) == 1",
        "num_ids": 2112,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_K(('a', 1), 1) == True",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0,len(test_tup1)):\n        if test_tup2[i]<test_tup1[i]:\n            return True\n        else:\n            return False\ndef check_smaller_2(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0,len(test_tup1)):\n        if test_tup2[i]<test_tup1[i]:\n            return True\n        else:\n            continue\n    return False\ndef equal_in_list(test_tup,l):\n    '''\n    Write a function to check if the first tuple is equal to any element of a given list.\n    '''\n    for i in l:\n        if test_tup==i:\n            return True\n        else:\n            return False\n",
        "test": "assert     check_smaller(('a', 2, 3), ('b', 3, 2)) == False",
        "num_ids": 364,
        "indeed": true
    }
]