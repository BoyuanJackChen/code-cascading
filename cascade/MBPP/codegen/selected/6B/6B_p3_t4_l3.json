[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # print \"similar_elements\"\n    # print test_tup1, test_tup2\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    # print s1, s2\n    \n    return s1.intersection(s2)\n    \ndef get_common_tup(list_of_tuples):\n    '''\n    Write a function to find the common tuple elements from a list of tuples.\n    '''\n    # print \"get_common_tup\"\n    # print list_of_tuples\n    res_list = []\n    for i in range(0,len(list_of_tuples)):\n        for j in range(0,len(list_of_tuples)):\n            if i!= j:\n                if similar_elements(list_of_tuples[i], list_of_tuples[j]):\n                    res_list.append(list_of_tuples[i])\n                    break\n    return res_list\n    \ndef get_tup_list_from_tup_list(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_tup_list_from_tup_list\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(list(list_of_tups[i]))\n    return res_list\n    \ndef get_list_of_lists_from_tuples(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_lists_from_tuples\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(list(list_of_tups[i]))\n    return res_list\n    \ndef get_tup_list_from_list_of_lists(list_of_lists):\n    '''\n    Write a function to convert a list of lists to a list of tuples.\n    '''\n    # print \"get_tup_list_from_list_of_lists\"\n    res_list = []\n    for i in range(0,len(list_of_lists)):\n        res_list.append(tuple(list_of_lists[i]))\n    return res_list\n    \ndef get_list_of_tuples_from_list_of_lists(list_of_lists):\n    '''\n    Write a function to convert a list of lists to a list of tuples.\n    '''\n    # print \"get_list_of_tuples_from_list_of_lists\"\n    res_list = []\n    for i in range(0,len(list_of_lists)):\n        res_list.append(tuple(list_of_lists[i]))\n    return res_list\n    \ndef get_list_of_tuples_from_tup_list(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_tuples_from_tup_list\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(list(list_of_tups[i]))\n    return res_list\n    \ndef get_list_of_tuples_from_list_of_tuples(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_tuples_from_list_of_tuples\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(list(list_of_tups[i]))\n    return res_list\n    \ndef get_tuple_list_from_list_of_tuples(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_tuple_list_from_list_of_tuples\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(tuple(list_of_tups[i]))\n    return res_list\n    \ndef get_list_of_lists_from_list_of_tuples(list_of_tuples):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_lists_from_list_of_tuples\"\n    res_list = []\n    for i in range(0,len(list_of_tuples)):\n        res_list.append(list(list_of_tuples[i]))\n    return res_list\n    \ndef get_list_of_tuples_from_list_of_lists(list_of_lists):\n    '''\n    Write a function to convert a list of lists to a list of tuples.\n    '''\n    # print \"get_list_of_tuples_from_list_of_lists\"\n    res_list = []\n    for i in range(0,len(list_of_lists)):\n        res_list.append(tuple(list_of_lists[i]))\n    return res_list\n    \ndef get_tuple_list_from_list_of_lists(list_of_lists):\n    '''\n    Write a function to convert a list of lists to a list of tuples.\n    '''\n    # print \"get_tuple_list_from_list_of_lists\"\n    res_list = []\n    for i in range(0,len(list_of_lists)):\n        res_list.append(tuple(list_of_lists[i]))\n    return res_list\n    \ndef get_list_of_tuples_from_list_of_tuples(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_tuples_from_list_of_tuples\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(list(list_of_tups[i]))\n    return res_list\n    \ndef get_list_of_lists_from_tup_list(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_lists_from_tup_list\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(list(list_of_tups[i]))\n    return res_list\n    \ndef get_list_of_tuples_from_tup_list(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_tuples_from_tup_list\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(tuple(list_of_tups[i]))\n    return res_list\n    \ndef get_list_of_tuples_from_list_of_tuples(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_tuples_from_list_of_tuples\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(list(list_of_tups[i]))\n    return res_list",
        "test": "assert     (similar_elements((1,2,3), (1,2,3)) ==",
        "num_ids": 720
    },
    {
        "number": 3,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return True\n            break\n    else:\n        return False\n",
        "test": "assert     is_not_prime(1) == False",
        "num_ids": 380
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        n=len(nums)\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(n)]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n > len(nums):\n        n=len(nums)\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(n)]\ndef heap_delete(nums,n):\n    '''\n    Write a function to delete the smallest element from a list of integers.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    return h\ndef heap_insert(nums,n):\n    '''\n    Write a function to insert an element into a list of integers.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,n)\n    return h\ndef heap_increase_key(nums,n,k):\n    '''\n    Write a function to increase the value of a number in a list of integers by k.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,k)\n    return h\ndef heap_decrease_key(nums,n,k):\n    '''\n    Write a function to decrease the value of a number in a list of integers by k.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,-k)\n    return h\ndef heap_empty(nums):\n    '''\n    Write a function to check if a list of integers is empty or not.\n    '''\n    return not len(nums)\ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of integers in ascending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(nums))]\ndef heap_max_heapify(nums,i):\n    '''\n    Write a function to create a max heap from an unsorted list of integers.\n    '''\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < len(nums) and nums[i] < nums[left]:\n        largest = left\n    if right < len(nums) and nums[largest] < nums[right]:\n        largest = right\n    if largest!= i:\n        nums[i],nums[largest] = nums[largest],nums[i]\n        heap_max_heapify(nums,largest)\ndef heap_build_max_heap(nums):\n    '''\n    Write a function to create a max heap from an unsorted list of integers.\n    '''\n    for i in range(len(nums)/2-1,-1,-1):\n        heap_max_heapify(nums,i)\ndef heap_sort_max_heap(nums):\n    '''\n    Write a function to sort a list of integers in descending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(nums))]\ndef heap_create_max_heap(nums):\n    '''\n    Write a function to create a max heap from an unsorted list of integers.\n    '''\n    n = len(nums)\n    for i in range(n/2-1,-1,-1):\n        heap_max_heapify(nums,i)\ndef heap_delete_max(nums):\n    '''\n    Write a function to delete the maximum number from a list of integers.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    return h\ndef heap_insert_max(nums,n):\n    '''\n    Write a function to insert a number into a list of integers.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,n)\n    return h\ndef heap_increase_key_max(nums,n,k):\n    '''\n    Write a function to increase the value of a number in a list of integers by k.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,k)\n    return h\ndef heap_decrease_key_max(nums,n,k):\n    '''\n    Write a function to decrease the value of a number in a list of integers by k.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,-k)\n    return h\ndef heap_empty_max(nums):\n    '''\n    Write a function to check if a list of integers is empty or not.\n    '''\n    return not len(nums)\ndef heap_sort_max_heap(nums):\n    '''\n    Write a function to sort a list of integers in descending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(nums))]\ndef heap_build_max_heap(nums):\n    '''\n    Write a function to create a max heap from an unsorted list of integers.\n    '''\n    for i in range(len(nums)/2-1,-1,-1):\n        heap_max_heapify(nums,i)\ndef max_heap_insert(nums,n):\n    '''\n    Write a function to insert a number into a list of integers.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,n)\n    return h\ndef max_heap_increase_key(nums,n,k):\n    '''\n    Write a function to increase the value of a number in a list of integers by k.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,k)\n    return h\ndef max_heap_decrease_key(nums,n,k):\n    '''\n    Write a function to decrease the value of a number in a list of integers by k.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,-k)\n    return h\ndef max_heap_delete(nums):\n    '''\n    Write a function to delete the maximum number from a list of integers.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(",
        "test": "assert     (hq.nlargest(3, [1, 3, 5, 7, 9, 2, 4, 6, 8, 0], key=lambda x: -x)) == [9, 7, 5]",
        "num_ids": 590
    },
    {
        "number": 6,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0;\n",
        "test": "assert     is_Power_Of_Two(5) == False, \"False is expected\"",
        "num_ids": 256
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in text.split():\n        if len(word) >= 4:\n            result.append(word)\n    return result\n",
        "test": "assert     find_char_long(\"\") == []",
        "num_ids": 457
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 2\n    return nums\n",
        "test": "assert     [1, 4, 9] == square_nums([1, 2, 3])",
        "num_ids": 257
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    if len(str) == 1:\n        return rotations\n    else:\n        for x in range(len(str)):\n            y = len(str) - 1 - x\n            if str[x] == str[y]:\n                rotations += 1\n            else:\n                break\n    return rotations\n",
        "test": "assert     find_Rotations('abc') == 0",
        "num_ids": 646
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\").replace(ch,\"\")\n",
        "test": "assert     remove_Occ('mach','m') == 'ach'",
        "num_ids": 275
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = []\n    for i in range(len(M)):\n        sum_rows = 0\n        for j in range(len(M[0])):\n            sum_rows += M[i][j]\n        row_sums.append(sum_rows)\n    l = []\n    for i in range(len(row_sums)):\n        l.append((row_sums[i], i))\n    l.sort()\n    res = []\n    for i in range(len(l)):\n        res.append(M[l[i][1]])\n    return res\n",
        "test": "assert     sort_matrix([[9, 9, 9], [9, 9, 9], [9, 9, 9]]) == [[9, 9, 9], [9, 9, 9], [9, 9, 9]]",
        "num_ids": 560
    },
    {
        "number": 14,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5*l*b*h\n    return volume\n",
        "test": "assert     find_Volume(2,3,4) == 12",
        "num_ids": 233
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lowercase_count=0\n    for i in range(len(text)):\n        if text[i].islower():\n            lowercase_count+=1\n        else:\n            if lowercase_count>0:\n                return True\n            else:\n                lowercase_count=0\n    return False\n",
        "test": "assert     text_lowercase_underscore(\"this is all lowercase, with no spaces or punctuation!\") == True",
        "num_ids": 457
    },
    {
        "number": 17,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert     square_perimeter(1) == 4",
        "num_ids": 156
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = [] \n    for i in range(len(string)): \n        if string[i] not in result: \n            result.append(string[i])\n    return result\n",
        "test": "assert     str_to_list('abcd','ac') == ['a']",
        "num_ids": 329
    },
    {
        "number": 19,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # using hash table\n    # O(n) time, O(n) space\n    hashtable = {}\n    for num in arraynums:\n        if num in hashtable:\n            return True\n        else:\n            hashtable[num] = True\n    return False\n",
        "test": "assert     test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 400
    },
    {
        "number": 20,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1:\n        return False\n    elif x == 1:\n        return True\n    elif x == 2:\n        return False\n    else:\n        for i in range(3,x):\n            if x%i == 0:\n                return False\n        return True\n",
        "test": "assert     is_woodall(8)     == False",
        "num_ids": 336
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2\n",
        "test": "assert     (rev(12345) == False)",
        "num_ids": 209
    },
    {
        "number": 57,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in arr : \n        if int(i) > max_num :\n            max_num = int(i)\n    return max_num\n",
        "test": "assert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9",
        "num_ids": 425
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y < 0:\n        return True\n    elif x < 0 and y >= 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(20,30) == False",
        "num_ids": 2010
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((n*(3*n - 1))/2)\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 159
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #get the count of substrings with sum of digits equal to length\n    def substrings(s):\n        dic = {}\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                dic[s[i:j+1]] = dic.get(s[i:j+1], 0) + 1\n        return dic\n    def check_Substrings(s, count_dic):\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                count = 0\n                for k in range(i, j+1):\n                    if s[k] in count_dic:\n                        count += count_dic[s[k]]\n                if count == j-i+1:\n                    return True\n        return False\n    count_dic = substrings(s)\n    return check_Substrings(s, count_dic)\n",
        "test": "assert     count_Substrings('aa') == 0",
        "num_ids": 540
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs[0], smallest_num(xs[1:]))\n",
        "test": "assert     smallest_num([1,2,3,4,5]) == 1",
        "num_ids": 201
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return\n",
        "test": "assert     max_difference((5, 10, 2, 3, 5, 2, 9, 1, 6, 9, 4, 4)) == 6",
        "num_ids": 544
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n",
        "test": "assert     subject_marks([('a', 'A'), ('b', 'A'), ('c', 'A')]) == [('a', 'A'), ('b', 'A'), ('c', 'A')]",
        "num_ids": 548
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for d in data_list:\n        if isinstance(d, list):\n            result += recursive_list_sum(d)\n        else:\n            result += d\n    return result\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 442
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for element in list if element>0)\n",
        "test": "assert     pos_count([1,2,3,4,5,6]) == 6",
        "num_ids": 1291
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1, 1, 2]\n    if n == 0: return 0\n    if n < 3: return bell[n]\n    for i in range(3, n):\n        bell.append(bell[i-1] + bell[i-2] + bell[i-3])\n    return bell[n-1]\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 272
    },
    {
        "number": 68,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    def isMonotonic(A):\n        l=len(A)\n        if l==0:\n            return True\n        elif l==1:\n            return True\n        else:\n            if A[0]<=A[1]:\n                return isMonotonic(A[1:])\n            else:\n                return False\n    return isMonotonic(A)\n",
        "test": "assert     is_Monotonic([1,3,2,5,3,3,4]) == False",
        "num_ids": 508
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(0, len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1, 2, 3], [1, 2, 3]) == True",
        "num_ids": 454
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal = True\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            equal = False\n            break\n    return equal\n",
        "test": "assert     find_equal_tuple([(1, 2), (1, 2), (1, 2, 3), (1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6)]) == False, \"Wrong\"",
        "num_ids": 614
    },
    {
        "number": 71,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    '''\n    Comb sort is a famous algorithm for sorting small numbers,\n    and it can be used to make a more efficient sorting algorithm.\n    It is a comparison sort, and divides the list into two sub-lists.\n    In the first sub-list, we compare each element with the next\n    element and exchange them if necessary. The second sub-list\n    is then sorted. Since each sub-list is already sorted,\n    we can move on to the next sub-list.\n    We keep doing this until we reach the end of the list.\n    '''\n    '''\n    This algorithm runs in O(n log n) time\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                # swap\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n",
        "test": "assert     comb_sort([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 569
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if int(math.sqrt(n))**2 == n:\n        return True\n    else:\n        return False\n",
        "test": "assert     dif_Square(9) == True",
        "num_ids": 278
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if len(patterns[i])!= len(colors):\n            return False\n        for j in range(len(patterns[i])):\n            if patterns[i][j] == \"*\":\n                continue\n            else:\n                if patterns[i][j]!= colors[j]:\n                    return False\n    return True\n",
        "test": "assert     is_samepatterns([1, 2, 3], [[1, 2, 3], [1, 2, 3]]) == True",
        "num_ids": 639
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(i,j) for i, j in test_list if j%K == 0]\n",
        "test": "assert find_tuples( [(1,2,3), (2,3,4), (5,5,6)], 3) == [(5,5,6)]",
        "num_ids": 344
    },
    {
        "number": 77,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n",
        "test": "assert     is_Diff(45) == False",
        "num_ids": 158
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print(\"The word is even\")\n    else:\n        print(\"The word is odd\")\n",
        "test": "assert     word_len('spamspamspameggs') == False",
        "num_ids": 2224
    },
    {
        "number": 80,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    for a in range(1,n+1):\n        for b in range(a,n+1):\n            for c in range(b,n+1):\n                for d in range(c,n+1):\n                    if a**3 + b**3 + c**3 + d**3 == a*b*c*d:\n                        count += 1\n    return count\n",
        "test": "assert     tetrahedral_number(3) == 0",
        "num_ids": 321
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n",
        "test": "assert     volume_sphere(3) == math.pi**3 / 3",
        "num_ids": 224
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    i=0\n    res=0\n    while i<len(strr):\n        res=res+ord(strr[i])\n        i+=1\n    return res%26\ndef is_pangram(strr):\n    '''\n    Write a python function to check whether a string is a pangram or not. A pangram is a string which contains all the alphabets.\n    '''\n    i=0\n    p=0\n    while i<len(strr):\n        if get_Char(strr[i])==0:\n            p+=1\n        i+=1\n    if p==26:\n        return True\n    else:\n        return False\nprint(is_pangram(\"The quick brown fox jumps over the lazy dog\"))",
        "test": "assert     get_Char('howdie') == 111, \"the result should be 111\"",
        "num_ids": 311
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n",
        "test": "assert     sequence(2) == 2",
        "num_ids": 2199
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n    \ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)\n",
        "test": "assert     surfacearea_sphere(1) == 4*math.pi",
        "num_ids": 309
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(2*n - 1))//2\n",
        "test": "assert     centered_hexagonal_number(5)     == 22",
        "num_ids": 251
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for k in dict1.keys():\n        new_dict[k] = dict1[k]\n    for k in dict2.keys():\n        if k in new_dict.keys():\n            new_dict[k].append(dict2[k])\n        else:\n            new_dict[k] = [dict2[k]]\n    for k in dict3.keys():\n        if k in new_dict.keys():\n            new_dict[k].append(dict3[k])\n        else:\n            new_dict[k] = [dict3[k]]\n    return new_dict\n",
        "test": "assert     merge_dictionaries_three({},{},{}) == {}, \"Test 1\"",
        "num_ids": 2105
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 454
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = float(N)\n    if n == 0:\n        return 0\n    if n > 0:\n        if abs(n) == 1:\n            return 0\n    return math.floor(n) if n!= 0 else 0\n",
        "test": "assert     closest_num(1) == 0",
        "num_ids": 2268
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n",
        "test": "assert     len_log(['this','is','a','test']) == 4",
        "num_ids": 409
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert     find_substring('CAD', 'CDC') == False",
        "num_ids": 294
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    digits = []\n    while n: \n        digits.append(n % 10)\n        n = n // 10\n    return digits == digits[::-1]\n",
        "test": "assert     is_undulating(5)",
        "num_ids": 267
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return (a**b)\n",
        "test": "assert     power(2,0) == 1",
        "num_ids": 209
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[1]\n",
        "test": "assert     index_minimum([(4, 5), (3, 1), (8, 6), (7, 3)]) == 1",
        "num_ids": 500
    },
    {
        "number": 95,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst)\n    min_length = lst[0]\n    for i in range(length):\n        if len(lst[i]) < len(min_length):\n            min_length = lst[i]\n    return min_length\n",
        "test": "assert     Find_Min_Length([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10]]) == 5",
        "num_ids": 550
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    result = 1\n    for i in range(2, n):\n        if n%i == 0:\n            result = result + 1\n    return result\n    \n",
        "test": "assert     divisor(1) == 1",
        "num_ids": 282
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for i in list1:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return counts\n",
        "test": "assert ",
        "num_ids": 500
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return (numbers[0] * len(numbers)) / float(len(numbers))\n",
        "test": "assert     multiply_num([1]) == 1",
        "num_ids": 296
    },
    {
        "number": 99,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n    if n == 1: \n        return \"1\"\n    return decimal_to_binary(n // 2) + str(n % 2)\n",
        "test": "assert     decimal_to_binary(0)         == '0'",
        "num_ids": 242
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    if num < 0:\n        num *= -1\n    i = 1\n    while i < num:\n        num -= i\n        i += 1\n    return num * -1\n",
        "test": "assert next_smallest_palindrome(99) == 100",
        "num_ids": 2400
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return\n    pivot = arr[0]\n    tail = arr[1:]\n    left = [x for x in tail if x <= pivot]\n    right = [x for x in tail if x > pivot]\n    if k <= len(left):\n        return kth_element(left, k)\n    elif k > len(left) + 1:\n        return kth_element(right, k - len(left) - 1)\n    else:\n        return pivot\n",
        "test": "assert     kth_element([1, 2, 3, 4, 5], 5) == 5",
        "num_ids": 364
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #split on '_' and join with upper case\n    return ''.join(x.title() for x in word.split('_'))\n",
        "test": "assert     snake_to_camel('this_is_snake_case') == 'ThisIsSnakeCase'",
        "num_ids": 471
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (1.0/2.0)*(n+m)\n",
        "test": "assert     eulerian_num(0, 0) == 0",
        "num_ids": 234
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in input_list]\n",
        "test": "assert     sort_sublists( [[1, 2, 3, 4, 5, 6, 7, 8], ['a', 'b', 'c', 'd', 'e'], ['f', 'g', 'h', 'i', 'j', 'k'], ['l','m', 'n']] ) ==     [[1, 2, 3, 4, 5, 6, 7, 8], ['a', 'b', 'c', 'd', 'e'], ['f', 'g', 'h', 'i', 'j', 'k'], ['l','m', 'n']]",
        "num_ids": 969
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i == True:\n                count = count + 1\n    return count\n",
        "test": "assert     count([False, False, False, False]) == 0",
        "num_ids": 211
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return (test_list + test_tup)\n",
        "test": "assert ",
        "num_ids": 176
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n",
        "test": "assert     merge_sorted_list([1,3,5,7], [0,2,4,6], [9,10,15,16]) == [0,1,2,3,4,5,6,7,9,10,15,16]",
        "num_ids": 920
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def rotate(string,n):\n        rotated_string = \"\"\n        for i in range(len(string)):\n            rotated_string += string[(i+n)%len(string)]\n        return rotated_string\n    output = 0\n    for i in range(n):\n        s = rotate(s,1)\n        for j in s:\n            if j == '1':\n                output += 1\n    return output\n",
        "test": "assert     odd_Equivalent('001011', 1) == 3",
        "num_ids": 394
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    newlist = []\n    for i in nestedlist:\n        if type(i) is list:\n            newlist.extend(common_in_nested_lists(i))\n        else:\n            newlist.append(i)\n    return newlist\n",
        "test": "assert     common_in_nested_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]])     == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 741
    },
    {
        "number": 113,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('23') == True",
        "num_ids": 216
    },
    {
        "number": 115,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "test": "assert     empty_dit([{}, {}]) == True",
        "num_ids": 267
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    tuple_to_int = 0\n    for i in nums:\n        tuple_to_int = tuple_to_int * 10 + i\n    return tuple_to_int\n",
        "test": "assert     tuple_to_int((1,2,3,4,5,6)) == 123456, \"Wrong result\"",
        "num_ids": 375
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        try:\n            result.append(float(item))\n        except ValueError:\n            result.append(item)\n    return result\n",
        "test": "assert     list_to_float([]) == [], \"Failed to convert empty list to float\"",
        "num_ids": 639
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "test": "assert     string_to_list('hello world') == ['hello', 'world']",
        "num_ids": 262
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for index in range(len(arr)):\n        if arr[index] == arr[index + 1]:\n            return arr[index]\n",
        "test": "assert     search([0, 1, 2, 3, 3, 3, 4, 4, 4, 4, 4]) == 3",
        "num_ids": 2299
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for tuple1 in list1:\n        list2.append(tuple1[0] * tuple1[1])\n    return max(list2)\n",
        "test": "assert     max_product_tuple([(0,1), (2,4), (3,5), (2,1), (5,4)]) == 20",
        "num_ids": 522
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = []\n    for num in range(1,limit):\n        if num not in amicable_nums:\n            sum_1 = sum(divisors(num))\n            sum_2 = sum(divisors(sum_1))\n            if sum_1 == sum_2 and num!= sum_1:\n                amicable_nums.append(num)\n                amicable_nums.append(sum_1)\n    return sum(amicable_nums)\n",
        "test": "assert     amicable_numbers_sum(200) == 284",
        "num_ids": 349
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a+b*1j\n    return cmath.phase(c)\n",
        "test": "assert     angle_complex(1-1j, 1-1j) == 0",
        "num_ids": 457
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # base case\n    if len(string) <= 1:\n        return 0\n",
        "test": "assert     find_length(\"111000011111110000\") == 0",
        "num_ids": 426
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    a = abs(a)\n    b = abs(b)\n    c = math.gcd(a,b)\n    return a*b/c\n",
        "test": "assert     (sum(1,10) == 10)",
        "num_ids": 226
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(1, 1) == 1",
        "num_ids": 201
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert     long_words(6, ['hello', 'world', 'hi', 'hey', 'yo', 'yes', 'yeah', 'let', 'go']) == []",
        "num_ids": 493
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # sum all the rows of the matrix\n    row_sums = []\n    for row in my_matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    # sum all the columns of the matrix\n    col_sums = []\n    for col in zip(*my_matrix):\n        col_sum = sum(col)\n        col_sums.append(col_sum)\n    # sum the diagonals\n    diag_sum_1 = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    diag_sum_2 = my_matrix[2][0] + my_matrix[1][1] + my_matrix[0][2]\n    return (sum(row_sums) == sum(col_sums) == diag_sum_1 == diag_sum_2)\n    ",
        "test": "assert     magic_square_test([[3,2,4,5],[5,1,6,3],[1,3,6,2],[2,5,8,7],[4,7,2,9]]) == False",
        "num_ids": 1338
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d, key=d.get)\n",
        "test": "assert     max_occurrences([1, 1, 1, 1]) == 1",
        "num_ids": 222
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if str1[i] not in 'aeiouAEIOU':\n            i += 1\n        elif str1[j] not in 'aeiouAEIOU':\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n",
        "test": "assert     reverse_vowels('x') == 'x'",
        "num_ids": 627
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert     tup_string((1, 2, 3, 4, 5)) == '(1, 2, 3, 4, 5)', 'tup_string'",
        "num_ids": 346
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([-x for x in nums])\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 276
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a,b,c,d,e,f = 1,1,1,1,1,1\n    for i in range(1,n):\n        a,b,c,d,e,f = b,c,d,e,f,a+b+c\n    return a\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 247
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for n in nums:\n        if n == 0:\n            count += 1\n    return float(count) / len(nums)\n",
        "test": "assert     zero_count([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "num_ids": 2302
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_1(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_3(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                if n%2 == 0:\n                    n = n/2\n                else:\n                    return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_4(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                if n%2 == 0:\n                    n = n/2\n                else:\n                    if n%2 == 0:\n                        n = n/2\n                    else:\n                        return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_5(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                if n%2 == 0:\n                    n = n/2\n                else:\n                    if n%2 == 0:\n                        n = n/2\n                    else:\n                        if n%2 == 0:\n                            n = n/2\n                        else:\n                            return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_6(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                if n%2 == 0:\n                    n = n/2\n                else:\n                    if n%2 == 0:\n                        n = n/2\n                    else:\n                        if n%2 == 0:\n                            n = n/2\n                        else:\n                            if n%2 == 0:\n                                n = n/2\n                            else:\n                                return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_7(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                if n%2 == 0:\n                    n = n/2\n                else:\n                    if n%2 == 0:\n                        n = n/2\n                    else:\n                        if n%2 == 0:\n                            n = n/2\n                        else:\n                            if n%2 == 0:\n                                n = n/2\n                            else:\n                                if n%2 == 0:\n                                    n = n/2\n                                else:\n                                    return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_8(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                if n%2 == 0:\n                    n = n/2\n                else:\n                    if n%2 == 0:\n                        n = n/2\n                    else:\n                        if n%2 == 0:\n                            n = n/2\n                        else:\n                            if n%2 == 0:\n                                n = n/2\n                            else:\n                                if n%2 == 0:\n                                    n = n/2\n                                else:\n                                    if n%2 == 0:\n                                        n = n/2\n                                    else:\n                                        return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_9(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                if n%2 == 0:\n                    n = n/2\n                else:\n                    if n%2 == 0:\n                        n = n/2\n                    else:\n                        if n%2 == 0:\n                            n = n/2\n                        else:\n                            if n%2 == 0:\n                                n = n/2\n                            else:\n                                if n%2 == 0:\n                                    n = n/2\n                                else:\n                                    if n%2 == 0:\n                                        n = n/2\n                                    else:\n                                        if n%2 == 0:\n                                            n = n/2\n                                        else:\n                                            if n%2 == 0:\n                                                n = n/2\n                                            else:\n                                                return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_10(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(1) == True     ",
        "num_ids": 383
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert     round(circle_circumference(5), 2) == 78.54",
        "num_ids": 123
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([item for sublist in test_list for item in sublist])\n",
        "test": "assert     extract_singly([[1, 2, 3], [4, 5, 6]]) == set([1, 2, 3, 4, 5, 6])",
        "num_ids": 375
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        #if i is even, reverse the array to i/2 elements\n        if i%2 == 0:\n            nums = nums[::-1]\n        #if i is odd, move the i/2 element to the end of array\n        else:\n            for j in range(n//2):\n                if nums[j] > nums[n-1-j]:\n                    nums[j], nums[n-1-j] = nums[n-1-j], nums[j]\n    return nums\n",
        "test": "assert     [1, 2, 3, 4, 5, 6, 7, 8]         == pancake_sort([8, 7, 6, 5, 4, 3, 2, 1])",
        "num_ids": 686
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if len(list1) == len(list2) and len(list1) == len(list3):\n        for i in range(len(list1)):\n            if list1[i] == list2[i] and list1[i] == list3[i]:\n                count += 1\n    return count\n",
        "test": "assert     count_samepair([0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3]) == 4",
        "num_ids": 482
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n=len(Input)\n    if n==1:\n        return 0\n    if Input[0]!=Input[-1]:\n        return find_lists(Input[1:])+1\n    else:\n        return find_lists(Input[1:])\n",
        "test": "assert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12, 13, 14, 15)))     == 3",
        "num_ids": 472
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    max_diff = arr[-1] - arr[0]\n    for i in range(len(arr)-1):\n        if abs(arr[i]-arr[i+1]) > max_diff:\n            max_diff = abs(arr[i]-arr[i+1])\n    return max_diff\n",
        "test": "assert     max_Abs_Diff([1, 0, -1, -3, -20]) == 4, 'test failed'",
        "num_ids": 414
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n",
        "test": "assert     find_solution(1, 2, 0) == None",
        "num_ids": 441
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n",
        "test": "assert     remove_elements([], []) == []",
        "num_ids": 468
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n",
        "test": "assert     [(0, 0), (1, 1), (2, 3), (3, 5), (4, 8), (5, 13), (6, 21), (7, 34), (8, 55)] == [(x, sum_series(x, 2, 3)) for x in range(9)]",
        "num_ids": 423
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    assert s > 0\n    assert l > 0\n    return ((1/2)*s*l)\n",
        "test": "assert     area_polygon(1, 4) == 0.25",
        "num_ids": 251
    },
    {
        "number": 164,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        div = 0\n        for i in range(1, math.ceil(n / 2)):\n            if n % i == 0:\n                div += i\n        return div == n\ndef partition(s): \n    '''\n    Write a function that takes a string and returns the number of ways to partition the string such that all the substrings are a palindrome.\n    '''\n    def is_palindrome(s):\n        return s == s[::-1]\n    def is_palindrome_helper(s, i):\n        if i == len(s):\n            return 1\n        elif i == len(s) - 1:\n            return 1 if is_palindrome(s[i]) else 0\n        else:\n            return is_palindrome_helper(s, i + 1) + is_palindrome_helper(s, i + 2)\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    else:\n        return is_palindrome_helper(s, 0)\ndef min_diff_sub_array(arr):\n    '''\n    Find the minimum difference between any two elements of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return abs(arr[0] - arr[0])\n    else:\n        curr_min = abs(arr[0] - arr[1])\n        curr_min = min(curr_min, abs(arr[0] - arr[len(arr) - 1]))\n        for i in range(len(arr) - 1):\n            curr_min = min(curr_min, abs(arr[i] - arr[i + 1]))\n        return curr_min\ndef string_matching_substring(s, p):\n    '''\n    Write a function to find the length of the longest substring T of a given string (consists of lowercase letters only) such that T is a substring of P.\n    '''\n    if len(s) == 0 or len(p) == 0:\n        return 0\n    elif len(s) < len(p):\n        return -1\n    elif len(s) == len(p):\n        if s == p:\n            return len(p)\n        else:\n            return -1\n    else:\n        start_pos = -1\n        for i in range(len(s) - len(p)):\n            if p == s[i:i + len(p)]:\n                start_pos = i\n                break\n        if start_pos!= -1:\n            return len(p)\n        else:\n            return -1\ndef is_anagram(s, t):\n    '''\n    Write a function to check if two words are anagrams.\n    '''\n    if len(s)!= len(t):\n        return False\n    return sorted(s) == sorted(t)\ndef max_sub_array_of_size_k(k, arr):\n    '''\n    Write a function to find the maximum sum of a subarray of size k.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == k:\n        return max(arr)\n    else:\n        curr_max = arr[0]\n        curr_sum = arr[0]\n        for i in range(1, k):\n            curr_sum += arr[i]\n            curr_max = max(curr_max, curr_sum)\n        return curr_max\ndef count_negative_in_array(arr):\n    '''\n    Write a function that counts the number of negative elements in a given array.\n    '''\n    count = 0\n    for num in arr:\n        if num < 0:\n            count += 1\n    return count\ndef max_cont_sub_array(arr):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        curr_max = arr[0]\n        curr_sum = arr[0]\n        for i in range(1, len(arr)):\n            curr_sum += arr[i]\n            curr_max = max(curr_max, curr_sum)\n            if curr_sum < 0:\n                curr_sum = 0\n        return curr_max\ndef rearrange_digits(arr):\n    '''\n    Write a function that takes an array of digits and returns the array in a new array such that the digits are in ascending order.\n    '''\n    if len(arr) == 0:\n        return arr\n    elif len(arr) == 1:\n        return arr\n    else:\n        new_arr = []\n        for i in range(len(arr) / 2):\n            new_arr.append(arr[i])\n            new_arr.append(arr[len(arr) - 1 - i])\n        return new_arr\ndef sort_by_bitwise(arr):\n    '''\n    Write a function that sorts an array of bits in ascending order.\n    '''\n    if len(arr) == 0:\n        return arr\n    elif len(arr) == 1:\n        return arr\n    else:\n        curr_pos = len(arr) / 2\n        first_half = arr[:curr_pos]\n        second_half = arr[curr_pos:]\n        first_half = sort_by_bitwise(first_half)\n        second_half = sort_by_bitwise(second_half)\n        i = 0\n        j = 0\n        new_arr = []\n        while i < len(first_half) and j < len(second_half):\n            if first_half[i] < second_half[j]:\n                new_arr.append(first_half[i])\n                i += 1\n            else:\n                new_arr.append(second_half[j])\n                j += 1\n        if i < len(first_half):\n            new_arr.extend(first_half[i:])\n        else:\n            new_arr.extend(second_half[j:])\n        return new_arr\ndef find_subarray_sums_to_K(arr, K):\n    '''\n    Write a function that finds the subarray with the sum of elements equal to the given value.\n    '''\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        if arr[0] == K:\n            return [arr[0]]\n        else:\n            return []\n    else:\n        curr_pos = len(arr) / 2\n        first_half = arr[:curr_pos]\n        second_half = arr[curr_pos:]\n        first_half_sums = find_subarray_sums_to_K(first_half, K)\n        second_half_sums = find_subarray_sums_to_K(second_half, K)\n        if len(first_half_sums)!= 0:\n            return first_half_sums\n        else:\n            return second_half_sums\ndef longest_consecutive_subsequence(arr):\n    '''\n    Write a function to find the longest consecutive elements sequence in an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return 1\n    else:\n        curr_max = 1\n        curr_start = 0\n        curr_end = 0\n        curr_pos = 1\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i - 1] + 1:\n                curr_end = i\n            else:\n                curr_end = i - 1\n                curr_pos = max(curr_pos, curr_end - curr_start + 1)\n                curr_start = i\n        curr_pos = max(curr_pos, curr_end - curr_start + 1)\n        return cu",
        "test": "assert     div_sum(6) == False",
        "num_ids": 394
    },
    {
        "number": 165,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize a dictionary with positions of characters and their corresponding positions in the alphabet \n    char_pos_dict = {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26}\n    result = 0\n    # traverse the string \n    for letter in str1:\n        # get the position of the letter in the string \n        pos = char_pos_dict[letter.lower()]\n        # get the corresponding position of the letter in the alphabet \n        result += (26**(pos-1))\n    return result\n",
        "test": "assert     count_char_position('a') == 1",
        "num_ids": 545
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n",
        "test": "assert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0",
        "num_ids": 390
    },
    {
        "number": 167,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(int(math.log(n, 2) + 1))\n",
        "test": "assert     next_power_of_2(7) == 8",
        "num_ids": 270
    },
    {
        "number": 168,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    frequency = 0 \n    for number in a: \n        if number == x: \n            frequency += 1 \n    return frequency \n",
        "test": "assert     frequency([1,2,3,4,3,2,4,5,6],7) == 0",
        "num_ids": 457
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n",
        "test": "assert     sum_range_list([1, 2, 3, 4, 5], 0, 3) == 10",
        "num_ids": 1595
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5+(a**2-a)/2\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6+(a**2-a)/2\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7+(a**2-a)/2\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8+(a**2-a)/2\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a*10+(a**2-a)/2\ndef perimeter_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the length of its sides.\n    '''\n    return a*4\ndef perimeter_cuboctahedron(a):\n    '''\n    Write a function to find the perimeter of a regular cuboctahedron from the length of its sides.\n    '''\n    return a*12\ndef perimeter_trinectahedron(a):\n    '''\n    Write a function to find the perimeter of a regular trinectahedron from the length of its sides.\n    '''\n    return a*6\ndef perimeter_rectangular_prism(a,b):\n    '''\n    Write a function to find the perimeter of a rectangular prism from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_hemicuboctahedron(a):\n    '''\n    Write a function to find the perimeter of a hemicuboctahedron from the length of its sides.\n    '''\n    return 2*(a**2-a)\ndef perimeter_hemicuboctahedron(a):\n    '''\n    Write a function to find the perimeter of a hemicuboctahedron from the length of its sides.\n    '''\n    return 2*(a**2-a)\ndef perimeter_octahedron(a):\n    '''\n    Write a function to find the perimeter of a octahedron from the length of its sides.\n    '''\n    return 6*(a**2-a)\ndef perimeter_icosahedron(a):\n    '''\n    Write a function to find the perimeter of a icosahedron from the length of its sides.\n    '''\n    return 6*(a**2-a)\ndef perimeter_rhombicuboctahedron(a):\n    '''\n    Write a function to find the perimeter of a rhombicuboctahedron from the length of its sides.\n    '''\n    return 6*(a**2-a)\ndef perimeter_rhombicuboctahedron(a):\n    '''\n    Write a function to find the perimeter of a rhombicuboctahedron from the length of its sides.\n    '''\n    return 6*(a**2-a)\ndef perimeter_octaedron(a):\n    '''\n    Write a function to find the perimeter of a octaedron from the length of its sides.\n    '''\n    return 8*(a**2-a)\ndef perimeter_icosaedron(a):\n    '''\n    Write a function to find the perimeter of a icosaedron from the length of its sides.\n    '''\n    return 8*(a**2-a)\ndef perimeter_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a tetrahedron from the length of its sides.\n    '''\n    return 4*(a**2-a)\ndef perimeter_cube(a):\n    '''\n    Write a function to find the perimeter of a cube from the length of its sides.\n    '''\n    return 6*(a**2-a)\ndef perimeter_octahedron(a):\n    '''\n    Write a function to find the perimeter of a octahedron from the length of its sides.\n    '''\n    return 8*(a**2-a)\ndef perimeter_dodecaedron(a):\n    '''\n    Write a function to find the perimeter of a dodecaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_trinectaedron(a):\n    '''\n    Write a function to find the perimeter of a trinectaedron from the length of its sides.\n    '''\n    return 10*(a**2-a)\ndef perimeter_hexaedron(a):\n    '''\n    Write a function to find the perimeter of a hexaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_heptaedron(a):\n    '''\n    Write a function to find the perimeter of a heptaedron from the length of its sides.\n    '''\n    return 14*(a**2-a)\ndef perimeter_octaedron(a):\n    '''\n    Write a function to find the perimeter of an octaedron from the length of its sides.\n    '''\n    return 14*(a**2-a)\ndef perimeter_dodecaedron(a):\n    '''\n    Write a function to find the perimeter of a dodecaedron from the length of its sides.\n    '''\n    return 16*(a**2-a)\ndef perimeter_icosaedron(a):\n    '''\n    Write a function to find the perimeter of a icosaedron from the length of its sides.\n    '''\n    return 16*(a**2-a)\ndef perimeter_cuboctaedron(a):\n    '''\n    Write a function to find the perimeter of a cuboctaedron from the length of its sides.\n    '''\n    return 18*(a**2-a)\ndef perimeter_tetrachaedron(a):\n    '''\n    Write a function to find the perimeter of a tetrachaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_pentachaedron(a):\n    '''\n    Write a function to find the perimeter of a pentachaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_hexachaedron(a):\n    '''\n    Write a function to find the perimeter of a hexachaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_heptachaedron(a):\n    '''\n    Write a function to find the perimeter of a heptachaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_octachaedron(a):\n    '''\n    Write a function to find the perimeter of a octachaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_decachaedron(a):\n    '''\n    Write a function to find the perimeter of a decachaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_octahedral_prism(a,b,c):\n    '''\n    Write a function to find the perimeter of a octahedral prism from the length of its sides.\n    '''\n    return 2*(a+b+c)\ndef perimeter_hexahedral_prism(a,b,c):\n    '''\n    Write a function to find the perimeter of a hexahedral prism from the length of its sides.\n    '''\n    return 2*(a+b+c)\ndef perimeter_tetrahedral_prism(a,b,c):\n    '''\n    Write a function to find the perimeter of a tetrahedral prism from the length of its sides.\n    '''\n    return 2*(a+b+c)\ndef perimeter_octahedral_prism(a,b,c):\n    '''\n    Write a function to find the perimeter of an octahedral prism from the length of its sides.\n    '''",
        "test": "assert     perimeter_pentagon(0) == 0",
        "num_ids": 215
    },
    {
        "number": 172,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count+=1\n    return count\n",
        "test": "assert     count_occurance('red is the color of std') == 1",
        "num_ids": 2241
    },
    {
        "number": 222,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Your code here\n    return True\n",
        "test": "assert     check_type([1,2,3])",
        "num_ids": 310
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == x or arr[1] == x\n    if arr[0] == x:\n        return is_majority(arr[1:], n-1, x)\n    elif arr[n-1] == x:\n        return is_majority(arr[:n-1], n-1, x)\n    else:\n        return is_majority(arr[:n-1], n-1, x) or is_majority(arr[n-1:], n-1, x)\n",
        "test": "assert     is_majority([1, 2, 2, 2, 2, 3, 4, 5, 6, 6, 6], 5, 2) == True",
        "num_ids": 505
    },
    {
        "number": 224,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while(n):\n        n&=(n-1)\n        count+=1\n    return count\n",
        "test": "assert     (count_Set_Bits(4) == 1)",
        "num_ids": 336
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([x for index,x in enumerate(str) if index%2==0])\n",
        "test": "assert     odd_values_string(\"Python  \") == 'Python  '",
        "num_ids": 331
    },
    {
        "number": 227,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < c and b < a:\n        return b\n    else:\n        return c\n",
        "test": "assert     min_of_three(4,5,6) == 4",
        "num_ids": 332
    },
    {
        "number": 228,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n=bin(n)\n    a=n[2:]\n    a=a[::-1]\n    a=int(a)\n    if l<=a<=r:\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(0,0,0) == True",
        "num_ids": 554
    },
    {
        "number": 229,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        for j in range(i, len(arr)):\n            if arr[j] < 0:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    return arr\n",
        "test": "assert     re_arrange_array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 3) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "num_ids": 929
    },
    {
        "number": 230,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str2 += char\n        else:\n            str2 += str1[i]\n    return str2\n",
        "test": "assert     replace_blank('hello', 'a') == 'hello','replace_blank(string, char) is not working'",
        "num_ids": 371
    },
    {
        "number": 232,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n    \ndef smallest_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    return heapq.nsmallest(n, list1)\n    \ndef larg_mnum(list1,m):\n    '''\n    Write a function that takes in a list and an integer m and returns a list containing the m smallest items from the list.\n    '''\n    return heapq.nsmallest(m, list1)\n",
        "test": "assert     larg_nnum([5,4,3,2,1],3)==[5,4,3]",
        "num_ids": 545
    },
    {
        "number": 233,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    V=(math.pi*r**2)/4\n    A=V*h\n    return A\n",
        "test": "assert     lateralsuface_cylinder(0,2) == 0",
        "num_ids": 285
    },
    {
        "number": 234,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(2) == 8, \"test1 of the function failed\"",
        "num_ids": 252
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    for i in range(32):\n        if n & (1 << i):\n            count = count + 1\n    return count\n",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 2152
    },
    {
        "number": 237,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for el in test_list:\n        if el in occurence_dict:\n            occurence_dict[el] += 1\n        else:\n            occurence_dict[el] = 1\n    return occurence_dict\n",
        "test": "assert check_occurences([(1,2),(2,3),(3,4)]) == {(1,2):1, (2,3):1, (3,4):1}",
        "num_ids": 1278
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return sum(1 for i in range(len(str)) if str[i-1]!= '0' and str[i]!= '0')\n",
        "test": "assert     number_of_substrings('a') == 1",
        "num_ids": 353
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0 \n    if m > 0:\n        if m <= n:\n            total = m ** n\n        else:\n            total = m ** (n/2)\n    else:\n        total = 0 \n    return total\n",
        "test": "assert     get_total_number_of_sequences(8,2) == 8",
        "num_ids": 305
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        list1[-1] = list2\n    else:\n        print(\"Cannot do this!\")\n    return list1\n",
        "test": "assert     replace_list([1, 2, 3], []) == [1, 2, 3]",
        "num_ids": 613
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "test": "assert     count_charac(\"a\") == 1",
        "num_ids": 230
    },
    {
        "number": 244,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N<1):\n        return -1\n    if(N==1):\n        return 2\n    else:\n        return int((math.sqrt(N)+1)**2)\n",
        "test": "assert     next_Perfect_Square(16) == 25",
        "num_ids": 221
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            i += 1\n        else:\n            j -= 1\n    return arr[i] + max_sum(arr[:i]) + max_sum(arr[i:])\n",
        "test": "assert ",
        "num_ids": 367
    },
    {
        "number": 246,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**0.5\n",
        "test": "assert     babylonian_squareroot(1) == 1",
        "num_ids": 404
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    mat = [[0 for i in range(len(str))] for j in range(len(str))]\n    # it is a 2D matrix\n    for i in range(len(str)):\n        mat[i][i] = 1\n        if i < len(str) - 1 and str[i] == str[i + 1]:\n            mat[i][i + 1] = 2\n    max = 1\n    for i in range(2, len(str)):\n        for j in range(len(str) - i):\n            if str[j] == str[j + i] and mat[j + 1][j + i - 1] < max:\n                mat[j][j + i] = mat[j + 1][j + i - 1] + 2\n                max = mat[j][j + i]\n            elif str[j] == str[j + i]:\n                mat[j][j + i] = mat[j + 1][j + i - 1] + 1\n    return max\n",
        "test": "assert     lps('bb') == 1",
        "num_ids": 1377
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 194
    },
    {
        "number": 249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    set3 = set1.intersection(set2)\n    return list(set3)\n",
        "test": "assert ",
        "num_ids": 212
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "test": "assert         count_X(('a', 'a', 'b', 'a', 'b'), 'a') == 3",
        "num_ids": 195
    },
    {
        "number": 251,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "test": "assert     insert_element([1,2,3],1) == [1,1,2,3]",
        "num_ids": 461
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for i in numbers:\n        polar.append(abs(i))\n    return polar\n",
        "test": "assert     convert(-1-2j) ==    (-1.0, 2.0, -cmath.pi)",
        "num_ids": 477
    },
    {
        "number": 253,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n",
        "test": "assert     count_integer([1, 2, 'a', 'a']) == 2",
        "num_ids": 391
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [ tuple(l[i:i+n]) for i in range(len(l)-n+1) ]\n    \nprint(combinations_colors(['red', 'blue', 'green', 'yellow'], 2))\nprint(combinations_colors(['red', 'blue', 'green', 'yellow'], 3))\nprint(combinations_colors(['red', 'blue', 'green', 'yellow'], 4))\nprint(combinations_colors(['red', 'blue', 'green', 'yellow'], 5))\nprint(combinations_colors(['red', 'blue', 'green', 'yellow'], 6))\n",
        "test": "assert     combinations_colors([1,2,3,4,5], 5) == [(1,2,3,4,5)]",
        "num_ids": 682
    },
    {
        "number": 256,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    return 0\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 366
    },
    {
        "number": 257,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     swap_numbers(2,3) == (3,2)",
        "num_ids": 169
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return max(test_tup1[1], test_tup2[1])\n    elif test_tup1[0] > test_tup2[0]:\n        return test_tup1[1]\n    else:\n        return test_tup2[1]\n",
        "test": "assert     maximize_elements([1, 2, 3], [4, 5]) == [1, 4], 'Test 4'",
        "num_ids": 1003
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return newman_williams(n, True)\n",
        "test": "assert ",
        "num_ids": 160
    },
    {
        "number": 261,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Do the math, in this case, it's a division operation, so the result will be a float.\n    result = [float(test_tup1[i]) / float(test_tup2[i]) for i in range(len(test_tup1))]\n    \n    # Make sure the result is of type tuple\n    result = tuple(result)\n    \n    return result\n",
        "test": "assert     division_elements((2,4,6,8,10),(1,2,3,4,5))     == (2/1, 4/2, 6/3, 8/4, 10/5)",
        "num_ids": 451
    },
    {
        "number": 262,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L < 1:\n        return (None, None)\n    elif L == 1:\n        return (list1[:1], list1[1:])\n    else:\n        return (list1[:L], list1[L:])\n",
        "test": "assert     split_two_parts([1,2,3,4,5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 370
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        raise ValueError(\"Age can't be negative\")\n",
        "test": "assert     dog_age(4) == 13",
        "num_ids": 383
    },
    {
        "number": 265,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # We need a list to store the result, to add it to the output list\n    result = []\n    # We need to go through the list one element at a time, so we iterate through the list\n    for i in range(0, len(S), step):\n        # We add the resulting list to the output list\n        result.append(S[i:i+step])\n    # And return the list\n    return result\n",
        "test": "assert     list_split([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 565
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "test": "assert     lateralsurface_cube(1)    ==    6",
        "num_ids": 279
    },
    {
        "number": 267,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(n+1):\n        if i % 2!= 0:\n            total += i**2\n    return total\n",
        "test": "assert         square_Sum(0)         == 0",
        "num_ids": 268
    },
    {
        "number": 268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_star_num(n - 1) + find_star_num(n - 2)\n",
        "test": "assert     find_star_num(7)    ==     ' * * * * * * * *', 'WRONG!'",
        "num_ids": 418
    },
    {
        "number": 269,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 314
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for index, num in enumerate(arr):\n        if index % 2 == 0 and num % 2 == 0:\n            even_sum += num\n    return even_sum\n",
        "test": "assert     (sum_even_and_even_index([1,2,3,4,5]) == 0)",
        "num_ids": 453
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(0, n + 1):\n        if (i % 2 == 0):\n            power = i ** 5\n            total = total + power\n    return total\n",
        "test": "assert     even_Power_Sum(0) == 0",
        "num_ids": 316
    },
    {
        "number": 272,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [elem[-1] for elem in test_list]\n",
        "test": "assert     rear_extract([(1,2),(3,4)]) == [2,4]",
        "num_ids": 346
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for index, element in enumerate(test_tup1):\n        result += (element - test_tup2[index],)\n    return result\n",
        "test": "assert ",
        "num_ids": 349
    },
    {
        "number": 274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return 2 * even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n",
        "test": "assert     even_binomial_Coeff_Sum(20) == 11796",
        "num_ids": 305
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return ((3.14*r**2)*h)\n",
        "test": "assert     volume_cylinder(0,0) == 0.0",
        "num_ids": 281
    },
    {
        "number": 277,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    output = {}\n    for key,val in dict.items():\n        if val >= n:\n            output[key] = val\n    return output\n",
        "test": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 2) == {'b': 2, 'c': 3, 'd': 4, 'e': 5}",
        "num_ids": 418
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    result = 0\n    for x in test_tup[1:]:\n        if test_tup[0] < x:\n            result += 1\n    return result\n",
        "test": "assert         (count_first_elements((10,9,8,7,6,5,4,3,2,1)) == 0), \"Fail: function count_first_elements\"",
        "num_ids": 561
    },
    {
        "number": 279,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    result = 0\n    for i in range(n):\n        result += pow(n - i, 2)\n    return result\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 356
    },
    {
        "number": 280,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "test": "assert     ( sequential_search( [ 1, 2, 3, 4, 5 ], 6) == (False, -1) )",
        "num_ids": 371
    },
    {
        "number": 281,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i) > 1:\n            return False\n    return True\n",
        "test": "assert     all_unique([1,2,3,4,5]) is True",
        "num_ids": 343
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if len(nums1) > len(nums2):\n        big = nums1\n        small = nums2\n    else:\n        big = nums2\n        small = nums1\n    result = []\n    # iterate over the smaller list\n    for i in xrange(len(small)):\n        if i < len(big):\n            if big[i] == small[i]:\n                continue\n            else:\n                result.append(big[i])\n        else:\n            result.append(big[i])\n    return result\n",
        "test": "assert     sub_list([],[]) == []",
        "num_ids": 400
    },
    {
        "number": 283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    n_map = {}\n    for d in n:\n        if d not in n_map:\n            n_map[d] = 1\n        else:\n            n_map[d] += 1\n",
        "test": "assert     validate(123456) == True, \"True\"",
        "num_ids": 675
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all([i==element for i in list])\n",
        "test": "assert     check_element([1,2,3,1],2) == False",
        "num_ids": 288
    },
    {
        "number": 285,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = re.compile(r'.*(ab|aba|abb|bab|bba|bbb).*')\n    if regex.match(text):\n        return True\n    else:\n        return False\n    \ndef text_match_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = re.compile(r'.*(abab|aba|abb|baba|abbb|bab|bba).*')\n    if regex.match(text):\n        return True\n    else:\n        return False\n    \ndef text_match_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    regex = re.compile(r'.*(abaa|aba|abbb|baba|abb|bbaa|bbb).*')\n    if regex.match(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three(\"abb\") == True",
        "num_ids": 323
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -1\n    if n < k:\n        return max_sum\n    for i in range(k):\n        max_sum = max(max_sum, sum(a))\n        a.insert(0,a.pop())\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated( [-1, -2, 3], 2, 3 ) == -1",
        "num_ids": 419
    },
    {
        "number": 287,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n**2 + square_Sum(n - 2)\n",
        "test": "assert     square_Sum(0) == 0     #n = 0",
        "num_ids": 237
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = [len(l) for l in list1]\n    return lengths\n",
        "test": "assert     max_length([]) == []",
        "num_ids": 500
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return k\n    else:\n        return (count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k))\n",
        "test": "assert     count_no_of_ways(5, 3) == 15",
        "num_ids": 662
    },
    {
        "number": 292,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n/m\n",
        "test": "assert     find(3,3)    ==    1",
        "num_ids": 218
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**(1/2)\n    return s*2\n    \ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
        "test": "assert     otherside_rightangle(9, 6) == 21",
        "num_ids": 366
    },
    {
        "number": 294,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for index in range(1,len(listval)):\n        if listval[index] > maxval:\n            maxval = listval[index]\n    return maxval\n",
        "test": "assert     max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 379
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    divisor_list = []\n    for i in range(1, int(number/2) + 1):\n        if number % i == 0:\n            divisor_list.append(i)\n    return sum(divisor_list)\n",
        "test": "assert     sum_div(1) == 0",
        "num_ids": 332
    },
    {
        "number": 296,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n    else:\n        mid = len(arr)//2\n        left = arr[0:mid]\n        right = arr[mid:]\n        \n        # count left and right inversions\n        left_count = get_Inv_Count(left)\n        right_count = get_Inv_Count(right)\n        \n        # count merge inversion counts\n        merge_count = 0\n        i,j,k = 0,0,0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n                merge_count += (len(left)-i)\n            k += 1\n        \n        # check for any elements remaining in left or right\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        \n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n        \n        return left_count + right_count + merge_count\n        \n",
        "test": "assert     get_Inv_Count( [1,4,3,2,5]) == 3, \"get_Inv_Count should be 3 for [1,4,3,2,5]\"",
        "num_ids": 676
    },
    {
        "number": 297,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for element in list1:\n        if isinstance(element, list):\n            list2.extend(flatten_list(element))\n        else:\n            list2.append(element)\n    return list2\n",
        "test": "assert     [] == flatten_list([])",
        "num_ids": 645
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    t = 0\n    for st in stdata:\n        t += st[2]\n    return t\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    t = 1000000\n    for st in stdata:\n        t = min(t,st[2])\n    return t\ndef average_aggregate(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    t = 0\n    for st in stdata:\n        t += st[2]\n    return t/len(stdata)\ndef max_min_compare(l):\n    '''\n    Write a function that takes a list of tuples and returns a list of the maximum aggregate, \n    the minimum aggregate, and the average aggregate in that order.\n    '''\n    tmax = 0\n    tmin = 1000000\n    tavg = 0\n    for st in l:\n        if st[2] > tmax:\n            tmax = st[2]\n        if st[2] < tmin:\n            tmin = st[2]\n        tavg += st[2]\n    tavg /= len(l)\n    return [tmax, tmin, tavg]\n",
        "test": "assert     max_aggregate([(1,1), (1,2), (1,3), (1,4)]) == [1, 4]",
        "num_ids": 639
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2**n):\n            if bin(i)[2:].zfill(n)[-1] == bin(i)[2:].zfill(n)[:1]:\n                count += 1\n        return count\n",
        "test": "assert     count_binary_seq(2) == 2",
        "num_ids": 282
    },
    {
        "number": 301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n",
        "test": "assert     dict_depth({'a':1,'b':2,'c':{'d':3,'e':4,'f':5}}) == 3",
        "num_ids": 2216
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in ranges[index] :\n        for j in rotations :\n            if arr[i+j]==1 :\n                return True\n    return False\n",
        "test": "assert     find_Element([2,3,4,5,6,7,8], [], [], 3) == 5",
        "num_ids": 2332
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n",
        "test": "assert     start_withp(['i', 'love', 'peter']) ==     ['peter', 'peter']",
        "num_ids": 475
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if a[index] < a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k - 1))\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n",
        "test": "assert     max_sum_increasing_subseq(",
        "num_ids": 507
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n",
        "test": "assert     colon_tuplex((1,2,3,4),0,0) == ()",
        "num_ids": 436
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) > N or len(nums2) > N:\n        return None\n    n1 = nums1[:N]\n    n2 = nums2[:N]\n    ans = [n1[i]*n2[i] for i in range(N)]\n    return max(ans)\n",
        "test": "assert     large_product([], [], 3) == []",
        "num_ids": 674
    },
    {
        "number": 309,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(1,2) == 2",
        "num_ids": 195
    },
    {
        "number": 310,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_of_characters = ()\n    for char in str1:\n        tuple_of_characters += (char,)\n    return tuple_of_characters\n",
        "test": "assert     string_to_tuple('abc') == ('a', 'b', 'c')",
        "num_ids": 285
    },
    {
        "number": 311,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n and not n & 1:\n        n >>= 1\n        count += 1\n    if count: \n        n |= (1 << count)\n    return n\n",
        "test": "assert     set_left_most_unset_bit(1) == 1",
        "num_ids": 303
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3 * math.pi * r**2 * h\n",
        "test": "assert     volume_cone(1,1) == math.pi/3",
        "num_ids": 316
    },
    {
        "number": 388,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 1;\n    while(x <= n):\n        x = x << 1\n    return x >> 1\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 309
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 334
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_\n",
        "test": "assert     add_string([1,2,3,4], '%s') == ['1', '2', '3', '4']",
        "num_ids": 396
    },
    {
        "number": 391,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {}\n        d[l1[i]][l2[i]] = l3[i]\n    return d\n",
        "test": "assert     convert_list_dictionary([], [], []) == {}",
        "num_ids": 735
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #Using bfs to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    #Here I'm using the n = 2^x + y (x, y = 0, 1, 2,..., 31)\n    #The idea is to start from the 1st level (n = 1), and recursively call the function\n    #f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    #If this function returns a larger value, then this is the new max sum.\n    #Otherwise this is the same as the previous function\n    #So this function will return the max sum of all level n\n",
        "test": "assert     get_max_sum(1000) == 810",
        "num_ids": 470
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_len_list = input_list[0]\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_len_list = input_list[i]\n    return max_len_list\n",
        "test": "assert     max_length_list([1, 2, 3, 4, 5]) == 5",
        "num_ids": 404
    },
    {
        "number": 394,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #split the tuple into a list\n    l = list(test_tup)\n    #create a set to store unique elements\n    s = set()\n    #check if each element in the list is in the set\n    for i in l:\n        if i in s:\n            return False\n        s.add(i)\n    return True\n",
        "test": "assert     check_distinct(()) == True",
        "num_ids": 413
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d.keys():\n        if d[i] == 1:\n            return i\n    return -1\n",
        "test": "assert     first_non_repeating_character('a') == 'a'",
        "num_ids": 2375
    },
    {
        "number": 396,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    return False\n",
        "test": "assert     check_char('a') == True",
        "num_ids": 280
    },
    {
        "number": 397,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num = [a,b,c]\n    num.sort()\n    return num[1]\n",
        "test": "assert     median_numbers(1,2,3) == 2",
        "num_ids": 323
    },
    {
        "number": 398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    pass\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 318
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = test_tup1[0] ^ test_tup2[0]\n    y = test_tup1[1] ^ test_tup2[1]\n    z = x ^ y\n    return (z, z)\n",
        "test": "assert     bitwise_xor((0, 0), (0, 0)) == (0, 0)",
        "num_ids": 426
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for key in test_list:\n        if key in freq_dict:\n            freq_dict[key] += 1\n        else:\n            freq_dict[key] = 1\n    return len(freq_dict)\n",
        "test": "assert     extract_freq(['a', 'a', 'a', 'a', 'a']) == 1",
        "num_ids": 635
    },
    {
        "number": 401,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"tuple lengths do not match\")\n    return tuple(x + y for x, y in zip(test_tup1, test_tup2))\n",
        "test": "assert     add_nested_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)",
        "num_ids": 559
    },
    {
        "number": 404,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "test": "assert         minimum(3,2)         == 2, \"Incorrect output\"",
        "num_ids": 209
    },
    {
        "number": 405,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in range(len(tuplex)):\n        if tuplex[x] == tuple1:\n            return True\n    return False\n",
        "test": "assert     check_tuplex(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f')) == False",
        "num_ids": 360
    },
    {
        "number": 406,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x & 1\n",
        "test": "assert     find_Parity(1) == True",
        "num_ids": 377
    },
    {
        "number": 407,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # base case\n    if n < 10:\n        return n\n    # split into digits\n    digits = []\n    while n:\n        digits.append(n % 10)\n        n = n // 10\n    \n    # re-arrange digits\n    result = []\n    for i in range(len(digits)-1, -1, -1):\n        while len(result) < i + 1:\n            result.append(0)\n        result[i] = max(result[i], digits[i])\n    \n    # convert to integer\n    result = int(''.join(str(x) for x in result))\n    \n    # return\n    return result\n",
        "test": "assert     rearrange_bigger(1234) == 4321",
        "num_ids": 506
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    res = []\n    i,j,k = 0,0,k\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] + nums2[j] < 0:\n            i += 1\n        elif nums1[i] + nums2[j] > 0:\n            j += 1\n        else:\n            res.append((nums1[i], nums2[j]))\n            i += 1\n            j += 1\n        if len(res) == k:\n            break\n    return res\n",
        "test": "assert     k_smallest_pairs([1,7,11], [2,4,6], 0) == []",
        "num_ids": 1512
    },
    {
        "number": 409,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x: x[0]*x[1])\n    return list1[0][0]*list1[0][1]\n",
        "test": "assert min_product_tuple([(5,5), (5,5), (5,5), (5,5), (5,5), (5,5)]) == 25",
        "num_ids": 459
    },
    {
        "number": 410,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for val in listval:\n        if min > val:\n            min = val\n    return min\n",
        "test": "assert     min_val([1,2,3,4,5]) == 1",
        "num_ids": 417
    },
    {
        "number": 411,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #TODO: write your code here\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n",
        "test": "assert     snake_to_camel('') == ''",
        "num_ids": 565
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 377
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n",
        "test": "assert     extract_nth_element([(1,2,3), (4,5,6), (7,8,9)], 6) == (1,2,3)",
        "num_ids": 499
    },
    {
        "number": 414,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False\n",
        "test": "assert         overlapping([1,2,3], [1,2]) == True",
        "num_ids": 419
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    if not arr:\n        return\n    \n    curr_max = arr[0]\n    curr_min = arr[0]\n    \n    for i in xrange(1, len(arr)):\n        if arr[i] < 0:\n            temp = curr_max\n            curr_max = curr_min\n            curr_min = temp\n            \n        curr_max = max(curr_max * arr[i], arr[i])\n        curr_min = min(curr_min * arr[i], arr[i])\n    \n    return curr_max\n    \n    \nif __name__ == \"__main__\":\n    arr = [5, 0, -2, 2, 3, -1, -4, 2, 1, 0]\n    print max_Product(arr)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     [-4, -4, -4] == max_Product([-4, -1, -4])",
        "num_ids": 2401
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # List of common element\n    Common = []\n    # For each element\n    for x in Input:\n        # Get the first element of tuple\n        First = x[0]\n        # Check if its not present in list\n        if First not in Common:\n            # Add it to list\n            Common.append(First)\n    # Print list\n    print(Common)",
        "test": "assert     group_tuples([(1,2),(1,3),(1,4),(3,4),(2,4),(3,4),(3,4),(3,4)]) == (1,3,4)",
        "num_ids": 731
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    count = 0\n    n = len(lst)\n    for i in lst:\n        if len(i) > count:\n            count = len(i)\n            ans = i\n    print ans\n",
        "test": "assert         Find_Max([1,2,3,4,5,6,7,8,9,10])==10",
        "num_ids": 430
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_numbers = 0\n    for number in list1:\n        rounded = round(number)\n        sum_of_numbers += rounded\n    print sum_of_numbers*len(list1)\n",
        "test": "assert     round_and_sum([1.23, 3.4, 5.6, 7.8, 9.9, 11.0, 13.5]) == 71.0",
        "num_ids": 589
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # cube_sum = 0\n    # for i in range(0, n):\n    #     if i%2 == 0:\n    #         cube_sum = cube_sum + i**3\n    # return cube_sum\n    # return reduce(lambda x, y: x + y**3, range(0, n, 2))\n    return sum(range(0, n, 2))**3\n    \nprint(cube_Sum(100))\n",
        "test": "assert (cube_Sum(50) == 1385176970080)",
        "num_ids": 359
    },
    {
        "number": 421,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    temp = ''\n    for i in test_tup:\n        temp = temp + str(i)\n        temp = temp + \",\"\n    return temp[:-1]\n",
        "test": "assert         concatenate_tuple(('a', 'b', 'c'))        == 'a,b,c'",
        "num_ids": 430
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n\n    \nn = 10\nprint(\"Average of cubes of first 10 natural numbers is: \", find_Average_Of_Cube(n))\n",
        "test": "assert     find_Average_Of_Cube(30) == 303825",
        "num_ids": 295
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(x[-1] for x in test_tuple)\n",
        "test": "assert     extract_rear(('hello', 'world', 'abc', 'xyz')) == ('world', 'abc')",
        "num_ids": 525
    },
    {
        "number": 425,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    start = 0\n    end = 0\n    count = 0\n    while end < len(list1):\n        if x in list1[start:end+1]:\n            count += 1\n        start += 1\n        end += 1\n    return count\n",
        "test": "assert     (count_element_in_list([], 1) == 0)",
        "num_ids": 581
    },
    {
        "number": 426,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2!= 0]\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 376
    },
    {
        "number": 427,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = dt.split('-')\n    return d[2]+'-'+d[1]+'-'+d[0]\n",
        "test": "assert     change_date_format('2016-08-12') == '12-08-2016'",
        "num_ids": 366
    },
    {
        "number": 428,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3 * h + 1\n    while h > 0:\n        for i in range(h, n):\n            j = i\n            while j >= h and my_list[j] < my_list[j - h]:\n                my_list[j], my_list[j - h] = my_list[j - h], my_list[j]\n                j -= h\n        h //= 3\n    return my_list\n",
        "test": "assert     shell_sort( [1,5,4,3,2,7,6,8,9] ) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 558
    },
    {
        "number": 429,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n",
        "test": "assert     and_tuples((1, 2), (3, 4))     ==     None",
        "num_ids": 403
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = -b/(2*a)\n    y = a*x**2 + b*x + c\n    return (x,y)\n",
        "test": "assert     parabola_directrix(1, 1, 5) == (0, 1)",
        "num_ids": 360
    },
    {
        "number": 431,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n",
        "test": "assert     common_element(['hello', 'world'], ['hello', 'world']) == True",
        "num_ids": 384
    },
    {
        "number": 432,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2.0 * height\n",
        "test": "assert         median_trapezium(1,1,1)    ==    1",
        "num_ids": 363
    },
    {
        "number": 433,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return sorted(arr)[-1] > number\n",
        "test": "assert     check_greater([1,2,3,4,5,6,7,8,9],5)",
        "num_ids": 364
    },
    {
        "number": 434,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab{1,3}')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab{1,}')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab{,3}')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab{2,}')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab{,2}')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab{1,3}?',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab{1,}?',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,3}b{1,}',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab{1,3}?',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,3}?b{1,}',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{3,}?b{1,}',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{3,}?b{1,}',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,3}?b{2,}',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,3}?b{1,2}',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,3}?b{1,3}',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,3}?b{3,}',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,3}?b{3,}',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,3}?b{3,}',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,3}?b{2,}',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,3}?b{2,3}',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,3}?b{2,4}',re.IGNORECASE)\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.com",
        "test": "assert     text_match_one(\"b\") == False",
        "num_ids": 257
    },
    {
        "number": 435,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert     last_Digit(1212) == 2",
        "num_ids": 221
    },
    {
        "number": 436,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return[i for i in list1 if i < 0]\nprint(neg_nos([-1,-2,3,4,5,6,7,8,9,-10,-11,-12,-13,-14,-15]))\n",
        "test": "assert     neg_nos([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]",
        "num_ids": 362
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if ord(i) % 2 == 0])\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 293
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for item in test_list:\n        count += test_list.count((item,item[::-1]))\n    return count\n",
        "test": "assert     count_bidirectional([]) == 0",
        "num_ids": 573
    },
    {
        "number": 439,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(x) for x in L]))\n",
        "test": "assert     multiple_to_single([1, 2, 3, 4, 5]) == 12345",
        "num_ids": 352
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions=[]\n    pattern=re.compile(r'[\\.\\!\\?][\\s]*(\\w+)[\\s]*(before|after|preceded|preceded by|followed by|following|follows|follows\\.?|[\\s]*at[\\s]*[A-Z][A-Za-z]*[\\s]*[\\.\\?][\\s]*)')\n    matches=pattern.findall(text)\n    for m in matches:\n        if m[1]=='':\n            positions.append((m[0],0))\n        else:\n            positions.append((m[1],len(m[0])+1))\n    return positions\ndef find_adverb_positions_manual(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions=[]\n    \n    pattern=re.compile(r'[\\.\\!\\?][\\s]*(\\w+)[\\s]*(before|after|preceded|preceded by|followed by|following|follows|follows\\.?|[\\s]*at[\\s]*[A-Z][A-Za-z]*[\\s]*[\\.\\?][\\s]*)')\n    matches=pattern.findall(text)\n    for m in matches:\n        if m[1]=='':\n            positions.append((m[0],0))\n        else:\n            positions.append((m[1],len(m[0])+1))\n    return positions\ndef find_adverb_positions_manual_2(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions=[]\n    \n    pattern=re.compile(r'[\\.\\!\\?][\\s]*(\\w+)[\\s]*(before|after|preceded|preceded by|followed by|following|follows|follows\\.?|[\\s]*at[\\s]*[A-Z][A-Za-z]*[\\s]*[\\.\\?][\\s]*)')\n    matches=pattern.findall(text)\n    for m in matches:\n        if m[1]=='':\n            positions.append((m[0],0))\n        else:\n            positions.append((m[1],len(m[0])+1))\n    return positions\ndef find_adverb_positions_manual_3(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions=[]\n    \n    pattern=re.compile(r'[\\.\\!\\?][\\s]*(\\w+)[\\s]*(before|after|preceded|preceded by|followed by|following|follows|follows\\.?|[\\s]*at[\\s]*[A-Z][A-Za-z]*[\\s]*[\\.\\?][\\s]*)')\n    matches=pattern.findall(text)\n    for m in matches:\n        if m[1]=='':\n            positions.append((m[0],0))\n        else:\n            positions.append((m[1],len(m[0])+1))\n    return positions\ndef find_adverb_positions_manual_4(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions=[]\n    \n    pattern=re.compile(r'[\\.\\!\\?][\\s]*(\\w+)[\\s]*(before|after|preceded|preceded by|followed by|following|follows|follows\\.?|[\\s]*at[\\s]*[A-Z][A-Za-z]*[\\s]*[\\.\\?][\\s]*)')\n    matches=pattern.findall(text)\n    for m in matches:\n        if m[1]=='':\n            positions.append((m[0],0))\n        else:\n            positions.append((m[1],len(m[0])+1))\n    return positions\ndef find_adverb_positions_manual_5(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions=[]\n    \n    pattern=re.compile(r'[\\.\\!\\?][\\s]*(\\w+)[\\s]*(before|after|preceded|preceded by|followed by|following|follows|follows\\.?|[\\s]*at[\\s]*[A-Z][A-Za-z]*[\\s]*[\\.\\?][\\s]*)')\n    matches=pattern.findall(text)\n    for m in matches:\n        if m[1]=='':\n            positions.append((m[0],0))\n        else:\n            positions.append((m[1],len(m[0])+1))\n    return positions\ndef find_adverb_positions_manual_6(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions=[]\n    \n    pattern=re.compile(r'[\\.\\!\\?][\\s]*(\\w+)[\\s]*(before|after|preceded|preceded by|followed by|following|follows|follows\\.?|[\\s]*at[\\s]*[A-Z][A-Za-z]*[\\s]*[\\.\\?][\\s]*)')\n    matches=pattern.findall(text)\n    for m in matches:\n        if m[1]=='':\n            positions.append((m[0],0))\n        else:\n            positions.append((m[1],len(m[0])+1))\n    return positions\ndef find_adverb_positions_manual_7(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions=[]\n    \n    pattern=re.compile(r'[\\.\\!\\?][\\s]*(\\w+)[\\s]*(before|after|preceded|preceded by|followed by|following|follows|follows\\.?|[\\s]*at[\\s]*[A-Z][A-Za-z]*[\\s]*[\\.\\?][\\s]*)')\n    matches=pattern.findall(text)\n    for m in matches:\n        if m[1]=='':\n            positions.append((m[0],0))\n        else:\n            positions.append((m[1],len(m[0])+1))\n    return positions\ndef find_adverb_positions_manual_8(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions=[]\n    \n    pattern=re.compile(r'[\\.\\!\\?][\\s]*(\\w+)[\\s]*(before|after|preceded|preceded by|followed by|following|follows|follows\\.?|[\\s]*at[\\s]*[A-Z][A-Za-z]*[\\s]*[\\.\\?][\\s]*)')\n    matches=pattern.findall(text)\n    for m in matches:\n        if m[1]=='':\n            positions.append((m[0],0))\n        else:\n            positions.append((m[1],len(m[0])+1))\n    return positions\ndef find_adverb_positions_manual_9(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions=[]\n    \n    pattern=re.compile(r'[\\.\\!\\?][\\s]*(\\",
        "test": "assert     find_adverb_position('We were walking down the street') == [('We', 1), ('were', 1), ('down', 1), ('street', 1)]",
        "num_ids": 604
    },
    {
        "number": 441,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**2 * 6\n",
        "test": "assert     surfacearea_cube(3) == 54",
        "num_ids": 256
    },
    {
        "number": 442,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    l = len(nums)\n    pos = 0\n    for i in range(l):\n        if nums[i] > 0:\n            pos += 1\n    return pos*1.0/l\n",
        "test": "assert     positive_count([1, 2, -3, 4]) == 0.75",
        "num_ids": 480
    },
    {
        "number": 443,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #  Using max function  \n    # list1= [-1,2,-3,4,-5,6]\n    # print(max(list1))\n    max_negative = min(list1)\n    if max_negative < 0:\n        return max_negative\n    else:\n        print(\"You need to enter a list with negative numbers\")\n        return None\n",
        "test": "assert     largest_neg([1,2,3,-1,4]) == -1",
        "num_ids": 648
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return test_list\n    return [(e[0], e[1]) for e in test_list[:K]]\n",
        "test": "assert ",
        "num_ids": 382
    },
    {
        "number": 445,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    res = ()\n    for i, j in zip(test_tup1, test_tup2):\n        res += (i*j,)\n    return res\n",
        "test": "assert     index_multiplication((1,2,3), (3,4,5)) == (3, 8, 15)",
        "num_ids": 642
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum(tup.count(l) for l in lst)\n",
        "test": "assert     count_Occurrence((5, 3, 2, 5, 3, 1, 3, 1, 3), []) == 0",
        "num_ids": 605
    },
    {
        "number": 447,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    nums = [i**3 for i in nums]\n    return nums\n",
        "test": "assert     cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 8, 27, 64, 125, 216, 343, 512, 729], 'Cube of individual digits'",
        "num_ids": 241
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 1:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n",
        "test": "assert     cal_sum(2) == 4",
        "num_ids": 169
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    try:\n        # convert to list\n        strlist = list(str)\n    except:\n        return None\n    if l < len(strlist):\n        return strlist[:l]\n    else:\n        return strlist\n",
        "test": "assert     extract_string(['hi', 'ha', 'hello', 'hey'], 2) == ['hi', 'ha']",
        "num_ids": 509
    },
    {
        "number": 451,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n",
        "test": "assert     remove_whitespaces('hey') == 'hey'",
        "num_ids": 243
    },
    {
        "number": 452,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # print actual_cost,sale_amount\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(1000,1000) == 0",
        "num_ids": 235
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    t = 0\n    for x in range(1, int(math.sqrt(n)) + 1) :\n        if n % x == 0 :\n            if x % 2 == 0 :\n                t = t + x\n            else :\n                t = t + n / x\n    return t\n",
        "test": "assert     sumofFactors(10) == 12",
        "num_ids": 327
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b([a-z]+[a-z]*[z]+)\\b', text)\n",
        "test": "assert ",
        "num_ids": 163
    },
    {
        "number": 455,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(1) == True",
        "num_ids": 494
    },
    {
        "number": 456,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 332
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst)==0:\n        return None\n    if len(lst)==1:\n        return lst[0]\n    else:\n        if len(lst[0])<len(lst[1]):\n            return lst[0]\n        else:\n            return lst[1]\n",
        "test": "assert     (Find_Min([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]),    'incorrect'",
        "num_ids": 672
    },
    {
        "number": 458,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(1,2) == 2",
        "num_ids": 164
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1.isupper():\n        return remove_uppercase(str1[1:])\n    else:\n        return str1\n",
        "test": "assert     remove_uppercase('hello') == 'hello'",
        "num_ids": 324
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[i][0] for i in range(len(lst))] \n",
        "test": "assert     Extract([ [1, 2, 3], [4, 5], [6], [7, 8, 9] ]) == [1, 4, 6, 7]",
        "num_ids": 505
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    i = 0\n    for letter in str:\n        if letter.isupper():\n            i += 1\n    return i\n",
        "test": "assert     (upper_ctr('CodingNOMAADS') == 7), \"Test 3 FAILED\"",
        "num_ids": 320
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    combinations = []\n    for i in range(len(list1)):\n        comb = list1[i]\n        temp = list1[:i] + list1[i+1:]\n        for subcomb in combinations_list(temp):\n            combinations.append(comb + subcomb)\n    return combinations\n",
        "test": "assert     combinations_list([1,2,3,4,5]) == [[],1,[1],2,[1,2],3,[1,3],4,[1,4],5,[1,5],",
        "num_ids": 1940
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = 1\n    for i in range(len(arr)):\n        max_prod = max(max_prod, 1)\n        for j in range(i+1, len(arr)):\n            max_prod = max(max_prod, arr[j] * arr[i])\n",
        "test": "assert     max_subarray_product([-2, -3, -4]) == 6",
        "num_ids": 440
    },
    {
        "number": 464,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key]!= n:\n            return False\n    return True\n",
        "test": "assert not check_value({'a':1,'b':2,'c':3,'d':4}, 3)",
        "num_ids": 446
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: val for key, val in dict1.items() if val}\n",
        "test": "assert     drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}",
        "num_ids": 609
    },
    {
        "number": 468,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    #sliding window\n    max_sofar = min_sofar = 1\n    for i in range(n):\n        max_sofar = max(max_sofar * arr[i], min_sofar * arr[i])\n        min_sofar = min(min_sofar * arr[i], max_sofar * arr[i])\n    return max_sofar\n",
        "test": "assert     max_product([-2, 0, -1]) == 0, \"max_product fails\"",
        "num_ids": 624
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return tuple()\n    else:\n        return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n",
        "test": "assert     add_pairwise(('w', 'v', 'u')) == ('vw', 'vu')",
        "num_ids": 2554
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return (arr[0] * find_remainder(arr[1:], n)) % n\n    \n    ",
        "test": "assert     find_remainder([1, 2, 3, 4, 5], 7) == 6",
        "num_ids": 386
    },
    {
        "number": 472,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l) \n    l1 = []\n    for i in range(0,n-1): \n        l1.append(l[i+1]-l[i]) \n    for i in l1: \n        if (i!=1 and i!=-1): \n            return 0\n    return 1\n",
        "test": "assert     check_Consecutive([1,2,3,4,5,6,7,8,9,10])",
        "num_ids": 448
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect = []\n    for element1 in test_list1:\n        for element2 in test_list2:\n            if element1 == element2:\n                intersect.append(element1)\n    return intersect\n",
        "test": "assert     tuple_intersection([(1,2),(2,3),(1,3)],[(1,2),(2,3),(3,4)]) == [(1,2),(2,3)]",
        "num_ids": 613
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char('Hello','h','H') == 'Hello'",
        "num_ids": 337
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n",
        "test": "assert     sort_counter(Counter({'v':3, 'b':3, 'a':1, 'b':2})) == [('a', 1), ('b', 2), ('b', 3), ('v', 3)]",
        "num_ids": 446
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n",
        "test": "assert     big_sum([1, -1, 0, 0, 1, -1]) == 2",
        "num_ids": 267
    },
    {
        "number": 477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower('JOKe') == False",
        "num_ids": 146
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]')\n    return pattern.sub(\"\",str1)\n",
        "test": "assert     remove_lowercase(\"\") == \"\"",
        "num_ids": 310
    },
    {
        "number": 479,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n > 0) :\n        return n%10\n    else :\n        return 0\n",
        "test": "assert     first_Digit(11)    == 1",
        "num_ids": 179
    },
    {
        "number": 554,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    newlist=[]\n    for i in range(0,len(list)):\n        if(list[i]%2!=0):\n            newlist.append(list[i])\n    return newlist\n",
        "test": "assert     Split([]) == []",
        "num_ids": 777
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    i = 0\n    total = 0\n    while i < n :\n        total = total + (i * i * i)\n        i = i + 1\n    return total\n",
        "test": "assert     difference(0) == 0",
        "num_ids": 239
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(N) : \n        for j in range(i+1,N) :\n            if ((A[i] ^ A[j]) & 0b1) :\n                count += 1 \n    return count \n",
        "test": "assert     find_Odd_Pair([0,1,2,3,4,5,6,7,8,9],6) ==     0",
        "num_ids": 505
    },
    {
        "number": 557,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([x.swapcase() for x in string])\n",
        "test": "assert         toggle_string('A')    == 'a','should be a'",
        "num_ids": 300
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digits1 = list(str(n1))\n    digits2 = list(str(n2))\n    return sum(int(x) - int(y) for x, y in zip(digits1, digits2))\n",
        "test": "assert     digit_distance_nums(1,1)     ==     0",
        "num_ids": 361
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = max_so_far = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
        "test": "assert     max_sub_array_sum([1], 1) == 1",
        "num_ids": 1554
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list()\n    union_list.extend(test_tup1)\n    union_list.extend(test_tup2)\n",
        "test": "assert ",
        "num_ids": 483
    },
    {
        "number": 562,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for l in lst:\n        if len(l)>max_len:\n            max_len = len(l)\n    return max_len\n",
        "test": "assert     Find_Max_Length([]) == 0",
        "num_ids": 534
    },
    {
        "number": 563,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\\"(.*)\\\"', text)\n",
        "test": "assert     extract_values('\"I\\'m a sentence\"') == ['I\\'m a sentence']",
        "num_ids": 2403
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]!=arr[j]):\n                count+=1\n    return count\n",
        "test": "assert     count_Pairs([1,2,3,4,5,6,7,8,9],0) == 0",
        "num_ids": 579
    },
    {
        "number": 565,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert     (split('string')==['s', 't', 'r', 'i', 'n', 'g'])",
        "num_ids": 395
    },
    {
        "number": 566,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(x) for x in str(n))\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 201
    },
    {
        "number": 567,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        return list1[0] < list1[1] and issort_list(list1[1:])\n",
        "test": "assert     issort_list([]) == True, \"issort_list([]) == True\"",
        "num_ids": 429
    },
    {
        "number": 568,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert     empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 164
    },
    {
        "number": 569,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    for i in list1:\n        sublists.append(sorted(i))\n    return sublists\n",
        "test": "assert         sort_sublists([['a', 'b', 'c', 'd'], ['e', 'f', 'g'], ['h', 'i']]) == [['a', 'b', 'c', 'd'], ['e', 'f', 'g'], ['h', 'i']]",
        "num_ids": 486
    },
    {
        "number": 572,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert     two_unique_nums([1,2,3,3,3,4,4,5]) ==     [1,2,3,4,5]",
        "num_ids": 624
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for i in list_data:\n        if i not in unique_numbers:\n            unique_numbers.append(i)\n    result = 1\n    for i in unique_numbers:\n        result = result * i\n    return result\n",
        "test": "assert     unique_product([1,2,3,4]) == 24",
        "num_ids": 452
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n",
        "test": "assert     round(surfacearea_cylinder(5,4),2) == 813.46, \"Wrong!\"",
        "num_ids": 295
    },
    {
        "number": 576,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False\n    for i in range(0,len(B)-len(A)+1):\n        if B[i:i+len(A)] == A:\n            return True\n    return False\n",
        "test": "assert     is_Sub_Array([1,2,3], [1,2]) == False",
        "num_ids": 509
    },
    {
        "number": 577,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    last_digit = fact % 10\n    return last_digit\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 343
    },
    {
        "number": 578,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    out = []\n    for i in range(0, len(list1)):\n        out.append(list1[i])\n        out.append(list2[i])\n        out.append(list3[i])\n    return out\n",
        "test": "assert     interleave_lists([1,2,3],['a', 'b', 'c'],['x', 'y', 'z']) == [1, 'a', 'x', 2, 'b', 'y', 3, 'c', 'z']",
        "num_ids": 586
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_tups = []\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n",
        "test": "assert     (find_dissimilar((\"a\", \"b\", \"c\"), (\"a\", \"b\", \"d\")) == [\"c\"]), \\",
        "num_ids": 725
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc((test_tuple[0], even_fnc((test_tuple[1], test_tuple[2]))))\n",
        "test": "assert     (even_ele((1,(2,3,4),5,6),",
        "num_ids": 376
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n    \ndef volume(l,h): \n    '''\n    Write a python function to find the volume of a cube with a given length and height.\n    '''\n    return l*h\n    \ndef volume_of_sphere(r):\n    '''\n    Write a python function to find the volume of a sphere with a given radius.\n    '''\n    return 4/3*3.14*r**3\n    \ndef volume_of_sphere(r):\n    '''\n    Write a python function to find the volume of a sphere with a given radius.\n    '''\n    return 4/3*3.14*r**3\n    \ndef volume_of_sphere(r):\n    '''\n    Write a python function to find the volume of a sphere with a given radius.\n    '''\n    return 4/3*3.14*r**3\n    \ndef average(l):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return (l[0]+l[1])/2\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef minimum(l):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    return min(l[0],l[1],l[2])\n    \ndef minimum(l):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    return min(l[0],l[1],l[2])\n    \ndef minimum(l):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    return min(l[0],l[1],l[2])\n    \ndef minimum(l):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    return min(l[0],l[1],l[2])\n    \ndef minimum(l):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    return min(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(l[0],l[1],l[2])\n    \ndef maximum(l):\n    '''\n",
        "test": "assert     surface_Area(9,2) == 72",
        "num_ids": 251
    },
    {
        "number": 582,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \ndef lcs(a, b, len_a, len_b):\n    '''\n    Given two strings, compute the longest common sub-string.\n    '''\n    table = [[0] * (len_b + 1) for i in xrange(len_a + 1)]\n",
        "test": "assert     (my_dict({}) == True)",
        "num_ids": 290
    },
    {
        "number": 583,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 1\n    if num == 1:\n        return 1\n    return catalan_number(num-1) + 2*catalan_number(num-2)\n",
        "test": "assert     catalan_number(3) == 5",
        "num_ids": 288
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    import re\n    pat = re.compile('[^a-zA-Z]+ly$',re.I)\n    res = re.search(pat,text)\n    if res:\n        print res.span()\n",
        "test": "assert ",
        "num_ids": 444
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    import heapq\n    heap = []\n    for value,price in items:\n        heapq.heappush(heap,(price,value))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap)[1] for i in range(n)]\n",
        "test": "assert     (expensive_items(['a','b','c','d','e','f'],6) == ['f','e','d','b','a']), 'fail the test'",
        "num_ids": 599
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:].reverse()\n",
        "test": "assert     split_Arr([1,2,3,4], 5) == [[1,2,3,4]]",
        "num_ids": 469
    },
    {
        "number": 587,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     (list_tuple([1,2,3]) == tuple([1,2,3]))",
        "num_ids": 287
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n",
        "test": "assert     big_diff([9,4,3,2,1]) == 8",
        "num_ids": 277
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        # Loop over all positive integers and check if their squares are between\n        # a and b.\n        for x in range(a, b+1):\n            # Find the square root of x, using Newton's method.\n            y = x ** 0.5\n            # Check if x is indeed a perfect square.\n            if y * y == x:\n                print(x)\n    else:\n        # Same thing as above, but in the other direction.\n        for x in range(b, a+1):\n            y = x ** 0.5\n            if y * y == x:\n                print(x)\n",
        "test": "assert [4, 5, 6, 7, 8, 9, 10, 11]",
        "num_ids": 447
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=abs(x)\n    y=abs(y)\n    if y>=x:\n        if y>x:\n            x1=2*x**2\n            y1=x**2+y**2\n            y2=x**2-y**2\n            x3=x**2-y**2\n            y3=x**2+y**2\n            print('Rectangular coordinates: ',x1/2,x2/2,y1/2,y2/2,y3/2,x3/2)\n    else:\n        print('The value of y is less than or equal to x.')\n    return None\n    \n    \ndef polar_pow(x,y,n):\n    '''\n    Write a function to compute x^n (mod p) from \n    polar coordinates.\n    '''\n    p=int(input('Enter the value of p: '))\n    x=abs(x)\n    y=abs(y)\n    n=abs(n)\n    if p<=1:\n        print('The value of p should be greater than 1.')\n    else:\n        if y**n>p:\n            print('The value of the modulo value is less than p')\n        else:\n            pow1=1\n            pow2=1\n            pow3=1\n            pow4=1\n            a=1\n            while a<=n:\n                if a%2==0:\n                    pow1=pow1*pow1\n                    pow2=pow2*pow1\n                    pow3=pow3*pow2\n                    pow4=pow4*pow3\n                    a+=1\n                else:\n                    pow1=pow1*pow1\n                    pow2=pow2*pow1\n                    pow3=pow3*pow2\n                    pow4=pow4*pow3\n                    a+=1\n            print('The modulo value is: ',pow4%p)\n            return None\n    return None\n    \n",
        "test": "assert     polar_rect(0.5, cmath.pi/6) == (0.5, 0.0)",
        "num_ids": 642
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "test": "assert     swap_List([1]) == [1], \"WRONG\"",
        "num_ids": 993
    },
    {
        "number": 592,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binom_coeff = [0 for i in range(k+1)] \n    binom_coeff[0] = 1\n    for i in range(1,n+1): \n        j = min(i,k) \n        while j>0: \n            binom_coeff[j] = binom_coeff[j] + binom_coeff[j-1] \n            j -= 1\n    return binom_coeff[k] \n",
        "test": "assert     binomial_Coeff(5,3) == 10",
        "num_ids": 350
    },
    {
        "number": 593,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+',r'',ip)\n",
        "test": "assert     removezero_ip(\"8.8.8.8\") == \"8.8.8.8\"",
        "num_ids": 376
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i%2==0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return even_list[0]-odd_list[0]\n",
        "test": "assert     diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0",
        "num_ids": 500
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            str1,str2 = swap(str1,str2,i)\n            count +=1\n    return count\n",
        "test": "assert     min_Swaps('00100','00100100') == 0",
        "num_ids": 733
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total = 0\n    for elem in tuple_list:\n        total += sys.getsizeof(elem)\n    return total\n",
        "test": "assert     tuple_size(range(1,5)) == 4",
        "num_ids": 2243
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    count = 0\n    while count < k:\n        if arr1[i] < arr2[j]:\n            if i == len(arr1) - 1:\n                return arr2[j]\n            i += 1\n            count += 1\n        elif arr1[i] > arr2[j]:\n            if j == len(arr2) - 1:\n                return arr1[i]\n            j += 1\n            count += 1\n        elif arr1[i] == arr2[j]:\n            return arr1[i]\n        else:\n            return arr2[j]\n",
        "test": "assert     find_kth([1,2,3,4,5], [4,5,6,7], 4) == 4",
        "num_ids": 865
    },
    {
        "number": 598,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    length = len(str(number))\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n    return True if sum == number else False\n",
        "test": "assert     armstrong_number(153)",
        "num_ids": 232
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(number+1)), sum(range(number+1)) / number\n",
        "test": "assert     sum_average(5) == (15, 3)",
        "num_ids": 276
    },
    {
        "number": 600,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n",
        "test": "assert     is_Even(2) is True",
        "num_ids": 192
    },
    {
        "number": 602,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None\n",
        "test": "assert     first_repeated_char('sol') == None",
        "num_ids": 324
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return get_ludic(n-1) + get_ludic(n-2) + get_ludic(n-3)\n",
        "test": "assert get_ludic(5) == [3, 4, 5]",
        "num_ids": 519
    },
    {
        "number": 604,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n",
        "test": "assert     reverse_words('the sky is blue')    == 'blue is sky the',     'blue is sky the'",
        "num_ids": 307
    },
    {
        "number": 605,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(2) == True",
        "num_ids": 279
    },
    {
        "number": 606,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n",
        "test": "assert     radian_degree(0) == 0",
        "num_ids": 2175
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if not pattern:\n        return '', 0, 0\n    \n    p = re.compile(pattern)\n    m = p.search(text)\n    if m:\n        start = m.start()\n        end = m.end()\n        return text[start:end], start, end\n    else:\n        return '', 0, 0\n",
        "test": "assert     find_literals('hello', 'hello') == ('hello', 0, 5)",
        "num_ids": 414
    },
    {
        "number": 608,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1] * (n+1)\n    for k in range(1, n+1):\n        for i in range(1, k):\n            bell[k] += bell[k-i]\n    return bell[n]\n    \n    \ndef fibonacci_number(n): \n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    fibonacci = [1, 1]\n    for k in range(2, n+1):\n        fibonacci.append(fibonacci[k-2] + fibonacci[k-1])\n    return fibonacci[n]\n    \n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 342
    },
    {
        "number": 610,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [x for i, x in enumerate(list1) if i!= L]\n",
        "test": "assert     remove_kth_element([0,1,2,3,4,5],0) == [1,2,3,4,5]",
        "num_ids": 409
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = 0\n    for list in test_list:\n        if list[N] > max_val:\n            max_val = list[N]\n    return max_val\n",
        "test": "assert     max_of_nth([[1,2,3],[2,4,5]], 2) == 5",
        "num_ids": 531
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return None\n    merged = []\n    while lst:\n        merged.append([lst[0][0], lst[0][1]])\n        lst = lst[1:]\n    return merged\n",
        "test": "assert     [ [2, \"apple\"], [1, \"pear\"] ] == merge( [ [2, \"apple\"], [1, \"pear\"] ] )",
        "num_ids": 557
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for i in range(len(test_list)):\n        cum_sum.append(sum(test_list[:i+1]))\n    return cum_sum\n",
        "test": "assert     cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]",
        "num_ids": 560
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        average = sum(tup) / len(tup)\n        averages.append(average)\n    return averages\n",
        "test": "assert     average_tuple( ((1,2,3),(4,5,6),(7,8,9))) == [2.5, 4.5, 6.5], 'wrong answer'",
        "num_ids": 582
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((t1 % t2) for t1, t2 in zip(test_tup1, test_tup2))\n",
        "test": "assert     (tuple_modulo((-3,-5),(-3,5)) == (2,2))",
        "num_ids": 450
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    return min(min_Jumps(steps, d-1), steps-d+1)\n",
        "test": "assert     min_Jumps([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384], 17) == 4",
        "num_ids": 359
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list_div = []\n    for i in range(len(nums1)):\n        list_div.append(nums1[i]/nums2[i])\n    return list_div\n",
        "test": "assert ",
        "num_ids": 228
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return ''\n",
        "test": "assert     move_num('') == ''",
        "num_ids": 460
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    for i in range(0,len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] % a[j] == 0:\n                if a[j] % a[i] == 0:\n                    max_size = max(max_size, a[j]/a[i])\n    return max_size\n",
        "test": "assert     [1,2,3,4,5,6,7,8,9,10,11] == largest_subset([1,2,3,4,5,6,7,8,9,10,11])",
        "num_ids": 1325
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    elif n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    else:\n        left_median = get_median(arr1[:n/2], arr2[:n/2], n/2)\n        right_median = get_median(arr1[n/2:], arr2[n/2:], n/2)\n        return (left_median + right_median) / 2\n",
        "test": "assert     get_median([], [], 0)    == None",
        "num_ids": 664
    },
    {
        "number": 623,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n",
        "test": "assert     nth_nums([1,2,3,4],2) == [1,4,9,16]",
        "num_ids": 359
    },
    {
        "number": 624,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for i in range(len(string)):\n        if string[i].isupper():\n            return True\n    return False\n",
        "test": "assert     is_upper('A')",
        "num_ids": 191
    },
    {
        "number": 625,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return newList\n    else:\n        newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n        return newList\n",
        "test": "assert     ( [1,2,3] == swap_List([3,2,1]) ), \"test 1\"",
        "num_ids": 437
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0 :\n        return \"Invalid Input\"\n    else :\n        #Formula for area of triangle inscribed in semicircle \n        return (3 * r**2)/4\n",
        "test": "assert     triangle_area(10) == 0.848541226686856",
        "num_ids": 335
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)\n    if end == 1:\n        return 0\n    if array[end-1] - array[start] == end - start - 1:\n        return array[start] + 1\n    if array[end-1] - array[start] == end - start:\n        return array[start] + 1\n    if array[end-1] - array[start] > end - start:\n        return find_First_Missing(array,start,end-1)\n    else:\n        return find_First_Missing(array,end,end+1)\n",
        "test": "assert ",
        "num_ids": 587
    },
    {
        "number": 628,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \n    \ndef generate_url(string):\n    '''\n    Write a function to generate a URL with three parameters\n    '''\n    return string + '?type=xml'\n    \ndef add_query_param(string):\n    '''\n    Write a function to add a query string to an URL\n    '''\n    return string + '?key=' + query_string\n    \ndef remove_empty_lines(string):\n    '''\n    Write a function to remove empty lines from the given string\n    '''\n    return \"\\n\".join(line for line in string.splitlines() if line.strip())\n    \ndef get_number_of_lines(string):\n    '''\n    Write a function to get the number of lines in the given string\n    '''\n    return len(string.splitlines())\n    \ndef remove_duplicate_lines(string):\n    '''\n    Write a function to remove duplicate lines from the given string\n    '''\n    return \"\\n\".join(dict.fromkeys(string.splitlines()).keys())\n    \ndef remove_duplicate_lines_2(string):\n    '''\n    Write a function to remove duplicate lines from the given string\n    '''\n    return \"\\n\".join(set(string.splitlines()))\n    \ndef remove_duplicate_lines_3(string):\n    '''\n    Write a function to remove duplicate lines from the given string\n    '''\n    return \"\\n\".join(sorted(set(string.splitlines()), key=string.splitlines().index))\n    \ndef replace_word(string, old_word, new_word):\n    '''\n    Write a function to replace the old word with the new word in the given string\n    '''\n    return string.replace(old_word, new_word)\n    \ndef get_time_of_today():\n    '''\n    Write a function to get the time of the day in the following format:\n    11:11 PM or 11:11 AM\n    '''\n    return datetime.today().strftime('%I:%M %p')\n    \ndef get_time_of_today_2():\n    '''\n    Write a function to get the time of the day in the following format:\n    11:11 PM or 11:11 AM\n    '''\n    return datetime.today().strftime('%I:%M %p').lower()\n    \ndef get_day_of_today():\n    '''\n    Write a function to get the day of the week in the following format:\n    Monday, Tuesday,...\n    '''\n    return datetime.today().strftime('%A')\n    \ndef get_day_of_today_2():\n    '''\n    Write a function to get the day of the week in the following format:\n    Monday, Tuesday,...\n    '''\n    return datetime.today().strftime('%a')\n    \ndef get_date_of_today():\n    '''\n    Write a function to get the date of today in the following format:\n    2nd March\n    '''\n    return datetime.today().strftime('%d %B')\n    \ndef get_date_of_today_2():\n    '''\n    Write a function to get the date of today in the following format:\n    2nd March\n    '''\n    return datetime.today().strftime('%d %b')\n    \ndef get_month_of_today():\n    '''\n    Write a function to get the month of today in the following format:\n    2 March\n    '''\n    return datetime.today().strftime('%B')\n    \ndef get_month_of_today_2():\n    '''\n    Write a function to get the month of today in the following format:\n    2 March\n    '''\n    return datetime.today().strftime('%b')\n    \ndef get_year_of_today():\n    '''\n    Write a function to get the year of today in the following format:\n    2016\n    '''\n    return datetime.today().strftime('%Y')\n    \ndef get_year_of_today_2():\n    '''\n    Write a function to get the year of today in the following format:\n    2016\n    '''\n    return datetime.today().strftime('%y')\n    \ndef get_date_of_today_3():\n    '''\n    Write a function to get the date of today in the following format:\n    2nd March 2016\n    '''\n    return datetime.today().strftime('%d %B %Y')\n    \ndef get_date_of_today_4():\n    '''\n    Write a function to get the date of today in the following format:\n    2nd March 2016\n    '''\n    return datetime.today().strftime('%d %b %Y')\n    \ndef is_leap_year(year):\n    '''\n    Write a function to check if a given year is a leap year or not\n    '''\n    return (year % 4 == 0 and year % 100!= 0) or year % 400 == 0\n    \ndef get_days_in_month(month, year):\n    '''\n    Write a function to get the days in a month of a given year\n    '''\n    return monthrange(year, month)[1]\n    \ndef get_days_in_month_2(month, year):\n    '''\n    Write a function to get the days in a month of a given year\n    '''\n    return calendar.monthrange(year, month)[1]\n    \ndef get_first_day_of_the_month(month, year):\n    '''\n    Write a function to get the first day of the month of a given year\n    '''\n    return datetime(year, month, 1).strftime('%d')\n    \ndef get_first_day_of_the_month_2(month, year):\n    '''\n    Write a function to get the first day of the month of a given year\n    '''\n    return datetime(year, month, 1).strftime('%a')\n    \ndef get_last_day_of_the_month(month, year):\n    '''\n    Write a function to get the last day of the month of a given year\n    '''\n    return datetime(year, month, get_days_in_month(month, year)).strftime('%d')\n    \ndef get_last_day_of_the_month_2(month, year):\n    '''\n    Write a function to get the last day of the month of a given year\n    '''\n    return datetime(year, month, get_days_in_month_2(month, year)).strftime('%d')\n    \ndef get_last_day_of_the_month_3(month, year):\n    '''\n    Write a function to get the last day of the month of a given year\n    '''\n    return datetime(year, month, calendar.monthrange(year, month)[1]).strftime('%d')\n    \ndef get_last_day_of_the_month_4(month, year):\n    '''\n    Write a function to get the last day of the month of a given year\n    '''\n    return datetime(year, month, calendar.monthrange(year, month)[1]).strftime('%a')\n    \ndef get_last_day_of_the_month_5(month, year):\n    '''\n    Write a function to get the last day of the month of a given year\n    '''\n    return datetime(year, month, calendar.monthrange(year, month)[1]).strftime('%a')\n    \ndef get_last_day_of_the_month_6(month, year):\n    '''\n    Write a function to get the last day of the month of a given year\n    '''\n    return datetime(year, month, calendar.monthrange(year, month)[1]).strftime('%a')\n    \ndef get_last_day_of_the_month_7(month, year):\n    '''\n    Write a function to get the last day of the month of a given year\n    '''\n    return datetime(year, month, calendar.monthrange(year, month)[1]).strftime('%a')\n    \ndef get_last_day_of_the_month_8(month, year):\n    '''\n    Write a function to get the last day of the month of a given year\n    '''",
        "test": "assert     replace_spaces(\"hello\") == \"hello\"",
        "num_ids": 303
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for item in list:\n        if item % 2 == 0:\n            result.append(item)\n    return result\n",
        "test": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 4, 6, 8]",
        "num_ids": 572
    },
    {
        "number": 630,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not isinstance(ele, tuple):\n        raise TypeError(\"Expected tuple\")\n    return [(x,y) for x in range(ele[0]-1, ele[0]+2) for y in range(ele[1]-1, ele[1]+2) if 0 <= x <= 9 and 0 <= y <= 9 and (x,y)!= ele]\n    \ndef create_image(word, start_position, stop_position):\n    '''\n    Create an image of the word with x and y coordinates as given by the start_position and stop_position tuples.\n    '''\n    if not isinstance(start_position, tuple) or not isinstance(stop_position, tuple):\n        raise TypeError(\"Expected tuples\")\n    img = [[\" \" for i in range(10)] for j in range(10)]\n    for x in range(start_position[0], stop_position[0]+1):\n        for y in range(start_position[1], stop_position[1]+1):\n            img[x][y] = word[(x-start_position[0])*10+(y-start_position[1])]\n    return img\n    \ndef move(coordinate, direction):\n    '''\n    Move the coordinate either upward or downward according to the given direction.\n    '''\n    if not isinstance(coordinate, tuple):\n        raise TypeError(\"Expected tuple\")\n    if direction not in [\"up\", \"down\"]:\n        raise ValueError(\"Wrong direction\")\n    return (coordinate[0], (coordinate[1]+{\"up\": -1, \"down\": 1}[direction]))\n",
        "test": "assert         isinstance(adjac((0, 1)), list)",
        "num_ids": 366
    },
    {
        "number": 631,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n",
        "test": "assert     replace_spaces(\"\") == \"\"",
        "num_ids": 339
    },
    {
        "number": 632,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    l=len(num_list)\n    for i in range(l):\n        if num_list[i]==0:\n            num_list.append(num_list[i])\n            num_list.remove(num_list[i])\n    return num_list\n",
        "test": "assert     [0, 0, 0, 0, 0, 0, 0, 0] == move_zero([0, 0, 0, 0, 0, 0, 0, 0])",
        "num_ids": 768
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(0,n-1) :\n        for j in range(i+1,n) :\n            xor_sum = xor_sum ^ (arr[i] ^ arr[j])\n    return xor_sum\n",
        "test": "assert     (pair_xor_Sum([1,2,3,4,5],7) == 0), \"Failed: pair_xor_Sum\"",
        "num_ids": 440
    },
    {
        "number": 635,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for val in iterable:\n        hq.heappush(h, val)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     [1, 2, 3, 4, 5, 6, 7, 8, 9]    ==    heap_sort([9, 7, 6, 5, 4, 3, 2, 1, 8])",
        "num_ids": 557
    },
    {
        "number": 637,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost==sale_amount\ndef noprofit_loss(actual_cost,sale_amount):\n    return actual_cost>sale_amount\ndef noprofit_profit(actual_cost,sale_amount):\n    return actual_cost<sale_amount\n",
        "test": "assert     noprofit_noloss(1,3) == False, \"Test 2 failed\"",
        "num_ids": 385
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    A = 35.74\n    B = 0.6215\n    C = 35.75\n    d = 0.4275\n",
        "test": "assert     wind_chill(60,0) == 122",
        "num_ids": 2272
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total += len(name)\n    return total\n",
        "test": "assert     sample_nam(['Ava', 'Mo', 'Kennedy', 'Mo', 'Mo']) == 12",
        "num_ids": 4125
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items[0] == '(':\n        items = items[1:]\n    items = items[:len(items)-1]\n    return items\n",
        "test": "assert     remove_parenthesis('(a)') == 'a'",
        "num_ids": 359
    },
    {
        "number": 641,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n == 1):\n        return 1\n    return (2 * n - 1) * n // 2 + 1\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 258
    },
    {
        "number": 643,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    def get_word(text):\n        return text[1:-1]\n    if 'z' in text:\n        return True\n    return False\n",
        "test": "assert     text_match_wordz_middle('z') == True",
        "num_ids": 423
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write ",
        "test": "assert     reverse_Array_Upto_K([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 4) == [\"e\", \"d\", \"c\", \"b\", \"a\", \"f\", \"g\"]",
        "num_ids": 584
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        new_tup = test_tup + tuple(test_dict.items())\n    elif isinstance(test_tup, list):\n        new_list = test_tup + [test_dict]\n        new_tup = tuple(new_list)\n    else:\n        raise ValueError(\"Input must be a tuple or list.\")\n    return new_tup\n",
        "test": "assert     add_dict_to_tuple(tuple(), {}) == tuple()",
        "num_ids": 306
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_average = -1\n    for i in range(N):\n        for j in range(N):\n            average = maxAverageOfPathUtil(cost, i, j, i, j)\n            if average > max_average:\n                max_average = average\n    return max_average\n",
        "test": "assert     maxAverageOfPath([[1,2,3,4],",
        "num_ids": 715
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for key,val in students.items():\n        if val[0] > h and val[1] > w:\n            new_students[key] = val\n    return new_students\n",
        "test": "assert     filter_data({'Ram': (190, 90), 'Shyam': (180, 70), 'Krishna': (200, 110), 'Ajay': (200, 120)}, 130, 130) == {}",
        "num_ids": 743
    },
    {
        "number": 723,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count=0\n    for i in range(len(nums1)):\n        if nums1[i]==nums2[i]:\n            count+=1\n    return count\n",
        "test": "assert     count_same_pair([1, 1, 2], [1, 2, 3]) == 1",
        "num_ids": 488
    },
    {
        "number": 724,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(num) ** power for num in str(base)])\n",
        "test": "assert     power_base_sum(3,2) == 9",
        "num_ids": 301
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1 == None:\n        return []\n    #match = re.search(r'\"(.*)\"',text1)\n    #if match == None:\n    #    return []\n    #else:\n    #    return match.group(1)\n",
        "test": "assert     extract_quotation('''",
        "num_ids": 414
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = tuple()\n    for i in range(len(test_tup)-1):\n        result = result + (test_tup[i] * test_tup[i+1],)\n    return result\n",
        "test": "assert     multiply_elements((5, 3, 2)) == (5 * 3, 3 * 2)",
        "num_ids": 706
    },
    {
        "number": 728,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n",
        "test": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 424
    },
    {
        "number": 730,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for (k, g) in groupby(nums)]\n    \ndef _NthEvenFibonacci(n):\n    a = 0\n    b = 1\n    i = 2\n    while i < n:\n        a, b = b, a + b\n        i += 1\n    return b\n",
        "test": "assert     consecutive_duplicates([1,2,3,3,3,3,4,4,4,5])    == [1,2,3,4,5], \"Expected [1,2,3,4,5]\"",
        "num_ids": 4274
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi*r**2.0)/3.0 + (math.pi*r**2.0)*h/(3.0*math.sin(math.pi/6.0))\n",
        "test": "assert     lateralsurface_cone(1,1) == 3.14159265358979323846",
        "num_ids": 497
    },
    {
        "number": 732,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\",\", \":\")\n    return text\n",
        "test": "assert     replace_specialchar('')=='', '#space'",
        "num_ids": 249
    },
    {
        "number": 733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if len(A) == 1:\n        if A[0] == x:\n            return 0\n        else:\n            return -1\n",
        "test": "assert     find_first_occurrence([1,2,3,4], 4) == 3",
        "num_ids": 506
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = [1]\n    for i in range(len(arr)):\n        prod = 1\n        for j in range(i,len(arr)):\n            prod *= arr[j]\n            res.append(prod)\n",
        "test": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 30,    'check sum_Of_Subarray_Prod'",
        "num_ids": 518
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n&0x55555555) | ((n&0xaaaaaaaa) >> 1)\n",
        "test": "assert     set_middle_bits(16) == 0b10000",
        "num_ids": 276
    },
    {
        "number": 736,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    '''\n    The bisect function has time complexity of O(log n) and space complexity of O(1)\n    '''\n    # bisect.bisect_left(a, x)\n    if len(a) == 0:\n        return 0\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    return i\n",
        "test": "assert     left_insertion([-3, -2, 0, 1, 2, 3], 1) == 3",
        "num_ids": 492
    },
    {
        "number": 737,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    r = re.match(regex,string)\n    if r is not None:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_str('abc') == True",
        "num_ids": 307
    },
    {
        "number": 738,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return (1/n) * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 200
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num_of_digits = int(math.log10(n)) + 1\n    num = n * (n + 1) / 2\n",
        "test": "assert     (find_Index(3) == 0)",
        "num_ids": 277
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = dict(zip(test_tup[0::2],test_tup[1::2]))\n    return new_dict\n",
        "test": "assert     tuple_to_dict(('M', 'i')) == {'M':'i'}",
        "num_ids": 694
    },
    {
        "number": 741,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s[0]==s[-1] :\n        return True\n    return False\n",
        "test": "assert     all_Characters_Same('a') == True",
        "num_ids": 244
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = math.sqrt(3)/4.0 * side**2\n    return area\n",
        "test": "assert     area_tetrahedron(6) == math.sqrt(2)",
        "num_ids": 241
    },
    {
        "number": 743,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if not list:\n        return None\n    if m >= len(list):\n        return list\n    else:\n        list = list[m:] + list[:m]\n        return list\n",
        "test": "assert     rotate_right([1,2,3,4,5,6], 1) == [2,3,4,5,6,1]",
        "num_ids": 617
    },
    {
        "number": 744,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem == None:\n            return True\n    return False\n",
        "test": "assert     check_none((1,2,3)) == False, 'Failed Test 1'",
        "num_ids": 280
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    output = []\n    for n in range(startnum, endnum + 1):\n        if all([n % int(i) == 0 for i in str(n)]):\n            output.append(n)\n    return output\n",
        "test": "assert     divisible_by_digits(10, 1) == [11, 12, 13, 14, 15]",
        "num_ids": 330
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a == 360:\n        return math.pi*r**2\n    else:\n        return math.pi*r**2/2*(1-(math.cos(a*math.pi/180))**2)\nprint(sector_area(1,30))\n",
        "test": "assert      sector_area(1,0) == 0",
        "num_ids": 2247
    },
    {
        "number": 747,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    LCS = [[[0 for i in range(l+1)] for j in range(n+1)] for k in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(l+1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k],LCS[i][j-1][k],LCS[i][j][k-1])\n    return LCS[m][n][l]\n",
        "test": "assert     lcs_of_three('aa', 'a', 'aa') == 1",
        "num_ids": 466
    },
    {
        "number": 748,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z][a-z]+)', r'\\1 ', str1)\n",
        "test": "assert     capital_words_spaces('') == ''",
        "num_ids": 315
    },
    {
        "number": 749,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(i) for i in nums_str]\n    nums.sort()\n    return [str(i) for i in nums]\n",
        "test": "assert     sort_numeric_strings(['1', '3', '10', '12', '9']) == ['1', '3', '9', '10', '12']",
        "num_ids": 583
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    assert(len(test_list) == len(test_tup))\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list\n",
        "test": "assert     add_tuple(['a', 'b', 'c', 'd', 'e', 'f'], ('g', 'h', 'i', 'j')) == \\",
        "num_ids": 484
    },
    {
        "number": 751,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i <= 1:\n        return True\n    if arr[i] < arr[int(math.floor(i/2))]:\n        return False\n    return check_min_heap_helper(arr, int(math.floor(i/2)))\n",
        "test": "assert     check_min_heap_helper([10, 4, 3, 1, 15, 14, 12, 9, 8, 7], 3) == False",
        "num_ids": 605
    },
    {
        "number": 752,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    first_n_jacobsthal = [0]\n    first_n_jacobsthal.extend([1])\n    for i in range(2, n+1):\n        first_n_jacobsthal.append(first_n_jacobsthal[i-1] + first_n_jacobsthal[i-2])\n    return first_n_jacobsthal[n]\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 408
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for k in range(K):\n        min_list.append(test_list[k])\n    for i in range(K,len(test_list)):\n        min_list.append(min(test_list[i]))\n    return min_list\n",
        "test": "assert         min_k( (('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)), 5) == (('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5))",
        "num_ids": 708
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [elem for elem in l1 if elem in l2 and elem in l3]\n",
        "test": "assert     extract_index_list([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], []) == []",
        "num_ids": 810
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    l=numbers\n    l.sort()\n    return l[1]\n",
        "test": "assert     second_smallest([1,2,3,4,5,10]) == 2",
        "num_ids": 307
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab+', text)\n    return match\n",
        "test": "assert     text_match_zero_one('abcabcabc') == 'Match!'",
        "num_ids": 290
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for item in test_list:\n        dict[item] = test_list.count(item)\n    return dict\n    \n    \n    \ndef count_reverse_pairs_string_by_comparing_list_of_strings(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for item in test_list:\n        dict[item] = test_list.count(item)\n    return dict\n    \n    \ndef count_reverse_pairs_string_by_sort(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for item in test_list:\n        dict[item] = test_list.count(item)\n    return dict\n    \n    \n    \ndef count_reverse_pairs_string_by_sort_strings(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for item in test_list:\n        dict[item] = test_list.count(item)\n    return dict\n    \n    \ndef count_reverse_pairs_string_by_sort_strings_0(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for item in test_list:\n        dict[item] = test_list.count(item)\n    return dict\n    \n    \ndef count_reverse_pairs_string_by_sort_strings_1(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                dict[test_list[i]] = test_list.count(test_list[i])\n    return dict\n    \n    \ndef count_reverse_pairs_string_by_sort_strings_2(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                dict[test_list[i]] = test_list.count(test_list[i])\n    return dict\n    \n    \ndef count_reverse_pairs_string_by_sort_strings_3(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                dict[test_list[i]] = test_list.count(test_list[i])\n    return dict\n    \n    \ndef count_reverse_pairs_string_by_sort_strings_4(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                dict[test_list[i]] = test_list.count(test_list[i])\n    return dict\n    \n    \ndef count_reverse_pairs_string_by_sort_strings_5(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                dict[test_list[i]] = test_list.count(test_list[i])\n    return dict\n    \n    \ndef count_reverse_pairs_string_by_sort_strings_6(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                dict[test_list[i]] = test_list.count(test_list[i])\n    return dict\n    \n    \ndef count_reverse_pairs_string_by_sort_strings_7(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                dict[test_list[i]] = test_list.count(test_list[i])\n    return dict\n    \n    \ndef count_reverse_pairs_string_by_sort_strings_8(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                dict[test_list[i]] = test_list.count(test_list[i])\n    return dict\n    \n    \ndef count_reverse_pairs_string_by_sort_strings_9(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                dict[test",
        "test": "assert     count_reverse_pairs([\"bbb\", \"b\", \"\", \"\", \"bbb\", \"b\", \"\"]) == 2",
        "num_ids": 710
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    new_dict = {}\n    for i in list1:\n        new_dict[tuple(i)] = list1.count(i)\n    return new_dict\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 472
    },
    {
        "number": 759,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str:\n        return False\n    if not num.isdigit():\n        return False\n    if len(num) > 2:\n        return False\n    if len(num) == 2:\n        if not num[0] == '0':\n            return False\n    return True\n",
        "test": "assert     is_decimal('0.1245') == False",
        "num_ids": 383
    },
    {
        "number": 760,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    temp = []\n    for elem in arr:\n        if elem not in temp:\n            temp.append(elem)\n        else:\n            return False\n    return True\n",
        "test": "assert     unique_Element([1, 1, 2, 2]) == False, \"should be False\"",
        "num_ids": 2180
    },
    {
        "number": 762,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(3) == True",
        "num_ids": 401
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    res = arr[n-1] - arr[0]\n    for i in range(1, n):\n        res = min(res, arr[i] - arr[i-1])\n    return res\n",
        "test": "assert     find_min_diff([1,2,3,4],4) == 1",
        "num_ids": 431
    },
    {
        "number": 764,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    str = str.strip()\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr('1234567890') == 10",
        "num_ids": 235
    },
    {
        "number": 765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    #Add your code here\n    count=0\n    while True:\n        num=n*(n+1)/2\n        num+=math.sqrt(8*num+1)\n        num+=1\n        count+=1\n        if num%2==0:\n            break\n    return count\n",
        "test": "assert     is_polite(4) == 4     ",
        "num_ids": 283
    },
    {
        "number": 766,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    #all pairs\n    result = []\n    for i in range(len(l1)-1):\n        if l1[i+1] - l1[i] == 1:\n            result.append((l1[i], l1[i+1]))\n    return result\n    #one by one\n    #result = []\n    #for i in range(len(l1)):\n        #for j in range(i+1, len(l1)):\n            #if l1[j] - l1[i] == 1:\n                #result.append((l1[i], l1[j]))\n    #return result\n",
        "test": "assert     [] == pair_wise([])",
        "num_ids": 2660
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    dict = {}\n    for val in arr:\n        if val in dict:\n            dict[val] += 1\n        else:\n            dict[val] = 1\n    count = 0\n    for val in arr:\n        if (sum - val) in dict:\n            count += dict[val]\n    return count\n",
        "test": "assert     get_pairs_count([1, 5, 7, -1, 5], 8) == 2",
        "num_ids": 494
    },
    {
        "number": 769,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "test": "assert     Diff([1,2,3,4,5,6,7,8,9],    [1,2,3,4,5,6,7,8,9]) == []",
        "num_ids": 570
    },
    {
        "number": 770,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1) :\n        if i%2 == 1 :\n            total = total + (i*i*i*i)\n    return total\n",
        "test": "assert     odd_num_sum(0) == 0",
        "num_ids": 258
    },
    {
        "number": 771,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    '''\n    I have modified the original function\n    '''\n    if len(exp)%2!= 0:\n        return False\n    stack = deque()\n    for i in range(0, len(exp)):\n        if exp[i]=='(':\n            stack.append('(')\n        else:\n            if len(stack)==0:\n                return False\n            else:\n                stack.pop()\n    if len(stack)>0:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_expression(\"()\") == True",
        "num_ids": 809
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    n = len(test_str)\n    i = 0\n    j = n-1\n    res = ''\n    while i <= j:\n        if len(test_str[i:j+1]) == K:\n            res += test_str[i:j+1]\n            i += 1\n        else:\n            j -= 1\n    return res\n",
        "test": "assert     remove_length(\"remove the word of length k\", 7) == \"remove \"",
        "num_ids": 483
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches\n    else:\n        return None\nprint(occurance_substring(\"Python is fun!I love python\", \"python\"))\n",
        "test": "assert     occurance_substring('hello','heo') == None",
        "num_ids": 2243
    },
    {
        "number": 775,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 1:\n            return False\n    return True\n",
        "test": "assert     odd_position([1,2,3]) == False",
        "num_ids": 255
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in 'aeiou':\n            if test_str[i+1] in 'aeiou':\n                vowel_count += 1\n    return vowel_count\n",
        "test": "assert     count_vowels('DENG') == 0",
        "num_ids": 483
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total = total + arr[i]\n    return total\n",
        "test": "assert     find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 432
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n        else:\n            list2.append(i)\n            list2.append(i)\n    print(list2)\n",
        "test": "assert     pack_consecutive_duplicates([1,1,1,1,1,2,2,2,2])==[[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2]]",
        "num_ids": 1334
    },
    {
        "number": 779,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    results = {}\n    for i in range(len(list1)):\n        if tuple(list1[i]) not in results:\n            results[tuple(list1[i])] = 1\n        else:\n            results[tuple(list1[i])] += 1\n    return results\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 586
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def combine_sum(list, total):\n        '''\n        This is a helper function to find all the combinations with sum = total.\n        '''\n        temp_list = []\n        for i in list:\n            if i[0] <= total and i[1] <= total:\n                temp_list.append(i)\n        return temp_list\n    \n    def helper(test_list, total):\n        '''\n        This is a recursive helper function that finds all the combinations of sums with tuples in the given tuple list.\n        '''\n        if len(test_list) == 0:\n            return [[]]\n        else:\n            sub_list = test_list[0]\n            sub_list_sub_list = helper(test_list[1:], total - sub_list[0])\n            combinations_list = []\n            for sub_list_sub in sub_list_sub_list:\n                combinations_list.append(sub_list + [sub_list_sub])\n            for sub_list_sub in sub_list_sub_list:\n                temp = sub_list + [sub_list_sub]\n                combinations_list.append(temp)\n            return combinations_list\n    \n    return helper(test_list, 100)\n",
        "test": "assert     find_combinations([(1, 1), (1, 2), (1, 3), (1, 4)]) == [(1, 1, 1, 1)]",
        "num_ids": 648
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    #print(n)\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            count += 2\n    return count\ndef sum_divisors(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            sum += i + n/i\n    return sum\ndef sum_divisors_2(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_3(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_4(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_5(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_6(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_7(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_8(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_9(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_10(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_11(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_12(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_13(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_14(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_15(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_16(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if n%i == 0])\ndef sum_divisors_17(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return 0\n    return sum([i for i in range(",
        "test": "assert     count_divisors(4) == 2",
        "num_ids": 224
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum(arr[i] for i in range(len(arr)) if i%2==1)\n",
        "test": "assert     odd_length_sum([1,2,3,4,5,6,7])     ==     23",
        "num_ids": 2232
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n",
        "test": "assert ",
        "num_ids": 385
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    for i in list1:\n        if i%2 == 0:\n            even_prod = even_prod*i\n        else:\n            odd_prod = odd_prod*i\n    print(f\"The product of even and odd numbers in the list is {even_prod}\")\n    print(f\"The product of even and odd numbers in the list is {odd_prod}\")\n",
        "test": "assert     [0, 0] == mul_even_odd([4, 8, 12, 16, 20, 22, 24])",
        "num_ids": 525
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(x) for x in test_str.split(',')])\n",
        "test": "assert     tuple_str_int('(1,2,3)') == (1,2,3)",
        "num_ids": 422
    },
    {
        "number": 786,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    if x < a[index-1]:\n        return index\n    if x == a[index-1]:\n        return index-1\n",
        "test": "assert     right_insertion([1,2,3,4,5,6], 4) == 3",
        "num_ids": 262
    },
    {
        "number": 787,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_three_new(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_three_new_2(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_three_new_3(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.match(text)\ndef text_match_three_new_4(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.search(text)\ndef text_match_three_new_5(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.findall(text)\ndef text_match_three_new_6(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.finditer(text)\ndef text_match_three_new_7(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.sub('JJJJ', text)\ndef text_match_three_new_8(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.subn('JJJJ', text)\ndef text_match_three_new_9(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.startswith(text)\ndef text_match_three_new_10(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.endswith(text)\ndef text_match_three_new_11(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.match(text)\ndef text_match_three_new_12(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.search(text)\ndef text_match_three_new_13(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.findall(text)\ndef text_match_three_new_14(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.finditer(text)\ndef text_match_three_new_15(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.sub('JJJJ', text)\ndef text_match_three_new_16(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.subn('JJJJ', text)\ndef text_match_three_new_17(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.startswith(text)\ndef text_match_three_new_18(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.endswith(text)\ndef text_match_three_new_19(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.match(text)\ndef text_match_three_new_20(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.search(text)\ndef text_match_three_new_21(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.findall(text)\ndef text_match_three_new_22(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.finditer(text)\ndef text_match_three_new_23(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.sub('JJJJ', text)\ndef text_match_three_new_24(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.subn('JJJJ', text)\ndef text_match_three_new_25(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.startswith(text)\ndef text_match_three_new_26(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.endswith(text)\ndef text_match_three_new_27(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.match(text)\ndef text_match_three_new_28(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return pattern.search(text)\ndef text_match_three_new_29(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    return patter",
        "test": "assert     text_match_three('ababc') == False",
        "num_ids": 273
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # do not modify this code\n    new_tuple = tuple(test_list)\n    new_tuple += (test_str, )\n    return new_tuple\n",
        "test": "assert     new_tuple([1,2,3,4], \"hello, world\") == (1,2,3,4,'hello, world')",
        "num_ids": 531
    },
    {
        "number": 790,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(num % 2 == 0 for num in nums[0::2])\n",
        "test": "assert     (even_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == False), \"Failed\"",
        "num_ids": 460
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) == tuple:\n        return tuple([remove_nested(x) for x in test_tup])\n    else:\n        return test_tup\n",
        "test": "assert     remove_nested((1,(1,(1,2)))) == (1,(1,(1,2)))",
        "num_ids": 728
    },
    {
        "number": 792,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n",
        "test": "assert     count_list([]) == 0",
        "num_ids": 352
    },
    {
        "number": 793,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1\n",
        "test": "assert     last([1,2,3,3,3,4],5)==-1",
        "num_ids": 457
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = re.compile(r'a.*b$')\n    mat = re.findall(pat, text)\n    return mat\n",
        "test": "assert     text_starta_endb(\"atgagt\") == False",
        "num_ids": 290
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n    \n    \nif __name__ == \"__main__\":\n    d = {'a': 100, 'b': -54, 'c': 247}\n    print(return_sum(d))\n    print(return_sum({'a':100,'b':200,'c':300}))\n    \n    \n    \n    ",
        "test": "assert     return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 409
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(n):\n        if (i % 2!= 0):\n            total = total + i\n    return total\n",
        "test": "assert     sum_odd(0) == 0",
        "num_ids": 240
    },
    {
        "number": 798,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Your code goes here\n    total = 0\n    for x in arr:\n        total += x\n    return total\n",
        "test": "assert     _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 160
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n<<d | n>>(32-d)\n",
        "test": "assert     left_rotate(0,1) == 0",
        "num_ids": 668
    },
    {
        "number": 800,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)\n",
        "test": "assert     remove_all_spaces(\"Hooray\") == \"Hooray\"",
        "num_ids": 309
    },
    {
        "number": 801,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or y==z or x==z:\n        return 2\n    else:\n        return 0\nprint(test_three_equal(1,1,1))\n",
        "test": "assert     test_three_equal(2,2,3) == 2",
        "num_ids": 369
    },
    {
        "number": 802,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    if len(arr) == 0 or len(arr) == 1:\n        return 0\n    else:\n        n = len(arr)\n        for i in range(n):\n            if arr[i] < arr[(i+1)%n]:\n                return i\n    return 0\n",
        "test": "assert count_rotation([1]) == 0",
        "num_ids": 687
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n**0.5 == int(n**0.5)\n    #return (int(n**0.5) == n**0.5)\n",
        "test": "assert     is_perfect_square(21)    == False",
        "num_ids": 243
    },
    {
        "number": 804,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    arr = list(arr)\n    prod = 1\n    for x in arr:\n        prod *= x\n    if prod % 2 == 0:\n        return True\n    return False\n",
        "test": "assert     is_product_even([2, 2]) == True",
        "num_ids": 335
    },
    {
        "number": 805,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    current_sum = 0\n    current_list = []\n    for i in range(len(lists)):\n        if i == 0:\n            current_sum = sum(lists[i])\n            current_list = lists[i]\n        else:\n            if current_sum < sum(lists[i]):\n                current_sum = sum(lists[i])\n                current_list = lists[i]\n    return current_list\n",
        "test": "assert     max_sum_list([[1,2,3], [1,2,3], [1,2,3]])    ==    [1,2,3]",
        "num_ids": 706
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    elif test_str[0].isupper():\n        return 1 + max_run_uppercase(test_str[1:])\n    else:\n        return 0 + max_run_uppercase(test_str[1:])\n",
        "test": "assert     max_run_uppercase(\"\") == 0",
        "num_ids": 2377
    },
    {
        "number": 807,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            return n\n    return None\n",
        "test": "assert     first_odd([-1,2,3,4,5]) == -1",
        "num_ids": 442
    },
    {
        "number": 808,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for elem in test_tup:\n        if elem > K:\n            return False\n    return True\n",
        "test": "assert     check_K((0, 0, 2), 2) == True",
        "num_ids": 512
    },
    {
        "number": 809,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        if tup2 > tup1:\n            return False\n    return True\n",
        "test": "assert check_smaller([], []) == True",
        "num_ids": 369
    }
]