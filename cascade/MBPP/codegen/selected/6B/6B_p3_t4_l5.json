[
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] not in test_tup2:\n                return False\n        return True\n",
        "test": "assert     (similar_elements(('a', 'b'), ('c', 'b')) == False)",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return False\n    elif n > 2 and n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n    return True\n",
        "test": "assert     is_not_prime(1) is False, \"is_not_prime(1) is False\"",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return\n    nums.sort(reverse=True)\n    for i in range(n):\n        print(nums[i])\n",
        "test": "assert     [2,3,4,5] == heap_queue_largest([3,4,5,2,1],3)",
        "num_ids": 4150,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0\n",
        "test": "assert     is_Power_Of_Two(3) == False, '3 is power of 2'",
        "num_ids": 2213,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # n_words = [word for word in text.split() if len(word) >= 4]\n    # print(n_words)\n    # return n_words\n    return [word for word in text.split() if len(word) >= 4]\n",
        "test": "assert     find_char_long('a b c d e f') == []",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "test": "assert     [1, 4, 9, 16, 25, 36]     == square_nums([1, 2, 3, 4, 5, 6])",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    if (str == ''):\n        return 0\n    n = len(str)\n    for i in range(n):\n        if (str[i:] == str[i:][::-1]):\n            return (n - i)\n    return 0\n",
        "test": "assert     find_Rotations('AGC') == 1",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0]==ch:\n        s=s[1:]\n    if s[-1]==ch:\n        s=s[:-1]\n    return s\n",
        "test": "assert     remove_Occ(\"The quick brown fox\", \"q\") == \"The quick brown fox\"",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(rows - i - 1):\n            if sum(M[j]) > sum(M[j + 1]):\n                M[j], M[j + 1] = M[j + 1], M[j]\n    return M\n",
        "test": "assert     sort_matrix([[4,10],[3,7]]) == [[3,7],[4,10]]",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/6\n",
        "test": "assert     find_Volume(1,2,3) == (1*2*3)/6",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return (text.isalpha() and '_' in text)\n",
        "test": "assert     text_lowercase_underscore('this is a test') == False",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "test": "assert     square_perimeter(4)     == 16",
        "num_ids": 128,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str2 = list(string)\n    for i in str2:\n        if i in str1:\n            str2.remove(i)\n    return str2\n",
        "test": "assert     str_to_list('abcd', 'cd') == 'ab'",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # find the duplicate element\n    for i in range(len(arraynums)):\n        for j in range(i + 1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "test": "assert     test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False, \"test_duplicate(arraynums) is wrong\"",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x % 10 == 2 or x % 10 == 3 or x % 10 == 4) and (x % 100!= 11 and x % 100!= 22 and x % 100!= 33 and x % 100!= 44)\n",
        "test": "assert     is_woodall(6)     == False",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = int(num)\n    rev = 0\n    while (num!= 0):\n        rev = (rev * 10) + (num % 10)\n        num = num // 10\n    if (rev - (rev // 10) == num - 1):\n        return True\n    else:\n        return False\n",
        "test": "assert     rev(345) == False",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    max_num = arr[-1]\n    for i in range(len(arr)-1,0,-1):\n        if arr[i] == arr[i-1]:\n            max_num = arr[i-1]\n        else:\n            break\n    return max_num\n",
        "test": "assert     find_Max_Num([0, 0, 0, 0, 0]) == 0",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0\n",
        "test": "assert     opposite_Signs(3,2) == False, \"False\"",
        "num_ids": 236,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    m = len(s)\n    for i in range(1, n + 1):\n        # Find all possible substrings with the length of i\n        for j in range(n - i + 1):\n            sum1 = 0\n            for k in range(i):\n                sum1 += int(s[k])\n            if sum1 == i:\n                m += 1\n",
        "test": "assert     count_Substrings(\"bbca\") == 2",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "test": "assert     smallest_num([1, 2, 3, 4, 5, 6, 7]) == 1",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if test_list:\n        max_diff = 0\n        for i in range(len(test_list)):\n            for j in range(i + 1, len(test_list)):\n                max_diff = max(abs(test_list[i] - test_list[j]), max_diff)\n        return max_diff\n    else:\n        return 0\n",
        "test": "assert     max_difference([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)]) == 0",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    new_list = sorted(subjectmarks,key = lambda t: t[1])\n    return new_list\n",
        "test": "assert     subject_marks([(\"Algebra\",15),(\"English\",16),(\"Chemistry\",17),(\"Physics\",19)]) == [(\"Algebra\",15),(\"English\",16),(\"Chemistry\",17),(\"Physics\",19)]",
        "num_ids": 1337,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #if data_list is a list of lists, add all elements together\n    #if data_list is a list of scalars, add all elements together\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(element) for element in data_list)\n    else:\n        return data_list\n",
        "test": "assert     recursive_list_sum( [1, [2, 3]]) == 6, 'failed: {0}'.format(recursive_list_sum( [1, [2, 3]]))",
        "num_ids": 546,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*bell_number(n-1)\n",
        "test": "assert ",
        "num_ids": 159,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n        all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n    ",
        "test": "assert     is_Monotonic(['A']) == True",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if type(s) is not list:\n        return False\n    if l == s:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(s)):\n        if l[i] == s[i]:\n            pass\n        else:\n            return False\n    return True\n",
        "test": "assert     is_sublist([1,2,3], [1,2,3,4]) == False",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all([len(t) == len(Input[0]) for t in Input])\n",
        "test": "assert     find_equal_tuple(((1,),(2,),(3,),(4,)))",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped == 1:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 514,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n in [i*i for i in range(10)]\n",
        "test": "assert     dif_Square(12) == False",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for p in patterns:\n        if p[0] == '#':\n            if colors[-1] == p[1:]:\n                colors.pop()\n            else:\n                return False\n        else:\n            if colors[-1]!= p:\n                return False\n            colors.pop()\n    return True\n",
        "test": "assert     is_samepatterns(['RGB', 'RBR', 'RRG', 'RRB'], ['RRBR', 'BRGR', 'RRGB', 'RBGR', 'RGBR', 'GBRG', 'RRGB', 'RRGB']) == False",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for i in test_list:\n        if all([i%k == 0 for i in i]):\n            output.append(i)\n    return output\n",
        "test": "assert     find_tuples([(1,2,3), (10,20,30), (40,50,60)], 4) == [(1,2,3,10,20,30,40,50,60)]",
        "num_ids": 2518,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Diff(11)==True",
        "num_ids": 170,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n",
        "test": "assert     word_len('abcd') == False",
        "num_ids": 119,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    return n*(n+1)*(n+2)/6\n",
        "test": "assert     tetrahedral_number(3) == 10",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*(r**3)\n",
        "test": "assert     volume_sphere(1.0) == 4.0/3.0*math.pi",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    if(sum % 26):\n        return chr(sum % 26 + 96)\n    else:\n        return chr(sum % 26 + 64)\n",
        "test": "assert     get_Char('ABCD') == 0",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    s = [0]*n\n    s[0] = 1\n    s[1] = 1\n    for i in range(2,n):\n        s[i] = s[i-1] + 2*s[i-2]\n",
        "test": "assert     sequence(5) == 5",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * (r ** 2)\n    return s\ndef vol_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4 / 3) * math.pi * (r ** 3)\n    return v\n",
        "test": "assert     surfacearea_sphere(3) == 4 * math.pi * 3**2",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    return (3 * n - 1) * (n / 2) ** 2 + 1\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return_dict = {}\n    for key in dict1.keys():\n        return_dict[key] = dict1[key]\n    for key in dict2.keys():\n        return_dict[key] = dict2[key]\n    for key in dict3.keys():\n        return_dict[key] = dict3[key]\n    return return_dict\n",
        "test": "assert     merge_dictionaries_three({'a':1, 'b':2}, {'c':3, 'd':4}, {'e':5}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}, \"merge_dictionaries_three is wrong\"",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n",
        "test": "assert     [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] == freq_count([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    if n > 0:\n        return n-1\n    elif n < 0:\n        return -n+1\n    else:\n        return 0\n",
        "test": "assert     closest_num(100) == 99",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(max(len(word) for word in list1))\n",
        "test": "assert     len_log(['A', 'a', 'a']) == 1",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str_index = -1\n    for s in sub_str:\n        index = str1.find(s, str_index+1)\n        if index == -1:\n            return False\n        str_index = index\n    return True\n",
        "test": "assert     find_substring('this is a string','string') == True",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10: \n        return False\n    else: \n        num = str(n)\n        for i in range(len(num) - 1):\n            if int(num[i]) < int(num[i+1]):\n                return False\n        return True\n",
        "test": "assert     is_undulating(14322228) == False",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b % 2 == 0:\n        return power(a,b/2)*power(a,b/2)\n    else:\n        return a*power(a,(b-1)/2)*power(a,(b-1)/2)\n    return None\n",
        "test": "assert     power(2, 0) == 1",
        "num_ids": 314,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert index_minimum([(0,0),(0,0),(0,0)]) == 0, 'incorrect index_minimum'",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 10000\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n    return min_length\n",
        "test": "assert     (Find_Min_Length([[1,2,3,4],[1,2,3,4],[1,2,3,4]])== 4)",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    divs = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            divs.append(i)\n    return len(divs)\n",
        "test": "assert     divisor(1) == 1",
        "num_ids": 195,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n",
        "test": "assert     frequency_lists(['a', 'b', 'a', 'c']) == {'a': 2, 'b': 1, 'c': 1}",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_new = []\n    for number in numbers:\n        numbers_new.append(number * len(numbers))\n    return numbers_new\n",
        "test": "assert multiply_num([1]) == [1]",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    if n == 0:\n        return '0'\n    while n > 0:\n        binary.append(str(n % 2))\n        n = n // 2\n    binary.reverse()\n    return ''.join(binary)\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n",
        "test": "assert     next_smallest_palindrome(123456789) == 123456789",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == None or len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[0]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    if k < len(left):\n        return kth_element(left, k)\n    elif k < len(left) + len(middle):\n        return pivot\n    else:\n        return kth_element(right, k - len(left) - len(middle))\n",
        "test": "assert     kth_element([1], 0) == 1",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    camelcase_string = \"\"\n    for character in word:\n        if character == '_':\n            camelcase_string += \" \"\n        else:\n            camelcase_string += character\n    return camelcase_string.strip()\n",
        "test": "assert     snake_to_camel(\"\")                == ''",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    graph = [[0 for i in range(n+1)] for j in range(m+1)] \n    for i in range(n+1):\n        graph[i][0] = 1\n        graph[0][i] = 1\n    print(graph)\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            graph[i][j] = graph[i-1][j] + graph[i][j-1]\n    print(graph)\n    result = 0\n    for i in range(m+1):\n        result += graph[n][i]\n    return result\n",
        "test": "assert     eulerian_num(2, 2) == 2",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list in input_list:\n        list.sort()\n    return input_list\n",
        "test": "assert     sort_sublists([['apple', 'banana', 'dog'], ['bob', 'car', 'david'], ['cc', 'dd', 'ee'], ['ff', 'gg', 'hh']]) == [['bob', 'car', 'david'], ['apple', 'banana', 'dog'], ['dd', 'ee', 'cc'], ['ff', 'gg', 'hh']]",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(x) for x in lst)\n",
        "test": "assert     count([False, True, False]) == 1,         'incorrect count of true'",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if not test_list:\n        return test_tup\n    else:\n        return (test_list[0] + test_tup, add_lists(test_list[1:], test_tup))\n",
        "test": "assert     add_lists([1, 2, 3, 4, 5], [6])             == [1, 2, 3, 4, 5, 6]",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i,j,k = 0,0,0\n    new_list = []\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            new_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            new_list.append(num2[j])\n            j += 1\n        else:\n            new_list.append(num3[k])\n            k += 1\n    while i < len(num1):\n        new_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        new_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        new_list.append(num3[k])\n        k += 1\n    return new_list\n",
        "test": "assert     merge_sorted_list([], [], []) == []",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n = bin(n)[2:]\n    c = 0\n    for i in range(len(n)):\n        if int(n[i])%2!= 0:\n            c+=1\n    return c\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    n = bin(n)[2:]\n    c = 0\n    for i in range(len(n)):\n        if int(n[i])%2 == 0:\n            c+=1\n    return c\n    \ndef permutations(s,n): \n    '''\n    Write a python function to count the number of permutations of the string s if we rotate the string n times.\n    '''\n    c = 0\n    for i in range(1,n+1):\n        c += even_Equivalent(s,i)\n    return c\n    \ndef permutations_itr(s,n):\n    '''\n    Write a python function to count the number of permutations of the string s if we rotate the string n times.\n    '''\n    c = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            c+=odd_Equivalent(s,i)\n        else:\n            c+=even_Equivalent(s,i)\n    return c\n    \ndef factorial(n):\n    '''\n    Write a python function to compute n!\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n",
        "test": "assert     (odd_Equivalent(1,1)==1)",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Write your code here\n    common = []\n    if not isinstance(nestedlist, list) or not nestedlist:\n        return common\n",
        "test": "assert     common_in_nested_lists([]) == []",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(\"11\") == True",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for item in list1:\n        if item:\n            return False\n    return True\n",
        "test": "assert     empty_dit([{},{},{}]) == True",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_list = list(nums)\n    total = 0\n    for i in range(len(num_list)):\n        total += num_list[i] * (10**(len(num_list)-1-i))\n    return total\n",
        "test": "assert     tuple_to_int((0, 1, 2, 3, 4, 5)) == 12345",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for i in range(len(row)):\n            try:\n                row[i] = float(row[i])\n            except:\n                continue\n    return test_list\n    \ndef string_to_int(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to ints.\n    '''\n    for row in test_list:\n        for i in range(len(row)):\n            try:\n                row[i] = int(row[i])\n            except:\n                continue\n    return test_list\n    \ndef string_to_list(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to a list.\n    '''\n    for row in test_list:\n        for i in range(len(row)):\n            try:\n                row[i] = list(row[i])\n            except:\n                continue\n    return test_list\n    \ndef column_length(test_list):\n    '''\n    Write a function to calculate the number of columns in a list of lists.\n    '''\n    length = len(test_list[0])\n    for row in test_list:\n        if len(row) < length:\n            length = len(row)\n    return length\n",
        "test": "assert     list_to_float([[1, 2, 3], [-1, 0, 2]]) == [[1.0, 2.0, 3.0], [-1.0, 0.0, 2.0]]",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('abc') == ['abc']",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    index = arr[0]\n    count = 1\n    for i in range(1, n):\n        if arr[i] == index:\n            count += 1\n        elif arr[i]!= index:\n            index = arr[i]\n            if count == 1:\n                return arr[i]\n            else:\n                count = 1\n    return arr[-1]\n",
        "test": "assert     search([1,1,2,2,2]) == 2",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    tpl_list = []\n    for el1, el2 in list1:\n        tpl_list.append(tuple([el1, el2]))\n    max_value = tpl_list[0][0] * tpl_list[0][1]\n    for tpl in tpl_list:\n        value = tpl[0] * tpl[1]\n        if abs(value) > max_value:\n            max_value = abs(value)\n    return max_value\n",
        "test": "assert     max_product_tuple([(2, 3), (3, 4), (5, 7), (1, 1), (4, 3), (2, -1)]) == -32",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_ = 0\n    for number in range(1, limit):\n        if number_is_amicable(number):\n            sum_ += number\n    return sum_\n",
        "test": "assert     amicable_numbers_sum(1) == 0",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.phase(a + b*1j))\n",
        "test": "assert     angle_complex(complex(-1,2),complex(1,0))==cmath.phase(complex(-1,2),complex(1,0))",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0: \n        return \n    else: \n        max_diff = 0 \n        count = 0 \n        for i in range(len(string)): \n            if string[i] == '0': \n                count += 1\n            else: \n                max_diff = max(max_diff, count)\n                count = 0 \n    return max_diff \n",
        "test": "assert     find_length('111111111') == 0",
        "num_ids": 2169,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x,y=a,b\n    n=2\n    while (y!=0):\n        x=x%y\n        x,y=y,x\n        n+=1\n    return a*b/n\n",
        "test": "assert     sum(15,20) == 60",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(5, 6) == 30",
        "num_ids": 90,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pas",
        "test": "assert ",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_numbers = [2,3,4,5,6,7,8,9]\n    my_matrix_len = len(my_matrix)\n    for row in my_matrix:\n        if len(row)!= my_matrix_len:\n            return False\n",
        "test": "assert     magic_square_test([[3, 1, 6], [7, 5, 8], [2, 9, 4]]) == False",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for item in nums:\n        count[item] += 1\n        if count[item] > max_freq:\n            max_freq = count[item]\n            max_item = item\n    return max_item\n",
        "test": "assert     max_occurrences([1,2,1,3,4,1,1,1,2,2,3,4]) == 1",
        "num_ids": 2322,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'AEIOUaeiou'\n    temp = list(str1)\n    i = 0\n    j = len(temp) - 1\n    while i < j:\n        if temp[i].lower() not in vowels:\n            i = i + 1\n        elif temp[j].lower() not in vowels:\n            j = j - 1\n        else:\n            temp[i], temp[j] = temp[j], temp[i]\n            i = i + 1\n            j = j - 1\n    return ''.join(temp)\n",
        "test": "assert     reverse_vowels(\"\") == \"\"",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert     tup_string((1,2,3))    == '(1, 2, 3)'",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])\n",
        "test": "assert     sum_negativenum([-1, -2, -3, -4, -5]) == -15",
        "num_ids": 260,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int((2*n**2 - n) / 2)\n    \n    \ndef test_hexagonal_num():\n    assert hexagonal_num(1) == 0\n    assert hexagonal_num(2) == 1\n    assert hexagonal_num(3) == 4\n    assert hexagonal_num(4) == 6\n    assert hexagonal_num(5) == 10\n    assert hexagonal_num(6) == 15\n    assert hexagonal_num(7) == 22\n    assert hexagonal_num(8) == 30\n    assert hexagonal_num(9) == 36\n    assert hexagonal_num(10) == 42\n    assert hexagonal_num(11) == 48\n    assert hexagonal_num(12) == 54\n    assert hexagonal_num(13) == 60\n    assert hexagonal_num(14) == 66\n    assert hexagonal_num(15) == 72\n    assert hexagonal_num(16) == 78\n    assert hexagonal_num(17) == 84\n    assert hexagonal_num(18) == 90\n    assert hexagonal_num(19) == 96\n    assert hexagonal_num(20) == 102\n    assert hexagonal_num(21) == 108\n    assert hexagonal_num(22) == 114\n    assert hexagonal_num(23) == 120\n    assert hexagonal_num(24) == 126\n    assert hexagonal_num(25) == 132\n    assert hexagonal_num(26) == 138\n    assert hexagonal_num(27) == 144\n    assert hexagonal_num(28) == 150\n    assert hexagonal_num(29) == 156\n    assert hexagonal_num(30) == 162\n    assert hexagonal_num(31) == 168\n    assert hexagonal_num(32) == 174\n    assert hexagonal_num(33) == 180\n    assert hexagonal_num(34) == 186\n    assert hexagonal_num(35) == 192\n    assert hexagonal_num(36) == 198\n    assert hexagonal_num(37) == 204\n    assert hexagonal_num(38) == 210\n    assert hexagonal_num(39) == 216\n    assert hexagonal_num(40) == 222\n    assert hexagonal_num(41) == 228\n    assert hexagonal_num(42) == 234\n    assert hexagonal_num(43) == 240\n    assert hexagonal_num(44) == 246\n    assert hexagonal_num(45) == 252\n    assert hexagonal_num(46) == 258\n    assert hexagonal_num(47) == 264\n    assert hexagonal_num(48) == 270\n    assert hexagonal_num(49) == 276\n    assert hexagonal_num(50) == 282\n    assert hexagonal_num(51) == 288\n    assert hexagonal_num(52) == 294\n    assert hexagonal_num(53) == 300\n    assert hexagonal_num(54) == 306\n    assert hexagonal_num(55) == 312\n    assert hexagonal_num(56) == 318\n    assert hexagonal_num(57) == 324\n    assert hexagonal_num(58) == 330\n    assert hexagonal_num(59) == 336\n    assert hexagonal_num(60) == 342\n    assert hexagonal_num(61) == 348\n    assert hexagonal_num(62) == 354\n    assert hexagonal_num(63) == 360\n    assert hexagonal_num(64) == 366\n    assert hexagonal_num(65) == 372\n    assert hexagonal_num(66) == 378\n    assert hexagonal_num(67) == 384\n    assert hexagonal_num(68) == 390\n    assert hexagonal_num(69) == 396\n    assert hexagonal_num(70) == 402\n    assert hexagonal_num(71) == 408\n    assert hexagonal_num(72) == 414\n    assert hexagonal_num(73) == 420\n    assert hexagonal_num(74) == 426\n    assert hexagonal_num(75) == 432\n    assert hexagonal_num(76) == 438\n    assert hexagonal_num(77) == 444\n    assert hexagonal_num(78) == 450\n    assert hexagonal_num(79) == 456\n    assert hexagonal_num(80) == 462\n    assert hexagonal_num(81) == 468\n    assert hexagonal_num(82) == 474\n    assert hexagonal_num(83) == 480\n    assert hexagonal_num(84) == 486\n    assert hexagonal_num(85) == 492\n    assert hexagonal_num(86) == 498\n    assert hexagonal_num(87) == 504\n    assert hexagonal_num(88) == 510\n    assert hexagonal_num(89) == 516\n    assert hexagonal_num(90) == 522\n    assert hexagonal_num(91) == 528\n    assert hexagonal_num(92) == 534\n    assert hexagonal_num(93) == 540\n    assert hexagonal_num(94) == 546\n    assert hexagonal_num(95) == 552\n    assert hexagonal_num(96) == 558\n    assert hexagonal_num(97) == 564\n    assert hexagonal_num(98) == 570\n    assert hexagonal_num(99) == 576\n    assert hexagonal_num(100) == 582\n    assert hexagonal_num(101) == 588\n    assert hexagonal_num(102) == 594\n    assert hexagonal_num(103) == 600\n    assert hexagonal_num(104) == 606\n    assert hexagonal_num(105) == 612\n    assert hexagonal_num(106) == 618\n    assert hexagonal_num(107) == 624\n    assert hexagonal_num(108) == 630\n    assert hexagonal_num(109) == 636\n    assert hexagonal_num(110) == 642\n    assert hexagonal_num(111) == 648\n    assert hexagonal_num(112) == 654\n    assert hexagonal_num(113) == 660\n    assert hexagonal_num(114) == 666\n    assert hexagonal_num(115) == 672\n    assert hexagonal_num(116) == 678\n    assert hexagonal_num(117) == 684\n    assert hexagonal_num(118) == 690\n    assert hexagonal_num(119) == 696\n    assert hexagonal_num(120) == 702\n    assert hexagonal_num(121) == 708\n    assert hexagonal_num(122) == 714\n    assert hexagonal_num(123) == 720\n    assert hexagonal_num(124) == 726\n    assert hexagonal_num(125) == 732\n    assert hexagonal_num(126) == 738\n    assert hexagonal_num(127) == 744\n    assert hexagonal_num(128) == 750\n    assert hexagonal_num(129) == 756\n    assert hexagonal_num(130) == 762\n    assert hexagonal_num(131) == 768\n    assert hexagonal_num(132) == 774\n    assert hexagonal_num(133) == 780\n    assert hexagonal_num(134) == 786\n    assert hexagonal_num(135) == 792\n    assert hexagonal_num(136) == 798\n    assert hexagonal_num(137) == 804\n    assert hexagonal_num(138) == 810\n    assert hexagonal_num(139) == 816\n    assert hexagonal_num(140) == 822\n    assert hexagonal_num(141) == 828\n    assert hexagonal_num(142) == 834\n    assert hexagonal_num(143) == 840\n    assert hexagonal_num(144) == 846\n    assert hexagonal_num(145) == 852\n    assert hexagonal_num(146) == 858\n    assert hexagonal_num(147) == 864\n    assert hexagonal_num(148) == 870\n    assert hexagonal_num(149) == 876\n    assert hexagonal_num(150) == 882\n    assert hexagonal_num(151) == 888\n    assert hexagonal_num(152) == 894\n    assert hexagonal_num(153) == 900\n    assert hexagonal_num(154) == 906\n    assert hexagonal_num(155) == 912\n    assert hexagonal_num(156) == 918\n    assert hexagonal_num(157) == 924\n    assert hexagonal_num(158) == 930\n    assert hexagonal_num(159) == 936\n    assert hexagonal_num(160) == 942",
        "test": "assert     hexagonal_num(3) == 22",
        "num_ids": 2153,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_non_zeroes = 0\n    for number in nums:\n        if number == 0:\n            num_zeroes += 1\n        else:\n            num_non_zeroes += 1\n    return float(num_zeroes)/num_non_zeroes\n",
        "test": "assert     zero_count([1,2,3]) == 0",
        "num_ids": 398,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    flag = False\n    if n == 0:\n        return True\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            if flag:\n                return False\n            n -= 1\n            flag = True\n    return True\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(0) == True, \"Test 1 failed\"",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert     circle_circumference(0)     == 0.0",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n",
        "test": "assert     extract_singly([[1,2,3],[4,5,6],[7,8,9]])    ==    [1,2,3,4,5,6,7,8,9]",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def pancakesort(nums):\n        left, right = 0, len(nums) - 1\n        while left < right:\n            for i in range(right, left, -1):\n                if nums[i] < nums[i - 1]:\n                    nums[i], nums[i - 1] = nums[i - 1], nums[i]\n                    left += 1\n                    right -= 1\n            for i in range(left, right):\n                if nums[i] > nums[i + 1]:\n                    nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                    left += 1\n                    right -= 1\n        return nums\n",
        "test": "assert     [1,2,3,4,5,6,7,8] == pancake_sort([8,1,2,3,4,5,6,7])",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for index in range(len(list1)):\n        if list1[index] == list2[index] and list2[index] == list3[index]:\n            count += 1\n    return count\n",
        "test": "assert     count_samepair([1,1,2,3], [3,5,1,3], [1,2,1,3]) == 1",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    result = 0\n    if Input == ():\n        return result\n",
        "test": "assert     find_lists(('a', 'b', 'c', 'd', 'e', ('f', 'g', 'h', 'i', 'j', ('k', 'l','m', 'n')))) == 5",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0 \n    for i in range(len(arr)-1): \n        for j in range(i+1,len(arr)): \n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff: \n                max_diff = diff \n    return max_diff \n",
        "test": "assert     max_Abs_Diff(    [-3, -5, -7, -8, -9]) == -3",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def get_solution(a, b, n):\n        if n == 0:\n            return (0, 0)\n        elif n % a == 0:\n            return (n // a, 0)\n        else:\n            div, mod = divmod(n, a)\n            return (div, a - mod)\n    x, y = get_solution(a, b, n)\n    if x == 0 or y == 0:\n        return None\n    return (x, y)\n",
        "test": "assert     find_solution(1,2,4) == None",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n",
        "test": "assert     remove_elements([1, 2, 3], [1, 2]) == [3]",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 975,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l > 0:\n        return (0.5 * s * l)\n    else:\n        return 'This polygon has no area'\n",
        "test": "assert     area_polygon(4, 1) == 6",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #take the max of the two \n    m = max(n, math.floor(n/2))\n    #if it is divisible by any single number\n    #return False \n    if n == 0:\n        return False\n    for i in range(2, m):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime(n):\n    if n==0 or n==1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_array(n):\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\ndef nth_prime(n):\n    #create a list of the prime numbers in order\n    primes = [2]\n    while len(primes) < n:\n        if is_prime(primes[-1]+1):\n            primes.append(primes[-1]+1)\n    return primes[n-1]\ndef sum_of_primes(n):\n    if n < 2:\n        return 0\n    primes = [2]\n    #find the number of primes\n    while len(primes) < n:\n        if is_prime(primes[-1]+1):\n            primes.append(primes[-1]+1)\n    #return the sum of the primes\n    return sum(primes)\ndef is_palindrome(n):\n    #reverse the number \n    rn = 0 \n    while n > 0:\n        rn = rn*10 + n%10\n        n = n//10\n    #if they are the same\n    if rn == n:\n        return True\n    return False\ndef is_palindrome_array(n):\n    rn = 0 \n    while n > 0:\n        rn = rn*10 + n%10\n        n = n//10\n    return rn == n\ndef is_pandigital(n):\n    nstr = str(n)\n    #if the length is not 9 or if the numbers are not in order\n    if len(nstr)!= 9 or not is_number(nstr):\n        return False\n    #find all the digits in the string \n    digits = []\n    for i in range(10):\n        digits.append(str(i))\n    #check if each number is in the string \n    for d in digits:\n        if d not in nstr:\n            return False\n    return True\ndef is_number(n):\n    try:\n        int(n)\n        return True\n    except ValueError:\n        return False\ndef is_quadratic(n):\n    if n == 0 or n == 1:\n        return False\n    sqrt = math.sqrt(n)\n    #if the difference is less than 1\n    if abs(sqrt-int(sqrt)) < 1:\n        return True\n    return False\ndef is_quadratic_array(n):\n    if n == 0 or n == 1:\n        return False\n    sqrt = math.sqrt(n)\n    #if the difference is less than 1\n    if abs(sqrt-int(sqrt)) < 1:\n        return True\n    return False\ndef is_self_number(n):\n    #if the number is 1\n    if n == 1:\n        return True\n    #convert the number to string\n    ns = str(n)\n    #if the number is divisible by any single number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_self_number_array(n):\n    #if the number is 1\n    if n == 1:\n        return True\n    #convert the number to string\n    ns = str(n)\n    #if the number is divisible by any single number\n    for i in range(2, len(ns)):\n        if ns[i-1] > ns[i]:\n            return False\n    return True\ndef is_sosu(n):\n    if n == 1:\n        return False\n    #find the prime factors of n\n    factors = []\n    while n%2 == 0:\n        factors.append(2)\n        n = n/2\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        while n%i == 0:\n            factors.append(i)\n            n = n/i\n    #if the number is 1\n    if len(factors) == 0:\n        return True\n    return False\ndef is_sosu_array(n):\n    if n == 1:\n        return False\n    #find the prime factors of n\n    factors = []\n    while n%2 == 0:\n        factors.append(2)\n        n = n/2\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        while n%i == 0:\n            factors.append(i)\n            n = n/i\n    #if the number is 1\n    if len(factors) == 0:\n        return True\n    return False\ndef is_superprime(n):\n    if is_prime(n):\n        return True\n    if n < 100:\n        return False\n    #make the list of primes from 2 to the max\n    primes = [2]\n    while len(primes) < 100:\n        if is_prime(primes[-1]+1):\n            primes.append(primes[-1]+1)\n    #start the search\n    for p in primes:\n        if n%p == 0:\n            return False\n    return True\ndef is_superprime_array(n):\n    if is_prime_array(n):\n        return True\n    if n < 100:\n        return False\n    #make the list of primes from 2 to the max\n    primes = [2]\n    while len(primes) < 100:\n        if is_prime_array(primes[-1]+1):\n            primes.append(primes[-1]+1)\n    #start the search\n    for p in primes:\n        if n%p == 0:\n            return False\n    return True\ndef get_digit_sum(n):\n    digitsum = 0\n    #loop through each digit\n    while n > 0:\n        #add the digit to the sum\n        digitsum = digitsum + n%10\n        #divide the number by 10 \n        n = n//10\n    return digitsum\ndef get_digit_sum_array(n):\n    digitsum = 0\n    #loop through each digit\n    while n > 0:\n        #add the digit to the sum\n        digitsum = digitsum + n%10\n        #divide the number by 10 \n        n = n//10\n    return digitsum\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n*factorial(n-1)\ndef factorial_array(n):\n    if n == 1:\n        return 1\n    return n*factorial_array(n-1)\ndef is_triangle(n):\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    return is_triangle_array(n)\ndef is_triangle_array(n):\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    #if the last two numbers are greater than the sum of the two other numbers\n    if n[-1] > n[-2] + n[-3]:\n        return False\n    return is_triangle_array(n[:-1])\ndef is_trinagle_array(n):\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    #if the last two numbers are greater than the sum of the two other numbers\n    if n[-1] > n[-2] + n[-3]:\n        return False\n    return is_trinagle_array(n[:-1])\ndef is_hexagon(n):\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    return i",
        "test": "assert     div_sum(14) == False",
        "num_ids": 3322,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # make lowercase\n    str1 = str1.lower()\n    # initialize values\n    count_1 = 0\n    count_2 = 0\n    count_3 = 0\n    count_4 = 0\n    count_5 = 0\n    count_6 = 0\n    count_7 = 0\n    count_8 = 0\n    count_9 = 0\n    count_10 = 0\n    count_11 = 0\n    count_12 = 0\n    count_13 = 0\n    count_14 = 0\n    count_15 = 0\n    count_16 = 0\n    count_17 = 0\n    count_18 = 0\n    count_19 = 0\n    count_20 = 0\n    count_21 = 0\n    count_22 = 0\n    count_23 = 0\n    count_24 = 0\n    count_25 = 0\n    count_26 = 0\n    count_27 = 0\n    count_28 = 0\n    count_29 = 0\n    count_30 = 0\n    count_31 = 0\n    count_32 = 0\n    count_33 = 0\n    count_34 = 0\n    count_35 = 0\n    count_36 = 0\n    count_37 = 0\n    count_38 = 0\n    count_39 = 0\n    count_40 = 0\n    count_41 = 0\n    count_42 = 0\n    count_43 = 0\n    count_44 = 0\n    count_45 = 0\n    count_46 = 0\n    count_47 = 0\n    count_48 = 0\n    count_49 = 0\n    count_50 = 0\n    count_51 = 0\n    count_52 = 0\n    count_53 = 0\n    count_54 = 0\n    count_55 = 0\n    count_56 = 0\n    count_57 = 0\n    count_58 = 0\n    count_59 = 0\n    count_60 = 0\n    count_61 = 0\n    count_62 = 0\n    count_63 = 0\n    count_64 = 0\n    count_65 = 0\n    count_66 = 0\n    count_67 = 0\n    count_68 = 0\n    count_69 = 0\n    count_70 = 0\n    count_71 = 0\n    count_72 = 0\n    count_73 = 0\n    count_74 = 0\n    count_75 = 0\n    count_76 = 0\n    count_77 = 0\n    count_78 = 0\n    count_79 = 0\n    count_80 = 0\n    count_81 = 0\n    count_82 = 0\n    count_83 = 0\n    count_84 = 0\n    count_85 = 0\n    count_86 = 0\n    count_87 = 0\n    count_88 = 0\n    count_89 = 0\n    count_90 = 0\n    count_91 = 0\n    count_92 = 0\n    count_93 = 0\n    count_94 = 0\n    count_95 = 0\n    count_96 = 0\n    count_97 = 0\n    count_98 = 0\n    count_99 = 0\n    count_100 = 0\n    count_101 = 0\n    count_102 = 0\n    count_103 = 0\n    count_104 = 0\n    count_105 = 0\n    count_106 = 0\n    count_107 = 0\n    count_108 = 0\n    count_109 = 0\n    count_110 = 0\n    count_111 = 0\n    count_112 = 0\n    count_113 = 0\n    count_114 = 0\n    count_115 = 0\n    count_116 = 0\n    count_117 = 0\n    count_118 = 0\n    count_119 = 0\n    count_120 = 0\n    count_121 = 0\n    count_122 = 0\n    count_123 = 0\n    count_124 = 0\n    count_125 = 0\n    count_126 = 0\n    count_127 = 0\n    count_128 = 0\n    count_129 = 0\n    count_130 = 0\n    count_131 = 0\n    count_132 = 0\n    count_133 = 0\n    count_134 = 0\n    count_135 = 0\n    count_136 = 0\n    count_137 = 0\n    count_138 = 0\n    count_139 = 0\n    count_140 = 0\n    count_141 = 0\n    count_142 = 0\n    count_143 = 0\n    count_144 = 0\n    count_145 = 0\n    count_146 = 0\n    count_147 = 0\n    count_148 = 0\n    count_149 = 0\n    count_150 = 0\n    count_151 = 0\n    count_152 = 0\n    count_153 = 0\n    count_154 = 0\n    count_155 = 0\n    count_156 = 0\n    count_157 = 0\n    count_158 = 0\n    count_159 = 0\n    count_160 = 0\n    count_161 = 0\n    count_162 = 0\n    count_163 = 0\n    count_164 = 0\n    count_165 = 0\n    count_166 = 0\n    count_167 = 0\n    count_168 = 0\n    count_169 = 0\n    count_170 = 0\n    count_171 = 0\n    count_172 = 0\n    count_173 = 0\n    count_174 = 0\n    count_175 = 0\n    count_176 = 0\n    count_177 = 0\n    count_178 = 0\n    count_179 = 0\n    count_180 = 0\n    count_181 = 0\n    count_182 = 0\n    count_183 = 0\n    count_184 = 0\n    count_185 = 0\n    count_186 = 0\n    count_187 = 0\n    count_188 = 0\n    count_189 = 0\n    count_190 = 0\n    count_191 = 0\n    count_192 = 0\n    count_193 = 0\n    count_194 = 0\n    count_195 = 0\n    count_196 = 0\n    count_197 = 0\n    count_198 = 0\n    count_199 = 0\n    count_200 = 0\n    count_201 = 0\n    count_202 = 0\n    count_203 = 0\n    count_204 = 0\n    count_205 = 0\n    count_206 = 0\n    count_207 = 0\n    count_208 = 0\n    count_209 = 0\n    count_210 = 0\n    count_211 = 0\n    count_212 = 0\n    count_213 = 0\n    count_214 = 0\n    count_215 = 0\n    count_216 = 0\n    count_217 = 0\n    count_218 = 0\n    count_219 = 0\n    count_220 = 0\n    count_221 = 0\n    count_222 = 0\n    count_223 = 0\n    count_224 = 0\n    count_225 = 0\n    count_226 = 0\n    count_227 = 0\n    count_228 = 0\n    count_229 = 0\n    count_230 = 0\n    count_231 = 0\n    count_232 = 0\n    count_233 = 0\n    count_234 = 0\n    count_235 = 0\n    count_236 = 0\n    count_237 = 0\n    count_238 = 0\n    count_239 = 0\n    count_240 = 0\n    count_241 = 0\n    count_242 = 0\n    count_243 = 0\n    count_244 = 0\n    count_245 = 0\n    count_246 = 0\n    count_247 = 0\n    count_248 = 0\n    count_249 = 0\n    count_250 = 0\n    count_251 = 0\n    count_252 = 0\n    count_253 = 0\n    count_254 = 0\n    count_255 = 0\n    count_256 = 0\n    count_257 = 0\n    count_258 = 0\n    count_259 = 0\n    count_260 = 0\n    count_261 = 0\n    count_262 = 0\n    count_263 = 0\n    count_264 = 0\n    count_265 = 0\n    count_266 = 0\n    count_267 = 0\n    count_268 = 0\n    count_269 = 0\n    count_270 = 0\n    count_271 = 0\n    count_272 = 0\n    count_273 = 0\n    count_274 = 0\n    count_275 = 0\n    count_276 = 0\n    count_277 = 0\n    count_278 = 0\n    count_279 = 0\n    count_280 = 0\n    count_281 = 0\n    count_282 = 0\n",
        "test": "assert     count_char_position('t') == 1",
        "num_ids": 2325,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    bit = 0\n    for elem in A:\n        bit ^= elem\n    return bit & 1\n",
        "test": "assert     find_even_pair([1,1,2,2,3,4,4,5,5]) == 1",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 1\n    while (p<=n):\n        p = p * 2\n    return p\n",
        "test": "assert     next_power_of_2(513) == 1024",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(0,len(a)): \n        if x==a[i]:\n            count=count+1\n    return count \ndef length(a):\n    '''\n    Write a function to calculate the length of a list.\n    '''\n    return len(a)\ndef pop(a):\n    '''\n    Write a function to remove the last element from a list.\n    '''\n    if length(a)==0:\n        return None\n    else:\n        return a.pop()\ndef sort(a):\n    '''\n    Write a function to sort a list.\n    '''\n    return sorted(a)\ndef reverse(a):\n    '''\n    Write a function to reverse a list.\n    '''\n    return a[::-1]\ndef printList(a):\n    '''\n    Write a function to print a list of elements.\n    '''\n    for i in range(0,len(a)):\n        print(a[i])\ndef duplicate(a):\n    '''\n    Write a function to see if a list has duplicates.\n    '''\n    dup=False\n    b=[]\n    for i in range(0,len(a)):\n        if a[i] not in b:\n            b.append(a[i])\n        else:\n            dup=True\n            break\n    return dup\ndef power(a):\n    '''\n    Write a function to calculate a list to the power of another list.\n    '''\n    pow=[]\n    for i in range(0,len(a)):\n        pow.append(a[i]**2)\n    return pow\ndef maximum(a):\n    '''\n    Write a function to find the maximum value of a list.\n    '''\n    max=a[0]\n    for i in range(1,len(a)):\n        if max<a[i]:\n            max=a[i]\n    return max\ndef minimum(a):\n    '''\n    Write a function to find the minimum value of a list.\n    '''\n    min=a[0]\n    for i in range(1,len(a)):\n        if min>a[i]:\n            min=a[i]\n    return min\ndef count(a,x):\n    '''\n    Write a function to count the number of elements of a list equal to x.\n    '''\n    count=0\n    for i in range(0,len(a)):\n        if a[i]==x:\n            count=count+1\n    return count\ndef index(a,x):\n    '''\n    Write a function to find the index of an element of a list.\n    '''\n    for i in range(0,len(a)):\n        if a[i]==x:\n            return i\n    return None\ndef isEven(a):\n    '''\n    Write a function to see if a list of integers is even.\n    '''\n    for i in range(0,len(a)):\n        if a[i]%2!=0:\n            return False\n    return True\ndef isOdd(a):\n    '''\n    Write a function to see if a list of integers is odd.\n    '''\n    for i in range(0,len(a)):\n        if a[i]%2==0:\n            return False\n    return True\ndef sum(a):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    sum=0\n    for i in range(0,len(a)):\n        sum=sum+a[i]\n    return sum\ndef product(a):\n    '''\n    Write a function to calculate the product of a list.\n    '''\n    prod=1\n    for i in range(0,len(a)):\n        prod=prod*a[i]\n    return prod\ndef append(a,x):\n    '''\n    Write a function to append an element to a list.\n    '''\n    a.append(x)\n    return a\ndef insert(a,x,i):\n    '''\n    Write a function to insert an element into a list at a specific position.\n    '''\n    a.insert(i,x)\n    return a\ndef delete(a,i):\n    '''\n    Write a function to delete an element from a list.\n    '''\n    del a[i]\n    return a\ndef remove(a,x):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    a.remove(x)\n    return a\ndef countX(a,x):\n    '''\n    Write a function to count the number of elements equal to x in a list.\n    '''\n    count=0\n    for i in range(0,len(a)):\n        if a[i]==x:\n            count=count+1\n    return count\ndef addX(a,x):\n    '''\n    Write a function to add an element to a list, but only if the element is not already present.\n    '''\n    if not (x in a):\n        a.append(x)\n    return a\ndef slice(a,i):\n    '''\n    Write a function to slice a list.\n    '''\n    return a[i:]\ndef isSorted(a):\n    '''\n    Write a function to see if a list is sorted.\n    '''\n    for i in range(0,len(a)-1):\n        if a[i]>a[i+1]:\n            return False\n    return True\ndef isEmpty(a):\n    '''\n    Write a function to see if a list is empty.\n    '''\n    if len(a)==0:\n        return True\n    return False\ndef isNumeric(a):\n    '''\n    Write a function to see if a list of strings is all numeric.\n    '''\n    for i in range(0,len(a)):\n        if a[i].isdigit()!=True:\n            return False\n    return True\ndef getLast(a):\n    '''\n    Write a function to get the last element of a list.\n    '''\n    return a[len(a)-1]\ndef getElement(a,i):\n    '''\n    Write a function to get the element at a given position in a list.\n    '''\n    return a[i]\ndef change(a,i,x):\n    '''\n    Write a function to change the element at a given position in a list.\n    '''\n    a[i]=x\n    return a\ndef swap(a,i,j):\n    '''\n    Write a function to swap the elements at given positions in a list.\n    '''\n    a[i],a[j]=a[j],a[i]\n    return a\ndef combine(a,b):\n    '''\n    Write a function to combine two lists.\n    '''\n    c=[]\n    for i in range(0,len(a)):\n        c.append(a[i])\n    for i in range(0,len(b)):\n        c.append(b[i])\n    return c\ndef concat(a,b):\n    '''\n    Write a function to concatenate two lists.\n    '''\n    c=[]\n    for i in range(0,len(a)):\n        c.append(a[i])\n    for i in range(0,len(b)):\n        c.append(b[i])\n    return c\ndef reverse(a):\n    '''\n    Write a function to reverse a list.\n    '''\n    return a[::-1]\ndef popLast(a):\n    '''\n    Write a function to pop the last element from a list.\n    '''\n    return a.pop()\ndef removeDupes(a):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    b=[]\n    for i in range(0,len(a)):\n        if not (a[i] in b):\n            b.append(a[i])\n    return b\ndef shuffle(a):\n    '''\n    Write a function to shuffle a list.\n    '''\n    import random\n    for i in range(0,len(a)):\n        j=random.randint(0,len(a)-1)\n        a",
        "test": "assert     (frequency([],None) == 0)",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n):\n        s += list1[i]\n    return s\n",
        "test": "assert     sum_range_list([1, 2, 3, 4, 5, 6, 7], 7, 7) == 17",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    return 5*a\n",
        "test": "assert     perimeter_pentagon(1) == 5",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 3):\n        if s[i] == 't' and s[i+1] == 'e' and s[i+2] == 'd' and s[i+3] =='':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance('Hello, I am using stdI') == 0",
        "num_ids": 1980,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check_data_type = [type(i) for i in test_tuple]\n    return check_data_type.count(check_data_type[0]) == len(test_tuple)\n    \n",
        "test": "assert     check_type(('1.2',2)) == False",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return (arr.count(x) > n/2)\n",
        "test": "assert     is_majority([1,1,1,2,2,2,3,3,3,3,3,3,3,3,3], 11, 4) == False",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 224,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert     count_Set_Bits(9)     ==     2",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    index = 0\n    str_arr = str.split()\n    res_arr = []\n    for word in str_arr:\n        if index % 2!= 0:\n            res_arr.append(word)\n        index += 1\n",
        "test": "assert     odd_values_string('abcdef') == 'cdef', \"Did not work as expected\"",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     min_of_three(2,3,4) == 2",
        "num_ids": 250,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (n>>i)&1 == 1:\n            return False\n    return True\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(0,0,0)==True",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    first_n_elems = arr[:n]\n    for idx, elem in enumerate(arr[n:]):\n        if elem < 0:\n            first_n_elems.append(elem)\n        else:\n            first_n_elems.insert(idx, elem)\n",
        "test": "assert ",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return \"\".join(char if a == \" \" else a for a in str1)\n",
        "test": "assert     replace_blank('', 'a') == '','should pass'",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    return heapq.nlargest(n, list1)\n",
        "test": "assert     larg_nnum([3,4,5,7,6],0) == []",
        "num_ids": 1825,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    volume=pi*(r**2)*h\n    surf=2*(pi*(r**2))+(h*pi)*(2*r)\n    return surf\n    \ndef lateralsuface_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    volume=4/3*pi*(r**3)*h\n    surf=4*pi*(r**2)+(h*4*pi)*(r**2)\n    return surf\n    \ndef lateralsuface_cube(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cube.\n    '''\n    volume=l*w*h\n    surf=2*(l*w+l*h+w*h)\n    return surf\n",
        "test": "assert     lateralsuface_cylinder(1,8)     ==     40",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    #!/usr/bin/env python\n    # find_volume.py\n    # Author: Mauricio Matamoros\n    # Question 3.3\n    # Purpose: Find the volume of a cube\n    # Input: The length of each side of a cube (int)\n    # Output: The volume of the cube (float)\n    # Example: input: 5; output: 125\n    return l**3\n",
        "test": "assert     volume_cube(2) == 8",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert n to binary string\n    binary_str = str(bin(n)[2:])\n    # Initialise an empty list to store binary string\n    binary_list = []\n    # Iterate through the string and if an '0' is found, append '0' to the list\n    for i in range(0, len(binary_str)):\n        if binary_str[i] == '0':\n            binary_list.append('0')\n        # If an '1' is found, append '1' to the list\n        else:\n            binary_list.append('1')\n    # Convert list to string\n    binary_str = ''.join(binary_list)\n    # Iterate through the string and if a '1' is found, increment the number of '1's\n    count = 0\n    for i in range(0, len(binary_str)):\n        if binary_str[i] == '1':\n            count = count + 1\n    # Return the number of '1's in the string\n    return count\n    \ndef is_palindrome(n): \n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    # Convert n to binary string\n    binary_str = str(bin(n)[2:])\n    # Initialise an empty list to store binary string\n    binary_list = []\n    # Iterate through the string and if an '1' is found, append '1' to the list\n    for i in range(0, len(binary_str)):\n        if binary_str[i] == '1':\n            binary_list.append('1')\n        # If an '0' is found, append '0' to the list\n        else:\n            binary_list.append('0')\n    # Convert list to string\n    binary_str = ''.join(binary_list)\n    # Check if the string is identical to its reverse\n    if binary_str == binary_str[::-1]:\n        return True\n    return False\n    \ndef is_equal(n): \n    '''\n    Write a python function to check whether two numbers are equal or not.\n    '''\n    # Check if the first number is equal to the second number\n    if n == n_2:\n        return True\n    return False\n    \ndef count_bit(n): \n    '''\n    Write a python function to count the number of 1 bits in a given number.\n    '''\n    # Convert n to binary string\n    binary_str = str(bin(n)[2:])\n    # Initialise an empty list to store binary string\n    binary_list = []\n    # Iterate through the string and if a '1' is found, increment the number of '1's\n    count = 0\n    for i in range(0, len(binary_str)):\n        if binary_str[i] == '1':\n            count = count + 1\n    # Return the number of '1's in the string\n    return count\n    \ndef set_bit(n, k): \n    '''\n    Write a python function to set kth bit in a given number.\n    '''\n    # Convert n to binary string\n    binary_str = str(bin(n)[2:])\n    # Initialise an empty list to store binary string\n    binary_list = []\n    # Iterate through the string and if a '1' is found, increment the number of '1's\n    for i in range(0, len(binary_str)):\n        if binary_str[i] == '1':\n            binary_list.append('1')\n        else:\n            binary_list.append('0')\n    # Convert list to string\n    binary_str = ''.join(binary_list)\n    # Iterate through the string and set the kth bit to '1'\n    for i in range(0, k):\n        if binary_str[i] == '1':\n            binary_str = binary_str[:i] + '1' + binary_str[i+1:]\n    # Return the number after converting it to binary string\n    return int(binary_str, 2)\n    \ndef unset_bit(n, k): \n    '''\n    Write a python function to unset kth bit in a given number.\n    '''\n    # Convert n to binary string\n    binary_str = str(bin(n)[2:])\n    # Initialise an empty list to store binary string\n    binary_list = []\n    # Iterate through the string and if a '1' is found, increment the number of '1's\n    for i in range(0, len(binary_str)):\n        if binary_str[i] == '1':\n            binary_list.append('1')\n        else:\n            binary_list.append('0')\n    # Convert list to string\n    binary_str = ''.join(binary_list)\n    # Iterate through the string and unset the kth bit to '0'\n    for i in range(0, k):\n        if binary_str[i] == '1':\n            binary_str = binary_str[:i] + '0' + binary_str[i+1:]\n    # Return the number after converting it to binary string\n    return int(binary_str, 2)\n    \ndef check_bit(n, k): \n    '''\n    Write a python function to check kth bit in a given number.\n    '''\n    # Convert n to binary string\n    binary_str = str(bin(n)[2:])\n    # Initialise an empty list to store binary string\n    binary_list = []\n    # Iterate through the string and if a '1' is found, increment the number of '1's\n    for i in range(0, len(binary_str)):\n        if binary_str[i] == '1':\n            binary_list.append('1')\n        else:\n            binary_list.append('0')\n    # Convert list to string\n    binary_str = ''.join(binary_list)\n    # Iterate through the string and check if the kth bit is '1'\n    if binary_str[k-1] == '1':\n        return True\n    return False\n    \ndef is_power_of_2(n): \n    '''\n    Write a python function to check whether a given number is a power of 2 or not.\n    '''\n    # Check if the first bit is 1\n    if n & (n-1) == 0:\n        return True\n    return False\n    \ndef is_power_of_3(n): \n    '''\n    Write a python function to check whether a given number is a power of 3 or not.\n    '''\n    # Check if the first bit is 1\n    if n & (n-1) == 0:\n        return False\n    # Check if the second bit is 1\n    if n & (n-2) == 0:\n        return False\n    # Check if the third bit is 1\n    if n & (n-4) == 0:\n        return False\n    # Check if the fourth bit is 1\n    if n & (n-8) == 0:\n        return False\n    # If none of the above conditions are satisfied, the number is a power of 3\n    return True\n    \ndef is_power_of_4(n): \n    '''\n    Write a python function to check whether a given number is a power of 4 or not.\n    '''\n    # Check if the first bit is 1\n    if n & (n-1) == 0:\n        return False\n    # Check if the second bit is 1\n    if n & (n-2) == 0:\n        return False\n    # Check if the third bit is 1\n    if n & (n-4) == 0:\n        return False\n    # Check if the fourth bit is 1\n    if n & (n-8) == 0:\n        return False\n    # Check if the fifth bit is 1\n    if n & (n-16) == 0:\n        return False\n    # If none of the above conditions are satisfied, the number is a power of 4\n    return True\n    \ndef is_power_of_5(n): \n    '''\n    Write a python function to check whether a given number is a power of 5 or not.\n    '''\n    # Check if the first bit is 1\n    if n & (n-1) == 0:\n        return False\n    # Check if the second bit is 1\n    if n & (n-2) == 0:\n        return False\n    # Check if the third bi",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for test_item in test_list:\n        test_dict[test_item] = test_dict.get(test_item, 0) + 1\n    return test_dict\n",
        "test": "assert     check_occurences([(1, 2), (1, 2), (1, 2)]) == {(1, 2): 3}",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    len_str = len(str)\n    len_substring = 0\n    for i in range(len_str):\n        count = 1\n        for j in range(i + 1, len_str):\n            if str[j] == str[i]:\n                count += 1\n            else:\n                break\n        if count > 1:\n            len_substring += 1\n    return len_substring\n",
        "test": "assert     number_of_substrings('') == 0",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #the size of the possible subsequences\n    k = n * (n+1)\n    #number of possible permutations\n    l = math.factorial(n)\n    #number of possible sequences\n    m = m + 1\n    return int(l / k / m)\n",
        "test": "assert get_total_number_of_sequences(10,4) == 0",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    result = list1\n    for i in range(0,len(list2)):\n        result[len(list1)-1] = list2[i]\n    return result\n",
        "test": "assert     replace_list([1,2,3,4], [5]) == [1,2,3,5], 'incorrect'",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "test": "assert     count_charac('') == 0",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n    \ndef search_by_bounds(A, x):\n    '''\n    Write a python function to find the bounds (left and right) of an array (excluding the bounds)\n    such that the sum of elements in the array from the lower bound (inclusive) to the upper bound (exclusive) is equal to the given number.\n    '''\n    lo = 0\n    hi = len(A)\n    while lo < hi:\n        mid = lo + (hi-lo)/2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            hi = mid\n        else:\n            lo = mid+1\n    return lo\n",
        "test": "assert     next_Perfect_Square(10) == 2**2",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n    \n    max_ending = arr[0]\n    max_so_far = arr[0]\n    for i in range(1,len(arr)):\n        max_ending = max(arr[i], max_ending + arr[i])\n        max_so_far = max(max_ending, max_so_far)\n    return max_so_far\n",
        "test": "assert     max_sum([-2,-5,-8,-9,-10,-11,-12,-13,-14,-1]) == -1",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001\n    guess = number / 2\n    while abs(guess*guess - number) > epsilon:\n        guess = (guess + number / guess) / 2\n    return guess\n",
        "test": "assert     babylonian_squareroot(4) == 2.0",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    L = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        L[i][i] = 1\n    for cl in range(2,n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i+1][j-1]+2\n            else:\n                L[i][j] = max(L[i][j-1],L[i+1][j])\n    return L[0][n-1]\n",
        "test": "assert     lps(\"a\") == 1",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #array_nums1 = [1,2,3,4,5]\n    #array_nums2 = [4,5,6,7,8]\n    intersection = []\n    for item in array_nums1:\n        if item in array_nums2:\n            intersection.append(item)\n    return intersection\n",
        "test": "assert     intersection_array([],[1,2,3,4,5,6])==[]",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # A generator that yields the index of the element in the tuple\n    index = (i for i, elt in enumerate(tup) if elt == x)\n    # the generator is exhausted once all of the elements in the tuple are gone through\n    count = sum(1 for _ in index)\n    return count\n",
        "test": "assert     count_X((1,2,3,2,4,2,5), 5) == 1",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    new_list = []\n    new_list.append(element)\n    \n    for i in range(len(list)):\n        new_list.append(list[i])\n        \n    return new_list\n    \ndef delete_element(list,element):\n    '''\n    Write a function that takes in a list and an element and deletes the element before each element in the list, and returns the resulting list.\n    '''\n    \n    new_list = []\n    for i in range(len(list)):\n        if list[i]!= element:\n            new_list.append(list[i])\n            \n    return new_list\n    \ndef replace_element(list,element,new_element):\n    '''\n    Write a function that takes in a list, an element, and a new element and replaces each element with the new element in the list, and returns the resulting list.\n    '''\n    \n    new_list = []\n    for i in range(len(list)):\n        if list[i]!= element:\n            new_list.append(list[i])\n        else:\n            new_list.append(new_element)\n            \n    return new_list\n    \ndef count_element(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the number of times the element appears in the list.\n    '''\n    \n    count = 0\n    for i in range(len(list)):\n        if list[i] == element:\n            count += 1\n            \n    return count\n    \ndef index_of_element(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the element in the list.\n    '''\n    \n    for i in range(len(list)):\n        if list[i] == element:\n            return i\n            \ndef union(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a list that contains the elements that appear in either list, but not both.\n    '''\n    \n    return list(set(list_1) ^ set(list_2))\n    \ndef intersection(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a list that contains the elements that appear in both list, but not in both.\n    '''\n    \n    return list(set(list_1) & set(list_2))\n    \ndef diff(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a list that contains the elements that appear in one list but not the other.\n    '''\n    \n    return list(set(list_1) - set(list_2))\n    \ndef is_subset(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a boolean that indicates whether one list is a subset of the other.\n    '''\n    \n    for i in range(len(list_1)):\n        if list_1[i] not in list_2:\n            return False\n        \n    return True\n    \ndef is_superset(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a boolean that indicates whether one list is a superset of the other.\n    '''\n    \n    for i in range(len(list_2)):\n        if list_2[i] not in list_1:\n            return False\n            \n    return True\n    \ndef is_proper_subset(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a boolean that indicates whether one list is a proper subset of the other.\n    '''\n    \n    for i in range(len(list_1)):\n        if list_1[i] not in list_2:\n            return False\n            \n    for i in range(len(list_2)):\n        if list_2[i] not in list_1:\n            return False\n            \n    return True\n    \ndef is_proper_superset(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a boolean that indicates whether one list is a proper superset of the other.\n    '''\n    \n    for i in range(len(list_2)):\n        if list_2[i] not in list_1:\n            return False\n            \n    for i in range(len(list_1)):\n        if list_1[i] not in list_2:\n            return False\n            \n    return True\n    \ndef are_disjoint(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a boolean that indicates whether they are disjoint.\n    '''\n    \n    for i in range(len(list_1)):\n        if list_1[i] in list_2:\n            return False\n            \n    for i in range(len(list_2)):\n        if list_2[i] in list_1:\n            return False\n            \n    return True\n    \ndef cartesian(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a list of tuples that are each a cartesian product of the two lists.\n    '''\n    \n    cartesian_list = []\n    for i in list_1:\n        for j in list_2:\n            cartesian_list.append((i,j))\n            \n    return cartesian_list\n    \ndef inverse_dict(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary with the values as the keys and the keys as the values.\n    '''\n    \n    inv_dict = {}\n    for key, value in d.items():\n        inv_dict[value] = key\n        \n    return inv_dict\n    \ndef is_member(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a boolean that indicates whether the element is in the list.\n    '''\n    \n    for i in range(len(list)):\n        if list[i] == element:\n            return True\n            \n    return False\n    \ndef is_member_list(list,list_1):\n    '''\n    Write a function that takes in a list and a list and returns a boolean that indicates whether each element in the list is in the list.\n    '''\n    \n    for i in range(len(list)):\n        if list[i] not in list_1:\n            return False\n            \n    return True\n    \ndef max_list(list):\n    '''\n    Write a function that takes in a list and returns the maximum element in the list.\n    '''\n    \n    return max(list)\n    \ndef min_list(list):\n    '''\n    Write a function that takes in a list and returns the minimum element in the list.\n    '''\n    \n    return min(list)\n    \ndef remove_duplicates(list):\n    '''\n    Write a function that takes in a list and returns a list that contains only the unique elements of the original list, and without any elements that are duplicates.\n    '''\n    \n    return list(set(list))\n    \ndef largest_common_substring(str_1,str_2):\n    '''\n    Write a function that takes in two strings and returns the length of the longest common substring.\n    '''\n    \n    if len(str_1) < len(str_2):\n        str_1,str_2 = str_2,str_1\n        \n    lcs_table = [[0 for i in range(len(str_2))] for j in range(len(str_1))]\n    \n    for i in range(len(str_1)):\n        for j in range(len(str_2)):\n            if str_1[i] == str_2[j]:\n                if i == 0 or j == 0:\n                    lcs_table[i][j] = 1\n                else:\n                    lcs_table[i][j] = lcs_table[i-1][j-1]+1\n            else:\n                lcs_table[i][j] = 0\n    \n    lcs_length = max(lcs_table[len(str_1)-1])\n",
        "test": "assert     insert_element([1,2,3],0) == [0,1,2,3]",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def to_polar(numbers):\n        def angle(z):\n            return cmath.phase(z)\n        def magnitude(z):\n            return cmath.polar(z)[0]\n        return [(magnitude(z), angle(z)) for z in numbers]\n    return to_polar(numbers)\n",
        "test": "assert     (convert((3, -2)) == (4.49, 0.31))",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    n=0\n    for i in list1:\n        if type(i)==int:\n            n+=1\n    return n\n",
        "test": "assert     count_integer([1,2,3]) == 3",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i + n]) for i in range(len(l))]\n",
        "test": "assert     combinations_colors([1,2,3,4],4) ==     [(1, 2, 3, 4)]",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [True for i in range(n + 1)]\n    primes[0] = False\n    primes[1] = False\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert     swap_numbers(3,4) == (4,3)",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if not len(test_tup1) == len(test_tup2):\n        return None\n    else:\n        return tuple(max(a,b) for a,b in zip(test_tup1, test_tup2))\n",
        "test": "assert     maximize_elements(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c', 'd')",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # d is the nth element of the sequence\n    # x is the prime that forms the nth element of the sequence\n    # y is the next prime to be used in the sequence\n    # x must be odd\n    d = 1\n    x = 2\n    y = 3\n    while d!= n:\n        # modulus is the remainder of the equation\n        # (((x^2-1)^2) * y) / x\n        modulus = (((x**2) - 1)**2) * y / x\n        # the next prime is the square root of the modulus\n        y = math.floor(math.sqrt(modulus))\n        # if the square root is not a perfect square then the\n        # next prime is the square root of the modulus\n        if math.sqrt(modulus) - y**2!= 0:\n            y = y + 1\n        # x is the next odd number that is coprime to y\n        x = coprime(y)\n        d = d + 1\n    return y\n",
        "test": "assert     newman_prime(100) == 947",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert type(test_tup1) == tuple and type(test_tup2) == tuple\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    \n    for i in range(len(test_tup1)):\n        try:\n            test_tup1[i] / test_tup2[i]\n        except ZeroDivisionError:\n            return (False, 'Division by zero!')\n        except TypeError:\n            return (False, 'One of the elements is not an int, float, or long.')\n        except:\n            return (False, 'Something unexpected happened')\n    return True\n",
        "test": "assert     division_elements((2,5), (2,2)) == (1,1)",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    list3 = []\n    for i in range(L):\n        list2.append(list1[i])\n    for i in range(L,len(list1)):\n        list3.append(list1[i])\n    return (list2, list3)\n    \n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_years = float(h_age) * 7\n    return age_in_years\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # import random\n    return [S[x:x+step] for x in range(0, len(S), step)]\n    # return [S[x:x+step] for x in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(",
        "test": "assert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 2292,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "test": "assert     lateralsurface_cube(3) == 54",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 0:\n        print('Error: n must be non-negative')\n        return -1\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(n+1)//2\n",
        "test": "assert     find_star_num(4) == 10",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('A') == 65",
        "num_ids": 204,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + sum_even_and_even_index(arr[2:])\n",
        "test": "assert     (sum_even_and_even_index([2, 3, 4, 4, 6, 7])         ==     12)",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(0, n):\n        if (i**5) % 2 == 0:\n            total += i**5\n    return total\n",
        "test": "assert     even_Power_Sum(4) == 32",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n",
        "test": "assert rear_extract([]) == []",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1_diff = (test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n    return tuple(test_tup1_diff)\n",
        "test": "assert     substract_elements( (3,2,1,4,5), (3,2,1,4,5) ) == (0, 0, 0, 0, 0)",
        "num_ids": 641,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if ( (i%2) == 0):\n            sum = sum + math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return sum\n    \ndef odd_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if ( (i%2)!= 0):\n            sum = sum + math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return sum\n",
        "test": "assert     ( even_binomial_Coeff_Sum( 1) == 1)",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v=math.pi*r**2*h\n    return v\n",
        "test": "assert     volume_cylinder(0,2) == 0",
        "num_ids": 221,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for k,v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n    return new_dict\n",
        "test": "assert     (dict_filter({'a':1,'b':2,'c':3,'d':4,'e':5},2) == {'b':2,'c':3,'d':4,'e':5})",
        "num_ids": 700,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    result = 0\n    for x in test_tup:\n        if x[0] == '0':\n            result += 1\n    return result\n",
        "test": "assert count_first_elements(('e', 'g', 'f', 'a', 'b', 'c', 'd')) == 5",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return sum(list(map(lambda x: int(x)**2, str(n)))) == n\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 2349,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "test": "assert     ( sequential_search([1,3,2,3,4,5,2,1], 1) == (True, 0) )",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n",
        "test": "assert     all_unique([1,2,3,4,5,6,7,8,9]) == True",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
        "test": "assert ",
        "num_ids": 147,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if (n < 10):\n        return True\n    else:\n        if (n%10 == 0):\n            return False\n        else:\n            return validate(n/10)\n",
        "test": "assert     validate(3) == True",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert     check_element([1,1,1],1) == True",
        "num_ids": 243,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[ab]*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('ab') == True",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    left = max_sub_array_sum_repeated(a, n-1, k)\n    if k > 1:\n        return left\n    elif k == 1:\n        return max(a[n-1], a[n-1]*k)\n    else:\n        return max(left, max_sub_array_sum_repeated(a, n-2, k-1) + a[n-1])\n",
        "test": "assert     max_sub_array_sum_repeated([5,4,-1,7,8], 1, 2) == 15",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(map(lambda x: x**2, range(n+1)[2::2]))\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    lengths = []\n    for i in list1:\n        lengths.append(len(i))\n    for i in lengths:\n        if i > max_len:\n            max_len = i\n    return max_len\n",
        "test": "assert         max_length([ [1,2,3], [3,4,5], [2,1,3] ]) == 3",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    table = [[0 for _ in range(k+1)] for _ in range(n+1)] \n    for i in range(1, n+1): \n        for j in range(1, k+1): \n            if i == 1: \n                table[i][j] = j \n            elif j == 1: \n                table[i][j] = 1 \n            else: \n                table[i][j] = table[i-1][j] + table[i-1][j-1] \n    return table[n][k] \n",
        "test": "assert     count_no_of_ways(10, 4) == 248",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    return int(n / m)\n",
        "test": "assert     find(9,3)==3",
        "num_ids": 198,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    hypotenuse = (w**2+h**2)**.5\n    return hypotenuse\n    \ndef first_aid_letter(side):\n    '''\n    Write a function that takes in the width and height of a right angled triangle and \n    returns the length of the first aid rail.\n    '''\n    return (2*side)/math.sqrt(3)\n    \ndef possible_answer(side):\n    '''\n    Write a function to find all the answers that can be given to the question,\n    that is, all the pairs of the lengths of the rails of a right angled triangle \n    that when added to the side of the triangle equals the length of the other two \n    sides of the triangle.\n    '''\n    possible_solutions = []\n    for i in range(1,side):\n        for j in range(1,side):\n            if(i+j == side):\n                possible_solutions.append((i,j))\n    return possible_solutions\n    \ndef maximum_number_of_rails(side):\n    '''\n    Write a function that takes in a side of a right angled triangle and \n    returns the maximum number of rails that can fit into that side of the triangle.\n    '''\n    return int(math.ceil((side**2-side)/2))\n    \ndef connect_intervals(intervals):\n    '''\n    Write a function that takes in a list of intervals and returns the \n    intersection of those intervals.\n    '''\n    sorted_intervals = sorted(intervals)\n    new_intervals = []\n    last_interval = sorted_intervals[0]\n    for interval in sorted_intervals:\n        if interval[0] <= last_interval[1] and interval[1] >= last_interval[0]:\n            last_interval = (last_interval[0], interval[1])\n        else:\n            new_intervals.append(last_interval)\n            last_interval = interval\n    new_intervals.append(last_interval)\n    return new_intervals\n    \ndef number_of_triangles(side,r):\n    '''\n    Write a function that takes in a side of a right angled triangle and \n    a value between 0 and 1 (inclusive) and returns the number of triangles \n    that can be formed by cutting the right angled triangle with the given side \n    and having the ratio r.\n    '''\n    n = 0\n    while(n*r <= side):\n        n += 1\n    return n\n    \ndef number_of_possible_triangles(side,r):\n    '''\n    Write a function that takes in a side of a right angled triangle and \n    a value between 0 and 1 (inclusive) and returns the number of triangles \n    that can be formed by cutting the right angled triangle with the given side \n    and having the ratio r.\n    '''\n    sides = []\n    for n in range(int(math.ceil(r*side)),int(math.floor(r*side))+1):\n        if(n*r <= side):\n            sides.append(n)\n    return len(sides)\n    \ndef angle_between_triangles(side1,side2,side3):\n    '''\n    Write a function that takes in the lengths of three sides of a right-angled triangle\n    and returns the angle between them.\n    '''\n    hypotenuse = (side1**2+side2**2+side3**2)**.5\n    return math.acos(round((hypotenuse**2-side1**2-side2**2)/(2*hypotenuse*side1),4))\n    \ndef string_array_to_int(arr):\n    '''\n    Write a function that takes in an array of integers and returns an integer \n    that represents all the integers in the array.\n    '''\n    return int(\"\".join([str(x) for x in arr]))\n    \ndef length_of_longest_subarray(arr):\n    '''\n    Write a function that takes in an array of integers and returns the length of the \n    longest subarray that consists of a contiguous run of integers.\n    '''\n    longest = 0\n    start = 0\n    current = 1\n    for i in range(1,len(arr)):\n        if arr[i] - arr[i-1] == 1:\n            current += 1\n            if current > longest:\n                longest = current\n                start = i-current+1\n        else:\n            current = 1\n    return (longest, start)\n    \ndef sum_of_digits_of_number(number):\n    '''\n    Write a function that takes in an integer and returns the sum of the digits of \n    the number.\n    '''\n    return sum(int(x) for x in str(number))\n    \ndef average_of_digits(number):\n    '''\n    Write a function that takes in an integer and returns the average of the digits \n    of the number.\n    '''\n    return sum(int(x) for x in str(number))/len(str(number))\n    \ndef return_first_occurrence_of_integer(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n    return -1\n    \ndef find_first_occurrence_of_integer(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n    return -1\n    \ndef return_first_occurrence_of_integer_2(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n        elif arr[i] > number:\n            return -1\n    return -1\n    \ndef return_first_occurrence_of_integer_3(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n        elif arr[i] > number:\n            return -1\n    return -1\n    \ndef return_first_occurrence_of_integer_4(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n        elif arr[i] > number:\n            return -1\n    return -1\n    \ndef return_first_occurrence_of_integer_5(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n        elif arr[i] > number:\n            return -1\n    return -1\n    \ndef return_first_occurrence_of_integer_6(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n        elif arr[i] > number:\n            return -1\n    return -1\n    \ndef return_first_occurrence_of_integer_7(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n        elif arr[i] > number:\n            return ",
        "test": "assert     otherside_rightangle(4,5) == 3.4142135623730951",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval[0], max_val(listval[1:]))\n",
        "test": "assert     max_val(['a','b','c']) == 'c'",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)\n",
        "test": "assert     sum_div(5) == 6",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr = sorted(arr)\n    return sum(a<b for a,b in zip(arr,arr[1:]))\n",
        "test": "assert     get_Inv_Count([1]) == 0",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for item in list1:\n        if isinstance(item, list):\n            res.extend(flatten_list(item))\n        else:\n            res.append(item)\n    return res\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 566,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Sort the tuples in the list by the second element of the tuple\n    stdata.sort(key=lambda x: x[1],reverse=True)\n    # The new aggregate is the sum of the first element of each tuple\n    new_aggregate = 0\n    for tup in stdata:\n        new_aggregate += tup[0]\n    return new_aggregate\n",
        "test": "assert     max_aggregate([(0, 0), (0, 0)]) == 0",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    if n == 1:\n        return 1\n    count = 0\n    for i in xrange(2,n+1):\n        count += count_binary_seq(i-1)\n    return count\n",
        "test": "assert     count_binary_seq(1) == 1",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0",
        "test": "assert dict_depth({'key1': [1, 2, 3], 'key2': {'key3': 4, 'key4': {'key5': {'key6': 6}}}, 'key7': 8}) == 4",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for k in range(index+rotations) : \n        if ranges[k] <= arr[0] :\n            continue \n        elif ranges[k] > arr[0] :\n            return ranges[k]\n",
        "test": "assert     find_Element([1,2,3,4,5,6],[[1,2],[3,4]],0,3) == 1",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    new_list = []\n    for word in words:\n        if word[0] == 'p':\n            new_list.append(word)\n    return new_list\n",
        "test": "assert     start_withp(['polo']) == [('polo', 'polo')]",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return a[0]\n",
        "test": "assert     max_sum_increasing_subseq([1], 1, 0, 0) == 1",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    assert type(tuplex)==tuple\n    assert m>=0 and n>=0\n    if m==0:\n        return ()\n    elif m==1:\n        return (tuplex[n-1],)\n    else:\n        return (tuplex[n-1],) + colon_tuplex(tuplex,m-1,n-1)\ndef dict_remove_key(d,k):\n    assert type(d)==dict\n    assert type(k)==str\n    del d[k]\ndef get_tup_max_len(tup):\n    return max(len(tup[i]) for i in range(len(tup)))\ndef slice_tup(tup,m,n):\n    assert type(tup)==tuple\n    assert m>=0 and n>=0\n    if m==n:\n        return tup\n    elif m==0:\n        return tup[n:]\n    elif n==0:\n        return tup[:m]\n    else:\n        return tup[m:n]\ndef slice_tup_with_empties(tup,m,n):\n    assert type(tup)==tuple\n    assert m>=0 and n>=0\n    return (tup[:m],) + (slice_tup(tup,m,n),) + (tup[n:],)\ndef tup_slice_dict(tup,d,m,n):\n    assert type(tup)==tuple\n    assert type(d)==dict\n    assert m>=0 and n>=0\n    if m==0:\n        return d\n    elif m==1:\n        return d[tup[n-1]]\n    else:\n        return d[tup[n-1]] + tup_slice_dict(tup,d,m-1,n-1)\ndef get_tup_min_len(tup):\n    return min(len(tup[i]) for i in range(len(tup)))\ndef tup_slice_dict_with_empties(tup,d,m,n):\n    assert type(tup)==tuple\n    assert type(d)==dict\n    assert m>=0 and n>=0\n    if m==n:\n        return d\n    elif m==0:\n        return d\n    elif n==0:\n        return d\n    else:\n        return d[tup[m]] + tup_slice_dict_with_empties(tup,d,m-1,n-1)\ndef get_min_max_len(lst):\n    return min(len(lst[i]) for i in range(len(lst)))\ndef get_all_len_from_lst(lst):\n    return [get_min_max_len(lst[i]) for i in range(len(lst))]\ndef get_all_len_from_tup(tup):\n    return get_all_len_from_lst(tup)\ndef change_tup_to_min_len(tup):\n    assert type(tup)==tuple\n    assert len(tup)>0\n    return tup[:min(len(tup[i]) for i in range(len(tup)))]\ndef get_tup_len(tup):\n    return len(tup)\ndef get_tup_len_with_empties(tup):\n    return len(tup) - get_tup_min_len(tup)\ndef split_lst_by_len(lst,n):\n    assert type(lst)==list\n    assert n>=0\n    return [lst[i:i+n] for i in range(0,len(lst),n)]\ndef split_tup_by_len(tup,n):\n    assert type(tup)==tuple\n    assert n>=0\n    return (tup[i:i+n] for i in range(0,len(tup),n))\ndef flatten_lst(lst):\n    assert type(lst)==list\n    return [item for sublist in lst for item in sublist]\ndef flatten_tup(tup):\n    assert type(tup)==tuple\n    return (item for sublist in tup for item in sublist)\ndef add_dict_list_to_dict(d,lst):\n    assert type(d)==dict\n    assert type(lst)==list\n    assert len(lst)>0\n    for i in range(len(lst)):\n        d[lst[i]] = i\ndef add_tup_list_to_tup(tup,lst):\n    assert type(tup)==tuple\n    assert type(lst)==list\n    assert len(lst)>0\n    for i in range(len(lst)):\n        tup = tup + (lst[i],)\n    return tup\ndef add_tup_tup_to_tup(tup1,tup2):\n    assert type(tup1)==tuple\n    assert type(tup2)==tuple\n    return tup1 + tup2\ndef get_tup_min_len_with_empties(tup):\n    return min(len(tup[i]) for i in range(len(tup)))\ndef get_tup_max_len_with_empties(tup):\n    return max(len(tup[i]) for i in range(len(tup)))\ndef get_tup_len_with_empties(tup):\n    return get_tup_min_len_with_empties(tup) + get_tup_max_len_with_empties(tup)\ndef get_tup_len_with_empties_list(lst):\n    return [get_tup_len_with_empties(lst[i]) for i in range(len(lst))]\ndef get_tup_len_with_empties_tup(tup):\n    return get_tup_len_with_empties_list(tup)\ndef get_lst_max_len_with_empties(lst):\n    return max(get_tup_len_with_empties_list(lst[i]) for i in range(len(lst)))\ndef get_tup_max_len(tup):\n    return max(len(tup[i]) for i in range(len(tup)))\ndef get_tup_max_len_list(lst):\n    return [get_tup_max_len(lst[i]) for i in range(len(lst))]\ndef get_tup_max_len_tup(tup):\n    return get_tup_max_len_list(tup)\ndef get_lst_min_len(lst):\n    return min(len(lst[i]) for i in range(len(lst)))\ndef get_lst_min_len_list(lst):\n    return [get_lst_min_len(lst[i]) for i in range(len(lst))]\ndef get_lst_min_len_tup(tup):\n    return get_lst_min_len_list(tup)\ndef get_lst_max_len(lst):\n    return max(len(lst[i]) for i in range(len(lst)))\ndef get_lst_max_len_list(lst):\n    return [get_lst_max_len(lst[i]) for i in range(len(lst))]\ndef get_lst_max_len_tup(tup):\n    return get_lst_max_len_list(tup)\ndef get_lst_len(lst):\n    return len(lst)\ndef get_lst_len_list(lst):\n    return [get_lst_len(lst[i]) for i in range(len(lst))]\ndef get_lst_len_tup(tup):\n    return get_lst_len_list(tup)\ndef remove_tup_from_lst(lst,tup):\n    assert type(",
        "test": "assert     colon_tuplex((1, 2, 3, 4, 5, 6, 7, 8, 9, 10),3,3) == (1, 2, 3)",
        "num_ids": 2458,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return [max(nums1)*max(nums2[:N]) for nums2 in nums2]\n",
        "test": "assert     large_product([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 2) == [12, 6]",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(10,5) == 10",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z') == string_to_tuple('abcdefghijklmnopqrstuvwxyz')",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & (n - 1) == 0:\n        return n\n    return n & (n - 1)\n",
        "test": "assert     set_left_most_unset_bit(1) == 1",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h\n    \n    \ndef prime(n):\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n            \n    return True\n            \n",
        "test": "assert     volume_cone(0,1) == 0.0",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    assert isinstance(n, int) and n >= 0, 'n must be a non-negative integer'\n    p = 1\n    while p <= n: \n        p *= 2\n    return p // 2\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return find_lucas(n/2) + find_lucas(n/2)\n    else:\n        return find_lucas(n-1) + find_lucas(n-1)\n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "test": "assert     add_string([1, 2, 3], '{2}') == [1, 2, 3, 'a', 'a', 'a']",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = l2[i]\n        dictionary[l1[i]+l3[i]] = l3[i]\n    return dictionary\n",
        "test": "assert     convert_list_dictionary([1,2,3], ['a','b','c'], [1,2,3]) == \\",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n == 1):\n        return 1\n    elif (n % 2 == 0):\n        return max(n // 2, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n    elif (n % 3 == 0):\n        return max(n // 3, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n    elif (n % 4 == 0):\n        return max(n // 4, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n    elif (n % 5 == 0):\n        return max(n // 5, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n    else:\n        return n\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for index in range(1, len(input_list)):\n        if len(input_list[index]) > max_len:\n            max_list = input_list[index]\n            max_len = len(max_list)\n    return max_list\n",
        "test": "assert     max_length_list([[1, 3, 4], [2, 3], [5, 6, 7, 8]]) == [5, 6, 7, 8]",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert     check_distinct((1,1,1,2,3,3,3,4,5,5,5,6,7,8,8)) == False",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # For each character in the string, create a hashmap with key as the character and value as 0\n    hashmap = {}\n    for character in str1:\n        if character in hashmap:\n            hashmap[character] += 1\n        else:\n            hashmap[character] = 1\n    \n    # for each character in the string, check if the value of the character is 1 and if it is not the first occurrence of that character\n    # in the string return that character\n    for character in str1:\n        if hashmap[character] == 1 and character!= str1[0]:\n            return character\n    # if no character in the string is 1, return None\n    return None\n",
        "test": "assert     first_non_repeating_character('twwtw') == 'w'",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    if string[0]!= string[-1]:\n        return False\n    return check_char(string[1:-1])\n",
        "test": "assert     check_char('a') == True",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            if b>c:\n                return b\n            else:\n                return c\n        else:\n            return a\n    else:\n        if b>c:\n            if a>c:\n                return a\n            else:\n                return c\n        else:\n            return b\n",
        "test": "assert     median_numbers(1,1,1) == 1",
        "num_ids": 573,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(sum, nums))\n",
        "test": "assert     (sum_of_digits([]) == 0)",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([tup1[i]^tup2[i] for i in range(len(tup1))])\n",
        "test": "assert     bitwise_xor((1,1,0,0), (1,0,1,0)) == (1,0,0,1)",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for word in test_list:\n        freq[word] = freq.get(word, 0) + 1\n    return len(freq)\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 2457,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            new_tup += (test_tup1[i] + test_tup2[i],)\n        return new_tup\n    elif len(test_tup1) > len(test_tup2):\n        return (test_tup1[0] + test_tup2[0],) + add_nested_tuples(test_tup1[1:], test_tup2[1:])\n    else:\n        return (test_tup1[0] + test_tup2[0],) + add_nested_tuples(test_tup1[1:], test_tup2[1:])\n",
        "test": "assert     add_nested_tuples((1,2),(3,4)) == (4,6)",
        "num_ids": 919,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert         (minimum(3, 5) == 3)",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuplex[0]==tuple1[0]):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_tuplex((1,2,3,4,5),(6,7,8,9)) == False",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    y = 0\n    \n    while(x > 0):\n        y = y + x%2\n        x = x/2\n        \n    if y%2 == 0:\n        return 1\n    else:\n        return 0\n    \ndef isPowerOfTwo(n):\n    '''\n    Write a python function to check whether a given number is power of two.\n    '''\n    \n    return ((n!= 0) and (n & (n-1) == 0))\n    \ndef find_MinSwaps(a):\n    '''\n    Write a python function to find the minimum number of swaps required to make an array non-decreasing.\n    '''\n    \n    n = len(a)\n    \n    a = [0] + a\n    \n    f = [0]*n\n    \n    f[0] = a[1] - a[0]\n    \n    for i in range(1,n):\n        f[i] = max(f[i-1],a[i] - a[i-1])\n        \n    count = 0\n    \n    for i in range(1,n):\n        if f[i]!= 0:\n            j = i\n            while j > 0 and a[j] < a[j-1]:\n                a[j],a[j-1] = a[j-1],a[j]\n                j = j-1\n                count = count + 1\n                \n    return count\n    \ndef kth_smallest(a,l,r,k):\n    '''\n    Write a python function to find the kth smallest element in a list.\n    '''\n    \n    if l<r:\n        j = partition(a,l,r)\n        if k < j - l + 1:\n            return kth_smallest(a,l,j-1,k)\n        elif k > j - l + 1:\n            return kth_smallest(a,j+1,r,k-j+l-1)\n        else:\n            return a[j-1]\n        \ndef partition(a,l,r):\n    '''\n    Write a python function to partition the array using quick sort.\n    '''\n    \n    pivot = a[r]\n    i = l-1\n    for j in range(l,r):\n        if a[j] <= pivot:\n            i = i + 1\n            a[i],a[j] = a[j],a[i]\n    a[i+1],a[r] = a[r],a[i+1]\n    return i + 1\n    \ndef find_sum_of_left_side(a,m):\n    '''\n    Write a python function to find the sum of left side elements of a given matrix.\n    '''\n    \n    ans = 0\n    \n    for i in range(len(m)):\n        ans = ans + m[i][0]\n    \n    return ans\n    \ndef find_sum_of_right_side(a,m):\n    '''\n    Write a python function to find the sum of right side elements of a given matrix.\n    '''\n    \n    ans = 0\n    \n    for i in range(len(m)):\n        ans = ans + m[i][-1]\n    \n    return ans\n    \ndef find_sum_of_columns(a,m):\n    '''\n    Write a python function to find the sum of columns elements of a given matrix.\n    '''\n    \n    ans = [0]*len(m[0])\n    \n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            ans[j] = ans[j] + m[i][j]\n    \n    return ans\n    \ndef find_sum_of_row(a,m):\n    '''\n    Write a python function to find the sum of row elements of a given matrix.\n    '''\n    \n    ans = [0]*len(m)\n    \n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            ans[i] = ans[i] + m[i][j]\n    \n    return ans\n    \ndef find_max_square(a):\n    '''\n    Write a python function to find the maximum square subarray in a given array.\n    '''\n    \n    n = len(a)\n    \n    max_square = 0\n    \n    t = [0]*n\n    t[0] = 1\n    \n    for i in range(1,n):\n        if a[i] == 0:\n            t[i] = 0\n        else:\n            t[i] = t[i-1] + 1\n            \n    for i in range(n):\n        for j in range(i,n):\n            k = j - i + 1\n            if k == 1:\n                t[j] = t[j] + 1\n            else:\n                if a[i] == 0:\n                    t[j] = 0\n                else:\n                    for kk in range(k/2):\n                        if (a[i+kk] == 0) and (a[j-kk] == 0):\n                            t[j] = t[j] + 1\n                        else:\n                            break\n            if t[j] > max_square:\n                max_square = t[j]\n    \n    return max_square\n    \ndef find_max_square_with_obstacles(a):\n    '''\n    Write a python function to find the maximum square subarray with obstacles in a given array.\n    '''\n    \n    n = len(a)\n    \n    t = [0]*n\n    \n    max_square = 0\n    \n    for i in range(n):\n        for j in range(i,n):\n            k = j - i + 1\n            if a[i] == 1:\n                t[j] = 0\n            else:\n                t[j] = t[j-1] + 1\n                \n    for i in range(n):\n        for j in range(i,n):\n            k = j - i + 1\n            if a[i] == 1:\n                t[j] = 0\n            else:\n                t[j] = t[j] + 1\n            if t[j] > max_square:\n                max_square = t[j]\n    \n    return max_square\n    \ndef find_smallest_subarray_with_given_sum(a,s):\n    '''\n    Write a python function to find the smallest subarray with given sum.\n    '''\n    \n    ans = -1\n    \n    n = len(a)\n    \n    sum_now = 0\n    \n    i = 0\n    \n    while(sum_now <= s):\n        if sum_now == s:\n            ans = i\n            break\n        sum_now = sum_now + a[i]\n        i = i + 1\n    \n    if ans == -1:\n        return -1\n    \n    min_len = n + 1\n    \n    for j in range(n):\n        if sum_now - a[j] >= s:\n            min_len = min(j - i + 1, min_len)\n            break\n    \n    return min_len\n    \ndef find_the_maximum_value_in_grid(a):\n    '''\n    Write a python function to find the maximum value in a grid.\n    '''\n    \n    n = len(a)\n    \n    m = len(a[0])\n    \n    max_value = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if a[i][j] > max_value:\n                max_value = a[i][j]\n    \n    return max_value\n    \ndef find_largest_rectangle(a):\n    '''\n    Write a python function to find the area of the largest rectangle with horizontal, vertical, and diagonal lines.\n    '''\n    \n    n = len(a)\n    \n    m = len(a[0])\n    \n    max_area = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if i == 0 or j == 0:\n                    a[i][j] = a[i][j] + a[i-1][j] + a",
        "test": "assert     find_Parity(find_Parity(5)) == True",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    l = list(str(n))\n    #print l\n    if len(l) == 1:\n        return n\n    elif len(l) % 2 == 0:\n        new_l = sorted(l[1:])\n        new_l.append(l[0])\n        return int(''.join(new_l))\n    else:\n        new_l = sorted(l[1:])\n        new_l.append(l[0])\n        return int(''.join(new_l))\n",
        "test": "assert     rearrange_bigger(1) == 1",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0 or k > len(nums1) * len(nums2):\n        return []\n    res = []\n    for i in xrange(len(nums1)):\n        for j in xrange(len(nums2)):\n            heapq.heappush(res, (nums1[i] + nums2[j], (i, j)))\n            if len(res) > k:\n                heapq.heappop(res)\n    return [x[1] for x in res]\n",
        "test": "assert     k_smallest_pairs([], [], 2) == []",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pairs = zip(list1, list1[1:])\n    return min(a * b for a, b in pairs)\n",
        "test": "assert     min_product_tuple([(6,5),(4,3),(8,2)])     == (60, 12, 15)",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    minimum = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum\n",
        "test": "assert     min_val([[1, 'a'], [2, 'b']]) == [1, 'a']",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return word\n    if word[0] == '_':\n        word = word[1:]\n        word = word.capitalize()\n    for i in word:\n        if i.isupper():\n            word = word.replace(i, '_'+i)\n    return word\n",
        "test": "assert     snake_to_camel('snake_camel_case') =='snakeCamelCase'",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1=[]\n    for i in l:\n        if i%2!=0:\n            l1.append(i)\n    return l1\n",
        "test": "assert     remove_odd([1,2,3,4,5,6]) == [1,3,5]",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([(1,2), (3,4), (5,6)], 1) == (3,4)",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return bool(set(list1) & set(list2))\n    \n",
        "test": "assert     overlapping([1,2,3,4,5],[4,5,6])==True",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables\n    m = arr[0]\n    n = arr[1]\n    max_product = arr[0]*arr[1]\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                #print max_product, arr[i], arr[j]\n    return max_product\n",
        "test": "assert     max_Product([-2,-3,-4,0,4,-3,2,3,0]) == 12",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input = [('a', 5), ('a', 6), ('b', 7), ('b', 8), ('c', 9)]\n    Output = []\n    for tup in Input:\n        Output.append(tup[0])\n    # print (Output)\n    # Output = ['a', 'b', 'c']\n    return Output\n",
        "test": "assert ",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(i)>max:\n            max = len(i)\n            max_value = i\n    return max_value\n",
        "test": "assert     Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [round(x) for x in list1]\n    return sum(list1) * len(list1)\n",
        "test": "assert     round_and_sum([1.234, 3.45678, 2.23]) == \\",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2,n+1,2): \n        total = total + i**3 \n    return total \n",
        "test": "assert     cube_Sum(10) == 2220, 'Incorrect result'",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "test": "assert ",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize sum and count as 0.\n    sum = 0\n    count = 0\n    # Iterate i from 1 to n.\n    for i in range(1, n+1):\n        # Update sum and count in every iteration.\n        sum = sum + i*i*i\n        count = count + 1\n    # Return average of the sum and count.\n    return float(sum/count)\n",
        "test": "assert     find_Average_Of_Cube(8)    ==     28.5",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [i[-1] for i in test_tuple]\n",
        "test": "assert     extract_rear(('xxx', 'yyy', 'zzz', 'aaa', 'bbb', 'ccc')) == ('yyy', 'zzz', 'aaa', 'bbb')",
        "num_ids": 738,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    num = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            num += 1\n    return num\n",
        "test": "assert     count_element_in_list(['hello','how','are','you','world'], 'how') == 1",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2!= 0]\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.strip()\n    dt = dt.split('-')\n    return '{}-{}-{}'.format(dt[2],dt[1],dt[0])\n",
        "test": "assert     change_date_format('2017-03-09') == '09-03-2017'",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    h = len(my_list)//2\n    while h > 0:\n        for i in range(h, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h //= 2\n    return my_list\n    \n",
        "test": "assert     shell_sort( [ 1, 4, 5, 2, 3 ] ) == [ 1, 2, 3, 4, 5 ]",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([x and y for x, y in zip(test_tup1, test_tup2)])\n    \ndef test_and_tuples():\n    assert (3,5) == and_tuples((3,5,1,0), (1,0,1,0))\n    assert (1,0) == and_tuples((3,5,1,0), (1,0,0,0))\n    assert (3,5) == and_tuples((3,5,0,0), (1,0,1,0))\n    assert (3,5) == and_tuples((3,5,0,0), (0,0,0,0))\n    assert (0,0) == and_tuples((3,5,0,0), (0,0,0,0))\n    assert (3,5) == and_tuples((3,5,0,0), (0,0,0,0))\n    assert (3,5) == and_tuples((0,0,0,0), (0,0,0,0))\n    assert (0,0) == and_tuples((0,0,0,0), (0,0,0,0))\n    assert (0,0) == and_tuples((0,0,0,0), (0,0,0,0))\n    assert (0,0) == and_tuples((0,0,0,0), (0,0,0,0))\n    \n    print(\"tests pass\")\n    \ntest_and_tuples(",
        "test": "assert     and_tuples(('x', 'y', 'z'), ('a', 'b', 'c')) == ('x', 'y', 'z', 'a', 'b', 'c')",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + sqrt((b**2) - (4 * a * c)))/2 * a\n    \nassert parabola_directrix(2, 3, 1) == 2\nassert parabola_directrix(1, -3, 2) == 1\nassert parabola_directrix(1, 2, -3) == -1\n",
        "test": "assert ",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for num1 in list1:\n        for num2 in list2:\n            if num1 == num2:\n                return True\n    return False\n",
        "test": "assert     common_element(['C', 'A', 'T', 'G', 'T'], ['C', 'T', 'A', 'G', 'T']) == True",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "test": "assert     median_trapezium(1,1,1) == 1",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([2, 5, 3, 4, 1, 5], 5) == False, \"Check2 is incorrect\"",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_one('aaab') == True",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n",
        "test": "assert     last_Digit(1) == 1",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l = []\n    for i in list1:\n        if i < 0:\n            l.append(i)\n    return l\n",
        "test": "assert     neg_nos([1,2,-1,-5,6,7]) == [-1,-5]",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new = \"\"\n    for i in str1:\n        if ord(i) % 2 == 1:\n            continue\n        else:\n            new += i\n    return new\n",
        "test": "assert     remove_odd('H') == 'H'",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    def count_tuple(tup1, tup2):\n        if len(tup1)!= len(tup2):\n            return 0\n        \n        count = 0\n        for i in range(len(tup1)):\n            if tup1[i] == tup2[i]:\n                count += 1\n        return count\n    \n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if count_tuple(test_list[i], test_list[j]) == 2:\n                    count += 1\n    return count\n",
        "test": "assert     (1, 1) == count_bidirectional( [(1, 2), (2, 1), (3, 4), (4, 3)])",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(int) for int in L))\n",
        "test": "assert     multiple_to_single([1, 2, 3, 4]) == 1234",
        "num_ids": 270,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return re.findall(r\"adverb\", text)\n",
        "test": "assert     find_adverb_position('What is the airspeed velocity of an unladen swallow?') == {'adverb':'is', 'adverb_position': '8'}",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n",
        "test": "assert     surfacearea_cube(1) == 6",
        "num_ids": 103,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count/len(nums)\n",
        "test": "assert     positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 0",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return None\n",
        "test": "assert     largest_neg([1,2,3]) == None",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trim_list = []\n    for i in test_list:\n        if len(i) == K:\n            trim_list.append(i)\n    return trim_list\n",
        "test": "assert     trim_tuple(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 1) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #len1 = len(test_tup1)\n    #len2 = len(test_tup2)\n    #res = [()]*len1\n    #for i in range(0,len1):\n    #    res[i] = tuple(map(lambda x,y:x*y,test_tup1[i],test_tup2[i]))\n    #return tuple(res)\n",
        "test": "assert     index_multiplication((1, 2), (1, 2)) ==     (2, 4)",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n",
        "test": "assert     count_Occurrence(((1, 2), (3, 4)), [1, 2, 3, 4]) == [0, 1, 1, 1]",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n",
        "test": "assert     cube_nums([1,2,3,4,5,6]) == [1, 8, 27, 64, 125, 216]",
        "num_ids": 225,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1,n):\n        total += i\n    return total\n",
        "test": "assert     cal_sum(20000) == 10022464",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    print(\"\\n\" + str + \"\\n\")\n    \n    if not isinstance(l, list):\n        print(\"List not provided\")\n        return\n    \n    if len(l) < 1:\n        print(\"List is empty\")\n        return\n    \n    print(\"Given list is: \" + str(l))\n    \n    i = 0\n    \n    while i < len(l):\n        if not isinstance(l[i], str):\n            print(\"List element is not a string\")\n            print(\"Removing element at index \" + str(i) + \" from list\")\n            del l[i]\n            continue\n        i += 1\n    \n    print(\"\\nProcessed list is: \" + str(l))\n    \n    size = int(input(\"Enter size of string to extract: \"))\n    \n    i = 0\n    \n    if size > len(l):\n        print(\"Size of string to extract exceeds size of list\")\n        return\n    \n    if size < 1:\n        print(\"Size of string to extract is invalid\")\n        return\n    \n    while i < len(l):\n        if len(l[i]) < size:\n            print(\"String length is less than size of string to extract\")\n            print(\"Removing element at index \" + str(i) + \" from list\")\n            del l[i]\n            continue\n        i += 1\n    \n    print(\"\\nProcessed list is: \" + str(l))\n    \n    return l\n",
        "test": "assert     extract_string(['s1','s2','s3','s4','s5','s6','s7','s8','s9','s10'], 12) == ['s1','s2','s3','s4','s5','s6','s7','s8','s9','s10']",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    res=\"\"\n    for i in text1:\n        if(i!=' '):\n            res=res+i\n    return res\n",
        "test": "assert     remove_whitespaces('a b   c')     == 'abc'",
        "num_ids": 254,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "test": "assert     loss_amount(1000,1000) == 0",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    numFactors = 0\n    for i in range(1,n) :\n        if n % i == 0 and i % 2 == 0 :\n            numFactors = numFactors + i\n    return numFactors\n",
        "test": "assert     (sumofFactors(2) == 0)",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r\"\\bz.{3,}\\b\")\n    pattern.findall(text)\n    return pattern.findall(text)\n",
        "test": "assert     text_match_wordz('This is a cat and this is a mouse and this is a dog and this is a zebra and this is a mouse and this is a cat and this is a mouse and this is a dog and this is a zebra') == ['cat','mouse', 'dog', 'zebra']",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 in (4, 6, 9, 11):\n        return True\n    return False\n",
        "test": "assert     check_monthnumb_number(2) == True",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #strings = [s.strip() for s in stringlist]\n    strings = [s.strip('\"') for s in stringlist]\n    #strings = [s[::-1] for s in strings]\n    strings = [s[::-1] for s in strings]\n    return strings\n",
        "test": "assert     reverse_string_list(['hello', 'world'])         == ['olleh', 'dlrow']",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    Min = lst[0]\n    i = 1\n    while i < len(lst):\n        if len(lst[i]) < len(Min):\n            Min = lst[i]\n        i = i + 1\n    return Min\n",
        "test": "assert     Find_Min([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == [1, 2, 3, 4]",
        "num_ids": 2372,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(2,3) == 6, \"Rectangle area is incorrect!\"",
        "num_ids": 210,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = re.sub('[A-Z]', '', str1)\n    return result\n",
        "test": "assert     remove_uppercase('asd')=='asd'",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list\n",
        "test": "assert     (Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7])",
        "num_ids": 236,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n",
        "test": "assert     upper_ctr('') == 0",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            combinations.append((list1[i], list1[j]))\n    return combinations\n",
        "test": "assert     combinations_list([1, 2, 3, 4, 5]) == [[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 2, 4, 3, 5], [1, 2, 4, 5, 3], [1, 3, 2, 4, 5], [1, 3, 2, 5, 4], [1, 3, 4, 2, 5], [1, 3, 4, 5, 2], [1, 4, 2, 3, 5], [1, 4, 2, 5, 3], [1, 4, 3, 2, 5], [1, 4, 3, 5, 2], [1, 5, 2, 3, 4], [1, 5, 2, 4, 3], [1, 5, 3, 2, 4], [1, 5, 3, 4, 2], [2, 1, 3, 4, 5], [2, 1, 3, 5, 4], [2, 1, 4, 3, 5], [2, 1, 4, 5, 3], [2, 3, 1, 4, 5], [2, 3, 1, 5, 4], [2, 3, 4, 1, 5], [2, 3, 4, 5, 1], [2, 4, 1, 3, 5], [2, 4, 1, 5, 3], [2, 4, 3, 1, 5], [2, 4, 3, 5, 1], [2, 5, 1, 3, 4], [2, 5, 1, 4, 3], [2, 5, 3, 1, 4], [2, 5, 3, 4, 1], [3, 1, 2, 4, 5], [3, 1, 2, 5, 4], [3, 1, 4, 2, 5], [3, 1, 4, 5, 2], [3, 2, 1, 4, 5], [3, 2, 1, 5, 4], [3, 2, 4, 1, 5], [3, 2, 4, 5, 1], [3, 4, 1, 2, 5], [3, 4, 1, 5, 2], [3, 4, 2, 1, 5], [3, 4, 2, 5, 1], [3, 5, 1, 2, 4], [3, 5, 1, 4, 2], [3, 5, 2, 1, 4], [3, 5, 2, 4, 1], [4, 1, 2, 3, 5], [4, 1, 2, 5, 3], [4, 1, 3, 2, 5], [4, 1, 3, 5, 2], [4, 2, 1, 3, 5], [4, 2, 1, 5, 3], [4, 2, 3, 1, 5], [4, 2, 3, 5, 1], [4, 3, 1, 2, 5], [4, 3, 1, 5, 2], [4, 3, 2, 1, 5], [4, 3, 2, 5, 1], [4, 5, 1, 2, 3], [4, 5, 1, 3, 2], [4, 5, 2, 1, 3], [4, 5, 2, 3, 1], [5, 1, 2, 3, 4], [5, 1, 2, 4, 3], [5, 1, 3, 2, 4], [5, 1, 3, 4, 2], [5, 2, 1, 3, 4], [5, 2, 1, 4, 3], [5, 2, 3, 1, 4], [5, 2, 3, 4, 1], [5, 3, 1, 2, 4], [5, 3, 1, 4, 2], [5, 3, 2, 1, 4], [5, 3, 2, 4, 1], [5, 4, 1, 2, 3], [5, 4, 1, 3, 2], [5, 4, 2, 1, 3], [5, 4, 2, 3, 1], [5, 4, 3, 1, 2], [5, 4, 3, 2, 1]]",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    if arr is None or len(arr) == 0:\n        return 0\n    \n    max_prod = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_prod = max(arr[i], max_prod * arr[i])\n        if max_prod < 0:\n            max_prod = 0\n    return max_prod\n",
        "test": "assert     max_subarray_product([1]) == 1",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k in dict.keys():\n        if dict[k]!= n:\n            return False\n    return True\n",
        "test": "assert     check_value({'a':1, 'b':2, 'c':3}, 'd') == False",
        "num_ids": 398,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n==0:\n        return 0\n    result = arr[0]\n    global_max = arr[0]\n    local_max = arr[0]\n    for i in xrange(1, n):\n        local_max = max(local_max*arr[i], arr[i])\n        global_max = max(global_max, local_max)\n    return global_max\n",
        "test": "assert     max_product([1,2,3,4,5,6,7,8,9]) == 80",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple([x+y for x, y in zip(test_tup, test_tup[1:])])\n",
        "test": "assert add_pairwise((1, 2, 3, 4, 5)) == ((2, 3, 4, 5, 6), (3, 4, 5, 6, 7), (4, 5, 6, 7, 8), (5, 6, 7, 8, 9))",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    print n\n    res = 1\n    for i in range(len(arr)):\n        res *= (arr[i] % n)\n    return res % n\n",
        "test": "assert ",
        "num_ids": 128,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(\"True\")\n            return True\n    print(\"False\")\n    return False\n",
        "test": "assert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    len1 = len(test_list1)\n    len2 = len(test_list2)\n    list1 = []\n    list2 = []\n    for i in range(0,len1):\n        list1.append(test_list1[i])\n    for i in range(0,len2):\n        list2.append(test_list2[i])\n    tuple_list = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                tuple_list.append(i)\n    return tuple_list\n",
        "test": "assert     tuple_intersection((3, 2, 1), (1, 2, 4)) == (2, 3)",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1\n    str2 = str2.replace(ch,newch)\n    return str2\n",
        "test": "assert     replace_char('hello','x','y') == 'hello'",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1=sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n    return dict1\ndef word_counter(dictionary):\n    '''\n    Write a function to count words in a dictionary.\n    '''\n    for word in dictionary.keys():\n        word=word.lower()\n        print word\n    return dict(sort_counter(dictionary))\ndef palindrome(word):\n    '''\n    Write a function to check whether a word is palindrome or not.\n    '''\n    word=word.lower()\n    return word[::-1]==word\ndef longest_palindrome(dictionary):\n    '''\n    Write a function to find the longest palindrome in a dictionary.\n    '''\n    word=sorted(dictionary.keys(),key=len)\n    return word[-1]\ndef count_upper_lower(s):\n    '''\n    Write a function to count upper and lowercase letters in a string.\n    '''\n    upper=0\n    lower=0\n    for i in s:\n        if i.isupper():\n            upper+=1\n        elif i.islower():\n            lower+=1\n        else:\n            pass\n    return upper,lower\ndef check_permutation(s1,s2):\n    '''\n    Write a function to check whether two strings are permutations of each other.\n    '''\n    for i in s1:\n        if i in s2:\n            s2=s2.replace(i,'',1)\n        else:\n            return False\n    return True\ndef get_the_int():\n    '''\n    Write a function to get an integer from a string.\n    '''\n    while True:\n        try:\n            int1=input('Enter a number: ')\n            break\n        except ValueError:\n            print('Please enter a valid number.')\n    return int1\ndef generate_binary():\n    '''\n    Write a function to generate a binary string.\n    '''\n    i=get_the_int()\n    while i%2==0:\n        i=get_the_int()\n    print i*'0'+(i-1)*'1'\ndef get_threes_in_row():\n    '''\n    Write a function to get the maximum sum of three consecutive integers.\n    '''\n    i=1\n    sum=0\n    while i<=100:\n        if i%3==0:\n            sum+=i\n        i+=1\n    return sum\ndef generate_triangle():\n    '''\n    Write a function to generate a triangular pyramid.\n    '''\n    i=1\n    while i<=6:\n        print i*'*'\n        i+=1\ndef get_anagrams(string1,string2):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    return Counter(string1)==Counter(string2)\ndef get_dictionary(filename):\n    '''\n    Write a function to get the keys of a dictionary.\n    '''\n    keys=[]\n    with open(filename,'r') as f:\n        for line in f:\n            line=line.rstrip()\n            keys.append(line)\n    return keys\ndef word_anagrams(dictionary):\n    '''\n    Write a function to check if two words are anagrams of each other.\n    '''\n    for word1 in dictionary.keys():\n        for word2 in dictionary.keys():\n            if word1!=word2 and get_dictionary(word1)==get_dictionary(word2):\n                print word1,word2\n    return None\ndef levenshtein_distance(string1,string2):\n    '''\n    Write a function to calculate the Levenshtein distance between two strings.\n    '''\n    if len(string1)>len(string2):\n        string1,string2=string2,string1\n    dist=[[0 for i in range(len(string2)+1)] for j in range(len(string1)+1)]\n    for i in range(1,len(string1)+1):\n        dist[i][0]=i\n    for i in range(1,len(string2)+1):\n        dist[0][i]=i\n    for i in range(1,len(string1)+1):\n        for j in range(1,len(string2)+1):\n            if string1[i-1]==string2[j-1]:\n                dist[i][j]=dist[i-1][j-1]\n            else:\n                dist[i][j]=min(dist[i-1][j]+1,dist[i][j-1]+1,dist[i-1][j-1]+1)\n    return dist[-1][-1]\ndef longest_common_prefix(string1,string2):\n    '''\n    Write a function to find the longest common prefix in two strings.\n    '''\n    if len(string1)>len(string2):\n        string1,string2=string2,string1\n    lcp=''\n    for i in range(len(string1)):\n        if string1[:i+1]==string2[:i+1]:\n            lcp+=string1[:i+1]\n        else:\n            break\n    return lcp\ndef get_valid_input():\n    '''\n    Write a function to get a valid input from the user.\n    '''\n    while True:\n        try:\n            i=input('Enter a number: ')\n            break\n        except ValueError:\n            print('Please enter a valid number.')\n    return i\ndef check_if_prime(number):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if number<2:\n        return False\n    elif number%2==0:\n        return False\n    else:\n        for i in range(3,int(number**0.5)+1):\n            if number%i==0:\n                return False\n    return True\ndef get_the_primes():\n    '''\n    Write a function to get the first n primes.\n    '''\n    i=1\n    while True:\n        if check_if_prime(i):\n            print i\n        i+=1\ndef is_valid(n):\n    '''\n    Write a function to check if a number is a valid credit card number.\n    '''\n    while True:\n        n=get_the_int()\n        if n>999 and n<1000000:\n            break\n    if n%10==0 or n%10>=5:\n        return False\n    else:\n        return True\ndef get_num_digits(num):\n    '''\n    Write a function to calculate the number of digits in a number.\n    '''\n    return len(str(num))\ndef remove_duplicates(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(lst))\ndef get_anagram_indices(string1,string2):\n    '''\n    Write a function to get the indices of an anagram.\n    '''\n    count1=Counter(string1)\n    count2=Counter(string2)\n    for i in range(len(string1)):\n        if string1[i] in count2:\n            count2[string1[i]]-=1\n            if count2[string1[i]]==0:\n                count2.pop(string1[i])\n        if string2[i] in count1:\n            count1[string2[i]]-=1\n            if count1[string2[i]]==0:\n                count1.pop(string2[i])\n    for i in count1:\n        if count1[i]!=0:\n            return None\n    for i in count2:\n        if count2[i]!=0:\n            return None\n    return [i for i in range(len(string1)) if string1[i] in count1 or string2[i] in count2]\ndef remove_vowels(string1):\n    '''\n    Write a function to remove vowels from a string.\n    '''\n    vowels=['a','e','i','o','u']\n    string1=string1.lower()\n    for i in vowels:\n        string1=string1.replace(i,'')\n",
        "test": "assert sort_counter({2: 3, 4: 3, 1: 1}) == [1, 2, 3, 4]",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = sum(nums)\n    n = len(nums)\n    return s - min(nums) - max(nums)\n",
        "test": "assert     big_sum([10,4,1,8,7]) == 19",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('A')",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n",
        "test": "assert     remove_lowercase('XYZ') == 'XYZ'",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    return n//10\n",
        "test": "assert     first_Digit(24) == 2",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    ret = []\n    for e in list:\n        if e%2 == 1:\n            ret.append(e)\n    return ret\n",
        "test": "assert     [3, 5, 7, 9, 11, 13]    == Split([3, 5, 7, 9, 11, 13])",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of the first n natural numbers\n    sum_of_first_n = 0\n    for i in range(1, n+1) :\n        sum_of_first_n += i\n    # sum of the first n natural numbers \n    sum_of_cubes_of_first_n = 0\n    for i in range(1, n+1) :\n        sum_of_cubes_of_first_n += i ** 3\n    # print(\"Sum of first {} natural numbers is : {}\".format(n, sum_of_first_n))\n    # print(\"Sum of cubes of first {} natural numbers is : {}\".format(n, sum_of_cubes_of_first_n))\n    print(\"The difference between the sum of cubes of the first {} natural numbers and the sum of the first {} natural numbers is {}\".format(n, n, sum_of_cubes_of_first_n - sum_of_first_n))\n",
        "test": "assert     difference(4) == 3",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i]^A[j]&1 :\n                print '\\nPairs with odd xor value :'\n                print i,j\n                break\n",
        "test": "assert     find_Odd_Pair([1,2,3,4],4) == 0",
        "num_ids": 2428,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string(\"\") == \"\"",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1))!= len(str(n2)):\n        raise ValueError(\"The two numbers should have the same length\")\n    else:\n        count = 0\n        for i in range(len(str(n1))):\n            count += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return count\n",
        "test": "assert     digit_distance_nums(1, 1) == 0",
        "num_ids": 465,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    else:\n        return max(a[size - 1] + max_sub_array_sum(a, size - 2), max_sub_array_sum(a, size - 1))\n",
        "test": "assert     max_sub_array_sum([], 0) == 0",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Hint: use '|' as the operator to combine two tuples.\n    return sorted(test_tup1 | test_tup2)\n",
        "test": "assert     union_elements((1,2,3,4,5),(1,2,3,4)) == (1,2,3,4,1,2,3,4,5)",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length=0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if lst[i]==lst[j]:\n                length=length+1\n    return length\n    \n    \n    \ndef max_sublist(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length=0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if lst[i]==lst[j]:\n                length=length+1\n    return length\n    \ndef Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length=0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if lst[i]==lst[j]:\n                length=length+1\n    return length\n",
        "test": "assert     Find_Max_Length(['a', 'b', 'c', 'd', 'e']) == 5",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    p = re.compile(r'\\\"(.+?)\\\"')\n    m = p.findall(text)\n    return m\n",
        "test": "assert     extract_values('[[1,2], [3,4], [5,6]]') == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                pairs+=1\n    return pairs\n    ",
        "test": "assert     count_Pairs([1,2,3,4,5,6,7,8], 1) == 0",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if word == \"\":\n        return []\n    return [char for char in word]\n",
        "test": "assert     split('word') == ['w', 'o', 'r', 'd']",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n",
        "test": "assert     issort_list(    [3,4,9,0,1]) == False, \"Incorrect\"",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n",
        "test": "assert     empty_list(3) == [{}, {}, {}], \"incorrect definition for empty_list\"",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if not list1:\n        return None\n    if len(list1)==1:\n        return list1\n    else:\n        return merge(sort_sublists(list1[:len(list1)/2]),sort_sublists(list1[len(list1)/2:]))\n",
        "test": "assert     sort_sublists(['f'])                        ==     ['f']",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    no_duplicates_list = list(set(nums))\n    return no_duplicates_list\n",
        "test": "assert     two_unique_nums([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 2738,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list=[]\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product=1\n    for i in unique_list:\n        product=product*i\n    return product\n",
        "test": "assert     unique_product([1]) == [1]",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi * (r**2 + h**2)\n",
        "test": "assert     surfacearea_cylinder(2,3) == surfacearea_cylinder(2,3)",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A) \n    m = len(B) \n    j = 0\n    i = 0\n    while i<=n-m: \n        temp = A[i:i+m] \n        if temp == B: \n            j = 1\n            break\n        i += 1\n    if j == 1: \n        return True\n    else: \n        return False\n    \n",
        "test": "assert     is_Sub_Array([1,2,3,4,5], [1,2,3,4,5])",
        "num_ids": 542,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    nFactorial = 1\n    for i in range(1, n+1):\n        nFactorial *= i\n    print(nFactorial)\n    return (nFactorial % 10)\n",
        "test": "assert     last_Digit_Factorial(3) == 6",
        "num_ids": 326,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # To interleave 3 lists we create a new list of length 2*length(list1),\n    # which we populate with the first element of each list, then the second element of each\n    # list and so on. We then iterate through the new list and add the remaining elements of each list\n    # into the new list until the whole list is populated.\n    # For example, with the lists\n    # list1 = [1,2,3]\n    # list2 = [4,5,6]\n    # list3 = [7,8,9]\n    # we get a new list of length 6 as follows:\n    # new_list = [1, 4, 7, 2, 5, 8, 3, 6, 9]\n    # In Python, we can achieve this by defining a list of length 6, and then iterating through the\n    # list of length 2*length(list1), replacing the current index of the new list with the first\n    # element of list1, then with the second element of list1, and so on.\n    # Once we have interleaved all the elements of the input lists, we can return the new list as follows:\n    # return [1, 4, 7, 2, 5, 8, 3, 6, 9]\n    # Time Complexity: O(n) where n is the number of elements in the longest list\n    # Space Complexity: O(n)\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n",
        "test": "assert     interleave_lists([1, 2], [3, 4], [5, 6]) == [1, 3, 5, 2, 4, 6]",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return (test_tup1[0], test_tup2[1])\n    elif test_tup1[1] == test_tup2[1]:\n        return (test_tup1[1], test_tup2[0])\n    else:\n        return (test_tup1[0], test_tup2[0])\n",
        "test": "assert     find_dissimilar(('a', 'a'), ('b', 'b')) == ('a', 'b')",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_fnc(i)\n        else:\n            if i % 2 == 0:\n                continue\n            else:\n                pass\n    return test_tuple\n",
        "test": "assert     even_ele    ((1,2,3,4,5),     lambda x: x%2==0) == (1,2,3,4,5)",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b*2)+(b*2)+(b*2)\n    return surface_area\n",
        "test": "assert     surface_Area(5,4) == 30",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1:\n        if dict1[key]:\n            return False\n    return True\n",
        "test": "assert     my_dict({}) == True",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1, 1]\n    for i in xrange(2, num):\n        catalan.append(0)\n        for j in xrange(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[num - 1]\n",
        "test": "assert     catalan_number(4) == 2",
        "num_ids": 2245,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\bly\\b', text)\n    for adverb in adverbs:\n        print('{}'.format(adverb))\n",
        "test": "assert     find_adverbs(\"I love to play football so much.\") == \\",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return [items[i] for i in range(n)]\n",
        "test": "assert     expensive_items([[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20]],0) == []",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    for i in range(0, len(l), n):\n        arr.append(l[i:i+n])\n    return arr\n",
        "test": "assert     split_Arr([1,2,3,4], 2) == [[1, 2], [3, 4]]",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1,2,3])    ==     (1,2,3)",
        "num_ids": 170,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([1,2,3]) == 2",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    if a < b:\n        for i in range(a, b+1):\n            square = i**2\n            if square > b:\n                break\n            squares.append(square)\n    else:\n        for i in range(b, a+1):\n            square = i**2\n            if square > a:\n                break\n            squares.append(square)\n    return squares\n",
        "test": "assert         []             == perfect_squares(10, 30)",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = int(x)\n    y = int(y)\n    if x>0 and y>0:\n        return x,y\n    elif x>0 and y<0:\n        return x,2*y\n    elif x<0 and y>0:\n        return 2*x,y\n    else:\n        return 2*x,-y\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = int(x)\n    y = int(y)\n    if x>0 and y>0:\n        return x,y\n    elif x>0 and y<0:\n        return x,2*y\n    elif x<0 and y>0:\n        return 2*x,y\n    else:\n        return 2*x,-y\ndef cartesian_distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points in 2D space.\n    '''\n    return (x2-x1)**2+(y2-y1)**2\ndef polar_distance(r1,theta1,r2,theta2):\n    '''\n    Write a function to calculate the distance between two points on a sphere in polar coordinates.\n    '''\n    return cmath.sqrt((r2-r1)*(r2-r1)+(theta2-theta1)*(theta2-theta1))\ndef cartesian_to_polar(x1,y1,x2,y2):\n    '''\n    Write a function to convert a point from cartesian coordinates to polar coordinates.\n    '''\n    x1 = float(x1)\n    y1 = float(y1)\n    x2 = float(x2)\n    y2 = float(y2)\n    if x1==0 and y1==0 and x2==0 and y2==0:\n        return 0,0\n    elif x1==0 and y1==0 and x2!=0 and y2!=0:\n        return x2,-y2\n    elif x1!=0 and y1==0 and x2==0 and y2!=0:\n        return y2,x2\n    elif x1!=0 and y1!=0 and x2==0 and y2==0:\n        return y1,-x1\n    elif x1!=0 and y1!=0 and x2!=0 and y2==0:\n        return polar_distance(x1,0,x2,0)\n    elif x1!=0 and y1!=0 and x2!=0 and y2!=0:\n        return cmath.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    else:\n        return 0\ndef polar_to_cartesian(r,theta,x1,y1):\n    '''\n    Write a function to convert a point from polar coordinates to cartesian coordinates.\n    '''\n    r = float(r)\n    theta = float(theta)\n    x1 = float(x1)\n    y1 = float(y1)\n    if r==0 and theta==0:\n        return 0,0\n    elif r==0 and theta!=0:\n        return 0,x1*cmath.sin(theta)\n    elif r!=0 and theta==0:\n        return y1*cmath.cos(r),0\n    elif r!=0 and theta!=0:\n        return (x1*cmath.cos(r)*cmath.sin(theta))+(y1*cmath.sin(r)*cmath.sin(theta))\n    else:\n        return 0\ndef rectangle_area(a,b):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    a = int(a)\n    b = int(b)\n    return a*b\ndef circle_area(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    r = int(r)\n    return cmath.pi*r*r\ndef intersection_area(x1,y1,x2,y2,r,t):\n    '''\n    Write a function to calculate the area of the intersection of a circle and a rectangle.\n    '''\n    x1 = int(x1)\n    y1 = int(y1)\n    x2 = int(x2)\n    y2 = int(y2)\n    r = int(r)\n    t = int(t)\n    a = rectangle_area(x2,y2)\n    b = rectangle_area(x1,y1)\n    c = rectangle_area(r,t)\n    if c>a and c>b:\n        if a>b:\n            return rectangle_area(x2,y2)\n        elif a<b:\n            return rectangle_area(x1,y1)\n    elif c>a and c<b:\n        return rectangle_area(r,t)\n    elif c<a and c<b:\n        return rectangle_area(x1,y1)\n    else:\n        return 0\ndef circular_overlap(r1,theta1,r2,theta2):\n    '''\n    Write a function to calculate the area of the overlap between two circles.\n    '''\n    r1 = int(r1)\n    theta1 = int(theta1)\n    r2 = int(r2)\n    theta2 = int(theta2)\n    if theta1!=theta2 and r1!=r2:\n        return rectangle_area(r1,theta1,r2,theta2)\n    elif theta1==theta2 and r1==r2:\n        return 0\n    elif theta1==theta2 and r1!=r2:\n        return circle_area(r1)\n    elif theta1!=theta2 and r1==r2:\n        return circle_area(r1)*2\n    else:\n        return rectangle_area(r1,theta1,r2,theta2)*2\ndef rectangle_overlap(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the area of the overlap between two rectangles.\n    '''\n    x1 = int(x1)\n    y1 = int(y1)\n    x2 = int(x2)\n    y2 = int(y2)\n    x3 = int(x3)\n    y3 = int(y3)\n    x4 = int(x4)\n    y4 = int(y4)\n    if x1==x2 and y1==y2 and x3==x4 and y3==y4:\n        return 0\n    elif x1!=x2 and y1==y2 and x3==x4 and y3==y4:\n        return rectangle_area(x2,y2)\n    elif x1==x2 and y1!=y2 and x3==x4 and y3==y4:\n        return rectangle_area(x1,y1)\n    elif x1!=x2 and y1!=y2 and x3==x4 and y3==y4:\n        return rectangle_area(x2,y2)\n    elif x1==x2 and y1!=y2 and x3!=x4 and y3==y4:\n        return rectangle_area(x1,y1)\n    elif x1!=x2 and y1==y2 and x3!=x4 and y3!=y4:\n        return rectangle_area(x2,y2)\n    elif x1==x2 and y1==y2 and x3!=x4 and y3!=y4:\n        return rectangle_area(x1,y1)\n    elif x1!=x2 and y1!=y2 and x3==x4 and y3!=y4:\n        return rectangle_area(x2,y2)\n    elif x1==x2 and y1==y2 and x3!=x4 and y3==y4:\n        return rectangle_area(x1,y1)\n    e",
        "test": "assert     polar_rect(0,0) == (0,0)",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    if size > 1:\n        newList[0], newList[size-1] = newList[size-1], newList[0]\n    return newList\n",
        "test": "assert     ( swap_List([8,9]) == [9,8] )",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for x in range(k+1)] for x in range(n+1)] \n    for i in range(n+1): \n        for j in range(min(i,k)+1): \n            if j == 0 or j == i: \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][k] \n",
        "test": "assert ",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.count('.') == 3 and ip.startswith('0'):\n        return ip.lstrip('0')\n    else:\n        return ip\ndef get_int_ip(ip):\n    ip_list = ip.split('.')\n    return int(ip_list[0])*256*256*256+int(ip_list[1])*256*256+int(ip_list[2])*256+int(ip_list[3])\ndef strip_leading_zero(num):\n    if num < 10:\n        return \"0\"+str(num)\n    else:\n        return str(num)\ndef get_ip_range(start_ip, end_ip):\n    '''\n    Write a function that takes a start IP address in the form of a string\n    and an end IP address in the form of a string and returns a list of\n    all IP addresses in the range (including the start and end IP addresses\n    themselves).\n    '''\n    start_ip_int = get_int_ip(start_ip)\n    end_ip_int = get_int_ip(end_ip)\n    ip_list = []\n    for i in range(start_ip_int, end_ip_int+1):\n        ip_list.append(strip_leading_zero(i))\n    return ip_list\ndef get_ip_range_string(start_ip, end_ip):\n    '''\n    Write a function that takes a start IP address in the form of a string\n    and an end IP address in the form of a string and returns a string\n    that contains the concatenation of all IP addresses (in CIDR notation)\n    in the range (including the start and end IP addresses themselves)\n    that are reachable from the start IP address.\n    '''\n    ip_list = get_ip_range(start_ip, end_ip)\n    ip_list = map(lambda ip:ip+'/32', ip_list)\n    return ','.join(ip_list)\ndef get_ip_network_range(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_int = get_int_ip(ip)\n    mask_int = 2**(32-cidr_mask) - 1\n    return strip_leading_zero(ip_int & mask_int)\ndef get_ip_network_range_string(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_network_range = get_ip_network_range(ip, cidr_mask)\n    return get_ip_range_string(ip_network_range, cidr_mask)\ndef get_ip_broadcast_range(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the broadcast IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_int = get_int_ip(ip)\n    mask_int = 2**(32-cidr_mask) - 1\n    return strip_leading_zero(ip_int | ~mask_int)\ndef get_ip_broadcast_range_string(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the broadcast IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_network_range = get_ip_network_range(ip, cidr_mask)\n    ip_broadcast_range = get_ip_broadcast_range(ip_network_range, cidr_mask)\n    return get_ip_range_string(ip_broadcast_range, cidr_mask)\ndef get_ip_network_cidr(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_int = get_int_ip(ip)\n    mask_int = 2**(32-cidr_mask) - 1\n    return strip_leading_zero(ip_int & mask_int)\ndef get_ip_network_cidr_string(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_network_cidr = get_ip_network_cidr(ip, cidr_mask)\n    return get_ip_range_string(ip_network_cidr, cidr_mask)\ndef get_ip_broadcast_cidr(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the broadcast IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_int = get_int_ip(ip)\n    mask_int = 2**(32-cidr_mask) - 1\n    return strip_leading_zero(ip_int | ~mask_int)\ndef get_ip_broadcast_cidr_string(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the broadcast IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_broadcast_cidr = get_ip_broadcast_cidr(ip, cidr_mask)\n    return get_ip_range_string(ip_broadcast_cidr, cidr_mask)\ndef get_ip_mask_range(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_int = get_int_ip(ip)\n    mask_int = 2**(32-cidr_mask) - 1\n    return strip_leading_zero(ip_int & mask_int)\ndef get_ip_mask_range_string(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_mask_range = get_ip_mask_range(ip, cidr_mask)\n    return get_ip_range_string(ip_mask_range, cidr_mask)\ndef get_ip_mask_cidr(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_int = get_int_ip(ip)\n    mask_int = 2**(32-cidr_mask) - 1\n    return strip_leading_zero(ip_int & mask_int)\ndef get_ip_mask_cidr_string(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip",
        "test": "assert     removezero_ip('10.0.0.1') == '10.0.0.1'",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        first_odd = list1[1]\n        first_even = list1[0]\n        if first_even % 2 == 0:\n            return first_odd - first_even\n        else:\n            return first_odd - first_even\n    \ndef rotate_list(list1, n):\n    '''\n    Write a function to rotate a list n times, where n is a positive integer.\n    '''\n    if len(list1) == 0:\n        return list1\n    elif len(list1) == 1:\n        return [list1[-1]]\n    else:\n        new_list = [list1[-1]]\n        if n > 1:\n            for i in range(1, n):\n                new_list.append(list1[0])\n                del list1[0]\n        else:\n            for i in range(0, n):\n                new_list.append(list1[-1])\n                del list1[-1]\n        return new_list\n",
        "test": "assert     [10, 8, 6, 4, 2] == diff_even_odd([10, 8, 6, 4, 2])",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    n = len(str1)\n    for i in range(n) : \n        if str1[i]!= str2[i] : \n            count += 1\n            if str1[i] == '0' and str2[i] == '1' : \n                str1 = str1[:i] + '1' + str1[i+1:]\n            elif str1[i] == '1' and str2[i] == '0' : \n                str1 = str1[:i] + '0' + str1[i+1:]\n    return count\n",
        "test": "assert     min_Swaps('001001', '111001') == 2",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_len=0\n    for val in tuple_list:\n        tuple_len=tuple_len+sys.getsizeof(val)\n    return tuple_len\n",
        "test": "assert     tuple_size([]) == 0",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    \n    i, j = 0, 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n            \n        if i == len(arr1):\n            return arr2[j + k - 1]\n        \n        if j == len(arr2):\n            return arr1[i + k - 1]\n    \n    \n    \n    \n",
        "test": "assert     find_kth([], [], 0) == None",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # To check the Armstrong number we consider the numbers from 1 to 10000.\n    # A number is called Armstrong if it is equal to the sum of the squares of its digits.\n    # Example: 153 = 1**3 + 5**3 + 3**3 = 1 + 125 + 27 = 153\n    # A number is called Armstrong if the sum of the digits of the number is equal to the number itself.\n    # Example: 371 = 3**3 + 7**3 + 1**3 = 371\n    # The only possible Armstrong number is 153\n    # We can iterate over the range 1 to number and check if the number is Armstrong\n    # Time Complexity is O(n)\n    number_to_check = str(number)\n    length = len(number_to_check)\n    result = 0\n    for i in range(length):\n        digit = int(number_to_check[i])\n        result += digit**length\n        if result == int(number_to_check):\n            return True\n    return False\n",
        "test": "assert     armstrong_number(153) == True",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # simple implementation\n    s = 0.0\n    for i in range(1,number+1):\n        s += i\n    print(\"Sum of first %d natural numbers is: %f\" %(number,s))\n    return s/number\n",
        "test": "assert         sum_average(1) == 1",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n",
        "test": "assert     is_Even(0) == True",
        "num_ids": 150,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str2 = str1[:]\n    for char in str1:\n        if str2.count(char) > 1:\n            return char\n        else:\n            str2 = str2.replace(char,'',1)\n    return None\n",
        "test": "assert     first_repeated_char('peter peter') == 'p'",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Build a list of all valid numbers up to n, where a number is valid if it is a \n    # number divisible by 3 and/or 5, and not divisible by 7.\n    valid_numbers = list(range(1,n+1,1))\n    valid_numbers = [x for x in valid_numbers if x%3==0 and x%5==0 and x%7!=0]\n    # Since we are working with ints, convert the valid numbers into strings\n    valid_numbers_str = [str(x) for x in valid_numbers]\n    return valid_numbers_str\n",
        "test": "assert     get_ludic(3) == []",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "test": "assert     reverse_words('Hi my name is Mr.Do') == 'Do my name is Hi'",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(1) == False, \"1 should be False\"",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n",
        "test": "assert     radian_degree(1)    ==    0.017453292519943295",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pat = re.compile(pattern)\n    results = re.search(pat, text)\n    if results:\n        start, end = results.span()\n        return text[start:end], start, end\n    return None, None, None\n",
        "test": "assert         re.search(r'\\w{3}', 'welcome').group() == 'wel'",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n",
        "test": "assert     bell_Number(0) == 1",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L < 1:\n        return None\n    else:\n        if L > len(list1):\n            return None\n        else:\n            return list1[:L-1] + list1[L:]\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5], 4) == [1, 2, 3, 5]",
        "num_ids": 314,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(lambda x: x[N], test_list))\n",
        "test": "assert     max_of_nth([[1, 2, 3], [4, 5, 6]], 2) == 6, \"Failed\"",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append([i[0],i[1]])\n    return new_lst\n",
        "test": "assert merge([[\"cat\", \"dog\"], [\"dog\", \"cat\"]]) == [['cat', 'dog'], ['dog', 'cat']]",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return reduce(lambda acc, x: acc + x, test_list, 0)\n",
        "test": "assert ",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for index,value in enumerate(nums):\n        averages.append(sum(value)/len(value))\n    return averages\n    \n    \n    \nprint(average_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))\nprint(average_tuple([(4, 5, 6), (7, 8, 9)]))\nprint(average_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]))\n",
        "test": "assert     average_tuple(((3,),(4,),(5,))) == [3, 4, 5]",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('tuple_modulo(): argument length error')\n    return tuple([x%y for x,y in zip(test_tup1,test_tup2)])\n",
        "test": "assert     (1, 2, 3)    == tuple_modulo((1, 2, 3), (4, 5, 6))",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Base case\n    if steps == 0:\n        return 0\n    \n    # If we reach the origin and then we have to jump\n    if steps <= d and d!= 0:\n        return 1\n    \n    # If we reach the origin and then we have to jump\n    elif steps == 1:\n        return 0\n    \n    # We have to jump \n    else:\n        return 1 + min_Jumps(steps-1, d)\n        \n",
        "test": "assert     min_Jumps(9, [0, 0]) == 0",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i,j in zip(nums1,nums2):\n        result.append(i/j)\n    return result\n",
        "test": "assert     div_list([1,2,3],[1,2,3]) == [1,1,1]",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    import re\n    return re.sub('\\d', '', test_str) + re.sub('\\d+', '', test_str)\n",
        "test": "assert     move_num(\"1s2she2s1t3i5s\") == \"12s2he2s1t3i5s\"",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets = {0: 0}\n    for i in range(1, len(a) + 1):\n        # print(i, a)\n        subsets[i] = i\n        for j in range(1, i // 2 + 1):\n            if (a[j] % a[i - j]) == 0:\n                subsets[i] = max(subsets[i], subsets[j] + 1)\n    return subsets[len(a)]\n",
        "test": "assert     largest_subset([2, 4, 6, 8]) == 4",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n",
        "test": "assert     get_median([1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], 7) == 7",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n",
        "test": "assert     nth_nums([3,4,5],4) == [64,16,1]",
        "num_ids": 288,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert     is_upper('Hello World!') == False, 'The fourth test failed'",
        "num_ids": 259,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    l = len(newList)\n    newList[0] = newList[l-1]\n    newList[l-1] = newList[0]\n    return newList\n",
        "test": "assert     swap_List(['e','d','c','b','a']) == ['e','d','c','b','a']",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3*r*r/4\n",
        "test": "assert     (triangle_area(0) == 0)",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return start\n    mid = start + (end - start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n",
        "test": "assert     find_First_Missing([0,1,2,4,6,8,9,10,12,14]) == 3",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 628,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces('Mr John Smith') == 'Mr%20John%20Smith'",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    l=list[::2]\n    return l\ndef Divisible_by_five(n):\n    '''\n    Write a python function to find numbers divisible by five from a list of numbers.\n    '''\n    l=[]\n    for i in range(0,n):\n        if (i%5==0):\n            l.append(i)\n    return l\ndef numbers_to_string(n):\n    '''\n    Write a python function to convert a list of numbers to a string.\n    '''\n    s=''\n    for i in range(0,n):\n        s=s+str(i)\n    return s\ndef remove_vowels(str):\n    '''\n    Write a python function to remove vowels from a string.\n    '''\n    return ''.join(char for char in str if char not in 'aeiouAEIOU')\ndef pangram(str):\n    '''\n    Write a python function to determine if a string is a pangram or not.\n    '''\n    d=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    s=str.lower()\n    for i in s:\n        if i in d:\n            d.remove(i)\n    if len(d)==0:\n        return True\n    else:\n        return False\ndef anagram(str1,str2):\n    '''\n    Write a python function to determine if two strings are anagrams.\n    '''\n    return sorted(str1)==sorted(str2)\ndef old_macdonald(name):\n    '''\n    Write a python function to convert a string to a name in title case\n    where the first letter of each word is capitalized and the rest are lowercase.\n    '''\n    return name[0].upper()+name[1:].lower()\ndef old_macdonald2(name):\n    '''\n    Write a python function to convert a string to a name in title case\n    where the first letter of each word is capitalized and the rest are lowercase.\n    '''\n    return name.capitalize()\ndef master_yoda(str):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return str[::-1]\ndef almost_there(n):\n    '''\n    Write a python function to determine if a given number is within 10 of either 100 or 200.\n    '''\n    return ((abs(100-n)<=10)or(abs(200-n)<=10))\ndef has_33(nums):\n    '''\n    Write a python function to find out if the array contains the number 33.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]==33:\n            return True\n    return False\ndef paper_doll(str):\n    '''\n    Write a python function to convert a string to a 'paperdoll'.\n    '''\n    return ''.join(char*3 for char in str)\ndef blackjack(a,b,c):\n    '''\n    Write a python function to determine if a player can win blackjack from the values a,b,c.\n    '''\n    if (a==11)or(b==11)or(c==11):\n        return True\n    if (a==1)or(b==1)or(c==1):\n        return True\n    if (a==10)or(b==10)or(c==10):\n        return True\n    else:\n        return False\ndef summer_69(arr):\n    '''\n    Write a python function to find out the total number of days, num_days, from 1 to n,\n    that had the most days in a row, where all days were even.\n    '''\n    l=[]\n    for i in range(0,len(arr)):\n        l.append(i)\n    l.sort()\n    s=set()\n    for i in range(0,len(l)):\n        s.add(l[i])\n    for i in s:\n        if i==0:\n            if arr[i]+1 in s:\n                continue\n        elif i==(len(l)-1):\n            if arr[i]-1 in s:\n                continue\n        else:\n            if (arr[i]+1) in s and (arr[i]-1) in s:\n                continue\n    return s\ndef spy_game(nums):\n    '''\n    Write a python function to find out if a player can win the game from a given list of integers.\n    '''\n    l=[]\n    for i in range(0,len(nums)-1):\n        if nums[i]==0:\n            l.append(i)\n        if nums[i]==7:\n            l.append(i)\n    if nums[len(nums)-1]==0:\n        l.append(len(nums)-1)\n    return l\ndef count_primes(n):\n    '''\n    Write a python function to find out the number of prime numbers less than n.\n    '''\n    l=[]\n    for i in range(0,n):\n        if i==0 or i==1:\n            l.append(i)\n        else:\n            if i==2:\n                l.append(i)\n            elif i>2:\n                for j in range(2,i):\n                    if (i%j)==0:\n                        break\n                else:\n                    l.append(i)\n    return len(l)\ndef count_primes2(n):\n    '''\n    Write a python function to find out the number of prime numbers less than n.\n    '''\n    l=[]\n    for i in range(0,n):\n        if i==0 or i==1:\n            l.append(i)\n        else:\n            if i==2:\n                l.append(i)\n            elif i>2:\n                for j in range(2,i):\n                    if (i%j)==0:\n                        break\n                else:\n                    l.append(i)\n    return len(l)\ndef is_valid_walk(walk):\n    '''\n    Write a python function to determine if a walk is valid.\n    '''\n    s=set()\n    s.add(walk[0])\n    if len(walk)==10:\n        if walk[0]=='n' and walk[1]=='e' and walk[2]=='w' and walk[3]=='e' and walk[4]=='s' and walk[5]=='e' and walk[6]=='w' and walk[7]=='s' and walk[8]=='e' and walk[9]=='s':\n            return True\n    else:\n        return False\ndef sock_merchant(n,ar):\n    '''\n    Write a python function to determine the maximum number of pairs of socks that you can buy from the store.\n    '''\n    s=set()\n    for i in range(0,len(ar)):\n        s.add(ar[i])\n    c=0\n    for i in s:\n        c=c+ar.count(i)//2\n    return c\ndef sock_merchant2(n,ar):\n    '''\n    Write a python function to determine the maximum number of pairs of socks that you can buy from the store.\n    '''\n    s=set()\n    for i in range(0,len(ar)):\n        s.add(ar[i])\n    c=0\n    for i in s:\n        c=c+ar.count(i)//2\n    return c\ndef sock_merchant3(n,ar):\n    '''\n    Write a python function to determine the maximum number of pairs of socks that you can buy from the store.\n    '''\n    s=set()\n    for i in range(0,len(ar)):\n        s.add(ar[i])\n    c=0\n    for i in s:\n        c=c+ar.count(i)//2\n    return c\ndef count_binary_substrings(str):\n    '''\n    Write a python function to determine the number of substrings that have equal number of 0s and 1s.\n    '''\n    l=[]\n    fo",
        "test": "assert     Split([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 2, 4, 6, 8, 10], \"the result is: %s\" %(Split([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    x = ele[0]\n    y = ele[1]\n    adj.append((x, y-1))\n    adj.append((x, y+1))\n    adj.append((x-1, y))\n    adj.append((x+1, y))\n    adj.append((x-1, y-1))\n    adj.append((x+1, y-1))\n    adj.append((x-1, y+1))\n    adj.append((x+1, y+1))\n    return adj\n",
        "test": "assert adjac((2, 3)) == [(1, 1), (2, 3), (2, 2), (3, 3), (3, 4), (4, 3), (4, 2), (5, 3), (5, 4)]",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_string = \"\"\n    for i in text:\n        if i =='':\n            new_string += '_'\n        else:\n            new_string += i\n    return new_string\n",
        "test": "assert     replace_spaces('hello') == 'hello', 'the test failed'",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list == []:\n        return []\n    zero_list = []\n    for n in num_list:\n        if n == 0:\n            zero_list.append(n)\n    for n in num_list:\n        if n!= 0:\n            zero_list.append(n)\n    return zero_list\n",
        "test": "assert     move_zero([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 728,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    n = len(arr)\n    return (arr[0] ^ arr[1]) + pair_xor_Sum(arr[2:],n-1)\n",
        "test": "assert     pair_xor_Sum([1,2,3,4,5,6,7,8,9,10,11,12,13],14) == 3",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h, item)\n    return [hq.heappop(h) for i in xrange(len(h))]\n",
        "test": "assert     hq.nlargest(3, [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [9, 8, 7]",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return noprofit_noloss(actual_cost - sale_amount,sale_amount)\n    \n    \n    ",
        "test": "assert     noprofit_noloss(0,0) == True",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round((35.74 + (0.6215 * t) - (35.75 * v ** 0.16) + (0.4275 * t * v ** 0.16)) * (math.pow(v, 0.16)))\n",
        "test": "assert ",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #Convert string to list of names\n    list_names = [name for name in sample_names]\n    #Loop through the list of names, add the length of the name to the total\n    total_length = 0\n    for name in list_names:\n        #If name starts with a lowercase letter, add the length to the total\n        if name[0].islower():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert     sample_nam(['SAMPLE', 'name', 'NAME']) == 4,     'sample_nam should return the number of chars of the names'",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items == None:\n        return\n    if len(items) == 1:\n        return items\n    \n    p1 = re.compile('[\\(\\)]')\n    items = re.sub(p1, '', items)\n    return items\n",
        "test": "assert     remove_parenthesis('') == ''",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n / 2 + 1\n    else:\n        return n * (n + 1) / 2\n",
        "test": "assert     is_nonagonal(0) == 0",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(.*)\\sz',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_9(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_10(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_11(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_12(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_13(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_14(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_15(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_16(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_17(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_18(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_19(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_20(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_21(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_22(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_23(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_word",
        "test": "assert     text_match_wordz_middle('abcdef') == True",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return input\n    else:\n        return input[len(input)-k:len(input)]\n",
        "test": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [], \"Failed\"",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n    \n",
        "test": "assert     add_dict_to_tuple(('a', 'b'), {'a':10}) == ('a', 'b', 10)",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n",
        "test": "assert     maxAverageOfPath([[1,2],[2,1],[3,4],[4,3],[5,1],[6,4]]) == 5",
        "num_ids": 2595,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = {}\n    for student in students.keys():\n        if students[student][0] > h and students[student][1] > w:\n            filtered[student] = students[student]\n    return filtered\n",
        "test": "assert     filter_data({'Sara': (1.79, 68.2), 'David': (1.79, 68.1), 'Mary': (1.79, 68.2), 'John': (1.79, 68.2)},",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if (eq(nums1[i], nums2[i])):\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9",
        "num_ids": 549,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for n in str(base**power):\n        total += int(n)\n    return total\n",
        "test": "assert     power_base_sum(3, 2) == 9",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    x=re.findall(r'\\\"(.*?)\\\"',text1)\n    x1=x[0].replace(\" \",\"\")\n    return x1\n",
        "test": "assert     extract_quotation(\"She said \\\"Hello\\\"\")     == \"Hello\"",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Add your code here\n    return tuple(a * b for a, b in zip(test_tup, test_tup[1:]))\n",
        "test": "assert     multiply_elements(()) == ()",
        "num_ids": 1077,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    total = []\n    for i in range(len(lst1)):\n        total.append(lst1[i] + lst2[i])\n    return total\n    \n    \n    \ndef reverse_list(lst):\n    '''\n    Write a function that takes as input a list and returns a new list, which is the reverse of the original.\n    '''\n    rev = []\n    for i in range(len(lst)):\n        rev.append(lst[len(lst)-i-1])\n    return rev\n    \n    \n",
        "test": "assert     (sum_list([1,2,3], [4,5,6]) == [5,7,9])",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_set = set()\n    for num in nums:\n        if num in nums_set:\n            nums_set.remove(num)\n        else:\n            nums_set.add(num)\n    return list(nums_set)\n",
        "test": "assert         [1,2,3,4,5,6,7] == consecutive_duplicates([1,2,3,4,5,6,7])",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (1.0/3.0) * (math.pi * (r**2) + math.pi * (r**2) * (h))\n    return area\ndef frontwall_cone(r,h):\n    '''\n    Write a function to find the frontal surface area of a cone given radius r and the height h.\n    '''\n    area = (1.0/3.0) * (math.pi * (r**2))\n    return area\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    area = (2.0/3.0) * (math.pi * (r**2) * h)\n    return area\ndef frontwall_cylinder(r,h):\n    '''\n    Write a function to find the frontal surface area of a cylinder given radius r and the height h.\n    '''\n    area = (2.0/3.0) * (math.pi * (r**2))\n    return area\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    area = 4 * math.pi * (r**2)\n    return area\ndef frontwall_sphere(r):\n    '''\n    Write a function to find the frontal surface area of a sphere given radius r.\n    '''\n    area = 4 * math.pi * (r**2)\n    return area\ndef lateralsurface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given radius r and the height h.\n    '''\n    area = (2.0/3.0) * math.pi * (r**2) * (r**2)\n    return area\ndef frontwall_torus(r,h):\n    '''\n    Write a function to find the frontal surface area of a torus given radius r and the height h.\n    '''\n    area = (2.0/3.0) * math.pi * (r**2) * (r**2)\n    return area\ndef upwall_cone(r,h):\n    '''\n    Write a function to find the upwall surface area of a cone given radius r and the height h.\n    '''\n    area = (1.0/3.0) * (math.pi * (r**2) * h)\n    return area\ndef upwall_cylinder(r,h):\n    '''\n    Write a function to find the upwall surface area of a cylinder given radius r and the height h.\n    '''\n    area = (1.0/3.0) * (math.pi * (r**2) * h)\n    return area\ndef upwall_sphere(r):\n    '''\n    Write a function to find the upwall surface area of a sphere given radius r.\n    '''\n    area = (1.0/3.0) * (4 * math.pi * (r**2))\n    return area\ndef upwall_torus(r,h):\n    '''\n    Write a function to find the upwall surface area of a torus given radius r and the height h.\n    '''\n    area = (1.0/3.0) * (math.pi * (r**2) * (r**2) * h)\n    return area\ndef overall_surface(l_cone,f_cone,l_cylinder,f_cylinder,l_sphere,f_sphere,l_torus,f_torus,h_cone,h_cylinder,h_sphere,h_torus):\n    '''\n    Write a function to find the overall surface area of a structure given the lateral surface area, frontal surface area, lateral surface area of a cylinder, frontal surface area of a cylinder, lateral surface area of a sphere, frontal surface area of a sphere, lateral surface area of a torus, frontal surface area of a torus, height of a cone, height of a cylinder, height of a sphere, and height of a torus.\n    '''\n    l_area = l_cone + l_cylinder + l_sphere\n    f_area = f_cone + f_cylinder + f_sphere + f_torus\n    l_volume = (1.0/3.0) * l_area * h_cone\n    f_volume = (1.0/3.0) * f_area * h_cylinder\n    s_volume = (1.0/3.0) * l_area * h_sphere\n    t_volume = (1.0/3.0) * f_area * h_torus\n    return (l_volume + f_volume + s_volume + t_volume)\ndef cross_section_cone(l_cone,f_cone,l_cylinder,f_cylinder,l_sphere,f_sphere,l_torus,f_torus,h_cone,h_cylinder,h_sphere,h_torus):\n    '''\n    Write a function to find the cross sectional area of a structure given the lateral surface area, frontal surface area, lateral surface area of a cylinder, frontal surface area of a cylinder, lateral surface area of a sphere, frontal surface area of a sphere, lateral surface area of a torus, frontal surface area of a torus, height of a cone, height of a cylinder, height of a sphere, and height of a torus.\n    '''\n    l_area = l_cone + l_cylinder + l_sphere\n    f_area = f_cone + f_cylinder + f_sphere + f_torus\n    l_area_cone = (1.0/3.0) * l_area * h_cone\n    f_area_cone = (1.0/3.0) * f_area * h_cylinder\n    l_area_cylinder = (1.0/3.0) * l_area * h_cylinder\n    f_area_cylinder = (1.0/3.0) * f_area * h_sphere\n    l_area_sphere = (1.0/3.0) * l_area * h_sphere\n    f_area_sphere = (1.0/3.0) * f_area * h_torus\n    return (l_area_cone + f_area_cone + l_area_cylinder + f_area_cylinder + l_area_sphere + f_area_sphere)\ndef lateral_surface(l_cone,f_cone,l_cylinder,f_cylinder,l_sphere,f_sphere,l_torus,f_torus,h_cone,h_cylinder,h_sphere,h_torus):\n    '''\n    Write a function to find the lateral surface area of a structure given the lateral surface area, frontal surface area, lateral surface area of a cylinder, frontal surface area of a cylinder, lateral surface area of a sphere, frontal surface area of a sphere, lateral surface area of a torus, frontal surface area of a torus, height of a cone, height of a cylinder, height of a sphere, and height of a torus.\n    '''\n    l_area = l_cone + l_cylinder + l_sphere\n    f_area = f_cone + f_cylinder + f_sphere + f_torus\n    l_area_cone = (1.0/3.0) * l_area * h_cone\n    f_area_cone = (1.0/3.0) * f_area * h_cylinder\n    l_area_cylinder = (1.0/3.0) * l_area * h_cylinder\n    f_area_cylinder = (1.0/3.0) * f_area * h_sphere\n    l_area_sphere = (1.0/3.0) * l_area * h_sphere\n    f_area_sphere = (1.0/3.0) * f_area * h_torus\n    return (l_area_cone + f_area_cone + l_area_cylinder + f_area_cylinder + l_area_sphere + f_area_sphere)\ndef frontal_surface(l_cone,f_cone,l_cylinder,f_cylinder,l_sphere,f_sphere,l_torus,f_torus,h_cone,",
        "test": "assert     lateralsurface_cone(5,5) == ((5*math.pi**2)-(math.pi*5**2))",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[ ]|[,]|[.]',':',text)\n",
        "test": "assert     replace_specialchar('a,b,c,d,e') ==     'a:b:c:d:e'",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n",
        "test": "assert     find_first_occurrence([1,1,2,2,3,3,4,4,5,5], 1) == 0",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # base case\n    if len(arr) == 1:\n        return arr[0]\n    # recurrence relation\n    return arr[len(arr)-1] + sum_Of_Subarray_Prod(arr[:len(arr)-1])\n",
        "test": "assert     sum_Of_Subarray_Prod([1,3,5,6]) == 30",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n & 0x5555555555555555) + ((n ^ 0xFFFFFFFFFFFFFFFF) & (n >> 1))  \n    return n & 0xFFFFFFFFFFFFFFFF  \n",
        "test": "assert     set_middle_bits(15) == 5",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    return pos\n",
        "test": "assert     left_insertion([1, 3, 4, 5, 6], 2) == 1",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    #return re.search(regex,string)\n    return re.match(regex,string) is not None\n",
        "test": "assert     check_str('bat') == False",
        "num_ids": 289,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(2) == 2",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0\n    else: \n        m = int(math.ceil(math.log10(n) / 2))\n        # print(m)\n        x = (10 ** (2 * m)) + 1\n        # print(x)\n        y = int(math.ceil(n / x))\n        # print(y)\n        return y * (10 ** (2 * m)) + 1\ndef find_Digits(N):\n    '''\n    Write a python function to find the number of digits of the smallest triangular number with N digits. https://www.geeksforgeeks.org/number-of-digits-of-smallest-triangular-number-with-n-digits/\n    '''\n    # print(N)\n    N = math.ceil(N / 2)\n    # print(N)\n    return 2 * N + 1\n",
        "test": "assert     find_Index(1) == 0",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if not test_tup:\n        return dict()\n    \n    #remove duplicates\n    test_tup = list(set(test_tup))\n    #convert tuple to dictionary\n    return dict(zip(test_tup[0::2], test_tup[1::2]))\n",
        "test": "assert tuple_to_dict((1,2,3,4)) == {1:2, 2:3, 3:4}",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n",
        "test": "assert     all_Characters_Same(\"abc\") == False",
        "num_ids": 286,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 3:\n        return \"The area of a tetrahedron is 1/4 of the side length squared\"\n    elif side == 4:\n        return \"The area of a tetrahedron is 1/6 of the side length squared\"\n    elif side == 5:\n        return \"The area of a tetrahedron is 1/8 of the side length squared\"\n    else:\n        return \"Sorry, but this function doesn't know that area\"\n",
        "test": "assert     area_tetrahedron(9)     == 1.5",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1, 2, 3, 4, 5], 3) == [4, 5, 1, 2, 3]",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return False\n    return True\n",
        "test": "assert     check_none((None, 'b', None)) == False",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum + 1) if (x % int(str(x)[0]) == 0 and x % int(str(x)[1]) == 0 and x % int(str(x)[2]) == 0)]\n",
        "test": "assert     divisible_by_digits(100, 999) == {100, 10, 11, 22, 33}",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (math.pi * r**2 * ((180 - a) / 180))\n",
        "test": "assert     sector_area(3,361) == None",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    return L[m][n][o] \n",
        "test": "assert     lcs_of_three(['C', 'B', 'B'], ['B', 'A', 'B'], ['C', 'A', 'B']) == 1",
        "num_ids": 2836,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str=''\n    words=str1.split(' ')\n    for word in words:\n        if word[0].isupper():\n            new_str+=' '+word\n        else:\n            new_str+=' '+word\n    return new_str.lstrip()\n",
        "test": "assert     'i play basketball' == capital_words_spaces('i play basketball')",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: int(x))\n",
        "test": "assert     sort_numeric_strings(['8', '10', '1', '6', '3', '2', '9', '4', '5', '7']) == ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    \n    \ndef get_average_scores(student_grades):\n    '''\n    Write a function to calculate the average score of the list of grades.\n    '''\n    total = 0\n    for grade in student_grades:\n        total += grade\n    average = total/len(student_grades)\n    \n    return average\n    \n",
        "test": "assert ",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr)-1:\n        return True\n    l = 2*i+1\n    r = 2*i+2\n    if l < len(arr) and arr[l] < arr[i]:\n        return False\n    if r < len(arr) and arr[r] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, l) and check_min_heap_helper(arr, r)\n",
        "test": "assert     check_min_heap_helper([1,2,3,4,5], 0) == True",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n",
        "test": "assert     jacobsthal_num(1) == 1 ",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    l = len(test_list)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    for i in range(l):\n        if sorted_list[i][1] == sorted_list[K - 1][1]:\n            return sorted_list[i]\n    return sorted_list[0]\n",
        "test": "assert     min_k([(1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)], 1)     == (1, 2, 3)",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = [item for item in l1 if item in l2 and item in l3]\n    return result\n",
        "test": "assert     extract_index_list(['a', 'b', 'c'], ['x', 'y', 'z'], ['d', 'e']) == []",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if numbers == []:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return min(numbers)\n    elif len(numbers) > 2:\n        numbers.remove(min(numbers))\n        return min(numbers)",
        "test": "assert     second_smallest([1, 2, 3]) == 2",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.match(r'ab*', text)\n    if match:\n        return True\n    else:\n        return False\n    \ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    match = re.match(r'ab?', text)\n    if match:\n        return True\n    else:\n        return False\n    \ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    match = re.match(r'ab+', text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one('ab') == True",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][::-1] == test_list[j] and i < j:\n                count += 1\n    return count\n",
        "test": "assert     (count_reverse_pairs(['abc', 'bac', 'cba', 'cba']) == 2)",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(list1[i:i+2]) for i in range(len(list1))}\n",
        "test": "assert ",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # A decimal number can be split into three parts: int, decimal_part, and exponent.\n    # Given a string containing a decimal number with a precision of 2, the number of characters in the string can be calculated from the number of characters after the decimal point.\n    # The first character is an optional sign, then the int part, and the exponent part. \n    # Since the exponent part cannot be less than -1, the exponent part cannot be less than 1.\n    # If the exponent part is 0, the int part can be any number but -1.\n    # If the exponent part is 1, the int part is the sign of the number. \n    # If the int part is 0, the number is 0. \n    # Otherwise, the number is positive, and the sign is +. \n    # The exponent part can be any positive number that is less than the precision of the number.\n    # Time - O(n)\n    # Space - O(n)\n    # edge cases - float can be 2*precision digits\n    if num == '':\n        return False\n    sign = 1\n    if num[0] == '-':\n        sign = -1\n        num = num[1:]\n    if num[0] == '+':\n        num = num[1:]\n    if num[0] == '0':\n        return True\n    if num == '.':\n        return False\n    decimal_part = num[num.index('.') + 1:]\n    if len(decimal_part) > 2:\n        return False\n    int_part = num[:num.index('.')]\n    if len(int_part) == 0:\n        int_part = '0'\n    int_part = int_part[::-1]\n    exponent_part = num[num.index('.') + 1:]\n    if exponent_part[0] == '0' and len(exponent_part) > 1:\n        return False\n    # test for int part\n    if int_part[0] == '0':\n        return False\n    if int_part[-1] == '0' and len(int_part) > 1:\n        return False\n    # test for exponent part\n    if int_part[0]!= '0' and int_part[-1]!= '0':\n        return False\n    if int_part[0] == '0' and int_part[-1] == '0':\n        return True\n    if int_part[0] == '0' and len(int_part) == 1:\n        return False\n    if int_part[0] == '+' and int_part[-1]!= '0':\n        return False\n    if int_part[0] == '-' and int_part[-1]!= '0':\n        return False\n    if int_part[0]!= '-' and int_part[0]!= '+' and int_part[-1] == '0':\n        return False\n    # test for exponent part\n    if int_part[0] == '-' and len(int_part) > 1:\n        return False\n    if int_part[-1] == '1':\n        return False\n    if int_part[0] == '+' and len(int_part) > 1:\n        return False\n    if int_part[0] == '-' and len(int_part) > 1:\n        return False\n    if int_part[0]!= '-' and int_part[0]!= '+' and int_part[-1]!= '1':\n        return False\n    if int_part[0] == '+' and int_part[-1] == '1':\n        return False\n    if int_part[0] == '-' and int_part[-1] == '1':\n        return False\n    if int_part[0]!= '+' and int_part[0]!= '-' and int_part[-1] == '1':\n        return False\n    # test for int part\n    if int_part[0] == '-' and int_part[-1]!= '1':\n        return False\n    if int_part[0] == '+' and int_part[-1]!= '1':\n        return False\n    if int_part[0]!= '+' and int_part[0]!= '-' and int_part[-1]!= '1':\n        return False\n    if int_part[0] == '-' and int_part[-1] == '1':\n        return False\n    if int_part[0] == '+' and int_part[-1] == '1':\n        return False\n    # test for decimal part\n    if len(decimal_part) == 0:\n        return True\n    if len(decimal_part) > 2:\n        return False\n    if len(decimal_part) == 1:\n        if decimal_part[0] == '0' and len(decimal_part) == 1:\n            return True\n        if decimal_part[0] == '+' and len(decimal_part) == 1:\n            return True\n        if decimal_part[0] == '-' and len(decimal_part) == 1:\n            return True\n        if decimal_part[0]!= '+' and decimal_part[0]!= '-' and len(decimal_part) == 1:\n            return False\n    if decimal_part[0] == '+' and len(decimal_part) == 1:\n        return True\n    if decimal_part[0] == '-' and len(decimal_part) == 1:\n        return True\n    if decimal_part[0]!= '+' and decimal_part[0]!= '-' and len(decimal_part) == 1:\n        return False\n    if len(decimal_part) == 2:\n        if decimal_part[0] == '0' and decimal_part[1] == '0' and len(decimal_part) == 2:\n            return True\n    return True\n",
        "test": "assert     is_decimal('5.01') == False",
        "num_ids": 1698,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "test": "assert     unique_Element([1,2,3,2]) == False",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        return True\n    return False\n",
        "test": "assert     check_monthnumber_number(12) == True",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    res = arr[1]-arr[0]\n    for i in range(1,n):\n        if arr[i]-arr[i-1] < res:\n            res = arr[i]-arr[i-1]\n    return res\n",
        "test": "assert     find_min_diff([3,5,2,4],3) == 1",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n",
        "test": "assert     number_ctr(\"12345\") == 5",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    else: \n        return (2 + (n-2) * (2 - 1))\n",
        "test": "assert     is_polite(10) == False",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                res += 1\n    return res\n",
        "test": "assert     get_pairs_count([1, 4, 45, 6, 10, -8, 14, 20, 100, 22], 5) == 1",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l = []\n    for x in li1:\n        if x not in li2:\n            l.append(x)\n    return l\n",
        "test": "assert     Diff([1,2,3],[]) == [1,2,3]",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 1\n    for i in range(1, n + 1):\n        if not i%2 : \n            s += i**4\n    return s\n",
        "test": "assert     (odd_num_sum(100) == 35689840)",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for ch in exp:\n        if ch == '(':\n            stack.append('(')\n        elif ch == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if not stack:\n        return True\n    return False\ndef scc_tree(graph, root):\n    visited = []\n    def dfs(root):\n        if root in visited:\n            return\n        visited.append(root)\n        for neighbour in graph[root]:\n            dfs(neighbour)\n    dfs(root)\n    return visited\ndef find_connected_components(graph):\n    visited = []\n    count = 0\n    for i in range(len(graph)):\n        if i not in visited:\n            dfs(i, visited)\n            count += 1\n    return count\ndef topological_sort_using_dfs(graph, visited, stack):\n    visited.add(graph[0])\n    for neighbour in graph[0]:\n        if neighbour not in visited:\n            topological_sort_using_dfs(graph, visited, stack)\n    stack.append(graph[0])\n",
        "test": "assert     check_expression(\"(a+b)\") == True",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return \"\".join(test_str.split(\" \")[K:])\n",
        "test": "assert     remove_length('', 0) == ''",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern,text)\n    if m:\n        start = m.start()\n        end = m.end()\n        return start,end\n    return None\n",
        "test": "assert     occurance_substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ','ABBB') == None",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(nums[i] % 2 for i in range(1, len(nums), 2))\n",
        "test": "assert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12]) == False",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    counter = 0\n    for i in range(len(test_str)):\n        if test_str[i] in ['a','e','i','o','u']:\n            if i+1 < len(test_str):\n                if test_str[i+1] in ['a','e','i','o','u']:\n                    counter +=1\n    return counter\n",
        "test": "assert     count_vowels('abcd') == 0, 'count_vowels(\"abcd\") is expected to return 0'",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    m = {}\n    res = 0\n    for i in arr:\n        if i in m:\n            m[i] += 1\n        else:\n            m[i] = 1\n    for i in m:\n        if m[i] == 1:\n            res += i\n    return res\n",
        "test": "assert     find_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 45",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # for i, j in groupby(list1):\n    #     if len(list(j))>1:\n    #         print(list(j),len(list(j)))\n    # print(list1)\n    return [[a]*len(list(b)) for a,b in groupby(list1)]\n",
        "test": "assert     pack_consecutive_duplicates([1, 1, 2, 2, 3]) == [[1, 1], [2, 2], [3]]",
        "num_ids": 532,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for elem in list1:\n        if elem not in counts:\n            counts[elem] = 1\n        else:\n            counts[elem] += 1\n    return counts\n",
        "test": "assert     unique_sublists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    output = []\n    for i in range(1, len(test_list)+1):\n        temp = list(combinations(test_list, i))\n        for j in temp:\n            if sum(j) == 100:\n                output.append(j)\n    return output\n",
        "test": "assert     find_combinations([(1,2),(3,4),(1,3,4,5)])==[(1,1,1,1,1),(1,1,1,1,3),(1,1,1,1,4),(1,1,1,1,5),(1,1,1,3,3),(1,1,1,3,4),(1,1,1,3,5),(1,1,1,4,4),(1,1,1,4,5),(1,1,1,5,5),(1,1,3,3,3),(1,1,3,3,4),(1,1,3,3,5),(1,1,3,4,4),(1,1,3,4,5),(1,1,3,5,5),(1,1,4,4,4),(1,1,4,4,5),(1,1,4,5,5),(1,1,5,5,5),(1,3,3,3,3),(1,3,3,3,4),(1,3,3,3,5),(1,3,3,4,4),(1,3,3,4,5),(1,3,3,5,5),(1,3,4,4,4),(1,3,4,4,5),(1,3,4,5,5),(1,3,5,5,5),(1,4,4,4,4),(1,4,4,4,5),(1,4,4,5,5),(1,4,5,5,5),(1,5,5,5,5)]",
        "num_ids": 3132,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    i = 1\n    while i <= n :\n        if n % i == 0 :\n            divisors += 1\n        i += 1\n    return divisors % 2 == 0\n",
        "test": "assert     count_divisors(3) == True",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # print arr\n    # print len(arr)\n    return sum(arr)\n",
        "test": "assert     (odd_length_sum([1,2]) == 3)",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    minimum = min(r, g, b)\n    maximum = max(r, g, b)\n    delta = maximum - minimum\n    if delta == 0:\n        hue = 0\n    elif maximum == r:\n        hue = (g - b) / delta % 6\n    elif maximum == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue *= 60\n    if hue < 0:\n        hue += 360\n    if maximum == 0:\n        saturation = 0\n    else:\n        saturation = delta / maximum\n    return hue, saturation, maximum\n    \ndef hue_to_rgb(hue, saturation, maximum):\n    '''\n    Write a function to convert hue to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    hue *= 6\n    i = int(hue)\n    p = hue - i\n    if i == 0:\n        r = maximum\n        g = maximum\n        b = maximum\n    elif i == 1:\n        r = maximum - (maximum - minimum) * p\n        g = maximum\n        b = maximum - (maximum - minimum) * p\n    elif i == 2:\n        r = maximum - (maximum - minimum) * p\n        g = maximum\n        b = maximum - (maximum - minimum) * p\n    elif i == 3:\n        r = maximum\n        g = maximum - (maximum - minimum) * p\n        b = maximum - (maximum - minimum) * p\n    elif i == 4:\n        r = maximum - (maximum - minimum) * p\n        g = maximum\n        b = maximum\n    elif i == 5:\n        r = maximum\n        g = maximum\n        b = maximum - (maximum - minimum) * p\n    return r, g, b\n    \ndef get_pixel(image, x, y):\n    '''\n    Write a function to extract the pixel information of image at x, y\n    '''\n    image_x = x - image.x\n    image_y = y - image.y\n    if image_x < 0 or image_x > image.width or image_y < 0 or image_y > image.height:\n        return None\n    return image.get_pixel(image_x, image_y)\n    \ndef get_color(image, x, y):\n    '''\n    Write a function to extract the color information of image at x, y\n    '''\n    pixel = get_pixel(image, x, y)\n    if not pixel:\n        return None\n    return pixel.red, pixel.green, pixel.blue\n    \ndef set_color(image, x, y, red, green, blue):\n    '''\n    Write a function to set the color information of image at x, y\n    '''\n    pixel = get_pixel(image, x, y)\n    pixel.red = red\n    pixel.green = green\n    pixel.blue = blue\n    image.update_pixel(x, y, pixel)\n    \ndef load_image(filename):\n    '''\n    Write a function to load an image from the file named filename\n    '''\n    image = Image()\n    image.load_image(filename)\n    return image\n    \ndef draw_image(image, x, y, width, height, color):\n    '''\n    Write a function to draw an image at x, y with width, height and color\n    '''\n    image.draw_image(x, y, width, height, color)\n    \ndef draw_line(image, x1, y1, x2, y2, color):\n    '''\n    Write a function to draw a line from (x1, y1) to (x2, y2) with color\n    '''\n    image.draw_line(x1, y1, x2, y2, color)\n    \ndef fill_image(image, color):\n    '''\n    Write a function to fill the image with color\n    '''\n    image.fill_image(color)\n    \ndef copy_image(image):\n    '''\n    Write a function to copy an image to the clipboard\n    '''\n    image.copy_image()\n    \ndef save_image(image, filename):\n    '''\n    Write a function to save the image to a file with the name filename\n    '''\n    image.save_image(filename)\n    \ndef image_add(image1, image2):\n    '''\n    Write a function to add two images together\n    '''\n    new_image = Image()\n    new_image.width = image1.width\n    new_image.height = image1.height\n    new_image.pixels = []\n    for y in range(image1.height):\n        for x in range(image1.width):\n            r1, g1, b1 = get_color(image1, x, y)\n            r2, g2, b2 = get_color(image2, x, y)\n            r = r1 + r2\n            g = g1 + g2\n            b = b1 + b2\n            red, green, blue = hue_to_rgb(r, g, b)\n            set_color(new_image, x, y, red, green, blue)\n    return new_image\n    \ndef image_subtract(image1, image2):\n    '''\n    Write a function to subtract two images\n    '''\n    new_image = Image()\n    new_image.width = image1.width\n    new_image.height = image1.height\n    new_image.pixels = []\n    for y in range(image1.height):\n        for x in range(image1.width):\n            r1, g1, b1 = get_color(image1, x, y)\n            r2, g2, b2 = get_color(image2, x, y)\n            r = r1 - r2\n            g = g1 - g2\n            b = b1 - b2\n            red, green, blue = hue_to_rgb(r, g, b)\n            set_color(new_image, x, y, red, green, blue)\n    return new_image\n    \ndef image_multiply(image1, image2):\n    '''\n    Write a function to multiply two images\n    '''\n    new_image = Image()\n    new_image.width = image1.width\n    new_image.height = image1.height\n    new_image.pixels = []\n    for y in range(image1.height):\n        for x in range(image1.width):\n            r1, g1, b1 = get_color(image1, x, y)\n            r2, g2, b2 = get_color(image2, x, y)\n            r = r1 * r2\n            g = g1 * g2\n            b = b1 * b2\n            red, green, blue = hue_to_rgb(r, g, b)\n            set_color(new_image, x, y, red, green, blue)\n    return new_image\n    \ndef image_scale(image, factor):\n    '''\n    Write a function to scale an image by factor\n    '''\n    new_image = Image()\n    new_image.width = image.width * factor\n    new_image.height = image.height * factor\n    new_image.pixels = []\n    for y in range(image.height):\n        for x in range(image.width):\n            r, g, b = get_color(image, x, y)\n            red, green, blue = hue_to_rgb(r, g, b)\n            set_color(new_image, x * factor, y * factor, red, green, blue)\n    return new_image\n    \ndef image_flip_vertically(image):\n    '''\n    Write a function to flip the image vertically\n    '''\n    new_image = Image()\n    new_image.width = image.width\n    new_image.height = image.height\n    new_image.pixels = []\n    for y i",
        "test": "assert ",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even=1\n    odd=1\n    for i in list1:\n        if i%2==0:\n            even*=i\n        else:\n            odd*=i\n    print(even,odd)\n",
        "test": "assert     mul_even_odd([9,4,7,2,1,5,3,6,0,8]) == [72, 600]",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(i) for i in test_str[1:-1].split(',')])\n",
        "test": "assert         tuple_str_int('(1,2,3)') == (1, 2, 3)",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a[-1] < x:\n        return len(a)\n    \n    pos = bisect.bisect_right(a, x)\n    if a[pos - 1]!= x:\n        return pos\n    else:\n        return pos - 1\n",
        "test": "assert     right_insertion([0, 1, 2, 4, 5, 6, 7], -3) == 0",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pass\n    pattern = re.compile(r'.*(ab{3})')\n    pattern2 = re.compile(r'a*b')\n    pattern3 = re.compile(r'(a*b)')\n    pattern4 = re.compile(r'a*b{3}')\n    pattern5 = re.compile(r'a*b{3}?')\n    pattern6 = re.compile(r'(ab)+')\n    pattern7 = re.compile(r'(ab)+?')\n    pattern8 = re.compile(r'(ab)*')\n    pattern9 = re.compile(r'(ab)*?')\n    pattern10 = re.compile(r'(ab)*?{2,3}')\n    pattern11 = re.compile(r'(ab)*?{3,4}?')\n    pattern12 = re.compile(r'(ab)*?{3,4}?')\n    pattern13 = re.compile(r'(ab)*?{4,5}?')\n    pattern14 = re.compile(r'(ab)*?{4,5}?')\n    pattern15 = re.compile(r'(ab)*?{4,}?')\n    pattern16 = re.compile(r'(ab)*?{1,4}?')\n    pattern17 = re.compile(r'(ab)*?{1,4}?')\n    pattern18 = re.compile(r'(ab)*?{1,4}?')\n    pattern19 = re.compile(r'(ab)*?{1,4}?')\n    pattern20 = re.compile(r'(ab)*?{1,4}?')\n    pattern21 = re.compile(r'(ab)*?{1,4}?')\n    pattern22 = re.compile(r'(ab)*?{1,4}?')\n    pattern23 = re.compile(r'(ab)*?{1,4}?')\n    pattern24 = re.compile(r'(ab)*?{1,4}?')\n    pattern25 = re.compile(r'(ab)*?{1,4}?')\n    pattern26 = re.compile(r'(ab)*?{1,4}?')\n    pattern27 = re.compile(r'(ab)*?{1,4}?')\n    pattern28 = re.compile(r'(ab)*?{1,4}?')\n    pattern29 = re.compile(r'(ab)*?{1,4}?')\n    pattern30 = re.compile(r'(ab)*?{1,4}?')\n    pattern31 = re.compile(r'(ab)*?{1,4}?')\n    pattern32 = re.compile(r'(ab)*?{1,4}?')\n    pattern33 = re.compile(r'(ab)*?{1,4}?')\n    pattern34 = re.compile(r'(ab)*?{1,4}?')\n    pattern35 = re.compile(r'(ab)*?{1,4}?')\n    pattern36 = re.compile(r'(ab)*?{1,4}?')\n    pattern37 = re.compile(r'(ab)*?{1,4}?')\n    pattern38 = re.compile(r'(ab)*?{1,4}?')\n    pattern39 = re.compile(r'(ab)*?{1,4}?')\n    pattern40 = re.compile(r'(ab)*?{1,4}?')\n    pattern41 = re.compile(r'(ab)*?{1,4}?')\n    pattern42 = re.compile(r'(ab)*?{1,4}?')\n    pattern43 = re.compile(r'(ab)*?{1,4}?')\n    pattern44 = re.compile(r'(ab)*?{1,4}?')\n    pattern45 = re.compile(r'(ab)*?{1,4}?')\n    pattern46 = re.compile(r'(ab)*?{1,4}?')\n    pattern47 = re.compile(r'(ab)*?{1,4}?')\n    pattern48 = re.compile(r'(ab)*?{1,4}?')\n    pattern49 = re.compile(r'(ab)*?{1,4}?')\n    pattern50 = re.compile(r'(ab)*?{1,4}?')\n    pattern51 = re.compile(r'(ab)*?{1,4}?')\n    pattern52 = re.compile(r'(ab)*?{1,4}?')\n    pattern53 = re.compile(r'(ab)*?{1,4}?')\n    pattern54 = re.compile(r'(ab)*?{1,4}?')\n    pattern55 = re.compile(r'(ab)*?{1,4}?')\n    pattern56 = re.compile(r'(ab)*?{1,4}?')\n    pattern57 = re.compile(r'(ab)*?{1,4}?')\n    pattern58 = re.compile(r'(ab)*?{1,4}?')\n    pattern59 = re.compile(r'(ab)*?{1,4}?')\n    pattern60 = re.compile(r'(ab)*?{1,4}?')\n    pattern61 = re.compile(r'(ab)*?{1,4}?')\n    pattern62 = re.compile(r'(ab)*?{1,4}?')\n    pattern63 = re.compile(r'(ab)*?{1,4}?')\n    pattern64 = re.compile(r'(ab)*?{1,4}?')\n    pattern65 = re.compile(r'(ab)*?{1,4}?')\n    pattern66 = re.compile(r'(ab)*?{1,4}?')\n    pattern67 = re.compile(r'(ab)*?{1,4}?')\n    pattern68 = re.compile(r'(ab)*?{1,4}?')\n    pattern69 = re.compile(r'(ab)*?{1,4}?')\n    pattern70 = re.compile(r'(ab)*?{1,4}?')\n    pattern71 = re.compile(r'(ab)*?{1,4}?')\n    pattern72 = re.compile(r'(ab)*?{1,4}?')\n    pattern73 = re.compile(r'(ab)*?{1,4}?')\n    pattern74 = re.compile(r'(ab)*?{1,4}?')\n    pattern75 = re.compile(r'(ab)*?{1,4}?')\n    pattern76 = re.compile(r'(ab)*?{1,4}?')\n    pattern77 = re.compile(r'(ab)*?{1,4}?')\n    pattern78 = re.compile(r'(ab)*?{1,4}?')\n    pattern79 = re.compile(r'(ab)*?{1,4}?')\n    pattern80 = re.compile(r'(ab)*?{1,4}?')\n    pattern81 = re.compile(r'(ab)*?{1,4}?')\n    pattern82 = re.compile(r'(ab)*?{1,4}?')\n    pattern83 = re.compile(r'(ab)*?{1,4}?')\n    pattern84 = re.compile(r'(ab)*?{1,4}?')\n    pattern85 = re.compile(r'(ab)*?{1,4}?')\n    pattern86 = re.compile(r'(ab)*?{1,4}?')\n    pattern87 = re.compile(r'(ab)*?{1,4}?')\n    pattern88 = re.compile(r'(ab)*?{1,4}?')\n    pattern89 = re.compile(r'(ab)*?{1,4}?')\n    pattern90 = re.compile(",
        "test": "assert     text_match_three(\"aaaaaa\") == False",
        "num_ids": 2232,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n    \ndef new_dict(test_list):\n    '''\n    Write a function to create a new dictionary from the given list.\n    '''\n    return dict(zip(test_list, test_list))\n    \ndef new_set(test_list):\n    '''\n    Write a function to create a new set from the given list.\n    '''\n    return set(test_list)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list",
        "test": "assert     new_tuple(['a', 'b', 'c'], 'a')     == ('a', 'b', 'c')",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(num % 2 == 0 for num in nums[::2])\n",
        "test": "assert     ( even_position([1, 3, 5, 7]) == False ), \"Test2:Passed\"",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # We need to get rid of tuples within the tuple.\n    test_list = list(test_tup)\n    # Now we have to remove the items that are tuples.\n    for x in test_list:\n        # If we don't have any tuples in the list.\n        if not isinstance(x, tuple):\n            continue\n        # Otherwise, we want to remove the tuples.\n        else:\n            test_list.remove(x)\n    # After we finish removing the tuples, we want to get rid of the\n    # tuples themselves.\n    test_tup = tuple(test_list)\n    return test_tup\n",
        "test": "assert     remove_nested((1, (2, 3), 4)) == (1, 4)",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)): \n        if type(input_list[i]) == list:\n            count += 1\n    return count\n",
        "test": "assert     count_list([[1,2,3], [4,5,6]]) == 2,     'Wrong output'",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    last_index = len(arr)-1\n    start = 0\n    end = last_index\n    \n    while(start<=end):\n        mid = (start+end)//2\n        if arr[mid]==x:\n            if mid==last_index:\n                return mid\n            elif arr[mid+1]>arr[mid]:\n                return mid\n            else:\n                start = mid+1\n        elif arr[mid]<x:\n            start = mid+1\n        else:\n            end = mid-1\n    \n    return -1\n    \ndef first(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    first_index = 0\n    start = 0\n    end = len(arr)-1\n    \n    while(start<=end):\n        mid = (start+end)//2\n        if arr[mid]==x:\n            if mid==0:\n                return mid\n            elif arr[mid-1]<arr[mid]:\n                return mid\n            else:\n                end = mid-1\n        elif arr[mid]<x:\n            start = mid+1\n        else:\n            end = mid-1\n    \n    return -1\n    \ndef median(arr):\n    '''\n    Write a python function to find the median of a sorted array.\n    '''\n    if len(arr)%2==0:\n        return (arr[len(arr)//2]+arr[len(arr)//2-1])/2\n    else:\n        return arr[len(arr)//2]\n",
        "test": "assert     last([1,2,3,4,5,6],7) == -1",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"^a.*b$\")\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_starta_endb(\"acb\") == True",
        "num_ids": 286,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "test": "assert     return_sum({1:100, 2:200, 3:300}) == 600",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(l, r+1, 2))\n    \n    \n    \n    ",
        "test": "assert     sum_odd(15) == 2",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert ",
        "num_ids": 34,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    def mask(bit):\n        return (1 << bit) - 1\n    mask = mask(d)\n    return (n << d) | (n >> (32 - d)) & mask\n",
        "test": "assert     left_rotate(100,1) == 200",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s', '', text)\n",
        "test": "assert     remove_all_spaces('hello') == 'hello'",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    count = 0\n    if x == y and x == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    return count\n    \nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(3,3,3))",
        "test": "assert     test_three_equal(1,1,1) == 3, \"test 1\"",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[mid+1]:\n            return mid + 1\n        if arr[mid] < arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return 0\n",
        "test": "assert     count_rotation([1,2,3,4,5,6]) == 0",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n ** 0.5\n    return int(sqrt) == sqrt\n",
        "test": "assert     is_perfect_square(3) == False",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    temp = 1\n    for i in arr:\n        temp = temp * i\n    if temp % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([4, 3, 2, 1]) == True",
        "num_ids": 415,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    lists.sort(key=sum)\n    return lists[-1]\n",
        "test": "assert     max_sum_list([[1,2,3], [6,5,4], [10,9,8]]) == [10,9,8]",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i - 1]:\n            count += 1\n        else:\n            count = 1\n        if count > max_run:\n            max_run = count\n",
        "test": "assert     max_run_uppercase('PythonQuiz') == 3",
        "num_ids": 845,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "test": "assert     first_odd([]) == None",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    ret_val = None\n    if len(test_tup) < K:\n        ret_val = False\n    else:\n        ret_val = True\n    return ret_val\n",
        "test": "assert     check_K(('M', 'M', 'M', 'E', 'E', 'E'), 2) == True",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert     check_smaller((4, 8, 3, 9, 2), (4, 2, 3, 9, 8)) == False",
        "num_ids": 531,
        "indeed": true
    }
]