[
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup_a = tuple(test_tup1)\n    tup_b = tuple(test_tup2)\n    a_set = set(tup_a)\n    b_set = set(tup_b)\n    common_elements = list(a_set.intersection(b_set))\n    return common_elements\n",
        "test": "assert     similar_elements([1, 2, 3, 4, 5, 6], [2, 4, 5, 7, 8, 9]) == [2, 4, 5]",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\n",
        "test": "assert     is_not_prime(2) == False",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    maxHeap = []\n    for i in range(n):\n        hq.heappush(maxHeap,(nums[i]))\n    for i in range(n,len(nums)):\n        if maxHeap[0]<nums[i]:\n            hq.heappop(maxHeap)\n            hq.heappush(maxHeap,nums[i])\n    return maxHeap\n",
        "test": "assert     hq.heap_queue_largest([1,2,3,4,5,6,7,8,9,10,0],11) == [9,8,7,6,5,4,3,2,1]",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x!= 0 and (x & (x - 1))) == 0\n",
        "test": "assert     is_Power_Of_Two (0) == True",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_ = []\n    for m in re.finditer(r'\\w{4,}', text):\n        list_.append(m.group())\n    return list_\n",
        "test": "assert     find_char_long(\"\") == []",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "test": "assert     square_nums([1,2,3,4]) == [1,4,9,16]",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if(str[i:] == str[i:][::-1]):\n            count += 1\n    if(count==0):\n        return -1\n    return count\n",
        "test": "assert     find_Rotations('abcdcbd') == 1",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if (ch in s):\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', 1)\n    return s\n",
        "test": "assert     remove_Occ('hello','o') == 'hell'",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M,key = lambda x: sum(x))\n",
        "test": "assert     sort_matrix([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]) == [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]",
        "num_ids": 1102,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (1/6)*(l*b*h)\n    return Volume\n",
        "test": "assert     find_Volume(0,0,0) == 0",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    count = 0\n    for word in text:\n        if word.islower() == True:\n            count += 1\n    if count == 0:\n        return False\n    elif count == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_lowercase_underscore(\"a-b-c\") == False",
        "num_ids": 2697,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "test": "assert     square_perimeter(3) == 12",
        "num_ids": 270,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str_list = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if string[i] == string[j] and i!= j:\n                break\n        else:\n            str_list.append(string[i])\n    return str_list\n",
        "test": "assert     str_to_list('abc') == ['a', 'b', 'c']",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    retval = None\n    if arraynums == None or len(arraynums) <= 0:\n        retval = False\n    else:\n        if len(arraynums) <= 1:\n            retval = False\n        else:\n            retval = False\n            for i in range(len(arraynums)):\n                for j in range(i+1, len(arraynums)):\n                    if arraynums[i] == arraynums[j]:\n                        retval = True\n                        break\n            if retval == None:\n                retval = False\n    return retval\n",
        "test": "assert     test_duplicate([1,2,3,4,1]) == True",
        "num_ids": 2627,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0:\n        return False\n    else:\n        num_digits=len(str(x))\n        if num_digits==6:\n            last_digit=x%10\n            return last_digit==2 or last_digit==3 or last_digit==7\n        elif num_digits==7:\n            last_digit=x%10\n            return last_digit==2 or last_digit==3 or last_digit==7 or last_digit==9\n        elif num_digits==8:\n            last_digit=x%10\n            return last_digit==2 or last_digit==3 or last_digit==7 or last_digit==9 or last_digit==0\n        else:\n            return False\n    \ndef is_hammer(x):\n    '''\n    Write a function to check if the given number is a hammer or not.\n    '''\n    if x%2==0:\n        return False\n    else:\n        num_digits=len(str(x))\n        if num_digits==6:\n            last_digit=x%10\n            return last_digit==4 or last_digit==8\n        elif num_digits==7:\n            last_digit=x%10\n            return last_digit==4 or last_digit==8 or last_digit==0\n        elif num_digits==8:\n            last_digit=x%10\n            return last_digit==4 or last_digit==8 or last_digit==0 or last_digit==6\n        else:\n            return False\n",
        "test": "assert     is_woodall(13) == False",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0: return True\n    num_str = str(num)\n    num_str = num_str[::-1]\n    rev_str = num_str[1::]\n    if num_str == rev_str:\n        return True\n    else:\n        return False\n",
        "test": "assert     not rev(233)",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 17,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    m = arr[0]\n    for i in arr:\n        if i > m :\n            m = i\n    return m\n",
        "test": "assert     find_Max_Num([3,2,1,4,2]) == 4",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return False\n    elif x<0 and y<0:\n        return False\n    else:\n        return True\n",
        "test": "assert     opposite_Signs(1,-1) == True     , \"Wrong answer for opposite_Signs\"",
        "num_ids": 2549,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*(3*n - 1))/2\n    \ndef is_pandigital(n):\n    '''\n    Write a function to find if a number is pandigital or not. \n    '''\n    s = str(n)\n    for i in range(1,10):\n        if (s.find(str(i)) == -1):\n            return False\n    return True\n",
        "test": "assert     is_octagonal(1)",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    start = 0\n    result = 0\n    while(start < len(s)):\n        length = 0\n        sum_digits = 0\n        for i in range(start, len(s)):\n            if sum_digits == len(s[start:i+1]):\n                length += 1\n                sum_digits = 0\n            sum_digits += int(s[i])\n        if length > 0:\n            result += 1\n        start += 1\n    return result\n    \ndef get_max_loot(items, capacity):\n    '''\n    You are given a dictionary of items and a weight capacity, return the maximum value of items that can be taken.\n    \n    Dictionary items {'item1':[values,weight],...}\n    '''\n    from bisect import bisect_left\n    values = [item[0] for item in items.values()]\n    weights = [item[1] for item in items.values()]\n    values.sort()\n    weights.sort()\n    result = 0\n    for weight in weights:\n        i = bisect_left(values, capacity - weight)\n        if i < len(values):\n            result = max(result, items[values[i]][0])\n            capacity -= items[values[i]][1]\n    return result\n",
        "test": "assert count_Substrings('987654321') == 1",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)\n",
        "test": "assert     smallest_num([1,2,3,4,5]) == 1",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max([abs(a-b) for a in test_list for b in test_list if a!= b])\n",
        "test": "assert     max_difference([1,2,3,4,5,6,7]) == 6",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    return sorted(subjectmarks,key = lambda x:x[1])\n",
        "test": "assert     subject_marks([(1,10),(2,10),(3,10),(4,10)]) == [(1,10),(2,10),(3,10),(4,10)]",
        "num_ids": 1420,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, int) or isinstance(data_list, float) or isinstance(data_list, str):\n        return data_list\n    else:\n        sum_of_all_elements = 0\n        for i in data_list:\n            sum_of_all_elements += recursive_list_sum(i)\n        return sum_of_all_elements\n",
        "test": "assert     recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 1267,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # count = 0\n    # for element in list:\n    #     if element > 0:\n    #         count = count + 1\n    # return count\n    return len([x for x in list if x > 0])\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #  T: O(N)\n    #  S: O(N)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 2463,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 3:\n        return True\n    else:\n        return (A[0]<=A[1] and A[1]<=A[2]) or (A[0]>=A[1] and A[1]>=A[2])\n",
        "test": "assert     is_Monotonic([])",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    #TODO:\n    '''\n    1) Find the first occurance of the sublist in the list.\n    2) If found, check if other elements are also there.\n    '''\n    for i in range(len(l)):\n        if l[i:len(s)+i] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist(['c','d','e'], ['a','b','d']) == False",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    N = len(Input)\n    if N == 0:\n        return False\n    lengths = {}\n    for i in range(N):\n        if Input[i] in lengths:\n            lengths[Input[i]] += 1\n        else:\n            lengths[Input[i]] = 1\n    for key in lengths:\n        if lengths[key] > 1:\n            return False\n    return True\n",
        "test": "assert     find_equal_tuple((2,)) is True",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    arr = nums[:]\n    gap = len(arr)\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(len(arr)-gap):\n            if arr[i] > arr[i+gap]:\n                arr[i],arr[i+gap] = arr[i+gap],arr[i]\n                swapped = True\n    return arr\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 1206,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if a^2 - b^2 = n\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    # n is odd\n    for i in range(1, int(math.sqrt(n))):\n        if i*i == n:\n            return True\n    # n is even\n    for i in range(1, int(math.sqrt(n))):\n        if i*i == n:\n            return False\n    # n is odd\n    return True\n",
        "test": "assert     dif_Square(40) == False",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return False\n    elif len(colors) == 1:\n        return True\n    else:\n        first_color = colors[0]\n        first_pattern = patterns[0]\n        if first_color == first_pattern:\n            return is_samepatterns(colors[1:], patterns[1:])\n        else:\n            return False\n",
        "test": "assert is_samepatterns(['red', 'green', 'blue', 'black'], ['black','red', 'green', 'blue']) == False",
        "num_ids": 3084,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tup in test_list:\n        if (tup[0] % K == 0) and (tup[1] % K == 0):\n            print tup\n",
        "test": "assert     find_tuples([(1, 2, 3), (2, 3, 4), (1, 3, 4)], 4) == [(1, 2, 3, 4)]",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "test": "assert     is_Diff(11)     == True",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n",
        "test": "assert     word_len('dog') == True, \"Test 2 failed\"",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_number = 1\n    for i in range(1, n): \n        tetrahedral_number += (2*i + 1) \n    return tetrahedral_number \n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\n",
        "test": "assert     volume_sphere(0) == 0",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def ch(char):\n        char = ord(char)\n        return (char%26)\n    return (''.join([chr(int(ch(c))%26) for c in strr]))\n    ",
        "test": "assert     get_Char('b') == 98",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Start from 1, since 1 is the first number.\n    for i in range(1, n+1):\n        # Find the next number in the sequence using a recursive function.\n        next = next_number(i)\n        # Write the new number to the console.\n        print i,\n    \n    # Prompt the user to see the first n numbers of the sequence.\n    while True:\n        # Get the user's input for the first n numbers of the sequence.\n        answer = int(raw_input('\\nEnter the number of the first n numbers of the sequence: '))\n        # Ensure the user's input is within the range of the sequence.\n        if answer in range(1, n+1):\n            # Find the next number in the sequence using a recursive function.\n            next = next_number(answer)\n            # Write the new number to the console.\n            print answer,\n            break\n        else:\n            # Prompt the user to input a valid number.\n            print '\\nInvalid input. Try again.'\n",
        "test": "assert ",
        "num_ids": 2737,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    srfarea = 4 * math.pi * r**2\n    return srfarea\n",
        "test": "assert     surfacearea_sphere(1.0)         == 12.566370614359172",
        "num_ids": 599,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(1/2*n*(2*n + 1))\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys_list = []\n    keys_list.extend(dict1.keys())\n    keys_list.extend(dict2.keys())\n    keys_list.extend(dict3.keys())\n    keys_list = sorted(keys_list)\n    print(keys_list)\n    out = {}\n    for i in keys_list:\n        if i in dict1.keys():\n            out[i] = dict1[i]\n        if i in dict2.keys():\n            out[i] = dict2[i]\n        if i in dict3.keys():\n            out[i] = dict3[i]\n    return out\n",
        "test": "assert     merge_dictionaries_three({},{},{}) == {}",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    unique_list = []\n    freq_dict = {}\n    for item in list1:\n        if item in unique_list:\n            freq_dict[item] += 1\n        else:\n            unique_list.append(item)\n            freq_dict[item] = 1\n    return freq_dict\n",
        "test": "assert     freq_count([1,2,3,4,1,2,3,4,1,2,3,4]) == {1: 3, 2: 3, 3: 3, 4: 3}",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N % 2 == 0:\n        return N - 1\n    else:\n        return N - 2\n",
        "test": "assert     closest_num(2) == 1",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n",
        "test": "assert     len_log(['abc','def']) == 3",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for each_str in str1:\n        if each_str in sub_str:\n            return True\n    return False\n",
        "test": "assert     (find_substring(['this is a test string', 'flow', 'flight', 'flow', 'fool'], 'this') == False)",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    digits = list(str(n))\n    for i in range(1,len(digits)):\n        if int(digits[i]) < int(digits[i-1]):\n            return False\n    return True\n",
        "test": "assert     is_undulating(24)",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b > 0:\n        return a * power(a,b-1)\n    else:\n        return 1/power(a,abs(b)-1)\n",
        "test": "assert     power(1,0) == 1",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]\n",
        "test": "assert index_minimum([(1,2),(3,4),(4,5),(5,6),(6,7)]) == 1",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst = [x for x in lst if x!= []]\n    if not lst:\n        return 0\n    else:\n        return len(min(lst, key=len))\n",
        "test": "assert     Find_Min_Length( [[1,2,3],[4,5,6]] ) == 3",
        "num_ids": 940,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    count = 0\n    for x in range(1,n+1):\n        if n % x == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return {element: list1.count(element) for element in set(list1)}\n",
        "test": "assert     frequency_lists([]) == {}",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n",
        "test": "assert     multiply_num([1, 2, 3]) == 6",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return '0'\n    ans=''\n    while n>0:\n        ans=str(n%2)+ans\n        n=n//2\n    return ans\n",
        "test": "assert     decimal_to_binary(100) == '1100100'",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    #print(num)\n    while not is_palindrome(num):\n        num += 1\n    return num\n    \ndef is_palindrome(num):\n    '''\n    Write a function that returns true if a string is a palindrome (reads the same forwards and backwards)\n    '''\n    return str(num) == str(num)[::-1]\n    \ndef next_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n",
        "test": "assert     next_smallest_palindrome(4) == 5",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    index = k - 1\n    if index < len(arr):\n        return arr[index]\n    return arr[-1]\n",
        "test": "assert     kth_element(['A', 'B', 'C', 'D', 'E', 'F'], 1) == 'A'",
        "num_ids": 655,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join([\"%s%s\" % (w[0].upper(), w[1:]) for w in word.split(\"_\")])\n",
        "test": "assert     snake_to_camel('snake_case')    == 'SnakeCase'",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(n):\n        for j in range(m):\n            if (i + j) % 2 == 0:\n                a += 1\n    return a\n",
        "test": "assert     eulerian_num(0, 1) == 0",
        "num_ids": 2502,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result_list = []\n",
        "test": "assert     sort_sublists(['boy', 'girl','snail', 'boy','snail', 'girl', 'boy']) == \\",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    booleans=0\n    for i in lst:\n        if i==True:\n            booleans=booleans+1\n    return booleans\n",
        "test": "assert     count([True, True, False]) == 2",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    '''\n    # tests\n    test_list = [1, 2, 3]\n    test_tup = (4, 5, 6)\n    \n    expected = [1, 2, 3, 4, 5, 6]\n    actual = add_lists(test_list, test_tup)\n    \n    print(actual == expected)\n    print(actual)\n    print(expected)\n    '''\n    \n    # solutions\n    test_list.extend(test_tup)\n    \n    return test_list\n",
        "test": "assert     add_lists([\"a\", \"b\"], [\"c\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"]",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if (len(num1) > len(num2)) and (len(num1) > len(num3)):\n        return merge_sorted_list(num2, num3, num1)\n    if (len(num2) > len(num3)) and (len(num2) > len(num1)):\n        return merge_sorted_list(num3, num1, num2)\n    return sorted(num1+num2+num3)\n",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 1524,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def binary(n):\n        a=[]\n        for i in n:\n            if i=='0':\n                a.append('1')\n            else:\n                a.append('0')\n        return ''.join(a)\n    s=binary(s)\n    count=0\n    for i in range(n):\n        s=binary(s)\n        if int(s[0])%2!=0:\n            count+=1\n    return count\n",
        "test": "assert     odd_Equivalent('101',3) == 2",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = [x for x in nestedlist if isinstance(x, list)]\n    return [x for x in nestedlist[0] if x in nestedlist[1]]\n",
        "test": "assert     common_in_nested_lists([[]]) == []",
        "num_ids": 1327,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('42')",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True\n",
        "test": "assert     empty_dit([{},{},{}]) == True",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert     tuple_to_int((1,)) == 1",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in range(0, len(test_list)):\n        try:\n            test_list[item] = float(test_list[item])\n        except:\n            continue\n    return test_list\n",
        "test": "assert     list_to_float([[1,2,3], [2.3,4.5,6.7]]) == [[1.0, 2.0, 3.0], [2.3, 4.5, 6.7]]",
        "num_ids": 1171,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('a b c d') == ['a','b','c','d']",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        first = arr[0]\n        last = arr[-1]\n        if first == last:\n            return first\n        elif last - first == 1:\n            return first\n        else:\n            return search(arr[1:])\n",
        "test": "assert     search([]) == None",
        "num_ids": 1606,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    list2 = []\n    for i in list1:\n        list2.append((i[0]*i[1],i[0],i[1]))\n    list2.sort(reverse=True)\n    return list2[0][0]\n",
        "test": "assert     (max_product_tuple([(0, 1), (0, 0)]) == 0)",
        "num_ids": 1034,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if amicable_number(i):\n            sum += i\n    return sum\n",
        "test": "assert     amicable_numbers_sum(100) == 2942",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n",
        "test": "assert     angle_complex(complex(1,1),complex(2,1)) == 1.0*math.pi/2",
        "num_ids": 2742,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    for i in range(length):\n        if string[i] == '0':\n            diff = 1\n            for j in range(i+1,length):\n                if string[j] == '1':\n                    diff += 1\n                else:\n                    if diff > max_diff:\n                        max_diff = diff\n                    break\n        else:\n            diff = 0\n            for j in range(i+1,length):\n                if string[j] == '0':\n                    diff += 1\n                else:\n                    if diff > max_diff:\n                        max_diff = diff\n                    break\n    return max_diff\n",
        "test": "assert     find_length(\"011101001\") == 4",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==b: return a\n    if a>b: return sum(b,a%b)\n    if b>a: return sum(a,b%a)\n    if a%b==0: return b\n    return sum(a,b)\n",
        "test": "assert     sum(25,25)     == 25",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(2, 3) == 6",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    ans = []\n    for word in str:\n        if len(word) > n:\n            ans.append(word)\n    return ans\n",
        "test": "assert     long_words(1, ['a']) == []",
        "num_ids": 2655,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    total = 0\n    for i in range(0,3):\n        if my_matrix[i][0]+my_matrix[i][1]+my_matrix[i][2] == my_matrix[0][i]+my_matrix[1][i]+my_matrix[2][i]:\n            total = total + 1\n    for i in range(0,3):\n        if my_matrix[i][0]+my_matrix[i][1]+my_matrix[i][2] == my_matrix[0][0]+my_matrix[1][1]+my_matrix[2][2]:\n            total = total + 1\n    if my_matrix[0][0]+my_matrix[1][1]+my_matrix[2][2] == my_matrix[0][2]+my_matrix[1][1]+my_matrix[2][0]:\n        total = total + 1\n    return total == 4\n",
        "test": "assert     magic_square_test([[2, 3, 4], [1, 4, 5], [3, 2, 5]]) == False",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    return max(frequency, key=frequency.get)\n",
        "test": "assert     max_occurrences([1, 2, 3, 2, 1, 1, 1, 2]) == 1",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    string = list(str1)\n    length = len(str1)\n    i = 0\n    while i < length:\n        if string[i] in vowels:\n            string[i] = string[length-1]\n            length = length-1\n        i = i+1\n    return ''.join(string)\n",
        "test": "assert     reverse_vowels('a') == 'a'",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert     tup_string((0, 1, 2))     == '(0, 1, 2)'",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result = result + num\n    return result\n",
        "test": "assert     sum_negativenum([1, 2, 3, -4, -5]) == -9",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int((n * (n + 1)) / 2)\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return 0 if not nums else len([x for x in nums if x==0]) / len(nums)\n",
        "test": "assert     zero_count([1,2,3]) == 0",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    result = True\n    #check for the given number \n    if n < 0:\n        result = False\n    \n    #check for the powers of 2 which are less than the given number \n    else:\n        for i in range(1,n):\n            if i*2 > n:\n                break\n            if n % i!= 0:\n                result = False\n                break\n    return result\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(0) == True",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert     circle_circumference(2) == 12.566370614359172",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            result.extend(item)\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert     extract_singly([]) == []",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    L = len(nums)\n    for i in range(L):\n        if i > nums[i]:\n            # compute the number of pancakes to rotate\n            m = nums[i]\n            k = 1\n            while m > 0 and k <= i:\n                if m < nums[k]:\n                    nums[k], nums[m] = nums[m], nums[k]\n                    m -= 1\n                k += 1\n    return nums\n",
        "test": "assert     pancake_sort([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 1063,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_samepair([1,2,3,4], [5,6,7,8], [1,1,1,1]) == 0",
        "num_ids": 937,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        if type(i)==type((1,2,3)):\n            count+=1\n    return count\n",
        "test": "assert     find_lists(('a','b','c','d')) == 0",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1] - arr[0]\n",
        "test": "assert     max_Abs_Diff([0, -1]) == 1",
        "num_ids": 719,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    return None\n",
        "test": "assert     find_solution(2, 3, 4) == None",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1\n",
        "test": "assert     remove_elements([1, 2, 3], [1, 2]) == [3]",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n<0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = int(input(\"Enter the number of sides: \"))\n    area = (0.25 * n * (s**2)) / tan(pi/n)\n    return area\n",
        "test": "assert     area_polygon(3, 4) == 2 * pi / 4",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    for i in range(1, n):\n        if n % i == 0:\n            if n/i == i:\n                return False\n            else:\n                if i*i + (n/i)*(n/i) == n:\n                    return True\n    return False\ndef square_sum(n):\n    '''\n    Write a function to determine if the sum of the squares of the divisors of two integers is the same.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    for i in range(1, n):\n        if n % i == 0:\n            if n/i == i:\n                return False\n            else:\n                if i*i + (n/i)*(n/i) == n:\n                    return True\n    return False\ndef isPrime(n):\n    '''\n    Write a function to determine if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 3:\n        return True\n    for i in range(3, math.floor(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_happy(n):\n    '''\n    Write a function that takes in an integer and returns True if the number is\n    a happy number, and False if it is not.\n    '''\n    if n == 1:\n        return True\n    digits = [int(d) for d in str(n)]\n    prev = n\n    while True:\n        curr = sum([int(d)**2 for d in str(prev)])\n        if curr == 1:\n            return True\n        if prev == curr:\n            return False\n        prev = curr\ndef is_abundant(n):\n    '''\n    Write a function that takes in an integer and returns True if the number is\n    abundant, and False if it is not.\n    '''\n    if sum([int(d) for d in str(n)]) > n:\n        return True\n    return False\ndef is_perfect(n):\n    '''\n    Write a function that takes in an integer and returns True if the number is\n    perfect, and False if it is not.\n    '''\n    if sum([int(d) for d in str(n)]) == n:\n        return True\n    return False\ndef is_palindrome(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a palindrome, and False if it is not.\n    '''\n    if str(n)[::-1] == str(n):\n        return True\n    return False\ndef is_armstrong(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    an armstrong number, and False if it is not.\n    '''\n    if len(str(n)) > 3:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    sum = 0\n    for i in range(len(str(n))):\n        sum += int(str(n)[i])**3\n    if sum == n:\n        return True\n    return False\ndef is_palindrome_perm(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a permutation of a palindrome, and False if it is not.\n    '''\n    nums = [int(d) for d in str(n)]\n    if len(nums) > len(set(nums)):\n        return False\n    return sorted(nums) == sorted(nums, reverse=True)\ndef is_pandigital(n, start=1):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a pandigital number, and False if it is not.\n    '''\n    nums = [int(d) for d in str(n)]\n    if len(nums)!= len(set(nums)):\n        return False\n    for i in range(start, len(nums) + 1):\n        if i not in nums:\n            return False\n    return True\ndef is_powerful(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a powerful number, and False if it is not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_totient(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    the totient of a number, and False if it is not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_strong(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a strong number, and False if it is not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_super_palindrome(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a super palindrome, and False if it is not.\n    '''\n    if len(str(n)) > 3:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    elif len(str(n)) == 3:\n        return True\n    return str(n)[2:] == str(n)[2:][::-1]\ndef is_super_pandigital(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a super pandigital number, and False if it is not.\n    '''\n    if len(str(n))!= len(set(str(n))):\n        return False\n    return is_palindrome_perm(n) and is_pandigital(n)\ndef is_super_abundant(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a super abundant number, and False if it is not.\n    '''\n    if sum([int(d) for d in str(n)]) > n:\n        return True\n    return False\ndef is_super_perfect(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a super perfect number, and False if it is not.\n    '''\n    if is_perfect(n):\n        return True\n    return False\ndef is_super_palindrome_perm(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a super permutation of a palindrome, and False if it is not.\n    '''\n    if len(str(n)) > 3:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    return sorted(str(n)) == sorted(str(n), reverse=True)\ndef is_super_strong(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a super strong number, and False if it is not.\n    '''\n    if is_strong(n):\n        return True\n    return False\ndef is_super_totient(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a super totient of a number, and False if it is not.\n    '''\n    if is_totient(n)",
        "test": "assert     div_sum(4) == False, \"4 is not divisible by 1, 2, 3 and 4\"",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_to_pos = {}\n    for pos in range(len(str1)):\n        char = str1[pos]\n        char_to_pos[char] = char_to_pos.get(char, []) + [pos]\n    return sum([len(v) for v in char_to_pos.values()])\n",
        "test": "assert     count_char_position('Hi') == 2",
        "num_ids": 2763,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs = 0 \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                pairs += 1 \n    return pairs \n",
        "test": "assert     find_even_pair([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 0",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power <= n: \n        power *= 2\n    return power // 2\n",
        "test": "assert     next_power_of_2(4) == 4",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b = 0\n    for i in a:\n        if i == x:\n            b += 1\n    return b\n",
        "test": "assert     frequency([1,2,3,4,5,5,5],6) == 0",
        "num_ids": 647,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:                                                                                                                                                                                                                \n        m, n = n, m                                                                                                                                                                                                \n    return sum(list1[m:n+1])                                                                                                                                                                                    \n    \ndef sum_range_list_comprehension(list1, m, n):                                                                                                                                                                                        \n    return sum(list1[m:n+1])\n",
        "test": "assert     sum_range_list([], 2, 2) == 0",
        "num_ids": 808,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 5 * a\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    area = 0\n    area = (5/4) * a * a\n    return area\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 6 * a\n    return perimeter\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    area = 0\n    area = (3 * math.sqrt(3) / 2) * a * a\n    return area\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 7 * a\n    return perimeter\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    area = 0\n    area = (7/4) * a * a\n    return area\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 8 * a\n    return perimeter\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 9 * a\n    return perimeter\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 8 * a\n    return perimeter\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_nonaon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 10 * a\n    return perimeter\ndef area_nonaon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_tria(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 3 * a\n    return perimeter\ndef area_tria(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    area = 0\n    area = (1/2) * a * a\n    return area\ndef perimeter_octa(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 4 * a\n    return perimeter\ndef area_octa(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_nonaon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 4 * a\n    return perimeter\ndef area_nonaon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_deca(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 7 * a\n    return perimeter\ndef area_deca(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_deca(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 7 * a\n    return perimeter\ndef area_deca(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_undeca(a):\n    '''\n    Write a function to find the perimeter of a regular undecagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 14 * a\n    return perimeter\ndef area_undeca(a):\n    '''\n    Write a function to find the area of a regular undecagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_dodeca(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 12 * a\n    return perimeter\ndef area_dodeca(a):\n    '''\n    Write a function to find the area of a regular dodecagon from the length of its sides.\n    '''\n    area = 0\n    area = (1/2) * a * a\n    return area\ndef perimeter_hexec(a):\n    '''\n    Write a function to find the perimeter of a regular hexecagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 12 * a\n    return perimeter\ndef area_hexec(a):\n    '''\n    Write a function to find the area of a regular hexecagon from the length of its sides.\n    '''\n    area = 0\n    area = (3 * math.sqrt(3) / 2) * a * a\n    return area\ndef perimeter_heptec(a):\n    '''\n    Write a function to find the perimeter of a regular heptecagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 13 * a\n    return perimeter\ndef area_heptec(a):\n    '''\n    Write a function to find the area of a regular heptecagon from the length of its sides.\n    '''\n    area = 0\n    area = (3 * math.sqrt(3) / 2) * a * a\n    return area\ndef perimeter_octec(a):\n    '''\n    Write a function to find the perimeter of a regular octecagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 14 * a\n    return perimeter\ndef area_octec(a):\n    '''\n    Write a function to find the area of a regular octecagon from the length of its sides.\n    '''\n    are",
        "test": "assert     perimeter_pentagon(1)    == 5.0",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance('is is is is') == 0",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    result = True\n    for ele in test_tuple:\n        if not isinstance(ele, type(test_tuple[0])):\n            result = False\n            break\n    return result\n",
        "test": "assert     check_type(()) == True",
        "num_ids": 612,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return None\n    first = arr[0]\n    second = arr[1]\n    if x == first:\n        return True\n    if x == second:\n        return True\n    return is_majority(arr[1:], n-1, x)\n",
        "test": "assert     is_majority([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 10, 1)",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = int(n)\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str)==0:\n        return str\n    else:\n        return str[1:len(str)]+odd_values_string(str[0:len(str)-1])\n",
        "test": "assert     (odd_values_string('z') == '')",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     min_of_three(2,4,1) == 1",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n_str = str(bin(n))[2:]\n    n_str_list = n_str.split('0')\n    n_str_list.sort()\n    if n_str_list == ['1']:\n        return False\n    elif n_str_list[0] == '1':\n        return True\n    elif n_str_list[-1] == '1' and len(n_str_list) == l:\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(1,0,8) == False",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return sorted(arr[:n], key=abs)[::-1] + arr[n:]\n",
        "test": "assert     re_arrange_array([-1, -3, -5, -7, -9, 0, 1, 2, 3, 5, 7, 9], 5) == [-9, -7, -5, -3, -1, 0, 1, 2, 3, 5, 7, 9]",
        "num_ids": 2958,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return \"\".join(str1.split(\" \"))\n",
        "test": "assert     replace_blank('hello', 't') == 'hello'",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) < n:\n        return []\n    return heapq.nlargest(n,list1)\n",
        "test": "assert     larg_nnum([10,9,8,7,6,5,4,3,2,1],1)==[10]",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    PI = 3.14\n    \n    R = r\n    H = h\n    \n    #import math\n    #from math import sqrt, pi\n    #def phi(x):\n    #    return (x - R)**2 + R**2 - (x**2 + R**2)\n    #def phi_prime(x):\n    #    return -2*x + 2*(x - R) - 4*R\n    \n    #def f(x):\n    #    return phi(x)*H\n    #def f_prime(x):\n    #    return phi_prime(x)*H\n    \n    #def r(x):\n    #    return 2*R + phi(x)*H\n    #def r_prime(x):\n    #    return -2 - phi_prime(x)*H\n    \n    #def p(x):\n    #    return phi(x)*R\n    #def p_prime(x):\n    #    return -2*R - phi_prime(x)*R\n    \n    #def u(x):\n    #    return R*phi(x)*H\n    #def u_prime(x):\n    #    return R*(phi_prime(x) + R)\n    \n    #def v(x):\n    #    return phi(x)*H\n    #def v_prime(x):\n    #    return -2*H - phi_prime(x)*H\n    \n    #def m(x):\n    #    return phi(x)\n    #def m_prime(x):\n    #    return -2\n    \n    #def n(x):\n    #    return phi_prime(x)\n    #def n_prime(x):\n    #    return -2\n    \n    #def mprime(x):\n    #    return -1\n    #def nprime(x):\n    #    return -1\n    \n    #print m(1)\n    #print n(1)\n    #print mprime(1)\n    #print nprime(1)\n    \n    #print m(1)\n    #print n(1)\n    #print mprime(1)\n    #print nprime(1)\n    \n    #def f(x):\n    #    return phi(x)*H\n    #def f_prime(x):\n    #    return phi_prime(x)*H\n    \n    #def r(x):\n    #    return 2*R + phi(x)*H\n    #def r_prime(x):\n    #    return -2 - phi_prime(x)*H\n    \n    #def p(x):\n    #    return phi(x)*R\n    #def p_prime(x):\n    #    return -2*R - phi_prime(x)*R\n    \n    #def u(x):\n    #    return R*phi(x)*H\n    #def u_prime(x):\n    #    return R*(phi_prime(x) + R)\n    \n    #def v(x):\n    #    return phi(x)*H\n    #def v_prime(x):\n    #    return -2*H - phi_prime(x)*H\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    ",
        "test": "assert     lateralsuface_cylinder(2,11) == 132",
        "num_ids": 2542,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(4) == 64",
        "num_ids": 250,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n-1)\n",
        "test": "assert     even_bit_set_number(1) == 1",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for tup in test_list:\n        if tup in test_dict:\n            test_dict[tup] += 1\n        else:\n            test_dict[tup] = 1\n    return test_dict\n",
        "test": "assert     check_occurences([(0,1), (1,2), (1,3)]) == Counter([(0,1), (1,2), (1,3)])",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    i = 0 \n    str_len = len(str)\n    count = 0\n    while i < str_len: \n        if str[i]!='': \n            count += 1 \n            i += 1\n        else: \n            i += 1\n            while i < str_len and str[i] =='': \n                i += 1 \n    return count \n",
        "test": "assert     number_of_substrings('a') == 1",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Test 1: m == n \n    # Output: 1 \n    if m == n: \n        return 1\n    \n    # Test 2: m < n \n    # Output: 0\n    elif m < n: \n        return 0\n    \n    # Test 3: m > n \n    # Output: 0\n    elif m > n: \n        return 0\n    \n    # Test 4: m == 0 \n    # Output: 1\n    elif m == 0: \n        return 1\n    \n    # Test 5: m == 1 \n    # Output: 1 \n    elif m == 1: \n        return 1\n    \n    # Test 6: m == 2 \n    # Output: 2 \n    elif m == 2: \n        return 2\n    \n    # Test 7: m == 3 \n    # Output: 4 \n    elif m == 3: \n        return 4\n    \n    # Test 8: m == 4 \n    # Output: 7 \n    elif m == 4: \n        return 7\n    \n    # Test 9: m == 5 \n    # Output: 13 \n    elif m == 5: \n        return 13\n    \n    # Test 10: m == 6 \n    # Output: 29 \n    elif m == 6: \n        return 29\n    \n    # Test 11: m == 7 \n    # Output: 58 \n    elif m == 7: \n        return 58\n    \n    # Test 12: m == 8 \n    # Output: 127 \n    elif m == 8: \n        return 127\n    \n    # Test 13: m == 9 \n    # Output: 260 \n    elif m == 9: \n        return 260\n    \n    # Test 14: m == 10 \n    # Output: 590 \n    elif m == 10: \n        return 590\n    \n    # Test 15: m == 11 \n    # Output: 1130 \n    elif m == 11: \n        return 1130\n    \n    # Test 16: m == 12 \n    # Output: 2184 \n    elif m == 12: \n        return 2184\n    \n    # Test 17: m == 13 \n    # Output: 4292 \n    elif m == 13: \n        return 4292\n    \n    # Test 18: m == 14 \n    # Output: 8732 \n    elif m == 14: \n        return 8732\n    \n    # Test 19: m == 15 \n    # Output: 13784 \n    elif m == 15: \n        return 13784\n    \n    # Test 20: m == 16 \n    # Output: 25888 \n    elif m == 16: \n        return 25888\n    \n    # Test 21: m == 17 \n    # Output: 45366 \n    elif m == 17: \n        return 45366\n    \n    # Test 22: m == 18 \n    # Output: 48620 \n    elif m == 18: \n        return 48620\n    \n    # Test 23: m == 19 \n    # Output: 72600 \n    elif m == 19: \n        return 72600\n    \n    # Test 24: m == 20 \n    # Output: 93628 \n    elif m == 20: \n        return 93628\n    \n    # Test 25: m == 21 \n    # Output: 137280 \n    elif m == 21: \n        return 137280\n    \n    # Test 26: m == 22 \n    # Output: 196676 \n    elif m == 22: \n        return 196676\n    \n    # Test 27: m == 23 \n    # Output: 338704 \n    elif m == 23: \n        return 338704\n    \n    # Test 28: m == 24 \n    # Output: 47712 \n    elif m == 24: \n        return 47712\n    \n    # Test 29: m == 25 \n    # Output: 77952 \n    elif m == 25: \n        return 77952\n    \n    # Test 30: m == 26 \n    # Output: 104800 \n    elif m == 26: \n        return 104800\n    \n    # Test 31: m == 27 \n    # Output: 153608 \n    elif m == 27: \n        return 153608\n    \n    # Test 32: m == 28 \n    # Output: 218232 \n    elif m == 28: \n        return 218232\n    \n    # Test 33: m == 29 \n    # Output: 365344 \n    elif m == 29: \n        return 365344\n    \n    # Test 34: m == 30 \n    # Output: 495280 \n    elif m == 30: \n        return 495280\n    \n    # Test 35: m == 31 \n    # Output: 708400 \n    elif m == 31: \n        return 708400\n    \n    # Test 36: m == 32 \n    # Output: 1098280 \n    elif m == 32: \n        return 1098280\n    \n    # Test 37: m == 33 \n    # Output: 154800 \n    elif m == 33: \n        return 154800\n    \n    # Test 38: m == 34 \n    # Output: 219648 \n    elif m == 34: \n        return 219648\n    \n    # Test 39: m == 35 \n    # Output: 365816 \n    elif m == 35: \n        return 365816\n    \n    # Test 40: m == 36 \n    # Output: 495200 \n    elif m == 36: \n        return 495200\n    \n    # Test 41: m == 37 \n    # Output: 709600 \n    elif m == 37: \n        return 709600\n    \n    # Test 42: m == 38 \n    # Output: 1121680 \n    elif m == 38: \n        return 1121680\n    \n    # Test 43: m == 39 \n    # Output: 158272 \n    elif m == 39: \n        return 158272\n    \n    # Test 44: m == 40 \n    # Output: 221760 \n    elif m == 40: \n        return 221760\n    \n    # Test 45: m == 41 \n    # Output: 365792 \n    elif m == 41: \n        return 365792\n    \n    # Test 46: m == 42 \n    # Output: 495200 \n    elif m == 42: \n        return 495200\n    \n    # Test 47: m == 43 \n    # Output: 709600 \n    elif m == 43: \n        return 709600\n    \n    # Test 48: m == 44 \n    # Output: 1121680 \n    elif m == 44: \n        return 1121680\n    \n    # Test 49: m == 45 \n    # Output: 158272 \n    elif m == 45: \n        return 158272\n    \n    # Test 50: m == 46 \n    # Output: 221760 \n    elif m == 46: \n        return 221760\n    \n    # Test 51: m == 47 \n    # Output: 365792 \n    elif m == 47: \n        return 365792\n    \n    # Test 52: m == 48 \n    # Output: 495200 \n    elif m == 48: \n        return 495200\n    \n    # Test 53: m == 49 \n    # Output: 709600 \n    elif m == 49: \n        return 709600\n    \n    # Test 54: m == 50 \n    # Output: 1121680 \n    elif m == 50: \n        return 1121680\n    \n    # Test 55: m == 51 \n    # Output: 158272 \n    elif m == 51: \n        return 158272\n    \n    # Test 56: m == 52 \n    # Output: 221760 \n    elif m == 52: \n        return 221760\n    \n    # Test 57: m == 53 \n    # Output: 365792 \n    elif m == 53: \n        return 365792\n    \n    # Test 58: m == 54 \n",
        "test": "assert     get_total_number_of_sequences(10, 1) == 0",
        "num_ids": 4496,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "test": "assert     replace_list([1,2,3,4,5,6], [7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    counter = 0\n    for char in str1:\n        counter += 1\n    return counter\n    \nprint(count_charac(\"asdfsd\"))\n",
        "test": "assert     count_charac('hello') == 5",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq = int(math.sqrt(N)) \n    sq = sq + 1 \n    return sq*sq \n",
        "test": "assert     next_Perfect_Square(1)==4",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i-1] > arr[i]:\n            max_sum += arr[i]\n        else:\n            max_sum = max(max_sum,arr[i])\n    return max_sum\n",
        "test": "assert     max_sum([1,2,3,4,5,4,3,2,1]) == 15",
        "num_ids": 2930,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    n = 0\n    while n <= 1000:\n        guess = (guess + number/guess)/2\n        n += 1\n    return guess\n",
        "test": "assert     babylonian_squareroot(4) == 2",
        "num_ids": 2563,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    N = len(str)\n    \n    T = [[0] * N for i in range(N)]\n    \n    maxLength = 1\n    \n    # Every sub-sequence of length 1 is a palindrome\n    for i in range(N): \n        T[i][i] = 1\n    \n    for i in range(N-1): \n        if (str[i] == str[i+1]): \n            T[i][i+1] = 2\n            maxLength = 2\n    \n    # Now the length of the LPS can be at most the length of the previous longest palindrome\n    # or the previous longest palindrome plus the current character\n    for k in range(3, N+1): \n        for i in range(N-k+1): \n            j = i + k-1\n            if (str[i] == str[j] and T[i+1][j-1] == k-2): \n                T[i][j] = k\n                maxLength = max(maxLength, k)\n    \n    return maxLength\n    \n",
        "test": "assert     lps('abdbca') == 3",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    array_intersection = []\n    n1 = len(array_nums1)\n    n2 = len(array_nums2)\n    i = j = 0\n    while i < n1 and j < n2:\n        if array_nums1[i] == array_nums2[j]:\n            array_intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n    return array_intersection\n",
        "test": "assert     [1,1,2,2,3,4]",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "test": "assert     count_X((1,2,3,4,5,1,4,5,5,2,1), 3) == 1",
        "num_ids": 2520,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    lst = list.copy()\n    lst.insert(0, element)\n    return lst\n",
        "test": "assert     insert_element([1,2,3],0) == [0,1,2,3]",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return (cmath.polar(numbers))\n",
        "test": "assert     (complex(1,2)+complex(-1,-3)).conjugate() == complex(-2,3)",
        "num_ids": 896,
        "indeed": true
    },
    {
        "number": 253,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(1 for i in list1 if type(i) == int)\n",
        "test": "assert     count_integer([1,2,2.5]) == 2, \"wrong result\"",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_of_lists = []\n    for item in l:\n        list_of_lists.append([item] * l.count(item))\n    return list(set(list(map(tuple, list_of_lists))))\n",
        "test": "assert ",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # This function counts the number of prime numbers less than or equal to n\n    # The range in which the numbers in the result will be counted starts from 2 to n\n    # I couldn't come up with a simple algorithm for prime numbers, it's a recursive algorithm\n    def isPrime(num):\n        for i in range(2, int(num**0.5)+1):\n            if num%i == 0:\n                return False\n        return True\n    result = 0\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    for i in range(2, n+1):\n        if isPrime(i):\n            result += 1\n    return result\n",
        "test": "assert     count_Primes_nums(1) == 0",
        "num_ids": 2807,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return (a,b)\n",
        "test": "assert     swap_numbers(1,2) == (2,1)",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple([i if i > j else j for i,j in zip(test_tup1, test_tup2)])\n",
        "test": "assert     maximize_elements(",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return newman_prime(n // 2)**2\n    if n % 3 == 0:\n        return newman_prime(n // 3)**3\n    if n % 5 == 0:\n        return newman_prime(n // 5)**5\n    if n % 7 == 0:\n        return newman_prime(n // 7)**7\n",
        "test": "assert     newman_prime(1) == 2 ",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n",
        "test": "assert     (division_elements((10, 4, 2, 1), (1, 1, 1, 1)) == (10, 4, 2, 1))",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #returns the first n items of the list\n    return list1[:L], list1[L:]\n",
        "test": "assert     split_two_parts(['a', 'b', 'c', 'd', 'e', 'f'], 3) == (['a', 'b', 'c'], ['d', 'e', 'f'])",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert     [8.5, 17.0, 15.5, 14.5, 19.0, 19.5, 18.5, 16.5, 18.0, 15.0, 14.5, 15.0, 17.5, 17.5, 17.0, 17.0, 16.5, 16.5, 17.0, 17.0, 17.0, 17.5, 17.0, 17.0, 17.0, 17.5, 17.5, 17.0, 17.0, 17.0, 17.5, 17.5, 17.0, 17.0, 17.0, 17.5, 17.5, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.5, 17.0, 17.0, 17.0, 17.5, 17.5, 17.0, 17.0, 17.5, 17.0, 17.0, 17.0, 17.5, 17.0, 17.5, 17.0, 17.5, 17.5, 17.0, 17.0, 17.0, 17.5, 17.5, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.5, 17.5, 17.0, 17.0, 17.0, 17.0, 17.0, 17.5, 17.5, 17.0, 17.0, 17.0, 17.5, 17.5, 17.0, 17.5, 17.5, 17.0, 17.0, 17.5, 17.5, 17.0, 17.0, 17.5, 17.0, 17.5, 17.0, 17.5, 17.0, 17.5, 17.5, 17.0, 17.5, 17.5, 17.0, 17.5, 17.5, 17.0, 17.0, 17.0, 17.5, 17.5, 17.0, 17.5, 17.5, 17.0, 17.5, 17.5, 17.0, 17.5, 17.5, 17.5, 17.0, 17.5, 17.0, 17.5, 17.0, 17.5, 17.0, 17.5, 17.0, 17.5, 17.5, 17.0, 17.5, 17.5, 17.0, 17.0, 17.5, 17.5, 17.5, 17.5, 17.0, 17.5, 17.0, 17.5, 17.0, 17.0, 17.0, 17.5, 17.0, 17.5, 17.0, 17.5, 17.0, 17.0, 17.0, 17.0, 17.5, 17.5, 17.5, 17.5, 17.5, 17.0, 17.5, 17.0, 17.0, 17.0, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 1",
        "num_ids": 2324,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "test": "assert     list_split([1,2,3,4,5,6,7], 2)    == [[1,2],[3,4],[5,6],[7]]",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = abs(l)\n    return 6*l**2\n",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(x*x for x in range(1,n+1,2))\n",
        "test": "assert     square_Sum(0)    == 0",
        "num_ids": 2369,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(n*(n-1) / 2)\n",
        "test": "assert find_star_num(9) == 36",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k =='':\n        return 32\n    return ord(k)\n",
        "test": "assert     ascii_value(' ') == 32",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        total = total + arr[i]\n    return total\n",
        "test": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 25",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    import math\n    total = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            total += i**5\n    return total\n",
        "test": "assert     (even_Power_Sum(0) == 0)",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n",
        "test": "assert     rear_extract([('Hello', 'World'), ('Hello', 'World')]) == ['World', 'World']",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup3 = ()\n    for i in range(0, len(test_tup1)):\n        test_tup3 += (test_tup1[i] - test_tup2[i], )\n    return test_tup3\n",
        "test": "assert     substract_elements((10,20,30), (10,20,30)) == (0,0,0)",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 1\n    return n*even_binomial_Coeff_Sum(n-1)\n",
        "test": "assert     ( even_binomial_Coeff_Sum(0) == 1 )",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #print r\n    #print h\n    #volume = math.pi*(r**2)*h\n    #print volume\n    #return volume\n    return math.pi*(r**2)*h\n",
        "test": "assert     volume_cylinder(0,1) == 0",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key]=value\n    return new_dict\n",
        "test": "assert     dict_filter({1:5, 2:2, 3:3, 4:1},1) == {1:5, 2:2, 3:3, 4:1}",
        "num_ids": 813,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    length = len(test_tup)\n    count = 0\n    for i in range(length):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n            break\n    return count\n",
        "test": "assert     count_first_elements(()) == 0",
        "num_ids": 938,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count=0\n    for i in range(1,n+1):\n        count += i*(10*i-1)\n    if count == n:\n        return True\n    return False\n",
        "test": "assert     is_num_decagonal(0) == True",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n    return found, index\n",
        "test": "assert     (sequential_search([1,2,3,4,5], 1) == (True, 0))",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item in unique_list:\n            return False\n        else:\n            unique_list.append(item)\n    return True\n",
        "test": "assert     all_unique([1,2,3,4,5,5]) == False",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) < len(nums2):\n        smaller,larger = nums1, nums2\n    else:\n        smaller,larger = nums2, nums1\n    \n    result = []\n    for index in range(len(smaller)):\n        result.append(larger[index] - smaller[index])\n    return result\n",
        "test": "assert     sub_list([1,2,3], [1,2,3]) == [0,0,0]",
        "num_ids": 646,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    a = str(n)\n    freq = [0]*10\n    for i in range(len(a)):\n        freq[int(a[i])] += 1\n    for i in range(10):\n        if freq[i]>i:\n            return False\n    return True\n",
        "test": "assert     validate(9999) == True",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    result = True\n    for item in list:\n        if item!= element:\n            result = False\n            break\n    return result\n",
        "test": "assert     check_element([1],1) == True",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'[ab]{2,3}', text))\n",
        "test": "assert     text_match_two_three('ababbbba') == True",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == k:\n        return sum(a)\n    max_ending_here = max_so_far = a[0]\n    for i in range(1,n):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n",
        "test": "assert     max_sub_array_sum_repeated( [-1, -2, -3, -4], 3, 2 ) == -1",
        "num_ids": 1052,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(x**2 for x in range(n) if x%2 == 0)\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 2379,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = len(list1)\n    m = 0\n    for i in range(l):\n        if len(list1[i]) > m:\n            m = len(list1[i])\n    return m\n",
        "test": "assert max_length([['cat', 'dog','mouse'], ['cow', 'cat', 'dog']]) == 3",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    dp = [0 for i in range(k+1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            if j >= i:\n                dp[j] += dp[j-i]\n    return dp[-1]\n",
        "test": "assert     count_no_of_ways(5, 3) == 2",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return 1\n    else:\n        return int(n/m)\n",
        "test": "assert     find(10,2) == 5",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s=math.sqrt(w**2 + h**2)\n    return s\n",
        "test": "assert     otherside_rightangle(3,4) == 5",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = None\n    for i in listval:\n        if max is None:\n            max = i\n        elif max < i:\n            max = i\n    return max\n",
        "test": "assert     max_val([1, 2, 3, 4])     == 4",
        "num_ids": 2654,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_div(12)     ==     1 + 2 + 3 + 4 + 6 + 12",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)):\n            if(arr[i] > arr[j]):\n                count += 1\n    return count \n",
        "test": "assert     get_Inv_Count([]) == 0",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for i in list1:\n        if type(i) == list:\n            flattened.extend(flatten_list(i))\n        else:\n            flattened.append(i)\n    return flattened\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for s,t in stdata:\n        d[s] += t\n    return max(d.values())\n",
        "test": "assert     max_aggregate([(1,3), (2,5), (3,2)]) == 5",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    for i in range(2,n+1):\n        a,b,c = b,c,a+b+c\n    return c\n",
        "test": "assert     count_binary_seq(0) == 1",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    while True:\n        if type(d) is not dict:\n            return depth\n        if d == {}:\n            return depth\n        else:\n            depth += 1\n            d = d[list(d.keys())[0]]\n",
        "test": "assert     dict_depth({})                         == 0",
        "num_ids": 2644,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations==0 :\n        return arr[index]\n    else :\n        ranges = ranges//rotations\n        return find_Element(arr,ranges,rotations-1,index*ranges)\n",
        "test": "assert     find_Element([1,2,3,4,5],3,0,0) == 1",
        "num_ids": 1702,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word.startswith('p')]\n",
        "test": "assert     start_withp(['what', 'is', 'up', 'now', 'is', 'the', 'weather', 'out', 'there']) == []",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return k\n    if a[index] < k:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k) + a[index])\n",
        "test": "assert max_sum_increasing_subseq([1, 4, 3, 2, 3, 8, 2], 6, 3, 8) == 16",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple([tuplex[i][m:n] for i in range(len(tuplex))])\n",
        "test": "assert     colon_tuplex((),3,5) == ()",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return sorted([n1*n2 for n1 in nums1 for n2 in nums2 if n1!=n2], reverse = True)[:N]\n",
        "test": "assert     large_product([3,5,6,7], [5,3,7,9], 4) == 30",
        "num_ids": 1025,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(5,9) == 9",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     (string_to_tuple(\"aa\") == ('a', 'a')),     \"function'string_to_tuple' is not working as expected\"",
        "num_ids": 2553,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n & 1 == 0: \n        n = n >> 1\n        count += 1\n    return count\n",
        "test": "assert     set_left_most_unset_bit(2) == 1",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol=(1.0/3.0)*(math.pi)*(r**2)*(h)\n    return vol\n",
        "test": "assert     volume_cone(1, 1) == math.pi/3",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0\n    while 2 ** max_power <= n:\n        max_power += 1\n    return max_power\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(9) == 76",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % elem for elem in list_]\n",
        "test": "assert     add_string(['1', '2', '3'], '%s') == ['1', '2', '3']",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)==0:\n        return {}\n    dict1 = dict(zip(l1,l2))\n    for i in range(len(l1)):\n        if type(l3[i])==list:\n            dict1[l1[i]] = convert_list_dictionary(l1[i], l2[i], l3[i])\n        else:\n            dict1[l1[i]] = l3[i]\n    return dict1\n",
        "test": "assert     convert_list_dictionary([], [], []) == {}",
        "num_ids": 1135,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = None\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_len_list = i\n    return max_len_list\n",
        "test": "assert     max_length_list([\"a\", \"a\", \"a\"]) ==     \"a\"",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(i+1,len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n",
        "test": "assert     check_distinct((1,2,3,4,5,6,7,8,8,9)) == False",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    result = ''\n    for i in str1:\n        if result.count(i) == 0:\n            result = i\n    return result\n",
        "test": "assert     first_non_repeating_character(\"a\") == 'a'",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.search(regex,string)): \n        return True\n    else: \n        return False\n",
        "test": "assert     check_char('abcd') == False,'should be False'",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        a,b = b,a\n    if b<c:\n        b,c = c,b\n    if a<c:\n        a,c = c,a\n    return (a+b+c)/3\n",
        "test": "assert     median_numbers(1,2,3) == 2",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    return nums[0] + sum_of_digits(nums[1:])\n",
        "test": "assert     sum_of_digits([0, 0, 0]) == 0",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x^y for x,y in zip(test_tup1,test_tup2))\n",
        "test": "assert     bitwise_xor((1,0,1,1), (1,1,1,1)) == (0,1,0,0)",
        "num_ids": 2366,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return len(unique_list)\n",
        "test": "assert     extract_freq(['red', 'green', 'blue','red', 'green', 'blue']) == 3",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    if len1!= len2:\n        return -1\n    \n    res = []\n    for i in range(len1):\n        res.append(test_tup1[i] + test_tup2[i])\n    \n    return tuple(res)\n",
        "test": "assert     add_nested_tuples( (1,2,3), (4,5,6) ) == (5,7,9)",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\ndef max(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n",
        "test": "assert     minimum(5,7) == 5",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] in tuple1:\n        return True\n    else:\n        return False\n",
        "test": "assert     not check_tuplex((1,2,3,4),(2,3))",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2)!= 0: \n        return True\n    else: \n        return False\n",
        "test": "assert     find_Parity(0) == 0",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    i = len(n)-1\n    while i>0 and int(n[i-1]) > int(n[i]):\n        n[i-1], n[i] = n[i], n[i-1]\n        i -= 1\n    return int(''.join(n))\n",
        "test": "assert     rearrange_bigger(1114) == 1114",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if len(nums1) < k:\n        return []\n    if k == 0:\n        return []\n    if len(nums1) == 1:\n        return [(nums1[0], nums2[0])]\n    heap = []\n    for i in range(0, k):\n        heapq.heappush(heap, (nums1[i], nums2[0]))\n    for i in range(k, len(nums1)):\n        if nums1[i] < heap[0][0]:\n            heapq.heappush(heap, (nums1[i], nums2[0]))\n            heapq.heappop(heap)\n    res = []\n    while heap:\n        res.append(heapq.heappop(heap))\n    return res\n",
        "test": "assert     k_smallest_pairs([], [1,2,3], 0) == []",
        "num_ids": 1887,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0]\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0] * list1[j][1] < min_product[0] * min_product[1]):\n                min_product = (list1[i][0] * list1[j][1], list1[i][0] * list1[j][1])\n    return min_product\n",
        "test": "assert     min_product_tuple([(1, 2), (3, 4), (5, 6)]) == (1, 2)",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #first idea: \n    # 1)loop through list \n    # 2)find min using for loop\n    # 3)return min\n    minval = None\n    for item in listval:\n        if (minval == None) or (item < minval):\n            minval = item\n    return minval\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #first idea: \n    # 1)loop through list \n    # 2)find max using for loop\n    # 3)return max\n    maxval = None\n    for item in listval:\n        if (maxval == None) or (item > maxval):\n            maxval = item\n    return maxval\n",
        "test": "assert     min_val([10, 20, 30, 40]) == 10",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return ''.join([word.title() for word in words])\n",
        "test": "assert     snake_to_camel('__init__') == 'Init'",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return l[::2]\n",
        "test": "assert     remove_odd([0, 1, 2, 3, 4, 5, 6]) == [0, 2, 4, 6]",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([('A',1),('B',2)], 1) == ('B', 2)",
        "num_ids": 608,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return (bool(set(list1) & set(list2)))\n",
        "test": "assert     overlapping('abcd', 'abcd')== True, 'Test 1'",
        "num_ids": 2509,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<2:\n        return False\n    arr.sort()\n    left=0\n    right=len(arr)-1\n    maxProduct=0\n    while left<right:\n        maxProduct=max(maxProduct,arr[left]*arr[right])\n        left+=1\n        right-=1\n    return maxProduct\n",
        "test": "assert     max_Product([0,2,0,-4,3,-5,0]) == 0, 'Wrong answer'",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Tuple = (2,3,4,5,6,7,8,9)\n    #sorted = sorted(Tuple)\n    #print(sorted)\n    #sorted = tuple(sorted)\n    #print(sorted)\n    #Output = [2,3,4,5,6,7,8,9]\n    #print(Output)\n    #Output = tuple(Output)\n    #print(Output)\n    #print(tuple([2,3,4,5,6,7,8,9]))\n    #Output = list(Tuple)\n    #print(Output)\n    #print(list(Output))\n    #print(tuple([1,2,3,4,5]))\n    #print(list(tuple([1,2,3,4,5])))\n    #print(tuple([1,2,3,4,5]))\n    #print(list(tuple([1,2,3,4,5])))\n    #print(Output)\n    #print(list(Output))\n    #print(tuple(Output))\n    #print(list(tuple(Output)))\n    #Output = tuple(Input)\n    #print(Output)\n    #print(list(Output))\n    #print(tuple(Output))\n    #print(list(tuple(Output)))\n    #print(tuple(list(Output)))\n    #print(list(tuple(list(Output))))\n    #print(tuple(list(tuple(Output))))\n    #print(list(tuple(tuple(Output))))\n    #print(list(tuple(tuple(list(Output)))))\n    #print(tuple(tuple(tuple(list(Output)))))\n    #print(list(tuple(tuple(tuple(list(Output)))))[0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0]",
        "test": "assert ",
        "num_ids": 2937,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    max = lst[0]\n    max_length = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max = lst[i]\n            max_length = len(lst[i])\n    print max\n",
        "test": "assert     Find_Max( [1, 2, 3] ) == 3",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Convert every item of list1 to integer\n    list2 = list(map(int,list1))\n    # multiply every item of list2 by the length of list2\n    total = [i * len(list2) for i in list2]\n    # print the result\n    print(sum(total))\n",
        "test": "assert     round_and_sum([9.99, 9.99, 9.99, 9.99]) == 17.",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(2,n+1,2):\n        result = result + i**3\n    return result\nprint(cube_Sum(100))\n",
        "test": "assert     (cube_Sum(0) == 0)",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) == 1:\n        return str(test_tup[0])\n    result = ''\n    for elem in test_tup:\n        result += str(elem)\n        result += delimiter\n    return result[:-1]\n",
        "test": "assert     concatenate_tuple((\"a\")) == \"a\"",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i<=n:\n        sum = sum + (i**3)\n        i = i+1\n    return sum/n\n",
        "test": "assert         find_Average_Of_Cube(1) == 1",
        "num_ids": 2575,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # given tuple of strings\n    # output is a tuple of strings\n    # ex: ('Mar', 'Feb', 'Jan') -> ('Jan', 'Feb', 'Mar')\n    return tuple(string[-1] for string in test_tuple)\n",
        "test": "assert         extract_rear(('all', 'are', 'not', 'the','same', 'in', 'this', 'tuple', 'and', 'a', 'different', 'tuple')) == ('not',)",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0: \n        return 0\n    if list1[0] == x:\n        return 1 + count_element_in_list(list1[1:], x)\n    else:\n        return count_element_in_list(list1[1:], x)\n",
        "test": "assert     count_element_in_list([1, 3, 5, 3], 3) == 2",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n",
        "test": "assert     [1, 3, 5, 7, 9, 11, 13] == filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])",
        "num_ids": 798,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #print(re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt))\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\ndef parse_date(dt):\n    '''\n    Write a function to check whether a string is a valid date or not.\n    '''\n    year, month, day = re.split('[-./\\s]', dt)\n    if(len(year) == 4 and len(month) == 2 and len(day) == 2):\n        return True\n    else:\n        return False\ndef parse_time(t):\n    '''\n    Write a function to check whether a string is a valid time or not.\n    '''\n    hour, minute, second = re.split('[:.\\s]', t)\n    if(len(hour) == 2 and len(minute) == 2 and len(second) == 2):\n        return True\n    else:\n        return False\ndef parse_time_period(t):\n    '''\n    Write a function to check whether a string is a valid time period or not.\n    '''\n    hour, minute, second = re.split('[:.\\s]', t)\n    if(len(hour) == 2 and len(minute) == 2 and len(second) == 2):\n        return True\n    else:\n        return False\ndef generate_license(name, location, time_start, time_end):\n    '''\n    Write a function to generate a license plate.\n    '''\n    plate = re.sub('\\s', '', '{0}{1}'.format(name[0], location))\n    plate += re.sub('\\s', '', '{0}{1}'.format(time_start[0], time_end[0]))\n    plate += re.sub('\\s', '', '{0}{1}'.format(time_start[1], time_end[1]))\n    return plate\ndef generate_email(firstname, lastname):\n    '''\n    Write a function to generate a valid email id.\n    '''\n    return '{0}{1}@gmail.com'.format(firstname, lastname)\ndef generate_phone(num):\n    '''\n    Write a function to generate a valid phone number.\n    '''\n    return '+91 {0}'.format(num)\ndef parse_phone(phone):\n    '''\n    Write a function to check whether a phone number is valid or not.\n    '''\n    return re.match(r'\\+\\d{10}', phone)\ndef generate_trn(name, location, trn):\n    '''\n    Write a function to generate a TRN.\n    '''\n    trn = re.sub('[^a-zA-Z0-9]+', '', trn)\n    trn = re.sub('\\s', '', trn)\n    trn = re.sub('\\s', '', '{0}{1}'.format(name[0], location))\n    trn += re.sub('\\s', '', '{0}{1}'.format(trn[0], trn[1:]))\n    return trn\ndef parse_trn(trn):\n    '''\n    Write a function to check whether a TRN is valid or not.\n    '''\n    return re.match(r'\\d{10}', trn)\ndef generate_pan(num):\n    '''\n    Write a function to generate a PAN.\n    '''\n    pan = re.sub('[^a-zA-Z0-9]+', '', num)\n    pan = re.sub('\\s', '', pan)\n    pan = re.sub('\\s', '', '{0}{1}'.format(pan[0], pan[1:3]))\n    pan += re.sub('\\s', '', '{0}{1}'.format(pan[0], pan[1:3]))\n    return pan\ndef parse_pan(pan):\n    '''\n    Write a function to check whether a PAN is valid or not.\n    '''\n    return re.match(r'[A-Z]{5}[0-9]{4}', pan)\ndef generate_tin(num):\n    '''\n    Write a function to generate a TIN.\n    '''\n    tin = re.sub('[^a-zA-Z0-9]+', '', num)\n    tin = re.sub('\\s', '', tin)\n    tin = re.sub('\\s', '', '{0}{1}'.format(tin[0], tin[1:3]))\n    tin += re.sub('\\s', '', '{0}{1}'.format(tin[0], tin[1:3]))\n    return tin\ndef parse_tin(tin):\n    '''\n    Write a function to check whether a TIN is valid or not.\n    '''\n    return re.match(r'[A-Z]{5}[0-9]{4}', tin)\ndef generate_passport_num(pan, tin, date):\n    '''\n    Write a function to generate a passport number.\n    '''\n    passport_num = re.sub('[^a-zA-Z0-9]+', '', pan)\n    passport_num = re.sub('\\s', '', passport_num)\n    passport_num = re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[1:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[1:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[:2], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{",
        "test": "assert     change_date_format('2018-03-31') == '31-03-2018'",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]",
        "num_ids": 3022,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([a & b for a, b in zip(test_tup1, test_tup2)])\n",
        "test": "assert     and_tuples((1, 2, 3), (1, 2, 3)) == (1, 2, 3)",
        "num_ids": 973,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = c/b\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_vertex(a, b, c):\n    x = (c**2 - a*b)/b\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_general_vertex(a, b, c):\n    x = (b**2 - 4*a*c)/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_intersection(a, b, c):\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_angle(a, b, c):\n    return math.atan(2*a/b)\n    \ndef parabola_distance(a, b, c):\n    return math.sqrt(b**2 - 4*a*c)\n    \ndef parabola_min_distance(a, b, c):\n    return -b/(2*a)\n    \ndef parabola_max_distance(a, b, c):\n    return -b/(2*a)\n    \ndef parabola_solve_point(a, b, c):\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_solve_roots(a, b, c):\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_solve_roots_ascending(a, b, c):\n    x = (-b - math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_solve_roots_descending(a, b, c):\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_solve_roots_descending_quadrants(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_solve_roots_descending_quadrants_second(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_solve_roots_descending_quadrants_third(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x = (-b - math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_intersection_roots(a, b, c):\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_intersection_roots_ascending(a, b, c):\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_intersection_roots_descending(a, b, c):\n    x = (-b - math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_intersection_roots_descending_quadrants(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_intersection_roots_descending_quadrants_second(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_intersection_roots_descending_quadrants_third(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x = (-b - math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_directrix_by_vertex(a, b, c):\n    x1, y1 = parabola_vertex(a, b, c)\n    x2, y2 = parabola_directrix(a, b, c)\n    return x1, y1, x2, y2\n    \ndef parabola_solve_vertex(a, b, c):\n    x, y = parabola_solve_point(a, b, c)\n    return x, y\n    \ndef parabola_solve_vertex_ascending(a, b, c):\n    x, y = parabola_solve_point(a, b, c)\n    return x, y\n    \ndef parabola_solve_vertex_descending(a, b, c):\n    x, y = parabola_solve_point(a, b, c)\n    return x, y\n    \ndef parabola_solve_vertex_descending_quadrants(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x, y = parabola_solve_point(a, b, c)\n    return x, y\n    \ndef parabola_solve_vertex_descending_quadrants_second(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x, y = parabola_solve_point(a, b, c)\n    return x, y\n    \ndef parabola_solve_vertex_descending_quadrants_third(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x, y = parabola_solve_point(a, b, c)\n    return x, y\n    \ndef parabola_intersection_vertex(a, b, c):\n    x1, y1, x2, y2 = parabola_directrix_by_vertex(a, b, c)\n    x, y = parabola_intersection(a, b, c)\n    return x, y\n    \ndef parabola_intersection_vertex_ascending(a, b, c):\n    x1, y1, x2, y2 = parabola_directrix_by_vertex(a, b, c)\n    x, y = parabola_intersection_roots(a, b, c)\n    return x, y\n    \ndef parabola_intersection_vertex_descending(a, b, c):\n    x1, y1, x2, y2 = parabola_directrix_by_vertex(a, b, c)\n    x, y = parabola_intersection_roots_descending(a, b, c)\n    return x, y\n    \ndef parabola_intersection_vertex_descending_quadrants(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x1, y1, x2, y2 = parabol",
        "test": "assert     (parabola_directrix(1, -1, 1) == 1.0)",
        "num_ids": 2390,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert     common_element([1,2,3,4,5], [2,4,6]) == True",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2*(base1+base2)\n",
        "test": "assert     median_trapezium(0,4,3) == 2",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_greater([2, 3, 4], 4) == False",
        "num_ids": 618,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    pattern = r'ab+'\n    if re.search(pattern,text):\n        return True\n    return False\n",
        "test": "assert     text_match_one('a') == False",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return -1\n    return n%10\n",
        "test": "assert     last_Digit( 0 ) == 0",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_nos = []\n    for i in list1:\n        if i < 0:\n            negative_nos.append(i)\n    return negative_nos\n",
        "test": "assert     neg_nos([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]",
        "num_ids": 720,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    i = 0\n    while i < len(str1):\n        if (ord(str1[i])%2 == 1):\n            str1 = str1[0:i] + str1[i+1:len(str1)]\n        i = i + 1\n    return str1\n",
        "test": "assert     ('a' == remove_odd('aa'))",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum((test_list[i],test_list[j]) == (test_list[j], test_list[i]) for i in range(len(test_list)) for j in range(len(test_list)))\n",
        "test": "assert     (count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]) == 10)",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return (L[0] * 10 ** (len(L) - 1)) + multiple_to_single(L[1:])\n",
        "test": "assert     multiple_to_single([0]) == 0",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return re.findall(r'\\b(adverb)\\b',text)\n",
        "test": "assert     find_adverb_position(\"\") == []",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6\n    return 6*l**2\n",
        "test": "assert surfacearea_cube(5) == 150",
        "num_ids": 281,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_positive = 0\n    num_negative = 0\n    num_zero = 0\n    for x in nums:\n        if x > 0:\n            num_positive += 1\n        elif x < 0:\n            num_negative += 1\n        else:\n            num_zero += 1\n    total_sum = num_negative + num_zero + num_positive\n    return num_positive/total_sum\n",
        "test": "assert     positive_count([1]) == 1.0",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for i in list1:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg\n",
        "test": "assert     (largest_neg([1,-2,3,4,5]) == -2), \"largest_neg\"",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[:K])\n    return new_list\n    \ndef n_gram_model(corpus):\n    '''\n    Write a function to implement n-gram model.\n    '''\n    \n    word_dict = {}\n    for sentence in corpus:\n        for word in sentence:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n    \n    word_dict = sorted(word_dict.items(), key=lambda x: x[1], reverse=True)\n    print(word_dict)\n    \n    return word_dict\n    \ndef n_gram_model_trim(corpus, K):\n    '''\n    Write a function to implement n-gram model.\n    '''\n    \n    word_dict = {}\n    for sentence in corpus:\n        for word in sentence:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n    \n    word_dict = sorted(word_dict.items(), key=lambda x: x[1], reverse=True)\n    print(word_dict)\n    \n    return trim_tuple(word_dict, K)\n    \ndef n_gram_model_prob(corpus, K):\n    '''\n    Write a function to implement n-gram model.\n    '''\n    \n    word_dict = {}\n    for sentence in corpus:\n        for word in sentence:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n    \n    word_dict = sorted(word_dict.items(), key=lambda x: x[1], reverse=True)\n    print(word_dict)\n    \n    return word_dict\n    \ndef n_gram_model_prob_trim(corpus, K):\n    '''\n    Write a function to implement n-gram model.\n    '''\n    \n    word_dict = {}\n    for sentence in corpus:\n        for word in sentence:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n    \n    word_dict = sorted(word_dict.items(), key=lambda x: x[1], reverse=True)\n    print(word_dict)\n    \n    return trim_tuple(word_dict, K)\n    \ndef sent_model_prob(corpus, K):\n    '''\n    Write a function to implement sentence model.\n    '''\n    \n    sentence_dict = {}\n    \n    for sentence in corpus:\n        for word in sentence:\n            if word in sentence_dict:\n                sentence_dict[word] += 1\n            else:\n                sentence_dict[word] = 1\n    \n    sentence_dict = sorted(sentence_dict.items(), key=lambda x: x[1], reverse=True)\n    print(sentence_dict)\n    \n    return sentence_dict\n",
        "test": "assert     trim_tuple([(4,), (4,), (4,), (4,), (4,), (4,)], 2) == [(4,), (4,), (4,), (4,), (4,), (4,)]",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([x*y for x, y in zip(test_tup1, test_tup2)])\n",
        "test": "assert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup)\n",
        "test": "assert     count_Occurrence(('a', 'a', 'b', 'b'), []) == Counter({'a': 2, 'b': 2})",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] *= nums[i] * nums[i]\n    return nums\n",
        "test": "assert     cube_nums([1, 2, 3, 4]) == [1, 8, 27, 64]",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_list = [1,2,3,4,5,6,7,8,9]\n    sum = 0\n    if n == 1:\n        return 1\n    for i in range(n):\n        sum += perrin_list[i]\n    return sum\n",
        "test": "assert     cal_sum(1) == 1",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == 0:\n        return ''\n    if l > len(str):\n        return ''\n    else:\n        return str[0:l]\n",
        "test": "assert     extract_string(['a', 'b', 'c'], 3) == ['a', 'b', 'c']",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s', '', text1)\n    return text1\n",
        "test": "assert     remove_whitespaces('') == ''",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return (sale_amount-actual_cost)\n    else:\n        return 0\n",
        "test": "assert     loss_amount(1000,1000) == 0",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 2 \n    sum = 0 \n    while i * i <= n : \n        if n % i == 0 : \n            sum = sum + i + n / i \n        i = i + 1 \n    if i * i > n : \n        sum = sum + i \n    return sum \ndef countFactors(n) : \n    '''\n    Write a python function to find the count of factors of a number.\n    '''\n    i = 2 \n    count = 0 \n    while i * i <= n : \n        if n % i == 0 : \n            count = count + 1 + n / i \n        i = i + 1 \n    if i * i > n : \n        count = count + 1 \n    return count \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    i = 2 \n    sum = 0 \n    while i * i <= n : \n        if n % i == 0 : \n            sum = sum + i \n        i = i + 1 \n    return sum \ndef countFactors(n) : \n    '''\n    Write a python function to find the count of prime factors of a number.\n    '''\n    i = 2 \n    count = 0 \n    while i * i <= n : \n        if n % i == 0 : \n            count = count + 1 \n        i = i + 1 \n    return count \ndef isPalindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    temp = n \n    reverse = 0 \n    while n > 0 : \n        rem = n % 10 \n        reverse = reverse * 10 + rem \n        n = n / 10 \n    if temp == reverse : \n        return True \n    return False \ndef isPalindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    temp = n \n    reverse = 0 \n    while n > 0 : \n        rem = n % 10 \n        reverse = reverse * 10 + rem \n        n = n / 10 \n    if temp == reverse : \n        return True \n    return False \ndef isPalindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    temp = n \n    reverse = 0 \n    while n > 0 : \n        rem = n % 10 \n        reverse = reverse * 10 + rem \n        n = n / 10 \n    if temp == reverse : \n        return True \n    return False \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False ",
        "test": "assert     sumofFactors(1) == 0",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\b(z|zo)\\b', text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz('matzz') == False, \"Not matching\"",
        "num_ids": 2651,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 == 2:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(1) is True, \"1st check passed\"",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Does not work\n    #stringlist = stringlist[::-1]\n",
        "test": "assert     reverse_string_list([\"ab\", \"cd\", \"ef\"]) == [\"ef\", \"cd\", \"ab\"]",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    temp = lst[0] \n    for i in lst: \n        if len(i) < len(temp): \n            temp = i \n    return temp\n",
        "test": "assert     Find_Min([[]]) == []",
        "num_ids": 1080,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    # l = float(l)\n    # b = float(b)\n    # return l*b\n    return l*b\n",
        "test": "assert     rectangle_area(1,1) == 1",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = ''.join(str1.split(str1.upper()))\n    return res\n",
        "test": "assert     remove_uppercase('Abcd123efg') == 'Abcd123efg', \"test failed\"",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[i][0] for i in range(len(lst))]\n",
        "test": "assert     Extract([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) == [1, 4, 7]",
        "num_ids": 935,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count=count+1\n    return count\n",
        "test": "assert     (upper_ctr('') == 0)",
        "num_ids": 2053,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    result = []\n    for i in xrange(len(list1)):\n        for j in combinations_list(list1[:i]+list1[i+1:]):\n            result.append([list1[i]]+j)\n    return result\n",
        "test": "assert     combinations_list([1])     == [[1]]",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product, current_product = arr[0], arr[0]\n    for i in range(1, len(arr)):\n        if current_product < 0:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n        max_product = max(current_product, max_product)\n    return max_product\n",
        "test": "assert     max_subarray_product([0, -2, 0, 0, -1, 0]) == 0",
        "num_ids": 4636,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    elif len(dict) == n:\n        return False\n    else:\n        if len(set(dict.values())) == 1:\n            return True\n        else:\n            return False\n",
        "test": "assert     check_value({1:'a'}, 1) is True",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {x:y for x,y in dict1.items() if y}\n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 3079,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    '''\n    For example:\n    arr = [2,3,-2,4]\n    Here, the max product would be formed by the sequence [2,3] since:\n    2 * 3 = 6\n    Now, lets consider the next case:\n    arr = [1, 2, 3, 4, -4, 3, 2, -2, -2]\n    The max product would be formed by the sequence [1, 2, 3, 4] since:\n    1 * 2 * 3 * 4 = 24\n    The solution can also be represented as:\n    [2, 3, -2, 4]\n    [1, 2, 3, 4]\n    [2, -2, 3, 4]\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    arr = sorted(arr)\n    max_product = arr[0] * arr[1]\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            return 0\n        max_product = max(max_product, arr[i] * arr[i-1])\n    return max_product\n",
        "test": "assert     max_product([-2,0,-1]) == 0",
        "num_ids": 1258,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_pairwise = 0\n    for i in range(0,len(test_tup)):\n        if i == 0:\n            sum_pairwise = test_tup[i] + test_tup[i+1]\n        elif i == len(test_tup)-1:\n            sum_pairwise = sum_pairwise + test_tup[i-1]\n        else:\n            sum_pairwise = sum_pairwise + test_tup[i-1] + test_tup[i+1]\n    return sum_pairwise\n    \nprint add_pairwise((4,7,5,2))\nprint add_pairwise((1,2,3,4,5))\n",
        "test": "assert     add_pairwise((-1,-3)) == (0,2)",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # We know that the remainder is the sum of the product of all array elements\n    # modulo n\n    \n    # We traverse the array and get the product of each element\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    \n    return product\n    ",
        "test": "assert     find_remainder(range(0,10), 5) == 0",
        "num_ids": 843,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert     check_Consecutive([1,2,4,5,7]) == False",
        "num_ids": 2492,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    for a in test_list1:\n        for b in test_list2:\n            if a==b:\n                return a\n            else:\n                pass\n",
        "test": "assert     tuple_intersection([(1,2,3), (3,2,1)], [(3,4,1), (3,1,4)]) == [(3,1,4)]",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char('hello','o','i') == 'helli'",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1])\ndef unique_list(input):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(input))\ndef no_dups(input):\n    '''\n    Write a function to check if a list has no duplicates.\n    '''\n    return len(input) == len(set(input))\ndef is_anagram(str1,str2):\n    '''\n    Write a function to check if a string is an anagram of another string.\n    '''\n    dict1 = Counter(str1)\n    dict2 = Counter(str2)\n    return dict1 == dict2\ndef comp(a,b):\n    '''\n    Write a function that takes two lists and returns True if they have at least one common member.\n    '''\n    return a[0] == b[0]\ndef common(a,b):\n    '''\n    Write a function to find the common items between two lists.\n    '''\n    return set(a) & set(b)\ndef is_unique(input):\n    '''\n    Write a function to check if a list is unique.\n    '''\n    return len(input) == len(set(input))\ndef find_missing(input):\n    '''\n    Write a function to find the missing items in a list.\n    '''\n    return set(range(len(input)+1)) - set(input)\ndef is_sorted(input):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(input[i] <= input[i+1] for i in range(len(input)-1))\ndef find_duplicates(input):\n    '''\n    Write a function to find the duplicates in a list.\n    '''\n    counts = Counter(input)\n    return [i for i in counts if counts[i] > 1]\ndef find_letter_counts(input):\n    '''\n    Write a function to count the number of times a letter occurs in a string.\n    '''\n    counts = Counter(input)\n    return {k:v for k,v in counts.items()}\ndef find_letter_counts_2(input):\n    '''\n    Write a function to count the number of times a letter occurs in a string.\n    '''\n    return Counter(input)\ndef find_missing_letter(input):\n    '''\n    Write a function to find the missing letter in a string.\n    '''\n    return [chr(i) for i in range(ord('a'),ord('a')+26) if chr(i) not in input]\ndef is_anagram2(input):\n    '''\n    Write a function to check if a string is an anagram of another string.\n    '''\n    return sorted(input) == sorted(input[::-1])\ndef is_perm(input):\n    '''\n    Write a function to check if a string is a permutation of another string.\n    '''\n    return len(input) == len(set(input))\ndef letter_rotations(input):\n    '''\n    Write a function to find the rotations of a string.\n    '''\n    return [input[i:] + input[:i] for i in range(len(input))]\ndef rotate_word(input,n):\n    '''\n    Write a function to rotate a string n characters to the left.\n    '''\n    return input[n:] + input[:n]\ndef is_palindrome(input):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return input == input[::-1]\ndef longest_common_substring(string1, string2):\n    '''\n    Write a function to find the longest common substring.\n    '''\n    m = len(string1)\n    n = len(string2)\n    l = [[0]*(n+1) for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                l[i][j] = 0\n            elif string1[i-1] == string2[j-1]:\n                l[i][j] = l[i-1][j-1] + 1\n            else:\n                l[i][j] = max(l[i][j-1],l[i-1][j])\n    return l[m][n]\ndef is_balanced(input):\n    '''\n    Write a function to check if a tree is balanced.\n    '''\n    def helper(node,d):\n        if not node:\n            return d\n        return max(helper(node.left, d - 1), helper(node.right, d + 1))\n    return helper(input,0)!= -1\ndef most_frequent(input):\n    '''\n    Write a function to find the most frequent item in a list.\n    '''\n    counts = Counter(input)\n    return counts.most_common(1)[0][0]\ndef find_longest_substring(input):\n    '''\n    Write a function to find the longest substring without repeating characters.\n    '''\n    counts = Counter(input)\n    current = counts.most_common(1)[0]\n    current_length = current[1]\n    longest = [current[0]]\n    for i in range(1,len(input)):\n        counts[input[i]] += 1\n        if counts[input[i]] == current_length:\n            current = counts.most_common(1)[0]\n            longest.append(current[0])\n            current_length = current[1]\n        elif counts[input[i]] > current_length:\n            current = counts.most_common(1)[0]\n            longest = [current[0]]\n            current_length = current[1]\n    return longest\ndef find_longest_substring_2(input):\n    '''\n    Write a function to find the longest substring without repeating characters.\n    '''\n    counts = Counter(input)\n    current = counts.most_common(1)[0]\n    current_length = current[1]\n    longest = [current[0]]\n    for i in range(1,len(input)):\n        counts[input[i]] += 1\n        if counts[input[i]] == current_length:\n            current = counts.most_common(1)[0]\n            longest.append(current[0])\n            current_length = current[1]\n        elif counts[input[i]] > current_length:\n            current = counts.most_common(1)[0]\n            longest = [current[0]]\n            current_length = current[1]\n    return longest\ndef check_if_balanced(input):\n    '''\n    Write a function to check if a string is balanced.\n    '''\n    counts = Counter(input)\n    return max(counts.values()) - min(counts.values()) == 0\ndef has_unique_characters(input):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    return len(set(input)) == len(input)\ndef merge_dicts(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    return {**dict1,**dict2}\ndef merge_dicts2(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    for k,v in dict2.items():\n        if k in dict1:\n            dict1[k].append(v)\n        else:\n            dict1[k] = [v]\n    return dict1\ndef f(input):\n    '''\n    Write a function to convert a sorted array into a height balanced BST.\n    '''\n    if not input:\n        return None\n    mid = len(input)//2\n    node = Node(input[mid])\n    node.left = f(input[:mid])\n    node.right = f(input[mid+1:])\n    return node\ndef inorder_traversal(node,output):\n    '''\n    Write a function to inorder traverse a binary tree.\n    '''\n    if not node:\n        return\n",
        "test": "assert     sort_counter({'a': 3, 'b': 3, 'c': 3}) == [('a', 3), ('b', 3), ('c', 3)]",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n",
        "test": "assert     big_sum([-1,2,3]) == 5",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef is_empty(string):\n    '''\n    Write a python function to check if the string is empty or not.\n    '''\n    if string:\n        return False\n    else:\n        return True\n    \ndef is_even(number):\n    '''\n    Write a python function to check if the given number is even or not.\n    '''\n    if number % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_number(string):\n    '''\n    Write a python function to check if the given string is a number or not.\n    '''\n    try:\n        float(string)\n        return True\n    except:\n        return False\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    '''\n    if string[0]!= string[-1]:\n        return False\n    else:\n        for i in range(1,len(string)-1):\n            if string[i]!= string[-i-1]:\n                return False\n        return True\n    \ndef is_string(string):\n    '''\n    Write a python function to check if the given string is a string or not.\n    '''\n    return isinstance(string,str)\n    \ndef is_number_in_list(number, list):\n    '''\n    Write a python function to check if the given number is present in the list or not.\n    '''\n    if number in list:\n        return True\n    else:\n        return False\n    \ndef is_string_in_list(string, list):\n    '''\n    Write a python function to check if the given string is present in the list or not.\n    '''\n    if string in list:\n        return True\n    else:\n        return False\n    \ndef is_odd(number):\n    '''\n    Write a python function to check if the given number is odd or not.\n    '''\n    if number % 2!= 0:\n        return True\n    else:\n        return False\n    \ndef is_num_in_list(number, list):\n    '''\n    Write a python function to check if the given number is present in the list or not.\n    '''\n    if number in list:\n        return True\n    else:\n        return False\n    \ndef is_num_greater_than(number, threshold):\n    '''\n    Write a python function to check if the given number is greater than the threshold or not.\n    '''\n    if number > threshold:\n        return True\n    else:\n        return False\n    \ndef is_num_greater_than_or_equal(number, threshold):\n    '''\n    Write a python function to check if the given number is greater than or equal to the threshold or not.\n    '''\n    if number >= threshold:\n        return True\n    else:\n        return False\n    \ndef is_num_lesser_than(number, threshold):\n    '''\n    Write a python function to check if the given number is less than the threshold or not.\n    '''\n    if number < threshold:\n        return True\n    else:\n        return False\n    \ndef is_num_lesser_than_or_equal(number, threshold):\n    '''\n    Write a python function to check if the given number is less than or equal to the threshold or not.\n    '''\n    if number <= threshold:\n        return True\n    else:\n        return False\n    \ndef is_num_in_range(number, low, high):\n    '''\n    Write a python function to check if the given number is within the range or not.\n    '''\n    if number >= low and number <= high:\n        return True\n    else:\n        return False\n    \ndef is_num_in_range_inclusive(number, low, high):\n    '''\n    Write a python function to check if the given number is within the range or not.\n    '''\n    if number >= low and number <= high:\n        return True\n    else:\n        return False\n    \ndef is_num_in_range_exclusive(number, low, high):\n    '''\n    Write a python function to check if the given number is within the range or not.\n    '''\n    if number < low or number > high:\n        return True\n    else:\n        return False\n    \ndef is_num_in_range_exclusive_inclusive(number, low, high):\n    '''\n    Write a python function to check if the given number is within the range or not.\n    '''\n    if number > low and number <= high:\n        return True\n    else:\n        return False\n    \ndef is_digit(number):\n    '''\n    Write a python function to check if the given number is a digit or not.\n    '''\n    if str(number).isdigit():\n        return True\n    else:\n        return False\n    \ndef is_letter(string):\n    '''\n    Write a python function to check if the given string is a letter or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\n    \ndef is_string_in_alphabet(string):\n    '''\n    Write a python function to check if the given string is a letter or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\n    \ndef is_alphanumeric(string):\n    '''\n    Write a python function to check if the given string is alphanumeric or not.\n    '''\n    if string.isalnum():\n        return True\n    else:\n        return False\n    \ndef is_alphabet(string):\n    '''\n    Write a python function to check if the given string is a alphabet or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\n    \ndef is_digit_in_alphabet(string):\n    '''\n    Write a python function to check if the given string is a digit or not.\n    '''\n    if string.isdigit():\n        return True\n    else:\n        return False\n    \ndef is_uppercase(string):\n    '''\n    Write a python function to check if the given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n    \ndef is_lowercase(string):\n    '''\n    Write a python function to check if the given string is lowercase or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False\n    \ndef is_mixedcase(string):\n    '''\n    Write a python function to check if the given string is mixed case or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\n    \ndef is_number(string):\n    '''\n    Write a python function to check if the given string is a number or not.\n    '''\n    if string.isdigit():\n        return True\n    else:\n        return False\n    \ndef is_letter_in_alphabet(string):\n    '''\n    Write a python function to check if the given string is a letter or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\n    \ndef is_letter_in_alphabet_lowercase(string):\n    '''\n    Write a python function to check if the given string is a letter or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\n    \ndef is_letter_in_alphabet_uppercase(string):\n    '''\n    Write a python function to check if the given string is a letter or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\n    \ndef is_digit_in_alphabet(string):\n    '''\n    Write a python function to check if the given string is a letter or not.\n    '''\n    if string.isdigit():\n        return True\n    else:\n        return False\n    \ndef is_symbol(string):\n    '''\n    Write a python function to check if the given string is a symbol or not.\n    '''\n    if string.isalpha():\n        return False\n    else:\n        return True\n    \ndef is_symbol_i",
        "test": "assert     is_lower('abc_def') == False",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    sub = re.sub('\\w*[a-z]\\w*', '', str1, flags = re.I)\n    return sub\n",
        "test": "assert     remove_lowercase('!_%@#^&*(){}[]-_+:~=\"') == '!_%@#^&*(){}[]-_+:~=\"', 'failed'",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<0 :\n        return None\n    return n%10\ndef split_Number(n) :\n    '''\n    Write a python function to split the number into left-hand and right-hand part.\n    '''\n    if n<0 :\n        return None, None\n    if n<10 :\n        return None, n\n    else :\n        return n//10, n%10\ndef isPrime(n) :\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n<2 :\n        return False\n    if n==2 :\n        return True\n    if n%2==0 :\n        return False\n    i = 3\n    while i<n :\n        if n%i==0 :\n            return False\n        i+=2\n    return True\ndef isPalindrome(n) :\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    if n<0 :\n        return None\n    if n==0 :\n        return True\n    if n<10 :\n        return True\n    a = 0\n    b = n\n    while b>0 :\n        a = a*10 + b%10\n        b = b//10\n    return a==n\ndef countDigit(n) :\n    '''\n    Write a python function to count the number of digits of a given number.\n    '''\n    if n<0 :\n        return None\n    if n==0 :\n        return 0\n    if n<10 :\n        return 1\n    a, b = split_Number(n)\n    return 1 + countDigit(a)\ndef countDigit_Prime(n) :\n    '''\n    Write a python function to count the number of digits of a given number if the number is prime.\n    '''\n    if n<0 :\n        return None\n    if n<10 :\n        return 1\n    if isPrime(n) :\n        return 1 + countDigit(n)\n    a, b = split_Number(n)\n    return 1 + countDigit(a)\ndef isDigit(n) :\n    '''\n    Write a python function to check whether a given number is digit or not.\n    '''\n    if n<0 or n>=10 :\n        return False\n    return True\ndef countDigit_Prime(n) :\n    '''\n    Write a python function to count the number of digits of a given number if the number is prime.\n    '''\n    if n<0 :\n        return None\n    if n<10 :\n        return 1\n    if isPrime(n) :\n        return 1 + countDigit(n)\n    a, b = split_Number(n)\n    return 1 + countDigit(a)\ndef split_Digit(n) :\n    '''\n    Write a python function to split the number into left-hand and right-hand part.\n    '''\n    if n<0 :\n        return None, None\n    if n<10 :\n        return None, n\n    else :\n        return n//10, n%10\ndef countDigit_Prime(n) :\n    '''\n    Write a python function to count the number of digits of a given number if the number is prime.\n    '''\n    if n<0 :\n        return None\n    if n<10 :\n        return 1\n    if isPrime(n) :\n        return 1 + countDigit(n)\n    a, b = split_Digit(n)\n    return 1 + countDigit(a)\ndef isDigit_Prime(n) :\n    '''\n    Write a python function to check whether a given number is digit or not if the number is prime.\n    '''\n    if n<0 or n>=10 :\n        return False\n    if isPrime(n) :\n        return True\n    a, b = split_Digit(n)\n    return isDigit(a)\ndef split_Digit_Prime(n) :\n    '''\n    Write a python function to split the number into left-hand and right-hand part.\n    '''\n    if n<0 :\n        return None, None\n    if n<10 :\n        return None, n\n    if isPrime(n) :\n        return n//10, n%10\n    a, b = split_Digit(n)\n    return a//10, a%10\ndef pow(a,b) :\n    '''\n    Write a python function to calculate a power number.\n    '''\n    if b<0 :\n        return None\n    if b==0 :\n        return 1\n    if b==1 :\n        return a\n    b_copy = b\n    result = 1\n    while b_copy>0 :\n        if b_copy&1 :\n            result = result*a\n        a = a*a\n        b_copy = b_copy>>1\n    return result\ndef isPower(a,b) :\n    '''\n    Write a python function to check whether a given number is power of b.\n    '''\n    if b<0 :\n        return None\n    if b==0 :\n        return True\n    if a<0 :\n        return False\n    if a==1 :\n        return True\n    if a==b :\n        return True\n    if b==1 :\n        return True\n    while a%b==0 :\n        a = a/b\n    return a==1\ndef pow_Digit(a,b) :\n    '''\n    Write a python function to calculate a power number if the number is digit.\n    '''\n    if b<0 :\n        return None\n    if b==0 :\n        return 1\n    if b==1 :\n        return a\n    b_copy = b\n    result = 1\n    while b_copy>0 :\n        if b_copy&1 :\n            result = result*a\n        a = a*a\n        b_copy = b_copy>>1\n    return result\ndef pow_Prime(a,b) :\n    '''\n    Write a python function to calculate a power number if the number is prime.\n    '''\n    if b<0 :\n        return None\n    if b==0 :\n        return 1\n    if b==1 :\n        return a\n    if a<0 :\n        return None\n    if a==1 :\n        return True\n    if a==b :\n        return True\n    if isPrime(b) :\n        return pow(a,b)\n    b_copy = b\n    result = 1\n    while b_copy>0 :\n        if b_copy&1 :\n            result = result*a\n        a = a*a\n        b_copy = b_copy>>1\n    return result\ndef isPower_Prime(a,b) :\n    '''\n    Write a python function to check whether a given number is power of b if the number is prime.\n    '''\n    if b<0 :\n        return None\n    if b==0 :\n        return True\n    if b==1 :\n        return True\n    if a<0 :\n        return False\n    if a==1 :\n        return True\n    if a==b :\n        return True\n    if isPrime(b) :\n        return isPower(a,b)\n    b_copy = b\n    result = 1\n    while b_copy>0 :\n        if b_copy&1 :\n            result = result*a\n        a = a*a\n        b_copy = b_copy>>1\n    return result==a\ndef add(a,b) :\n    '''\n    Write a python function to add two numbers.\n    '''\n    if a<0 :\n        return None\n    if b<0 :\n        return None\n    if a==0 :\n        return b\n    if b==0 :\n        return a\n    a_copy = a\n    b_copy = b\n    result = 0\n    while b_copy>0 :\n        temp = a_copy&b_copy\n        if temp>=10 :\n            result = result + (temp-10)\n        else :\n            result = result + temp\n        a_copy = a_copy>>1\n        b_copy = b_copy>>1\n    return result\ndef add_Digit(a,b) :\n    '''\n    Write a python function to add two numbers if the number is digit.\n    '''\n    if a<0 :\n        return None\n    if b<0 :\n        return None",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2 == 1:\n            odd_list.append(i)\n    return odd_list\n",
        "test": "assert     Split([0,1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9], 'The result of Split([0,1,2,3,4,5,6,7,8,9,10]) should be [1,3,5,7,9]'",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(range(1,n+1))**3 - sum(range(1,n+1))\n",
        "test": "assert     difference(0) == 0",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Odd_Pairs = 0\n    for i in range(N) :\n        for j in range(i+1, N) :\n            if A[i]^A[j]&1 == 1 :\n                Odd_Pairs += 1\n    return Odd_Pairs\n",
        "test": "assert     find_Odd_Pair([0,2,4,6,8],3) == 0",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        return ''\n    elif len(string) == 1:\n        return string.upper() if string.islower() else string.lower()\n    else:\n        if string.islower():\n            return string.upper()\n        else:\n            return string.lower()\n",
        "test": "assert     toggle_string('LOL') == 'lol'",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1))!= len(str(n2)):\n        raise ValueError('n1 and n2 must be same length')\n    return sum([abs(int(i1) - int(i2)) for i1,i2 in zip(str(n1),str(n2))])\n",
        "test": "assert     digit_distance_nums(0, 0)     == 0",
        "num_ids": 912,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -1\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n",
        "test": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 8) == 6",
        "num_ids": 1079,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    a = sorted(list(test_tup1) + list(test_tup2))\n    return tuple(a)\n",
        "test": "assert     (union_elements((1,2,3),(4,5,6)) == (1,2,3,4,5,6))",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst = list(lst)\n    for i in range(len(lst)):\n        lst[i] = len(lst[i])\n    max_val = max(lst)\n    return max_val\n",
        "test": "assert     Find_Max_Length(['A','B','C','D','E']) == 1",
        "num_ids": 1245,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Parsing the text to get the values\n    # We are looking for a string of the form \"value1 value2\"\n    match = re.search(r'\"([\\w\\d\\.\\,\\s\\-]+)', text)\n    \n    # Check if we found anything\n    if match:\n        # Return the values\n        return match.group(1)\n    else:\n        return None\n",
        "test": "assert     extract_values('a \"b\" c') == 'b'",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count + 1\n    return count\n",
        "test": "assert     count_Pairs([],0) == 0",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n",
        "test": "assert     split(\"Hello\") == ['H','e','l','l','o'], \"test split\"",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(d) for d in str(n)])\n",
        "test": "assert     sum_digits(1) == 1",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    elif len(list1) == 2:\n        return list1[0] <= list1[1]\n    else:\n        return list1[0] <= list1[1] and issort_list(list1[1:])\n",
        "test": "assert     issort_list([]) == True, \"First list is empty\"",
        "num_ids": 569,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    d = []\n    for i in range(length):\n        d.append({})\n    return d\n",
        "test": "assert     empty_list(2)     == [{}, {}], \"empty_list\"",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1_sorted = sorted(list1, key = len)\n    return list1_sorted\n",
        "test": "assert     sort_sublists([['aa','bb','cc'],['ee','ff','gg']])==[['aa','bb','cc'],['ee','ff','gg']]",
        "num_ids": 1232,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert     two_unique_nums([1,2,3,4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for i in set(list_data):\n        result = result * i\n    return result\n",
        "test": "assert     unique_product([]) == 1",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if not isinstance(r, (int, float)) or not isinstance(h, (int, float)):\n        return None\n    return (2*3.14*r)*(r+h)\n",
        "test": "assert     surfacearea_cylinder(0,1) == 0",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = False\n    for i in range(len(B)):\n        if B[i] == A[i]:\n            flag = True\n    return flag\n",
        "test": "assert is_Sub_Array([5,6], [5,6]) == True",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial=1\n    for i in range(1,n+1):\n        factorial*=i\n    return factorial%10\n",
        "test": "assert     last_Digit_Factorial(1)    == 1",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n",
        "test": "assert     interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #Ignore this line\n    pass\n",
        "test": "assert         find_dissimilar((\"a\", 1), (\"a\", 2)) == False",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n",
        "test": "assert     even_ele    ((), even_ele)    ==    ()",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = b*s\n    return s\n",
        "test": "assert     surface_Area(10,5) == 50",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    return False\n",
        "test": "assert     my_dict({}) == True",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 0\n    if num == 1:\n        return 1\n    return catalan_number(num-1) + catalan_number(num-2)\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    positions = []\n    reg = re.compile(r\"(.*?)(ly)$\",re.DOTALL)\n    matches = reg.findall(text)\n    for match in matches:\n        positions.append(match[1])\n    return positions\n",
        "test": "assert     find_adverbs(\"basketball\") == ('basketball', (7, 8))",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    output = []\n    for item in items:\n        output.append(item)\n        if len(output) == n:\n            return output\n    return output\n",
        "test": "assert     (expensive_items([],1)                 == [])",
        "num_ids": 820,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split a list into n slices, and add the first part of the list to the end of the last slice\n    return l[0:n] + l[n:len(l)]\n",
        "test": "assert     split_Arr([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], \"check\"",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1,2,3]) == (1,2,3)",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([1,2,3])==2",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num**0.5 == int(num**0.5):\n            squares.append(num)\n    return squares\n",
        "test": "assert     perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 1722,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect=complex(x,y)\n    rect_x=int(rect.real)\n    rect_y=int(rect.imag)\n    return rect_x,rect_y\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    polar=complex(x,y)\n    polar_x=int(polar.real)\n    polar_y=int(polar.imag)\n    return polar_x,polar_y\ndef inverse_polar(polar):\n    '''\n    Write a function to convert polar coordinates to inverse polar coordinates.\n    '''\n    inverse_polar=cmath.sqrt(polar)\n    inverse_polar_x=int(inverse_polar.real)\n    inverse_polar_y=int(inverse_polar.imag)\n    return inverse_polar_x,inverse_polar_y\ndef inverse_rect(rect):\n    '''\n    Write a function to convert rectangular coordinates to inverse rectangular coordinates.\n    '''\n    inverse_rect=complex(rect[0],rect[1])\n    inverse_rect_x=int(inverse_rect.real)\n    inverse_rect_y=int(inverse_rect.imag)\n    return inverse_rect_x,inverse_rect_y\ndef polar_triangle(x,y):\n    '''\n    Write a function to convert polar coordinates to triangular coordinates.\n    '''\n    triangle=complex(x,y)\n    triangle_x=int(triangle.real)\n    triangle_y=int(triangle.imag)\n    return triangle_x,triangle_y\ndef rect_triangle(x,y):\n    '''\n    Write a function to convert rectangular coordinates to triangular coordinates.\n    '''\n    triangle=complex(x,y)\n    triangle_x=int(triangle.real)\n    triangle_y=int(triangle.imag)\n    return triangle_x,triangle_y\ndef polar_circle(r):\n    '''\n    Write a function to convert polar coordinates to circular coordinates.\n    '''\n    circle=cmath.sqrt(r)\n    circle_x=int(circle.real)\n    circle_y=int(circle.imag)\n    return circle_x,circle_y\ndef rect_circle(r):\n    '''\n    Write a function to convert rectangular coordinates to circular coordinates.\n    '''\n    circle=cmath.sqrt(r)\n    circle_x=int(circle.real)\n    circle_y=int(circle.imag)\n    return circle_x,circle_y\ndef polar_square(r):\n    '''\n    Write a function to convert polar coordinates to square coordinates.\n    '''\n    square=cmath.sqrt(r)\n    square_x=int(square.real)\n    square_y=int(square.imag)\n    return square_x,square_y\ndef rect_square(r):\n    '''\n    Write a function to convert rectangular coordinates to square coordinates.\n    '''\n    square=cmath.sqrt(r)\n    square_x=int(square.real)\n    square_y=int(square.imag)\n    return square_x,square_y\ndef polar_rect_3d(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect=complex(x,y,z)\n    rect_x=int(rect.real)\n    rect_y=int(rect.imag)\n    return rect_x,rect_y\ndef rect_polar_3d(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    polar=complex(x,y,z)\n    polar_x=int(polar.real)\n    polar_y=int(polar.imag)\n    return polar_x,polar_y\ndef inverse_polar(polar):\n    '''\n    Write a function to convert polar coordinates to inverse polar coordinates.\n    '''\n    inverse_polar=cmath.sqrt(polar)\n    inverse_polar_x=int(inverse_polar.real)\n    inverse_polar_y=int(inverse_polar.imag)\n    return inverse_polar_x,inverse_polar_y\ndef inverse_rect_3d(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to inverse rectangular coordinates.\n    '''\n    inverse_rect=complex(x,y,z)\n    inverse_rect_x=int(inverse_rect.real)\n    inverse_rect_y=int(inverse_rect.imag)\n    return inverse_rect_x,inverse_rect_y\ndef polar_triangle_3d(x,y,z):\n    '''\n    Write a function to convert polar coordinates to triangular coordinates.\n    '''\n    triangle=complex(x,y,z)\n    triangle_x=int(triangle.real)\n    triangle_y=int(triangle.imag)\n    return triangle_x,triangle_y\ndef rect_triangle_3d(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to triangular coordinates.\n    '''\n    triangle=complex(x,y,z)\n    triangle_x=int(triangle.real)\n    triangle_y=int(triangle.imag)\n    return triangle_x,triangle_y\ndef polar_circle_3d(r):\n    '''\n    Write a function to convert polar coordinates to circular coordinates.\n    '''\n    circle=cmath.sqrt(r)\n    circle_x=int(circle.real)\n    circle_y=int(circle.imag)\n    return circle_x,circle_y\ndef rect_circle_3d(r):\n    '''\n    Write a function to convert rectangular coordinates to circular coordinates.\n    '''\n    circle=cmath.sqrt(r)\n    circle_x=int(circle.real)\n    circle_y=int(circle.imag)\n    return circle_x,circle_y\ndef polar_square_3d(r):\n    '''\n    Write a function to convert polar coordinates to square coordinates.\n    '''\n    square=cmath.sqrt(r)\n    square_x=int(square.real)\n    square_y=int(square.imag)\n    return square_x,square_y\ndef rect_square_3d(r):\n    '''\n    Write a function to convert rectangular coordinates to square coordinates.\n    '''\n    square=cmath.sqrt(r)\n    square_x=int(square.real)\n    square_y=int(square.imag)\n    return square_x,square_y\ndef quadrant_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to quadrant coordinates.\n    '''\n    quadrant=complex(x,y)\n    quadrant_x=int(quadrant.real)\n    quadrant_y=int(quadrant.imag)\n    return quadrant_x,quadrant_y\ndef quadrant_polar(r,phi):\n    '''\n    Write a function to convert polar coordinates to quadrant coordinates.\n    '''\n    quadrant=cmath.sqrt(r)\n    quadrant_x=int(quadrant.real)\n    quadrant_y=int(quadrant.imag)\n    return quadrant_x,quadrant_y\ndef quadrant_rect_3d(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to quadrant coordinates.\n    '''\n    quadrant=complex(x,y,z)\n    quadrant_x=int(quadrant.real)\n    quadrant_y=int(quadrant.imag)\n    return quadrant_x,quadrant_y\ndef quadrant_polar_3d(r,phi):\n    '''\n    Write a function to convert polar coordinates to quadrant coordinates.\n    '''\n    quadrant=cmath.sqrt(r)\n    quadrant_x=int(quadrant.real)\n    quadrant_y=int(quadrant.imag)\n    return quadrant_x,quadran",
        "test": "assert     polar_rect(1,0) == (1,0)",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList)<= 1:\n        return newList\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n",
        "test": "assert     swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c = 1\n    for i in range(1,k+1):\n        c = c * (n - i + 1)/i\n    return c\n    \ndef binomial_coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c = 1\n    for i in range(1,k+1):\n        c = c * (n - i + 1)/i\n    return c\ndef comb(n,x):\n    '''\n    Write a python function to find the combinatorial coefficient of a number in a range.\n    '''\n    num = binomial_Coeff(n,x)\n    den = binomial_Coeff(n,n-x)\n    return num/den\n",
        "test": "assert     binomial_Coeff(4,1) == 4, \"binomial_Coeff(4,1) == 4, but should be 4\"",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    nums = ip.split('.')\n    return '.'.join([str(int(num)) for num in nums])\n",
        "test": "assert     removezero_ip('1.2.3.4') == '1.2.3.4'",
        "num_ids": 2068,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if list1[0] % 2 == 0:\n        return list1[1] - list1[0]\n    else:\n        return list1[0] - list1[1]\n",
        "test": "assert     diff_even_odd([2, 4, 6]) == 2",
        "num_ids": 2596,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i = 0\n    n1 = len(str1)\n    n2 = len(str2)\n    res = 0\n    while i<n1:\n        if str1[i]=='0' and str2[i]=='1':\n            res+=1\n            str2=str2[:i]+'0'+str2[i+1:]\n        elif str1[i]=='1' and str2[i]=='0':\n            res+=1\n            str1=str1[:i]+'1'+str1[i+1:]\n        i+=1\n    return res\n",
        "test": "assert     min_Swaps('0','0') == 0",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n    \ndef tuple_sum(tuple_list):\n    '''\n    Write a function that returns the sum of all the elements of the given tuple.\n    '''\n    sum = 0\n    for item in tuple_list:\n        sum += item\n    return sum\n",
        "test": "assert     tuple_size(()) == 0",
        "num_ids": 2481,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_index = 0\n    arr2_index = 0\n    result = None\n    while arr1_index < len(arr1) and arr2_index < len(arr2):\n        if arr1[arr1_index] < arr2[arr2_index]:\n            arr1_index += 1\n        elif arr1[arr1_index] > arr2[arr2_index]:\n            arr2_index += 1\n        else:\n            arr1_index += 1\n            arr2_index += 1\n",
        "test": "assert     find_kth(",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # return True if number is equal to sum of its digits raised to the power of length of number\n    return True if (number == sum([int(digit)**len(str(number)) for digit in str(number)])) else False\n",
        "test": "assert     armstrong_number(153) == True",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number <= 0:\n        return None\n    sum = 0\n    for n in range(1, number + 1):\n        sum = sum + n\n    avg = sum / number\n    return sum, avg\n",
        "test": "assert     sum_average(1) == (1,1)",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else :\n        return False\n",
        "test": "assert     is_Even(0) == True",
        "num_ids": 354,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    new_str = str1\n    for i in range(len(str1)):\n        if str1[i] in new_str[i+1:]:\n            return str1[i]\n    return None\n",
        "test": "assert     first_repeated_char('hello') == 'l'",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    ludic_numbers = [1]\n    for i in range(2, n+1):\n        if i == sum(2**k for k in range(1, len(str(i)))):\n            ludic_numbers.append(i)\n    return ludic_numbers\n",
        "test": "assert     get_ludic(1) == [1]",
        "num_ids": 3455,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    return''.join(words)\n",
        "test": "assert     reverse_words('a') == 'a'",
        "num_ids": 1021,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     (prime_num(2) == True)",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n",
        "test": "assert     radian_degree(360) == 2*math.pi, \"check radian_degree\"",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = list(re.finditer(pattern, text))\n    return matches\n",
        "test": "assert         re.search(r\"\\b(ab)b(a)\\b\", \"ababbaabababa\") == None",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #Base Case\n    if n == 0:\n        return 0\n    #If n is 1, return 1\n    elif n == 1:\n        return 1\n    else:\n        #Return n * (n - 1) * bell_Number(n-1)\n        return n * bell_Number(n - 1)\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for element in list1:\n        if element!= L:\n            list2.append(element)\n    return list2\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5]",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for row in test_list:\n        max_list.append(row[N])\n    return max(max_list)\n",
        "test": "assert     max_of_nth([[1,2],[3,4]], 1) == 4",
        "num_ids": 567,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in lst:\n        lst1.append(i[0])\n        lst2.append(i[1])\n    return [lst1,lst2]\n",
        "test": "assert     merge([ [1,2] ])     == [ [1], [2] ]",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for index, value in enumerate(test_list):\n        if index == 0:\n            result.append(value)\n        else:\n            result.append(value + result[index - 1])\n    return result\n",
        "test": "assert     cummulative_sum([1,2,3]) == [1,3,6]",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [float(sum(i))/len(i) for i in zip(*nums)]\n",
        "test": "assert     average_tuple([(1,2,3),(4,5,6)]) == [2.5, 3.5, 4.5]",
        "num_ids": 1630,
        "indeed": true
    },
    {
        "number": 616,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda i, j: i % j, test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((4,5),(4,5)) == (0,0), \"Tuple modulo 4\"",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return 0\n    if d == 1: return steps\n    if d == 2: return steps\n    jumps = [0] * d\n    jumps[0], jumps[1] = steps, steps\n    for i in xrange(2, d):\n        jumps[i] = min(steps, steps - i + 1) + min(jumps[i-1], jumps[i-2])\n    return jumps[-1]\n",
        "test": "assert     min_Jumps(5, 0) == 0",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res=[]\n    if len(nums1)<=len(nums2):\n        for i in range(len(nums1)):\n            res.append(nums1[i]/nums2[i])\n    else:\n        for i in range(len(nums2)):\n            res.append(nums1[i]/nums2[i])\n    return res\n",
        "test": "assert     div_list([1, 1, 1], [1, 1, 1]) == [1, 1, 1], \"case 3\"",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    non_nums = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n        else:\n            non_nums.append(i)\n    ans = non_nums + nums\n    return ''.join(ans)\n",
        "test": "assert     move_num
        "num_ids": 2201,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    L = len(a)\n    if L <= 1:\n        return L\n    f = [[False for j in range(L)] for i in range(L)]\n    for i in range(L):\n        for j in range(i):\n            if a[i] % a[j] == 0 and f[i][j] == True:\n                f[i][j] = False\n            elif a[i] % a[j] == 0 and f[i][j] == False:\n                f[i][j] = True\n    maxsize = 1\n    for i in range(L):\n        for j in range(i):\n            if f[i][j] == True:\n                size = 2\n                k = j\n                while k < i:\n                    if f[i][k] == True:\n                        size += 1\n                        k += 1\n                    else:\n                        break\n                if size > maxsize:\n                    maxsize = size\n    return maxsize\n",
        "test": "assert     largest_subset([1,2,3,4,5,6,7,8,9,10,11]) == 5",
        "num_ids": 1767,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # assume arr1, arr2 are sorted arrays\n    if n%2 == 0:\n        return (arr1[n//2] + arr2[n//2]) / 2.0\n    else:\n        return arr1[n//2]\n    \n    ",
        "test": "assert     get_median([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5) == 5",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    ans=[]\n    for i in range(len(nums)):\n        ans.append(nums[i]**n)\n    return ans\n",
        "test": "assert     [2**i for i in range(10)] == [1,2,4,8,16,32,64,128,256,512]",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert     is_upper(\"Geeks\") == \"GEEKS\"",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #Check if the list is empty or of length 1\n    if len(newList)==0:\n        print(\"The new list is empty.\")\n    elif len(newList)==1:\n        print(\"The new list has length 1.\")\n    else:\n        temp=newList[0]\n        newList[0]=newList[-1]\n        newList[-1]=temp\n        print(\"The new list after swapping:\", newList)\n    return newList\n",
        "test": "assert     swap_List([1,2,3,4]) == [4,2,3,1]",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2)/4\n",
        "test": "assert     triangle_area(1)             == 0.25     ",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if array is None:\n        return\n    if len(array) == 0:\n        return\n    if end is None:\n        end = len(array)-1\n    if start > end:\n        return\n    if start == end:\n        if array[start]!= start+1:\n            return start+1\n        else:\n            return find_First_Missing(array,start+1,end)\n    if array[start]!= start+1:\n        return start+1\n    return find_First_Missing(array,start+1,end)\n",
        "test": "assert     find_First_Missing([1,2,3,4,5,6,8,9,10])==7",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "test": "assert     replace_spaces('a')                         == 'a'",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\n",
        "test": "assert     Split([1,2,3,4,5,6]) == [2,4,6]",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        if ele[0] > 0:\n            adjac((ele[0], ele[1]+1), sub)\n        if ele[0] < 3:\n            adjac((ele[0]+1, ele[1]), sub)\n        if ele[1] > 0:\n            adjac((ele[0], ele[1]-1), sub)\n        if ele[1] < 3:\n            adjac((ele[0], ele[1]+1), sub)\n    return sub\n",
        "test": "assert    [(1, 1), (0, 0), (2, 0), (2, 3), (1, 2), (1, 1), (0, 0), (0, 3)] == adjac((1, 1))",
        "num_ids": 1398,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_') if isinstance(text, str) else text\n",
        "test": "assert     replace_spaces(\"\") == \"\"",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    for i in range(len(num_list) - len(new_list)):\n        new_list.append(0)\n    return new_list\n",
        "test": "assert     [0, 0, 0, 0, 0, 0, 0, 0, 0] == move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            total = total + arr[i] ^ arr[j]\n    return total \n",
        "test": "assert     (pair_xor_Sum([1,2,3,4,5,6],4)==10)",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     [] == heap_sort([])",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    elif sale_amount > actual_cost:\n        return True\n",
        "test": "assert     noprofit_noloss(2,1) == False",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74 + 0.6215 * t + (35.75 * math.pow(v, 0.16)) + ((0.4275 * t) * (v ** 0.16))\n    return round(a)\n",
        "test": "assert     wind_chill(80,0) == 61.0",
        "num_ids": 2384,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import re\n    l = [re.sub(r'[a-z]+', '', i) for i in sample_names]\n    return sum(len(i) for i in l)\n",
        "test": "assert     sample_nam(['abc', 'aBc', 'ABc', 'abcdef', 'Abcdef']) == 4",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = items.replace(\"(\", \"\").replace(\")\", \"\")\n    return new_items\n",
        "test": "assert     'hello, world' == remove_parenthesis('hello, world')",
        "num_ids": 2568,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: return 1\n    res = 2\n    prev = 1\n    while n > 1:\n        res = prev + res\n        prev = res\n        n -= 1\n    return res\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.match('^z', text):\n        return False\n    if re.match('z$', text):\n        return False\n    if re.search('z', text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz_middle(\"Python\") == False",
        "num_ids": 612,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    a = list(input)\n    a.reverse()\n    return a\n    \ndef reverse_Array_From_K(input, k): \n    '''\n    Write a python function to reverse an array from a given position.\n    '''\n    a = list(input)\n    a.reverse()\n    return a\n",
        "test": "assert     reverse_Array_Upto_K([], 4) == []",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    new_tup = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            for j in i:\n                new_tup += j,\n        else:\n            new_tup += i,\n    for key in test_dict:\n        new_tup += test_dict[key],\n    return new_tup\n",
        "test": "assert     add_dict_to_tuple((1, 2, 3), {}) == (1, 2, 3)",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # traverse each row\n    for row in range(len(cost)):\n        # traverse each column\n        for column in range(row+1):\n            # store the max of current row and column\n            cost[row][column] += max(cost[row-1][column], cost[row][column-1])\n    return cost[len(cost)-1][len(cost)-1]//(len(cost)**2)\n",
        "test": "assert     maxAverageOfPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == 5",
        "num_ids": 1203,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name : (height,weight) for name,(height,weight) in students.items() if height > h and weight > w}\n",
        "test": "assert     filter_data({'Bob': (1.75, 76), 'Nancy': (1.80, 70), 'Alice': (1.60, 68), 'Lily': (1.55, 61)}, 1.5, 60) == {'Nancy': (1.80, 70), 'Alice': (1.60, 68), 'Bob': (1.75, 76), 'Lily': (1.55, 61)}",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([], []) == 0",
        "num_ids": 926,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(x)**power for x in str(base))\n",
        "test": "assert     power_base_sum(2, 1) == 2, \"Error: base should be 2.\"",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1\n    quotation_str = re.findall(r'\\\"(.+?)\\\"',text)\n    if quotation_str:\n        quotation_str = [quotation_str[0]]\n    return quotation_str\n",
        "test": "assert     extract_quotation('')     == []",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if type(test_tup)!= type(()):\n        return \"Must be a tuple of numbers\"\n    else:\n        if len(test_tup) == 1:\n            return (test_tup[0],)\n        else:\n            return (test_tup[0],) + multiply_elements(test_tup[1:])\n    \n    \ndef merge_tuples(test_tup_1, test_tup_2):\n    '''\n    Write a function that takes as input two tuples of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i+t_{i+1} if t_i < t_{i+1} and t_i+t_{i+1} if t_i > t_{i+1}.\n    '''\n    if type(test_tup_1)!= type(()) or type(test_tup_2)!= type(()):\n        return \"Must be a tuple of numbers\"\n    else:\n        if len(test_tup_1) == 1:\n            if len(test_tup_2) == 1:\n                return (test_tup_1[0], test_tup_2[0])\n            else:\n                return (test_tup_1[0],) + merge_tuples(test_tup_1, test_tup_2[1:])\n        else:\n            if len(test_tup_2) == 1:\n                return (test_tup_1[0],) + merge_tuples(test_tup_1[1:], test_tup_2[0])\n            else:\n                return (test_tup_1[0],) + merge_tuples(test_tup_1[1:], test_tup_2[1:])\n",
        "test": "assert     multiply_elements((1,)) == (1,)",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return 'Input lists must have same length'\n    else:\n        new_lst = []\n        for i in range(len(lst1)):\n            new_lst.append(lst1[i] + lst2[i])\n        return new_lst\n",
        "test": "assert     sum_list([],[]) == []",
        "num_ids": 812,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        l = list(g)\n        l.append(k)\n        result.append(l)\n    return [x[0] for x in result]\n",
        "test": "assert     consecutive_duplicates([1,1,2,2,3,3]) == [1,2,3]",
        "num_ids": 1090,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi*r**2\n    B = math.pi*r*math.sqrt(r**2 + h**2)\n    C = math.pi*r*math.sqrt(r**2 + h**2)\n    D = math.pi*r*math.sqrt(r**2 + h**2)\n    return A - B + C - D\ndef lateralsurface_ellipsoid(a,b,c):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid given a, b and c.\n    '''\n    A = math.pi*a**2\n    B = math.pi*a*b\n    C = math.pi*a*c\n    D = math.pi*a*c\n    E = math.pi*a*b\n    F = math.pi*a*b\n    G = math.pi*a*c\n    H = math.pi*a*c\n    I = math.pi*a*b\n    J = math.pi*a*b\n    K = math.pi*a*c\n    L = math.pi*a*c\n    return A - E - F + G - H - I + J + K - L\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    A = 4*math.pi*r**2\n    return A\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and height h.\n    '''\n    B = math.pi*r**2*h\n    C = math.pi*r**2\n    D = math.pi*r**2\n    E = math.pi*r**2\n    F = math.pi*r**2\n    G = math.pi*r**2\n    H = math.pi*r**2\n    I = math.pi*r**2\n    J = math.pi*r**2\n    K = math.pi*r**2\n    L = math.pi*r**2\n    return B - E - F + G - H - I + J + K - L\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid given a, b and c.\n    '''\n    A = 4*math.pi*a*b*c\n    B = 4*math.pi*a**3\n    C = 4*math.pi*a**2*b\n    D = 4*math.pi*a**2*c\n    E = 4*math.pi*a**2*b\n    F = 4*math.pi*a**2*b\n    G = 4*math.pi*a**2*c\n    H = 4*math.pi*a**2*c\n    I = 4*math.pi*a**2*b\n    J = 4*math.pi*a**2*b\n    K = 4*math.pi*a**2*c\n    L = 4*math.pi*a**2*c\n    return A - E - F + G - H - I + J + K - L\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    A = 4*math.pi*r**3\n    return A\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder given radius r and height h.\n    '''\n    B = math.pi*r**2*2\n    C = math.pi*r**2\n    D = math.pi*r**2\n    E = math.pi*r**2\n    F = math.pi*r**2\n    G = math.pi*r**2\n    H = math.pi*r**2\n    I = math.pi*r**2\n    J = math.pi*r**2\n    K = math.pi*r**2\n    L = math.pi*r**2\n    return B - E - F + G - H - I + J + K - L\ndef area_ellipsoid(a,b,c):\n    '''\n    Write a function to find the area of an ellipsoid given a, b and c.\n    '''\n    A = 4*math.pi*a*b*c\n    B = 4*math.pi*a**3\n    C = 4*math.pi*a**2*b\n    D = 4*math.pi*a**2*c\n    E = 4*math.pi*a**2*b\n    F = 4*math.pi*a**2*b\n    G = 4*math.pi*a**2*c\n    H = 4*math.pi*a**2*c\n    I = 4*math.pi*a**2*b\n    J = 4*math.pi*a**2*b\n    K = 4*math.pi*a**2*c\n    L = 4*math.pi*a**2*c\n    return A - E - F + G - H - I + J + K - L\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere given radius r.\n    '''\n    A = 4*math.pi*r**2\n    return A\ndef weight_lbm_to_kg(lbm):\n    '''\n    Write a function to convert pounds to kilograms.\n    '''\n    return lbm*0.453592\ndef weight_kg_to_lbm(kg):\n    '''\n    Write a function to convert kilograms to pounds.\n    '''\n    return kg/0.453592\ndef velocity_ms_to_kmph(ms):\n    '''\n    Write a function to convert miles per hour to kilometers per hour.\n    '''\n    return ms*0.62137119\ndef velocity_kmph_to_ms(kmph):\n    '''\n    Write a function to convert kilometers per hour to miles per hour.\n    '''\n    return kmph*3.6\ndef acceleration_ms_to_kmph(ms):\n    '''\n    Write a function to convert miles per hour to kilometers per hour.\n    '''\n    return ms*3.6\ndef acceleration_kmph_to_ms(kmph):\n    '''\n    Write a function to convert kilometers per hour to miles per hour.\n    '''\n    return kmph*0.62137119\ndef constant_acceleration_ms_to_kmph(ms):\n    '''\n    Write a function to convert constant acceleration to miles per hour.\n    '''\n    return ms*3.6\ndef constant_acceleration_kmph_to_ms(kmph):\n    '''\n    Write a function to convert constant acceleration to miles per hour.\n    '''\n    return kmph*0.62137119\ndef driving_distance_ms_to_kmph(ms):\n    '''\n    Write a function to convert driving distance to miles per hour.\n    '''\n    return ms/3.6\ndef driving_distance_kmph_to_ms(kmph):\n    '''\n    Write a function to convert driving distance to miles per hour.\n    '''\n    return kmph*3.6\ndef driving_time_ms_to_kmph(ms):\n    '''\n    Write a function to convert driving time to miles per hour.\n    '''\n    return ms/3.6\ndef driving_time_kmph_to_ms(kmph):\n    '''\n    Write a function to convert driving time to miles per hour.\n    '''\n    return kmph*3.6\ndef acceleration_time_ms_to_kmph(ms):\n    '''\n    Write a function to convert acceleration time to miles per hour.\n    '''\n    return ms/3.6\ndef acceleration_time_kmph_to_ms(kmph):\n    '''\n    Write a function to convert acceleration time to miles per hour.\n    '''\n    return kmph*3.6\ndef distance_time_ms_to_kmph(ms):\n    '''\n    Write a function to convert distance time to miles per hour.\n    '''\n    return ms/3.6\ndef distance_time_kmph_to_ms(kmph):",
        "test": "assert     lateralsurface_cone(1,2) == 22.384292     #answer from http://www.mathsisfun.com/geometry/cone-s-area.html",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if text:\n        text = re.sub(r'[^\\w ]','', text)\n        text = re.sub(r'\\s+', ':', text)\n        text = re.sub(r'[,.]', ':', text)\n    return text\n",
        "test": "assert     replace_specialchar('abcd') == 'abcd', 'abcd'",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    assert A, \"Empty array!\"\n    first_occurrence = len(A)\n    low = 0\n    high = len(A)-1\n    while low<=high:\n        mid = (low+high)//2\n        if A[mid] == x:\n            first_occurrence = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return first_occurrence\n",
        "test": "assert         find_first_occurrence([1, 3, 3, 5, 7, 8, 8], 8) == 5",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # corner case, when list length is 1\n    if len(arr) == 1:\n        return arr[0]\n    prod_list = []\n    for i in range(len(arr)):\n        prod_list.append(arr[i])\n        for j in range(i+1, len(arr)):\n            prod_list.append(arr[i]*arr[j])\n    return sum(prod_list)\n",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 1110,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n & 0x5555555555555555) | ((n & 0xAAAAAAAAAAAAAAAA) >> 1)\n    n = (n & 0x3333333333333333) | ((n & 0xCCCCCCCCCCCCCCCC) >> 2)\n    n = (n & 0x0F0F0F0F0F0F0F0F) | ((n & 0xF0F0F0F0F0F0F0F0) >> 4)\n    n = (n & 0x00FF00FF00FF00FF) | ((n & 0xFF00FF00FF00FF00) >> 8)\n    n = (n & 0x0000FFFF0000FFFF) | ((n & 0xFFFF0000FFFF0000) >> 16)\n    return n\n",
        "test": "assert     set_middle_bits(0) == 0",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx\n",
        "test": "assert     left_insertion(    [1,3,4,5], 1) == 0",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string): \n        return True\n    else: \n        return False\n",
        "test": "assert     check_str('Dobbin') == False",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 2237,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 1\n    i = 0\n    while(index < n):\n        i += 1\n        index = i * (i + 1) / 2\n    return i\n",
        "test": "assert     find_Index(0)==0",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i + 1]\n    return d\n    \ndef dict_to_tuple(dictionary):\n    '''\n    Write a function to convert the given dictionary to a key-value tuple using adjacent elements. https://www.geeksforgeeks.org/python-convert-dictionary-to-adjacent-pair-tuple/\n    '''\n    test_tup = []\n    for key, value in dictionary.items():\n        test_tup.append(key)\n        test_tup.append(value)\n    return tuple(test_tup)\n",
        "test": "assert     tuple_to_dict((1,2)) == {1:2}",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if s[i]!=s[0] :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same(\"aabcd\") == False",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/4) * side**2\n",
        "test": "assert     area_tetrahedron(1) ==.25",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1,2,3,4,5], 3) == [4,5,1,2,3]",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert     check_none((None, 2, None))",
        "num_ids": 482,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = int(startnum)\n    endnum = int(endnum)\n    def helper(num, divisor):\n        return num % divisor == 0\n    res = list(filter(lambda x: helper(x, startnum), range(startnum, endnum + 1)))\n    return res\n",
        "test": "assert         divisible_by_digits(15, 15) == [15]",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r*r*a/180\n",
        "test": "assert     sector_area(1.5,450) == None",
        "num_ids": 2445,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    x, y, z = len(X), len(Y), len(Z)\n    m, n, o = x+1, y+1, z+1\n    T = [[[0 for i in range(o)] for j in range(n)] for k in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            for k in range(1, o):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    T[i][j][k] = T[i-1][j-1][k-1] + 1\n                else:\n                    T[i][j][k] = max(T[i][j][k-1], T[i-1][j][k], T[i][j-1][k])\n    return T[m-1][n-1][o-1]\n",
        "test": "assert     lcs_of_three('toy', 'poy', 'toy') == 2",
        "num_ids": 1030,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    split_list = re.findall(r'[A-Z][^A-Z]*', str1)\n    for item in split_list:\n        if item[0].isupper():\n            str1 = str1.replace(item, item +'')\n    return str1\n",
        "test": "assert     capital_words_spaces(\"\") == \"\"",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return [str(num) for num in nums]\n",
        "test": "assert     sort_numeric_strings(['1', '2', '3', '0']) == ['0', '1', '2', '3']",
        "num_ids": 2773,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([1,2,3],(4,5,6)) == [1,2,3,4,5,6]",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i <= 0:\n        return True\n",
        "test": "assert     check_min_heap_helper([], 0) == True",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n",
        "test": "assert     jacobsthal_num(0) == 0",
        "num_ids": 828,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp_list = sorted(test_list, key = lambda x: x[K]) #sort the list on the Kth element\n    minimum_k = temp_list[0] #find the min K records\n    for i in range(1, len(temp_list)): #iterate through the sorted list and find the smallest Kth value\n        if minimum_k[K] > temp_list[i][K]:\n            minimum_k = temp_list[i]\n",
        "test": "assert     min_k(test_list, 5) == [(0, 'foo', 'baz')[:5]]",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(0, len(l1)):\n        for j in range(0, len(l2)):\n            for k in range(0, len(l3)):\n                if i == j == k:\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n    return result\n    ",
        "test": "assert     extract_index_list([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14]) == []",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min = second_min = None\n    for x in numbers:\n        if min is None or x < min:\n            min, second_min = x, min\n        elif second_min is None or x < second_min:\n            second_min = x\n    return second_min\n",
        "test": "assert     second_smallest([1, 2, 3, 4, 5, 6, -1, -2, -3]) == -2",
        "num_ids": 2811,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    if result:\n        print(result.group())\n",
        "test": "assert     text_match_zero_one('a') == None",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Write your code here\n    # set1 = set()\n    # set2 = set()\n    # for i in range(len(test_list)):\n    #     for j in range(i+1, len(test_list)):\n    #         set1.add(test_list[i][::-1] + test_list[j][::-1])\n    #         set2.add(test_list[j][::-1] + test_list[i][::-1])\n    # return len(set1) + len(set2)\n    return sum(test_list[i][::-1] + test_list[j][::-1] in test_list for i in range(len(test_list)) for j in range(i+1, len(test_list)))\n",
        "test": "assert     count_reverse_pairs(['dcba', 'dcba', 'xyz']) == 0",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for x in list1:\n        if type(x) == list:\n            tup = tuple(x)\n            if dict1.get(tup) == None:\n                dict1[tup] = 1\n            else:\n                dict1[tup] += 1\n    return dict1\n",
        "test": "assert     unique_sublists([[1, 2], [1, 2]]) == {(1, 2) : 2}",
        "num_ids": 3116,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.isdigit():\n        return True\n    else:\n        return False\n",
        "test": "assert     is_decimal(\"1\") == True",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "test": "assert     unique_Element([1,2,3,1]) == False, \"Test case 2 failed\"",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(1) == True, '1'",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array\n    arr.sort()\n    \n    # Keep track of min and max elements\n    min_elem = float('inf')\n    max_elem = float('-inf')\n    \n    for i in range(n):\n        min_elem = min(arr[i], min_elem)\n        max_elem = max(arr[i], max_elem)\n    \n    # Store the minimum difference\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, abs(arr[i] - arr[i - 1]))\n    \n    return min_diff\n",
        "test": "assert     find_min_diff([1,2,4,5,6,9],2) == 1",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n    ",
        "test": "assert     number_ctr(\"\") == 0",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 765,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n %2 == 0:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     is_polite(5) == False",
        "num_ids": 2473,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return [(l1[0],l1[0])]\n    else:\n        return [ (l1[i], l1[i+1]) for i in range(len(l1)-1)]\n",
        "test": "assert     pair_wise([1, 2, 3, 4, 5])    ==    [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert     get_pairs_count([2, 2, 3, 3, 4], 4) == 1",
        "num_ids": 873,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff2(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff3(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff4(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff5(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff6(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff7(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff8(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff9(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff10(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff11(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff12(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff13(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff14(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff15(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff16(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff17(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff18(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff19(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff20(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff21(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff22(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff23(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff24(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff25(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff26(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff27(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff28(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff29(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff30(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff31(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff32(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff33(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff34(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li",
        "test": "assert     (Diff([1,2,3,4], [1,2,4]) == [3])",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # base case\n    if n == 1 : \n        return 0\n    if n == 2 :\n        return 1\n    else : \n        return (n-2) + odd_num_sum(n-2)\n",
        "test": "assert     odd_num_sum(1) == 0",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            if i == ')':\n                if stack.pop()!= '(':\n                    return False\n            if i == '}':\n                if stack.pop()!= '{':\n                    return False\n            if i == ']':\n                if stack.pop()!= '[':\n                    return False\n    if stack:\n        return False\n    else:\n        return True\ndef balanced_parentheses(string):\n    stack = []\n    for s in string:\n        if s in ['(', '{', '[']:\n            stack.append(s)\n        else:\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and s!= ')') or (top == '{' and s!= '}') or (top == '[' and s!= ']'):\n                return False\n    if not stack:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_expression(\"(\") == False",
        "num_ids": 1020,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join([s for s in test_str.split() if len(s)!= K])\n",
        "test": "assert     remove_length('abc', 1) == 'abc'",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # words = re.findall('\\w+',text)\n    # for word in words:\n    #     if word == pattern:\n    #         print \"pattern found: \", word\n    #         print \"occurance: \",text.count(word)\n",
        "test": "assert     occurance_substring('i love apples and oranges', 'bananas') == None",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     odd_position([1,2,3,4,5,6,7,8,9,11]) == False",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert     count_vowels('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 0",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr[0:len(arr)-1]:\n            sum += i\n    return sum\n",
        "test": "assert     find_sum([-2, -2, -2, -2, -2, -2, -2, -2]) == 0",
        "num_ids": 4473,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #print(list1)\n    i = 0\n    j = 1\n    sorted_list = []\n    while i < len(list1):\n        sublist = []\n        sublist.append(list1[i])\n        while j < len(list1) and list1[j] == list1[i]:\n            sublist.append(list1[j])\n            j += 1\n        sorted_list.append(sublist)\n        i = j\n    return sorted_list\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 3468,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        dict1[tuple(list1[i])] = list1.count(list1[i])\n    return dict1\n",
        "test": "assert     unique_sublists([[1, 2, 3, 4], [1, 2, 3], [5, 6, 7]]) ==     {(1, 2, 3, 4): 1, (1, 2, 3): 1, (5, 6, 7): 1}",
        "num_ids": 1047,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    '''\n    return [comb for i in range(len(test_list)) for comb in combinations(test_list, i+1) if sum(comb) == 50]\n    '''\n    return combinations(test_list, 2)\n",
        "test": "assert     (find_combinations([(6,2,3),(1,6,7),(3,4,6)])",
        "num_ids": 2802,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(int(n / i))\n    return len(divisors)\n",
        "test": "assert     count_divisors(1) == 1",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i+1) % 2 == 1:\n                total_sum += sum(arr[i:j+1])\n    return total_sum\n",
        "test": "assert     odd_length_sum([1, 2]) == 3",
        "num_ids": 912,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0, 0, 0)",
        "num_ids": 1132,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return (list1[0] * list1[-1])\n",
        "test": "assert     mul_even_odd([3, 6, 9, 8, 4, 2, 1, 0]) == 0",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    l = [int(x) for x in test_str[1:-1].split(',')]\n    return tuple(l)\n",
        "test": "assert     tuple_str_int('(1,2,3)') == (1, 2, 3)",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return -1\n    low, high = 0, len(a)-1\n    while low<=high:\n        mid = low + (high - low) // 2\n        if a[mid] == x:\n            return mid\n        if a[mid] < x:\n            low = mid+1\n        else:\n            high = mid - 1\n    return low\n",
        "test": "assert     right_insertion([1,3,5,6],2) == 1",
        "num_ids": 679,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a(.)b{3}a\"\n    return bool(re.match(pattern, text))\n",
        "test": "assert     text_match_three(\"ab\") == False",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Method 1\n    # lst_str = ''\n    # for each_str in test_list:\n    #     lst_str = lst_str + each_str\n    # return tuple(lst_str) + test_str\n",
        "test": "assert     new_tuple([], \"\") == None",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    assert isinstance(nums, list)\n    \n    for idx, elem in enumerate(nums):\n        if (idx + 1) % 2 == 0 and elem % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     (even_position([2,6,8,10]) == True)",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return tuple([])\n    else:\n        return tuple([v for v in test_tup if not isinstance(v, tuple)])\n",
        "test": "assert     remove_nested(('a',)) == ('a',)",
        "num_ids": 738,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "test": "assert     count_list([]) == 0",
        "num_ids": 1150,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x) if x in arr else None\n    \ndef search(arr,x):\n    '''\n    Write a python function to search an element in a sorted array.\n    '''\n    # Check if array is empty\n    if len(arr) == 0:\n        return -1\n    \n    # Traverse array to find element\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n",
        "test": "assert     last([1,2,3,4],4) == 3",
        "num_ids": 2584,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab')\n    result = pattern.search(text)\n    return result\n",
        "test": "assert     text_starta_endb('aab') == True",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n",
        "test": "assert     return_sum({}) == 0",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n==0 or n==1:\n        return n\n    return n+sum_odd(n-1)\n",
        "test": "assert     sum_odd(1) == 1",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if arr == []:\n        return 0\n    return arr[0] + _sum(arr[1:])\n",
        "test": "assert     _sum([1,2,3]) == 6, 'incorrect implementation of _sum'",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #print n,d\n    mask = 1<<d;\n    return n & mask\n",
        "test": "assert 0000000000000000000000000000000 == left_rotate(10,9)",
        "num_ids": 2243,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    if not text:\n        return text\n    new_text = re.sub('\\s', '', text)\n    return new_text\n",
        "test": "assert     remove_all_spaces('') == '', \"Test1: \" + remove_all_spaces('')",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y:\n        return 2\n    else:\n        return 0\n",
        "test": "assert     test_three_equal(1,1,1)==3",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    size = len(arr)\n    if size == 0:\n        return 0\n    arr_idx = 0\n    last_idx = size - 1\n    while arr_idx <= last_idx:\n        if arr[arr_idx] > arr[last_idx]:\n            arr_idx += 1\n        else:\n            last_idx -= 1\n    return arr_idx\n",
        "test": "assert     count_rotation([])==0",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 : return True\n    if n < 0 : return False\n    # print(n)\n    x = n\n    y = (x + 1) // 2\n    while y * y <= x :\n        # print(y)\n        if y * y == x : return True\n        y = (y + 1) // 2\n    return False\n",
        "test": "assert     is_perfect_square(1) == True, 'test1: \"1 is a perfect square\"'",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 1: return True\n    else:\n        prod = 1\n        for i in arr: prod *= i\n    return prod % 2 == 0\n",
        "test": "assert     is_product_even([1, 2, 3]) == True",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for list in lists:\n        if sum(list) > max_sum:\n            max_sum = sum(list)\n            max_list = list\n    return max_list\n",
        "test": "assert     max_sum_list([[1, 2, 3], [-1, -2, -3]]) == [1, 2, 3]",
        "num_ids": 1882,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = 0\n    temp = 0\n    for i in range(len(test_str)):\n        if ord(test_str[i]) >= 65 and ord(test_str[i]) <= 90:\n            temp += 1\n        else:\n            temp = 0\n        result = max(result, temp)\n    return result\n",
        "test": "assert     max_run_uppercase('') == 0",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            return n\n    return None\n",
        "test": "assert     first_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1",
        "num_ids": 2541,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if len(tup)!= K:\n            return False\n    return True\n",
        "test": "assert     check_K(('s4','s1','s2','s3'), 3) == False",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup2 < test_tup1\n",
        "test": "assert     check_smaller(('a', 'b', 'c'), ('a', 'b', 'c')) == False",
        "num_ids": 791,
        "indeed": true
    }
]