[
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        return len([x for x in test_tup1 if x in test_tup2]) > 0\n",
        "test": "assert     similar_elements(('a', 'a'), ('b', 'b')) == False",
        "num_ids": 1432
    },
    {
        "number": 3,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1 or n == 2:\n        return False\n    else:\n        if n%2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n))+1):\n                if n%i == 0:\n                    return False\n    return True\ndef prime_factorization(n):\n    '''\n    Write a python function to find prime factors of a given number.\n    '''\n    i = 2\n    factors = []\n    while n!= 1:\n        if is_not_prime(i):\n            while n%i == 0:\n                factors.append(i)\n                n /= i\n        else:\n            i += 1\n    return factors\n",
        "test": "assert     is_not_prime(2) == False, \"Failed\"",
        "num_ids": 2918
    },
    {
        "number": 4,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return None\n    hq=[]\n    for i in nums:\n        hq.append([-i,i])\n    hq = sorted(hq)\n    ans = []\n    for i in range(n):\n        ans.append(hq[i][1])\n    return ans\n",
        "test": "assert     hq.nlargest(1,range(4))==[3]",
        "num_ids": 2832
    },
    {
        "number": 6,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # return (x & (x - 1)) == 0\n    return (x & (x - 1)) == 0\n",
        "test": "assert     is_Power_Of_Two(2)",
        "num_ids": 2975
    },
    {
        "number": 7,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Your Code Here\n    return re.findall(r\"[\\w]+\", text)\n",
        "test": "assert     find_char_long('abcd') == ['abcd']",
        "num_ids": 2096
    },
    {
        "number": 8,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # for i in range(len(nums)):\n    #     nums[i] = nums[i]**2\n    # return nums\n    # return [x**2 for x in nums]\n    return list(map(lambda x: x**2, nums))\n",
        "test": "assert     square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 1172
    },
    {
        "number": 9,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    n = len(str)\n    # your code here\n    \n    def helper(s, result):\n        if s == \"\":\n            return result\n        else:\n            if s[0] == s[-1]:\n                result += helper(s[1:-1], result)\n            else:\n                result += helper(s[1:], result)\n            return result\n        \n    return helper(str, 0)\n",
        "test": "assert     find_Rotations('a') == 0",
        "num_ids": 5133
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    a=s.rfind(ch)\n    b=s.find(ch)\n    if(a==b):\n        return s\n    else:\n        return s[:a]+s[b+1:]\n    \n    \ndef remove_str_in_list(s,l):\n    '''\n    Write a python function to remove the string from a given list of strings.\n    '''\n    i=l.index(s)\n    return l[:i]+l[i+1:]\n    \ndef substring(s1,s2):\n    '''\n    Write a python function to check whether a substring is present in a string or not\n    '''\n    return s1 in s2\n    \ndef ispalindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not\n    '''\n    return s==s[::-1]\n    \ndef count_char(s):\n    '''\n    Write a python function to count the occurence of characters in a string\n    '''\n    return dict((i,s.count(i)) for i in set(s))\n    \ndef split(s,c):\n    '''\n    Write a python function to split a string into list of strings after a given character\n    '''\n    return s.split(c)\n    \ndef min_max(l):\n    '''\n    Write a python function to calculate the minimum and maximum of a list\n    '''\n    return min(l),max(l)\n    \ndef reverse(s):\n    '''\n    Write a python function to reverse a string\n    '''\n    return s[::-1]\n    \ndef sort_str(s):\n    '''\n    Write a python function to sort a string based on ASCII value of the characters\n    '''\n    return \"\".join(sorted(s))\n    \ndef sort_str_in_list(s,l):\n    '''\n    Write a python function to sort a string based on ASCII value of the characters\n    '''\n    l=list(s)\n    l=sorted(l)\n    return \"\".join(l)\n    \ndef delete_duplicate_chars(s):\n    '''\n    Write a python function to delete all duplicate characters from a string\n    '''\n    return \"\".join(set(s))\n    \ndef map_str(s,m):\n    '''\n    Write a python function to replace the characters in a string with given mapping\n    '''\n    return \"\".join(m[i] for i in s)\n    \ndef swap(a,b):\n    '''\n    Write a python function to swap two integers\n    '''\n    return b,a\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to sum of the digits in a number\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef count_occurence(s,ch):\n    '''\n    Write a python function to count the number of occurrences of a given character in a string\n    '''\n    return s.count(ch)\n    \ndef replace(s,ch,s2):\n    '''\n    Write a python function to replace all occurrences of a character in a string with another string\n    '''\n    return s.replace(ch,s2)\n    \ndef print_list(l):\n    '''\n    Write a python function to print the list\n    '''\n    return [str(i) for i in l]\n    \ndef print_list_of_lists(l):\n    '''\n    Write a python function to print the list of lists\n    '''\n    return [print_list(i) for i in l]\n    \ndef print_dict(d):\n    '''\n    Write a python function to print the dictionary\n    '''\n    return dict((i,str(d[i])) for i in d)\n    \ndef print_dict_of_lists(d):\n    '''\n    Write a python function to print the dictionary of lists\n    '''\n    return dict((i,print_list(d[i])) for i in d)\n    \ndef print_dict_of_tuples(d):\n    '''\n    Write a python function to print the dictionary of tuples\n    '''\n    return dict((i,tuple(d[i])) for i in d)\n    \ndef print_dict_of_dict(d):\n    '''\n    Write a python function to print the dictionary of dict\n    '''\n    return dict((i,dict((j,str(d[i][j])) for j in d[i])) for i in d)\n    \ndef f(l):\n    '''\n    Write a python function to check whether a given list is consecutive or not\n    '''\n    return sorted(l)==list(range(min(l),max(l)+1))\n    \ndef has_all_unique_char(s):\n    '''\n    Write a python function to check whether a string has all unique characters or not\n    '''\n    return len(s)==len(set(s))\n    \ndef check_all_vowels(s):\n    '''\n    Write a python function to check whether a string is a permutation of a palindrome\n    '''\n    return s==s[::-1]\n    \ndef print_list_of_lists_of_list(l):\n    '''\n    Write a python function to print the list of lists of list\n    '''\n    return [[print_list(i) for i in j] for j in l]\n    \ndef print_list_of_lists_of_string(l):\n    '''\n    Write a python function to print the list of lists of string\n    '''\n    return [[print_list(i) for i in j] for j in l]\n    \ndef print_list_of_tuples_of_string(l):\n    '''\n    Write a python function to print the list of tuples of string\n    '''\n    return [[tuple(i) for i in j] for j in l]\n    \ndef print_list_of_tuples_of_list(l):\n    '''\n    Write a python function to print the list of tuples of list\n    '''\n    return [[tuple(i) for i in j] for j in l]\n    \ndef print_list_of_sets(l):\n    '''\n    Write a python function to print the list of sets\n    '''\n    return [set(i) for i in l]\n    \ndef print_list_of_tuples_of_set(l):\n    '''\n    Write a python function to print the list of tuples of set\n    '''\n    return [(tuple(i)) for i in l]\n    \ndef print_list_of_lists_of_set(l):\n    '''\n    Write a python function to print the list of lists of set\n    '''\n    return [[set(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_list(l):\n    '''\n    Write a python function to print the list of dictionary of list\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_tuple(l):\n    '''\n    Write a python function to print the list of dictionary of tuple\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_string(l):\n    '''\n    Write a python function to print the list of dictionary of string\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_dict(l):\n    '''\n    Write a python function to print the list of dictionary of dictionary\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_dict_of_dict_of_list(l):\n    '''\n    Write a python function to print the list of dictionary of dictionary of list\n    '''\n    return [[dict(i) for i in j] for j in l]\n    \ndef print_list_of_list_of_dict(l):\n    '''\n    Write a python function to print the list of list of dictionary\n    '''",
        "test": "assert     remove_Occ('abcc', 'b') == 'abcc'",
        "num_ids": 2914
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n",
        "test": "assert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 2535
    },
    {
        "number": 14,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (h*(h+l))/2.0*b\n",
        "test": "assert     find_Volume(0,0,0) == 0",
        "num_ids": 1049
    },
    {
        "number": 16,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text is None:\n        return False\n    if not isinstance(text, str):\n        raise TypeError('Input is not a string')\n    if len(text) == 0:\n        return False\n    if len(text) == 1:\n        return text.isalpha()\n    if len(text) > 1:\n        count = 0\n        for ch in text:\n            if ch.isalpha():\n                count += 1\n        if count >= 2:\n            return True\n        else:\n            return False\n",
        "test": "assert     text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 3205
    },
    {
        "number": 17,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert     square_perimeter(4) == 16,    'Wrong answer: %s' % square_perimeter(4)",
        "num_ids": 824
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [] \n    for i in string:\n        list1.append(i)\n    return list1\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef list_to_dict(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dict = {}\n    for i in list:\n        dict[i] = 0\n    return dict\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef compare(string1, string2):\n    '''\n    Write a function to compare the lexicographical order between two strings.\n    '''\n    string1 = list_to_str(string1)\n    string2 = list_to_str(string2)\n    if string1 > string2:\n        return 1\n    elif string1 < string2:\n        return -1\n    else:\n        return 0\ndef find_first(str1, str2):\n    '''\n    Write a function to find the first index of the first occurrence of the second string in the first string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            return i\n        else:\n            continue\n    return -1\ndef find_last(str1, str2):\n    '''\n    Write a function to find the last index of the last occurrence of the second string in the first string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            return i\n        else:\n            continue\n    return -1\ndef replace_first(str1, str2):\n    '''\n    Write a function to replace the first occurrence of the second string in the first string with the third string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            str1 = str1[:i] + str2 + str1[i+length2:]\n            return str1\n        else:\n            continue\n    return str1\ndef replace_last(str1, str2):\n    '''\n    Write a function to replace the last occurrence of the second string in the first string with the third string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            str1 = str1[:i] + str2 + str1[i+length2:]\n            return str1\n        else:\n            continue\n    return str1\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [] \n    for i in string:\n        list1.append(i)\n    return list1\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef list_to_dict(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dict = {}\n    for i in list:\n        dict[i] = 0\n    return dict\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef compare(string1, string2):\n    '''\n    Write a function to compare the lexicographical order between two strings.\n    '''\n    string1 = list_to_str(string1)\n    string2 = list_to_str(string2)\n    if string1 > string2:\n        return 1\n    elif string1 < string2:\n        return -1\n    else:\n        return 0\ndef find_first(str1, str2):\n    '''\n    Write a function to find the first index of the first occurrence of the second string in the first string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            return i\n        else:\n            continue\n    return -1\ndef find_last(str1, str2):\n    '''\n    Write a function to find the last index of the last occurrence of the second string in the first string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            return i\n        else:\n            continue\n    return -1\ndef replace_first(str1, str2):\n    '''\n    Write a function to replace the first occurrence of the second string in the first string with the third string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            str1 = str1[:i] + str2 + str1[i+length2:]\n            return str1\n        else:\n            continue\n    return str1\ndef replace_last(str1, str2):\n    '''\n    Write a function to replace the last occurrence of the second string in the first string with the third string.\n    '''\n    length1 = len(str1)\n    length2 = len(str2)\n    for i in range(length1):\n        if str1[i:i+length2] == str2:\n            str1 = str1[:i] + str2 + str1[i+length2:]\n            return str1\n        else:\n            continue\n    return str1\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [] \n    for i in string:\n        list1.append(i)\n    return list1\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef list_to_dict(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dict = {}\n    for i in list:\n        dict[i] = 0\n    return dict\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = \"\"\n    for i in list:\n        string = string + i\n    return string\ndef compare(string1, string2):\n    '''\n    Write a function to compare the lexicographical order between two strings.\n    '''\n    string1 = list_to_str(string1)\n    string2 = list_to_str(string2)\n    if string1 > string2:\n        return 1\n    elif string1 < string2:\n        return -1\n    else:\n        return 0\ndef find_first(str1, str2):\n    '''\n    Write a function to find the first index of the first occurrence of the second string in the first string.\n    '''\n    length1 = le",
        "test": "assert     str_to_list(\"le\", \"ael\") == [\"l\",\"e\"]",
        "num_ids": 1391
    },
    {
        "number": 19,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 1:\n        return False\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n",
        "test": "assert test_duplicate([1,2,3,4,1]) == True",
        "num_ids": 1131
    },
    {
        "number": 20,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # You may assume woodball numbers are 6-digit numbers.\n    return len(str(x)) == 6\n",
        "test": "assert     is_woodall(3) == False",
        "num_ids": 1322
    },
    {
        "number": 56,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (2*(num%10))\n",
        "test": "assert     rev(123) == False",
        "num_ids": 961
    },
    {
        "number": 57,
        "max_answer_num": 32,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    biggest_num = max(arr)\n    return biggest_num\n",
        "test": "assert     find_Max_Num([0,0,0,0,0,0,0,0,0,0]) == 0     , \"Fail\"",
        "num_ids": 1963
    },
    {
        "number": 58,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0\n",
        "test": "assert     opposite_Signs(1,-1) == True, 'function opposite_Signs(1,-1) returns wrong'",
        "num_ids": 1094
    },
    {
        "number": 59,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = [1,8,36,64,100,144,196,256,384,512,600,768,1024,1536,2048,3072,4096,65536,858993459]\n    if n <= 0:\n        return False\n    elif n in octagonal:\n        return True\n    else:\n        return is_octagonal(n-1)\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 889
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        l = len(s)\n        sub_str = s[i:l]\n        dig = defaultdict(int)\n        for ch in sub_str:\n            dig[ch] += 1\n        \n        ch = s[i]\n        count += dig[ch]\n    return count\n",
        "test": "assert     count_Substrings(\"\") == 0",
        "num_ids": 1523
    },
    {
        "number": 62,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest is None or x < smallest:\n            smallest = x\n    return smallest\n",
        "test": "assert     smallest_num([1,2,3,4,5]) == 1",
        "num_ids": 1090
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    list_length = len(test_list)\n    max_difference = 0\n    \n    if list_length <= 2:\n        return max_difference\n    \n    for first_i in range(list_length - 1):\n        for second_i in range(first_i + 1, list_length):\n            max_difference = max(max_difference, abs(test_list[first_i] - test_list[second_i]))\n            \n    return max_difference\n    ",
        "test": "assert     max_difference([(1, 1)]) == 0",
        "num_ids": 1891
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup: tup[1])\n    return subjectmarks\n",
        "test": "assert     subject_marks([('Math', 88), ('Science', 95), ('English', 83)]) == [('English', 83), ('Math', 88), ('Science', 95)]",
        "num_ids": 1563
    },
    {
        "number": 65,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) is list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert     recursive_list_sum([1,2,3]) == 6",
        "num_ids": 1303
    },
    {
        "number": 66,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 1131
    },
    {
        "number": 67,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0 or n==1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n",
        "test": "assert     bell_number(0) == 1",
        "num_ids": 1013
    },
    {
        "number": 68,
        "max_answer_num": 29,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    mono_list = []\n    for i in range(len(A)-1):\n        mono_list.append(A[i]<=A[i+1])\n    return all(mono_list)\n",
        "test": "assert     is_Monotonic([1,2,3,4,5]) == True",
        "num_ids": 1692
    },
    {
        "number": 69,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s==[]: return True\n    if len(s) > len(l): return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)]==s: return True\n    return False\n",
        "test": "assert     is_sublist(['foo', 'bar', 'baz', 'qux', 'quux', 'corge'], ['foo', 'bar', 'baz', 'quux']) is False",
        "num_ids": 1593
    },
    {
        "number": 70,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    arr = Input\n    if not arr:\n        return False\n    else:\n        l = arr[0]\n        if l == None:\n            l = 0\n        for i in range(len(arr)):\n            if not arr[i]:\n                return False\n            if l!= arr[i]:\n                return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1,2,3,4,5),(1,2,3,4),(1,2,3)]) == False",
        "num_ids": 1601
    },
    {
        "number": 71,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 2133
    },
    {
        "number": 72,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n**0.5 == int(n**0.5):\n        return True\n    else:\n        return False\n",
        "test": "assert     dif_Square(12) == False",
        "num_ids": 1110
    },
    {
        "number": 74,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if patterns[i] == 0:\n            patterns[i] = -1\n            if colors[i] == 1:\n                return False\n    return True\n",
        "test": "assert     is_samepatterns(['a','a','a'], ['a','a','a'])",
        "num_ids": 2241
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in test_list:\n        if sum(i)%K==0:\n            divisible_tuples.append(i)\n    return divisible_tuples\n",
        "test": "assert     find_tuples([(1,2),(2,3),(3,4)], 1) == [(1,2),(2,3),(3,4)]",
        "num_ids": 2510
    },
    {
        "number": 77,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n",
        "test": "assert     is_Diff(13) == False",
        "num_ids": 619
    },
    {
        "number": 79,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     (word_len(\"orange\") == False)",
        "num_ids": 680
    },
    {
        "number": 80,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)/2\n",
        "test": "assert     tetrahedral_number(0) == 0",
        "num_ids": 3402
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0) * math.pi * (r**3)\n    return v\n",
        "test": "assert     volume_sphere(0) == (0.5235987755982988)",
        "num_ids": 1040
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result=0\n    for i in range(len(strr)):\n        result=result+(ord(strr[i])%26)\n    return result%26\n",
        "test": "assert     get_Char('D') == 68",
        "num_ids": 733
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0,1,1,1]\n    if n > 4:\n        for i in range(4, n+1):\n            seq.append(seq[i-1] + seq[i-2])\n    return seq[n]\n",
        "test": "assert     sequence(2) == 1",
        "num_ids": 620
    },
    {
        "number": 85,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n",
        "test": "assert     surfacearea_sphere(0)    ==     (4 * math.pi * (0 ** 2))",
        "num_ids": 796
    },
    {
        "number": 86,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**2 + n) / 2\n",
        "test": "assert         centered_hexagonal_number(0) == 0",
        "num_ids": 919
    },
    {
        "number": 87,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if isinstance(dict1,dict) and isinstance(dict2,dict) and isinstance(dict3,dict):\n        dict_m = dict()\n        for k, v in dict1.items():\n            dict_m[k] = v\n        for k, v in dict2.items():\n            dict_m[k] = v\n        for k, v in dict3.items():\n            dict_m[k] = v\n        return dict_m\n    return {}\n",
        "test": "assert     merge_dictionaries_three({},{},{}) == {}",
        "num_ids": 3085
    },
    {
        "number": 88,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = collections.Counter(list1)\n    return counts\n",
        "test": "assert     {'a':1, 'b':1, 'c':1} == freq_count(['a', 'b', 'c'])",
        "num_ids": 7361
    },
    {
        "number": 89,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    res = 0\n    for i in range(N-1, 0, -1):\n        if abs(i-N) < abs(res-N):\n            res = i\n    return res\n",
        "test": "assert     closest_num(1) == 0",
        "num_ids": 917
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #print len(max(list1))\n    return len(max(list1))\n",
        "test": "assert     len_log(['hello', 'world']) == 5",
        "num_ids": 2909
    },
    {
        "number": 91,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert     find_substring('foo', 'bar') == False",
        "num_ids": 1245
    },
    {
        "number": 92,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n_digits = len(str(n))\n    for i in range(n_digits):\n        if n % 10 == 0 and i == 0:\n            return False\n        elif n % 10 == 0 and i!= 0:\n            return False\n        elif n % (10 ** (i+1)) == 0:\n            return False\n    return True\n",
        "test": "assert     is_undulating(10) == False, 'wrong answer'",
        "num_ids": 2906
    },
    {
        "number": 93,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n    \ndef count_digits(n):\n    '''\n    Write a function that accepts a number and returns the number of digits in it.\n    '''\n    return len(str(n))\n    \ndef avg_digit(n):\n    '''\n    Write a function to calculate the average digit in a number.\n    '''\n    n = str(n)\n    digit_sum = 0\n    for i in n:\n        digit_sum += int(i)\n    avg_digit = digit_sum/len(n)\n    return avg_digit\n",
        "test": "assert     power(3, 0) == 1",
        "num_ids": 968
    },
    {
        "number": 94,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n",
        "test": "assert     index_minimum([(1, 2), (1, 2), (3, 4), (1, 1)]) == 1",
        "num_ids": 3683
    },
    {
        "number": 95,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_length = len(lst[0])\n    \n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    \n    return min_length\n",
        "test": "assert     Find_Min_Length(['a', 'b', 'c', 'd', 'e']) == 1",
        "num_ids": 3492
    },
    {
        "number": 96,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    c = 0\n    while i<=n:\n        if n%i==0:\n            c+=1\n        i+=1\n    return c\n",
        "test": "assert     divisor(2) == 2",
        "num_ids": 978
    },
    {
        "number": 97,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2 = []\n    for i in list1:\n        list2.extend(i)\n    dict = {}\n    for i in list2:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n",
        "test": "assert     frequency_lists([]) == {}, 'incorrect'",
        "num_ids": 4159
    },
    {
        "number": 98,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[0] * multiply_num(numbers[1:])\n",
        "test": "assert     multiply_num([0, 0]) == 0",
        "num_ids": 1283
    },
    {
        "number": 99,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n)[2:]) \n",
        "test": "assert     decimal_to_binary(0)         == '0', \"Fail: decimal_to_binary(0)\"",
        "num_ids": 969
    },
    {
        "number": 100,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    #if num is already a palindrome, the smallest palindrome is itself\n    if num == num[::-1]:\n        return int(num)\n    #if num is even\n    if len(num) % 2 == 0:\n        num = num[:-1]\n        num = num[::-1]\n        num = int(num + num)\n        return num\n    #if num is odd\n    num = num[:-1]\n    num = num[::-1]\n    num = int(num + num)\n    return num\n",
        "test": "assert     next_smallest_palindrome(7) == 7",
        "num_ids": 5624
    },
    {
        "number": 101,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr_size = len(arr)\n    for i in range(arr_size):\n        if i+k <= arr_size:\n            return arr[i+k-1]\n        \n    return -1\n",
        "test": "assert     kth_element([1,2,3,4], 2) == 2",
        "num_ids": 935
    },
    {
        "number": 102,
        "max_answer_num": 23,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake_case_split = word.split('_')\n    return str.join('',map(str.capitalize,snake_case_split))\n",
        "test": "assert     snake_to_camel('snake_case') == 'SnakeCase'",
        "num_ids": 1398
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m==0:\n        return n+1\n    else:\n        return eulerian_num(m, n%m)\n",
        "test": "assert     eulerian_num(0, 0) == 1, \"test case: a(0, 0) = 1\"",
        "num_ids": 1001
    },
    {
        "number": 104,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0])\n",
        "test": "assert     sort_sublists([['G'], ['G'], ['G']]) == [['G'], ['G'], ['G']]",
        "num_ids": 3945
    },
    {
        "number": 105,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for each in lst:\n        if each:\n            cnt += 1\n    return cnt\n",
        "test": "assert     count([True, True, True, True]) == 4",
        "num_ids": 939
    },
    {
        "number": 106,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list_of_tuples = test_list + test_tup\n    return list_of_tuples\n",
        "test": "assert     add_lists([], [(4, 5, 6), (7, 8, 9)]) == [(4, 5, 6), (7, 8, 9)]",
        "num_ids": 1613
    },
    {
        "number": 108,
        "max_answer_num": 21,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    lst = []\n    for i in range(len(num1)):\n        lst.append(num1[i])\n    for i in range(len(num2)):\n        lst.append(num2[i])\n    for i in range(len(num3)):\n        lst.append(num3[i])\n    lst.sort()\n    return lst\n",
        "test": "assert     merge_sorted_list([], [], []) == []",
        "num_ids": 2766
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n < 0:\n        return odd_Equivalent(s[::-1],n*-1)\n    if n == 0:\n        return 1 if s.count('1')%2==0 else 0\n    rotated_string = s[n:] + s[:n]\n    return len([x for x in rotated_string if x == '1'])%2\n",
        "test": "assert     odd_Equivalent('101', 0) == 1",
        "num_ids": 1248
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    common = []\n    for i in nestedlist[0]:\n        if all(i in nestedlist[j] for j in range(1, len(nestedlist))):\n            common.append(i)\n    return common\n",
        "test": "assert     common_in_nested_lists([[], [], [], []]) == [], 'incorrect'",
        "num_ids": 4336
    },
    {
        "number": 113,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(\"1\") == True",
        "num_ids": 703
    },
    {
        "number": 115,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "test": "assert         empty_dit([{}]*10)",
        "num_ids": 1234
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "test": "assert     tuple_to_int((0, 0, 0)) == 0",
        "num_ids": 1068
    },
    {
        "number": 117,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        try:\n            result.append(float(i))\n        except:\n            result.append(i)\n    return result\n",
        "test": "assert     list_to_float([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]) ==     [[1.0], [2.0], [3.0], [4.0], [5.0], [6.0], [7.0], [8.0], [9.0], [10.0]]",
        "num_ids": 2666
    },
    {
        "number": 118,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    new_string = string.split()\n    return new_string\n",
        "test": "assert     string_to_list('Hello World') == ['Hello', 'World']",
        "num_ids": 934
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n    return arr[0]\n",
        "test": "assert     search([2,2,3,3,3]) == 3",
        "num_ids": 3515
    },
    {
        "number": 120,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    t1 = sorted(list1, key = lambda x: abs(x[0]*x[1]), reverse=True)\n    return t1[0]\n",
        "test": "assert     max_product_tuple([(1, 10), (3, 30), (9, 90)]) == (9, 90)",
        "num_ids": 2012
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for x in range(1, limit):\n        y = sum(int(i) for i in str(x))\n        if x!= y and sum(int(i) for i in str(y)) == x:\n            amicable_numbers_sum += x\n    return amicable_numbers_sum\n",
        "test": "assert     amicable_numbers_sum(0) == 0",
        "num_ids": 1115
    },
    {
        "number": 124,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a.conjugate()\n    angle = math.atan2(b.imag,b.real) - math.atan2(c.imag,c.real)\n    return angle\n",
        "test": "assert     angle_complex(1+0j,0+0j)==0",
        "num_ids": 1370
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    result = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            result = max(result, string[i+1:].count('0'))\n        else:\n            result = max(result, string[i+1:].count('1'))\n    return result\n",
        "test": "assert     find_length(\"011110\") == 3",
        "num_ids": 4723
    },
    {
        "number": 126,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (a>b):\n        num=a\n        den=b\n    else:\n        num=b\n        den=a\n    rem=1\n    n=2\n    while(n<=num):\n        if (num%n==0 and den%n==0):\n            rem=rem*n\n        n=n+1\n    return rem\n",
        "test": "assert     sum(3, 5) == 1",
        "num_ids": 999
    },
    {
        "number": 127,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    return x*y\n",
        "test": "assert     multiply_int(1, 2) == 2",
        "num_ids": 751
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n",
        "test": "assert     long_words(1, \"i love python\") == []",
        "num_ids": 4830
    },
    {
        "number": 129,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # create a sum list to store the sum of each row, column and diagonal\n    row_sum = [0] * len(my_matrix)\n    col_sum = [0] * len(my_matrix)\n    diag_sum = 0\n    # calculate the sum of each row and store in a list\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            row_sum[i] += my_matrix[i][j]\n    # calculate the sum of each column and store in a list\n    for j in range(len(my_matrix)):\n        for i in range(len(my_matrix)):\n            col_sum[j] += my_matrix[i][j]\n    # calculate the sum of each diagonal and store in a list\n    for i in range(len(my_matrix)):\n        diag_sum += my_matrix[i][i]\n    # check if the sum is equal to each other, if not return False\n    for i in range(len(my_matrix)):\n        if row_sum[i]!= col_sum[i]!= diag_sum:\n            return False\n    # if no error found, return True\n    return True\n",
        "test": "assert     not magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "num_ids": 3761
    },
    {
        "number": 130,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    res = nums[0]\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            if count > max_count:\n                res = nums[i-1]\n                max_count = count\n            count = 1\n    if count > max_count:\n        res = nums[-1]\n        max_count = count\n    return res\n",
        "test": "assert max_occurrences([1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3]) == 3",
        "num_ids": 7467
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.replace('y', 'Y')\n    return str1[::-1]\n",
        "test": "assert     reverse_vowels(\"a\")         == \"a\"",
        "num_ids": 1603
    },
    {
        "number": 132,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert     tup_string((1, 2, 3)) == '(1, 2, 3)', \"Failed\"",
        "num_ids": 1282
    },
    {
        "number": 133,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_num = 0\n    for num in nums:\n        if num < 0:\n            sum_num += num\n    return sum_num\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 1333
    },
    {
        "number": 135,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return hexagonal_num(n / 2) * 2 + 1\n    else:\n        return hexagonal_num(n / 2) * 2 + 1 + hexagonal_num((n - 1) / 2)\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 754
    },
    {
        "number": 137,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        if nums[0] == 0:\n            return 1\n        else:\n            return 0\n    else:\n        n = len(nums)\n        first = 0\n        second = 0\n        if nums[0] == 0:\n            first += 1\n        else:\n            second += 1\n        for i in range(1,n):\n            if nums[i] == 0:\n                first += 1\n            else:\n                second += 1\n        return float(first)/float(second)\n",
        "test": "assert     zero_count([1,2,3,4]) == 0",
        "num_ids": 5319
    },
    {
        "number": 138,
        "max_answer_num": 33,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    number = bin(n)[2:]\n    power_of_two = [2**i for i in range(len(number)) if number[-i-1] == '1']\n    return sum(power_of_two) == n\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(-1) == False",
        "num_ids": 1479
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = math.pi\n    return 2 * pi * r\n    \ndef get_radius(r, length):\n    '''\n    Write a function to calculate the radius of a circle.\n    '''\n    return length / 2 / math.pi\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 768
    },
    {
        "number": 140,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    res = []\n    for item in test_list:\n        if type(item) == list:\n            res.extend(item)\n        else:\n            res.append(item)\n    return res\n",
        "test": "assert     extract_singly([]).__class__ == list",
        "num_ids": 1607
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    left_most_pos = 0\n    while(length > 1):\n        max_pos = -1\n        for i in range(length):\n            if nums[i] > nums[max_pos]:\n                max_pos = i\n        if max_pos!= length - 1:\n            nums[:max_pos + 1] = nums[:max_pos + 1][::-1]\n            nums[:length - 1] = nums[:length - 1][::-1]\n        if max_pos!= 0:\n            nums[:length - 1] = nums[:length - 1][::-1]\n        left_most_pos = left_most_pos + 1\n        length = length - 1\n    return nums\n",
        "test": "assert     pancake_sort([1,1,1,1,1,1,1,1,1,1,1,1]) == [1,1,1,1,1,1,1,1,1,1,1,1]",
        "num_ids": 2243
    },
    {
        "number": 142,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count = count + 1\n    return count\n",
        "test": "assert     count_samepair([1,2,3], [1,2,3], [1,2,3]) == 3",
        "num_ids": 2032
    },
    {
        "number": 143,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    tup = tuple(Input)\n    count = 0\n    for i in tup:\n        if isinstance(i,tuple):\n            count = count + 1\n    return count\n    \n",
        "test": "assert     find_lists(()) == 0",
        "num_ids": 1216
    },
    {
        "number": 145,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[-1] - arr[0]\n    return max_diff\n    \n",
        "test": "assert     max_Abs_Diff([1, 1, 1, 1, 1]) == 0",
        "num_ids": 1574
    },
    {
        "number": 160,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n",
        "test": "assert     find_solution(3, 3, 10) == None",
        "num_ids": 1680
    },
    {
        "number": 161,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            new_list.append(list1[i])\n    return new_list\n",
        "test": "assert         remove_elements([1,2,3,4],[]) == [1,2,3,4]",
        "num_ids": 1515
    },
    {
        "number": 162,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + sum_series(n//2)\n    else:\n        return n + sum_series((n+1)//2)\n",
        "test": "assert     (sum_series(0) == 0)",
        "num_ids": 825
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 390,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l*s)/2\n    return area\n",
        "test": "assert     area_polygon(3, 4) == 6.0",
        "num_ids": 1246
    },
    {
        "number": 164,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_divisors(n): \n        i = 1\n        total = 0\n        while i <= math.sqrt(n):\n            if n % i == 0:\n                if n // i == i:\n                    total += i\n                else:\n                    total += i\n                    total += n // i\n            i += 1\n        return total - n\n    num1, num2 = 0, 0\n    num1 = sum_divisors(n)\n    num2 = sum_divisors(n)\n    return num1 == num2\n",
        "test": "assert     div_sum(1) == True",
        "num_ids": 1339
    },
    {
        "number": 165,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    counter = 0\n    for x in str1.lower():\n        if x in char_position:\n            counter += 1\n    return counter\n",
        "test": "assert     count_char_position('a') == 1",
        "num_ids": 1854
    },
    {
        "number": 166,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                cnt += 1\n    return cnt\n",
        "test": "assert     find_even_pair([]) == 0",
        "num_ids": 4544
    },
    {
        "number": 167,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    x = 1\n    while x <= n:\n        x = x * 2\n    return x\n",
        "test": "assert     next_power_of_2(7) == 8",
        "num_ids": 905
    },
    {
        "number": 168,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x not in a:\n        return 0\n    else:\n        return a.count(x)\n",
        "test": "assert     frequency([1, 2, 3, 4, 4, 4, 4, 5], 5) == 1",
        "num_ids": 1083
    },
    {
        "number": 170,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n",
        "test": "assert     sum_range_list([0,1,2,3,4,5,6,7,8,9], 0, 10) == sum([0,1,2,3,4,5,6,7,8,9])",
        "num_ids": 1352
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * (a**2)\n",
        "test": "assert     perimeter_pentagon(1) == 5",
        "num_ids": 784
    },
    {
        "number": 172,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance(\"\") == 0",
        "num_ids": 909
    },
    {
        "number": 222,
        "max_answer_num": 23,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(1,len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n    return True\n",
        "test": "assert     check_type((1, 1))",
        "num_ids": 1072
    },
    {
        "number": 223,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    l = 0\n    r = n - 1\n    while l <= r:\n        if arr[l] == x and arr[r] == x:\n            return True\n        elif arr[l] == x:\n            r -= 1\n        elif arr[r] == x:\n            l += 1\n        elif arr[l]!= x and arr[r]!= x:\n            l += 1\n            r -= 1\n        else:\n            return False\n    return False\n",
        "test": "assert     is_majority([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 10, 1) == True",
        "num_ids": 1674
    },
    {
        "number": 224,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n &= n - 1\n        count += 1\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 962
    },
    {
        "number": 226,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list=list(str)\n    if len(str_list)%2==0:\n        for i in range(len(str_list)//2):\n            str_list[i],str_list[-i-1]=str_list[-i-1],str_list[i]\n    return ''.join(str_list)\n",
        "test": "assert     odd_values_string('') == ''",
        "num_ids": 1021
    },
    {
        "number": 227,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     min_of_three(3,1,2)    == 1",
        "num_ids": 895
    },
    {
        "number": 228,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = int(n)\n    l = int(l)\n    r = int(r)\n    if n < 0:\n        return False\n    elif (n >= l) and (n <= r):\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(10,1,3)==False",
        "num_ids": 1584
    },
    {
        "number": 229,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n    while j < n and i < len(arr):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n        i += 1\n    return arr\n",
        "test": "assert     re_arrange_array([1, 2, 3], 3) == [1, 2, 3], \"fail\"",
        "num_ids": 5398
    },
    {
        "number": 230,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    output = ''\n    for letter in str1:\n        if letter =='':\n            letter = char\n        output = output + letter\n    return output\n",
        "test": "assert     replace_blank('', 'x') == '', 'fail test3'",
        "num_ids": 1256
    },
    {
        "number": 232,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    elif n == 0:\n        return []\n    elif n < 0:\n        return None\n    elif n < len(list1):\n        return heapq.nlargest(n,list1)\n    else:\n        return heapq.nlargest(len(list1),list1)\n",
        "test": "assert     larg_nnum([], 4) == []",
        "num_ids": 1584
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*(r**2)*(h/3)\ndef lateralsuface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*",
        "test": "assert     lateralsuface_cylinder(3,4) == 24",
        "num_ids": 2986
    },
    {
        "number": 234,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "test": "assert     volume_cube(2) == 8",
        "num_ids": 653
    },
    {
        "number": 235,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    n_bits = 32\n    n_bit_str = bin(n)[2:]\n    even_bits = []\n    for i in range(len(n_bit_str)):\n        if n_bit_str[i] == '1':\n            if i%2 == 0:\n                even_bits.append('0')\n            else:\n                even_bits.append('1')\n        else:\n            even_bits.append('0')\n    return int(''.join(even_bits), 2)\n",
        "test": "assert     even_bit_set_number(0) == False",
        "num_ids": 3327
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n    \n",
        "test": "assert     check_occurences([(1, 2), (1, 1), (1, 2), (3, 4), (4, 4), (3, 4)]) == {(1, 2): 1, (1, 1): 1, (3, 4): 2, (4, 4): 1, (1, 2): 2, (3, 4): 2}",
        "num_ids": 4703
    },
    {
        "number": 238,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(list(filter(lambda x:x!=\"\",str.split(' '))))\n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 1376
    },
    {
        "number": 239,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #define recursion function\n    def number_of_sequences(m,n):\n        #base case\n        if n == 1:\n            return 1\n        #subcase 1: if m = 0, then we can only have n-1 sequences, so we return 1 less than the recursion function\n        elif m == 0:\n            return 1\n        #subcase 2: if n is 1, then we can only have n-1 sequences, so we return 1 less than the recursion function\n        elif n == 1:\n            return 1\n        #subcase 3: if m is negative, we have to find the number of sequences, so we return the recursion function\n        elif m < 0:\n            return number_of_sequences(m,n-1)\n        #subcase 4: if m is positive, we have to find the number of sequences, so we return the recursion function\n        elif m > 0:\n            return number_of_sequences(m-1,n-1) + number_of_sequences(m,n-1)\n    #we call the recursion function, passing in the m and n variables\n    return number_of_sequences(m,n)\n",
        "test": "assert     get_total_number_of_sequences(2,2) == 2",
        "num_ids": 2103
    },
    {
        "number": 240,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        return list1\n    i = len(list1)-1\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    return list1\n",
        "test": "assert     replace_list([],[]) == []",
        "num_ids": 1797
    },
    {
        "number": 242,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str1 = str1\n    charac = len(str1)\n    return charac\n",
        "test": "assert     count_charac('a') == 1",
        "num_ids": 815
    },
    {
        "number": 244,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N))) \n",
        "test": "assert     next_Perfect_Square(1) == 1",
        "num_ids": 2924
    },
    {
        "number": 245,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = arr[0]\n    max_end = arr[0]\n    if n==1:\n        return max_end\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_end = max(max_end+arr[i], arr[i])\n        else:\n            max_end = arr[i]\n        if max_sum < max_end:\n            max_sum = max_end\n    return max_sum\n",
        "test": "assert     max_sum([1]) == 1",
        "num_ids": 3348
    },
    {
        "number": 246,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**0.5\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 1499
    },
    {
        "number": 247,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 1:\n        return 1\n    mat = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        mat[i][i] = 1\n    for l in range(2,n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if str[i] == str[j] and l == 2:\n                mat[i][j] = 2\n            elif str[i] == str[j]:\n                mat[i][j] = 2 + mat[i+1][j-1]\n            else:\n                mat[i][j] = max(mat[i][j-1], mat[i+1][j])\n    return mat[0][n-1]\n",
        "test": "assert     lps(\"a\") == 1",
        "num_ids": 3583
    },
    {
        "number": 248,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 713
    },
    {
        "number": 249,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if array_nums1 is None or len(array_nums1) == 0 or array_nums2 is None or len(array_nums2) == 0:\n        return []\n    \n    res = []\n    for n1 in array_nums1:\n        for n2 in array_nums2:\n            if n1 == n2:\n                res.append(n1)\n                break\n    return res\n",
        "test": "assert     [1,2,2,1]",
        "num_ids": 1373
    },
    {
        "number": 250,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # the number of times the element appears in the tuple\n    count = 0\n    for element in tup:\n        if element == x:\n            count = count + 1\n    return count\n",
        "test": "assert     (count_X(('a', 'a', 'b'), 'a') == 2), \"Error in count_X\"",
        "num_ids": 1087
    },
    {
        "number": 251,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+list\n",
        "test": "assert     insert_element([], 'a') == ['a']",
        "num_ids": 1551
    },
    {
        "number": 252,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(numbers)\n",
        "test": "assert     convert((0.4, 0.2)    ==     ((0.0, 0.0), (0.4, 0.2)))",
        "num_ids": 1718
    },
    {
        "number": 253,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    # initialize variable\n    count = 0\n    # check each element\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n    \ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    \n    # initialize variable\n    count = 0\n    # check each element\n    for i in list1:\n        if isinstance(i, str):\n            count += 1\n    return count\n    \ndef count_float(list1):\n    '''\n    Write a python function that returns the number of float elements in a given list.\n    '''\n    \n    # initialize variable\n    count = 0\n    # check each element\n    for i in list1:\n        if isinstance(i, float):\n            count += 1\n    return count\n    \ndef count_boolean(list1):\n    '''\n    Write a python function that returns the number of boolean elements in a given list.\n    '''\n    \n    # initialize variable\n    count = 0\n    # check each element\n    for i in list1:\n        if isinstance(i, bool):\n            count += 1\n    return count\n",
        "test": "assert     count_integer([1, 1, 1]) == 3",
        "num_ids": 1185
    },
    {
        "number": 255,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if l is None or len(l) == 0:\n        return []\n    elif len(l) < n:\n        return []\n    elif n == 1:\n        return [l]\n    else:\n        list1 = combinations_colors(l[:-1], n-1)\n        list2 = [l[-1] + t for t in list1]\n        return list1 + list2\n",
        "test": "assert     list(combinations_with_replacement(['A','B','C','D'], 3))     ==     [('A','A','A'), ('A','A','B'), ('A','A','C'), ('A','A','D'), ('A','B','B'), ('A','B','C'), ('A','B','D'), ('A','C','C'), ('A','C','D'), ('A','D','D'), ('B','B','B'), ('B','B','C'), ('B','B','D'), ('B','C','C'), ('B','C','D'), ('B','D','D'), ('C','C','C'), ('C','C','D'), ('C','D','D'), ('D','D','D')]",
        "num_ids": 4512
    },
    {
        "number": 256,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<=0:\n        return 0\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        count=0\n        i=2\n        while i<=n:\n            is_prime=True\n            j=2\n            while j<=i**0.5:\n                if i%j==0:\n                    is_prime=False\n                    break\n                j+=1\n            if is_prime:\n                count+=1\n            i+=1\n        return count\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 3563
    },
    {
        "number": 257,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     (3,3) == swap_numbers(3,3)",
        "num_ids": 780
    },
    {
        "number": 259,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if not test_tup1 and not test_tup2:\n        return (0,0)\n    elif not test_tup1:\n        return (0,test_tup2[0])\n    elif not test_tup2:\n        return (test_tup1[0],0)\n    else:\n        return (max(test_tup1[0], test_tup2[0]), min(test_tup1[1], test_tup2[1]))\n",
        "test": "assert     maximize_elements((1,2), (2,1)) == (2,1)",
        "num_ids": 1698
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    else:\n        x = newman_prime(n-1)\n        d = 1\n        while True:\n            d += 1\n            y = (x**2 + 1) % n\n            if d == n:\n                return y\n            x = y\n",
        "test": "assert     newman_prime(3) == 5",
        "num_ids": 1095
    },
    {
        "number": 261,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    return tuple((test_tup1[i] / test_tup2[i]) for i in range(len(test_tup1)))\n",
        "test": "assert     division_elements((1, 1, 1), (1, 1, 1)) == (1.0, 1.0, 1.0)",
        "num_ids": 2082
    },
    {
        "number": 262,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "test": "assert     split_two_parts([1,2,3,4,5,6], 3) == ( [1,2,3], [4,5,6] )",
        "num_ids": 1861
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert     dog_age(1) == 7",
        "num_ids": 903
    },
    {
        "number": 265,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    ret = []\n    for i in range(0, len(S), step):\n        ret.append(S[i:i + step])\n    return ret\n",
        "test": "assert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 1704
    },
    {
        "number": 266,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side_length = l\n    side_area = side_length ** 2\n    lateral_area = 6 * side_area\n    return lateral_area\n",
        "test": "assert     lateralsurface_cube(0) == 0, 'Wrong answer for lateralsurface_cube(0)'",
        "num_ids": 807
    },
    {
        "number": 267,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n**2 + square_Sum(n-1)\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 1092
    },
    {
        "number": 268,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    x = 0\n    for i in range(n):\n        x = x + 2*i + 1\n    return x\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 2883
    },
    {
        "number": 269,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97, 'Error: ascii_value of a is wrong'",
        "num_ids": 1016
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0,len(arr),2):\n        total += arr[i]\n    return total\n",
        "test": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11]) == 36",
        "num_ids": 1622
    },
    {
        "number": 271,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(0,n,1):\n        if (i%2 == 0) and (i**5 == i):\n            sum += i\n    return sum\n",
        "test": "assert     even_Power_Sum(0)     ==     0",
        "num_ids": 795
    },
    {
        "number": 272,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(i[-1]) for i in test_list]\n",
        "test": "assert     rear_extract([(1, 2), (3, 4)]) == [2, 4]",
        "num_ids": 1554
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([(a - b) for a, b in zip(test_tup1, test_tup2)])\n",
        "test": "assert     (substract_elements((1,2,3,4,5), (1,2,3,4,5)) == (0,0,0,0,0))",
        "num_ids": 3204
    },
    {
        "number": 274,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return even_binomial_Coeff_Sum(n-1) + n\n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 1437
    },
    {
        "number": 276,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = math.pi*(r**2)*h\n    return v\n",
        "test": "assert     volume_cylinder(0.5,2) == math.pi*(0.5**2)*2",
        "num_ids": 689
    },
    {
        "number": 277,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.items() if v >= n}\n",
        "test": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 1) == {'a': 1, 'b': 2, 'c': 3}",
        "num_ids": 2234
    },
    {
        "number": 278,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    return len([item for item in test_tup[1:] if item <= test_tup[0]])\n",
        "test": "assert     (count_first_elements((1,2,3,4)) == 0), \"Wrong count_first_elements\"",
        "num_ids": 1763
    },
    {
        "number": 279,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n+1)*(n+2)/2\n",
        "test": "assert     is_num_decagonal(1) == True",
        "num_ids": 999
    },
    {
        "number": 280,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, x in enumerate(dlist):\n        if x == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert     sequential_search([1,2,3,4,5], 2) == (True, 1)",
        "num_ids": 1206
    },
    {
        "number": 281,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(test_list)\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert     all_unique([1,2,2]) == False",
        "num_ids": 3225
    },
    {
        "number": 282,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    ans = []\n    for i in range(len(nums1)):\n        ans.append(nums1[i] - nums2[i])\n    return ans\n",
        "test": "assert     sub_list([], []) == []",
        "num_ids": 785
    },
    {
        "number": 283,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 10:\n        return True\n    temp = n%10\n    for i in range(10):\n        if(n%(10**(i+1))//(10**i)>temp):\n            return False\n    return True\n",
        "test": "assert     validate(1234)     == True",
        "num_ids": 3012
    },
    {
        "number": 284,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_element([1,1,1,1,1,1],1) == True",
        "num_ids": 1069
    },
    {
        "number": 285,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('a(b)+', text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('abb') == True",
        "num_ids": 1798
    },
    {
        "number": 286,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < 1:\n        return 0\n    if n == k:\n        return max(a)\n    if k == 1:\n        return max(a)\n    if k > n:\n        return max(a)\n    \n    m = len(a)\n    sum_array = [0] * m\n    \n    sum_array[0] = a[0]\n    for i in range(1, k):\n        sum_array[i] = max(a[i], a[i] + sum_array[i-1])\n    \n    max_ending_here = max(sum_array)\n    \n    for i in range(k, n):\n        sum_array[i] = max(a[i], a[i] + sum_array[i-1])\n        max_ending_here = max(max_ending_here, sum_array[i])\n    \n    return max_ending_here\n",
        "test": "assert max_sub_array_sum_repeated([2, -2, 2, -5, 1], 3, 1) == 2",
        "num_ids": 3163
    },
    {
        "number": 287,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return square_Sum(n - 1) + n * n\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 789
    },
    {
        "number": 290,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    if len(list1) > 0:\n        max_len = len(list1[0])\n        for i in range(1, len(list1)):\n            if len(list1[i]) > max_len:\n                max_len = len(list1[i])\n    return max_len\n",
        "test": "assert     max_length([[3, 4, 5], [7, 8, 9], [1, 2, 3]]) == 3",
        "num_ids": 2040
    },
    {
        "number": 291,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)\n",
        "test": "assert     count_no_of_ways(0, 1) == 0",
        "num_ids": 1393
    },
    {
        "number": 292,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    return int(math.floor(n/m))\n",
        "test": "assert     find(0,4) == 0",
        "num_ids": 568
    },
    {
        "number": 293,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #x = (w*w+h*h-w*h)**0.5\n    #return x\n    return w*h/2.0\n",
        "test": "assert     otherside_rightangle(1,2) == 1",
        "num_ids": 3022
    },
    {
        "number": 294,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    if listval == []:\n        return None\n    else:\n        return max(listval)\n",
        "test": "assert     max_val([4,3,2,1,-10,-5,-2]) == 4",
        "num_ids": 1199
    },
    {
        "number": 295,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_div(0) == 0",
        "num_ids": 1233
    },
    {
        "number": 296,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n",
        "test": "assert     get_Inv_Count([]) == 0, \"empty list\"",
        "num_ids": 1617
    },
    {
        "number": 297,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for item in list1:\n        if isinstance(item, list):\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 1534
    },
    {
        "number": 299,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for item in stdata:\n        d[item[0]] += item[1]\n    return max(d.values())\n",
        "test": "assert     max_aggregate([(1, 2), (5, 10), (10, 1), (20, 22)]) == 22",
        "num_ids": 1738
    },
    {
        "number": 300,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(0, 2**n):\n        s = bin(i)[2:]\n        if sum([int(j) for j in s[:n]]) == sum([int(j) for j in s[n:]]):\n            count += 1\n    return count\n",
        "test": "assert     count_binary_seq(1) == 1",
        "num_ids": 1710
    },
    {
        "number": 301,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "test": "assert     dict_depth(None) == 0",
        "num_ids": 3249
    },
    {
        "number": 304,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(rotations)==0 :\n        return arr[index]\n    if ranges[0] <= rotations[0] :\n        return find_Element(arr, ranges[1:], rotations[1:], index)\n    if ranges[-1] >= rotations[-1] :\n        return find_Element(arr, ranges[:-1], rotations[:-1], index)\n    if rotations[0] < ranges[0] and rotations[-1] > ranges[-1] :\n        return find_Element(arr, ranges[1:-1], rotations[1:-1], index)\n    if rotations[0] == ranges[0] :\n        return find_Element(arr, ranges[1:], rotations[1:], index)\n    if rotations[-1] == ranges[-1] :\n        return find_Element(arr, ranges[:-1], rotations[:-1], index)\n    return arr[rotations[0]]\n",
        "test": "assert     find_Element([1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], 0) == 1",
        "num_ids": 2199
    },
    {
        "number": 305,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n",
        "test": "assert     start_withp([\"one\", \"two\", \"three\", \"four\"]) == []",
        "num_ids": 1814
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return a[index]\n    elif k == index:\n        return a[index] + a[index-1]\n    else:\n        max1 = max_sum_increasing_subseq(a, n, index+1, k)\n        max2 = max_sum_increasing_subseq(a, n, index+1, k+1)\n        return max1 if max1 > max2 else max2\n",
        "test": "assert     max_sum_increasing_subseq([1, 6, 11, 5, 3], 5, 2, 6) == 11",
        "num_ids": 2083
    },
    {
        "number": 307,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    try:\n        colon=tuplex[m:n]\n        return colon\n    except IndexError:\n        return IndexError\n",
        "test": "assert     colon_tuplex((), 2, 3) == (())",
        "num_ids": 3013
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for n1 in nums1:\n        for n2 in nums2:\n            for i in range(1, N):\n                if n1 * i <= N and n2 * i <= N:\n                    result.append(n1 * n2 * i)\n    return result\n",
        "test": "assert     large_product([1,2,3], [1,2,3], 0) == []",
        "num_ids": 2531
    },
    {
        "number": 309,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n",
        "test": "assert     maximum(2,3) == 3",
        "num_ids": 519
    },
    {
        "number": 310,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #import re\n    #return tuple(re.findall(r'\\w', str1))\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('abcdefghijklmnopqrstuvwxyz') == ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')",
        "num_ids": 1151
    },
    {
        "number": 311,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    \n    return (n & -n)\n",
        "test": "assert     (0 | 0)        == 0",
        "num_ids": 1079
    },
    {
        "number": 312,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3 * math.pi * r**2 * h\n    return V\n",
        "test": "assert     volume_cone(0,2) == 0",
        "num_ids": 1032
    },
    {
        "number": 388,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    m = 1\n    while m <= n:\n        m = m * 2\n    return m//2\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 794
    },
    {
        "number": 389,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "test": "assert     find_lucas(3) == 4",
        "num_ids": 1135
    },
    {
        "number": 390,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Write your code here\n    for i in range(len(list_)):\n        list_[i] = list_[i].replace('%s', string)\n    return list_\n",
        "test": "assert     add_string([], '%s') == []",
        "num_ids": 1656
    },
    {
        "number": 391,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: l3[i]} for i in range(len(l1))}\n",
        "test": "assert     convert_list_dictionary(['a', 'b', 'c'], ['1', '2', '3'], ['x', 'y', 'z']) == {'a': {'1': 'x'}, 'b': {'2': 'y'}, 'c': {'3': 'z'}}",
        "num_ids": 2179
    },
    {
        "number": 392,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 17\n    elif n == 6:\n        return 26\n    elif n == 7:\n        return 41\n    elif n == 8:\n        return 55\n    elif n == 9:\n        return 89\n    elif n == 10:\n        return 152\n    elif n == 11:\n        return 233\n    elif n == 12:\n        return 377\n    elif n == 13:\n        return 566\n    elif n == 14:\n        return 836\n    elif n == 15:\n        return 1451\n    elif n == 16:\n        return 2465\n    elif n == 17:\n        return 3999\n    elif n == 18:\n        return 4782\n    elif n == 19:\n        return 76561\n    elif n == 20:\n        return 1276561\n    elif n == 21:\n        return 25401428\n    elif n == 22:\n        return 34151213\n    elif n == 23:\n        return 46968917\n    elif n == 24:\n        return 56281477\n    elif n == 25:\n        return 7205759\n    elif n == 26:\n        return 87960930\n    elif n == 27:\n        return 12799721\n    elif n == 28:\n        return 16605795\n    elif n == 29:\n        return 2591284\n    elif n == 30:\n        return 43980465\n    elif n == 31:\n        return 57397465\n    elif n == 32:\n        return 70796501\n    elif n == 33:\n        return 9227465\n    elif n == 34:\n        return 1128765\n    elif n == 35:\n        return 15661592\n    elif n == 36:\n        return 19800554\n    elif n == 37:\n        return 24099713\n    elif n == 38:\n        return 37192771\n    elif n == 39:\n        return 4989908\n    elif n == 40:\n        return 60472961\n    elif n == 41:\n        return 72583772\n    elif n == 42:\n        return 88717933\n    elif n == 43:\n        return 11265591\n    elif n == 44:\n        return 16606495\n    elif n == 45:\n        return 23931634\n    elif n == 46:\n        return 3881589\n    elif n == 47:\n        return 519089\n    elif n == 48:\n        return 6267716\n    elif n == 49:\n        return 7103743\n    elif n == 50:\n        return 86080808\n    elif n == 51:\n        return 1129027\n    elif n == 52:\n        return 17206501\n    elif n == 53:\n        return 25931134\n    elif n == 54:\n        return 33655089\n    elif n == 55:\n        return 4790807\n    elif n == 56:\n        return 6458056\n    elif n == 57:\n        return 7877581\n    elif n == 58:\n        return 9331020\n    elif n == 59:\n        return 11051749\n    elif n == 60:\n        return 17299068\n    elif n == 61:\n        return 25815355\n    elif n == 62:\n        return 4399429\n    elif n == 63:\n        return 5778315\n    elif n == 64:\n        return 79171334\n    elif n == 65:\n        return 1004737\n    elif n == 66:\n        return 12285539\n    elif n == 67:\n        return 18934904\n    elif n == 68:\n        return 30261664\n    elif n == 69:\n        return 43994035\n    elif n == 70:\n        return 60487424\n    elif n == 71:\n        return 71608735\n    elif n == 72:\n        return 85138219\n    elif n == 73:\n        return 98304077\n    elif n == 74:\n        return 11303684\n    elif n == 75:\n        return 14644583\n    elif n == 76:\n        return 19274416\n    elif n == 77:\n        return 26045297\n    elif n == 78:\n        return 37204038\n    elif n == 79:\n        return 51874133\n    elif n == 80:\n        return 68640579\n    elif n == 81:\n        return 84229116\n    elif n == 82:\n        return 99443059\n    elif n == 83:\n        return 113107896\n    elif n == 84:\n        return 17331139\n    elif n == 85:\n        return 24698266\n    elif n == 86:\n        return 38056921\n    elif n == 87:\n        return 4788112\n    elif n == 88:\n        return 66083379\n    elif n == 89:\n        return 86912962\n    elif n == 90:\n        return 103116839\n    elif n == 91:\n        return 12532639\n    elif n == 92:\n        return 18961454\n    elif n == 93:\n        return 30573025\n    elif n == 94:\n        return 43994497\n    elif n == 95:\n        return 5798612\n    elif n == 96:\n        return 71256183\n    elif n == 97:\n        return 89117019\n    elif n == 98:\n        return 106083025\n    elif n == 99:\n        return 138482459\n    elif n == 100:\n        return 192787907\n    elif n == 101:\n        return 26288746\n    elif n == 102:\n        return 36992595\n    elif n == 103:\n        return 49159951\n    elif n == 104:\n        return 6391112\n    elif n == 105:\n        return 75280685\n    elif n == 106:\n        return 98634961\n    elif n == 107:\n        return 11299963\n    elif n == 108:\n        return 16607632\n    elif n == 109:\n        return 23963444\n    elif n == 110:\n        return 39993558\n    elif n == 111:\n        return 51884983\n    elif n == 112:\n        return 67569001\n    elif n == 113:\n        return 85423140\n    elif n == 114:\n        return 104747280\n    elif n == 115:\n        return 146425705\n    elif n == 116:\n        return 189348914\n    elif n == 117:\n        return 30261384\n    elif n == 118:\n        return 43988258\n    elif n == 119:\n        return 57787309\n    elif n == 120:\n        return 79085642\n    elif n == 121:\n        return 100471927\n    elif n == 122:\n        return 12285748\n    elif n == 123:\n        return 18934908\n    elif n == 124:\n        return 38056918\n    elif n == 125:\n        return 51874129\n    elif n == 126:\n        return 68640938\n    elif n == 127:\n        return 84229131\n    elif n == 128:\n        return 99443059\n    elif n == 129:\n        return 11310680\n    elif n == 130:\n        return 17331046\n    elif n == 131:\n        return 24698958\n    elif n == 132:\n        return 37903123\n    elif n == 133:\n        return 5187414\n    elif n == 134:\n        return 65961015\n    elif n == 135:\n        return 75762319\n    elif n == 136:\n        return 86911142\n    elif n == 137:\n        return 10",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 5243
    },
    {
        "number": 393,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    output_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            output_list = i\n    return output_list\n    \nprint(max_length_list(['abc', 'xyz', 'aba', '1221', 'asdf', 'hello']))\nprint(max_length_list(['my', 'name', 'is', 'kevin', 'harry', 'and', 'is', 'a', 'cool', 'guy']))\n",
        "test": "assert max_length_list(['abcd','abcd']) == 'abcd'",
        "num_ids": 1628
    },
    {
        "number": 394,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_distinct((1, 2, 3, 4, 5))",
        "num_ids": 1372
    },
    {
        "number": 395,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n    return \"No non repeating character\"\n",
        "test": "assert     first_non_repeating_character('abc') == 'a'",
        "num_ids": 1406
    },
    {
        "number": 396,
        "max_answer_num": 24,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    char = string[0]\n    for i in string:\n        if i!= char:\n            return False\n    return True\n",
        "test": "assert     check_char(\"ab\") == False",
        "num_ids": 915
    },
    {
        "number": 397,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return a\n        else:\n            return c\n    elif a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    else:\n        return a\n",
        "test": "assert     median_numbers(0,0,0) == 0",
        "num_ids": 3049
    },
    {
        "number": 398,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum([int(digit) for digit in str(num)])\n    return digit_sum\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 1117
    },
    {
        "number": 399,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n",
        "test": "assert     bitwise_xor((1, 0), (0, 0)) == (1, 0)",
        "num_ids": 1801
    },
    {
        "number": 400,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_set = set(test_list)\n    return len(test_set)\n",
        "test": "assert     extract_freq([(1, 2), (1, 2, 3), (1, 3)]) == 3",
        "num_ids": 3543
    },
    {
        "number": 401,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([x + y for x, y in zip(test_tup1, test_tup2)])\n",
        "test": "assert     add_nested_tuples((1,2,3),(4,5,6)) == (5,7,9)",
        "num_ids": 1900
    },
    {
        "number": 404,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n",
        "test": "assert     minimum(1,2) == 1",
        "num_ids": 616
    },
    {
        "number": 405,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] == tuple1[0]:\n        return True\n    else:\n        return False\n",
        "test": "assert     not check_tuplex( (1,2,3), (4,5,6) )",
        "num_ids": 1196
    },
    {
        "number": 406,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = str(x)\n    # if the lenght of the string is odd, then the parity is 1\n    if (len(x) % 2) == 1:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     find_Parity(3) == 1",
        "num_ids": 977
    },
    {
        "number": 407,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    digits.sort()\n    s = ''\n    for i in digits:\n        s += i\n    return int(s)\n",
        "test": "assert     rearrange_bigger(1333) == 1333",
        "num_ids": 3632
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    res = []\n    index1, index2 = 0, 0\n    while index1 < len(nums1) and index2 < len(nums2):\n        if nums1[index1] < nums2[index2]:\n            res.append((nums1[index1], nums2[index2]))\n            index1 += 1\n            index2 += 1\n        elif nums1[index1] > nums2[index2]:\n            index2 += 1\n        else:\n            index1 += 1\n            index2 += 1\n        if len(res) == k:\n            break\n    return res\n",
        "test": "assert     k_smallest_pairs([], [], 1) == []",
        "num_ids": 2663
    },
    {
        "number": 409,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    from functools import reduce\n    return min([reduce(lambda x,y:x*y, t) for t in list1])\n",
        "test": "assert     min_product_tuple([(0, 3), (5, 2), (4, 4)]) == 0",
        "num_ids": 1775
    },
    {
        "number": 410,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==1:\n        return listval[0]\n    elif len(listval)==0:\n        return None\n    else:\n        return min(listval[0],min_val(listval[1:]))\n",
        "test": "assert     min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1313
    },
    {
        "number": 411,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    res = \"\"\n    for word in word.split('_'):\n        res += word.capitalize()\n    return res\n",
        "test": "assert     snake_to_camel('__EXAMPLE__') == 'Example'",
        "num_ids": 1613
    },
    {
        "number": 412,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = l[::2]\n    return l\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 1329
    },
    {
        "number": 413,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list_length = len(list1)\n    if list_length > n:\n        result = list1[n]\n    else:\n        result = None\n    return result\n",
        "test": "assert     extract_nth_element([('a',1),('b',2),('c',3)], 1) == ('b',2)",
        "num_ids": 1222
    },
    {
        "number": 414,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return True if bool(set(list1).intersection(set(list2))) else False\n",
        "test": "assert     overlapping([1,2,3], [2,1,3]) == True",
        "num_ids": 1311
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Code here\n    arr = sorted(arr)\n    m1 = arr[-1]\n    m2 = arr[-2]\n    \n    return m1*m2\n",
        "test": "assert     max_Product([2, 2, 4]) == 8",
        "num_ids": 1759
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for t in Input:\n        if len(t)>=2:\n            if t[0] == t[1]:\n                result.append(t[0])\n    return result\n",
        "test": "assert group_tuples([]) == [], 'Failed'",
        "num_ids": 3801
    },
    {
        "number": 418,
        "max_answer_num": 25,
        "max_test_num": 1,
        "total_product": 390,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    x=len(lst)\n    return lst[x-1]\n",
        "test": "assert     Find_Max([1,1,2,3,3,3,4,5,5,5,5]) == 5",
        "num_ids": 1552
    },
    {
        "number": 419,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum([round(x) for x in list1])*len(list1)\n",
        "test": "assert     round_and_sum([]) == 0",
        "num_ids": 2081
    },
    {
        "number": 420,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for x in range(0, n):\n        if x%2 == 0:\n            cube_sum = cube_sum + x*x*x\n    return cube_sum\n",
        "test": "assert     (cube_Sum(1) == sum([x**3 for x in range(1)]))",
        "num_ids": 969
    },
    {
        "number": 421,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup = \"\"\n    for elem in test_tup:\n        tup += str(elem) + ','\n    return tup[:-1]\n",
        "test": "assert     concatenate_tuple(()) == ''",
        "num_ids": 1629
    },
    {
        "number": 422,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    nums = range(1,n+1)\n    #print nums\n    return (sum(nums))**(1.0/3.0)\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1193
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # The following line is a placeholder for the real code\n    return test_tuple\n",
        "test": "assert     extract_rear((\"a\", \"b\", \"c\")) == ('a', 'b', 'c')",
        "num_ids": 1509
    },
    {
        "number": 425,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif list1[0] == x:\n        return 1 + count_element_in_list(list1[1:], x)\n    else:\n        return count_element_in_list(list1[1:], x)\n",
        "test": "assert     count_element_in_list([], 0) == 0",
        "num_ids": 3286
    },
    {
        "number": 426,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #return list(filter(lambda num: num % 2 == 0, nums))\n    return list(filter(lambda num: not num % 2 == 0, nums))\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 1862
    },
    {
        "number": 427,
        "max_answer_num": 37,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    y, m, d = dt.split('-')\n    return '{}-{}-{}'.format(d, m, y)\n",
        "test": "assert     change_date_format(\"2013-01-01\") == \"01-01-2013\"",
        "num_ids": 3498
    },
    {
        "number": 428,
        "max_answer_num": 25,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([5,3,4,1,2,6]) == [1,2,3,4,5,6]",
        "num_ids": 3611
    },
    {
        "number": 429,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2))\n",
        "test": "assert     and_tuples((1,2,3,4),(2,3,4,5)) == ((1,2),(2,3),(3,4),(4,5))",
        "num_ids": 1660
    },
    {
        "number": 430,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # get a-b and c-b\n    d = b**2 - 4*a*c\n    # if d is negative, return None\n    if d < 0:\n        return None\n    else:\n        # d is positive\n        return -b + d**0.5/(2*a)\n",
        "test": "assert     parabola_directrix(1, 4, 5) == None     ",
        "num_ids": 1262
    },
    {
        "number": 431,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n",
        "test": "assert     not common_element([], [1, 2, 3, 4])",
        "num_ids": 1490
    },
    {
        "number": 432,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return.5 * base1 +.5 * base2\n",
        "test": "assert     median_trapezium(3,3,3)         == 3",
        "num_ids": 837
    },
    {
        "number": 433,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([2, 3, 4, 5, 6, 7, 8, 9], 4)",
        "num_ids": 1265
    },
    {
        "number": 434,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if 'a' in text:\n        if text.count('a') < 2:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     text_match_one(\"b\") == False, \"Failed case 3\"",
        "num_ids": 908
    },
    {
        "number": 435,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = (n%10)\n    return last\n",
        "test": "assert     last_Digit(1) == 1",
        "num_ids": 705
    },
    {
        "number": 436,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_negative=[]\n    for i in list1:\n        if i<0:\n            list_negative.append(i)\n    return list_negative\n",
        "test": "assert     neg_nos([0,1,2,3,4,5]) == [], 'incorrect'",
        "num_ids": 1376
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for char in str1:\n        if ord(char)%2==1:\n            str1 = str1.replace(char,\"\")\n    return str1\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 1112
    },
    {
        "number": 438,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) < 2:\n        return 0\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1] <= test_list[j][0] and test_list[i][0] >= test_list[j][1]):\n                count += 1\n    return count\n",
        "test": "assert     count_bidirectional([(1,2),(2,3),(3,4),(3,5)]) == 0",
        "num_ids": 2385
    },
    {
        "number": 439,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    n = len(L)\n    num = ''\n    for i in range(n):\n        num += str(L[i])\n    return int(num)\n",
        "test": "assert     multiple_to_single([0,0,0,0]) == 0",
        "num_ids": 1282
    },
    {
        "number": 440,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    \n    index = text.find('adverb')\n    if index!= -1:\n        return index\n",
        "test": "assert     find_adverb_position('') == None",
        "num_ids": 6075
    },
    {
        "number": 441,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "test": "assert     surfacearea_cube(1) ==     6",
        "num_ids": 547
    },
    {
        "number": 442,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(0, len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return float(count)/float(len(nums))\n",
        "test": "assert     positive_count([1, 1, 1, 1]) == 1.0",
        "num_ids": 1638
    },
    {
        "number": 443,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #list1 = [-5,4,-3,2,-1,-2,4,-5]\n    #list1 = [-4,2,5,1,0,-2,2,4,6,8,10]\n    list1.sort()\n    for i in range(0,len(list1)):\n        if list1[i]<0:\n            return list1[i]\n",
        "test": "assert     largest_neg([-3,2,1,4,0])==-3",
        "num_ids": 1405
    },
    {
        "number": 444,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][0:K])\n    return test_list\n",
        "test": "assert trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], 4) == [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]",
        "num_ids": 2081
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i*j for i, j in zip(test_tup1, test_tup2))\n",
        "test": "assert     index_multiplication((1, 2, 3), (3, 2, 1)) == ((1*3), (2*2), (3*1))",
        "num_ids": 1596
    },
    {
        "number": 446,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dict = {} \n    for i in lst: \n        if i in dict: \n            dict[i] += 1\n        else: \n            dict[i] = 1 \n    return dict \n",
        "test": "assert     count_Occurrence((1,2,3,1,3,4,2,3,3,1,2), [1,2,3,1,3,4,2,3,3,1,2]) == Counter([1,2,3,1,3,4,2,3,3,1,2])",
        "num_ids": 1400
    },
    {
        "number": 447,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n",
        "test": "assert     [c**3 for c in [1, 2, 3]] == [1, 8, 27]",
        "num_ids": 1441
    },
    {
        "number": 448,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<1:\n        return 0\n    else:\n        return n+cal_sum(n-1)\n    \ndef perrin_num(n):\n    '''\n    Write a function to calculate the number of perrin numbers for nth term.\n    '''\n    if n==1:\n        return 1\n    else:\n        return perrin_num(n-1)+perrin_num(n-2)\n    \ndef even_sum(n):\n    '''\n    Write a function to calculate the sum of all even numbers less than n.\n    '''\n    if n<0:\n        return 0\n    else:\n        if n%2==0:\n            return n+even_sum(n-2)\n        else:\n            return even_sum(n-2)\n    \ndef fib_num(n):\n    '''\n    Write a function to calculate nth fibonacci number.\n    '''\n    if n==1 or n==2:\n        return 1\n    else:\n        return fib_num(n-1)+fib_num(n-2)\n",
        "test": "assert     cal_sum(1)    ==    1",
        "num_ids": 2770
    },
    {
        "number": 450,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) > l:\n        return str[:l]\n    else:\n        return str\n",
        "test": "assert     extract_string(\"abcdefghijklmnopqrstuvwxyz\", 3) == \"abc\"",
        "num_ids": 1735
    },
    {
        "number": 451,
        "max_answer_num": 28,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1=text1.strip()\n    return text1\n",
        "test": "assert     remove_whitespaces(\"  Whitespaces  \") == \"Whitespaces\"",
        "num_ids": 2913
    },
    {
        "number": 452,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "test": "assert     loss_amount(30,30) == 0",
        "num_ids": 769
    },
    {
        "number": 453,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum = sum + i \n    return sum\n",
        "test": "assert     sumofFactors(0) == 0 ",
        "num_ids": 1032
    },
    {
        "number": 454,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    words = re.findall('[a-z]+',text)\n    return any(['z' in word for word in words])\n",
        "test": "assert     text_match_wordz(\"The zebra was not very zealous.\")",
        "num_ids": 2907
    },
    {
        "number": 455,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 12 and monthnum2 >= 1:\n        return True\n    else:\n        return False\ndef check_leapyear(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    elif year % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_1(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_2(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_3(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    elif year % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year_4(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        return True\n    else:\n        return False\ndef find_number_of_days(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    days_in_month = {\n        1 : 31,\n        2 : 28,\n        3 : 31,\n        4 : 30,\n        5 : 31,\n        6 : 30,\n        7 : 31,\n        8 : 31,\n        9 : 30,\n        10 : 31,\n        11 : 30,\n        12 : 31\n    }\n    if check_monthnumb_number(month) == True:\n        return days_in_month[month]\n    else:\n        if check_leapyear(year) == True:\n            return days_in_month[month] + 1\n        else:\n            return days_in_month[month]\ndef find_number_of_days_1(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 29\n        else:\n            return 28\ndef find_number_of_days_2(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 31\ndef find_number_of_days_3(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_4(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_5(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 30\ndef find_number_of_days_6(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_7(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_8(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_9(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 30\ndef find_number_of_days_10(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 31\ndef find_number_of_days_11(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 31\ndef find_number_of_days_12(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 30\n        else:\n            return 31\ndef find_number_of_days_13(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_14(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 31\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            return 30\ndef find_number_of_days_15(year,month,day):\n    '''\n    Write a function to find the number of days in a specific month of a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        return 30\n    else:\n        if check_leapyear(year) == True:\n            return 31\n        else:\n            retur",
        "test": "assert     check_monthnumb_number(1)",
        "num_ids": 1451
    },
    {
        "number": 456,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if stringlist == []:\n        return stringlist\n    else:\n        return [stringlist[-1]] + reverse_string_list(stringlist[:-1])\n",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 1930
    },
    {
        "number": 457,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0: \n        return lst\n    min_lst = lst[0] \n    for i in lst: \n        if len(i) < len(min_lst): \n            min_lst = i \n    return min_lst\n",
        "test": "assert     Find_Min([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3], 'Incorrect'",
        "num_ids": 3045
    },
    {
        "number": 458,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(3,4) == 12",
        "num_ids": 472
    },
    {
        "number": 459,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n",
        "test": "assert     remove_uppercase(\"\") == \"\"",
        "num_ids": 3189
    },
    {
        "number": 460,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = [] \n    for i in lst: \n        res.append(i[0]) \n    return res \n",
        "test": "assert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
        "num_ids": 1310
    },
    {
        "number": 461,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for letter in str:\n        if letter.isupper():\n            upper += 1\n    return upper\n",
        "test": "assert     (upper_ctr('abC') == 1)",
        "num_ids": 1079
    },
    {
        "number": 462,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    elif len(list1) == 2:\n        return [[list1[0], list1[1]], [list1[1], list1[0]]]\n    else:\n        result = []\n        for i in range(len(list1)):\n            list2 = list1[:i] + list1[i+1:]\n            for x in combinations_list(list2):\n                result.append([list1[i]] + x)\n        return result\n",
        "test": "assert     [] == combinations_list([])",
        "num_ids": 5835
    },
    {
        "number": 463,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_ending = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_ending = max_ending * arr[i]\n        else:\n            max_ending = arr[i]\n        max_so_far = max(max_ending, max_so_far)\n    return max_so_far\n",
        "test": "assert     max_subarray_product([1, 2, 3, -2]) == 6",
        "num_ids": 2056
    },
    {
        "number": 464,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    result = True\n    for key in dict:\n        if dict[key]!= dict[key]:\n            result = False\n    return result\n",
        "test": "assert     check_value({1:1, 2:1, 3:1}, 1)",
        "num_ids": 1610
    },
    {
        "number": 465,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for (k,v) in dict1.items() if v}\n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 1599
    },
    {
        "number": 468,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 0\n    current_prod = 1\n    for i in range(len(arr)):\n        current_prod = 1\n        for j in range(i, len(arr)):\n            current_prod *= arr[j]\n            max_prod = max(max_prod, current_prod)\n    return max_prod\n",
        "test": "assert     max_product([1, 1, 1, 1, 1]) == 1",
        "num_ids": 1610
    },
    {
        "number": 470,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup)==1:\n        return test_tup[0]\n    else:\n        return test_tup[0]+test_tup[1]\n",
        "test": "assert     add_pairwise(('a', 'b', 'c', 'd')) == 'ab', 'incorrect'",
        "num_ids": 1697
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod*i\n    return prod%n\n",
        "test": "assert     find_remainder([1,2,3,4,5], 10) == 0",
        "num_ids": 1127
    },
    {
        "number": 472,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l) + 1))\n",
        "test": "assert     check_Consecutive([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1375
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if not test_list1:\n        return []\n    return [tuple1 for tuple1 in test_list1 if tuple1 in test_list2]\n",
        "test": "assert     [] == tuple_intersection([], [])",
        "num_ids": 1586
    },
    {
        "number": 474,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char('abcdefg','a', 'z') == 'zbcdefg'",
        "num_ids": 989
    },
    {
        "number": 475,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1])\n",
        "test": "assert     sort_counter({}) == []",
        "num_ids": 1460
    },
    {
        "number": 476,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n",
        "test": "assert     big_sum([]) == 0",
        "num_ids": 1293
    },
    {
        "number": 477,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False\n",
        "test": "assert is_lower('lOWER') == False",
        "num_ids": 621
    },
    {
        "number": 478,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    tstr1 = str1\n    lstr1 = tstr1.lower()\n    return lstr1\n    \ndef remove_numbers(str1):\n    '''\n    Write a function to remove all the numbers from a given string.\n    '''\n    tstr1 = str1\n    lstr1 = re.sub(r'\\d+','',tstr1)\n    return lstr1\n",
        "test": "assert     re.sub('aa', '', 'aa') == ''",
        "num_ids": 1203
    },
    {
        "number": 479,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if (n < 10) :  \n        return n\n    else : \n        return first_Digit(n//10) \n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    if (n % 10) : \n        return n % 10\n    else :\n        return last_Digit(n//10)\n",
        "test": "assert     first_Digit(0)        ==    0",
        "num_ids": 732
    },
    {
        "number": 554,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 3609
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(range(1, n+1))**3 - sum(range(1, n+1))\n",
        "test": "assert     difference(1) == 0",
        "num_ids": 882
    },
    {
        "number": 556,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] == 1 :\n                count += 1\n    return count\n",
        "test": "assert     find_Odd_Pair([1,2,3,4,5,6,7,8,9,10,11,12], 1) == 0",
        "num_ids": 3619
    },
    {
        "number": 557,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if string[i].isupper():\n            new_string += string[i].lower()\n        elif string[i].islower():\n            new_string += string[i].upper()\n        else:\n            new_string += string[i]\n    return new_string\n",
        "test": "assert     toggle_string(\"\") == \"\"",
        "num_ids": 1438
    },
    {
        "number": 558,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    summ = 0\n    if diff > 0:\n        while diff > 0:\n            summ += diff % 10\n            diff = diff // 10\n    return summ\n",
        "test": "assert     digit_distance_nums(0, 0) == 0",
        "num_ids": 1289
    },
    {
        "number": 559,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n        \ndef max_sub_array_sum_2(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray. \n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n        \ndef max_sub_array_sum_3(a, size):\n    '''\n    Best solution. The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(0,size):\n        max_ending_here = max_ending_here + a[i]\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_4(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_5(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(0,size):\n        max_ending_here = max_ending_here + a[i]\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_6(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_7(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_8(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_9(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_10(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_11(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_12(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_13(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_14(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    max_ending_here = 0\n    max_so_far = a[0]\n    \n    for i in range(1,size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_15(a, size):\n    '''\n    The idea is to use the fact that the max sum is the maximum sum of any contiguous subarray.\n    '''\n    \n    ma",
        "test": "assert max_sub_array_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], 10) == -1",
        "num_ids": 1856
    },
    {
        "number": 560,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_tup = list(union_set)\n    union_tup.sort()\n    return tuple(union_tup)\n",
        "test": "assert     union_elements((1, 2, 3, 4, 5, 6), (4, 5, 6, 7, 8, 9)) == (1, 2, 3, 4, 5, 6, 7, 8, 9)",
        "num_ids": 1839
    },
    {
        "number": 562,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = len(lst)\n    if length == 0:\n        return 0\n    maxLen = 1\n    start = 0\n    for i in range(length):\n        if lst[i] == 0:\n            start = i\n        else:\n            maxLen = max(maxLen, i - start + 1)\n    return maxLen\n",
        "test": "assert     Find_Max_Length([]) == 0",
        "num_ids": 1914
    },
    {
        "number": 563,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\\"(.*?)\\\"',text)\n",
        "test": "assert extract_values(\"\\n\") == [], 'expected an empty list'",
        "num_ids": 1409
    },
    {
        "number": 564,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    arr.sort()\n    count = 0\n    for i in range(n):\n        if(i>0):\n            if(arr[i]!=arr[i-1]):\n                count+=1\n    return count\n",
        "test": "assert     (count_Pairs([], 0) == 0)",
        "num_ids": 1871
    },
    {
        "number": 565,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 854
    },
    {
        "number": 566,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n",
        "test": "assert     (sum_digits(0)         == 0)",
        "num_ids": 1180
    },
    {
        "number": 567,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n",
        "test": "assert     issort_list([3, 2, 1]) == False",
        "num_ids": 3165
    },
    {
        "number": 568,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert     empty_list(5) == [{}] * 5",
        "num_ids": 695
    },
    {
        "number": 569,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for each in list1:\n        list2.append(sorted(each))\n    return list2\n",
        "test": "assert     sort_sublists([[1,2,3,4],[2,3,4,5],[3,4,5,6]]) == [[1,2,3,4],[2,3,4,5],[3,4,5,6]]",
        "num_ids": 1822
    },
    {
        "number": 572,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for i in nums:\n        if i not in unique:\n            unique.append(i)\n    return unique\n",
        "test": "assert     two_unique_nums([1, 1, 2, 3, 3, 4, 4, 5, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 3974
    },
    {
        "number": 573,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique = []\n    for i in list_data:\n        if i not in unique:\n            unique.append(i)\n    product = 1\n    for i in unique:\n        product = product*i\n    return product\n",
        "test": "assert     unique_product([]) == 1, 'incorrect'",
        "num_ids": 3104
    },
    {
        "number": 574,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    sa = 2*pi*r*(r+h)\n    return sa\n",
        "test": "assert     surfacearea_cylinder(0, 2) == 0",
        "num_ids": 977
    },
    {
        "number": 576,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    s=len(B)\n    for i in range(s):\n        if B[i] not in A:\n            return False\n    return True\n",
        "test": "assert     not is_Sub_Array([1,2,3],[4,5,6,7,8])",
        "num_ids": 3452
    },
    {
        "number": 577,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = n % 10\n    return n\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 863
    },
    {
        "number": 578,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for a,b,c in zip(list1,list2,list3):\n        new_list.extend([a,b,c])\n    return new_list\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 1713
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Sorry, different length'\n    elif len(test_tup1) == 0:\n        return 'Dissimilar'\n    else:\n        for i in test_tup1:\n            if i not in test_tup2:\n                return i\n        return 'Dissimilar'\n",
        "test": "assert     find_dissimilar( (1, 2, 3), (1, 2, 4)) == (3)",
        "num_ids": 1819
    },
    {
        "number": 580,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # use return on non iterable object\n    if not isinstance(test_tuple, tuple):\n        return even_fnc(test_tuple)\n    else:\n        return tuple([even_fnc(item) for item in test_tuple if isinstance(item, tuple)])\n",
        "test": "assert     (1,1,1,(1,1,1,'a'),'a'),'The elements that are even should be removed'",
        "num_ids": 2246
    },
    {
        "number": 581,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=b*s\n    return area\n",
        "test": "assert     surface_Area(0,1) == 0",
        "num_ids": 700
    },
    {
        "number": 582,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n",
        "test": "assert     my_dict({}) == True",
        "num_ids": 721
    },
    {
        "number": 583,
        "max_answer_num": 24,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    res = 0\n    for i in range(num):\n        res += catalan_number(i) * catalan_number(num-i-1)\n    return res\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 1265
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_re = re.compile(r'^\\s*ly\\s*$',re.IGNORECASE)\n    return ly_re.search(text)\n",
        "test": "assert ",
        "num_ids": 1914
    },
    {
        "number": 585,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    ans = []\n    while len(ans) < n:\n        ans.append(-heapq.heappop(heap))\n    return ans\n",
        "test": "assert expensive_items([10,20,30,40,50],0) == []",
        "num_ids": 5753
    },
    {
        "number": 586,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    for i in range(0, len(l), n):\n        arr.append(l[i:i + n])\n    return arr\n",
        "test": "assert     split_Arr([1, 2, 3, 4], 2) == [[1, 2], [3, 4]]",
        "num_ids": 978
    },
    {
        "number": 587,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     (list_tuple([1,2,3]) == (1,2,3))",
        "num_ids": 936
    },
    {
        "number": 588,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) > 2:\n        a, b = max(nums), min(nums)\n        return a - b\n    elif len(nums) == 2:\n        return abs(nums[0] - nums[1])\n    else:\n        return 0\n",
        "test": "assert     big_diff([3, 2, 1, 5, 4]) == 4",
        "num_ids": 829
    },
    {
        "number": 589,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # a = int(input())\n    # b = int(input())\n    res = []\n    sqr = lambda x: x**2\n    for i in range(a, b+1):\n        if sqr(i) > b:\n            break\n        elif sqr(i) == i:\n            res.append(i)\n    return res\n",
        "test": "assert     perfect_squares(2, 1) == []",
        "num_ids": 3123
    },
    {
        "number": 590,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x,y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x,y)\ndef polar_to_rect(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r,t)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x,y)\ndef polar_to_rect(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r,t)\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return True\ndef is_valid_list(l):\n    '''\n    Write a function that takes in a list of numbers and determines if the list is valid.\n    A valid list has all numbers unique and also has a length greater than 0.\n    '''\n    return Tru",
        "test": "assert     polar_rect(0,0) == (0,0)",
        "num_ids": 2899
    },
    {
        "number": 591,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    if n < 2:\n        return newList\n    temp = newList[0]\n    newList[0] = newList[n - 1]\n    newList[n - 1] = temp\n    return newList\n",
        "test": "assert     ([1,2,3] == swap_List([3,2,1])), 'Failed test for swap_List'",
        "num_ids": 1532
    },
    {
        "number": 592,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binom_coeff = 1\n    for i in range(1,k+1):\n        binom_coeff = binom_coeff*int(n-i+1)//int(i)\n    return binom_coeff\n",
        "test": "assert     binomial_Coeff(6,1)     ==     6",
        "num_ids": 1267
    },
    {
        "number": 593,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    '''\n    ip = '0.0.0.0'\n    \n    ip = \"123.456.789.0\"\n    print(ip.strip('0'))\n    '''\n    ip = re.sub(r'\\.(\\d)\\0+', r'\\1', ip)\n    return ip\n",
        "test": "assert     removezero_ip('123.123.123.123') == '123.123.123.123'",
        "num_ids": 1158
    },
    {
        "number": 594,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    return list1[1] - list1[0]\n",
        "test": "assert     diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1473
    },
    {
        "number": 595,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    for i in range(len(str1)):\n        if str1[i]!=str2[i] :\n            count+=1\n            a=i\n            b=i+1\n            while b<len(str2):\n                if str1[a]==str2[b]:\n                    break\n                a+=1\n                b+=1\n            str1=str1[:a]+str1[a+1:]+str1[a]+str1[:a]\n    return count\n",
        "test": "assert     min_Swaps('1100','1100') == 0",
        "num_ids": 1674
    },
    {
        "number": 596,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size=0\n    for i in tuple_list:\n        size = sys.getsizeof(i)\n        tuple_size+=size\n    return tuple_size\n",
        "test": "assert     tuple_size(tuple()) == 0",
        "num_ids": 3696
    },
    {
        "number": 597,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    p1 = 0\n    p2 = 0\n    c = 0\n    while(c < k):\n        if arr1[p1] < arr2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n        c += 1\n    if p1 < len(arr1):\n        return arr1[p1]\n    if p2 < len(arr2):\n        return arr2[p2]\n",
        "test": "assert     find_kth([1,2,3,4,5,6], [2,3,4,5,6], 2) == 2",
        "num_ids": 2371
    },
    {
        "number": 598,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    summation = 0\n    digits = 0\n    x = number\n    while (number > 0):\n        digits += 1\n        number = number // 10\n    number = x\n    while (x > 0):\n        summation = summation + pow(x % 10, digits)\n        x = x // 10\n    if (summation == number):\n        return True\n    else:\n        return False\n",
        "test": "assert     armstrong_number(153) == True",
        "num_ids": 1269
    },
    {
        "number": 599,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,number+1):\n        s += i\n    avg = s/number\n    return s, avg\n",
        "test": "assert     sum_average(1) == (1, 1)",
        "num_ids": 941
    },
    {
        "number": 600,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "test": "assert     is_Even(1) == False",
        "num_ids": 703
    },
    {
        "number": 602,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return None\n",
        "test": "assert     first_repeated_char('ababababababababababab') == 'a', 'the first repeated character should be a'",
        "num_ids": 1098
    },
    {
        "number": 603,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    if n <= 0:\n        return lucids\n    elif n == 1:\n        lucids.append(1)\n    elif n == 2:\n        lucids.append(1)\n        lucids.append(2)\n    elif n > 2:\n        lucids.append(1)\n        lucids.append(2)\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                if i % 3 == 0:\n                    lucids.append(i)\n            else:\n                lucids.append(i)\n    return lucids\n",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 4337
    },
    {
        "number": 604,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split(\" \")))\n",
        "test": "assert     reverse_words('hi')                    ==    'hi'",
        "num_ids": 1148
    },
    {
        "number": 605,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 0:\n        num = num * -1\n    if num < 2:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n",
        "test": "assert     prime_num(0) == False",
        "num_ids": 1072
    },
    {
        "number": 606,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef degree_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef degree_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.\n    d_lat = lat2-lat1\n    d_lon = lon2-lon1\n    # Calculate the change in radius.\n    a = math.pow(math.sin(d_lat/2),2)+math.pow(math.sin(d_lon/2),2)*math.cos(lat1)*math.cos(lat2)\n    # Distance in radians.\n    c = 2*math.asin(math.sqrt(a))\n    # Radius of earth in kilometers.\n    r = 6371\n    # Calculate distance.\n    return c * r\ndef haversine(p1, p2):\n    '''\n    Write a function to calculate the distance between two points on Earth.\n    '''\n    lat1, lon1, lat2, lon2 = p1[0], p1[1], p2[0], p2[1]\n    # Convert lat and lon to radians.\n    lon1, lat1, lon2, lat2 = degree_to_radian(lon1), degree_to_radian(lat1), degree_to_radian(lon2), degree_to_radian(lat2)\n    # Calculate the difference in lat and lon.",
        "test": "assert     radian_degree(0) == 0.0",
        "num_ids": 2932
    },
    {
        "number": 607,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    pattern_match = pattern.search(text)\n    if pattern_match:\n        return pattern_match.group(), pattern_match.start(), pattern_match.end()\n    return None, 0, 0\n",
        "test": "assert     re.search('^(.*)?=','i=j').group(1) == 'i'",
        "num_ids": 1688
    },
    {
        "number": 608,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*bell_Number(n-1)\n",
        "test": "assert     bell_Number(0) == 1",
        "num_ids": 2740
    },
    {
        "number": 610,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]\n",
        "test": "assert     remove_kth_element([], 0)     == []",
        "num_ids": 1776
    },
    {
        "number": 611,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if test_list == None:\n        return None\n    if len(test_list) == 0:\n        return None\n    return max([row[N-1] for row in test_list])\n",
        "test": "assert     max_of_nth([[3, 2, 1], [2, 1, 3], [3, 4, 4]], 3) == 4",
        "num_ids": 1211
    },
    {
        "number": 612,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    lst = lst[:]\n    for i in range(len(lst)):\n        lst1.append(lst[i][0])\n        lst2.append(lst[i][1])\n    return [lst1,lst2]\n",
        "test": "assert     merge([[1, 2], [2, 3]]) == [[1, 2], [2, 3]]",
        "num_ids": 2233
    },
    {
        "number": 614,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:x+1]) for x in range(len(test_list))]\n    \n    \ndef test_cummulative_sum():\n    print(cummulative_sum([1,2,3]))\n    print(cummulative_sum((1,2,3,4)))\n    print(cummulative_sum((1,2,3,4,5)))\n    print(cummulative_sum([]))\n    \n    \ntest_cummulative_sum()",
        "test": "assert     cummulative_sum([-1, -2, -3]) == [-1, -3, -6], \"testcase2 failed\"",
        "num_ids": 2060
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in zip(*nums)]\n",
        "test": "assert     average_tuple([]) == []",
        "num_ids": 2016
    },
    {
        "number": 616,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((3, 5), (2, 4)) == (1, 1), \"Failed\"",
        "num_ids": 1224
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    a = 2 * d - 1\n    b = d * (d + 1)\n    return max(0, ((steps + b - 1) // a - 1) )\n    \ndef min_Jumps_Recursive(steps, d, visited, N): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (steps, d) in visited: \n        return visited[(steps, d)]\n    if d == 0: \n        return 0\n    \n    a = 2 * d - 1\n    b = d * (d + 1)\n    \n    visited[(steps, d)] = 1 + min(min_Jumps_Recursive(steps - a, d - 1, visited, N), min_Jumps_Recursive(steps - b, d - 1, visited, N))\n    return visited[(steps, d)]\n",
        "test": "assert     min_Jumps(2, 0) == False",
        "num_ids": 5545
    },
    {
        "number": 618,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    def div(a,b):\n        if b == 0:\n            return float('Inf')\n        return a/b\n    return [div(a,b) for a,b in zip(nums1,nums2)]\n",
        "test": "assert     div_list([1,2,3], [4,5,6]) == [1/4, 2/5, 3/6]",
        "num_ids": 1258
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    number_dict = {'1':'one','2':'two','3':'three','4':'four','5':'five','6':'six','7':'seven','8':'eight','9':'nine'}\n    number_dict_out = {'one':'1','two':'2','three':'3','four':'4','five':'5','six':'6','seven':'7','eight':'8','nine':'9'}\n    move_dict = {}\n    for key in number_dict_out:\n        if number_dict_out[key] in test_str:\n            move_dict[key] = number_dict_out[key]\n    for key in number_dict:\n        if number_dict[key] in test_str:\n            move_dict[key] = number_dict[key]\n    for key in move_dict:\n        test_str = test_str.replace(key,move_dict[key])\n    return test_str\n",
        "test": "assert     move_num('12') == '12'",
        "num_ids": 1489
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    b = [[0 for i in range(n)] for j in range(n)]\n    if n <= 1:\n        return 1\n    else:\n        for i in range(1, n):\n            for j in range(0, i):\n                if a[i] % a[j] == 0 and b[i][j] == 0:\n                    b[i][j] = 1\n                elif a[i] % a[j] == 0 and b[i][j] > 0:\n                    b[i][j] = b[i][j] + b[i][j-1] + 1\n    return max(max(row) for row in b)\n",
        "test": "assert     largest_subset([1, 2, 4, 8, 9]) == 1",
        "num_ids": 3610
    },
    {
        "number": 622,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    if n%2==0:\n        return (arr1[int(n/2)] + arr2[int(n/2)])/2\n    else:\n        return arr1[int(n/2)]\n",
        "test": "assert     get_median([1, 2], [3, 4, 5], 2) == 3",
        "num_ids": 2270
    },
    {
        "number": 623,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n    \ndef odd_even(nums):\n    '''\n    Write a function to check if a list contains a particular number.\n    '''\n    return nums[-1] in nums\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function that removes duplicates from a list.\n    '''\n    return set(nums)\n    \ndef compute_average(nums):\n    '''\n    Write a function to compute the average of a list of numbers.\n    '''\n    return sum(nums)/len(nums)\n    \ndef is_palindrome(nums):\n    '''\n    Write a function that checks whether a list is a palindrome.\n    '''\n    return nums[::-1] == nums\n    \ndef remove_stop_words(sentence, stop_words):\n    '''\n    Write a function to remove all the stop words from a sentence.\n    '''\n    return''.join([word for word in sentence.split() if word not in stop_words])\n    \ndef compute_number_to_letters(number):\n    '''\n    Write a function to convert a number to letters.\n    '''\n    letters = []\n    number_string = str(number)\n    if number_string[0] == '0':\n        return ''\n    for char in number_string:\n        letters.append(str(int(char) + 96))\n    return ''.join(letters)\n    \ndef get_integer(string):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    return int(string)\n    \ndef get_letters(number):\n    '''\n    Write a function to convert a number to letters.\n    '''\n    return chr(number - 96)\n    \ndef palindrome_permutation(str):\n    '''\n    Write a function that checks whether a string is a permutation of a palindrome.\n    '''\n    str = str.lower()\n    str_dict = {}\n    for letter in str:\n        if letter in str_dict:\n            str_dict[letter] += 1\n        else:\n            str_dict[letter] = 1\n    count = 0\n    for key in str_dict.keys():\n        if str_dict[key] % 2!= 0:\n            count += 1\n    if count > 1:\n        return False\n    else:\n        return True\n    \ndef get_largest_palindrome(max_num):\n    '''\n    Write a function to find the largest palindrome which is less than a given number.\n    '''\n    for num in range(max_num,0,-1):\n        if palindrome_permutation(str(num)):\n            return num\n    \ndef is_prime(num):\n    '''\n    Write a function that returns True if a number is prime, False otherwise.\n    '''\n    if num == 2:\n        return True\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef fibonacci(num):\n    '''\n    Write a function that returns the nth number in the fibonacci series.\n    '''\n    if num == 0 or num == 1:\n        return num\n    a,b = 0,1\n    for i in range(num - 1):\n        a,b = b,a+b\n    return b\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function that removes duplicates from a list.\n    '''\n    return list(set(nums))\n    \ndef reverse(nums):\n    '''\n    Write a function that reverses a list.\n    '''\n    nums.reverse()\n    return nums\n    \ndef find_duplicates(nums):\n    '''\n    Write a function that returns a list of the indices of all the numbers that appear more than once in the list.\n    '''\n    num_dict = {}\n    for i in range(len(nums)):\n        if nums[i] in num_dict:\n            num_dict[nums[i]] += 1\n        else:\n            num_dict[nums[i]] = 1\n    result = []\n    for key in num_dict:\n        if num_dict[key] > 1:\n            result.append(key)\n    return result\n    \ndef get_fib_seq(n):\n    '''\n    Write a function that returns a list of all fibonacci numbers less than n.\n    '''\n    fib_list = [0,1]\n    while True:\n        if fib_list[-1] > n:\n            break\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list\n    \ndef check_permutation(str1,str2):\n    '''\n    Write a function that returns True if two strings are permutations of each other, False otherwise.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    for char in str1:\n        if str1.count(char)!= str2.count(char):\n            return False\n    return True\n    \ndef get_duplicates(nums):\n    '''\n    Write a function that returns a list of all duplicates in the list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        if nums[i] in nums[i+1:]:\n            result.append(nums[i])\n    return result\n    \ndef is_valid(s):\n    '''\n    Write a function that returns True if a string is a valid variable name, False otherwise.\n    '''\n    if s == 'a' or s == 'e' or s == 'i' or s == 'o' or s == 'u':\n        return False\n    for char in s:\n        if char not in 'abcdefghijklmnopqrstuvwxyz_0123456789':\n            return False\n    return True\n    \ndef is_valid_tld(tld):\n    '''\n    Write a function that returns True if a string is a valid TLD, False otherwise.\n    '''\n    if tld in ['com','net','org','edu','gov','biz','info','mil','name','aero','asia','biz','cat','com','coop','edu','gov','info','int','jobs','mil','mobi','museum','name','net','org','pro','tel','travel']:\n        return True\n    else:\n        return False\n    \ndef get_longest_word(words):\n    '''\n    Write a function that returns the longest word in a list.\n    '''\n    return max(words,key=len)\n    \ndef get_longest_num(nums):\n    '''\n    Write a function that returns the longest number in a list.\n    '''\n    return max(nums,key=len)\n    \ndef is_vowel(char):\n    '''\n    Write a function that returns True if a character is a vowel, False otherwise.\n    '''\n    if char in ['a','e','i','o','u']:\n        return True\n    else:\n        return False\n    \ndef pig_latin(text):\n    '''\n    Write a function that returns the pig latin translation of a string.\n    '''\n    text = text.lower()\n    result = ''\n    if text[0] not in ['a','e','i','o','u']:\n        result = text[1:] + text[0] + 'ay'\n    else:\n        result = text + 'way'\n    return result\n    \ndef is_anagram(str1,str2):\n    '''\n    Write a function that returns True if two strings are anagrams of each other, False otherwise.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    for char in str1:\n        if str1.count(char)!= str2.count(char):\n            return False\n    return True\n    ",
        "test": "assert     nth_nums([2, 3, 4], 2) == [4, 9, 16]",
        "num_ids": 957
    },
    {
        "number": 624,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for letter in string:\n        if letter.islower():\n            return False\n    return True\n",
        "test": "assert     is_upper('foo') == False",
        "num_ids": 760
    },
    {
        "number": 625,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)!= 0:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n    return newList\n    \n",
        "test": "assert     swap_List([1]) == [1]",
        "num_ids": 1562
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Your code goes here\n    return 0.25 * r * r\n",
        "test": "assert     triangle_area(2) == 1.0",
        "num_ids": 891
    },
    {
        "number": 627,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i:\n            return i\n    return end+1\n",
        "test": "assert     find_First_Missing([4,5,1,2,3,0,1]) == 0",
        "num_ids": 4789
    },
    {
        "number": 628,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces('Hello World')     == 'Hello%20World', \"test case 1\"",
        "num_ids": 3087
    },
    {
        "number": 629,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = [number for number in list if number % 2 == 0]\n    return even\n",
        "test": "assert     [x for x in range(10) if x % 2 == 0] == Split(range(10))",
        "num_ids": 1235
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] > 0 and ele[0] < 9 and ele[1] > 0 and ele[1] < 9:\n        sub.append((ele[0]-1, ele[1]))\n        sub.append((ele[0], ele[1]-1))\n        sub.append((ele[0]+1, ele[1]))\n        sub.append((ele[0], ele[1]+1))\n        return sub\n    else:\n        return sub\n",
        "test": "assert     adjac((0, 0), []) == [], 'wrong'",
        "num_ids": 1620
    },
    {
        "number": 631,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.translate(str.maketrans(' ','_'))\n",
        "test": "assert     replace_spaces(\"Hello\") == \"Hello\"",
        "num_ids": 1175
    },
    {
        "number": 632,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n            num_list.append(i)\n    return num_list\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 4303
    },
    {
        "number": 633,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            s = s ^ (arr[i] ^ arr[j])\n    return s\n",
        "test": "assert     pair_xor_Sum([],0) == 0",
        "num_ids": 1572
    },
    {
        "number": 635,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable)\n    # import heapq as hq\n    # result = []\n    # h = []\n    # for item in iterable:\n    #     hq.heappush(h, item)\n    # while h:\n    #     result.append(hq.heappop(h))\n    # return result\n    \n    ",
        "test": "assert     heap_sort([]) == []",
        "num_ids": 2699
    },
    {
        "number": 637,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif sale_amount < actual_cost:\n        return True\n    else:\n        return False\n",
        "test": "assert     noprofit_noloss(23.5,23.5)==True",
        "num_ids": 1130
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = t*9/5 + 32\n    if v < 2:\n        return t\n    elif v < 9:\n        return t + 35/9*(v -2)\n    elif v < 19:\n        return t + 35*(v-9)\n    elif v < 28:\n        return t + 4*(v-19)\n    elif v < 38:\n        return t + 4*(v-28)\n    elif v < 48:\n        return t + 5*(v-38)\n    elif v < 58:\n        return t + 6*(v-48)\n    elif v < 68:\n        return t + 7*(v-58)\n    elif v < 79:\n        return t + 8*(v-68)\n    elif v < 89:\n        return t + 8*(v-79) + 35.5*(v-89)\n    elif v < 102:\n        return t + 9*(v-89) + 14.5*(v-102)\n    elif v < 112:\n        return t + 10*(v-102) + 22.5*(v-112)\n    elif v < 120:\n        return t + 11*(v-112) + 32*(v-120)\n    elif v < 130:\n        return t + 12*(v-120) + 35*(v-130)\n    else:\n        return t + 13*(v-130) + 35.5*(v-138)\ndef temperature_min_max(t):\n    '''\n    Write a function to calculate the minimum and maximum temperature for a given temperature.\n    '''\n    if t < -58:\n        return t\n    elif t < -54:\n        return t + 10\n    elif t < -50:\n        return t + 15\n    elif t < -46:\n        return t + 20\n    elif t < -42:\n        return t + 25\n    elif t < -38:\n        return t + 30\n    elif t < -34:\n        return t + 35\n    elif t < -30:\n        return t + 40\n    elif t < -26:\n        return t + 45\n    elif t < -22:\n        return t + 50\n    elif t < -18:\n        return t + 55\n    elif t < -14:\n        return t + 60\n    elif t < -10:\n        return t + 65\n    elif t < -6:\n        return t + 70\n    elif t < 0:\n        return t + 75\n    elif t < 6:\n        return t + 80\n    elif t < 10:\n        return t + 85\n    elif t < 14:\n        return t + 90\n    elif t < 18:\n        return t + 95\n    elif t < 22:\n        return t + 100\n    elif t < 26:\n        return t + 105\n    elif t < 30:\n        return t + 110\n    elif t < 34:\n        return t + 115\n    elif t < 38:\n        return t + 120\n    elif t < 42:\n        return t + 125\n    elif t < 46:\n        return t + 130\n    elif t < 50:\n        return t + 135\n    elif t < 54:\n        return t + 140\n    elif t < 58:\n        return t + 145\n    elif t < 62:\n        return t + 150\n    elif t < 66:\n        return t + 155\n    elif t < 70:\n        return t + 160\n    elif t < 74:\n        return t + 165\n    elif t < 78:\n        return t + 170\n    elif t < 82:\n        return t + 175\n    elif t < 86:\n        return t + 180\n    elif t < 90:\n        return t + 185\n    elif t < 94:\n        return t + 190\n    elif t < 98:\n        return t + 195\n    elif t < 102:\n        return t + 200\n    elif t < 106:\n        return t + 205\n    elif t < 110:\n        return t + 210\n    elif t < 114:\n        return t + 215\n    elif t < 118:\n        return t + 220\n    elif t < 122:\n        return t + 225\n    elif t < 126:\n        return t + 230\n    elif t < 130:\n        return t + 235\n    elif t < 134:\n        return t + 240\n    elif t < 138:\n        return t + 245\n    elif t < 142:\n        return t + 250\n    elif t < 146:\n        return t + 255\n    elif t < 150:\n        return t + 260\n    elif t < 154:\n        return t + 265\n    elif t < 158:\n        return t + 270\n    elif t < 162:\n        return t + 275\n    elif t < 166:\n        return t + 280\n    elif t < 170:\n        return t + 285\n    elif t < 174:\n        return t + 290\n    elif t < 178:\n        return t + 295\n    elif t < 182:\n        return t + 300\n    elif t < 186:\n        return t + 305\n    elif t < 190:\n        return t + 310\n    elif t < 194:\n        return t + 315\n    elif t < 198:\n        return t + 320\n    elif t < 202:\n        return t + 325\n    elif t < 206:\n        return t + 330\n    elif t < 210:\n        return t + 335\n    elif t < 214:\n        return t + 340\n    elif t < 218:\n        return t + 345\n    elif t < 222:\n        return t + 350\n    elif t < 226:\n        return t + 355\n    elif t < 230:\n        return t + 360\n    elif t < 234:\n        return t + 365\n    elif t < 238:\n        return t + 370\n    elif t < 242:\n        return t + 375\n    elif t < 246:\n        return t + 380\n    elif t < 250:\n        return t + 385\n    elif t < 254:\n        return t + 390\n    elif t < 258:\n        return t + 395\n    elif t < 262:\n        return t + 400\n    elif t < 266:\n        return t + 405\n    elif t < 270:\n        return t + 410\n    elif t < 274:\n        return t + 415\n    elif t < 278:\n        return t + 420\n    elif t < 282:\n        return t + 425\n    elif t < 286:\n        return t + 430\n    elif t < 290:\n        return t + 435\n    elif t < 294:\n        return t + 440\n    elif t < 298:\n        return t + 445\n    elif t < 302:\n        return t + 450\n    elif t < 306:\n        return t + 455\n    elif t < 310:\n        return t + 460\n    elif t < 314:\n        return t + 465\n    elif t < 318:\n        return t + 470\n    elif t < 322:\n        return t + 475\n    elif t < 326:\n        return t + 480\n    elif t < 330:\n        return t + 485\n    elif t < 334:\n        return t + 490\n    elif t < 338:\n        return t + 495\n    elif t < 342:\n        return t + 500\n    elif t < 346:\n        return t + 505\n    elif t < 350:\n        return t + 510\n    elif t < 354:\n        return t + 515\n    elif t < 358:\n        return t + 520\n    elif t < 362:\n        return t + 525\n    elif t < 366:\n        return t + 530\n    elif t < 370:\n        return t + 535\n    elif t < 374:\n        return t + 540\n    elif t < 378:\n        return t + 545\n    elif t < 382:\n        return t + 550\n    elif t < 386:\n        return t + 555\n    elif t < 390:\n        return t + 560\n    elif t < 394:\n        return t + 565\n    e",
        "test": "assert     wind_chill(2,0) == 32.0",
        "num_ids": 2916
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names\n    return sum(len(name) for name in sample_names if name[0].islower())\n",
        "test": "assert     sample_nam(['a','b']) == 2",
        "num_ids": 7694
    },
    {
        "number": 640,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('[()]','',items)\n",
        "test": "assert     remove_parenthesis('hello (world)') == 'hello world'",
        "num_ids": 4380
    },
    {
        "number": 641,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * n - 1\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 1060
    },
    {
        "number": 643,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0].isalpha() and text[len(text)-1].isalpha():\n        if 'z' not in text[1:len(text)-1]:\n            return True\n    return False\n",
        "test": "assert     text_match_wordz_middle('at the end of the wordz at the end of the word') == False",
        "num_ids": 1146
    },
    {
        "number": 644,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    return input\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5], 5) == [5,4,3,2,1], \"The answer is wrong\"",
        "num_ids": 1877
    },
    {
        "number": 720,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "test": "assert     add_dict_to_tuple((1,2), {'x': 3})!= (1,2,{'y': 3})",
        "num_ids": 1994
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    dp = [[0 for i in xrange(cols)] for j in xrange(rows)]\n    \n    for i in xrange(rows):\n        dp[i][0] = cost[i][0]\n    for j in xrange(cols):\n        dp[0][j] = cost[0][j]\n    \n    for i in xrange(1, rows):\n        for j in xrange(1, cols):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[rows - 1][cols - 1] / (rows * cols)\n    \ncost = [[1,3,5,8],\n        [4,2,1,7],\n        [6,4,3,2],\n        [5,6,1,3]]\nprint maxAverageOfPath(cost",
        "test": "assert     maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9) / 9",
        "num_ids": 2485
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students.keys():\n        if students[student][0] > h and students[student][1] > w:\n            filtered_students[student] = students[student]\n    return filtered_students\n",
        "test": "assert     filter_data({'A':(4.5,1),'B':(2,2)},0.9,0.6) == {'A':(4.5,1),'B':(2,2)}",
        "num_ids": 3302
    },
    {
        "number": 723,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n = len(nums1)\n    res = 0\n    for i in range(n):\n        if nums1[i] == nums2[i]:\n            res += 1\n    return res\n",
        "test": "assert     count_same_pair([], []) == 0",
        "num_ids": 3709
    },
    {
        "number": 724,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # base_power_sum = 0\n    # while power >= 0:\n    #     # print(base**power)\n    #     base_power_sum += (base**power) % 10\n    #     power -= 1\n    # return base_power_sum\n    return sum(int(digit)**power for digit in str(base))\n",
        "test": "assert     power_base_sum(2, 1) == 2",
        "num_ids": 1045
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    reg = re.compile(r'\\\"(.*?)\\\"')\n    return re.findall(reg, text1)\n",
        "test": "assert     extract_quotation('\"g\"') == ['g']",
        "num_ids": 1519
    },
    {
        "number": 726,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) <= 1:\n        return test_tup\n    else:\n        return tuple([test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1)])\n",
        "test": "assert     multiply_elements(()) == ()",
        "num_ids": 1397
    },
    {
        "number": 728,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i + j for i, j in zip(lst1, lst2)]\n",
        "test": "assert     sum_list([],[])             == []",
        "num_ids": 1575
    },
    {
        "number": 730,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(k for k, _ in groupby(nums))\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 3941
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # radius = float(raw_input('Enter radius: '))\n    # height = float(raw_input('Enter height: '))\n    #print(r,h)\n    area_cone = math.pi * r**2 * h/3\n    return area_cone\n",
        "test": "assert     lateralsurface_cone(1,0) == 0",
        "num_ids": 1638
    },
    {
        "number": 732,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)\n",
        "test": "assert     replace_specialchar('')             == ''",
        "num_ids": 1567
    },
    {
        "number": 733,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n",
        "test": "assert     find_first_occurrence(range(0, 200), -1) == -1",
        "num_ids": 2023
    },
    {
        "number": 734,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum(arr)\n",
        "test": "assert     sum_Of_Subarray_Prod([1, 2, 3]) == 6",
        "num_ids": 1925
    },
    {
        "number": 735,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n ^ (n >> 1)\n    m = (m & ~0x55555555) | ((m & 0x55555555) << 1)\n    return m\n",
        "test": "assert     set_middle_bits(0) == 0",
        "num_ids": 1062
    },
    {
        "number": 736,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    while i < len(a) and a[i] <= x:\n        i += 1\n    return i\n",
        "test": "assert left_insertion([1,2,3,4,5], 6) == 5",
        "num_ids": 1016
    },
    {
        "number": 737,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = re.findall(regex,string)\n    return bool(string)\n",
        "test": "assert     check_str(\"hell\") == False",
        "num_ids": 844
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return (1*n)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 771
    },
    {
        "number": 739,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    start = int(math.ceil((math.log(n)/math.log(2)) + 1))\n    triangle = int(math.pow(n,0.5))\n    return triangle * (triangle + 1) / 2\n",
        "test": "assert     find_Index(3)==1",
        "num_ids": 2748
    },
    {
        "number": 740,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n",
        "test": "assert     tuple_to_dict((1, 2)) == {1: 2}",
        "num_ids": 3028
    },
    {
        "number": 741,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    c = s[0]\n    for i in range(len(s)-1) :\n        if s[i+1]!= c :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('ABC')==False,     'Fail to pass: all_Characters_Same(\"ABC\")'",
        "num_ids": 925
    },
    {
        "number": 742,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2/6\n",
        "test": "assert     area_tetrahedron(1) == (1.0/6.0)",
        "num_ids": 911
    },
    {
        "number": 743,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1,2,3,4,5], 0) == [1,2,3,4,5]",
        "num_ids": 1877
    },
    {
        "number": 744,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n    \ndef main():\n    test_tuple = (1,2,3,None)\n    print(check_none(test_tuple))\n",
        "test": "assert     check_none((1,))    == False",
        "num_ids": 1013
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: (x%int(str(x)[0])==0) and (x%int(str(x)[-1])==0), range(startnum, endnum)))\n    \ndef is_prime(num):\n    '''\n    Write a function that checks if a number is prime or not. https://www.w3resource.com/python-exercises/number-range/python-number-range-exercise-10.php\n    '''\n    if num > 1:\n        if num > 2:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    return False\n            return True\n    return False\n",
        "test": "assert     divisible_by_digits(31, 33) == []",
        "num_ids": 3818
    },
    {
        "number": 746,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r*r*a/360\n",
        "test": "assert     sector_area(5,361) == None",
        "num_ids": 1116
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #return the length of the longest common subsequence of the three given strings\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    #function to find the LCS of a string and a substring of same length\n    def lcs(X, Y):\n        return len(X) if len(X) > len(Y) else len(Y)\n",
        "test": "assert     lcs_of_three('TTGC', 'GCAT', 'GCA') == None",
        "num_ids": 4609
    },
    {
        "number": 748,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if len(str1) == 0:\n        return ''\n    elif len(str1) == 1:\n        return str1\n    elif len(str1) == 2:\n        return str1[0].upper() + str1[1]\n    else:\n        str1 = str1.split()\n        temp = []\n        for i in str1:\n            if i[0].isupper():\n                temp.append(i.capitalize())\n            else:\n                temp.append(i)\n        return''.join(temp)\n",
        "test": "assert     capital_words_spaces('Hello') == 'Hello'",
        "num_ids": 2540
    },
    {
        "number": 749,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(n) for n in x.split('.')])\n",
        "test": "assert     sort_numeric_strings([]) == []",
        "num_ids": 3960
    },
    {
        "number": 750,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if isinstance(test_list, list):\n        test_list.append(test_tup)\n    else:\n        raise TypeError(\"List expected.\")\n",
        "test": "assert     add_tuple(['a', 'b', 'c'], ('a', 'b', 'c')) == None",
        "num_ids": 1492
    },
    {
        "number": 751,
        "max_answer_num": 29,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if i == 1:\n        return arr[0] < arr[1]\n    if i == 2:\n        return arr[0] < arr[1] and arr[1] < arr[2]\n    if i == 3:\n        return arr[1] < arr[2]\n    return check_min_heap_helper(arr, i/2) and check_min_heap_helper(arr, i/2 + 1)\n",
        "test": "assert     check_min_heap_helper([], 0) == True",
        "num_ids": 1790
    },
    {
        "number": 752,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = [0, 1, 1]\n    for i in range(n):\n        a.append(a[i] + a[i-1])\n    return a[n]\n",
        "test": "assert     jacobsthal_num(2)     == 1",
        "num_ids": 1100
    },
    {
        "number": 753,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        print(\"K is greater than the length of tuple list\")\n        return\n    return min(test_list, key=lambda x: x[1])\n",
        "test": "assert     min_k([('a',1),('a',2),('b',3),('b',4)],1) == ('a',1)",
        "num_ids": 3748
    },
    {
        "number": 754,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            res.append(l1[i])\n    return res\n",
        "test": "assert     extract_index_list([1,2,3], [1,2,3], [1,2,3]) == [1,2,3]",
        "num_ids": 2872
    },
    {
        "number": 755,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return None\n    if len(numbers) == 2:\n        return min(numbers)\n    p = sorted(numbers)\n    return p[1]\n",
        "test": "assert     second_smallest([0]) == None",
        "num_ids": 1129
    },
    {
        "number": 756,
        "max_answer_num": 23,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one('ab') == True",
        "num_ids": 986
    },
    {
        "number": 757,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs([\"cat\", \"dog\", \"mouse\"]) == 0",
        "num_ids": 3684
    },
    {
        "number": 758,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1={}\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n            dict1[tuple(i)]=list1.count(i)\n    return dict1\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 5995
    },
    {
        "number": 759,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    return re.match(r'^[+-]?(0|[1-9][0-9]*)(\\.\\d{1,2})?$', num) is not None\n",
        "test": "assert     is_decimal('1.23e+2') == False",
        "num_ids": 1153
    },
    {
        "number": 760,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) > len(set(arr)):\n        return False\n    else:\n        return True\n",
        "test": "assert     unique_Element([1, 2, 3, 1, 1]) == False",
        "num_ids": 990
    },
    {
        "number": 762,
        "max_answer_num": 32,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    return True\n",
        "test": "assert     check_monthnumber_number(13)    ==    False",
        "num_ids": 1357
    },
    {
        "number": 763,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n    return min_diff\n",
        "test": "assert     find_min_diff([5,2,3,4,1],5) == 1",
        "num_ids": 1685
    },
    {
        "number": 764,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # print('str=',str)\n    return len(str)\n    # pass\n",
        "test": "assert     number_ctr('') == 0",
        "num_ids": 2390
    },
    {
        "number": 765,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n//2 in [0,1,2,3,4,6,8,9,12,13,14,16,18,19,20,22,23,24,25,26,27,28,29,30,32,33,34,36,37,38,39,40,42,43,44,45,46,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n",
        "test": "assert     is_polite(1) == 1",
        "num_ids": 3204
    },
    {
        "number": 766,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n",
        "test": "assert     pair_wise([]) ==     []",
        "num_ids": 1906
    },
    {
        "number": 767,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    map = {}\n    for i in arr:\n        if sum-i in map:\n            return map[sum-i]+1\n        map[i] = 1\n    return 0\n",
        "test": "assert     get_pairs_count([1, 2, 3, 4, 6, 5], 5) == 2, \"function is broken\"",
        "num_ids": 1757
    },
    {
        "number": 769,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n",
        "test": "assert     Diff([1,2,3,4,5],[1,2,3]) == [4,5]",
        "num_ids": 1061
    },
    {
        "number": 770,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total_sum = 0\n    for i in range(n) :\n        total_sum += (i * (3 * i + 1) * (2 * i + 1)) / 6\n    return total_sum\n",
        "test": "assert     ( odd_num_sum(1) == 0 )",
        "num_ids": 988
    },
    {
        "number": 771,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for ch in exp:\n        if ch in '({[':\n            stack.append(ch)\n        elif ch in ')}]':\n            if not stack:\n                return False\n            popped = stack.pop()\n            if ch == ')' and popped!= '(':\n                return False\n            elif ch == ']' and popped!= '[':\n                return False\n            elif ch == '}' and popped!= '{':\n                return False\n    if stack:\n        return False\n    return True\n    \ndef check_expression_2(exp):\n    '''\n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 1:\n        return False\n    stack = deque()\n    mapping = {')':'(', '}':'{', ']':'['}\n    for ch in exp:\n        if ch in '({[':\n            stack.append(ch)\n        elif ch in ')}]':\n            if not stack:\n                return False\n            else:\n                popped = stack.pop()\n                if mapping[ch]!= popped:\n                    return False\n    if stack:\n        return False\n    return True\n",
        "test": "assert     check_expression(\"\") == True",
        "num_ids": 1531
    },
    {
        "number": 772,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    splitted_str = test_str.split(' ')\n    \n    return''.join([word for word in splitted_str if len(word)!= K])\n",
        "test": "assert     remove_length('longby', 0)    == 'longby'",
        "num_ids": 1254
    },
    {
        "number": 773,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=re.findall(pattern,text)\n    if(len(occurance)!=0):\n        print(\"\\nPattern %s has occured %s times in %s\"%(pattern,len(occurance),text))\n        for i in occurance:\n            print(\"\\tPattern found at index %s\"%(text.index(i)))\n    else:\n        print(\"\\nPattern %s not found in %s\"%(pattern,text))\n    \ndef occurance_string(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=re.findall(pattern,text)\n    if(len(occurance)!=0):\n        print(\"\\nPattern %s has occured %s times in %s\"%(pattern,len(occurance),text))\n    else:\n        print(\"\\nPattern %s not found in %s\"%(pattern,text))\n    \n",
        "test": "assert     occurance_substring(\"abc\", \"d\") == None",
        "num_ids": 3348
    },
    {
        "number": 775,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    assert type(nums) is list\n    if nums == []:\n        return True\n    if type(nums[0]) is list:\n        return odd_position(nums[0])\n    if type(nums[0]) is int:\n        return nums[0]%2 == 1\n    return False\n",
        "test": "assert     ( odd_position([]) == True )",
        "num_ids": 1193
    },
    {
        "number": 776,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(0, len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n            vowel_count += 1\n    return vowel_count\n",
        "test": "assert     count_vowels('gfhjk') == 0",
        "num_ids": 3447
    },
    {
        "number": 777,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "test": "assert     find_sum([]) == 0",
        "num_ids": 3292
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for k, g in groupby(list1):\n        new_list.append([list(g)])\n    return new_list\n",
        "test": "assert ",
        "num_ids": 6299
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create empty dictionary\n    dictionary = {}\n    # Iterate through list and create tuples of list and number of occurrences\n    for item in list1:\n        if item not in dictionary:\n            dictionary[item] = 1\n        else:\n            dictionary[item] += 1\n    return dictionary\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 3033
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = []\n    for x in test_list:\n        for i in range(1,len(x)):\n            combs += combinations(x,i)\n    return combs\n",
        "test": "assert     find_combinations([(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8)]) == [((1,2),3),((1,3),4),((1,4),5),((1,5),6),((2,3),4),((2,4),5),((2,5),6),((3,4),5),((3,5),6),((4,5),6),((5,6),7),((6,7),8)]",
        "num_ids": 5103
    },
    {
        "number": 781,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    num = 1\n    if n == 1 : \n        return num\n    if n == 2 : \n        return 2\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            num+=1\n    return num\n",
        "test": "assert     count_divisors(0)    == 1",
        "num_ids": 1054
    },
    {
        "number": 782,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    if arr == []:\n        return 0\n    else:\n        return sum(arr)\n",
        "test": "assert     odd_length_sum([]) == 0",
        "num_ids": 1930
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert the rgb values to their respective ranges.\n    rgb_range = 255.0\n    red = r / rgb_range\n    green = g / rgb_range\n    blue = b / rgb_range\n    max_of_rgb = max(red, green, blue)\n    min_of_rgb = min(red, green, blue)\n    # Determine the value of hue, saturation and brightness\n    if max_of_rgb == min_of_rgb:\n        hue = 0\n    elif max_of_rgb == red:\n        hue = 60 * (((green - blue) / (max_of_rgb - min_of_rgb)) % 6)\n    elif max_of_rgb == green:\n        hue = 60 * (((blue - red) / (max_of_rgb - min_of_rgb)) + 2)\n    elif max_of_rgb == blue:\n        hue = 60 * (((red - green) / (max_of_rgb - min_of_rgb)) + 4)\n    # Now determine the saturation and brightness\n    if max_of_rgb == 0:\n        sat = 0\n    else:\n        sat = 1 - min_of_rgb / max_of_rgb\n    if sat == 0:\n        val = max_of_rgb\n    else:\n        val = max_of_rgb * (1 - min_of_rgb / 255)\n    return hue, sat, val\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1588
    },
    {
        "number": 784,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in list1:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n    return even * odd\n",
        "test": "assert     mul_even_odd([1]) == 1",
        "num_ids": 1413
    },
    {
        "number": 785,
        "max_answer_num": 37,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    import re\n    parsed_tuple = re.findall(r'\\d+', test_str)\n    return tuple(map(int, parsed_tuple))\n",
        "test": "assert     (0,0,0) == tuple_str_int('0,0,0')",
        "num_ids": 1246
    },
    {
        "number": 786,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    i = len(a)-1\n    j = i -1\n    while(i>0 and a[i-1]>x):\n        a[i], a[j] = a[j], a[i]\n        i=i-1\n        j=j-1\n    return i\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    i = len(a)-1\n    j = i -1\n    while(i>0 and a[i-1]>x):\n        a[i], a[j] = a[j], a[i]\n        i=i-1\n        j=j-1\n    return i\n",
        "test": "assert     right_insertion([1,3,5], 4) == 2",
        "num_ids": 1138
    },
    {
        "number": 787,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*)(b){3}')\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\nprint(text_match_three(\"abbb\"))\nprint(text_match_three(\"ababbb\"))\nprint(text_match_three(\"ababbbb\"))\nprint(text_match_three(\"bbbbbbb\"))\n",
        "test": "assert     text_match_three('ababbb')",
        "num_ids": 1225
    },
    {
        "number": 788,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = []\n    for i in range(len(test_list)):\n        if test_list[i] in test_str:\n            test_tuple.append(test_list[i])\n    return tuple(test_tuple)\n",
        "test": "assert     new_tuple(['test', '1'], 'test1') == ('test', '1'), 'new tuple does not work'",
        "num_ids": 1376
    },
    {
        "number": 790,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if (i + 1) % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert even_position([1, 3, 4, 6, 8, 10, 11]) is False",
        "num_ids": 1322
    },
    {
        "number": 791,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for x in test_tup:\n        if isinstance(x, tuple):\n            remove_nested(x)\n        else:\n            pass\n    return test_tup\n",
        "test": "assert     remove_nested(()) == ()",
        "num_ids": 3710
    },
    {
        "number": 792,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) is list:\n            count += 1\n    return count\n",
        "test": "assert     count_list([[0]]) == 1,     'incorrect count'",
        "num_ids": 1299
    },
    {
        "number": 793,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + (high - low)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n",
        "test": "assert         last([],3)         == -1",
        "num_ids": 3398
    },
    {
        "number": 794,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    p = re.compile(r'a.*b$')\n    if p.match(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_starta_endb(\"ab\") == True",
        "num_ids": 3072
    },
    {
        "number": 796,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "test": "assert     return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6",
        "num_ids": 925
    },
    {
        "number": 797,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n*(n+1)/2\n",
        "test": "assert     (sum_odd(1) == 1)",
        "num_ids": 850
    },
    {
        "number": 798,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([1,2,3]) == 6, 'incorrect implementation of _sum'",
        "num_ids": 671
    },
    {
        "number": 799,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if not isinstance(n,int) or not isinstance(d,int):\n        return None\n    if n<0 or d<0:\n        return None\n    n=bin(n)[2:]\n    n=n[-32:]\n    if d>len(n):\n        return None\n    else:\n        n=n[-d:]+n[:-d]\n        return int(n,2)\n",
        "test": "assert 00000000000000000000000000000000000000000000000 == left_rotate(0b00000000000000000000000000000000000000000000000,1)",
        "num_ids": 962
    },
    {
        "number": 800,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # remove the leading and trailing space from the string\n    return text.strip()\n",
        "test": "assert     remove_all_spaces('') == ''",
        "num_ids": 1122
    },
    {
        "number": 801,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or x==z or y==z:\n        return 2\n    else:\n        return 0\n",
        "test": "assert         test_three_equal(0, 1, 2) == 0",
        "num_ids": 927
    },
    {
        "number": 802,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    length = len(arr)\n    # print(length)\n    start = 0\n    end = length - 1\n    rotate = 0\n    while start <= end:\n        if arr[start] > arr[end]:\n            rotate += 1\n            end -= 1\n        else:\n            start += 1\n    return rotate\n",
        "test": "assert     count_rotation([1, 2, 3, 4, 5, 6, 7]) == 0",
        "num_ids": 1744
    },
    {
        "number": 803,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    x = int(math.sqrt(n))\n    if (x*x == n) :\n        return True\n    else :\n        return False\n",
        "test": "assert     is_perfect_square(1) == True",
        "num_ids": 1086
    },
    {
        "number": 804,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product*i\n    if product%2==0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([2,2,2,2]) == True, \"Test 1 failed\"",
        "num_ids": 1215
    },
    {
        "number": 805,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # sums = [sum(x) for x in lists]\n    # highest_sum = max(sums)\n    # highest_sum_index = sums.index(highest_sum)\n    # return lists[highest_sum_index]\n    def max_sum(lists):\n        sums = [sum(x) for x in lists]\n        max_sum = max(sums)\n        return [x for (i, x) in enumerate(lists) if sums[i] == max_sum][0]\n    return max_sum(lists)\n",
        "test": "assert     max_sum_list([[1, 2, 3], [4, 5, 6]]) == [4, 5, 6]",
        "num_ids": 2659
    },
    {
        "number": 806,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    max_run = 1\n    cur_run = 1\n    prev_char = test_str[0]\n    for char in test_str[1:]:\n        if char.isupper():\n            cur_run += 1\n        else:\n            if prev_char.isupper():\n                max_run = max(max_run, cur_run)\n            else:\n                cur_run = 1\n            prev_char = char\n    return max_run\n",
        "test": "assert     max_run_uppercase('Aa') == 1",
        "num_ids": 1645
    },
    {
        "number": 807,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert     first_odd([1,2,3,4,5]) == 1",
        "num_ids": 3040
    },
    {
        "number": 808,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_K(('A', 4, '1'), 5) == False",
        "num_ids": 1327
    },
    {
        "number": 809,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0,len(test_tup1)):\n        if test_tup2[i]<test_tup1[i]:\n            return True\n        else:\n            return False\ndef check_smaller_2(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0,len(test_tup1)):\n        if test_tup2[i]<test_tup1[i]:\n            return True\n        else:\n            continue\n    return False\ndef equal_in_list(test_tup,l):\n    '''\n    Write a function to check if the first tuple is equal to any element of a given list.\n    '''\n    for i in l:\n        if test_tup==i:\n            return True\n        else:\n            return False\n",
        "test": "assert     check_smaller(('a', 2, 3), ('a', 1, 2)) == False",
        "num_ids": 1707
    }
]