[
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    return [i for i in l1 if i in l2]\n",
        "test": "assert     list(similar_elements([1,2,3],[1,2,3])) == [1,2,3]",
        "num_ids": 1498
    },
    {
        "number": 3,
        "max_answer_num": 25,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==2:\n        return False\n    elif n==1:\n        return False\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return True\n    return False\n",
        "test": "assert     is_not_prime(0) == False",
        "num_ids": 994
    },
    {
        "number": 4,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums=sorted(nums,reverse=True)\n    print(nums[0:n])\n    return nums[0:n]\n",
        "test": "assert     hq.nlargest(1, [1, 2, 3, 4, 5]) == [5]",
        "num_ids": 1947
    },
    {
        "number": 6,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0\n",
        "test": "assert     is_Power_Of_Two( 14 ) == False",
        "num_ids": 920
    },
    {
        "number": 7,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w+', text)\n",
        "test": "assert     find_char_long('') == []",
        "num_ids": 2796
    },
    {
        "number": 8,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n",
        "test": "assert     [i**2 for i in [1, 2, 3]] == [1, 4, 9]",
        "num_ids": 1077
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #An optimal solution will be the number of characters in the string\n    #We can assume that the string is not empty and will always have equal characters\n    length = len(str)\n    if length == 1:\n        return 0\n    else:\n        first = str[0]\n        rotation_count = 0\n        for i in range(1,length):\n            if first == str[i]:\n                rotation_count = rotation_count + 1\n        return rotation_count\n",
        "test": "assert     find_Rotations('abcda') == 1",
        "num_ids": 1651
    },
    {
        "number": 11,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    if s[0] == ch:\n        del s[0]\n    if s[-1] == ch:\n        del s[-1]\n    return ''.join(s)\n",
        "test": "assert     remove_Occ('abcdef','a')=='bcdef', 'incorrect'",
        "num_ids": 1189
    },
    {
        "number": 12,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    row_sum = [sum(M[i]) for i in range(n)]\n    res = []\n    for i in range(n):\n        res.append([row_sum[i], M[i]])\n    res.sort()\n    return [r[1] for r in res]\n",
        "test": "assert     [sort_matrix([[1, 1, 1], [2, 2, 2], [3, 3, 3]]), [[3, 3, 3], [1, 1, 1], [2, 2, 2]]]",
        "num_ids": 2416
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/6\n",
        "test": "assert     find_Volume(3,3,4) == 6, \"Case 4 failed\"",
        "num_ids": 879
    },
    {
        "number": 16,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    while True:\n        index = re.search('_+',text)\n        if index == None:\n            return True\n        else:\n            if index.start() == 0:\n                text = text[index.end():]\n            else:\n                text = text[:index.start() - 1] + text[index.end():]\n    return False\n",
        "test": "assert     text_lowercase_underscore(\"is_this_a_test\")",
        "num_ids": 3041
    },
    {
        "number": 17,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "test": "assert     square_perimeter(4) == 16",
        "num_ids": 546
    },
    {
        "number": 18,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [] \n    for x in string: \n        list1.append(x) \n    return list1\ndef fill_alphabets(character_list, n):\n    alphabets = []\n    for i in range(n):\n        alphabets.append(character_list[i])\n    return alphabets\ndef find_julius(character_list, alphabets):\n    julius_pos = []\n    for i in range(len(character_list)):\n        if character_list[i] in alphabets:\n            julius_pos.append(i)\n    return julius_pos\ndef find_julius_second(julius_pos, alphabet, character_list):\n    julius_pos_second = []\n    for i in range(len(julius_pos)):\n        for j in range(len(alphabet)):\n            if julius_pos[i] == alphabet[j]:\n                julius_pos_second.append(j)\n    return julius_pos_second\ndef print_julius_string(julius_pos, character_list, julius_pos_second, length_character_list):\n    julius_string = \"\"\n    for i in range(len(julius_pos)):\n        julius_string += character_list[julius_pos[i]]\n    return julius_string\ndef julius_cipher(character_list, alphabets, length_character_list):\n    julius_pos = []\n    for i in range(len(character_list)):\n        if character_list[i] in alphabets:\n            julius_pos.append(i)\n    return julius_pos\ndef julius_cipher_second(julius_pos, alphabet, length_character_list):\n    julius_pos_second = []\n    for i in range(len(julius_pos)):\n        for j in range(len(alphabet)):\n            if julius_pos[i] == alphabet[j]:\n                julius_pos_second.append(j)\n    return julius_pos_second\ndef print_julius_string_second(julius_pos_second, length_character_list, character_list):\n    julius_string_second = \"\"\n    for i in range(len(julius_pos_second)):\n        julius_string_second += character_list[julius_pos_second[i]]\n    return julius_string_second\ndef convert_string_to_int(string):\n    int_list = []\n    for i in range(len(string)):\n        int_list.append(ord(string[i]))\n    return int_list\ndef convert_int_to_string(int_list):\n    string = \"\"\n    for i in range(len(int_list)):\n        string += chr(int_list[i])\n    return string\ndef make_string_list(string):\n    string_list = []\n    for i in range(len(string)):\n        string_list.append(string[i])\n    return string_list\ndef julius_decrypt(character_list, alphabets, length_character_list):\n    julius_pos = []\n    for i in range(len(character_list)):\n        if character_list[i] in alphabets:\n            julius_pos.append(i)\n    return julius_pos\ndef julius_decrypt_second(julius_pos, alphabet, length_character_list):\n    julius_pos_second = []\n    for i in range(len(julius_pos)):\n        for j in range(len(alphabet)):\n            if julius_pos[i] == alphabet[j]:\n                julius_pos_second.append(j)\n    return julius_pos_second\ndef print_julius_string_second(julius_pos_second, length_character_list, character_list):\n    julius_string_second = \"\"\n    for i in range(len(julius_pos_second)):\n        julius_string_second += character_list[julius_pos_second[i]]\n    return julius_string_second\ndef julius_decrypt_third(string, alphabets, length_character_list):\n    julius_pos = []\n    for i in range(len(string)):\n        if string[i] in alphabets:\n            julius_pos.append(i)\n    return julius_pos\ndef julius_decrypt_fourth(julius_pos, alphabet, length_character_list):\n    julius_pos_second = []\n    for i in range(len(julius_pos)):\n        for j in range(len(alphabet)):\n            if julius_pos[i] == alphabet[j]:\n                julius_pos_second.append(j)\n    return julius_pos_second\ndef print_julius_string_third(julius_pos_second, length_character_list, character_list):\n    julius_string_second = \"\"\n    for i in range(len(julius_pos_second)):\n        julius_string_second += character_list[julius_pos_second[i]]\n    return julius_string_second\ndef shift_alphabets(alphabet, length_alphabet):\n    alphabets_temp = []\n    for i in range(length_alphabet):\n        alphabets_temp.append(alphabet[(i+1)%length_alphabet])\n    return alphabets_temp\ndef find_alphabets(character_list):\n    alphabets = []\n    for i in range(len(character_list)):\n        if character_list[i].isalpha():\n            alphabets.append(character_list[i])\n    return alphabets\ndef list_of_alphabets(length_alphabets):\n    alphabets = []\n    for i in range(length_alphabets):\n        alphabets.append(chr(97+i))\n    return alphabets\ndef shift_string(julius_string, julius_pos_second, julius_pos, alphabets, julius_pos_second_first, julius_pos_second_second, length_character_list):\n    julius_string_second = \"\"\n    for i in range(len(julius_pos_second)):\n        julius_string_second += julius_string[julius_pos_second[i]]\n    julius_string_second_first = \"\"\n    for i in range(len(julius_pos_second_first)):\n        julius_string_second_first += julius_string[julius_pos_second_first[i]]\n    julius_string_second_second = \"\"\n    for i in range(len(julius_pos_second_second)):\n        julius_string_second_second += julius_string[julius_pos_second_second[i]]\n    length_julius_string = len(julius_string_second_second)\n    julius_string_second_third = julius_string_second[0:length_julius_string/2]\n    julius_string_second_fourth = julius_string_second[length_julius_string/2:]\n    julius_string_second = julius_string_second_first + julius_string_second_second + julius_string_second_third + julius_string_second_fourth\n    if len(julius_string_second)%2 == 1:\n        julius_string_second = julius_string_second[0:len(julius_string_second)-1]\n    julius_string_second_first = julius_string_second_first[0:length_julius_string/2]\n    julius_string_second_second = julius_string_second_second",
        "test": "assert     str_to_list(\"abcdefghijklmnopqrstuvwxyz\") == list(\"abcdefghijklmnopqrstuvwxyz\"), \"Str_to_list() is not correct\"",
        "num_ids": 3711
    },
    {
        "number": 19,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    d = {}\n    for x in arraynums:\n        if x in d:\n            return True\n        d[x] = 1\n    return False\n",
        "test": "assert not test_duplicate([1,2,3,4])",
        "num_ids": 1581
    },
    {
        "number": 20,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    temp = x\n    if len(str(x)) == 2:\n        temp = x % 10\n    if temp in [2,3,4]:\n        return False\n    else:\n        return True\n",
        "test": "assert     is_woodall(94) == False",
        "num_ids": 3154
    },
    {
        "number": 56,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revNum = str(num)[::-1]\n    if num - int(revNum) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     rev(12341) == False",
        "num_ids": 873
    },
    {
        "number": 57,
        "max_answer_num": 30,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in arr : \n        if i > max_num : \n            max_num = i\n    return max_num\n",
        "test": "assert     find_Max_Num([0, 0, 0, 0]) == 0",
        "num_ids": 1528
    },
    {
        "number": 58,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    elif x==0 and y!=0:\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(1,0) == False",
        "num_ids": 1137
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a,b = 1,1\n    for i in range(1,n):\n        a,b = b,a+b\n    return a\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 862
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if sum(map(int,s[i:j]))==j-i:\n                count+=1\n    return count\n",
        "test": "assert     count_Substrings('999')     == 0",
        "num_ids": 2805
    },
    {
        "number": 62,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    else:\n        return min(xs)\n",
        "test": "assert     smallest_num([4,3,5,2,10]) == 2",
        "num_ids": 1469
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0,len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff = test_list[i]-test_list[j]\n            max_diff = max(max_diff,diff)\n    return max_diff\n",
        "test": "assert     max_difference( (10,9,8,7,6,5,4,3,2,1) ) == 9",
        "num_ids": 5988
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjects = sorted(subjectmarks,key=lambda x:x[1])\n    return subjects\n",
        "test": "assert     subject_marks([])     == [], \"Error in the function\"",
        "num_ids": 2532
    },
    {
        "number": 65,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # if the data is a list\n    if isinstance(data_list, list):\n        # return the sum of all the elements in the list\n        return sum(recursive_list_sum(item) for item in data_list)\n    # if the data is a number\n    elif isinstance(data_list, int):\n        # return the data\n        return data_list\n    # if the data is a string\n    elif isinstance(data_list, str):\n        # return the data\n        return data_list\n    # if the data is None\n    elif data_list == None:\n        # return 0\n        return 0\n",
        "test": "assert     recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 2974
    },
    {
        "number": 66,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    #initialize the counter\n    pos_count = 0\n    for i in list:\n        #condition to check for positive numbers\n        if i > 0:\n            pos_count += 1\n    return pos_count\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 1291
    },
    {
        "number": 67,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n",
        "test": "assert     bell_number(1)    == 1",
        "num_ids": 1041
    },
    {
        "number": 68,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A==sorted(A) or A==sorted(A, reverse=True):\n        return True\n    else:\n        return False\ndef is_strictly_increasing(A):\n    '''\n    Write a python function to check whether the given array is strictly increasing or not.\n    '''\n    if A==sorted(A):\n        for i in range(1, len(A)):\n            if A[i]<A[i-1]:\n                return False\n        return True\n    else:\n        return False\ndef is_strictly_decreasing(A):\n    '''\n    Write a python function to check whether the given array is strictly decreasing or not.\n    '''\n    if A==sorted(A, reverse=True):\n        for i in range(1, len(A)):\n            if A[i]>A[i-1]:\n                return False\n        return True\n    else:\n        return False\ndef is_balanced(A):\n    '''\n    Write a python function to check whether the given array is balanced or not.\n    '''\n    if len(A)%2==0:\n        for i in range(0, len(A), 2):\n            if A[i]!=A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(0, len(A)-1, 2):\n            if A[i]!=A[i+1]:\n                return False\n        return True\ndef is_rotated(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)==len(B):\n        for i in range(0, len(A)):\n            if A[i]!=B[i]:\n                return False\n        return True\n    else:\n        return False\ndef is_anagram(A, B):\n    '''\n    Write a python function to check whether the given array is anagram or not.\n    '''\n    if len(A)==len(B):\n        a = sorted(A)\n        b = sorted(B)\n        if a==b:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_palindrome(A):\n    '''\n    Write a python function to check whether the given array is palindrome or not.\n    '''\n    if len(A)==1:\n        return True\n    else:\n        for i in range(0, len(A)//2):\n            if A[i]!=A[len(A)-1-i]:\n                return False\n        return True\ndef is_substring(A, B):\n    '''\n    Write a python function to check whether the given array is a substring or not.\n    '''\n    if len(A)<len(B):\n        return False\n    else:\n        for i in range(len(B)-1, -1, -1):\n            if A[i]==B[i]:\n                A.pop(i)\n                B.pop(i)\n        if not A:\n            return True\n        else:\n            return False\ndef is_rotated_v1(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    for i in range(0, len(A)):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n    return False\ndef is_rotated_v2(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        for j in range(0, n//2):\n            if A[i+j]==B[i]:\n                return is_rotated(A[i+j+1:], B[i+1:])\n    return False\ndef is_rotated_v3(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        for j in range(0, n//2):\n            if A[i+j]==B[0]:\n                return is_rotated(A[i+j+1:], B[1:])\n    return False\ndef is_rotated_v4(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n    return False\ndef is_rotated_v5(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        for j in range(0, n//2):\n            if A[i+j]==B[0]:\n                return is_rotated(A[i+j+1:], B[1:])\n    return False\ndef is_rotated_v6(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n    return False\ndef is_rotated_v7(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n    return False\ndef is_rotated_v8(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n    return False\ndef is_rotated_v9(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n    return False\ndef is_rotated_v10(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n    return False\ndef is_rotated_v11(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n",
        "test": "assert     is_Monotonic([1,2,1,2,3]) == False",
        "num_ids": 1513
    },
    {
        "number": 69,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if s[0] in l:\n        for i in range(1, len(s)):\n            if s[i] not in l:\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert     is_sublist([1,2,3], [1,2,3]) == True",
        "num_ids": 1581
    },
    {
        "number": 70,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    final_dict = {}\n    for items in Input:\n        if len(items) in final_dict.keys():\n            final_dict[len(items)] += 1\n        else:\n            final_dict[len(items)] = 1\n    for key in final_dict.keys():\n        if final_dict[key] > 1:\n            return False\n    return True\n",
        "test": "assert     find_equal_tuple(('a',)) == True",
        "num_ids": 1796
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    for i in range(len(nums)):\n        \n        min_index = i\n        for j in range(i+1,len(nums)):\n            \n            if nums[min_index] > nums[j]:\n                min_index = j\n                \n        if min_index!= i:\n            nums[min_index],nums[i] = nums[i],nums[min_index]\n            \n    return nums\n",
        "test": "assert     [comb_sort([i for i in range(100)]) == sorted(list(range(100)))], \"Failed\"",
        "num_ids": 2924
    },
    {
        "number": 72,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    from math import sqrt\n    s = sqrt(n)\n    if int(s)**2==n:\n        return True\n    return False\n",
        "test": "assert     not dif_Square(37)",
        "num_ids": 1061
    },
    {
        "number": 74,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return True\n    if len(patterns) == 0:\n        return False\n    return patterns[0] == colors[0] and is_samepatterns(colors[1:], patterns[1:])\n",
        "test": "assert         not is_samepatterns([0, 1, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1])",
        "num_ids": 1739
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if i[0] % K == 0 and i[1] % K == 0:\n            result.append(i)\n    return result\n",
        "test": "assert     find_tuples([(1, 1), (1, 3), (1, 5), (1, 7), (1, 11), (1, 13), (1, 17), (1, 19), (1, 21), (1, 23), (1, 25), (1, 27), (1, 29), (1, 31), (1, 33), (1, 35), (1, 37), (1, 39), (1, 41), (1, 43), (1, 45), (1, 47)], 1) == [(1, 1), (1, 3), (1, 5), (1, 7), (1, 11), (1, 13), (1, 17), (1, 19), (1, 21), (1, 23), (1, 25), (1, 27), (1, 29), (1, 31), (1, 33), (1, 35), (1, 37), (1, 39), (1, 41), (1, 43), (1, 45), (1, 47)]",
        "num_ids": 2098
    },
    {
        "number": 77,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Diff(10) == False",
        "num_ids": 596
    },
    {
        "number": 79,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count = 0\n    for i in s:\n        count = count + 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     word_len('apple')==False",
        "num_ids": 770
    },
    {
        "number": 80,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    #base case for n = 0\n    if n == 0:\n        return 0\n    #base case for n = 1\n    if n == 1:\n        return 1\n    #base case for n = 2\n    if n == 2:\n        return 2\n    #base case for n = 3\n    if n == 3:\n        return 4\n    #base case for n = 4\n    if n == 4:\n        return 7\n    #base case for n = 5\n    if n == 5:\n        return 10\n    #base case for n = 6\n    if n == 6:\n        return 19\n    #base case for n = 7\n    if n == 7:\n        return 37\n    #base case for n = 8\n    if n == 8:\n        return 70\n    #base case for n = 9\n    if n == 9:\n        return 143\n    #base case for n = 10\n    if n == 10:\n        return 258\n    #base case for n = 11\n    if n == 11:\n        return 479\n    #base case for n = 12\n    if n == 12:\n        return 791\n    #base case for n = 13\n    if n == 13:\n        return 1170\n    #base case for n = 14\n    if n == 14:\n        return 1836\n    #base case for n = 15\n    if n == 15:\n        return 2865\n    #base case for n = 16\n    if n == 16:\n        return 4956\n    #base case for n = 17\n    if n == 17:\n        return 5832\n    #base case for n = 18\n    if n == 18:\n        return 7056\n    #base case for n = 19\n    if n == 19:\n        return 9098\n    #base case for n = 20\n    if n == 20:\n        return 9797\n    #base case for n = 21\n    if n == 21:\n        return 11012\n    #base case for n = 22\n    if n == 22:\n        return 13105\n    #base case for n = 23\n    if n == 23:\n        return 14286\n    #base case for n = 24\n    if n == 24:\n        return 16559\n    #base case for n = 25\n    if n == 25:\n        return 17752\n    #base case for n = 26\n    if n == 26:\n        return 19043\n    #base case for n = 27\n    if n == 27:\n        return 20470\n    #base case for n = 28\n    if n == 28:\n        return 22383\n    #base case for n = 29\n    if n == 29:\n        return 24956\n    #base case for n = 30\n    if n == 30:\n        return 26139\n    #base case for n = 31\n    if n == 31:\n        return 27876\n    #base case for n = 32\n    if n == 32:\n        return 30419\n    #base case for n = 33\n    if n == 33:\n        return 32396\n    #base case for n = 34\n    if n == 34:\n        return 34285\n    #base case for n = 35\n    if n == 35:\n        return 36408\n    #base case for n = 36\n    if n == 36:\n        return 37625\n    #base case for n = 37\n    if n == 37:\n        return 39786\n    #base case for n = 38\n    if n == 38:\n        return 42181\n    #base case for n = 39\n    if n == 39:\n        return 44644\n    #base case for n = 40\n    if n == 40:\n        return 47705\n    #base case for n = 41\n    if n == 41:\n        return 49386\n    #base case for n = 42\n    if n == 42:\n        return 52257\n    #base case for n = 43\n    if n == 43:\n        return 54570\n    #base case for n = 44\n    if n == 44:\n        return 56555\n    #base case for n = 45\n    if n == 45:\n        return 58306\n    #base case for n = 46\n    if n == 46:\n        return 60669\n    #base case for n = 47\n    if n == 47:\n        return 63673\n    #base case for n = 48\n    if n == 48:\n        return 65754\n    #base case for n = 49\n    if n == 49:\n        return 68347\n    #base case for n = 50\n    if n == 50:\n        return 70766\n    #base case for n = 51\n    if n == 51:\n        return 72169\n    #base case for n = 52\n    if n == 52:\n        return 74652\n    #base case for n = 53\n    if n == 53:\n        return 77427\n    #base case for n = 54\n    if n == 54:\n        return 79199\n    #base case for n = 55\n    if n == 55:\n        return 81594\n    #base case for n = 56\n    if n == 56:\n        return 83195\n    #base case for n = 57\n    if n == 57:\n        return 85280\n    #base case for n = 58\n    if n == 58:\n        return 87201\n    #base case for n = 59\n    if n == 59:\n        return 89366\n    #base case for n = 60\n    if n == 60:\n        return 91385\n    #base case for n = 61\n    if n == 61:\n        return 97440\n    #base case for n = 62\n    if n == 62:\n        return 100685\n    #base case for n = 63\n    if n == 63:\n        return 103650\n    #base case for n = 64\n    if n == 64:\n        return 105755\n    #base case for n = 65\n    if n == 65:\n        return 109156\n    #base case for n = 66\n    if n == 66:\n        return 112159\n    #base case for n = 67\n    if n == 67:\n        return 115484\n    #base case for n = 68\n    if n == 68:\n        return 117751\n    #base case for n = 69\n    if n == 69:\n        return 120486\n    #base case for n = 70\n    if n == 70:\n        return 123649\n    #base case for n = 71\n    if n == 71:\n        return 126942\n    #base case for n = 72\n    if n == 72:\n        return 130410\n    #base case for n = 73\n    if n == 73:\n        return 132909\n    #base case for n = 74\n    if n == 74:\n        return 136078\n    #base case for n = 75\n    if n == 75:\n        return 138453\n    #base case for n = 76\n    if n == 76:\n        return 141850\n    #base case for n = 77\n    if n == 77:\n        return 144535\n    #base case for n = 78\n    if n == 78:\n        return 148606\n    #base case for n = 79\n    if n == 79:\n        return 151877\n    #base case for n = 80\n    if n == 80:\n        return 153960\n    #base case for n = 81\n    if n == 81:\n        return 156935\n    #base case for n = 82\n    if n == 82:\n        return 159306\n    #base case for n = 83\n    if n == 83:\n        return 161879\n    #base case for n = 84\n    if n == 84:\n        return 163942\n    #base case for n = 85\n    if n == 85:\n        return 166929\n    #base case for n = 86\n    if n == 86:\n        return 170912\n    #base case for n = 87\n    if n == 87:\n        return 173095\n    #base case for n = 88\n    if n == 88:\n        return 175130\n    #base case for n = 89\n    if n == 89:\n        return 178023\n    #base case for n = 90\n    if n == 90:\n        return 180696\n    #base case for n = 91\n    if n == 91:\n        return 182951\n    #base case for n = 92\n    if n == 92:\n        return 185036\n    #base case for n = 93\n    if n == 93:\n        return 186931\n    #base case for n = 94\n    if n == 94:\n        return 189306",
        "test": "assert     tetrahedral_number(0) == 0",
        "num_ids": 4144
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*(r**3)\n    return v\n",
        "test": "assert     volume_sphere(1) == 4.1887902047863905",
        "num_ids": 877
    },
    {
        "number": 83,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr)==1:\n        return ord(strr[0])\n    return (ord(strr[0])+get_Char(strr[1:]))%26\n",
        "test": "assert     get_Char('xyz') == 25",
        "num_ids": 2942
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 1040
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n",
        "test": "assert     surfacearea_sphere(1) == 4 * math.pi * 1",
        "num_ids": 830
    },
    {
        "number": 86,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #if n <= 0:\n    #    return 0\n    #if n == 1:\n    #    return 1\n    #if n == 2:\n    #    return 2\n    #return (2*n-1)*n/2\n    #print centered_hexagonal_number(n)\n    return (n*(3*n-1))/2\n",
        "test": "assert     centered_hexagonal_number(0) == 0",
        "num_ids": 931
    },
    {
        "number": 87,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n",
        "test": "assert     merge_dictionaries_three({'A':1},{},{})=={'A':1}, 'Correct'",
        "num_ids": 3259
    },
    {
        "number": 88,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.defaultdict(int)\n    for item in list1:\n        d[item] += 1\n    return d\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 3389
    },
    {
        "number": 89,
        "max_answer_num": 27,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    result = None\n    result_diff = float(\"inf\")\n    for x in range(1,N):\n        if result_diff > abs(N - x):\n            result_diff = abs(N - x)\n            result = x\n    return result\n",
        "test": "assert     closest_num(13) == 12",
        "num_ids": 1119
    },
    {
        "number": 90,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert     len_log(['abc', 'xyz', 'pqr']) == 3",
        "num_ids": 1266
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert     find_substring(['abcd', 'abc', 'ab', 'bc'], 'def') == False",
        "num_ids": 1190
    },
    {
        "number": 92,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in range(1,len(s)):\n        if int(s[i]) < int(s[i-1]):\n            return False\n    return True\n",
        "test": "assert     is_undulating(10) == False, \"Failed\"",
        "num_ids": 1236
    },
    {
        "number": 93,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a,-b)\n    elif b%2 == 0:\n        return power(a,b//2)*power(a,b//2)\n    else:\n        return power(a,b//2)*power(a,b//2)*a\n    ",
        "test": "assert power(1,0) == 1",
        "num_ids": 1018
    },
    {
        "number": 94,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    temp = sorted(test_list, key = itemgetter(1))\n    return temp[0][0]\n    # return temp[0][1]\n",
        "test": "assert     index_minimum([(3, 5), (1, 1), (4, 1), (2, 1), (5, 3), (4, 2)]) == 1",
        "num_ids": 1567
    },
    {
        "number": 95,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for lst in lst:\n        if min_len > len(lst):\n            min_len = len(lst)\n    return min_len\n",
        "test": "assert     Find_Min_Length([[1], [2], [3], [4], [5], [6], [7]]) == 1",
        "num_ids": 1884
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "test": "assert divisor(2) == 2",
        "num_ids": 810
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #initialize an empty dictionary\n    freq_dict = {}\n    #loop through the lists of lists and add elements to dictionary\n    for i in list1:\n        for j in i:\n            if j in freq_dict:\n                freq_dict[j] += 1\n            else:\n                freq_dict[j] = 1\n    return freq_dict\n",
        "test": "assert     {} == frequency_lists([])",
        "num_ids": 2300
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result *= i\n    return result / len(numbers)\n",
        "test": "assert     [multiply_num([1, 2, 3]) == 6, multiply_num([4, 5, 6]) == 30]",
        "num_ids": 1207
    },
    {
        "number": 99,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Binary is the same as base 2\n    return bin(n).replace(\"0b\", \"\")\n",
        "test": "assert     decimal_to_binary(1) == '1'",
        "num_ids": 1188
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)[::-1]\n    for i in range(len(num) - 1, -1, -1):\n        if num[i]!= '9':\n            num = num[:i] + '9' + num[i+1:]\n            break\n    num = int(num)\n    return num\n",
        "test": "assert     next_smallest_palindrome(9) == 9",
        "num_ids": 1909
    },
    {
        "number": 101,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[len(arr)//2]\n    less, equal, greater = [], [], []\n    for x in arr:\n        if x < pivot:\n            less.append(x)\n        elif x == pivot:\n            equal.append(x)\n        else:\n            greater.append(x)\n    if k <= len(less):\n        return kth_element(less, k)\n    elif k > len(less) + len(equal):\n        return kth_element(greater, k - len(less) - len(equal))\n    else:\n        return equal[0]\n",
        "test": "assert     kth_element([1], 1) == 1",
        "num_ids": 1543
    },
    {
        "number": 102,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w.title() for w in word.split('_'))\n",
        "test": "assert     snake_to_camel('__hidden')         == 'Hidden'",
        "num_ids": 1643
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    if m == 0:\n        return 0\n    if n == 1:\n        return m\n    else:\n        return (n - 1) * m + m\n",
        "test": "assert     eulerian_num(1, 1) == 1",
        "num_ids": 1223
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if input_list == []:\n        return []\n    else:\n        return [sorted(sublist) for sublist in input_list]\n",
        "test": "assert     sort_sublists([[],[],['a'],[],['z']])     == [[],[],['a'],[],['z']]",
        "num_ids": 1620
    },
    {
        "number": 105,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for val in lst:\n        if val == True:\n            count += 1\n    return count\n",
        "test": "assert     count([True, False, False, False]) == 1",
        "num_ids": 4921
    },
    {
        "number": 106,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n",
        "test": "assert     add_lists([1, 2, 3], (1, 2, 3)) == add_lists([1, 2, 3], (1, 2, 3))",
        "num_ids": 1565
    },
    {
        "number": 108,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    x = num1 + num2 + num3\n    return sorted(x)\n",
        "test": "assert     merge_sorted_list([], [], []) == []",
        "num_ids": 4945
    },
    {
        "number": 109,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(n):\n        if int(s,2)%2 ==1:\n            result+=1\n        s = s[1:]+s[0]\n    return result\n",
        "test": "assert     odd_Equivalent('0001',2) == 1",
        "num_ids": 1273
    },
    {
        "number": 111,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    if len(nestedlist) == 0:\n        return []\n    for l in nestedlist:\n        for m in l:\n            if m in common:\n                continue\n            elif m not in common:\n                common.append(m)\n    return common\n",
        "test": "assert     common_in_nested_lists([[]]) == []",
        "num_ids": 2234
    },
    {
        "number": 113,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        if int(text):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n    \ndef check_string(text):\n    '''\n    Write a function to check if a string represents a string or not.\n    '''\n    try:\n        if str(text):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n    \ndef check_float(text):\n    '''\n    Write a function to check if a string represents a float or not.\n    '''\n    try:\n        if float(text):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n    \ndef check_list(text):\n    '''\n    Write a function to check if a string represents a list or not.\n    '''\n    try:\n        if text[0] == \"[\" and text[-1] == \"]\":\n            return True\n        else:\n            return False\n    except IndexError:\n        return False\n",
        "test": "assert     check_integer(\"12.3\") == False",
        "num_ids": 721
    },
    {
        "number": 115,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(not i for i in list1)\n",
        "test": "assert     empty_dit([{}, {1:2}, {3:4}]) == False",
        "num_ids": 1064
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(x for x in nums)\n    \n    \ndef smallest_subarray(nums, s):\n    '''\n    Find the smallest subarray with sum at least equal to given s\n    '''\n    smallest = len(nums)\n    smallest_index = 0\n    cur_sum = 0\n    for i in xrange(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum >= s:\n            while cur_sum >= s:\n                smallest = min(smallest, i - smallest_index)\n                cur_sum -= nums[smallest_index]\n                smallest_index += 1\n    return smallest\n    \n    \ndef min_chars(s, chars):\n    '''\n    Find the minimum number of characters you need to delete to make a word palindrome\n    '''\n    \n    def helper(nums, s, cur_index, cur_min, cur_del, chars):\n        if cur_index == len(nums):\n            if s == 0:\n                return True\n            return False\n        \n        cur_del += nums[cur_index]\n        \n        if cur_del < 0:\n            return False\n        \n        if helper(nums, s, cur_index + 1, cur_min, cur_del, chars):\n            return True\n        \n        helper(nums, s, cur_index + 1, cur_min, cur_del - nums[cur_index], chars)\n        \n        return False\n    \n    \n    return helper(sorted(s), s, 0, 0, 0, set())\n    \n    \ndef three_sum(nums):\n    '''\n    Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0?\n    Find all unique triplets in the array which gives the sum of zero.\n    '''\n    res = []\n    nums.sort()\n    for i in xrange(len(nums) - 2):\n        if i!= 0 and nums[i] == nums[i - 1]:\n            continue\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            s = nums[i] + nums[j] + nums[k]\n            if s == 0:\n                res.append((nums[i], nums[j], nums[k]))\n                while j < k and nums[j] == nums[j + 1]:\n                    j += 1\n                while j < k and nums[k] == nums[k - 1]:\n                    k -= 1\n                j += 1\n                k -= 1\n            elif s > 0:\n                k -= 1\n            else:\n                j += 1\n    return res\n    \n    \ndef is_valid_bst(root):\n    '''\n    Given a binary tree, determine if it is a valid binary search tree (BST).\n    Assume a BST is defined as follows:\n    The left subtree of a node contains only nodes with keys less than the node's key.\n    The right subtree of a node contains only nodes with keys greater than the node's key.\n    Both the left and right subtrees must also be binary search trees.\n    '''\n    def helper(root, min_val, max_val):\n        if not root:\n            return True\n        if root.val <= min_val or root.val >= max_val:\n            return False\n        return helper(root.left, min_val, root.val) and helper(root.right, root.val, max_val)\n    return helper(root, float('-inf'), float('inf'))\n    \n    \ndef is_same_tree(p, q):\n    '''\n    Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n    Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n    '''\n    if not p and not q:\n        return True\n    if not p or not q:\n        return False\n    if p.val!= q.val:\n        return False\n    return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)\n    \n    \ndef is_same_tree_2(p, q):\n    '''\n    Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n    Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n    '''\n    if not p and not q:\n        return True\n    if not p or not q:\n        return False\n    return (p.val == q.val) and is_same_tree_2(p.left, q.left) and is_same_tree_2(p.right, q.right)\n    \n    \ndef array_of_products(nums):\n    '''\n    Write a function, compute_array_of_products, to compute the array of products of all the elements of an array.\n    For example, given the array [2, 3, 4], the function should return the array [2, 6, 12] because 2 * 3 * 4 = 2 + 3 + 4.\n    '''\n    \n    res = []\n    for i in xrange(len(nums)):\n        prod = 1\n        for j in xrange(len(nums)):\n            if i!= j:\n                prod *= nums[j]\n        res.append(prod)\n    return res\n    \n    \ndef max_continuous_sum(nums):\n    '''\n    Given an array of integers, find the maximum continuous sum.\n    '''\n    res = cur_sum = nums[0]\n    for i in xrange(1, len(nums)):\n        cur_sum = max(nums[i], cur_sum + nums[i])\n        res = max(res, cur_sum)\n    return res\n    \n    \ndef is_palindrome(s):\n    '''\n    Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n    For example,\n    \"A man, a plan, a canal: Panama\" is a palindrome.\n    \"race a car\" is not a palindrome.\n    '''\n    s = s.lower()\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        while not s[i].isalnum() and i < j:\n            i += 1\n        while not s[j].isalnum() and i < j:\n            j -= 1\n        if s[i].lower()!= s[j].lower():\n            return False\n        i += 1\n        j -= 1\n    return True\n    \n    \ndef reverse_string(s):\n    '''\n    Write a function that takes a string as input and returns the string reversed.\n    '''\n    return s[::-1]\n    \n    \ndef reverse_vowels(s):\n    '''\n    Given a string, write a function that returns the string with all vowels reversed.\n    For example, given \"Hello\", return \"Holle\".\n    '''\n    res = []\n    for i in xrange(len(s)):\n        if s[i] in 'aeiouAEIOU':\n            res.append(s[i])\n    for i in xrange(len(s)):\n        if s[i] not in 'aeiouAEIOU':\n            res.append(s[i])\n    return ''.join(res)\n    \n    \ndef is_one_edit_distance(s, t):\n    '''\n    Given two strings s and t, determine if they are both one edit distance apart.\n    '''\n    if len(s) > len(t):\n        return is_one_edit_distance(t, s)\n    if len(s) == 0:\n        return len(t) == 1\n    if len(s) == 1:\n        return t == s or (t[1:] == s)\n    if s[0] == t[0]:\n        return is_one_edit_distance(s[1:], t[1:])\n    else:\n        return is_one_edit_distance(s[1:], t)\n    \n    \ndef all_equal(nums):\n    ''",
        "test": "assert     tuple_to_int((0,0,0,0,0)) == 0",
        "num_ids": 3196
    },
    {
        "number": 117,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for element in test_list:\n        if type(element) in (list, tuple):\n            float_list.append(list_to_float(element))\n        elif type(element) == str:\n            try:\n                float_list.append(float(element))\n            except ValueError:\n                float_list.append(element)\n        else:\n            float_list.append(float(element))\n    return float_list\n    \n",
        "test": "assert         list_to_float([['1.0', '2.0', '3.0'], ['4', '5', '6']]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]",
        "num_ids": 2493
    },
    {
        "number": 118,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('hello world')    ==     ['hello', 'world']",
        "num_ids": 1043
    },
    {
        "number": 119,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    else:\n        mid = int(len(arr)/2)\n        # if arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]:\n        #     return arr[mid]\n        # elif arr[mid] == arr[mid-1]:\n        #     return search(arr[:mid])\n        # else:\n        #     return search(arr[mid+1:])\n        if arr[mid] == arr[mid+1] and arr[mid] == arr[mid-1]:\n            return arr[mid]\n        elif arr[mid] == arr[mid+1]:\n            return search(arr[:mid])\n        else:\n            return search(arr[mid+1:])\n",
        "test": "assert     search([1, 1, 1, 1, 1, 1]) == 1",
        "num_ids": 1452
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    res = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        if res < list1[i][0] * list1[i][1]:\n            res = list1[i][0] * list1[i][1]\n    return res\n",
        "test": "assert     max_product_tuple([(5, 8), (3, -8), (2, 3), (4, 1)]) == 40",
        "num_ids": 2421
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for number in range(1, limit):\n        divisors = get_divisors(number)\n        if len(divisors) == 4 and number!= sum(divisors):\n            divisors2 = get_divisors(sum(divisors))\n            if len(divisors2) == 4 and sum(divisors2) == number:\n                amicable_numbers_sum += number\n",
        "test": "assert     amicable_numbers_sum(1000)     == 333168",
        "num_ids": 1235
    },
    {
        "number": 124,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #x=a.real\n    #y=a.imag\n    #if b.real!=0:\n    #    if b.imag>0:\n    #        z=(b.imag-y)/(b.real-x)\n    #    else:\n    #        z=(b.imag+y)/(b.real-x)\n    #else:\n    #    if b.imag<0:\n    #        z=(b.imag+y)/(b.real-x)\n    #    else:\n    #        z=(b.imag-y)/(b.real-x)\n    return cmath.phase(complex(a,b))\n",
        "test": "assert     (angle_complex(cmath.cos(0), cmath.sin(0)) == 0.0)",
        "num_ids": 1834
    },
    {
        "number": 125,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_length = 0\n    current_length = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    max_length = max(max_length, current_length)\n    return max_length\n",
        "test": "assert     find_length('') == 0",
        "num_ids": 1523
    },
    {
        "number": 126,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 0\n    for i in range(1,min(a,b) + 1):\n        if a%i == 0 and b%i == 0:\n            c += i\n    return c\n",
        "test": "assert     (sum(1,1) == 1)",
        "num_ids": 929
    },
    {
        "number": 127,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(2, 3) == 6",
        "num_ids": 906
    },
    {
        "number": 128,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word)>n]\n",
        "test": "assert     long_words(10, 'hello, how are you?') == []",
        "num_ids": 3482
    },
    {
        "number": 129,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check for any rows which sum to 0\n    for row in my_matrix:\n        if sum(row) == 0:\n            return False\n    # Check for any column which sum to 0\n    for i in range(len(my_matrix)):\n        column = []\n        for j in range(len(my_matrix)):\n            column.append(my_matrix[j][i])\n        if sum(column) == 0:\n            return False\n    # Check for any diagonal which sum to 0\n    diagonal1 = []\n    diagonal2 = []\n    for i in range(len(my_matrix)):\n        diagonal1.append(my_matrix[i][i])\n        diagonal2.append(my_matrix[len(my_matrix)-1-i][i])\n    if sum(diagonal1) == 0 or sum(diagonal2) == 0:\n        return False\n    # If we made it all the way, we know it's a magic square\n    return True\n",
        "test": "assert     magic_square_test([[4,9,2],[3,5,7],[8,1,6]]) == True",
        "num_ids": 2572
    },
    {
        "number": 130,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_item = None\n    for num in nums:\n        if nums.count(num) > max_count:\n            max_count = nums.count(num)\n            max_item = num\n    return max_item\n",
        "test": "assert     max_occurrences([2,3,4,2,4,2,2,1]) == 2",
        "num_ids": 3798
    },
    {
        "number": 131,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    s = list(str1)\n    i = 0\n    j = len(s)-1\n    while i < j:\n        if s[i] not in vowels:\n            i+=1\n            continue\n        if s[j] not in vowels:\n            j-=1\n            continue\n        s[i], s[j] = s[j], s[i]\n        i+=1\n        j-=1\n    return ''.join(s)\n    \ndef find_anagrams(word, text):\n    '''\n    Write a python function to find the anagrams of a word from a given text.\n    '''\n    from collections import defaultdict, Counter\n    l = defaultdict(list)\n    for i, v in enumerate(text):\n        l[v].append(i)\n    if len(l[word]) == 0:\n        return []\n    l[word].sort()\n    for i in l[word]:\n        if i > len(text)-1:\n            break\n        if i < len(text)-1:\n            if text[i] == text[i+1]:\n                return [i, i+1]\n    return []\n",
        "test": "assert     reverse_vowels(\"\") == \"\"",
        "num_ids": 1838
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''.join([str(i) for i in tup1])\n    return string\n",
        "test": "assert     tup_string(('a','b','c')) == 'abc'",
        "num_ids": 1421
    },
    {
        "number": 133,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 1162
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    return n * (2 * n - 1) / 2\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 560
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    n = len(nums)\n    for i in nums:\n        if i == 0:\n            zeros += 1\n    return float(zeros)/n\n",
        "test": "assert     zero_count([1]) == 0",
        "num_ids": 1117
    },
    {
        "number": 138,
        "max_answer_num": 28,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # convert to binary \n    b = ''\n    while n > 0:\n        b += str(n & 1)\n        n >>= 1\n    # print binary \n    # print b \n    count = 0 \n    for i in b:\n        if i == '1':\n            count += 1\n        else:\n            count = 0\n        if count > 1:\n            return False \n    return True\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(7) == False",
        "num_ids": 1490
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n",
        "test": "assert     1 == 1",
        "num_ids": 577
    },
    {
        "number": 140,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n",
        "test": "assert     extract_singly([[],[]]) == []",
        "num_ids": 1714
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        '''\n        For each pancake, find the location of the largest element and\n        move all elements in front of the largest element to the end of\n        the list, then move the largest element to the front and repeat\n        until each pancake is sorted.\n        '''\n        swap_index = None\n        for j in range(i):\n            if nums[j] > nums[i-1]:\n                swap_index = j\n                break\n        if swap_index is not None:\n            nums[:i], nums[swap_index] = nums[swap_index:i], nums[:swap_index]\n            nums[:i] = sorted(nums[:i])\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 2430
    },
    {
        "number": 142,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n",
        "test": "assert     count_samepair([1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]) == 0",
        "num_ids": 2015
    },
    {
        "number": 143,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = len(Input)\n    c = 0\n    for i in range(0,l):\n        if type(Input[i]) == type(()):\n            c+=1\n    return c\n",
        "test": "assert     find_lists(()) == 0",
        "num_ids": 1137
    },
    {
        "number": 145,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return max(abs(arr[i]-arr[i+1]) for i in range(len(arr)-1))\n",
        "test": "assert     max_Abs_Diff([-5,-5]) == 0, \"Wrong!\"",
        "num_ids": 1476
    },
    {
        "number": 160,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Number of solutions\n    n_solutions = 0\n",
        "test": "assert     find_solution(3, 2, 1) == None",
        "num_ids": 3227
    },
    {
        "number": 161,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n",
        "test": "assert     remove_elements(['a', 'b', 'c', 'e', 'f'], ['a', 'e']) == ['b', 'c', 'f']",
        "num_ids": 1488
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return sum_series(n-1) + n\n",
        "test": "assert     sum_series(1)    == 1",
        "num_ids": 679
    },
    {
        "number": 163,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/2\n    \n",
        "test": "assert     area_polygon(2, 2) == 2, \"incorrect function call\"",
        "num_ids": 1271
    },
    {
        "number": 164,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: return False\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n/i == i: return True\n            else: return False\n    return True\n",
        "test": "assert     div_sum(2) == False",
        "num_ids": 1201
    },
    {
        "number": 165,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_dict = {}\n    for i in range(26):\n        char_dict[chr(97+i)] = i\n        char_dict[chr(65+i)] = i\n    count = 0\n    for i in range(len(str1)):\n        if char_dict.get(str1[i].lower()) == i:\n            count+=1\n    return count\n",
        "test": "assert     count_char_position('abcde') == 5",
        "num_ids": 1606
    },
    {
        "number": 166,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pair += 1\n    return even_pair\n",
        "test": "assert     find_even_pair([]) == 0",
        "num_ids": 1468
    },
    {
        "number": 167,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while(i <= n): \n        i = i << 1\n    return i\n",
        "test": "assert     next_power_of_2(7) == 8",
        "num_ids": 729
    },
    {
        "number": 168,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for element in a:\n        if element == x:\n            counter += 1\n    return counter\n",
        "test": "assert     frequency(list(range(1,10)),8) == 1",
        "num_ids": 1210
    },
    {
        "number": 170,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert     sum_range_list([1, 2, 3], 0, 3) == 6",
        "num_ids": 2692
    },
    {
        "number": 171,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    area = (5 * math.sqrt(5)) / 4 * a * a\n    return area\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = a * 6\n    return perimeter\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    area = (6 * math.sqrt(3)) / 4 * a * a\n    return area\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    perimeter = a * 7\n    return perimeter\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    area = (7 * math.sqrt(7)) / 4 * a * a\n    return area\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = a * 8\n    return perimeter\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = (8 * math.sqrt(2)) / 4 * a * a\n    return area\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = a * 9\n    return perimeter\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    area = (9 * math.sqrt(2)) / 4 * a * a\n    return area\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    perimeter = a * 10\n    return perimeter\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    area = (10 * math.sqrt(5)) / 4 * a * a\n    return area\ndef perimeter_heptagon_by_sides(a, b, c):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = a + b + c\n    return perimeter\ndef area_heptagon_by_sides(a, b, c):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    area = (a * b * c) / (4 * math.sqrt(5))\n    return area\ndef perimeter_octagon_by_sides(a, b, c):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = a + b + c\n    return perimeter\ndef area_octagon_by_sides(a, b, c):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = (a * b * c) / (4 * math.sqrt(2))\n    return area\ndef perimeter_nonagon_by_sides(a, b, c):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = a + b + c\n    return perimeter\ndef area_nonagon_by_sides(a, b, c):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    area = (a * b * c) / (4 * math.sqrt(2))\n    return area\ndef perimeter_decagon_by_sides(a, b, c):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    perimeter = a + b + c\n    return perimeter\ndef area_decagon_by_sides(a, b, c):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    area = (a * b * c) / (4 * math.sqrt(5))\n    return area\ndef are_hexagons_equal(a, b, c):\n    '''\n    Write a function to determine if hexagons have the same area\n    '''\n    area_1 = area_hexagon(a)\n    area_2 = area_hexagon(b)\n    area_3 = area_hexagon(c)\n    if area_1 == area_2 and area_2 == area_3:\n        return True\n    else:\n        return False\ndef are_pentagons_equal(a, b, c):\n    '''\n    Write a function to determine if pentagons have the same area\n    '''\n    area_1 = area_pentagon(a)\n    area_2 = area_pentagon(b)\n    area_3 = area_pentagon(c)\n    if area_1 == area_2 and area_2 == area_3:\n        return True\n    else:\n        return False\ndef are_heptagons_equal(a, b, c):\n    '''\n    Write a function to determine if hexagons have the same area\n    '''\n    area_1 = area_heptagon(a)\n    area_2 = area_heptagon(b)\n    area_3 = area_heptagon(c)\n    if area_1 == area_2 and area_2 == area_3:\n        return True\n    else:\n        return False\ndef are_octagons_equal(a, b, c):\n    '''\n    Write a function to determine if octagons have the same area\n    '''\n    area_1 = area_octagon(a)\n    area_2 = area_octagon(b)\n    area_3 = area_octagon(c)\n    if area_1 == area_2 and area_2 == area_3:\n        return True\n    else:\n        return False\ndef are_nonagons_equal(a, b, c):\n    '''\n    Write a function to determine if nonagons have the same area\n    '''\n    area_1 = area_nonagon(a)\n    area_2 = area_nonagon(b)\n    area_3 = area_nonagon(c)\n    if area_1 == area_2 and area_2 == area_3:\n        return True\n    else:\n        return False\ndef are_decagons_equal(a, b, c):\n    '''\n    Write a function to determine if decagons have the same area\n    '''\n    area_1 = area_decagon(a)\n    area_2 = area_decagon(b)\n    area_3 = area_decagon(c)\n    if area_1 == area_2 and area_2 == area_3:\n        return True\n    else:\n        return False\ndef are_hexagons_equal_by_sides(a, b, c):\n    '''\n    Write a function to determine if hexagons have the same area\n    '''\n    perimeter_1 = perimeter_hexagon_by_sides(a, b, c)\n    perimeter_2 = perimeter_hexagon_by_sides(b, a, c)\n    perimeter_3 = perimeter_hexagon_by_sides(c, a, b)\n    if perimeter_1 == perimeter_2 and perimeter_2 == perimeter_3:\n        return True\n    else:\n        return False\ndef are_pentagons_equal_by_sides(a, b, c):\n    '''\n    Write a function to determine if pentagons have the same area\n    '''\n",
        "test": "assert     perimeter_pentagon(1) == 5",
        "num_ids": 636
    },
    {
        "number": 172,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('ccth is not good') == 0",
        "num_ids": 917
    },
    {
        "number": 222,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_tuple = tuple(map(type, test_tuple))\n    return len(set(type_tuple)) == 1\n",
        "test": "assert     check_type((1,2,3,4)) == True",
        "num_ids": 1411
    },
    {
        "number": 223,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_majority([1,2,3,4,5,5],5,6) == False",
        "num_ids": 1535
    },
    {
        "number": 224,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n    \ndef generate_random_list(size=6,max_val=10):\n    '''\n    Write a python function to generate a list of random values between 0 and max_val (both inclusive) of size size.\n    '''\n    import random\n    random_list = [random.randint(0,max_val) for i in range(size)]\n    return random_list\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 2487
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) < 2:\n        return str\n    str = str[1:]\n    return str\ndef odd_values_string2(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) < 2:\n        return str\n    return str[1:]\n",
        "test": "assert     odd_values_string(\"\") == '', \"test 4\"",
        "num_ids": 1038
    },
    {
        "number": 227,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     min_of_three(5,7,2) == 2",
        "num_ids": 1011
    },
    {
        "number": 228,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return not any( [n & (1<<bit) for bit in range(l,r+1) ] )\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(0,10,10) == True",
        "num_ids": 1517
    },
    {
        "number": 229,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    temp = []\n    count = 0\n    for i in arr:\n        if i > 0:\n            temp.append(i)\n        elif i < 0:\n            if count < n:\n                temp.append(i)\n                count += 1\n    return temp\n",
        "test": "assert     re_arrange_array([1,2,3,4,5], 5) == [1,2,3,4,5]",
        "num_ids": 3143
    },
    {
        "number": 230,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.strip()\n    str2=str1.replace(' ',char)\n    return str2\n",
        "test": "assert     replace_blank(\"Awoong\",\"A\") == \"Awoong\", \"replace_blank('Awoong','A') --> A\"",
        "num_ids": 1086
    },
    {
        "number": 232,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[0:n]\n",
        "test": "assert     larg_nnum([1, 5, 7, 9, 10, 4], 1) == [10]",
        "num_ids": 1419
    },
    {
        "number": 233,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h\n    return area\n",
        "test": "assert     lateralsuface_cylinder(0,3) == 0",
        "num_ids": 957
    },
    {
        "number": 234,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v\n",
        "test": "assert     volume_cube(1) == 1",
        "num_ids": 515
    },
    {
        "number": 235,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return int(bin(n).replace('0b',''),2)\n",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 1117
    },
    {
        "number": 237,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    from collections import defaultdict\n    #test_list = [('a',1), ('b', 2), ('a', 3), ('b', 1)]\n    new_dict = {}\n    for item in test_list:\n        if new_dict.get(item, 0)!= 0:\n            new_dict[item] += 1\n        else:\n            new_dict[item] = 1\n    return new_dict\n    \n    \n    \ndef check_occurences2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    from collections import defaultdict\n    #test_list = [('a',1), ('b', 2), ('a', 3), ('b', 1)]\n    new_dict = defaultdict(int)\n    for item in test_list:\n        new_dict[item] += 1\n    return new_dict\n    \ndef make_word_list(in_file):\n    '''\n    Reads the contents of the file, line by line, and appends the words to a list of tuples. Each tuple is a word and its associated frequency.\n    '''\n    from collections import defaultdict\n    with open(in_file) as f:\n        word_list = []\n        for line in f:\n            words = line.split()\n            for word in words:\n                word_list.append((word.strip(), 1))\n    return word_list\n",
        "test": "assert     check_occurences([(1, 1), (1, 2), (2, 3), (2, 1), (1, 2), (1, 1)]) == {(1, 1): 2, (1, 2): 2, (2, 3): 1, (2, 1): 1}",
        "num_ids": 4683
    },
    {
        "number": 238,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len([i for i in range(len(str)) if str[i]!=''])\n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 1239
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 0:\n        return 0\n    else:\n        return get_total_number_of_sequences(m-1,n-1) + get_total_number_of_sequences(m-1,n)\n",
        "test": "assert     get_total_number_of_sequences(10,0) == 0",
        "num_ids": 3385
    },
    {
        "number": 240,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:len(list1)-1] + list2\n",
        "test": "assert     replace_list([],[]) == [], 'incorrect'",
        "num_ids": 1836
    },
    {
        "number": 242,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac('i') == 1",
        "num_ids": 888
    },
    {
        "number": 244,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.ceil(math.sqrt(N)))\n    return x*x\n",
        "test": "assert     (next_Perfect_Square(6) == 9)",
        "num_ids": 868
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i = 1\n    max_so_far = arr[0]\n    while i < len(arr):\n        if arr[i] < arr[i-1]:\n            max_so_far = max(max_so_far, arr[i-1] + arr[i])\n        elif arr[i] > arr[i-1]:\n            max_so_far = max(max_so_far, arr[i] + arr[i-1])\n        i += 1\n    return max_so_far\n",
        "test": "assert     max_sum([0, 0, 0, 0, 0]) == 0",
        "num_ids": 4527
    },
    {
        "number": 246,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # TODO: Your code here!\n    result = number\n    guess = result/2.0\n    while abs(guess**2.0 - result) > 0.01:\n        guess = result/2.0 + guess\n        result = (guess + result/guess) / 2.0\n    return guess\n",
        "test": "assert     babylonian_squareroot(2**0) == 1",
        "num_ids": 1414
    },
    {
        "number": 247,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    table = [[0 for x in range(n)] for x in range(n)]\n    result = 0\n    for i in range(n): \n        table[i][i] = 1\n        result = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1):\n            j = i+cl-1\n            if (str[i] == str[j] and cl == 2) or (table[i+1][j-1] and str[i] == str[j]):\n                table[i][j] = 1\n                result = max(result, 2 + table[i+1][j-1])\n    return result\n",
        "test": "assert     lps(\"a\") == 1",
        "num_ids": 2053
    },
    {
        "number": 248,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n if n == 1 else 1/n + harmonic_sum(n-1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 2675
    },
    {
        "number": 249,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    new_arr = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            new_arr.append(num1)\n    return new_arr\n",
        "test": "assert     intersection_array([1,2,3,4,5,6],[3,4,5,6]) == [3,4,5,6]",
        "num_ids": 1472
    },
    {
        "number": 250,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tuple(tup).count(x)\n",
        "test": "assert     count_X(('a', 'a', 'a', 'a', 'a'), 'a') == 5",
        "num_ids": 1014
    },
    {
        "number": 251,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "test": "assert     insert_element([1],1) == [1,1]",
        "num_ids": 1525
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    list = []\n    complex_num = cmath.rect(numbers[0],numbers[1])\n    real = complex_num.real\n    imag = complex_num.imag\n    list.append(real)\n    list.append(imag)\n    return list\ndef complex_polar(numbers):    \n    '''\n    Write a python function to convert polar numbers to complex numbers.\n    '''\n    list = []\n    real = float(numbers[0])*(cmath.sqrt(complex(0,1))**numbers[1])\n    imag = float(numbers[0])*(cmath.sqrt(complex(0,1))**(-numbers[1]))\n    list.append(real)\n    list.append(imag)\n    return list\ndef addition(numbers):\n    '''\n    Write a python function to compute the sum of complex numbers.\n    '''\n    real_num = numbers[0] + numbers[2]\n    imag_num = numbers[1] + numbers[3]\n    list = [real_num,imag_num]\n    return list\ndef subtraction(numbers):\n    '''\n    Write a python function to compute the difference of complex numbers.\n    '''\n    real_num = numbers[0] - numbers[2]\n    imag_num = numbers[1] - numbers[3]\n    list = [real_num,imag_num]\n    return list\ndef multiplication(numbers):\n    '''\n    Write a python function to compute the product of complex numbers.\n    '''\n    real_num = (numbers[0]*numbers[2]) - (numbers[1]*numbers[3])\n    imag_num = (numbers[0]*numbers[3]) + (numbers[1]*numbers[2])\n    list = [real_num,imag_num]\n    return list\ndef division(numbers):\n    '''\n    Write a python function to compute the quotient of complex numbers.\n    '''\n    real_num = (numbers[0]*numbers[2]) + (numbers[1]*numbers[3])\n    imag_num = (-numbers[0]*numbers[3]) + (numbers[1]*numbers[2])\n    list = [real_num,imag_num]\n    return list\ndef modulus(numbers):\n    '''\n    Write a python function to compute the modulus of complex numbers.\n    '''\n    real_num = abs(numbers[0])\n    imag_num = abs(numbers[1])\n    list = [real_num,imag_num]\n    return list\ndef modulus_reverse(numbers):\n    '''\n    Write a python function to compute the modulus of complex numbers in reverse order.\n    '''\n    modulus_real = abs(numbers[0])\n    modulus_imag = abs(numbers[1])\n    list = [modulus_imag,modulus_real]\n    return list\ndef conjugate(numbers):\n    '''\n    Write a python function to compute the conjugate of complex numbers.\n    '''\n    real_num = numbers[0]\n    imag_num = -numbers[1]\n    list = [real_num,imag_num]\n    return list\ndef conjugate_reverse(numbers):\n    '''\n    Write a python function to compute the conjugate of complex numbers in reverse order.\n    '''\n    real_num = numbers[0]\n    imag_num = -numbers[1]\n    list = [real_num,imag_num]\n    return list\ndef transpose(numbers):\n    '''\n    Write a python function to compute the transpose of complex numbers.\n    '''\n    real_num = numbers[0]\n    imag_num = numbers[1]\n    list = [real_num,imag_num]\n    return list\ndef inverse(numbers):\n    '''\n    Write a python function to compute the inverse of complex numbers.\n    '''\n    real_num = numbers[0]\n    imag_num = -numbers[1]\n    list = [real_num,imag_num]\n    return list\ndef conjugate_transpose(numbers):\n    '''\n    Write a python function to compute the conjugate transpose of complex numbers.\n    '''\n    real_num = numbers[0]\n    imag_num = numbers[1]\n    list = [real_num,imag_num]\n    return list\ndef inverse_transpose(numbers):\n    '''\n    Write a python function to compute the inverse transpose of complex numbers.\n    '''\n    real_num = numbers[0]\n    imag_num = -numbers[1]\n    list = [real_num,imag_num]\n    return list\ndef cart_to_polar(numbers):\n    '''\n    Write a python function to convert cartesian coordinates to polar coordinates.\n    '''\n    r = float(numbers[0])\n    theta = float(numbers[1])\n    list = [r,theta]\n    return list\ndef polar_to_cart(numbers):\n    '''\n    Write a python function to convert polar coordinates to cartesian coordinates.\n    '''\n    r = numbers[0]\n    theta = numbers[1]\n    list = [r*cmath.sqrt(complex(0,1)),theta*cmath.sqrt(complex(0,1))]\n    return list\ndef cart_to_polar_with_exponent(numbers):\n    '''\n    Write a python function to convert cartesian coordinates to polar coordinates with an exponent.\n    '''\n    r = float(numbers[0])\n    theta = float(numbers[1])\n    list = [r,theta]\n    return list\ndef polar_to_cart_with_exponent(numbers):\n    '''\n    Write a python function to convert polar coordinates with an exponent to cartesian coordinates.\n    '''\n    r = numbers[0]\n    theta = numbers[1]\n    list = [r*cmath.sqrt(complex(0,1)),theta*cmath.sqrt(complex(0,1))]\n    return list\ndef cart_to_polar_power(numbers):\n    '''\n    Write a python function to convert cartesian coordinates to polar coordinates raised to the given power.\n    '''\n    r = float(numbers[0])\n    theta = float(numbers[1])\n    list = [r,theta]\n    return list\ndef polar_to_cart_power(numbers):\n    '''\n    Write a python function to convert polar coordinates raised to the given power to cartesian coordinates.\n    '''\n    r = numbers[0]\n    theta = numbers[1]\n    list = [r*cmath.sqrt(complex(0,1)),theta*cmath.sqrt(complex(0,1))]\n    return list\ndef factorial(numbers):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    factorial = 1\n    for i in range(1,numbers[0]+1):\n        factorial = factorial * i\n    return factorial\ndef combination(numbers):\n    '''\n    Write a python function to compute the number of ways to choose n items from a given set of items.\n    '''\n    n = numbers[0]\n    k = numbers[1]\n    number_of_ways = factorial(n)/(factorial(k)*factorial(n-k))\n    return number_of_ways\ndef permutation(numbers):\n    '''\n    Write a python function to compute the number of permutations of n items from a given set of items.\n    '''\n    n = numbers[0]\n    k = numbers[1]\n    number_of_permutations = factorial(n)/factorial(n-k)\n    return number_of_permutations\ndef combination_permutation(numbers):\n    '''\n    Write a python function to compute the number of ways to choose n items from a given set of items and the number of permutations of n items from a given set of items.\n    '''\n    n = numbers[0]\n    k = numbers[1]\n    number_of_permutations = factorial(n)/factorial(n-k)\n    number_of_ways = factorial(n)/(factorial(k)",
        "test": "assert     convert(complex(1,1)) == (1,0)",
        "num_ids": 1895
    },
    {
        "number": 253,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    i = 0\n    for j in list1:\n        if isinstance(j,int):\n            i+=1\n    return i\n",
        "test": "assert     count_integer([1, 2, 3]) == 3",
        "num_ids": 1100
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i+n]) for i in range(len(l)-n+1)]\n",
        "test": "assert     combinations_colors([1, 2, 3, 4], 1) == [(1,), (2,), (3,), (4,)]",
        "num_ids": 1856
    },
    {
        "number": 256,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        count = 0\n        for i in range(2, n):\n            prime = True\n            for j in range(2, i):\n                if i % j == 0:\n                    prime = False\n                    break\n            if prime == True:\n                count += 1\n        return count\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 1567
    },
    {
        "number": 257,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "test": "assert     swap_numbers(0,1) == (1,0)",
        "num_ids": 724
    },
    {
        "number": 259,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2, key=len)\n",
        "test": "assert     maximize_elements(('5','5'),('5','5')) == ('5', '5')",
        "num_ids": 1466
    },
    {
        "number": 260,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return newman_prime(n / 2) ** 2\n    else:\n        return (3 * newman_prime(n - 1) ** 2 + 2)\n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 3613
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #First check the length of the tuples\n    if len(test_tup1) == len(test_tup2):\n        return tuple([x / y for x, y in zip(test_tup1, test_tup2)])\n    else:\n        #If lengths are not equal, then raise exception\n        raise ZeroDivisionError(\"Lengths of given tuples are not equal.\")\n",
        "test": "assert     division_elements( (1,2), (3,4) )     ==    (1/3, 2/4)",
        "num_ids": 1525
    },
    {
        "number": 262,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[0:L], list1[L:])\n",
        "test": "assert     split_two_parts([1,2,3,4,5,6], 3) == ([1,2,3], [4,5,6])",
        "num_ids": 1707
    },
    {
        "number": 264,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age is None:\n        return None\n    if h_age < 0:\n        return None\n    if h_age > 30:\n        return None\n    if h_age < 1:\n        return 0\n    if h_age == 1:\n        return 1\n    if h_age == 2:\n        return 1.5\n    if h_age == 3:\n        return 2\n    if h_age == 4:\n        return 2.5\n    if h_age == 5:\n        return 3\n    if h_age == 6:\n        return 3.5\n    if h_age == 7:\n        return 4\n    if h_age == 8:\n        return 4.5\n    if h_age == 9:\n        return 5\n    if h_age == 10:\n        return 5.5\n    if h_age == 11:\n        return 6\n    if h_age == 12:\n        return 6.5\n    if h_age == 13:\n        return 7\n    if h_age == 14:\n        return 7.5\n    if h_age == 15:\n        return 8\n    if h_age == 16:\n        return 8.5\n    if h_age == 17:\n        return 9\n    if h_age == 18:\n        return 9.5\n    if h_age == 19:\n        return 10\n    if h_age == 20:\n        return 10.5\n    if h_age == 21:\n        return 11\n    if h_age == 22:\n        return 11.5\n    if h_age == 23:\n        return 12\n    if h_age == 24:\n        return 12.5\n    if h_age == 25:\n        return 13\n    if h_age == 26:\n        return 13.5\n    if h_age == 27:\n        return 14\n    if h_age == 28:\n        return 14.5\n    if h_age == 29:\n        return 15\n    if h_age == 30:\n        return 15.5\n    if h_age == 31:\n        return 16\n    if h_age == 32:\n        return 16.5\n    if h_age == 33:\n        return 17\n    if h_age == 34:\n        return 17.5\n    if h_age == 35:\n        return 18\n    if h_age == 36:\n        return 18.5\n    if h_age == 37:\n        return 19\n    if h_age == 38:\n        return 19.5\n    if h_age == 39:\n        return 20\n    if h_age == 40:\n        return 20.5\n    if h_age == 41:\n        return 21\n    if h_age == 42:\n        return 21.5\n    if h_age == 43:\n        return 22\n    if h_age == 44:\n        return 22.5\n    if h_age == 45:\n        return 23\n    if h_age == 46:\n        return 23.5\n    if h_age == 47:\n        return 24\n    if h_age == 48:\n        return 24.5\n    if h_age == 49:\n        return 25\n    if h_age == 50:\n        return 25.5\n    if h_age == 51:\n        return 26\n    if h_age == 52:\n        return 26.5\n    if h_age == 53:\n        return 27\n    if h_age == 54:\n        return 27.5\n    if h_age == 55:\n        return 28\n    if h_age == 56:\n        return 28.5\n    if h_age == 57:\n        return 29\n    if h_age == 58:\n        return 29.5\n    if h_age == 59:\n        return 30\n    if h_age == 60:\n        return 30.5\n    if h_age == 61:\n        return 31\n    if h_age == 62:\n        return 31.5\n    if h_age == 63:\n        return 32\n    if h_age == 64:\n        return 32.5\n    if h_age == 65:\n        return 33\n    if h_age == 66:\n        return 33.5\n    if h_age == 67:\n        return 34\n    if h_age == 68:\n        return 34.5\n    if h_age == 69:\n        return 35\n    if h_age == 70:\n        return 35.5\n    if h_age == 71:\n        return 36\n    if h_age == 72:\n        return 36.5\n    if h_age == 73:\n        return 37\n    if h_age == 74:\n        return 37.5\n    if h_age == 75:\n        return 38\n    if h_age == 76:\n        return 38.5\n    if h_age == 77:\n        return 39\n    if h_age == 78:\n        return 39.5\n    if h_age == 79:\n        return 40\n    if h_age == 80:\n        return 40.5\n    if h_age == 81:\n        return 41\n    if h_age == 82:\n        return 41.5\n    if h_age == 83:\n        return 42\n    if h_age == 84:\n        return 42.5\n    if h_age == 85:\n        return 43\n    if h_age == 86:\n        return 43.5\n    if h_age == 87:\n        return 44\n    if h_age == 88:\n        return 44.5\n    if h_age == 89:\n        return 45\n    if h_age == 90:\n        return 45.5\n    if h_age == 91:\n        return 46\n    if h_age == 92:\n        return 46.5\n    if h_age == 93:\n        return 47\n    if h_age == 94:\n        return 47.5\n    if h_age == 95:\n        return 48\n    if h_age == 96:\n        return 48.5\n    if h_age == 97:\n        return 49\n    if h_age == 98:\n        return 49.5\n    if h_age == 99:\n        return 50\n    if h_age == 100:\n        return 50.5\n    if h_age == 101:\n        return 51\n    if h_age == 102:\n        return 51.5\n    if h_age == 103:\n        return 52\n    if h_age == 104:\n        return 52.5\n    if h_age == 105:\n        return 53\n    if h_age == 106:\n        return 53.5\n    if h_age == 107:\n        return 54\n    if h_age == 108:\n        return 54.5\n    if h_age == 109:\n        return 55\n    if h_age == 110:\n        return 55.5\n    if h_age == 111:\n        return 56\n    if h_age == 112:\n        return 56.5\n    if h_age == 113:\n        return 57\n    if h_age == 114:\n        return 57.5\n    if h_age == 115:\n        return 58\n    if h_age == 116:\n        return 58.5\n    if h_age == 117:\n        return 59\n    if h_age == 118:\n        return 59.5\n    if h_age == 119:\n        return 60\n    if h_age == 120:\n        return 60.5\n    if h_age == 121:\n        return 61\n    if h_age == 122:\n        return 61.5\n    if h_age == 123:\n        return 62\n    if h_age == 124:\n        return 62.5\n    if h_age == 125:\n        return 63\n    if h_age == 126:\n        return 63.5\n    if h_age == 127:\n        return 64\n    if h_age == 128:\n        return 64.5\n    if h_age == 129:\n        return 65\n    if h_age == 130:\n        return 65.5\n    if h_age == 131:\n        return 66\n    if h_age == 132:\n        return 66.5\n    if h_age == 133:\n        return 67\n    if h_age == 134:\n        return 67.5\n    if h_age == 135:\n        return 68\n    if h_age == 136:\n        return 68.5\n    if h_age == 137:\n        return 69\n    if h_age == 138:\n        return 69.5\n    if h_age == 139:\n        return 70\n    if h_age == 140:\n        return 70.5\n    i",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 4640
    },
    {
        "number": 265,
        "max_answer_num": 34,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "test": "assert     list_split([1,2,3,4,5], 1) == [[1],[2],[3],[4],[5]]",
        "num_ids": 1963
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "test": "assert     lateralsurface_cube(1) == 6, lateralsurface_cube(1)",
        "num_ids": 778
    },
    {
        "number": 267,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            x = x + i**2\n    return x\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 882
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(n+1)/2\n",
        "test": "assert     find_star_num(5) == 15",
        "num_ids": 2749
    },
    {
        "number": 269,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 601
    },
    {
        "number": 270,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        if (arr[i] % 2) == 0:\n            total += arr[i]\n    return total\n",
        "test": "assert     sum_even_and_even_index([2,3,4,5,6,7,8,9,10]) == 30",
        "num_ids": 1454
    },
    {
        "number": 271,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    ans = 0\n    for i in range(0,n):\n        if (i%2==0):\n            ans = ans + (i**5)\n    return ans\n",
        "test": "assert     even_Power_Sum(0) == 0",
        "num_ids": 1901
    },
    {
        "number": 272,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [el[-1] for el in test_list]\n",
        "test": "assert     rear_extract([(1,2),(3,4),(5,6)]) == [2,4,6]",
        "num_ids": 1528
    },
    {
        "number": 273,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n",
        "test": "assert     substract_elements((1, 2), (2, 2)) == (-1, 0)",
        "num_ids": 1157
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n + 1):\n        if i % 2 == 0:\n            sum = sum + ( (-1) ** i) / math.factorial(i)\n    return sum\n",
        "test": "assert     (even_binomial_Coeff_Sum(1) == 1)",
        "num_ids": 1623
    },
    {
        "number": 276,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*(r**2)*h\n",
        "test": "assert     volume_cylinder(0,20) == 0",
        "num_ids": 737
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    output={}\n    \n    for key in dict:\n        if dict[key]>=n:\n            output[key]=dict[key]\n    \n    return output\n    \n    \n    ",
        "test": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 2) == {'b': 2, 'c': 3, 'd': 4, 'e': 5}",
        "num_ids": 1349
    },
    {
        "number": 278,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if not test_tup:\n        return 0\n    return len(test_tup[:test_tup.index(test_tup[-1])])\n",
        "test": "assert     count_first_elements(()) == 0",
        "num_ids": 3009
    },
    {
        "number": 279,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    s = str(n)\n    #if n is divisible by 9, then it is a decagonal number\n    if n % 9 == 0:\n        return True\n    #if n is divisible by 3 and 5, then it is a decagonal number\n    if n % 15 == 0:\n        return True\n    for i in range(2, len(s)):\n        if int(s[i]) - int(s[i-1])!= int(s[i-1]) - int(s[i-2]):\n            return False\n    return True\n",
        "test": "assert     is_num_decagonal(1)    == 1",
        "num_ids": 1017
    },
    {
        "number": 280,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    found = False\n    while index < len(dlist) and not found:\n        if dlist[index] == item:\n            found = True\n        else:\n            index = index + 1\n    if found:\n        return (True, index)\n    else:\n        return (False, -1)\n",
        "test": "assert     (True, 1) == sequential_search([1, 2, 3, 4, 5], 2)",
        "num_ids": 1336
    },
    {
        "number": 281,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list_unique = []\n    for i in test_list:\n        if i not in test_list_unique:\n            test_list_unique.append(i)\n    print(test_list_unique)\n    if len(test_list) == len(test_list_unique):\n        return True\n    else:\n        return False\n",
        "test": "assert     all_unique([]) == True",
        "num_ids": 1058
    },
    {
        "number": 282,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    m = len(nums1)\n    n = len(nums2)\n    res = []\n    for i in range(m):\n        res.append(nums1[i] - nums2[i])\n    return res\ndef split_list(nums):\n    '''\n    Write a function to split a list into two equal-sized lists.\n    '''\n    m = len(nums)\n    half = m/2\n    res = []\n    for i in range(half):\n        res.append(nums[i])\n    return res\n",
        "test": "assert     sub_list([1,2,3],[1,2,3]) == [0,0,0]",
        "num_ids": 1119
    },
    {
        "number": 283,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    if len(n) == 1:\n        return True\n    for i in range(10):\n        for j in range(len(n)):\n            if n.count(str(i)) > n.count(str(i)):\n                return False\n    return True\n",
        "test": "assert     validate(0) == True, '0 does not satisfy condition'",
        "num_ids": 3064
    },
    {
        "number": 284,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    assert type(list) == type([])\n    \n    if element not in list:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_element(['a', 'a', 'a'], 'a') == True",
        "num_ids": 1013
    },
    {
        "number": 285,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('[ab]{2,3}', text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three(\"aabbb\") == True",
        "num_ids": 1123
    },
    {
        "number": 286,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    count = [0]*(k+1)\n    for i in range(n):\n        for j in range(k, 0, -1):\n            if i - j >= 0:\n                count[j] = max(count[j], count[j-1] + a[i])\n            else:\n                count[j] = a[i]\n    return count[k]\n",
        "test": "assert     max_sub_array_sum_repeated([-1,-2,-3,4], 1, 3) == -1",
        "num_ids": 1836
    },
    {
        "number": 287,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n**2 + square_Sum(n-2)\n",
        "test": "assert         square_Sum(0)                 == 0",
        "num_ids": 918
    },
    {
        "number": 290,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    for each_list in list1:\n        if len(each_list) > length:\n            length = len(each_list)\n    return length\n",
        "test": "assert max_length([[]]) == 0",
        "num_ids": 2049
    },
    {
        "number": 291,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 1\n    if n < 0 or k < 0:\n        return 0\n    \n    result = 0\n    for c in range(1, k + 1):\n        result += count_no_of_ways(n - 1, k - c)\n    return result\n",
        "test": "assert     count_no_of_ways(0, 0) == 1",
        "num_ids": 1401
    },
    {
        "number": 292,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "test": "assert     find(12,6) == 2",
        "num_ids": 730
    },
    {
        "number": 293,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\n    \ndef rightangled_triangles(a,b,c):\n    '''\n    There are three types of right angled triangles:\n    1. Isosceles triangle\n    2. Equilateral triangle\n    3. Scalene triangle\n    \n    Write a function that takes lengths of the sides of a right-angled triangle\n    and returns a string about the type of the triangle.\n    '''\n    if a==b or a==c or b==c:\n        return 'Equilateral'\n    elif a==b or b==c or a==c:\n        return 'Isosceles'\n    else:\n        return 'Scalene'\n",
        "test": "assert     otherside_rightangle(5,12) == 13",
        "num_ids": 1276
    },
    {
        "number": 294,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if maxval < listval[i]:\n            maxval = listval[i]\n    return maxval\n",
        "test": "assert     max_val(['a', 'a', 'a']) == 'a'",
        "num_ids": 1281
    },
    {
        "number": 295,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "test": "assert     sum_div(1) == 0",
        "num_ids": 851
    },
    {
        "number": 296,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count+=1\n    return count\n",
        "test": "assert     get_Inv_Count([]) == 0, \"error in get_Inv_Count\"",
        "num_ids": 1383
    },
    {
        "number": 297,
        "max_answer_num": 29,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return sum(([x] if not isinstance(x, list) else flatten_list(x) for x in list1), [])\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 1768
    },
    {
        "number": 299,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(stdata, key = lambda i: i[1])\n",
        "test": "assert     max_aggregate([(1, 2), (3, 4), (5, 6)]) == (5, 6)",
        "num_ids": 1625
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0 or n==1:\n        return 1\n    if n==2:\n        return 2\n    return count_binary_seq(n-1) + count_binary_seq(n-2)\n",
        "test": "assert     count_binary_seq(1) == 1",
        "num_ids": 1211
    },
    {
        "number": 301,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + max([dict_depth(v) if isinstance(v, dict) else 0 for v in d.values()]) if d else 0\n",
        "test": "assert     dict_depth( {'key1':'value1', 'key2':'value2', 'key3':'value3'} )     == 1, 'incorrect'",
        "num_ids": 1764
    },
    {
        "number": 304,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= 0 and index < len(arr):\n        return arr[index]\n    else:\n        for i in range(rotations) :\n            index = (index+len(arr))%len(arr)\n        return arr[index]\n    \ndef find_median(arr,ranges,rotations):\n    '''\n    Write a python function to find median of the array after number of rotations.\n    '''\n    if len(arr)%2 == 0:\n        return (find_Element(arr,ranges,rotations,0) + find_Element(arr,ranges,rotations,len(arr)/2))/2.0\n    else :\n        return find_Element(arr,ranges,rotations,0)\n    \ndef rotatestream(arr):\n    '''\n    Write a python function to rotate a stream of elements by one.\n    '''\n    rotations = len(arr)\n    i = 0\n    while i < len(arr) :\n        arr[(i+rotations)%len(arr)] = arr[i]\n        i += 1\n        \n",
        "test": "assert     find_Element([2,2,2,2,1],2,2,1) == 2, \"Test 2 failed\"",
        "num_ids": 1756
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    output = []\n    for word in words:\n        if word[0] == 'p':\n            output.append(word)\n    return output\n",
        "test": "assert     start_withp(['parsnip', 'peers', 'perl', 'purses', 'tiret'])!= ['peers', 'purses']",
        "num_ids": 6948
    },
    {
        "number": 306,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if a[index] > k:\n        return a[index]\n    return max(a[index], max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1))\n",
        "test": "assert     max_sum_increasing_subseq([1, 2, 4, 3, 5, 7], 6, 5, 3) == 7",
        "num_ids": 1870
    },
    {
        "number": 307,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:]+tuplex[:m]\n",
        "test": "assert     colon_tuplex((),1,0) == (())",
        "num_ids": 3014
    },
    {
        "number": 308,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return [max(i*j for i in nums1) for j in nums2]\n",
        "test": "assert     large_product([0,0,0,0,0], [0,0,0,0,0], 4) == [0,0,0,0,0]",
        "num_ids": 2192
    },
    {
        "number": 309,
        "max_answer_num": 28,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n",
        "test": "assert     maximum(5,7) == 7",
        "num_ids": 634
    },
    {
        "number": 310,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    my_list=[]\n    for x in str1:\n        my_list.append(x)\n    tup_list=tuple(my_list)\n    return tup_list\n",
        "test": "assert         string_to_tuple('loves') == ('l', 'o', 'v', 'e','s')",
        "num_ids": 1127
    },
    {
        "number": 311,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & ~(n - 1)\n",
        "test": "assert     set_left_most_unset_bit(0) == 0",
        "num_ids": 1156
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi*(r**2)*h/3\n    return v\n",
        "test": "assert     (volume_cone(1,1) == math.pi/3)",
        "num_ids": 1503
    },
    {
        "number": 388,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    pow_of_2 = 1\n    while pow_of_2 <= n:\n        pow_of_2 = pow_of_2 * 2\n    return pow_of_2 / 2\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 1009
    },
    {
        "number": 389,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 2) + find_lucas(n - 1)\n    \n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 1074
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list\n",
        "test": "assert     add_string(['item1', 'item2', 'item3'], '{}') == ['item1', 'item2', 'item3']",
        "num_ids": 1652
    },
    {
        "number": 391,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in range(0,len(l1)):\n        d1[l1[i]] = {l2[i]:l3[i]}\n    return d1\n",
        "test": "assert     convert_list_dictionary(['key1', 'key2', 'key3'], ['val1', 'val2', 'val3'], ['val4', 'val5', 'val6']) == {'key1': {'val1': 'val4'}, 'key2': {'val2': 'val5'}, 'key3': {'val3': 'val6'}}",
        "num_ids": 2780
    },
    {
        "number": 392,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    max_sum = 0\n    n = math.ceil(n/2)\n    max_sum = max(max_sum, get_max_sum(n) + get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n    return max_sum\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 1385
    },
    {
        "number": 393,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for l in input_list:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_len_list = l\n    return max_len_list\n",
        "test": "assert     max_length_list([[1,2,3],[1,2],[1,2,3,4]]) == [1,2,3,4]",
        "num_ids": 3609
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = ()\n    for i in test_tup:\n        if i in tup:\n            return False\n        else:\n            tup += (i,)\n    return True\n",
        "test": "assert     check_distinct((1, 2, 3, 4, 5, 6, 6)) == False",
        "num_ids": 860
    },
    {
        "number": 395,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1,len(str1)):\n            if str1[i]==str1[j]:\n                break\n        else:\n            return str1[i]\n    return None\n",
        "test": "assert     first_non_repeating_character('cr'),     'c'",
        "num_ids": 1407
    },
    {
        "number": 396,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_char('a') == True",
        "num_ids": 949
    },
    {
        "number": 397,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>=b:\n        if a>=c:\n            if b>=c:\n                return b\n            else:\n                return c\n        else:\n            return a\n    else:\n        if b>=c:\n            if a>=c:\n                return a\n            else:\n                return c\n        else:\n            return b\n",
        "test": "assert     median_numbers(1,1,1) == 1",
        "num_ids": 965
    },
    {
        "number": 398,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(x) for x in str(num))\n    return total\n",
        "test": "assert     [sum_of_digits([18, 7, 6, 6, 5]) == [5, 3, 2], sum_of_digits([18, 7, 6, 6, 5])]",
        "num_ids": 1464
    },
    {
        "number": 399,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return ('Invalid input. One tuple must be of same length as the other',)\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n",
        "test": "assert     bitwise_xor((0, 1), (0, 1)) == (0, 0)",
        "num_ids": 1283
    },
    {
        "number": 400,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    t = test_list.sort()\n    return len(set(test_list))\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 3445
    },
    {
        "number": 401,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([x + y for x, y in zip(test_tup1, test_tup2)])\n",
        "test": "assert         (add_nested_tuples((1,2), (3,4)) == (4,6))",
        "num_ids": 2200
    },
    {
        "number": 404,
        "max_answer_num": 32,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n",
        "test": "assert     minimum(5,1) == 1",
        "num_ids": 733
    },
    {
        "number": 405,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuplex[0] == tuple1[0]) and (tuplex[1] == tuple1[1]):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_tuplex(('a','b','c'),('b','c','d')) == False",
        "num_ids": 3115
    },
    {
        "number": 406,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    bit_sum = 0\n    x = x & 0xFFFFFFFF\n    while(x):\n        bit_sum += x&1\n        x >>= 1\n    return (bit_sum & 1) == 0\n",
        "test": "assert     find_Parity(5) == 1",
        "num_ids": 850
    },
    {
        "number": 407,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    i = len(s)-1\n    while i > 0 and int(s[i-1]) >= int(s[i]):\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(s)-1\n    while int(s[j]) <= int(s[i-1]):\n        j -= 1\n    s = s[:i-1]+s[j]+s[i-1:j]+s[i:len(s)-1]\n    return int(s)\n",
        "test": "assert     rearrange_bigger(12) == 21",
        "num_ids": 1746
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    return heapq.nsmallest(k, [(n1, n2) for n1 in nums1 for n2 in nums2])\n",
        "test": "assert     k_smallest_pairs([1,1,2],[1],1) == [(1,1)]",
        "num_ids": 3829
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    tupList = list(map(lambda x: (x[0],x[1]),list1))\n    return min(map(lambda x: x[0]*x[1],tupList))\n",
        "test": "assert     min_product_tuple([(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]) == 0",
        "num_ids": 2347
    },
    {
        "number": 410,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #initialize the list\n    if len(listval) == 0:\n        return None\n    else:\n        minval = listval[0]\n        for i in range(1,len(listval)):\n            if listval[i] < minval:\n                minval = listval[i]\n        return minval\n",
        "test": "assert     min_val([1,2,3,4,5]) == 1",
        "num_ids": 1158
    },
    {
        "number": 411,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    return word[0] + \"\".join(x.title() for x in word[1:])\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub('(?!^)([A-Z]+[a-z]+|[A-Z0-9]+)', r'_\\1', word)\ndef my_solution(s):\n    return \"\".join(camel_to_snake(w) if w.islower() else w for w in s.split(\"_\"))\n",
        "test": "assert     snake_to_camel(\"CamelCase\") == \"CamelCase\"",
        "num_ids": 1910
    },
    {
        "number": 412,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l == []:\n        return l\n    else:\n        if l[0] % 2 == 1:\n            return [l[0]] + remove_odd(l[1:])\n        else:\n            return remove_odd(l[1:])\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 1441
    },
    {
        "number": 413,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = None\n    for item in list1:\n        if n == 0:\n            result = item\n            break\n        n -= 1\n    return result\n",
        "test": "assert     extract_nth_element([1,2,3,4,5], 4) == 5",
        "num_ids": 1338
    },
    {
        "number": 414,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any([i for i in list1 if i in list2])\n",
        "test": "assert     overlapping([1,2,3,4,5],[1,2,3,4,5,6]) == True",
        "num_ids": 3243
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = arr[0]\n    min = arr[0]\n    result = arr[0]\n    for i in range(1,len(arr)):\n        max_now = max\n        min_now = min\n        max = max_now * arr[i]\n        min = min_now * arr[i]\n        result = max if max > result else result\n    return result\n",
        "test": "assert     max_Product([1,2,3,4]) == 24",
        "num_ids": 3758
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in Input:\n        if Output.count(i[0]) == 0:\n            Output.append(i[0])\n    return Output\n",
        "test": "assert     group_tuples( [ ('a', 1), ('a', 2), ('a', 3) ] ) == ['a']",
        "num_ids": 3996
    },
    {
        "number": 418,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    #Base case\n    if (len(lst)==1):\n        return lst[0]\n    #Recursive case\n    elif (len(lst)==2):\n        if (lst[0]>lst[1]):\n            return lst[0]\n        else:\n            return lst[1]\n    else:\n        if (lst[0]>lst[1]):\n            return Find_Max(lst[1:])\n        else:\n            return Find_Max(lst[2:])\n",
        "test": "assert     Find_Max(['hello', 'hello']) == 'hello'",
        "num_ids": 3488
    },
    {
        "number": 419,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = sum(map(round,list1))\n    return result * len(list1)\n",
        "test": "assert     round_and_sum([4.8, 3.2, 5.9, 2.1, 1.8, 2.2]) == (4.8 + 3.2 + 5.9 + 2.1 + 1.8 + 2.2) * 6, 'incorrect'",
        "num_ids": 1670
    },
    {
        "number": 420,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c = 0\n    for i in range(n):\n        c += i*i*i\n    return c\n",
        "test": "assert     cube_Sum(0) == 0",
        "num_ids": 770
    },
    {
        "number": 421,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    #return \"\".join(str(x) for x in test_tup)\n    return ''.join(str(x) for x in test_tup)\n",
        "test": "assert     concatenate_tuple([]) == ''",
        "num_ids": 1489
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i**3\n    return result / n\n",
        "test": "assert     (find_Average_Of_Cube(1) == 1)",
        "num_ids": 1170
    },
    {
        "number": 424,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(str(i)[-1] for i in test_tuple)\n",
        "test": "assert     (extract_rear(('item1', 'item2', 'item3', 'item4', 'item5')) == ('1', '2', '3', '4', '5'))",
        "num_ids": 1350
    },
    {
        "number": 425,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([], 1) == 0",
        "num_ids": 3320
    },
    {
        "number": 426,
        "max_answer_num": 25,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 1]\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 1269
    },
    {
        "number": 427,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:]+\"-\"+dt[3:5]+\"-\"+dt[0:2]\n",
        "test": "assert     change_date_format('09-06-29') == '29-06-09'",
        "num_ids": 2203
    },
    {
        "number": 428,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([])    == []",
        "num_ids": 4116
    },
    {
        "number": 429,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple(i and j for i, j in zip(test_tup1, test_tup2))\n    return and_tup\n",
        "test": "assert     and_tuples((1,2,3),(1,2,3)) == (1,2,3)",
        "num_ids": 2025
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = b * (-2) + (b * b) + (4 * a * c)\n    x = x / (2 * a)\n    return x\n",
        "test": "assert     parabola_directrix(4, 4, 0) == 1.0",
        "num_ids": 811
    },
    {
        "number": 431,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1) & set(list2):\n        return True\n    else:\n        return False\n",
        "test": "assert     common_element([1, 2, 3], [1, 2, 3]) == True",
        "num_ids": 1307
    },
    {
        "number": 432,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2.0 * height\n",
        "test": "assert     median_trapezium(0,1,1) == 0.5",
        "num_ids": 2182
    },
    {
        "number": 433,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return len(arr) > number\n",
        "test": "assert     check_greater([], 1) == False",
        "num_ids": 989
    },
    {
        "number": 434,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.search('a[b]+', text))\n",
        "test": "assert     re.match(r'a(.*?)b', 'ab')",
        "num_ids": 835
    },
    {
        "number": 435,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    elif n < 0 :\n        return last_Digit(-n) * -1\n    else :\n        return int(str(n)[-1])\n",
        "test": "assert     last_Digit(1) == 1",
        "num_ids": 2515
    },
    {
        "number": 436,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l = []\n    for i in list1:\n        if i < 0:\n            l.append(i)\n    return l\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 1950
    },
    {
        "number": 437,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([c for c in str1 if c.isalpha()])\n",
        "test": "assert     remove_odd(\"\") == \"\", \"An empty string is also odd\"",
        "num_ids": 1119
    },
    {
        "number": 438,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #Your code here\n    result = 0\n    for x in range(len(test_list)):\n        for y in range(x + 1, len(test_list)):\n            if test_list[x] > test_list[y]:\n                result += 1\n    return result\n",
        "test": "assert     count_bidirectional([]) == 0, '''Wrong'''",
        "num_ids": 2097
    },
    {
        "number": 439,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        result = result * 10 + L[i]\n    return result\n",
        "test": "assert     multiple_to_single([1]) == 1",
        "num_ids": 1299
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text is None or len(text) == 0:\n        return []\n",
        "test": "assert     find_adverb_position('We have a dog') == (2,5)",
        "num_ids": 2187
    },
    {
        "number": 441,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    sa = 6 * l ** 2\n    return sa\n",
        "test": "assert     surfacearea_cube(3) == 54",
        "num_ids": 754
    },
    {
        "number": 442,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count = count + 1\n    return count/len(nums)\n",
        "test": "assert     positive_count([0, 0, 0, 0, 0]) == 0",
        "num_ids": 3308
    },
    {
        "number": 443,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if (num < 0):\n            if largest is None:\n                largest = num\n            elif (num > largest):\n                largest = num\n    return largest\n",
        "test": "assert     (largest_neg([-1.2, -1.7, -3.4, -6.5]) == -1.2)",
        "num_ids": 1618
    },
    {
        "number": 444,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Remove the first index and remove the last index\n    # Trim by k from the front\n    # Trim by k from the end\n    for item in test_list:\n        item = item[K:]\n        item = item[:-K]\n        item = list(item)\n    return test_list\n",
        "test": "assert         trim_tuple([], 1)     == []",
        "num_ids": 2020
    },
    {
        "number": 445,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n    else:\n        result = tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n        return result\n",
        "test": "assert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 1532
    },
    {
        "number": 446,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = 0\n    for i in lst:\n        if i in tup:\n            res += 1\n    return res\n",
        "test": "assert     count_Occurrence((1,2,3), [1,2,3]) == 3",
        "num_ids": 3645
    },
    {
        "number": 447,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    #return [i**3 for i in nums]\n    return [i ** 3 for i in nums if type(i) == int]\n",
        "test": "assert     cube_nums([1,2,3,4]) == [1,8,27,64], 'incorrect'",
        "num_ids": 1233
    },
    {
        "number": 448,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)/2\n",
        "test": "assert     cal_sum(1) == 1",
        "num_ids": 940
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = \"\"\n    for i in range(l):\n        s = s + str + \"\\n\"\n    return s\n",
        "test": "assert     extract_string('atgccagt', 0) == ''",
        "num_ids": 1046
    },
    {
        "number": 451,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n",
        "test": "assert     remove_whitespaces('    sai') =='sai'",
        "num_ids": 1567
    },
    {
        "number": 452,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\ndef loss_amount_in_percent(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount in percent if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return (actual_cost-sale_amount)/actual_cost\n    else:\n        return 0\ndef profit_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives profit amount on a sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\ndef profit_amount_in_percent(actual_cost,sale_amount):\n    '''\n    Write a function that gives profit amount in percent if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return (sale_amount-actual_cost)/sale_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(100,100) == 0",
        "num_ids": 643
    },
    {
        "number": 453,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            else:\n                sum += n // i\n    return sum\n",
        "test": "assert     (sumofFactors(0) == 0)",
        "num_ids": 1233
    },
    {
        "number": 454,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return bool(re.search(r'\\bz\\b', text))\n",
        "test": "assert not     text_match_wordz('this is a text ')",
        "num_ids": 913
    },
    {
        "number": 455,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # write your code here\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(1) == True",
        "num_ids": 1573
    },
    {
        "number": 456,
        "max_answer_num": 21,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # https://stackoverflow.com/questions/23627755/reverse-list-of-strings\n    return list(reversed([x.strip('\\n') for x in stringlist]))\n",
        "test": "assert     reverse_string_list(['a', 'b', 'c', 'd', 'e'])     == ['e', 'd', 'c', 'b', 'a']",
        "num_ids": 1391
    },
    {
        "number": 457,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for s in lst[1:]:\n        if len(s) < len(min):\n            min = s\n    return min\n",
        "test": "assert     Find_Min([[1,2,3,4], [1,3,4,5], [1,2,3,4]])==[1,2,3,4]",
        "num_ids": 2367
    },
    {
        "number": 458,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(4,5) == 20",
        "num_ids": 679
    },
    {
        "number": 459,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str=\"\"\n    for i in str1:\n        if i.isupper():\n            i = i.lower()\n        new_str = new_str + i\n    return new_str\n",
        "test": "assert     remove_uppercase('welcome to mr.bean') == 'welcome to mr.bean'",
        "num_ids": 5230
    },
    {
        "number": 460,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = [] \n    for i in lst: \n        res.append(i[0]) \n    return res \n",
        "test": "assert     Extract([[1,2,3], [4,5,6], [7,8,9]])     ==     [1, 4, 7]",
        "num_ids": 1287
    },
    {
        "number": 461,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    result = 0\n    for i in str:\n        if i.isupper():\n            result += 1\n    return result\n",
        "test": "assert     (upper_ctr(\"\") == 0)",
        "num_ids": 905
    },
    {
        "number": 462,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if list1 == []:\n        return [[]]\n    result = []\n    for i in range(len(list1)):\n        # print i, list1[i], list1[0:i] + list1[i+1:]\n        result += [[list1[i]] + p for p in combinations_list(list1[0:i]+list1[i+1:])]\n    return result\n",
        "test": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]",
        "num_ids": 4023
    },
    {
        "number": 463,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n        max_product = max(max_product, current_product)\n    return max_product\n",
        "test": "assert     max_subarray_product([1,2,3]) == 6",
        "num_ids": 1783
    },
    {
        "number": 464,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= n:\n            return False\n    return True\n",
        "test": "assert     check_value({'a':1, 'b':1, 'c':3}, 'd') == False",
        "num_ids": 1398
    },
    {
        "number": 465,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        if dict1[key]:\n            new_dict[key] = dict1[key]\n    return new_dict\n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 1647
    },
    {
        "number": 468,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            product = max(product, arr[i])\n        else:\n            product = product * arr[i]\n    return product\n",
        "test": "assert max_product([-2,0,-1]) == 0",
        "num_ids": 5345
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #Remove the first and the last element of the tuple\n    test_list = test_tup[1:len(test_tup)-1]\n    #Iterate over the list of tuple and add them\n    result = []\n    for i in range(0, len(test_list)-1):\n        result.append(test_list[i] + test_list[i+1])\n    #Return the new tuple\n    return tuple(result)\n",
        "test": "assert     add_pairwise((5, 7, 8, 9)) == (13, 16, 19, 22)",
        "num_ids": 1385
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in arr:\n        res = (res * i) % n\n    return res\n",
        "test": "assert     find_remainder([1,2,3], 6)         ==     0",
        "num_ids": 953
    },
    {
        "number": 472,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            return False\n    return True\ndef check_Consecutive_2(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return True\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            return False\n    return True\n",
        "test": "assert     check_Consecutive([1, 2, 4, 5])     == False",
        "num_ids": 1377
    },
    {
        "number": 473,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for elt in test_list1:\n        if elt in test_list2:\n            result.append(elt)\n    return result\n",
        "test": "assert     tuple_intersection([(1,2,3),(2,3,4),(3,4,5),(4,5,6)],[]) == []",
        "num_ids": 2038
    },
    {
        "number": 474,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str1 = ''\n    for s in str1:\n        if s == ch:\n            new_str1 += newch\n        else:\n            new_str1 += s\n    return new_str1\n",
        "test": "assert     replace_char('abc', 'a', 'z') == 'zbc'",
        "num_ids": 942
    },
    {
        "number": 475,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    keys_list = []\n    for key in dict1:\n        keys_list.append(key)\n    return sorted(keys_list, key = lambda k: dict1[k])\n",
        "test": "assert     sort_counter({}) == [], 'incorrect'",
        "num_ids": 2500
    },
    {
        "number": 476,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    result = sum(nums)\n    return result\n",
        "test": "assert     big_sum([0,0]) == 0, \"actual: %s, expected: %s\" % (big_sum([0,0]), 0)",
        "num_ids": 925
    },
    {
        "number": 477,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string == string.lower():\n        return True\n    return False\n",
        "test": "assert     is_lower('w3resource')",
        "num_ids": 644
    },
    {
        "number": 478,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return ''.join(str1.split(str1.lower()))\n",
        "test": "assert     remove_lowercase('HELLO') == 'HELLO'",
        "num_ids": 2790
    },
    {
        "number": 479,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n < 10) :\n        return n\n    else :\n        return first_Digit(n // 10)\n",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 658
    },
    {
        "number": 554,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num%2!= 0]\n",
        "test": "assert     Split([])    == [], \"Test #3: failed\"",
        "num_ids": 1667
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i*i*i for i in range(1, n+1)]) - sum([i for i in range(1, n+1)])\n",
        "test": "assert     difference(0)     ==    0",
        "num_ids": 877
    },
    {
        "number": 556,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Write your code here\n    from collections import Counter\n    return Counter(a^b for a,b in zip(A,A[1:]))['1']\n",
        "test": "assert     find_Odd_Pair([],0) == 0",
        "num_ids": 1495
    },
    {
        "number": 557,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string(\"a\") == \"A\"",
        "num_ids": 1226
    },
    {
        "number": 558,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(a)-int(b)) for a, b in zip(str(n1), str(n2)))\n",
        "test": "assert     digit_distance_nums(19922, 19922) == 0",
        "num_ids": 1309
    },
    {
        "number": 559,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
        "test": "assert     max_sub_array_sum([1, 2, 3, 4, 5], 4) == 10, \"Error in max_sub_array_sum\"",
        "num_ids": 1932
    },
    {
        "number": 560,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
        "test": "assert     union_elements(('aa', 'bb'), ('bb', 'cc')) == ('aa', 'bb', 'cc')",
        "num_ids": 1683
    },
    {
        "number": 562,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sub_list = []\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sub_list.append(lst[i:j + 1])\n    max_length = len(sub_list[0])\n    for sub_list in sub_list:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    return max_length\n",
        "test": "assert     Find_Max_Length([1]) == 1",
        "num_ids": 2189
    },
    {
        "number": 563,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #TODO: Fix the list indices in the step function.\n    #TODO: Handle multiple commas in the sentence.\n    values = []\n    start = 0\n    while True:\n        start = text.find('\\\"',start)\n        if start == -1:\n            break\n        end = text.find('\\\"',start+1)\n        if end == -1:\n            break\n        values.append(text[start+1:end])\n        start = end+1\n    return values\n",
        "test": "assert     extract_values('a') == []",
        "num_ids": 1644
    },
    {
        "number": 564,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    # for i in range(n-1):\n    #     for j in range(i+1,n):\n    #         if(arr[i]!=arr[j]):\n    #             count += 1\n    # return count\n    return count\n",
        "test": "assert     count_Pairs([1, 2, 3, 4, 5],0) == 0",
        "num_ids": 1608
    },
    {
        "number": 565,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert     split('abc') == ['a', 'b', 'c']",
        "num_ids": 1113
    },
    {
        "number": 566,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    return sum(int(i) for i in str(n))\n",
        "test": "assert     sum_digits(123) == 6",
        "num_ids": 793
    },
    {
        "number": 567,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([]) == True",
        "num_ids": 1070
    },
    {
        "number": 568,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 828
    },
    {
        "number": 569,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(li) for li in list1]\n",
        "test": "assert     sort_sublists( [['a', 'b', 'c', 'd', 'e'], ['f', 'g', 'h', 'i'], ['j', 'k', 'l']] ) == [['a', 'b', 'c', 'd', 'e'], ['f', 'g', 'h', 'i'], ['j', 'k', 'l']]",
        "num_ids": 2564
    },
    {
        "number": 572,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for num in nums:\n        if num not in unique:\n            unique.append(num)\n    return unique\n",
        "test": "assert     two_unique_nums([1, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1913
    },
    {
        "number": 573,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    list_data = [int(x) for x in list_data]\n    for item in list_data:\n        if item not in unique_list:\n            unique_list.append(item)\n    product = 1\n    for item in unique_list:\n        product *= item\n    return product\n",
        "test": "assert     unique_product([1,2,3,4,5]) == 120",
        "num_ids": 1171
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi * (r**2) + 2 * math.pi * r * h\n",
        "test": "assert ",
        "num_ids": 848
    },
    {
        "number": 576,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in B:\n        if i not in A:\n            return False\n    return True\n",
        "test": "assert     is_Sub_Array([1,2,3,4,5],[5,4,3,6,1])     == False",
        "num_ids": 1727
    },
    {
        "number": 577,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = 1\n    while n > 1:\n        last_digit = last_digit * n % 10\n        n = n//10\n    return last_digit\n",
        "test": "assert     last_Digit_Factorial(105) == 0",
        "num_ids": 5012
    },
    {
        "number": 578,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    out = []\n    for i in range(len(list1)):\n        out += [list1[i]] + [list2[i]] + [list3[i]]\n    return out\n",
        "test": "assert     interleave_lists([],[],[]) == []",
        "num_ids": 2054
    },
    {
        "number": 579,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [x for x in test_tup1 if x not in test_tup2]\n",
        "test": "assert     find_dissimilar(('A', 'B', 'C'), ('A', 'B', 'C')) ==         []",
        "num_ids": 1790
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = list(test_tuple)\n    for index, elem in enumerate(test_tuple):\n        if elem % 2 == 0:\n            test_tuple[index] = even_fnc(elem)\n    test_tuple = tuple(test_tuple)\n    return test_tuple\n",
        "test": "assert ",
        "num_ids": 1083
    },
    {
        "number": 581,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    total = b*s\n    return total\n    \ndef vertical_Surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    total = 2*(b*s)+b*s\n    return total\n",
        "test": "assert     surface_Area(1,1) == 1",
        "num_ids": 2698
    },
    {
        "number": 582,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # Write your code here\n    return (len(dict1) == 0)\n",
        "test": "assert     my_dict({})",
        "num_ids": 788
    },
    {
        "number": 583,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 1:\n        return 0\n    if num == 1:\n        return 1\n    a = [1,1,2]\n    for i in range(3,num+1):\n        a.append(0)\n        for j in range(i):\n            a[i] += a[j] * a[i-j-1]\n    return a[num]\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 1142
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_pattern = re.compile('[aeiou]*ly$', re.IGNORECASE)\n    ly_matches = re.findall(ly_pattern, text)\n    if len(ly_matches) > 0:\n        return ly_matches[0], text.index(ly_matches[0]), len(ly_matches[0])\n    else:\n        return None, None, None\n",
        "test": "assert     re.search('[^aeiou]y', 'bbly')",
        "num_ids": 3781
    },
    {
        "number": 585,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # items=[item1,item2,item3,item4,item5,item6,item7,item8,item9,item10]\n    # n=3\n    return heapq.nlargest(n,items)\n",
        "test": "assert     expensive_items([],0)         == []",
        "num_ids": 1976
    },
    {
        "number": 586,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    for i in range(0, n):\n        arr.append(l[i])\n    for i in range(n, len(l)):\n        arr.append(l[i])\n    return arr\n",
        "test": "assert     split_Arr([1,2,3,4], 4) == [1,2,3,4]",
        "num_ids": 947
    },
    {
        "number": 587,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1, 2, 3])     ==     (1, 2, 3)",
        "num_ids": 709
    },
    {
        "number": 588,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1]-nums[0]\n",
        "test": "assert     big_diff([1, 0]) == 1",
        "num_ids": 816
    },
    {
        "number": 589,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    start = int(a**0.5)\n    end = int(b**0.5)\n    \n    s = []\n    \n    for i in range(start, end+1):\n        if i**2 >= a and i**2 <= b:\n            s.append(i**2)\n    \n    return s\n",
        "test": "assert     perfect_squares(0, 0) == [0]",
        "num_ids": 3613
    },
    {
        "number": 590,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(complex(x,y))\n    return (r[0],r[1])\n",
        "test": "assert     polar_rect(0,0) == (0,0)",
        "num_ids": 1370
    },
    {
        "number": 591,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    i = 0\n    j = len(newList) - 1\n    # use a while loop to swap the first and last elements\n    while i < j:\n        newList[i], newList[j] = newList[j], newList[i]\n        i = i + 1\n        j = j - 1\n    return newList\n",
        "test": "assert     swap_List([1]) == [1]",
        "num_ids": 1451
    },
    {
        "number": 592,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    if (k > n - k):\n        k = n - k\n    for i in range(0, k):\n        res = res * (n - i)\n        res = res // (i + 1)\n    return res\n",
        "test": "assert     binomial_Coeff(1,1)    == 1",
        "num_ids": 1441
    },
    {
        "number": 593,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_addr = ip.split('.')\n    ip_addr[3] = re.sub('\\.[0]*', '', ip_addr[3])\n    return '.'.join(ip_addr)\n",
        "test": "assert     removezero_ip('8.8.8.8') == '8.8.8.8'",
        "num_ids": 1476
    },
    {
        "number": 594,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for item in list1:\n        if item % 2 == 0:\n            even_list.append(item)\n        else:\n            odd_list.append(item)\n    return even_list[0] - odd_list[0]\n",
        "test": "assert     diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1593
    },
    {
        "number": 595,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    for i in range(len(str1)):\n        if(str1[i]!=str2[i]):\n            #print(str1[i],str2[i])\n            count=count+1\n    return count ",
        "test": "assert     min_Swaps('010101','010101') == 0",
        "num_ids": 1756
    },
    {
        "number": 596,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n",
        "test": "assert     tuple_size(()) == 0",
        "num_ids": 6101
    },
    {
        "number": 597,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1:\n        return arr2[k-1]\n    if not arr2:\n        return arr1[k-1]\n    \n    if len(arr1) == 1:\n        return min(arr1[0], arr2[k-1])\n    \n    # TODO - find the middle elemnt in the array \n    mid = len(arr1)//2\n    \n    # TODO - to handle odd number of elements\n    if len(arr1)%2 == 1:\n        if k <= mid:\n            return find_kth(arr1[:mid], arr2, k)\n        else:\n            return find_kth(arr1[mid:], arr2, k-mid)\n    else:\n        if k <= mid:\n            return find_kth(arr1[:mid], arr2, k)\n        else:\n            return find_kth(arr1[mid:], arr2, k-mid)\n",
        "test": "assert     find_kth([-4, -3, -2, -1], [1, 2, 3, 4, 5, 6], 1) == -4",
        "num_ids": 2593
    },
    {
        "number": 598,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # number_string = str(number)\n    # for i in range(0,len(number_string)):\n    #     temp = number_string[i]\n    #     temp = int(temp)**len(number_string)\n    #     if temp == int(number_string):\n    #         return True\n    # return False\n    number_string = str(number)\n    if number == 0:\n        return True\n    return sum([int(i)**len(number_string) for i in number_string]) == int(number)\n    # return sum(int(i)**len(number_string) for i in number_string) == int(number)\n",
        "test": "assert     not armstrong_number(150)",
        "num_ids": 1346
    },
    {
        "number": 599,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for num in range(1, number + 1):\n        total += num\n    average = total / number\n    return total, average\n",
        "test": "assert     (sum_average(1) == (1.0, 1.0))",
        "num_ids": 955
    },
    {
        "number": 600,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    return False\n",
        "test": "assert     is_Even(2) == True",
        "num_ids": 698
    },
    {
        "number": 602,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for x in str1:\n        if str1.count(x)>1:\n            return x\n",
        "test": "assert     first_repeated_char('aa') == 'a'",
        "num_ids": 1131
    },
    {
        "number": 603,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n):\n        a = str(i)\n        b = str(i+1)\n        if len(a) > len(b):\n            continue\n        if len(a) < len(b):\n            a, b = b, a\n        if a == b:\n            continue\n        for j in range(0,len(b)):\n            if a[j]!= b[j]:\n                break\n        if j == len(b)-1:\n            ludic.append(i)\n    return ludic\n",
        "test": "assert     get_ludic(0)     == []",
        "num_ids": 6416
    },
    {
        "number": 604,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n",
        "test": "assert reverse_words(\"\") == \"\"",
        "num_ids": 1239
    },
    {
        "number": 605,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True\n",
        "test": "assert     prime_num(2) == True",
        "num_ids": 1022
    },
    {
        "number": 606,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "test": "assert     radian_degree(0) == 0",
        "num_ids": 972
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #pattern = r'\\(.*?\\)'\n    #text = '(Beam:)((((?<!\\(.*?\\))(?<!\\).*?\\.))|((?<!\\(.*?\\))(?<!\\).*?))'\n    #text = '(Beam:)((((?<!\\(.*?\\))(?<!\\).*?\\.))|((?<!\\(.*?\\))(?<!\\).*?))'\n    #pattern = r'\\s{1,2}\\w{1,100}\\s'\n    #pattern = r'\\s{1,2}\\w{1,100}\\s'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'[0-9]+'\n    #text = '1 2 3 4 5 6'\n    #text = '1 2 3 4 5'\n    #pattern = r'\\s{1,2}\\w{1,100}'\n    #pattern = r'\\s{1,2}\\",
        "test": "assert     re.findall('[abc]', 'abc') == ['a', 'b', 'c']",
        "num_ids": 3462
    },
    {
        "number": 608,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    a = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            a[i] += bell[j - 1] * bell[i - j]\n        bell.append(a[i])\n    return bell[n]\n",
        "test": "assert     bell_Number(1)    == 1",
        "num_ids": 916
    },
    {
        "number": 610,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) < L:\n        return list1\n    else:\n        list1.pop(L-1)\n        return list1\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]",
        "num_ids": 1629
    },
    {
        "number": 611,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = []\n    for row in test_list:\n        max_col.append(row[N-1])\n    return max(max_col)\n",
        "test": "assert     max_of_nth([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 2) == 10",
        "num_ids": 1747
    },
    {
        "number": 612,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [list(x) for x in zip(*lst)] \n",
        "test": "assert     merge([[1,2],[3,4]]) == [[1,3],[2,4]]",
        "num_ids": 1930
    },
    {
        "number": 614,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:i]) for i in range(1,len(test_list)+1)]\n",
        "test": "assert     cummulative_sum( [0, 1, 2, 3, 4] ) == [0, 1, 3, 6, 10]",
        "num_ids": 1576
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(x)/len(x)) for x in zip(*nums)]\n",
        "test": "assert         average_tuple(((1, 2), (3, 4))) == [2.0, 3.0]",
        "num_ids": 1693
    },
    {
        "number": 616,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # MODULO FUNCTION TAKES TWO TUPLES AND RETURNS THEIR MODULO.\n    # return tuple([a%b for a,b in zip(test_tup1,test_tup2)])\n    return tuple([a%b for a,b in zip(test_tup1,test_tup2)])\n",
        "test": "assert     tuple_modulo((-1, -2, -3, -4, -5), (1, 2, 3, 4, 5)) == (0, 0, 0, 0, 0)",
        "num_ids": 1722
    },
    {
        "number": 617,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    import numpy as np\n    step_count = 0\n    while steps > 0:\n        if steps%2 == 0:\n            step_count += 1\n        steps = int(steps/2)\n    return step_count\n",
        "test": "assert     min_Jumps(1, 0) == 0",
        "num_ids": 2410
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [nums1[i] / nums2[i] for i in range(len(nums1))]\n",
        "test": "assert     div_list( [ 1, 2, 3, 4 ], [ 2, 4, 6, 8 ] )     == [ 0.5, 0.5, 0.5, 0.5 ]",
        "num_ids": 1389
    },
    {
        "number": 619,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i = 0\n    for i in range(0, len(test_str)):\n        if not test_str[i].isdigit():\n            i += 1\n        else:\n            test_str = test_str[:i] + test_str[i].upper() + test_str[i+1:]\n    return test_str\n",
        "test": "assert     '1234567890' == move_num('1234567890')",
        "num_ids": 1415
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets = [[]]\n    for num in a:\n        subsets += [x+[num] for x in subsets]\n    return max(subsets, key=len)\n",
        "test": "assert     [5, 10, 15, 25, 50] == largest_subset([5, 10, 15, 25, 50])",
        "num_ids": 2146
    },
    {
        "number": 622,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    size = n + 1\n    median = 0\n    while (i < size and j < size):\n        if arr1[i] > arr2[j]:\n            size -= 1\n            j += 1\n        else:\n            size -= 1\n            i += 1\n    if size % 2 == 1:\n        median = arr1[i]\n    else:\n        median = (arr1[i] + arr2[j]) / 2\n    return median\n",
        "test": "assert     get_median([1,2,3,4,5], [2,3,4,5,6], 5) == 3.5",
        "num_ids": 2562
    },
    {
        "number": 623,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for i in nums:\n        res.append(i**n)\n    return res\n",
        "test": "assert     nth_nums([1,2,3,4], 2) == [1, 4, 9, 16]",
        "num_ids": 477
    },
    {
        "number": 624,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) == 0:\n        return True\n    if string[0].isupper():\n        return True\n    else:\n        return False\n",
        "test": "assert     is_upper('WELCOME TO THE PYTHON WORLD')",
        "num_ids": 631
    },
    {
        "number": 625,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n",
        "test": "assert     swap_List(['A', 'B', 'C']) == ['C', 'B', 'A']",
        "num_ids": 1659
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area_a = r * r * math.pi / 2\n    area_b = r * r * math.pi / 4\n    return max(area_a, area_b)\n",
        "test": "assert     triangle_area(0.0) == 0.0",
        "num_ids": 1021
    },
    {
        "number": 627,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return None\n    if start==end:\n        if array[start]!=start+1:\n            return start+1\n        else:\n            return None\n    mid=(start+end)//2\n    if array[mid]==mid+1:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n",
        "test": "assert     find_First_Missing([1,2,3,5,6,7,8,9,10]) == 4",
        "num_ids": 3462
    },
    {
        "number": 628,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    import re\n    return re.sub(r'\\s+', '%20', string)\n",
        "test": "assert     replace_spaces('') == ''",
        "num_ids": 1041
    },
    {
        "number": 629,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for num in list:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8]) == [2,4,6,8]",
        "num_ids": 1611
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 0:\n        return sub\n    else:\n        return adjac(ele[1:], [ele[0]] + sub)\n",
        "test": "assert ",
        "num_ids": 2297
    },
    {
        "number": 631,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    numbers = '0123456789'\n    results = ''\n    for ch in text:\n        if ch in letters or ch in numbers:\n            results += ch\n        else:\n            results += '_'\n    return results\n",
        "test": "assert     replace_spaces('hi') == 'hi'",
        "num_ids": 1516
    },
    {
        "number": 632,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if not num_list:\n        return []\n    new_list = [x for x in num_list if x!= 0]\n    return new_list + [0]*num_list.count(0)\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 2342
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum([a^b for (a,b) in zip(arr[:-1],arr[1:])])\n",
        "test": "assert     pair_xor_Sum([1,2,3,4,5,6,7],7)==16",
        "num_ids": 1538
    },
    {
        "number": 635,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef find_kth_largest(arr,k):\n    '''\n    arr = [1,2,3,4,5,6]\n    k = 2\n    Find the kth largest element in the array.\n    '''\n    k_largest = None\n    for i in range(k):\n        if k_largest is None:\n            k_largest = arr[i]\n        else:\n            if arr[i] > k_largest:\n                k_largest = arr[i]\n    return k_largest\ndef find_kth_smallest(arr,k):\n    '''\n    Find the kth smallest element in the array\n    '''\n    k_smallest = None\n    for i in range(k):\n        if k_smallest is None:\n            k_smallest = arr[i]\n        else:\n            if arr[i] < k_smallest:\n                k_smallest = arr[i]\n    return k_smallest\ndef find_kth_smallest_number(arr,k):\n    '''\n    Find the kth smallest number in the array.\n    '''\n    k_smallest = None\n    for i in range(k):\n        if k_smallest is None:\n            k_smallest = arr[i]\n        else:\n            if arr[i] < k_smallest:\n                k_smallest = arr[i]\n    return k_smallest\ndef find_kth_largest_number(arr,k):\n    '''\n    Find the kth largest number in the array.\n    '''\n    k_largest = None\n    for i in range(k):\n        if k_largest is None:\n            k_largest = arr[i]\n        else:\n            if arr[i] > k_largest:\n                k_largest = arr[i]\n    return k_largest\ndef find_kth_smallest_pair(arr,k):\n    '''\n    Find the kth smallest pair in the array.\n    '''\n    k_smallest = None\n    for i in range(k):\n        if k_smallest is None:\n            k_smallest = (arr[i],i)\n        else:\n            if arr[i] < k_smallest[0]:\n                k_smallest = (arr[i],i)\n    return k_smallest\ndef find_kth_largest_pair(arr,k):\n    '''\n    Find the kth largest pair in the array.\n    '''\n    k_largest = None\n    for i in range(k):\n        if k_largest is None:\n            k_largest = (arr[i],i)\n        else:\n            if arr[i] > k_largest[0]:\n                k_largest = (arr[i],i)\n    return k_largest\ndef find_kth_smallest_pair_without_index(arr,k):\n    '''\n    Find the kth smallest pair in the array without using index.\n    '''\n    if k == 0:\n        return None\n    k_smallest = None\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if k_smallest is None:\n                k_smallest = (arr[i],arr[j])\n            else:\n                if arr[i] > arr[j]:\n                    k_smallest = (arr[i],arr[j])\n    return k_smallest\ndef find_kth_largest_pair_without_index(arr,k):\n    '''\n    Find the kth largest pair in the array without using index.\n    '''\n    if k == 0:\n        return None\n    k_largest = None\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if k_largest is None:\n                k_largest = (arr[i],arr[j])\n            else:\n                if arr[i] < arr[j]:\n                    k_largest = (arr[i],arr[j])\n    return k_largest\ndef find_kth_smallest_pair_with_index(arr,k):\n    '''\n    Find the kth smallest pair in the array with index.\n    '''\n    k_smallest = None\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if k_smallest is None:\n                k_smallest = (i,j)\n            else:\n                if arr[i] > arr[j]:\n                    k_smallest = (i,j)\n    return k_smallest\ndef find_kth_largest_pair_with_index(arr,k):\n    '''\n    Find the kth largest pair in the array with index.\n    '''\n    k_largest = None\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if k_largest is None:\n                k_largest = (i,j)\n            else:\n                if arr[i] < arr[j]:\n                    k_largest = (i,j)\n    return k_largest\ndef find_kth_smallest_number_with_index(arr,k):\n    '''\n    Find the kth smallest number in the array with index.\n    '''\n    k_smallest = None\n    for i in range(len(arr)):\n        if k_smallest is None:\n            k_smallest = i\n        else:\n            if arr[i] < arr[k_smallest]:\n                k_smallest = i\n    return k_smallest\ndef find_kth_largest_number_with_index(arr,k):\n    '''\n    Find the kth largest number in the array with index.\n    '''\n    k_largest = None\n    for i in range(len(arr)):\n        if k_largest is None:\n            k_largest = i\n        else:\n            if arr[i] > arr[k_largest]:\n                k_largest = i\n    return k_largest\ndef find_kth_smallest_pair_with_index(arr,k):\n    '''\n    Find the kth smallest pair in the array with index.\n    '''\n    if k == 0:\n        return None\n    k_smallest = None\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if k_smallest is None:\n                k_smallest = (i,j)\n            else:\n                if arr[i] > arr[j]:\n                    k_smallest = (i,j)\n    return k_smallest\ndef find_kth_largest_pair_with_index(arr,k):\n    '''\n    Find the kth largest pair in the array with index.\n    '''\n    if k == 0:\n        return None\n    k_largest = None\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if k_largest is None:\n                k_largest = (i,j)\n            else:\n                if arr[i] < arr[j]:\n                    k_largest = (i,j)\n    return k_largest\ndef find_kth_smallest_number_with_index(arr,k):\n    '''\n    Find the kth smallest number in the array with index.\n    '''\n    if k == 0:\n        return None\n    k_smallest = None\n    for i in range(len(arr)):\n        if k_smallest is None:\n            k_smallest = i\n        else:\n            if arr[i] < arr[k_smallest]:\n                k_smallest = i\n    return k_smallest\ndef find_kth_largest_number_with_index(arr,k):\n    '''\n    Find the kth largest number in the array with index.\n    '''\n    if k == 0:\n        return None\n    k_largest = None\n    for i in range(len(arr)):\n        if k_largest is None:\n            k_largest = i\n        else:\n            if arr[i] > arr[k_largest]:\n                k_largest ",
        "test": "assert     [1, 2, 3, 4, 5] == heap_sort([5, 4, 3, 2, 1])",
        "num_ids": 1481
    },
    {
        "number": 637,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= 0: \n        return True\n    return actual_cost <= sale_amount\n",
        "test": "assert     noprofit_noloss(10,10) == True",
        "num_ids": 1105
    },
    {
        "number": 638,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + (0.6215 * t) - (11.37 * math.pow(v,0.16)) + (0.3965 * t * math.pow(v,0.16))\n    return int(math.ceil(wci))\n",
        "test": "assert     wind_chill(50,25) == 26.0",
        "num_ids": 1510
    },
    {
        "number": 639,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    nam_sum = 0\n    for name in sample_names:\n        if not name[0].isupper():\n            nam_sum += len(name)\n    return nam_sum\n",
        "test": "assert     sample_nam([\"DANIEL\"]) == 0",
        "num_ids": 2829
    },
    {
        "number": 640,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result=''\n    for i in items:\n        if i=='(':\n            pass\n        elif i==')':\n            pass\n        else:\n            result+=i\n    return result\n",
        "test": "assert     (remove_parenthesis('') == '')",
        "num_ids": 1108
    },
    {
        "number": 641,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 2933
    },
    {
        "number": 643,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    if re.search('z',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    if re.search('z',text):\n        return True\n    else:\n        return False\n",
        "test": "assert         not text_match_wordz_middle(\"HelloWorld\")",
        "num_ids": 4272
    },
    {
        "number": 644,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    new = input[:k]\n    new.reverse()\n    new.extend(input[k:])\n    return new\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5,6], 0) == [1,2,3,4,5,6]",
        "num_ids": 1873
    },
    {
        "number": 720,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert     add_dict_to_tuple(('a', 'b'), {'a':1, 'b':2}) == ('a', 'b', {'a':1, 'b':2})",
        "num_ids": 1883
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[0 for j in range(cols)] for i in range(rows)]\n    for i in range(rows):\n        dp[i][0] = cost[i][0]\n    for j in range(cols):\n        dp[0][j] = cost[0][j]\n    for i in range(1,rows):\n        for j in range(1,cols):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[rows-1][cols-1]/float(rows*cols)\n",
        "test": "assert         maxAverageOfPath([[1]]) == 1",
        "num_ids": 1902
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    passed_students = {}\n    for student in students:\n        student_height, student_weight = students[student]\n        if student_height >= h and student_weight >= w:\n            passed_students[student] = students[student]\n    return passed_students\n",
        "test": "assert     filter_data(    {",
        "num_ids": 1538
    },
    {
        "number": 723,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Find the length of each list\n    len1 = len(nums1)\n    len2 = len(nums2)\n    # Check if the lists have the same length\n    if len1!= len2:\n        return -1\n    else:\n        # Initialize the count of the same pairs\n        count = 0\n        # Count the number of times the same pairs appear\n        for i in range(len1):\n            for j in range(len1):\n                if nums1[i] == nums2[j] and i!= j:\n                    count += 1\n        # Return the count of the same pairs\n        return count\n",
        "test": "assert     count_same_pair([0,1,2,3,4], [5,5,5,5,5]) == 0",
        "num_ids": 2358
    },
    {
        "number": 724,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(digit)**power for digit in str(base))\n",
        "test": "assert     power_base_sum(2, 1) == 2",
        "num_ids": 991
    },
    {
        "number": 725,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\"(.*?)\"', text1)\n    if result == []:\n        result = re.findall(r\"'(.*?)'\", text1)\n    return result\n",
        "test": "assert     extract_quotation('The cat said \"I like cats\".') ==     ['I like cats']",
        "num_ids": 2092
    },
    {
        "number": 726,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t = list(test_tup)\n    result = []\n    for i in range(len(t) - 1):\n        result.append(t[i] * t[i+1])\n    return tuple(result)\n",
        "test": "assert     multiply_elements(())     == tuple()",
        "num_ids": 1687
    },
    {
        "number": 728,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i + j for i, j in zip(lst1,lst2)]\n",
        "test": "assert     sum_list([], []) == []",
        "num_ids": 1466
    },
    {
        "number": 730,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for i,k in enumerate(nums) if i == 0 or k!= nums[i-1]]\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 3410
    },
    {
        "number": 731,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * r * h/3\n",
        "test": "assert     math.pi == 3.141592653589793",
        "num_ids": 5076
    },
    {
        "number": 732,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"\\s\", \":\", text)\n    text = re.sub(r\"\\s\", \":\", text)\n    text = re.sub(r\",\", \":\", text)\n    text = re.sub(r\"\\.\", \":\", text)\n    text = re.sub(r\":\\s\", \":\", text)\n    text = re.sub(r\":\\s\", \":\", text)\n    text = re.sub(r\":\\s\", \":\", text)\n    return text\n",
        "test": "assert     replace_specialchar('')    ==    '', \"Error in replace_specialchar()\"",
        "num_ids": 1435
    },
    {
        "number": 733,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def find_first_occurrence_helper(A, low, high, target):\n        if low > high:\n            return -1\n        mid = (low+high)//2\n        if target == A[mid]:\n            return mid\n        if target > A[mid]:\n            return find_first_occurrence_helper(A, mid+1, high, target)\n        else:\n            return find_first_occurrence_helper(A, low, mid-1, target)\n    return find_first_occurrence_helper(A, 0, len(A)-1, x)\n",
        "test": "assert     find_first_occurrence([1, 2, 2, 2, 2, 4, 4, 4, 5], 1) == 0",
        "num_ids": 3984
    },
    {
        "number": 734,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum(arr)\n",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 1591
    },
    {
        "number": 735,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n^(n>>1)\n",
        "test": "assert     set_middle_bits(0) == 0, 'incorrect'",
        "num_ids": 1318
    },
    {
        "number": 736,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    insertion_point = bisect.bisect_left(a, x)\n    return insertion_point\n",
        "test": "assert     left_insertion([1, 2, 3, 4, 5, 6, 7], -1) == 0",
        "num_ids": 1115
    },
    {
        "number": 737,
        "max_answer_num": 28,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex,string))\n",
        "test": "assert     check_str(\"amazing\")",
        "num_ids": 1017
    },
    {
        "number": 738,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    geometric_sum = 1\n    for i in range(1, n):\n        geometric_sum = geometric_sum * (1 + i)\n    return geometric_sum\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 861
    },
    {
        "number": 739,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    r=math.ceil(math.log(n,3))\n    return int(r*(r+1)/2)\n    \ndef check_triangle(n):\n    '''\n    Write a python function to check whether a number is triangular or not. https://www.geeksforgeeks.org/check-if-a-number-is-triangular-or-not/\n    '''\n    n = int(n)\n    return n>=0 and math.ceil(math.sqrt(8*n+1))%2==1\n",
        "test": "assert     find_Index(2) == 1",
        "num_ids": 972
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {i:test_tup[i-1] for i in range(1,len(test_tup)+1)}\n",
        "test": "assert     tuple_to_dict((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59)) == {0:1, 1:2, 2:3, 3:4, 4:5, 5:6, 6:7, 7:8, 8:9, 9:10, 10:11, 11:12, 12:13, 13:14, 14:15, 15:16, 16:17, 17:18, 18:19, 19:20, 20:21, 21:22, 22:23, 23:24, 24:25, 25:26, 26:27, 27:28, 28:29, 29:30, 30:31, 31:32, 32:33, 33:34, 34:35, 35:36, 36:37, 37:38, 38:39, 39:40, 40:41, 41:42, 42:43, 43:44, 44:45, 45:46, 46:47, 47:48, 48:49, 49:50, 50:51, 51:52, 52:53, 53:54, 54:55, 55:56, 56:57, 57:58, 58:59}",
        "num_ids": 2154
    },
    {
        "number": 741,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s:\n        if s.count(i)>1 :\n            return False\n    return True\n",
        "test": "assert     not all_Characters_Same(\"All characters are not same\")",
        "num_ids": 1158
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*(side**2)/4)\n",
        "test": "assert     area_tetrahedron(4) == 12.0",
        "num_ids": 1347
    },
    {
        "number": 743,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n",
        "test": "assert     rotate_right([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]",
        "num_ids": 1327
    },
    {
        "number": 744,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_none((1,2,3)) == False",
        "num_ids": 972
    },
    {
        "number": 745,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    ret = [i for i in range(startnum, endnum+1) if i%int(str(i)[::-1]) == 0]\n    return ret\n",
        "test": "assert     divisible_by_digits(1,10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 5967
    },
    {
        "number": 746,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>0 and a>0:\n        if a<360:\n            r = r**2\n            a = a*math.pi/180\n            return r*math.sin(a)\n        else:\n            return None\n    else:\n        return None\n",
        "test": "assert     sector_area(2.2, 360.1) == None",
        "num_ids": 1203
    },
    {
        "number": 747,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a table to store lengths of longest common substring for i, j and k\n    # and substring in substring table\n    table = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    \n    # Store lengths of longest common substring in table\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if (i == 0 or j == 0 or k == 0): \n                    table[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n    return table[m][n][o]\n",
        "test": "assert lcs_of_three('', '', '') == 0",
        "num_ids": 2627
    },
    {
        "number": 748,
        "max_answer_num": 24,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    cap_words = re.findall('[A-Z][^A-Z]*', str1)\n    new_str = ''\n    for word in cap_words:\n        new_str = new_str + word +''\n    return new_str\n",
        "test": "assert     capital_words_spaces(\"\")                 ==     \"\"",
        "num_ids": 1610
    },
    {
        "number": 749,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return [str(num) for num in nums]\n",
        "test": "assert     sort_numeric_strings(['0','1','2','3','4','5','6','7','8','9']) == ['0','1','2','3','4','5','6','7','8','9']",
        "num_ids": 3944
    },
    {
        "number": 750,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n",
        "test": "assert     add_tuple([], (0,0)) == [(0,0)]",
        "num_ids": 1589
    },
    {
        "number": 751,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = arr[i] * 2\n    right = arr[i] * 2 + 1\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n",
        "test": "assert     check_min_heap_helper([1], 0) == True",
        "num_ids": 1658
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(1, n):\n            a, b = b, a+b\n        return b\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 2647
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the tuple list on first element\n    sort_list = sorted(test_list, key=lambda x:x[0])\n    return sort_list[:K]\n",
        "test": "assert     min_k([('a', 10), ('b', 4), ('c', 6), ('d', 8), ('e', 7)], 2) == [('a', 10), ('b', 4)]",
        "num_ids": 1582
    },
    {
        "number": 754,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return list(set(l1).intersection(l2, l3))\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 1939
    },
    {
        "number": 755,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert     second_smallest([3, 3, 3]) == 3",
        "num_ids": 1260
    },
    {
        "number": 756,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search('a(.*)b',text):\n        return True\n    else:\n        return False\ndef text_match_zero_one_bis(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search('a(.*)b',text):\n        m = re.search('a(.*)b',text)\n        return True\n    else:\n        return False\n",
        "test": "assert     not text_match_zero_one('b')",
        "num_ids": 1154
    },
    {
        "number": 757,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = 0\n    for word1 in test_list:\n        for word2 in test_list:\n            if word1 == word2[::-1]:\n                result += 1\n    return result\n",
        "test": "assert     count_reverse_pairs(['xyz', 'xyz', 'xyz', 'xyz']) == 0",
        "num_ids": 5635
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic={}\n    for i in list1:\n        dic[tuple(i)]=list1.count(i)\n    return dic\n",
        "test": "assert     unique_sublists([[1, 2], [1, 3], [2, 3]])    == {(1, 2): 1, (1, 3): 1, (2, 3): 1}",
        "num_ids": 3559
    },
    {
        "number": 759,
        "max_answer_num": 37,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_decimal('abc') == False",
        "num_ids": 2909
    },
    {
        "number": 760,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "test": "assert     unique_Element([1, 2, 3, 2, 1, 3]) == False",
        "num_ids": 1042
    },
    {
        "number": 762,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(31) == False, \"Should be False\"",
        "num_ids": 1592
    },
    {
        "number": 763,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    mini = arr[-1] - arr[0]\n    for i in range(1,n):\n        mini = min(mini, arr[i]-arr[i-1])\n    return mini\n",
        "test": "assert     find_min_diff([3,3,3],3) == 0",
        "num_ids": 1504
    },
    {
        "number": 764,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return str.count('9') + str.count('0') + str.count('8') + str.count('7') + str.count('6') + str.count('5') + str.count('4') + str.count('3') + str.count('2') + str.count('1')\n",
        "test": "assert     number_ctr('12345') == 5",
        "num_ids": 2767
    },
    {
        "number": 765,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    polite_numbers = []\n    while True:\n        #polite_numbers.append(i)\n        n_list = list(str(i))\n        if '0' in n_list:\n            continue\n        #print(n_list)\n        total = sum([int(x) for x in n_list])\n        #print(total)\n        if total == n:\n            return i\n        else:\n            i += 1\n        #print('i', i)\n        if i % 1000000 == 0:\n            print(i)\n",
        "test": "assert     is_polite(1) == 1",
        "num_ids": 7064
    },
    {
        "number": 766,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    out = []\n    for i,j in zip(l1,l1[1:]):\n        out.append([i,j])\n    return out\n",
        "test": "assert     [] == pair_wise([])",
        "num_ids": 3622
    },
    {
        "number": 767,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr)<2:\n        return 0\n    elif arr[0] == sum:\n        return 1+get_pairs_count(arr[1:], sum)\n    elif arr[0]>sum:\n        return get_pairs_count(arr[1:], sum)\n    else:\n        return get_pairs_count(arr[1:], sum-arr[0])+get_pairs_count(arr[1:], sum)\n",
        "test": "assert     get_pairs_count([1,2,4,3,2], 3) == 2",
        "num_ids": 1617
    },
    {
        "number": 769,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n",
        "test": "assert     Diff([1,2,3,4,5],[]) == [1,2,3,4,5], \"Test case is not correct\"",
        "num_ids": 1544
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num_sum = 0 \n    for i in range(n+1):\n        if i%2!= 0 : \n            odd_num_sum = odd_num_sum + i**4\n    return odd_num_sum \n",
        "test": "assert     (odd_num_sum(0) == 0)",
        "num_ids": 963
    },
    {
        "number": 771,
        "max_answer_num": 33,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return True\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append('(')\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_expression(\"(()\") == False",
        "num_ids": 1847
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = test_str.split()\n    result = []\n    for word in new_str:\n        if len(word) == K:\n            result.append(word)\n    return''.join(result)\n",
        "test": "assert     remove_length(\"pythoniscool\", 10) == \"\"",
        "num_ids": 1271
    },
    {
        "number": 773,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not text or not pattern:\n        return\n    for i in range(0,len(text)-len(pattern)):\n        if text[i] == pattern[0]:\n            if text[i:i+len(pattern)] == pattern:\n                print('Substring found at position: ',i+1)\n                \n        \ndef count_substring(text,pattern):\n    '''\n    Write a function to count the number of non-overlapping occurrences of a substring in a string.\n    '''\n    if not text or not pattern:\n        return\n    m = len(text)\n    n = len(pattern)\n    counter = 0\n    for i in range(0,m-n+1):\n        if text[i:i+n] == pattern:\n            counter += 1\n    return counter\n",
        "test": "assert     occurance_substring('abcabcdefg','xyz')==None",
        "num_ids": 3237
    },
    {
        "number": 775,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    numList = nums\n    for i in range(1, len(nums), 2):\n        if i % 2 == 1:\n            if numList[i] % 2 == 0:\n                return False\n    return True\n",
        "test": "assert     odd_position([-3,5,8,9,7,6,3,5,6,7]) == False",
        "num_ids": 1307
    },
    {
        "number": 776,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    result = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            result += 1\n    return result\n",
        "test": "assert count_vowels(\"abcd\") == 0",
        "num_ids": 1451
    },
    {
        "number": 777,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "test": "assert     find_sum([]) == 0",
        "num_ids": 1343
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n            if len(temp) == 2:\n                list2.append(temp)\n                temp = []\n    return list2\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 6240
    },
    {
        "number": 779,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    output = {}\n    for l in list1:\n        t = tuple(l)\n        if t in output:\n            output[t] = output[t] + 1\n        else:\n            output[t] = 1\n    return output\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 2136
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list, 2)\n",
        "test": "assert     find_combinations([(0,2),(3,5),(1,3),(0,4),(5,7),(9,11),(0,5),(8,9),(2,3)]) == [(0,2),(1,3),(0,4),(5,7),(9,11)]",
        "num_ids": 9450
    },
    {
        "number": 781,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    if n == 1:\n        return divisors\n    for i in range(2, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors\ndef string_count(n) : \n    '''\n    Write a python function to count the occurrence of a given word in a given string. https://www.w3resource.com/python-exercises/string/python-string-1-exercise-26.php\n    '''\n    word = input(\"Please enter the word to be counted: \")\n    count = 0\n    for i in range(0,len(n)):\n        if n[i] == word[0]:\n            if n[i:i+len(word)] == word:\n                count += 1\n    print(\"Word count is\", count)\ndef bubble_sort(n):\n    '''\n    Write a python function to sort an array using the Bubble Sort algorithm. https://www.w3resource.com/python-exercises/python-basic-exercises-beginner-level.php\n    '''\n    for i in range(len(n)-1,0,-1):\n        for j in range(0,i):\n            if n[j]>n[j+1]:\n                temp = n[j]\n                n[j] = n[j+1]\n                n[j+1] = temp\n    print(n)\ndef insertion_sort(n):\n    '''\n    Write a python function to sort an array using the Insertion Sort algorithm. https://www.w3resource.com/python-exercises/python-basic-exercises-beginner-level.php\n    '''\n    for i in range(1,len(n)):\n        temp = n[i]\n        j = i-1\n        while j>=0 and n[j]>temp:\n            n[j+1] = n[j]\n            j -= 1\n        n[j+1] = temp\n    print(n)\ndef selection_sort(n):\n    '''\n    Write a python function to sort an array using the Selection Sort algorithm. https://www.w3resource.com/python-exercises/python-basic-exercises-beginner-level.php\n    '''\n    for i in range(len(n)-1):\n        m = i\n        for j in range(i+1,len(n)):\n            if n[j]<n[m]:\n                m = j\n        temp = n[i]\n        n[i] = n[m]\n        n[m] = temp\n    print(n)\ndef quick_sort(n):\n    '''\n    Write a python function to sort an array using the Quick Sort algorithm. https://www.w3resource.com/python-exercises/python-basic-exercises-beginner-level.php\n    '''\n    def partition(n, low, high):\n        pivot = n[low]\n        i = low\n        for j in range(low+1,high+1):\n            if n[j] <= pivot:\n                i += 1\n                n[j], n[i] = n[i], n[j]\n        n[low], n[i] = n[i], n[low]\n        return i\n    def quick_sort_aux(n, low, high):\n        if low < high:\n            pi = partition(n, low, high)\n            quick_sort_aux(n, low, pi-1)\n            quick_sort_aux(n, pi+1, high)\n    quick_sort_aux(n, 0, len(n)-1)\n    print(n)\ndef heap_sort(n):\n    '''\n    Write a python function to sort an array using the Heap Sort algorithm. https://www.w3resource.com/python-exercises/python-basic-exercises-beginner-level.php\n    '''\n    def heapify(n, i, heap_size):\n        largest = i\n        left = 2*i + 1\n        right = 2*i + 2\n        if left < heap_size and n[left] > n[largest]:\n            largest = left\n        if right < heap_size and n[right] > n[largest]:\n            largest = right\n        if largest!= i:\n            n[largest], n[i] = n[i], n[largest]\n            heapify(n, largest, heap_size)\n    def heap_sort_aux(n, heap_size):\n        for i in range(int(math.floor(heap_size/2)),-1,-1):\n            heapify(n, i, heap_size)\n        for i in range(heap_size-1, 0, -1):\n            n[0], n[i] = n[i], n[0]\n            heapify(n, 0, i)\n    heap_size = len(n)\n    heap_sort_aux(n, heap_size)\n    print(n)\ndef merge_sort(n):\n    '''\n    Write a python function to sort an array using the Merge Sort algorithm. https://www.w3resource.com/python-exercises/python-basic-exercises-beginner-level.php\n    '''\n    def merge(left, right):\n        if not left or not right:\n            return left or right\n        result = []\n        left_i, right_i = 0, 0\n        while left_i < len(left) and right_i < len(right):\n            if left[left_i] < right[right_i]:\n                result.append(left[left_i])\n                left_i += 1\n            else:\n                result.append(right[right_i])\n                right_i += 1\n        result += left[left_i:]\n        result += right[right_i:]\n        return result\n    def merge_sort_aux(n, left, right):\n        if left < right:\n            mid = int(math.floor((left+right)/2))\n            merge_sort_aux(n, left, mid)\n            merge_sort_aux(n, mid+1, right)\n            n[left:right+1] = merge(n[left:mid+1], n[mid+1:right+1])\n    n = input(\"Enter elements of the array: \")\n    merge_sort_aux(n, 0, len(n)-1)\n    print(n)\ndef bucket_sort(n):\n    '''\n    Write a python function to sort an array using the Bucket Sort algorithm. https://www.w3resource.com/python-exercises/python-basic-exercises-beginner-level.php\n    '''\n    bucket_count = 10\n    for i in range(bucket_count):\n        bucket = []\n        for j in range(len(n)):\n            if len(bucket) == 0 or n[j] < bucket[0]:\n                bucket.insert(0, n[j])\n            else:\n                bucket.append(n[j])\n        n[:] = bucket\n    print(n)\ndef count_inversion(n):\n    '''\n    Write a python function to count inversion in an array using the Count inversion algorithm. https://www.w3resource.com/python-exercises/python-basic-exercises-beginner-level.php\n    '''\n    n = [int(i) for i in input(\"Enter the elements of the array: \")]\n    count = 0\n    for i in range(len(n)-1):\n        for j in range(i+1, len(n)):\n            if n[i] > n[j]:\n                count += 1\n    print(count)\ndef cyclic_rotation(n, k):\n    '''\n    Write a python function to rotate an array by k elements. https://www.w3resource.com/python-exercises/python-basic-exercises-beginner-level.php\n    '''\n    k = k % len(n)\n    rotated = []\n    for i in range(len(n)):\n        if i+k < len(n):\n            rotated.append(n[i+k])\n        else:\n            rotated.appen",
        "test": "assert     count_divisors(1) == True",
        "num_ids": 1117
    },
    {
        "number": 782,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum(arr)\n",
        "test": "assert     odd_length_sum([]) == 0",
        "num_ids": 3606
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return (h, s, v)\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0, 0, 0)",
        "num_ids": 1842
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if i%2==0:\n            result *= i\n        else:\n            result *= -i\n    return result\n",
        "test": "assert     mul_even_odd([0,2,3,4]) == 0",
        "num_ids": 1713
    },
    {
        "number": 785,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = eval(test_str)\n    return tuple(int(num) for num in int_tuple)\n",
        "test": "assert     tuple_str_int('1,2') == (1, 2)",
        "num_ids": 1492
    },
    {
        "number": 786,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos\n",
        "test": "assert right_insertion([], 0) == 0",
        "num_ids": 844
    },
    {
        "number": 787,
        "max_answer_num": 28,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a.*?b.*?b.*?b\")\n    if pattern.match(text):\n        return True\n    return False\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a.*?b.*?b\")\n    if pattern.match(text):\n        return True\n    return False\n    \ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a.*?b\")\n    if pattern.match(text):\n        return True\n    return False\n",
        "test": "assert     text_match_three('aabbbbb') == True",
        "num_ids": 1026
    },
    {
        "number": 788,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for i,j in zip(test_list, test_str):\n        if j == \"\":\n            return None\n        else:\n            i += j\n    return tuple(test_list)\n",
        "test": "assert     new_tuple(('string','tuple'), 'tuple') == tuple(('string','tuple'))",
        "num_ids": 1183
    },
    {
        "number": 790,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for nums_index in range(0,len(nums),2):\n        if nums[nums_index] % 2!= 0:\n            return False\n    return True\n    \n",
        "test": "assert     even_position([1, 3, 5]) == False",
        "num_ids": 1595
    },
    {
        "number": 791,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x: x!=test_tup,test_tup))\n",
        "test": "assert     remove_nested((1, 2, 3))     ==     (1, 2, 3)",
        "num_ids": 2125
    },
    {
        "number": 792,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_of_lists = 0\n    for i in input_list:\n        if type(i) == list:\n            num_of_lists += 1\n    return num_of_lists\n",
        "test": "assert     count_list([[]]) == 1",
        "num_ids": 1649
    },
    {
        "number": 793,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    result = -1\n    if arr[0]==x:\n        return 0\n    i = len(arr)-1\n    while i>0:\n        if arr[i]==x:\n            result = i\n        i-=1\n    return result\n",
        "test": "assert     last([0,1,2,3,4,5],5) == 5",
        "num_ids": 1464
    },
    {
        "number": 794,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(^|\\s|\\w|\\W|\\_|\\-)a\\w*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_starta_endb_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^((?=.*?a).)*?b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_starta_endb('a') == False",
        "num_ids": 1172
    },
    {
        "number": 796,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_values = 0\n    for x in dict:\n        sum_values += dict[x]\n    return sum_values\n",
        "test": "assert     return_sum({}) == 0",
        "num_ids": 1066
    },
    {
        "number": 797,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(1,n,2))\n",
        "test": "assert     (sum_odd(0)         == 0)",
        "num_ids": 701
    },
    {
        "number": 798,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s\n",
        "test": "assert     _sum([1,2,3]) == 6",
        "num_ids": 776
    },
    {
        "number": 799,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    elif d % 32 == 0:\n        return 0\n    else:\n        return ((n << d) | (n >> (32 - d))) & 0xffffffff\n",
        "test": "assert     left_rotate(0x00000000, 0) == 0x00000000",
        "num_ids": 642
    },
    {
        "number": 800,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ', '')\n",
        "test": "assert     'foobar' == remove_all_spaces('foobar')",
        "num_ids": 1119
    },
    {
        "number": 801,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    if x == y or y == z or x == z:\n        return 2\n    else:\n        return 1\n",
        "test": "assert     test_three_equal(1,1,1) == 3",
        "num_ids": 936
    },
    {
        "number": 802,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return 0\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0",
        "num_ids": 3516
    },
    {
        "number": 803,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n > 0 and (math.floor(math.sqrt(n)) ** 2 == n):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_perfect_square(1)",
        "num_ids": 1027
    },
    {
        "number": 804,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if sum(arr)%2 == 0: \n        return True\n    else: \n        return False\n",
        "test": "assert is_product_even([2,2,2,2]) == True",
        "num_ids": 1079
    },
    {
        "number": 805,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sum_list = [0 for i in range(len(lists))]\n    for i in range(len(lists)):\n        sum_list[i] = sum(lists[i])\n    max_index = sum_list.index(max(sum_list))\n    return lists[max_index]\n",
        "test": "assert     max_sum_list([[1, 3, 5, 7], [2, 4, 6, 8], [11, 13, 15, 17]]) == [11, 13, 15, 17]",
        "num_ids": 3481
    },
    {
        "number": 806,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    i = 0\n    while i < len(test_str):\n        count = 1\n        while i + 1 < len(test_str) and test_str[i + 1] == test_str[i]:\n            i += 1\n            count += 1\n        if count > max_run:\n            max_run = count\n        i += 1\n    return max_run\n    \ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    max_run = 0\n    i = 0\n    while i < len(test_str):\n        count = 1\n        while i + 1 < len(test_str) and test_str[i + 1] == test_str[i]:\n            i += 1\n            count += 1\n        if count > max_run:\n            max_run = count\n        i += 1\n    return max_run\n",
        "test": "assert     max_run_uppercase(\"\") == 0",
        "num_ids": 1650
    },
    {
        "number": 807,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return next((x for x in nums if x % 2 and x > 0), None)\n",
        "test": "assert     first_odd([1]) == 1",
        "num_ids": 1189
    },
    {
        "number": 808,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_K((('B', 0), ('A', 1), ('B', 2)), 5) == False",
        "num_ids": 1247
    },
    {
        "number": 809,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i,j in zip(test_tup1, test_tup2):\n        if i < j:\n            return True\n        else:\n            return False\n",
        "test": "assert     check_smaller((4,1,3), (2,3,5)) == False",
        "num_ids": 1665
    }
]