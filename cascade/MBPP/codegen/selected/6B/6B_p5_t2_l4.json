[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    sorted1 = sorted(test_tup1)\n    sorted2 = sorted(test_tup2)\n    return [x for x in sorted1 if x in sorted2]\n",
        "test": "assert     (",
        "num_ids": 404
    },
    {
        "number": 3,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        max_divisor = int(math.floor(math.sqrt(n)))\n        for i in range(3, 1 + max_divisor, 2):\n            if n % i == 0:\n                return True\n    return False\n",
        "test": "assert     is_not_prime(2) == False",
        "num_ids": 466
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(len(nums)):\n        hq.heappush(heap,(nums[i],nums[i]))\n    for i in range(n-1):\n        hq.heappop(heap)\n    return sorted(heap,reverse=True)\n",
        "test": "assert ",
        "num_ids": 499
    },
    {
        "number": 6,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1) == 0) and x!= 0\n",
        "test": "assert     is_Power_Of_Two(1) == True ",
        "num_ids": 336
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall('[A-Za-z]+', text)\n    return result\n",
        "test": "assert     find_char_long(\"abcdefghijkmnopqrstuvwxyz\") == ['abcdefghijkmnopqrstuvwxyz']",
        "num_ids": 554
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert         [i*i for i in [1,2,3,4,5,6,7,8,9,10]] == square_nums([1,2,3,4,5,6,7,8,9,10])",
        "num_ids": 313
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    temp = str + str\n    for i in range(0, n):\n        if str[i:] == temp[i:n]:\n            return i\n    return -1\n",
        "test": "assert     find_Rotations('TTTTA') == 0",
        "num_ids": 552
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if (s.count(ch)>1):\n        s=s[:s.rfind(ch)]+s[s.rfind(ch)+1:]\n    return s\n",
        "test": "assert     remove_Occ('abcd','a') == 'abcd'",
        "num_ids": 411
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows, cols = len(M), len(M[0])\n    print(rows, cols)\n    for i in range(rows - 1):\n        idx_min, idx_max = i, i\n        for j in range(i, rows):\n            if sum(M[idx_max]) < sum(M[idx_min]):\n                idx_max = j\n            if sum(M[idx_max]) > sum(M[idx_min]):\n                idx_min = j\n        if idx_max!= i:\n            M[i], M[idx_max] = M[idx_max], M[i]\n        print(idx_max)\n    return M\n",
        "test": "assert     sort_matrix([[1,2,3],[2,4,6],[3,5,7]]) == [ [1,2,3],[2,4,6],[3,5,7] ], \"the second test case is not right\"",
        "num_ids": 997
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n",
        "test": "assert     ( find_Volume(1,2,3) == 2.0 )",
        "num_ids": 294
    },
    {
        "number": 16,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.lower() == text\n",
        "test": "assert     text_lowercase_underscore('hello_world') == True",
        "num_ids": 296
    },
    {
        "number": 17,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert     square_perimeter(4) == 16",
        "num_ids": 168
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return [], 0\n    else:\n        list = []\n        for i in range(0, len(string)):\n            if string[i] not in list:\n                list.append(string[i])\n        return list, len(string) - len(list)\ndef str_to_list_no_space(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return [], 0\n    else:\n        list = []\n        for i in range(0, len(string)):\n            if string[i] not in list:\n                list.append(string[i])\n        return list\ndef str_to_list_2(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return [], 0\n    else:\n        list = []\n        for i in range(0, len(string)):\n            if string[i] not in list:\n                list.append(string[i])\n        return list\ndef sort_string(string):\n    '''\n    Write a function that returns a sorted list from a string. The function is to remove duplicate characters from the string and then sort the string alphabetically.\n    '''\n    if len(string) == 0:\n        return []\n    else:\n        string = list(string)\n        string = sorted(set(string))\n        return string\ndef sort_string_2(string):\n    '''\n    Write a function that returns a sorted list from a string. The function is to remove duplicate characters from the string and then sort the string alphabetically.\n    '''\n    if len(string) == 0:\n        return []\n    else:\n        string = sorted(set(string))\n        return string\ndef list_to_str(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_2(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_3(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_4(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_5(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_6(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_7(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_8(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_9(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_10(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_11(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_12(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_13(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_14(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_15(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_16(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_17(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_18(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_19(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_20(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_21(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_22(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_23(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_24(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_25(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(lis",
        "test": "assert ",
        "num_ids": 467
    },
    {
        "number": 19,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    elif len(arraynums) == 1:\n        return False\n    else:\n        for i in range(len(arraynums)):\n            for j in range(i+1, len(arraynums)):\n                if arraynums[i] == arraynums[j]:\n                    return True\n    return False\n",
        "test": "assert     test_duplicate([1, 2, 3, 4, 1, 2, 3, 4]) == True",
        "num_ids": 503
    },
    {
        "number": 20,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x == '3':\n        return True\n    elif x == '6':\n        return True\n    elif x == '9':\n        return True\n    elif x == '8':\n        return True\n    elif x == '7':\n        return True\n    elif x == '6':\n        return True\n    elif x == '4':\n        return True\n    elif x == '5':\n        return True\n    elif x == '2':\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(6) == False",
        "num_ids": 2475
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    if rev_num == 2 * rev_num:\n        return True\n    return False\n    \n",
        "test": "assert     rev(7) == False, \"Testcase 1 - Expected False\"",
        "num_ids": 377
    },
    {
        "number": 57,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[-1]\n    \n",
        "test": "assert     find_Max_Num([1,2,3,4]) == 4 ",
        "num_ids": 395
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    elif x>0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return False\n    elif x==0 and y!=0:\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(-2,-1) == True",
        "num_ids": 486
    },
    {
        "number": 59,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def gen_octagonal(n):\n        res = 1\n        for i in range(n):\n            res *= (3 * i + 1)\n        return res\n",
        "test": "assert     is_octagonal(2) == 9",
        "num_ids": 2263
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    d = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            summ = sum([int(x) for x in s[i:j]])\n            d[summ] += 1\n    return d\n",
        "test": "assert count_Substrings('abcd') == 0",
        "num_ids": 487
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest is None or x < smallest:\n            smallest = x\n    return smallest\n    \n",
        "test": "assert     smallest_num([1, 3, 2, 4, 5, 6]) == 1",
        "num_ids": 346
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    if n < 2:\n        return 0\n    else:\n        # sort the list\n        sorted_list = sorted(test_list)\n        # find the maximum difference\n        diff = abs(sorted_list[n - 1] - sorted_list[0])\n        # compare with the pair from right\n        for i in range(1, n - 1):\n            diff = max(diff, abs(sorted_list[i] - sorted_list[i + 1]))\n        # compare with the pair from left\n        for i in range(1, n - 1):\n            diff = max(diff, abs(sorted_list[i - 1] - sorted_list[i]))\n        return diff\n",
        "test": "assert     max_difference( (1, 2, 3, 4, 5) ) == 4",
        "num_ids": 734
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    a = sorted(subjectmarks, key=lambda x: x[1])\n    return a\n    \n    ",
        "test": "assert     subject_marks([('Class-V',4),('English',3),('Physics',5)]) == [('English',3),('Class-V',4),('Physics',5)]",
        "num_ids": 437
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        data = data_list[0]\n        \n        if isinstance(data, list):\n            return recursive_list_sum(data) + recursive_list_sum(data_list[1:])\n        else:\n            return data + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 532
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([1, 2, -3, 4, -5, 6, -7, 8, -9, 10]) == 6",
        "num_ids": 445
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    table = [1, 1, 1, 2, 5]\n    for i in range(5, n+1):\n        table.append(sum(table[i-j] for j in range(1, i//2+1)))\n    return table[n]\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 424
    },
    {
        "number": 68,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n",
        "test": "assert     not is_Monotonic([6,5,4,3])",
        "num_ids": 471
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == s:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i: i + len(s)] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1, 3, 4, 5, 6], [4, 5, 7]) == False",
        "num_ids": 495
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Tuple = set(Input)\n    return len(Tuple) == len(Input)\n    \ndef find_all_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:\n        return False\n    else:\n        return all(find_equal_tuple(tup) for tup in Input)\n",
        "test": "assert     find_equal_tuple([(0,0),(0,1),(0,2),(1,0),(1,1),(1,2)]) == True, \"All the tuples are equal length\"",
        "num_ids": 535
    },
    {
        "number": 71,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # TODO: Implement this function.\n    # nums = nums.copy()\n    for i in range(len(nums)):\n        min_index = i\n        for j in range(i, len(nums)):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 830
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return ((n/4)**2) == n\n",
        "test": "assert     dif_Square(16) == True",
        "num_ids": 608
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)-1):\n        if patterns[i]==1 and patterns[i+1]==2 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==1 and patterns[i+1]==3 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==2 and patterns[i+1]==1 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==2 and patterns[i+1]==3 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==3 and patterns[i+1]==1 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==3 and patterns[i+1]==2 and colors[i]==colors[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_samepatterns([\"yellow\",\"cyan\"], [\"y\", \"y\", \"c\", \"c\", \"y\"])",
        "num_ids": 778
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return list(filter(lambda x: all(x[i]%K==0 for i in range(len(x))), test_list))\n",
        "test": "assert     find_tuples([(1,2),(3,4),(5,6)], 1) == [(1,2),(3,4),(5,6)]",
        "num_ids": 634
    },
    {
        "number": 77,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "test": "assert     is_Diff( 11 ) == True",
        "num_ids": 197
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "test": "assert     word_len('abcdf') == True",
        "num_ids": 213
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n**3\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 2277
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\n",
        "test": "assert     abs(volume_sphere(1) - 4.1887902047863905) < 0.0000001",
        "num_ids": 321
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return (sum % 26)\n",
        "test": "assert     get_Char('xyz') == 25",
        "num_ids": 388
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return sum([2**i for i in range(n)])\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 453
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n",
        "test": "assert     surfacearea_sphere(1) == 4*math.pi, 'Error'",
        "num_ids": 276
    },
    {
        "number": 86,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(2*n - 1)) // 2\n",
        "test": "assert     centered_hexagonal_number(0) == 0",
        "num_ids": 224
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not dict1:\n        return dict2\n    if not dict2:\n        return dict1\n    if not dict3:\n        return dict1\n    dic_merged = dict1.copy()\n    dic_merged.update(dict2)\n    dic_merged.update(dict3)\n    return dic_merged\n",
        "test": "assert     merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 631
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # list1=input('Enter the list: ')\n    d={}\n    for i in list1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n",
        "test": "assert     freq_count([1, 2, 3, 4, 5, 6]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}",
        "num_ids": 669
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N > 99:\n        return None\n    elif N == 1:\n        return 2\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 1\n    elif N == 4:\n        return 2\n    else:\n        return N - 1\n",
        "test": "assert     closest_num(5)    == 4",
        "num_ids": 355
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    # find the length of longest word in the list\n    max_len = 0\n    for word in list1:\n        if(len(word) > max_len):\n            max_len = len(word)\n    \n    return max_len\n",
        "test": "assert     len_log(['1', '', '1']) == 1",
        "num_ids": 414
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n",
        "test": "assert     find_substring(['abc','xyz','lmn','ghi','fghi'], 'abc') == 1",
        "num_ids": 2305
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    flag = False\n    while n: \n        x = n%10\n        if x%2 == 1: \n            flag = True\n            break\n        n //= 10\n    return flag\n",
        "test": "assert     is_undulating(14) == True, \"Failed 1\"",
        "num_ids": 360
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b%2 == 0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a,b-1)\n",
        "test": "assert     (power(2,3) == 8)",
        "num_ids": 388
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    new_list=sorted(test_list,key=itemgetter(1))\n    return new_list[0][0]\n",
        "test": "assert     index_minimum([(2, 3), (1, 2), (4, 4)]) == 1",
        "num_ids": 552
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_min = []\n    for item in lst:\n        lst_min.append(len(item))\n    return min(lst_min)\n",
        "test": "assert     Find_Min_Length([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == 4",
        "num_ids": 2487
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        return 1\n    divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors = divisors + 1\n    return divisors\n",
        "test": "assert     divisor(2) == 1",
        "num_ids": 365
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n    \ndef sum_list(list1):\n    '''\n    Write a function to find sum of elements in a list, where the list is an\n    arbitrary number of nested lists.\n    '''\n    sum = 0\n    for i in list1:\n        if type(i) is list:\n            sum += sum_list(i)\n        else:\n            sum += i\n    return sum\n",
        "test": "assert     frequency_lists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 801
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for n in numbers:\n        total = total * n\n    return total\n",
        "test": "assert     multiply_num([1,2,3]) == 6",
        "num_ids": 432
    },
    {
        "number": 99,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n % 2 == 0:\n        return decimal_to_binary(n//2) + '0'\n    else:\n        return decimal_to_binary(n//2) + '1'\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 391
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def palindrome(x):\n        if str(x)[::-1] == str(x):\n            return True\n        return False\n    while True:\n        num += 1\n        if palindrome(num) == True:\n            break\n    return num\n",
        "test": "assert     next_smallest_palindrome(10)    == 11",
        "num_ids": 731
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert     kth_element([3,4,5,6], 1) == 3",
        "num_ids": 476
    },
    {
        "number": 102,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split(\"_\")\n    camel_case = word[0]\n    for i in range(1,len(word)):\n        camel_case += word[i].title()\n    return camel_case\n",
        "test": "assert     snake_to_camel(\"\") == \"\"",
        "num_ids": 456
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    s = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                s += 1\n    return s\n",
        "test": "assert     eulerian_num(0, 0) == 0",
        "num_ids": 584
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in input_list]\n",
        "test": "assert     sort_sublists([['A', 'B', 'C'], ['E', 'F'], ['G', 'H']]) == [['A', 'B', 'C'], ['E', 'F'], ['G', 'H']]",
        "num_ids": 447
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(lst)\n",
        "test": "assert     count(True, True, False, False, False, True, True, True, True, True, True, True, False, False) == 3",
        "num_ids": 351
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print test_list\n    print test_tup\n    for i in test_tup:\n        test_list.append(i)\n    print test_list\n",
        "test": "assert     add_lists(",
        "num_ids": 286
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=j=k=0\n    result=[]\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            result.append(num1[i])\n            i+=1\n        elif num2[j]<num3[k]:\n            result.append(num2[j])\n            j+=1\n        else:\n            result.append(num3[k])\n            k+=1\n    while i<len(num1):\n        result.append(num1[i])\n        i+=1\n    while j<len(num2):\n        result.append(num2[j])\n        j+=1\n    while k<len(num3):\n        result.append(num3[k])\n        k+=1\n    return result\n",
        "test": "assert     merge_sorted_list([1,3,5,7],[2,4,6,8],[0,9,10,11,12])==[0,1,2,3,4,5,6,7,8,9,10,11,12]",
        "num_ids": 3495
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif len(s) == 1:\n        return 0\n    else:\n        if s[:1] == '1':\n            return odd_Equivalent(s[1:],n-1)\n        else:\n            return odd_Equivalent(s[:-1],n-1)\n",
        "test": "assert     odd_Equivalent('1001',2) == 1",
        "num_ids": 740
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Use sets to remove duplicates\n    return list(set.intersection(*(set(item) for item in nestedlist)))\n",
        "test": "assert     common_in_nested_lists( [ [1, 2, 3], [2, 4], [2, 1, 3, 5] ] ) == [2]",
        "num_ids": 623
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # try:\n    #     int(text)\n    #     return True\n    # except ValueError:\n    #     return False\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_integer(\"1\") == True",
        "num_ids": 276
    },
    {
        "number": 115,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True\n",
        "test": "assert     empty_dit( [ {}, {} ] ) == True",
        "num_ids": 333
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    total = 0\n    for i in nums:\n        total = total * 10 + i\n    return total\n",
        "test": "assert     tuple_to_int(())    == 0",
        "num_ids": 278
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n",
        "test": "assert     list_to_float([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]]) == [[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0], [12.0, 13.0, 14.0, 15.0]]",
        "num_ids": 812
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('hello') == ['hello']",
        "num_ids": 228
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return None\n    for i in range(0,len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n",
        "test": "assert search([1,2,3,4,5,6,7,8,9,10]) == None",
        "num_ids": 938
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            if max_product < abs(list1[i][0]*list1[j][1]):\n                max_product = abs(list1[i][0]*list1[j][1])\n",
        "test": "assert ",
        "num_ids": 787
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    nums = []\n    for x in range(1, limit+1):\n        a = 0\n        b = 0\n        a = sum([int(i) for i in str(x)])\n        b = sum([int(i) for i in str(a)])\n        if b == x and x!= a:\n            nums.append(x)\n    return sum(nums)\n",
        "test": "assert     amicable_numbers_sum(100) == 469",
        "num_ids": 538
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #This function is based on the angle_between function, which is based on the trigonometric sum of the complex number.\n    #I don't think we need cmath here, but I don't know how to set up a library for this.\n    return cmath.phase(complex(a,b))\n",
        "test": "assert     angle_complex(3,4) == cmath.phase(complex(3,4))",
        "num_ids": 2426
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = [0] * 2\n    ans = 0\n    for i in range(len(string)): \n        if string[i] == '0': \n            count[0] += 1\n        elif string[i] == '1': \n            count[1] += 1\n        if count[0] - count[1] > ans: \n            ans = count[0] - count[1]\n    return ans\n",
        "test": "assert     find_length('1') == 0",
        "num_ids": 2399
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lcm = max(a,b)\n    for i in range(1, lcm):\n        if a % i == 0 and b % i == 0:\n            lcm = i\n    return lcm\n",
        "test": "assert     sum(1,2) == 1",
        "num_ids": 413
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(2,3) == 6",
        "num_ids": 204
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert     long_words(2, ['abc', 'def', 'ghi']) == ['abc', 'def', 'ghi']",
        "num_ids": 482
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # The idea is to loop through each element in each row\n    # and check that each element is equal to its row and its column\n    # plus the right diagonal element.\n    # If not, the matrix is not a magic square\n    # To implement this, we must consider each cell\n    # as a bit (to check if it is in the bit column or the bit row)\n    for row in range(len(my_matrix)):\n        for col in range(len(my_matrix[row])):\n            if not is_magic_square(my_matrix, row, col):\n                return False\n    return True\n",
        "test": "assert     magic_square_test([[1,2,3],",
        "num_ids": 904
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for item in nums:\n        count[item] += 1\n    return max(count, key=count.get)\n",
        "test": "assert     max_occurrences([1,2,2,1,2]) == 2",
        "num_ids": 486
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    list1 = list(str1)\n    vowels = 'aeiou'\n    length = len(list1) - 1\n    for i in range(length):\n        if list1[i] in vowels and list1[length] in vowels:\n            list1[i], list1[length] = list1[length], list1[i]\n    return ''.join(list1)\n",
        "test": "assert     reverse_vowels('hello') == 'holle', reverse_vowels('hello')",
        "num_ids": 623
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert     (tup_string(('the', 'lazy', 'dog')) == 'the lazy dog')",
        "num_ids": 428
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([-1*num for num in nums if num < 0])\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 376
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 273
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    count = 0\n    for i in xrange(len(nums)):\n        if nums[i] == 0:\n            count = count + 1\n    \n    return float(count)/len(nums)\n    \ndef count_letter(letter, string):\n    '''\n    Write a function to count the number of times a given letter occurs in a string.\n    '''\n    \n    count = 0\n    for i in xrange(len(string)):\n        if string[i] == letter:\n            count = count + 1\n    \n    return count\n    \ndef count_odd(nums):\n    '''\n    Write a function to count the number of odd numbers in an array of integers.\n    '''\n    \n    count = 0\n    for i in xrange(len(nums)):\n        if nums[i] % 2!= 0:\n            count = count + 1\n    \n    return count\n    \ndef square_list(nums):\n    '''\n    Write a function to compute the sum of the squares of the numbers in an array.\n    '''\n    \n    total = 0\n    for i in xrange(len(nums)):\n        total = total + nums[i]**2\n    \n    return total\n    \ndef valid_parentheses(string):\n    '''\n    Write a function to check if a string is a valid parentheses.\n    '''\n    \n    stack = []\n    for i in xrange(len(string)):\n        if string[i] == '(':\n            stack.append('(')\n        elif string[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    \n    if len(stack) == 0:\n        return True\n    else:\n        return False\n    \ndef str_to_int(string):\n    '''\n    Write a function that takes a string as input and returns the integer value of the string.\n    '''\n    \n    total = 0\n    for i in xrange(len(string)):\n        total = total + (ord(string[i]) - ord('0'))\n    \n    return total\n    \ndef str_to_int_two(string):\n    '''\n    Write a function that takes a string as input and returns the integer value of the string.\n    '''\n    \n    total = 0\n    for i in xrange(len(string)):\n        total = total*10 + (ord(string[i]) - ord('0'))\n    \n    return total\n    \ndef sum_of_digits(n):\n    '''\n    Write a function to compute the sum of digits of a positive integer.\n    '''\n    \n    total = 0\n    while n!= 0:\n        total = total + (n % 10)\n        n = n // 10\n    \n    return total\n    \ndef sum_of_digits_two(n):\n    '''\n    Write a function to compute the sum of digits of a positive integer.\n    '''\n    \n    total = 0\n    while n > 0:\n        total = total + n % 10\n        n = n // 10\n    \n    return total\n    \ndef sum_of_digits_three(n):\n    '''\n    Write a function to compute the sum of digits of a positive integer.\n    '''\n    \n    return sum(map(int, list(str(n))))\n    \ndef reverse_digits(n):\n    '''\n    Write a function to reverse digits of a positive integer.\n    '''\n    \n    total = 0\n    while n!= 0:\n        total = total * 10 + (n % 10)\n        n = n // 10\n    \n    return total\n    \ndef reverse_digits_two(n):\n    '''\n    Write a function to reverse digits of a positive integer.\n    '''\n    \n    return int(str(n)[::-1])\n    \ndef max_product(nums):\n    '''\n    Write a function to find the maximum product of three numbers from an array.\n    '''\n    \n    total = 1\n    for i in xrange(len(nums)):\n        for j in xrange(i+1, len(nums)):\n            for k in xrange(j+1, len(nums)):\n                if nums[i]*nums[j]*nums[k] > total:\n                    total = nums[i]*nums[j]*nums[k]\n    \n    return total\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to determine if two strings are anagrams of each other.\n    '''\n    \n    return sorted(str1) == sorted(str2)\n    \ndef is_anagram_two(str1, str2):\n    '''\n    Write a function to determine if two strings are anagrams of each other.\n    '''\n    \n    if len(str1)!= len(str2):\n        return False\n    \n    chars = {}\n    for i in xrange(len(str1)):\n        if str1[i] in chars:\n            chars[str1[i]] += 1\n        else:\n            chars[str1[i]] = 1\n            \n        if str2[i] in chars:\n            chars[str2[i]] -= 1\n        else:\n            chars[str2[i]] = -1\n    \n    for c in chars:\n        if chars[c]!= 0:\n            return False\n    \n    return True\n    \ndef sort_strings_by_length(strs):\n    '''\n    Write a function that takes an array of strings and returns a new array sorted by length in ascending order.\n    '''\n    \n    strs = sorted(strs, key=lambda s: len(s))\n    return strs\n    \ndef sort_strings_by_length_two(strs):\n    '''\n    Write a function that takes an array of strings and returns a new array sorted by length in ascending order.\n    '''\n    \n    strs = sorted(strs, key=lambda s: len(s))\n    return sorted(strs, key=lambda s: len(s), reverse=True)\n    \ndef non_repeated_substring(s):\n    '''\n    Write a function to find the longest substring that has no repeating characters.\n    '''\n    \n    if len(s) == 0:\n        return ''\n    \n    longest = s[0]\n    cur_len = 1\n    cur_substring = s[0]\n    \n    for i in xrange(1, len(s)):\n        if s[i] not in cur_substring:\n            cur_substring = cur_substring + s[i]\n            cur_len = cur_len + 1\n            if cur_len > len(longest):\n                longest = cur_substring\n        else:\n            if cur_len > len(longest):\n                longest = cur_substring\n            \n            j = cur_substring.index(s[i])\n            cur_substring = cur_substring[j+1:] + s[i]\n            cur_len = len(cur_substring)\n    \n    return longest\n    \ndef non_repeated_substring_two(s):\n    '''\n    Write a function to find the longest substring that has no repeating characters.\n    '''\n    \n    if len(s) == 0:\n        return ''\n    \n    longest = s[0]\n    cur_len = 1\n    cur_substring = s[0]\n    \n    for i in xrange(1, len(s)):\n        if s[i] not in cur_substring:\n            cur_substring = cur_substring + s[i]\n            cur_len = cur_len + 1\n        else:\n            if cur_len > len(longest):\n                longest = cur_substring\n            \n            j = cur_substring.index(s[i])\n            cur_substring = cur_substring[:j] + s[i] + cur_substring[j+1:]\n            cur_len = len(cur_substring)\n    \n    return longest\n    \ndef reverse_vowels(s):\n    '''\n    Write a function that takes a string as input and returns the string with all vowels reverse",
        "test": "assert ",
        "num_ids": 2306
    },
    {
        "number": 138,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while(n): \n        if(n%2==0): \n            n = n/2\n        else: \n            count+=1\n            n-=1\n    if(count>1): \n        return False\n    else: \n        return True\ndef is_Sum_Of_Powers_Of_Two2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<=0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two(): \n    assert(is_Sum_Of_Powers_Of_Two(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two(26)==False)\ndef is_Sum_Of_Powers_Of_Two_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    elif n%2==0: \n        return is_Sum_Of_Powers_Of_Two_2(n/2)\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_2(): \n    assert(is_Sum_Of_Powers_Of_Two_2(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_2(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two_2(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two_2(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(26)==False)\ndef is_Sum_Of_Powers_Of_Two_3(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_3(): \n    assert(is_Sum_Of_Powers_Of_Two_3(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_3(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two_3(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two_3(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(26)==False)\ndef is_Sum_Of_Powers_Of_Two_4(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_4(): \n    assert(is_Sum_Of_Powers_Of_Two_4(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_4(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two_4(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two_4(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(26)==False)\ndef is_Sum_Of_Powers_Of_Two_5(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_5(): \n    assert(is_Sum_Of_Powers_Of_Two_5(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_5(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(17)==False)",
        "test": "assert     is_Sum_Of_Powers_Of_Two(2) == True",
        "num_ids": 2629
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "test": "assert     circle_circumference(1) == 2*math.pi",
        "num_ids": 238
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output_list = []\n    for x in test_list:\n        if type(x) == list:\n            for y in x:\n                output_list.append(y)\n        else:\n            output_list.append(x)\n    return output_list\n",
        "test": "assert extract_singly([[3, 1, 4, 1], [], [5, 9, 2], [6], []]) == [3, 1, 4, 1, 5, 9, 2, 6]",
        "num_ids": 545
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def reverse(nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n    \n    def flip(nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n    \n    def sort_and_reverse(nums, start, end):\n        if start >= end:\n            return\n        mid = (start + end) // 2\n        sort_and_reverse(nums, start, mid)\n        sort_and_reverse(nums, mid + 1, end)\n        reverse(nums, start, end)\n    \n    n = len(nums)\n    for i in xrange(n // 2, 0, -1):\n        sort_and_reverse(nums, 0, i)\n    return nums\n",
        "test": "assert ",
        "num_ids": 615
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum(1 for item1,item2,item3 in zip(list1,list2,list3) if item1==item2==item3)\n",
        "test": "assert     count_samepair([1,2,3,1,2],[1,2,2,3,1],[1,2,2,2,1]) == 2",
        "num_ids": 749
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # return len([x for x in Input if type(x)==list])\n    return len(Input)\n    \ndef find_words(Input):\n    '''\n    Write a function to find number of words present in the given tuple.\n    '''\n    # return len([x for x in Input if type(x)==str])\n    return len(Input)\n",
        "test": "assert     find_lists(()) == 0",
        "num_ids": 400
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n",
        "test": "assert     max_Abs_Diff([1, 2, 3]) == 2",
        "num_ids": 410
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (0, -b / a) if n * a >= b else None\n    if b == 0:\n        return (n / a, 0) if n * a <= a else None\n    \n    D = b * b - 4 * a * n\n    if D < 0:\n        return None\n    if D == 0:\n        return (n / (2 * a), -b / (2 * a))\n    x1 = (-b + D ** 0.5) / (2 * a)\n    x2 = (-b - D ** 0.5) / (2 * a)\n    if x1 < x2:\n        return (x1, x2)\n    return (x2, x1)\n",
        "test": "assert     find_solution(2, 2, 3) == None",
        "num_ids": 640
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n",
        "test": "assert     remove_elements([1,2,3,4], [1,2,3]) == [4]",
        "num_ids": 430
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    return n + sum_series(n - 2)\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 332
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += tan(pi/l)*s**2/4\n    return area\n",
        "test": "assert     area_polygon(2, 4) == 2.5 + 2.5 * tan(pi / 4)",
        "num_ids": 369
    },
    {
        "number": 164,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    d = n\n    s1 = 0\n    while d > 1:\n        if n % d == 0:\n            s1 = s1 + d\n        d = d - 1\n    d = n\n    s2 = 0\n    while d > 1:\n        if n % d == 0:\n            s2 = s2 + d\n        d = d - 1\n    if s1 == s2:\n        return True\n    else:\n        return False\n",
        "test": "assert     div_sum(5)     == True",
        "num_ids": 419
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = [chr(i) for i in range(97, 123)]\n    total = 0\n    for index in range(len(str1)):\n        if str1[index] in alphabet:\n            total += 1\n    return total\n",
        "test": "assert     count_char_position('a') == 1, \"Counting character position should be 1 for a\"",
        "num_ids": 486
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_even = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i]^A[j]%2 == 0:\n                xor_even += 1\n    return xor_even\n",
        "test": "assert     find_even_pair([1, 2, 3, 4, 5, 6]) == 2",
        "num_ids": 527
    },
    {
        "number": 167,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    res = 1\n    while res <= n:\n        res = res * 2\n    return res\n",
        "test": "assert     (next_power_of_2(1) == 2)",
        "num_ids": 310
    },
    {
        "number": 168,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len([i for i in a if i == x])\n    \n    ",
        "test": "assert     frequency([1,2,3,4,5,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9],10) == 0",
        "num_ids": 394
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for x in list1:\n        if x > m and x <= n:\n            sum += x\n    return sum\n",
        "test": "assert     sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 10) == 45",
        "num_ids": 400
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n",
        "test": "assert     perimeter_pentagon(6) == 30, 'wrong'",
        "num_ids": 261
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('Hello std') == 1",
        "num_ids": 220
    },
    {
        "number": 222,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    return len(set([type(item) for item in test_tuple])) <= 1\n",
        "test": "assert     check_type((1,2,3)) == True",
        "num_ids": 472
    },
    {
        "number": 223,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[0] == x:\n        return True\n    if arr[0]!= x:\n        return is_majority(arr[1:], n-1, x)\n",
        "test": "assert     is_majority([1, 1, 2, 2, 3, 3, 3, 3, 3, 3], 9, 4) == False",
        "num_ids": 587
    },
    {
        "number": 224,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while(n):\n        count=count+1\n        n=n&(n-1)\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 286
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) < 2:\n        return str\n    else:\n        return odd_values_string(str[1:]) + str[0]\n",
        "test": "assert     odd_values_string('Hello') == 'olleH'",
        "num_ids": 472
    },
    {
        "number": 227,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n",
        "test": "assert     min_of_three(5, 3, 1) == 1",
        "num_ids": 352
    },
    {
        "number": 228,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def Set_Bit(n,l,r):\n        if l == r:\n            return n & 1\n        if l > r:\n            return 0\n        if n == 0:\n            return 0\n        return (Set_Bit(n<<1, l+1, r) << 1) | Set_Bit(n<<1, l, r-1)\n    \n    return Set_Bit(n,l,r) == 0\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(128,0,7) == True",
        "num_ids": 2483
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        elif arr[i] > 0:\n            positive.append(arr[i])\n    return negative + positive\n",
        "test": "assert     re_arrange_array([1,2,-3,4,5,6,-7], 3) == [-3,1,2]",
        "num_ids": 792
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join(str1.split())\n",
        "test": "assert     replace_blank(\"hello\", \" \") == \"hello\", 'wrong'",
        "num_ids": 395
    },
    {
        "number": 232,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n",
        "test": "assert     larg_nnum([1,2,3,4,5,6,7,8,9,10],1) == [10]",
        "num_ids": 650
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510\n    return pi * (r**2) * (h/2)\n",
        "test": "assert     lateralsuface_cylinder(2,1)    ==     6.283185307179586",
        "num_ids": 951
    },
    {
        "number": 234,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(2) == 8, 'failure'",
        "num_ids": 160
    },
    {
        "number": 235,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    x = bin(n).replace(\"0b\",\"\")\n    l = [x[i] for i in range(len(x)) if i % 2 == 0]\n    z = \"\".join(l)\n    return int(z, 2)\n",
        "test": "assert     even_bit_set_number(0) == 0 ",
        "num_ids": 343
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n",
        "test": "assert     check_occurences([",
        "num_ids": 1299
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    length=len(str)\n    count=0\n    for i in range(length):\n        if str[i]!=' ':\n            for j in range(i,length):\n                if str[j]==' ':\n                    break\n                count+=1\n    return count\n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 436
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m - 2, n-1)\n",
        "test": "assert     get_total_number_of_sequences(10,3) == 8",
        "num_ids": 2392
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    result = list1[:]\n    result[-1:] = list2\n    return result\n",
        "test": "assert     replace_list([1, 2, 3], [3]) == [1, 2, 3]",
        "num_ids": 440
    },
    {
        "number": 242,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac('abcdefghijklmnopqrstuvwxyz') == 26,     \"Incorrect count\"",
        "num_ids": 258
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    temp = N\n    if (temp & 1):\n        temp += 1\n        while (temp & 1):\n            temp += 1\n    else:\n        temp += 2\n        while (temp & 1):\n            temp += 1\n    return temp\n",
        "test": "assert     next_Perfect_Square(1)     == 2",
        "num_ids": 364
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return max(arr[0], max_sum(arr[1:]))\n",
        "test": "assert     max_sum([10, 2, 22, 4, 7, 6, -1, 3, 8, 5, 2, 1, 9, 10]) == 22, 'incorrect result'",
        "num_ids": 773
    },
    {
        "number": 246,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number ** 0.5\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 559
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # table[i][j] will be False if substring str[i..j] \n    # is not palindrome. Else table[i][j] will be \n    # True\n    table = [[False for x in range(n)] for x in range(n)] \n    \n",
        "test": "assert     lps('cbbd') == 2",
        "num_ids": 342
    },
    {
        "number": 248,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 389
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if not array_nums1:\n        return []\n    result = []\n    # result = array_nums2.copy()\n    for num in array_nums1:\n        if num in array_nums2:\n            result.append(num)\n    return result\n    \n",
        "test": "assert     intersection_array([1,2,3],[2,3,4])    == [2,3]",
        "num_ids": 471
    },
    {
        "number": 250,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    cnt = 0\n    for e in tup:\n        if x == e:\n            cnt+=1\n    return cnt\n",
        "test": "assert     (count_X((0,0,0,0,0), 0) == 5),     'Not correct'",
        "num_ids": 302
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Your Code Here\n    return [element] + list\n",
        "test": "assert     insert_element([1,2,3],10) == [10,1,2,3]",
        "num_ids": 413
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar=[]\n    for i in numbers:\n        polar.append(cmath.polar(i))\n    return polar\n",
        "test": "assert     convert(complex(2.0, 3.0)) == (3.0, 2.0), 'FAILED: complex to polar'",
        "num_ids": 470
    },
    {
        "number": 253,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    return count\n",
        "test": "assert     count_integer( [1,2,3,4,5] )     == 5",
        "num_ids": 471
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(comb) for comb in combinations_with_replacement(l, n)]\n    ",
        "test": "assert     [tuple(x) for x in combinations_colors(['a', 'b', 'c', 'd'], 3)] == [('a', 'a', 'a'), ('a', 'a', 'b'), ('a', 'a', 'c'), ('a', 'a', 'd'), ('a', 'b', 'b'), ('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'c', 'c'), ('a', 'c', 'd'), ('a', 'd', 'd'), ('b', 'b', 'b'), ('b', 'b', 'c'), ('b', 'b', 'd'), ('b', 'c', 'c'), ('b', 'c', 'd'), ('b', 'd', 'd'), ('c', 'c', 'c'), ('c', 'c', 'd'), ('c', 'd', 'd'), ('d', 'd', 'd')]",
        "num_ids": 1200
    },
    {
        "number": 256,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        count=1\n        i=2\n        while (i<=n):\n            if n%i==0:\n                count=count+1\n                i=i+1\n            else:\n                i=i+1\n        return count\n",
        "test": "assert     count_Primes_nums(1) == 0",
        "num_ids": 550
    },
    {
        "number": 257,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     swap_numbers(5, 10) == (10, 5)",
        "num_ids": 168
    },
    {
        "number": 259,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert     maximize_elements( (1, 2, 3, 4, 5), (10, 11, 12, 13, 14) ) == (10, 11, 12, 13, 14)",
        "num_ids": 630
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    \n    y = 3\n    x = 2\n    i = 1\n    while i < n:\n        x = ((x ** 2) + (1/y)) % n\n        y = ((y ** 2) - 2) % n\n        i += 1\n    return (x, n)\n",
        "test": "assert     newman_prime(0) == 2",
        "num_ids": 720
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(list(i / j for i, j in zip(test_tup1, test_tup2)))\n",
        "test": "assert     division_elements((10, 2, 5, 3), (3, 10, -1, 2)) == [(3, -1, 5, -1.5), (2, 0, 2, -2.5)]",
        "num_ids": 456
    },
    {
        "number": 262,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "test": "assert     (split_two_parts(['a','b','c','d','e','f','g','h'], 2) == (['a','b'], ['c','d','e','f','g','h']))",
        "num_ids": 504
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # h_age = input(\"Enter your dog's age in human years: \")\n    h_age = float(h_age)\n    return h_age * 7.0\n",
        "test": "assert     dog_age(1) == 7",
        "num_ids": 386
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    i = 0\n    while i < len(S):\n        res.append(S[i:i+step])\n        i += step\n    return res\n",
        "test": "assert     list_split([1, 2, 3], 1) == [[1], [2], [3]]",
        "num_ids": 566
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "test": "assert     lateralsurface_cube(2)    == 24",
        "num_ids": 766
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def square_sum(n):\n        if n == 1:\n            return n\n        else:\n            return n + square_sum(n-1)\n    return square_sum(n)\n",
        "test": "assert     square_Sum(1) == 1",
        "num_ids": 306
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 5*find_star_num(n-2)\n",
        "test": "assert     find_star_num(1) ==    1",
        "num_ids": 329
    },
    {
        "number": 269,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('?') == 63",
        "num_ids": 240
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        if(i%2 == 0):\n            sum += arr[i]\n    return sum\n",
        "test": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == 25",
        "num_ids": 520
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        if i%2 == 0:\n            total += i**5\n    return total\n",
        "test": "assert     (even_Power_Sum(0) == 0)",
        "num_ids": 456
    },
    {
        "number": 272,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [val[-1] for val in test_list]\n",
        "test": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 401
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([x-y for x,y in zip(test_tup1, test_tup2)])\n",
        "test": "assert     substract_elements(('d', 'e', 'f'), ('a', 'b')) ==     ('f', 'e', 'c')",
        "num_ids": 516
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif n % 2 == 0:\n        return int(n / 2) * (int(n / 2) + 1)\n    else:\n        return int(n / 2) * (int(n / 2) + 1) + 1\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 1",
        "num_ids": 530
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14*r**2)*h\n    \nprint(volume_cylinder(2,2))\n",
        "test": "assert     volume_cylinder(1, 5) == 25.0",
        "num_ids": 283
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert     dict_filter({0: 10, 1: 11, 2: 12, 3: 13}, 4)         == {0: 10, 1: 11, 3: 13}",
        "num_ids": 632
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_list = list(test_tup)\n    for i in range(1, len(test_list)):\n        if test_list[i] == test_list[0]:\n            return i\n",
        "test": "assert     count_first_elements((1,2,3,1,2)) == 3",
        "num_ids": 518
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    nth_num = n - n % 10\n    nth_num = nth_num // 10\n    return nth_num\n",
        "test": "assert     is_num_decagonal(0) == 0",
        "num_ids": 410
    },
    {
        "number": 280,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert     (True, 0) == sequential_search([0, 1, 2, 3, 4], 0)",
        "num_ids": 420
    },
    {
        "number": 281,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert     all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 405
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res=[]\n    for i in range(len(nums1)):\n        res.append(nums1[i]-nums2[i])\n    return res\ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    res=[]\n    for i in range(len(nums1)):\n        res.append(nums1[i]+nums2[i])\n    return res\ndef sort_list(l):\n    '''\n    Write a function to sort the elements of a list in non-decreasing order\n    '''\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[j]<l[i]:\n                temp=l[j]\n                l[j]=l[i]\n                l[i]=temp\n    return l\ndef sort_list_2(l):\n    '''\n    Write a function to sort the elements of a list in non-decreasing order\n    '''\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[j]<l[i]:\n                l[i],l[j]=l[j],l[i]\n    return l\ndef nth_list_element(l,n):\n    '''\n    Write a function to find the nth element of a list\n    '''\n    return l[n]\ndef first_list_element(l):\n    '''\n    Write a function to find the first element of a list\n    '''\n    return l[0]\ndef last_list_element(l):\n    '''\n    Write a function to find the last element of a list\n    '''\n    return l[-1]\ndef middle_list_element(l):\n    '''\n    Write a function to find the middle element of a list\n    '''\n    return l[len(l)/2]\ndef reverse_list(l):\n    '''\n    Write a function to reverse a list\n    '''\n    return l[::-1]\ndef sort_list_by_last_element(l):\n    '''\n    Write a function to sort the elements of a list in non-decreasing order by the last element\n    '''\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[j][-1]<l[i][-1]:\n                temp=l[j]\n                l[j]=l[i]\n                l[i]=temp\n    return l\ndef first_and_last_list_element(l):\n    '''\n    Write a function to find the first and last element of a list\n    '''\n    return [first_list_element(l),last_list_element(l)]\ndef nth_element_of_list(l,n):\n    '''\n    Write a function to find the nth element of a list\n    '''\n    return l[n]\ndef in_list(l,target):\n    '''\n    Write a function to find if a list contains a target element\n    '''\n    for i in range(len(l)):\n        if l[i]==target:\n            return True\n    return False\ndef get_length(l):\n    '''\n    Write a function to get the length of a list\n    '''\n    return len(l)\ndef get_elements(l,start,end):\n    '''\n    Write a function to get the elements of a list between two indices\n    '''\n    return l[start:end+1]\ndef get_index_of_element(l,target):\n    '''\n    Write a function to get the index of an element in a list\n    '''\n    for i in range(len(l)):\n        if l[i]==target:\n            return i\n    return -1\ndef get_index_of_first_element(l,target):\n    '''\n    Write a function to get the index of the first element of a list\n    '''\n    for i in range(len(l)):\n        if l[i]==target:\n            return i\n    return -1\ndef get_index_of_last_element(l,target):\n    '''\n    Write a function to get the index of the last element of a list\n    '''\n    for i in range(len(l)-1,-1,-1):\n        if l[i]==target:\n            return i\n    return -1\ndef get_index_of_middle_element(l,target):\n    '''\n    Write a function to get the index of the middle element of a list\n    '''\n    mid=len(l)/2\n    for i in range(mid):\n        if l[i]==target:\n            return i\n    for i in range(mid+1,len(l)):\n        if l[i]==target:\n            return i\n    return -1\ndef remove_list_element(l,target):\n    '''\n    Write a function to remove an element from a list\n    '''\n    for i in range(len(l)):\n        if l[i]==target:\n            l[i]='_'\n    return l\ndef remove_list_element_2(l,target):\n    '''\n    Write a function to remove an element from a list\n    '''\n    for i in range(len(l)):\n        if l[i]==target:\n            l[i]='_'\n    return l[1:]\ndef remove_list_element_3(l,target):\n    '''\n    Write a function to remove an element from a list\n    '''\n    for i in range(len(l)):\n        if l[i]==target:\n            l[i]='_'\n    return l[0:len(l)-1]\ndef remove_list_element_4(l,target):\n    '''\n    Write a function to remove an element from a list\n    '''\n    for i in range(len(l)):\n        if l[i]==target:\n            l[i]='_'\n    return l[0:i]+l[i+1:]\ndef count_list_element(l,target):\n    '''\n    Write a function to count the number of elements of a list\n    '''\n    cnt=0\n    for i in range(len(l)):\n        if l[i]==target:\n            cnt+=1\n    return cnt\ndef count_list_element_2(l,target):\n    '''\n    Write a function to count the number of elements of a list\n    '''\n    cnt=0\n    for i in range(len(l)):\n        if l[i]==target:\n            cnt+=1\n    return cnt\ndef sum_list(l):\n    '''\n    Write a function to sum the elements of a list\n    '''\n    s=0\n    for i in range(len(l)):\n        s+=l[i]\n    return s\ndef get_max_element(l):\n    '''\n    Write a function to get the max element of a list\n    '''\n    m=l[0]\n    for i in range(1,len(l)):\n        if l[i]>m:\n            m=l[i]\n    return m\ndef get_min_element(l):\n    '''\n    Write a function to get the max element of a list\n    '''\n    m=l[0]\n    for i in range(1,len(l)):\n        if l[i]<m:\n            m=l[i]\n    return m\ndef largest_sublist(l):\n    '''\n    Write a function to find the largest sublist in a list\n    '''\n    max_sublist=[]\n    for i in range(len(l)):\n        max_sublist.append(l[i])\n        for j in range(i+1,len(l)):\n            if l[j]>l[i]:\n                max_sublist.append(l[j])\n    return max_sublist\ndef min_list(l):\n    '''\n    Write a function to find the smallest element of a list\n    '''\n    min_element=l[0]\n    for i in rang",
        "test": "assert ",
        "num_ids": 446
    },
    {
        "number": 283,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def dig(n): \n        n=str(n)\n        return [int(i) for i in n]\n    def digit_freq(n): \n        dic={}\n        for i in dig(n): \n            if i not in dic: \n                dic[i]=1\n            else: \n                dic[i]+=1\n        return dic\n    def digit_freq_check(dic): \n        for k,v in dic.items(): \n            if v>k: \n                return False\n        return True\n    n=str(n)\n    dic=digit_freq(n)\n    return digit_freq_check(dic)\n",
        "test": "assert     validate(1234) ==     True",
        "num_ids": 577
    },
    {
        "number": 284,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n    \n    \ndef check_element_bool(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return element in list\n    \n    \ndef check_element_bool_2(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n    \n",
        "test": "assert     check_element(['A','B','C'],'A') == True",
        "num_ids": 332
    },
    {
        "number": 285,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'(.)b{2,3}(.)',text))\n",
        "test": "assert     text_match_two_three('') == False",
        "num_ids": 446
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(k):\n        max_sum += max(a)\n        a = a[1:] + [a[0]]\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([1,2,3,4], 4, 2) == 8",
        "num_ids": 457
    },
    {
        "number": 287,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n<0:\n        return\n    \n    if n==0:\n        return 0\n    else:\n        return square_Sum(n-1)+n*n\n    \n    \ndef consecutive_product(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of consecutive product of first n natural numbers.\n    '''\n    if n<0:\n        return\n    \n    if n==0:\n        return 1\n    else:\n        return consecutive_product(n-1)*n\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 2292
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n",
        "test": "assert     max_length([[1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]) == 3",
        "num_ids": 658
    },
    {
        "number": 291,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return k\n    else:\n        return count_no_of_ways(n-1, k) + k*count_no_of_ways(n-2, k)\n",
        "test": "assert     count_no_of_ways(2, 1) == 1",
        "num_ids": 657
    },
    {
        "number": 292,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert     find(3,5) == 0",
        "num_ids": 228
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c=math.sqrt(w**2+h**2)\n    return c\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c=math.sqrt(w**2+h**2)\n    return c\n",
        "test": "assert     otherside_rightangle(4,3) == 5",
        "num_ids": 632
    },
    {
        "number": 294,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    maximum = listval[0]\n    for item in listval:\n        if item > maximum:\n            maximum = item\n    return maximum\n",
        "test": "assert     max_val([0, 1, 2, 3, 4, 5, 6]) == 6",
        "num_ids": 353
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = 0\n    for divisor in range(1, number):\n        if number % divisor == 0:\n            divisors = divisors + divisor\n    return divisors\n",
        "test": "assert     sum_div(3) == 1",
        "num_ids": 332
    },
    {
        "number": 296,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                Inv_Count = Inv_Count + 1\n    return Inv_Count\n",
        "test": "assert     get_Inv_Count([])        == 0",
        "num_ids": 736
    },
    {
        "number": 297,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for item in list1:\n        if isinstance(item, list):\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n",
        "test": "assert     flatten_list( [1, [2, [3], 4, [5, [6, [7]]]]]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 554
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for tup in stdata:\n        val = sum(tup)\n        if val > max_agg:\n            max_agg = val\n    return max_agg\n",
        "test": "assert     max_aggregate([(1,2,3), (1,2,4), (1,2,5), (1,2,6), (1,2,7)]) == 10",
        "num_ids": 722
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    count = 0\n    if n > 1:\n        count += count_binary_seq(n-1)\n    if n > 2:\n        count += count_binary_seq(n-2)\n    if n > 3:\n        count += count_binary_seq(n-3)\n    return count\n",
        "test": "assert     count_binary_seq(2) == 2",
        "num_ids": 420
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n        else:\n            depth = max(depth, 1)\n    return depth\n",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 2377
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index > len(arr) :\n        return None\n    \n    return arr[rotations[index]-1]\n",
        "test": "assert     find_Element( [1,2,3,4,5,6,7,8,9], [[0,3],[1,2],[2,4],[1,5],[3,6],[4,7],[5,8]], [1,1,1,1,1,1,1], 0 ) == 1",
        "num_ids": 630
    },
    {
        "number": 305,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n",
        "test": "assert     start_withp(['this', 'is', 'a', 'test', 'pqr', 'pqr', 'pqr']) == ['pqr', 'pqr', 'pqr']",
        "num_ids": 549
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # If k = 0, then we are looking for a sum of increasing subsequence which starts from 0th index and includes ith element, i.e., k = 0\n",
        "test": "assert         max_sum_increasing_subseq([1, 5, 3, 7], 4, 3, 7) == 17",
        "num_ids": 789
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    print \":\".join(tuplex[m:n])\n",
        "test": "assert     colon_tuplex((1,2,3,4,5),3,3)==(1,2,3,4,5)",
        "num_ids": 373
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    for i in range(N):\n        tmp = 0\n        for j in range(len(nums1)):\n            tmp = tmp * nums1[j]\n        for k in range(len(nums2)):\n            tmp = tmp * nums2[k]\n        res.append(tmp)\n    return res\n",
        "test": "assert     large_product([5, 7, 2, 3, 9, 4, 1, 6], ",
        "num_ids": 919
    },
    {
        "number": 309,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(5, 2)    ==    5",
        "num_ids": 249
    },
    {
        "number": 310,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    l = []\n    for i in str1:\n        l.append(i)\n    return tuple(l)\n",
        "test": "assert     string_to_tuple('ab') == ('a', 'b')",
        "num_ids": 420
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 0:\n        n = n & 0xffffffff\n    return n\n",
        "test": "assert     (set_left_most_unset_bit(0) == 0)",
        "num_ids": 1955
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 3.1415926*r*r*h/3\ndef volume_cone_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 3.1415926*r*r*h/3\ndef surface_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 3.1415926*r*r+math.pi*math.pow(r,2)*2+math.pi*r*h\ndef surface_cone_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 3.1415926*r*r+math.pi*math.pow(r,2)*2+math.pi*r*h\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*math.pow(r,2)\ndef surface_sphere_py(r):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4*math.pi*math.pow(r,2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*math.pow(r,3)\ndef volume_sphere_py(r):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4/3*math.pi*math.pow(r,3)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 3.1415926*r*r*h\ndef volume_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 3.1415926*r*r*h\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.1415926*r*r+2*3.1415926*r*h+2*math.pi*r*r\ndef surface_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 2*3.1415926*r*r+2*3.1415926*r*h+2*math.pi*r*r\ndef volume_sphere_in_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder inside a sphere.\n    '''\n    return 4/3*math.pi*math.pow(r,3)*h\ndef volume_sphere_in_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4/3*math.pi*math.pow(r,3)*h\ndef volume_cylinder_in_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere inside a cylinder.\n    '''\n    return 4/3*math.pi*math.pow(r,2)*h\ndef volume_cylinder_in_sphere_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4/3*math.pi*math.pow(r,2)*h\ndef volume_cone_in_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere inside a cone.\n    '''\n    return math.pi*math.pow(r,2)*h\ndef volume_cone_in_sphere_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return math.pi*math.pow(r,2)*h\ndef volume_sphere_in_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4/3*math.pi*math.pow(r,3)*h\ndef surface_cone_in_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder inside a cone.\n    '''\n    return 2*math.pi*r*r+2*math.pi*r*h+2*math.pi*math.pow(r,2)*h\ndef surface_cone_in_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 2*math.pi*r*r+2*math.pi*r*h+2*math.pi*math.pow(r,2)*h\ndef volume_cone_in_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4/3*math.pi*math.pow(r,2)*h\ndef surface_cylinder_in_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone inside a cylinder.\n    '''\n    return 2*math.pi*r*r+2*math.pi*r*h+2*math.pi*math.pow(r,2)*h\ndef surface_cylinder_in_cone_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 2*math.pi*r*r+2*math.pi*r*h+2*math.pi*math.pow(r,2)*h\ndef volume_cone_in_sphere_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4/3*math.pi*math.pow(r,3)*h\ndef volume_cone_in_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere inside a cone.\n    '''\n    return 4/3*math.pi*math.pow(r,2)*h\ndef volume_cylinder_in_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder inside a cone.\n    '''\n    return 4/3*math.pi*math.pow(r,2)*h\ndef surface_sphere_in_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder inside a sphere.\n    '''\n    return 2*3.1415926*r*r+2*3.1415926*r*h+2*math.pi*r*r\ndef surface_sphere_in_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 2*3.1415926*r*r+2*3.1415926*r*h+2*math.pi*r*r\ndef surface_sphere_in_cone(r):\n    '''\n    Write a function to find the surface area of a cone inside a sphere.\n    '''\n    return 2*math.pi*math.pow(r,2)\ndef surface_sphere_in_cone_py(r):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 2*math.pi*math.pow(r,2)\ndef volume_sphere_in_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere inside a cylinder.\n    '''\n    return 4/3*math.pi*math.pow(r,3)*h\ndef volume_sphere_in_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4/3*math.pi*math.pow(r,3)*h\ndef surface_cylinder_in_sphere(r,h):\n",
        "test": "assert     volume_cone(2,3) == (math.pi/3)*(3*3*3)",
        "num_ids": 317
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(2**math.ceil(math.log(n,2)))\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 312
    },
    {
        "number": 389,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n",
        "test": "assert     find_lucas(1) == 1",
        "num_ids": 362
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n",
        "test": "assert     add_string(['{}', '{}'], '{}') == ['{}', '{}'], 'incorrect'",
        "num_ids": 894
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    lst = [l1, l2, l3]\n    dic = {lst[i]: {} for i in range(len(lst))}\n",
        "test": "assert     convert_list_dictionary([1, 2, 3], [2, 3, 4], [5, 6, 7]) == {1: {2: {3: {4: {5: {6: {7: [8, 9, 10]}}}}}}}, 'fails'",
        "num_ids": 914
    },
    {
        "number": 392,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 13\n    elif n%2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    elif n%3 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    elif n%4 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 896
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n",
        "test": "assert ",
        "num_ids": 465
    },
    {
        "number": 394,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    t = set(test_tup)\n    return len(t) == len(test_tup)\n",
        "test": "assert     check_distinct((1, 2, 3, 4)) == True",
        "num_ids": 399
    },
    {
        "number": 395,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    list1 = []\n    for i in str1:\n        if i not in list1:\n            list1.append(i)\n        else:\n            continue\n    return list1[0]\n",
        "test": "assert     first_non_repeating_character('s') =='s'",
        "num_ids": 445
    },
    {
        "number": 396,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (string[0] == string[-1])\n",
        "test": "assert     check_char('a')",
        "num_ids": 315
    },
    {
        "number": 397,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # https://docs.python.org/2/library/statistics.html\n    # https://docs.python.org/2/library/math.html\n    # https://docs.python.org/2/library/collections.html\n    return sorted([a,b,c])[1]\n",
        "test": "assert     median_numbers(0,0,0) == 0",
        "num_ids": 512
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum([int(i) for i in str(num)])\n    return total\n",
        "test": "assert     sum_of_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45",
        "num_ids": 366
    },
    {
        "number": 399,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x ^ y for x, y in zip(test_tup1, test_tup2)])\n",
        "test": "assert     bitwise_xor((0, 0), (0, 1)) == (0, 1)",
        "num_ids": 533
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Use the set data structure to identify unique tuples\n    return len(set(tuple(sorted(test_list)) for test_list in test_list))\n",
        "test": "assert     extract_freq([])     == 0,    'empty list'",
        "num_ids": 308
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] + test_tup2[i],)\n    return result_tup\n",
        "test": "assert         add_nested_tuples((1,3),(2,4)) == (1+2,3+4)",
        "num_ids": 508
    },
    {
        "number": 404,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "test": "assert     minimum(5,5) == 5",
        "num_ids": 220
    },
    {
        "number": 405,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_tuplex(('a', 'b', 'c'), ('a', 'b', 'd')) == False, \"2nd case\"",
        "num_ids": 528
    },
    {
        "number": 406,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n",
        "test": "assert     find_Parity(5) == 1",
        "num_ids": 195
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    nums = list(str(n))\n    if nums[0] <= nums[-1]:\n        return int(''.join(sorted(nums, reverse=True)))\n    return int(''.join(sorted(nums)))\n",
        "test": "assert     rearrange_bigger(123) == 321",
        "num_ids": 715
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    if k > len(nums1) * len(nums2):\n        return []\n    # heap queue\n    hq = []\n    # store all the tuples\n    res = []\n    i, j = 0, 0\n    # loop thru the array and sort the tuples\n    while i < len(nums1) and j < len(nums2):\n        heapq.heappush(hq, (nums1[i] + nums2[j], i, j))\n        i += 1\n        j += 1\n    # loop thru the k elemnts and pop\n    for _ in range(k):\n        res.append(heapq.heappop(hq))\n    return res\n",
        "test": "assert     k_smallest_pairs([1, 2, 3], [1, 2, 3], 0) == []",
        "num_ids": 1624
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    length = len(list1)\n    prod_list = []\n    for i in range(length):\n        prod_list.append(list1[i][0]*list1[i][1])\n    return min(prod_list)\n",
        "test": "assert     min_product_tuple([(1, 4), (5, 3), (8, 2)]) == 4",
        "num_ids": 724
    },
    {
        "number": 410,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if(len(listval)==0):\n        return None\n    \n    min=listval[0]\n    for i in listval:\n        if(i<min):\n            min=i\n    return min\n",
        "test": "assert     min_val([1,2,3,4,5,6]) == 1",
        "num_ids": 276
    },
    {
        "number": 411,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = \"\"\n    if word == None or word == \"\":\n        return None\n    elif word == \"\":\n        return \"\"\n    else:\n        words = word.split(\"_\")\n        for i, word in enumerate(words):\n            if i == 0:\n                result += word\n            else:\n                result += word.capitalize()\n        return result\n",
        "test": "assert     snake_to_camel('foo_bar') == 'fooBar'",
        "num_ids": 634
    },
    {
        "number": 412,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n    \n",
        "test": "assert     (remove_odd([]) == []), \"broken\"",
        "num_ids": 454
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        print(\"Given index is out of bounds\")\n        return\n    if n == 0:\n        print(list1[0])\n        return\n    else:\n        new_list = []\n        for i in range(0,n):\n            new_list.append(list1[i])\n        for i in range(n, len(list1)):\n            new_list.append(list1[i])\n    print(new_list)\n",
        "test": "assert     extract_nth_element( [('a', 1), ('b', 2), ('c', 3)], 1 ) == ('b', 2)",
        "num_ids": 531
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return 1\n    return 0\n",
        "test": "assert     overlapping(range(10),range(10))",
        "num_ids": 404
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[len(arr)-1]*arr[len(arr)-2]\n    \ndef min_Product(arr): \n    '''\n    Write a python function to find a pair with lowest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[0]*arr[1]\n",
        "test": "assert     max_Product([-10, 3, 5, 6, 20]) == 30,'max_Product(array) = 30'",
        "num_ids": 599
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    grouped_tuples = {}\n    for index, val in enumerate(Input):\n        if val in grouped_tuples:\n            grouped_tuples[val].append(index)\n        else:\n            grouped_tuples[val] = [index]\n    return grouped_tuples\n",
        "test": "assert ",
        "num_ids": 662
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    for each in lst:\n        if len(each) > max_len:\n            max_len = len(each)\n            max_num = each\n    return max_num\n    \ndef Find_Max_with_key(lst, key): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0][key])\n    for each in lst:\n        if len(each[key]) > max_len:\n            max_len = len(each[key])\n            max_num = each[key]\n    return max_num\n",
        "test": "assert     Find_Max(['a', 'aa', 'bb', 'cc', 'dddd', 'e']) == 'dddd'",
        "num_ids": 508
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(map(round, list1)) * len(list1)\n",
        "test": "assert     round_and_sum([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) == (0.15, 10)",
        "num_ids": 468
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            cube_sum = cube_sum + i**3\n    return cube_sum\n",
        "test": "assert     (cube_Sum(0) == 0)",
        "num_ids": 309
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    for i in range(len(test_tup)):\n        test_tup[i] = str(test_tup[i])\n    return''.join(test_tup)\n",
        "test": "assert     concatenate_tuple(('a', 'b', 'c')) == 'a-b-c'",
        "num_ids": 490
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0.0\n    for i in range(1,n+1):\n        cube_sum += i**3\n    average = cube_sum / n\n    return average\n",
        "test": "assert     find_Average_Of_Cube(1) ==     1 ",
        "num_ids": 361
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for index in test_tuple:\n        print(index[-1])\n",
        "test": "assert     extract_rear(('hello', 'I', 'like', 'pizza', 'world')) == ('pizza', 'world')",
        "num_ids": 495
    },
    {
        "number": 425,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1:\n        if element == x:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([\"a\",\"b\",\"c\",\"d\",\"e\"], \"z\") == 0",
        "num_ids": 442
    },
    {
        "number": 426,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2==1]\n",
        "test": "assert     filter_oddnumbers([]) == [], 'Empty list should return empty list'",
        "num_ids": 675
    },
    {
        "number": 427,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_list = dt.split('-')\n    # print (date_list)\n    return (date_list[2] + '-' + date_list[1] + '-' + date_list[0])\n",
        "test": "assert     change_date_format('2016-01-01') == '01-01-2016', change_date_format('2016-01-01')",
        "num_ids": 575
    },
    {
        "number": 428,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3*h+1\n    while h >= 1:\n        for i in range(h,n):\n            val = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > val:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = val\n        h = int(h/3)\n    return my_list\n",
        "test": "assert     shell_sort([4, 3, 2, 1]) == [1, 2, 3, 4], 'Failed test 1'",
        "num_ids": 822
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (list(zip(test_tup1, test_tup2))[0][0], list(zip(test_tup1, test_tup2))[1][0])\n    \n",
        "test": "assert     and_tuples((1,2,3),(4,5,6,7)) == (1,2,3)",
        "num_ids": 702
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4 * a * c)**0.5) / (2 * a)\n",
        "test": "assert     parabola_directrix(1, 0, -1) == 1",
        "num_ids": 197
    },
    {
        "number": 431,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert     common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == False",
        "num_ids": 466
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2 * (base1+base2) * height\n",
        "test": "assert     median_trapezium(1,1,1) == 1",
        "num_ids": 287
    },
    {
        "number": 433,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([2,1,3,5,6,4], 5) == True",
        "num_ids": 346
    },
    {
        "number": 434,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.search(r'ab+', text))\n",
        "test": "assert     text_match_one(\"have an b\") == False",
        "num_ids": 265
    },
    {
        "number": 435,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0 :\n        return n % 10\n    elif n == 0 :\n        return 0\n    else :\n        return -1 * (n % -10)\n",
        "test": "assert     last_Digit(1001) == 1",
        "num_ids": 250
    },
    {
        "number": 436,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n    \ndef neg_nos2(list2):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list2 if x < 0]\n    \ndef neg_nos3(list3):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list3 if x < 0]\n    \ndef neg_nos4(list4):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list4 if x < 0]\n    \ndef neg_nos5(list5):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list5 if x < 0]\n    \ndef neg_nos6(list6):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list6 if x < 0]\n    \ndef neg_nos7(list7):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list7 if x < 0]\n    \ndef neg_nos8(list8):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list8 if x < 0]\n    \ndef neg_nos9(list9):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list9 if x < 0]\n    \ndef neg_nos10(list10):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list10 if x < 0]\n    \ndef neg_nos11(list11):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list11 if x < 0]\n    \ndef neg_nos12(list12):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list12 if x < 0]\n    \ndef neg_nos13(list13):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list13 if x < 0]\n    \ndef neg_nos14(list14):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list14 if x < 0]\n    \ndef neg_nos15(list15):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list15 if x < 0]\n    \ndef neg_nos16(list16):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list16 if x < 0]\n    \ndef neg_nos17(list17):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list17 if x < 0]\n    \ndef neg_nos18(list18):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list18 if x < 0]\n    \ndef neg_nos19(list19):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list19 if x < 0]\n    \ndef neg_nos20(list20):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list20 if x < 0]\n    \ndef neg_nos21(list21):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list21 if x < 0]\n    \ndef neg_nos22(list22):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list22 if x < 0]\n    \ndef neg_nos23(list23):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list23 if x < 0]\n    \ndef neg_nos24(list24):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list24 if x < 0]\n    \ndef neg_nos25(list25):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list25 if x < 0]\n    \ndef neg_nos26(list26):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list26 if x < 0]\n    \ndef neg_nos27(list27):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list27 if x < 0]\n    \ndef neg_nos28(list28):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list28 if x < 0]\n    \ndef neg_nos29(list29):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list29 if x < 0]\n    \ndef neg_nos30(list30):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list30 if x < 0]\n    \ndef neg_nos31(list31):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list31 if x < 0]\n    \ndef neg_nos32(list32):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list32 if x < 0]\n    \ndef neg_nos33(list33):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list33 if x < 0]\n    \ndef neg_nos34(list34):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list34 if x < 0]\n    \ndef neg_nos35(list35):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list35 if x < 0]\n    \ndef neg_nos36(list36):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list36 if x < 0]\n    \ndef neg_nos37(list37):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list37 if x < 0]\n    \ndef neg_nos38(list38):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list38 if x < 0]\n    \ndef neg_nos39(list39):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list39 if x < 0]\n    \ndef neg_nos40(list40):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list40 if x < 0]\n    \ndef neg_nos41(list41):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list41 if x < 0]\n",
        "test": "assert     neg_nos([2,3,5,7,9,13,15]) == []",
        "num_ids": 294
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    output = \"\"\n    for i in range(len(str1)):\n        if(i % 2 == 0):\n            output += str1[i]\n    return output\n",
        "test": "assert     'abcd' == remove_odd('abed')",
        "num_ids": 414
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if i[0] < i[1]:\n            count += 1\n    return count\n",
        "test": "assert     count_bidirectional([(1, 2), (2, 3), (1, 3)]) == 3",
        "num_ids": 550
    },
    {
        "number": 439,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ret = 0\n    for x in L:\n        ret = ret * 10 + x\n    return ret\n",
        "test": "assert     multiple_to_single([1,2,3]) == 123",
        "num_ids": 383
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'(.*[a-zA-Z])(.*\\b)(in)(.*)')\n    words = re.findall(pattern,text)\n    print words\n",
        "test": "assert     find_adverb_position('The cat saw the mouse in the house.')    == {'positions':    [10], 'adverb':    'mouse'}",
        "num_ids": 1097
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import numpy as np\n    surfacearea = 6*l**2\n    return surfacearea\n",
        "test": "assert     surfacearea_cube(3) == 54",
        "num_ids": 231
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len(filter(lambda x: x > 0, nums)) / float(len(nums))\n",
        "test": "assert     positive_count([1,1,1,-1,-1,-1,1,1,1,1,1]) == 1.0",
        "num_ids": 553
    },
    {
        "number": 443,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1=sorted(list1, reverse = True)\n    maxi=-1\n    for each in list1:\n        if each<0:\n            maxi=each\n    return maxi\n",
        "test": "assert     largest_neg([-1, 2, -3, 4, 5, 6, -7, 8, 9]) == -7",
        "num_ids": 589
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) <= K:\n            result.append(tup)\n    return result\n",
        "test": "assert     trim_tuple([(1,2,3,4,5),(6,7,8,9,10),(11,12,13,14,15),(16,17,18,19,20)], 2) == \\",
        "num_ids": 684
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    assert isinstance(test_tup1, tuple)\n    assert isinstance(test_tup2, tuple)\n    assert len(test_tup1) == len(test_tup2)\n    return tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n",
        "test": "assert     index_multiplication((1, 2, 3), (5, 6, 7)) == (5, 12, 21)",
        "num_ids": 614
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for ele in lst:\n        if ele in tup:\n            cnt += 1\n    return cnt\ndef search_in_tuple(tup, item):\n    '''\n    Write a python function to search for a tuple element in the tuple.\n    '''\n    if item in tup:\n        return tup.index(item)\n    else:\n        return -1\ndef count_values(tup):\n    '''\n    Write a python function to count the occurence of all elements of tuple\n    '''\n    return Counter(tup)\ndef remove_from_tuple(tup, item):\n    '''\n    Write a python function to remove an item from tuple.\n    '''\n    return tuple(x for x in tup if x!= item)\ndef replace_item(tup, item, new_item):\n    '''\n    Write a python function to replace an item in a tuple with another item\n    '''\n    return tuple(x if x!= item else new_item for x in tup)\ndef split_string(str):\n    '''\n    Write a python function to split a string into two.\n    '''\n    return str.split(' ')\ndef convert_int(lst):\n    '''\n    Write a python function to convert a list of strings into a list of ints.\n    '''\n    return [int(x) for x in lst]\ndef merge_list(lst1, lst2):\n    '''\n    Write a python function to merge two lists.\n    '''\n    return lst1 + lst2\ndef remove_list_item(lst, item):\n    '''\n    Write a python function to remove an item from a list.\n    '''\n    return lst.remove(item)\ndef list_items_below_n(lst, n):\n    '''\n    Write a python function to return a list of items in a list, whose values are below a certain number.\n    '''\n    return [x for x in lst if x < n]\ndef find_missing_number(lst):\n    '''\n    Write a python function to find the missing number in a list of numbers.\n    '''\n    return len(lst) + sum(range(min(lst), max(lst) + 2)) - sum(lst)\ndef find_pairs(lst, k):\n    '''\n    Write a python function to find the pairs in a list of numbers with sum equal to a number.\n    '''\n    return [x for x in lst if x + k in lst]\ndef find_triplets(lst, k):\n    '''\n    Write a python function to find the triplets in a list of numbers with sum equal to a number.\n    '''\n    return [x for x in lst if k - x in lst]\ndef print_triplets(lst):\n    '''\n    Write a python function to print the triplets in a list.\n    '''\n    for ele in lst:\n        print(ele, end ='')\n    print()\ndef find_maximum_number(lst):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    return max(lst)\ndef find_minimum_number(lst):\n    '''\n    Write a python function to find the minimum number in a list.\n    '''\n    return min(lst)\ndef print_sorted_list(lst):\n    '''\n    Write a python function to print a list in a sorted order.\n    '''\n    lst.sort()\n    for ele in lst:\n        print(ele, end ='')\n    print()\ndef reverse_list(lst):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return lst[::-1]\ndef find_duplicates(lst):\n    '''\n    Write a python function to find the duplicates in a list.\n    '''\n    return [x for x,y in Counter(lst).items() if y > 1]\ndef find_triplets_in_list(lst):\n    '''\n    Write a python function to find all the triplets in a list.\n    '''\n    return [x for x in lst for i in lst if x + i in lst]\ndef find_distinct_numbers(lst):\n    '''\n    Write a python function to find the distinct numbers in a list.\n    '''\n    return [x for x in lst if lst.count(x) == 1]\ndef get_digit_numbers(lst):\n    '''\n    Write a python function to return the number of digits in a list of numbers.\n    '''\n    return sum(len(str(x)) for x in lst)\ndef get_factors(num):\n    '''\n    Write a python function to return the prime factors of a number.\n    '''\n    return [x for x in range(1, num + 1) if num % x == 0]\ndef remove_duplicate_list(lst):\n    '''\n    Write a python function to remove the duplicates in a list.\n    '''\n    return list(set(lst))\ndef get_max_and_min_number(lst):\n    '''\n    Write a python function to return the max and min number in a list.\n    '''\n    return max(lst), min(lst)\ndef find_missing_number_in_list(lst):\n    '''\n    Write a python function to find the missing number in a list.\n    '''\n    return len(lst) + sum(range(min(lst), max(lst) + 2)) - sum(lst)\ndef find_max_of_two_numbers(a, b):\n    '''\n    Write a python function to find the max of two numbers.\n    '''\n    return a if a > b else b\ndef find_max_of_three_numbers(a, b, c):\n    '''\n    Write a python function to find the max of three numbers.\n    '''\n    return a if a > b and a > c else b if b > c else c\ndef find_max_of_numbers(lst):\n    '''\n    Write a python function to find the max of a list of numbers.\n    '''\n    return max(lst)\ndef find_max_of_two_numbers_2(a, b):\n    '''\n    Write a python function to find the max of two numbers.\n    '''\n    return max(a, b)\ndef find_max_of_three_numbers_2(a, b, c):\n    '''\n    Write a python function to find the max of three numbers.\n    '''\n    return max(a, b, c)\ndef sum_of_digits_numbers(num):\n    '''\n    Write a python function to sum of digits of a number.\n    '''\n    return sum([int(x) for x in str(num)])\ndef find_sum_of_digits_numbers(lst):\n    '''\n    Write a python function to sum of digits of a number.\n    '''\n    return sum(sum_of_digits_numbers(x) for x in lst)\ndef find_difference_of_digits(num):\n    '''\n    Write a python function to find the difference of digits of a number.\n    '''\n    return sum(map(lambda x: int(x) ** 2, str(num)))\ndef find_difference_of_digits_2(num):\n    '''\n    Write a python function to find the difference of digits of a number.\n    '''\n    return sum([int(x) ** 2 for x in str(num)])\ndef sum_of_digits(num):\n    '''\n    Write a python function to sum of digits of a number.\n    '''\n    return sum([int(x) for x in str(num)])\ndef find_sum_of_digits(lst):\n    '''\n    Write a python function to sum of digits of a number.\n    '''\n    return sum(sum_of_digits(x) for x in lst)\ndef check_valid_string(str):\n    '''\n    Write a python function to check if a string is valid o",
        "test": "assert     count_Occurrence((1, 2, 3, 4, 4, 5, 1), [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [2, 2, 1, 1]",
        "num_ids": 2496
    },
    {
        "number": 447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num**3)\n    return res\n",
        "test": "assert     [1,16,27,64,125] == cube_nums([1,16,27,64,125])",
        "num_ids": 471
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 1\n    for i in range(1,n+1):\n        total += (4*i*(i+1)*(2*i+1))/(3*(i+2))\n    return total\n    \ndef find_sum_of_perrin(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    while n > 0:\n        if n%2 == 1:\n            total += n\n        n = n/2\n    return total\n",
        "test": "assert     cal_sum(0) == 1",
        "num_ids": 437
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n",
        "test": "assert         extract_string('a b c d e f g', 4) == ['a b', 'c d', 'e f', 'g']",
        "num_ids": 2477
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n",
        "test": "assert     remove_whitespaces('a b   c   ') == 'abc'",
        "num_ids": 271
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    return 0\n",
        "test": "assert     (loss_amount(10,10) == 0)",
        "num_ids": 251
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i \n    return result\ndef sumofSquare(n):\n    '''\n    Write a python function to find the sum of square of even factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i * i\n    return result\ndef sumofSquareFactors(n) : \n    '''\n    Write a python function to find the sum of square of even factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i * i\n    return result\ndef amicable(n):\n    '''\n    Write a python function to find the amicable number of a number.\n    '''\n    result = sumofSquare(sumofFactors(n))\n    if (result!= n): \n        return n\n    else: \n        return result\ndef amicableNumbers(n):\n    '''\n    Write a python function to find the amicable numbers of a number.\n    '''\n    result = []\n    for i in range(1, n + 1) : \n        if (amicable(i) < n):\n            result.append(amicable(i))\n    return result\ndef pFactors(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    result = []\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (i!= 1) : \n                result.append(i)\n                while (n % i == 0) :\n                    n /= i\n    if (n > 1) :\n        result.append(n)\n    return result\ndef sumofPrimeFactors(n) : \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i \n            while (n % i == 0) :\n                n /= i\n    if (n > 1) :\n        result += n\n    return result\ndef amicable_sum(n):\n    '''\n    Write a python function to find the amicable number of a number.\n    '''\n    result = 0\n    for i in range(1, n + 1) : \n        if (sumofFactors(amicable(i)) == i) :\n            result += i\n    return result\ndef amicable_sums(n):\n    '''\n    Write a python function to find the amicable number of a number.\n    '''\n    result = []\n    for i in range(1, n + 1) : \n        if (sumofFactors(amicable(i)) == i) :\n            result.append(i)\n    return result\ndef pFactors_sum(n) : \n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i \n            while (n % i == 0) :\n                n /= i\n    if (n > 1) :\n        result += n\n    return result\ndef is_fibonacci(n):\n    '''\n    Write a python function to check if the number is fibonacci or not.\n    '''\n    if (n == 0) or (n == 1):\n        return True\n    elif (n == 2):\n        return True\n    else:\n        return (is_fibonacci(n - 1) and is_fibonacci(n - 2))\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if (n == 0):\n        return 1\n    else:\n        return n * factorial(n - 1)\ndef pFactors_count(n):\n    '''\n    Write a python function to find the count of prime factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += 1\n            while (n % i == 0) :\n                n /= i\n    if (n > 1) :\n        result += 1\n    return result\ndef isPerfectNumber(n):\n    '''\n    Write a python function to check if the number is perfect number or not.\n    '''\n    if (n == sumofFactors(n)):\n        return True\n    else:\n        return False\ndef sumofSquareofFactors(n):\n    '''\n    Write a python function to find the sum of square of even factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i * i\n    return result\ndef sumofSquareFactors_count(n):\n    '''\n    Write a python function to find the count of square of even factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i * i\n    return result\ndef pFactors_count(n):\n    '''\n    Write a python function to find the count of prime factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += 1\n            while (n % i == 0) :\n                n /= i\n    if (n > 1) :\n        result += 1\n    return result\ndef pFactors_count_sum(n):\n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i \n            while (n % i == 0) :\n                n /= i\n    if (n > 1) :\n        result += n\n    return result\ndef sumofPrimeFactors_count(n):\n    '''\n    Write a python function to find the count of sum of prime factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i \n            while (n % i == 0) :\n                n /= i\n    if (n > 1) :\n        result += n\n    return result\nde",
        "test": "assert     sumofFactors(10) == 2",
        "num_ids": 442
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # your code here\n    return re.search(r'\\b[zZ][a-zA-z]+\\b', text)\n",
        "test": "assert     text_match_wordz('HeLLo, I AM IYOu') == None",
        "num_ids": 399
    },
    {
        "number": 455,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\ndef check_yearnumb_number(yearnumb):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    if (yearnumb % 4) == 0:\n        if (yearnumb % 100) == 0:\n            if (yearnumb % 400) == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef check_monthnumb_number_leapyear(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not.\n    '''\n    if check_monthnumb_number(monthnum) == True:\n        if monthnum == 2:\n            return check_yearnumb_number(yearnumb)\n        else:\n            return True\n    else:\n        return False\ndef check_daynumb_number(daynumb):\n    '''\n    Write a function to check whether the given day number is a valid number or not.\n    '''\n    if daynumb < 1 or daynumb > 31:\n        return False\n    else:\n        return True\ndef is_valid_date(year,month,day):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if check_monthnumb_number(month) == True:\n        if check_daynumb_number(day) == True:\n            if check_monthnumb_number_leapyear(month) == True:\n                if check_yearnumb_number(year) == True:\n                    return True\n                else:\n                    return False\n            else:\n                if check_daynumb_number(day) == True:\n                    return True\n                else:\n                    return False\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(1) is True",
        "num_ids": 476
    },
    {
        "number": 456,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = [str(x) for x in stringlist]\n    stringlist = stringlist[::-1]\n    return stringlist\n",
        "test": "assert     reverse_string_list([\"aa\", \"bb\"]) == [\"bb\", \"aa\"]",
        "num_ids": 406
    },
    {
        "number": 457,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #Base Case: If the list is empty, return None\n    if lst == []: \n        return None\n    #Find the minimum element in the list\n    min = lst[0]\n    for element in lst:\n        if element < min:\n            min = element\n    #Return the minimum element\n    return min\n",
        "test": "assert     Find_Min([[1, 2, 3, 4, 5], [3, 4, 6, 7, 8], [9, 10, 11, 12, 13], [13, 14, 15, 16, 17], [19, 20, 21, 22, 23]]) == [1, 2, 3, 4, 5], \"Test 1 failed\"",
        "num_ids": 995
    },
    {
        "number": 458,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(2,3) == 6",
        "num_ids": 275
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #return re.sub(r'[A-Z]', '', str1)\n    res = ''\n    for letter in str1:\n        if letter.isupper():\n            pass\n        else:\n            res += letter\n    return res\n",
        "test": "assert     remove_uppercase('hello') == 'hello'",
        "num_ids": 2324
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst] \n",
        "test": "assert     Extract([['a'], ['b', 'c'], ['d', 'e', 'f']]) == ['a', 'b', 'd']",
        "num_ids": 380
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr('') == 0",
        "num_ids": 300
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        return map(lambda x: [list1[0]] + x, combinations_list(list1[1:])) + combinations_list(list1[1:])\n",
        "test": "assert     [['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'c', 'd'], ['a', 'c'], ['a', 'd'], ['b', 'c', 'd'], ['b', 'c'], ['b', 'd'], ['c', 'd']]     == combinations_list([1,2,3,4])",
        "num_ids": 1180
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return None\n    \n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        # if previous number is negative, multiply it with max ending here,\n        # instead of adding it\n        if arr[i-1] < 0:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n            \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n",
        "test": "assert     max_subarray_product([-2, 0, -3]) == 0",
        "num_ids": 838
    },
    {
        "number": 464,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        for key in dict:\n            if key == n:\n                return False\n        return True\n",
        "test": "assert     check_value({'a':1, 'b':2, 'c':3}, 'a') == False",
        "num_ids": 382
    },
    {
        "number": 465,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # drop the items whose values are all empty strings\n    # dict1 = {'a': '', 'b': '', 'c': ''}\n    dict1 = {k:v for k,v in dict1.items() if v}\n    return dict1\n",
        "test": "assert         drop_empty({}) == {}",
        "num_ids": 500
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    curr_product = 1\n    for i in range(0,len(arr)):\n        curr_product = 1\n        for j in range(i, len(arr)):\n            curr_product *= arr[j]\n            max_product = max(curr_product, max_product)\n    return max_product\n",
        "test": "assert     max_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 719
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 3:\n        return None\n    else:\n        return test_tup[0] + test_tup[1] + test_tup[2]\n",
        "test": "assert     add_pairwise((1, 1, 2, 3)) ==    (2, 3, 3, 5)",
        "num_ids": 525
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a%b)\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return (arr[0] * arr[1]) % n\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = (res * arr[i]) % n\n    return res\n",
        "test": "assert     find_remainder([1, 2, 3], 10) == 6",
        "num_ids": 469
    },
    {
        "number": 472,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    def is_consecutive(l):\n        l.sort()\n        if(len(l) == 1):\n            return True\n        else:\n            for i in range(1,len(l)):\n                if(l[i] - l[i-1]!= 1):\n                    return False\n            return True\n    l = [int(i) for i in l]\n    return is_consecutive(l)\n",
        "test": "assert     check_Consecutive([1,2,3,4,5,6,7,8]) == True",
        "num_ids": 591
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [(x, y) for x in test_list1 for y in test_list2 if x == y]\n",
        "test": "assert tuple_intersection(test_list2, test_list1) == [('a', 'c'), ('a', 'd'), ('a', 'e')]",
        "num_ids": 516
    },
    {
        "number": 474,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n",
        "test": "assert     replace_char(\"Test\",\"x\",\"a\") == \"Test\"",
        "num_ids": 277
    },
    {
        "number": 475,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n",
        "test": "assert     sort_counter({'c':1,'b':2,'a':3}) ==     [('a',3),('b',2),('c',1)]",
        "num_ids": 446
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "test": "assert     big_sum([1,2,3]) == 4",
        "num_ids": 246
    },
    {
        "number": 477,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of the given number n.\n    '''\n    res = 1\n    for i in range(1,n+1):\n        res = res * i\n    return res\n",
        "test": "assert     is_lower('C++')",
        "num_ids": 215
    },
    {
        "number": 478,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    string = re.sub(r'[a-z]+', '', str1)\n    return string\n",
        "test": "assert     re.sub(r'([a-z])', r'', remove_lowercase('A')) == 'A'",
        "num_ids": 388
    },
    {
        "number": 479,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n % 10\n",
        "test": "assert     first_Digit(7) == 7",
        "num_ids": 231
    },
    {
        "number": 554,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    l=[]\n    for x in list:\n        if x%2==1:\n            l.append(x)\n    return l\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]",
        "num_ids": 698
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # the sum of the cubes of the first n natural numbers is given by:\n    # sum = n*(n+1)*(n+2)*(n+3)\n    # so the sum of the first n natural numbers is given by:\n    # sum = ((n+1)*n/2)**2\n    # therefore, the difference is given by:\n    # sum - ((n+1)*n/2)**2 = n**3 + (n**2/2)**2 - (n**2/2)**2\n    # sum - (n**3/2) = n**3 + n**2 - n**2\n    # so the difference is given by:\n    # n**3 - (n**2/2) = n**3\n    # and the difference is given by:\n    # n**3 - n**2 = n**3\n    # so the difference is:\n    # n**3 - n**2 = n**3\n    return n**3 - n**2\n",
        "test": "assert     difference(1) == 0",
        "num_ids": 469
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if ((A[i] ^ A[j]) & 1) == 1 : \n                count = count + 1\n    return count \n",
        "test": "assert     find_Odd_Pair( [1,0,1,0],3) == 0",
        "num_ids": 565
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('Python')     ==    'pYTHON', 'Failed'",
        "num_ids": 350
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1))!= len(str(n2)):\n        return 1\n    for i in range(len(str(n1))):\n        if int(str(n1)[i])!= int(str(n2)[i]):\n            return 1\n    return 0\n",
        "test": "assert     digit_distance_nums(123, 123) == 0",
        "num_ids": 424
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0 or len(a) == 0:\n        return 0\n    max_sum = a[0]\n    s = a[0]\n    for i in range(size):\n        if s < 0:\n            s = a[i]\n        else:\n            s = s + a[i]\n        if s > max_sum:\n            max_sum = s\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7) == 7",
        "num_ids": 2581
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result_tup = ()\n    for item in test_tup1:\n        if item not in test_tup2:\n            result_tup = result_tup + (item,)\n    for item in test_tup2:\n        if item not in test_tup1:\n            result_tup = result_tup + (item,)\n    return result_tup\n    #return sorted(set(test_tup1) | set(test_tup2))\n",
        "test": "assert     union_elements(('a', 'b'), ('c', 'd')) == ('a', 'b', 'c', 'd')",
        "num_ids": 562
    },
    {
        "number": 562,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    print(lst)\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return 1\n    else:\n        return Find_Max_Length(lst[1:]) + 1\n",
        "test": "assert     Find_Max_Length([]) == 0",
        "num_ids": 608
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        results = re.findall(r'\"([^\"]*)\"', text)\n        return results\n    except TypeError:\n        return\n",
        "test": "assert     extract_values(\"\"\"0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 82",
        "num_ids": 2367
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    print(count)\narr=[1,5,3,2,5,2,1]\nn=len(arr)\ncount_Pairs(arr,n)",
        "test": "assert     count_Pairs([1,2,3,4,5,6,7,8,9,10,11],50) == 25, \"Error in count_Pairs\"",
        "num_ids": 503
    },
    {
        "number": 565,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert     split('string') == ['s', 't', 'r', 'i', 'n', 'g']",
        "num_ids": 2320
    },
    {
        "number": 566,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 236
    },
    {
        "number": 567,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([]) == True, \"issort_list([]) == True\"",
        "num_ids": 2483
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert         empty_list(3) == [{}, {}, {}]",
        "num_ids": 233
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for l in list1:\n        l.sort()\n    return list1\n",
        "test": "assert     sort_sublists([['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l']]) == [['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l']]",
        "num_ids": 785
    },
    {
        "number": 572,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for num in nums:\n        if num not in unique:\n            unique.append(num)\n    return unique\n",
        "test": "assert     two_unique_nums(nums=[1,1,2,2,3,3]) == [1,2,3]",
        "num_ids": 2491
    },
    {
        "number": 573,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    product = 1\n    for number in list_data:\n        if number not in unique_list:\n            unique_list.append(number)\n    for number in unique_list:\n        product = product * number\n    return product\n",
        "test": "assert     unique_product([1,2,3,4,5]) == 120",
        "num_ids": 504
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * (r**2 + h**2) / 4\n",
        "test": "assert     surfacearea_cylinder(3,5) == 200",
        "num_ids": 378
    },
    {
        "number": 576,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True\n",
        "test": "assert is_Sub_Array([1,2,3,4], [1,2,3,4,5]) == False",
        "num_ids": 524
    },
    {
        "number": 577,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = int(n)\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (last_Digit_Factorial(n-1)*n)%10\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 366
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    return [x for z in zip(list1, list2, list3) for x in z]\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 626
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar_tup.append((elem1, elem2))\n    return dissimilar_tup\n",
        "test": "assert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c')) == []",
        "num_ids": 974
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        if len(test_tuple)>1:\n            even_fnc(test_tuple[0])\n            return even_ele(test_tuple[1:], even_fnc)\n        else:\n            return even_ele(test_tuple[0], even_fnc)\n    else:\n        return test_tuple\n",
        "test": "assert     even_ele((1, 2, [3, 4, 5], \"a\"), ",
        "num_ids": 494
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A=float(b*s)\n    print \"Surface area of the square pyramid is %.2f units^2\" %A\n",
        "test": "assert     surface_Area(2,2) == 4",
        "num_ids": 450
    },
    {
        "number": 582,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     not my_dict({1:2})",
        "num_ids": 198
    },
    {
        "number": 583,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    return catalan_number(num - 1) + catalan_number(num - 2)\n",
        "test": "assert     catalan_number(0)     == 1",
        "num_ids": 479
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    # pattern = re.compile('\\w*ly$')\n    # if re.search(pattern, text):\n    #     return True\n    # else:\n    #     return False\n    #\n    # print(re.search(pattern,text))\n    \n    text = re.sub('\\s','',text)\n    pattern = re.compile('ly$')\n    # print(text)\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n",
        "test": "assert     find_adverbs(\"\") == 0",
        "num_ids": 2429
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    minheap = []\n    for i in range(n):\n        heapq.heappush(minheap,items[i])\n    for i in range(n,len(items)):\n        if items[i] > minheap[0]:\n            heapq.heappop(minheap)\n            heapq.heappush(minheap,items[i])\n    return minheap\ndef least_expensive_items(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    maxheap = []\n    for i in range(n):\n        heapq.heappush(maxheap,items[i])\n    for i in range(n,len(items)):\n        if items[i] < maxheap[0]:\n            heapq.heappop(maxheap)\n            heapq.heappush(maxheap,items[i])\n    return maxheap\n",
        "test": "assert     [1,2,3,4,5] == expensive_items([1,2,3,4,5],5)",
        "num_ids": 657
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        n = n + len(l)\n    return l[:n], l[n:]\n",
        "test": "assert     split_Arr([1,2,3,4,5,6], 5) == [[1, 2, 3], [4, 5, 6]]",
        "num_ids": 480
    },
    {
        "number": 587,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     (list_tuple([1, 2, 3]) == (1, 2, 3))",
        "num_ids": 320
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([1,1,1,1]) == 0, \"big_diff( [1,1,1,1] ) returns 0\"",
        "num_ids": 396
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x = min(a,b)\n    y = max(a,b)\n    while x <= y:\n        if x**2 == y:\n            return x\n        x += 1\n",
        "test": "assert     perfect_squares(10, 26) == [16, 25]",
        "num_ids": 386
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.sqrt(x**2+y**2)\n    angle=cmath.atan2(y,x)\n    return r,angle\ndef rectangular_rect(r,angle):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=r*cmath.cos(angle)\n    y=r*cmath.sin(angle)\n    return x,y\n",
        "test": "assert     polar_rect(1.0, cmath.pi/4) == (0.5,-0.707)",
        "num_ids": 494
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "test": "assert     swap_List([1,2,3,4,5]) == [5,2,3,4,1], 'incorrect'",
        "num_ids": 352
    },
    {
        "number": 592,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(min(k,n-k)):\n        res = res * (n-i)\n        res = res // (i+1)\n    return res\n",
        "test": "assert     binomial_Coeff(5,3) == 10, \"binomial_Coeff is not correct\"",
        "num_ids": 463
    },
    {
        "number": 593,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.lstrip('0')\n    return ip\ndef remove_duplicates(mylist):\n    '''\n    Write a function that removes duplicates from a list\n    '''\n    return list(set(mylist))\n",
        "test": "assert     removezero_ip('1.2.3.4') == '1.2.3.4'",
        "num_ids": 375
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = (list1[0] - list1[1])\n    return diff\n",
        "test": "assert         diff_even_odd([4, 3, 2, 1]) == 1",
        "num_ids": 467
    },
    {
        "number": 595,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count+=1\n            str1 = str1[:i] + '0' + str1[i+1:]\n            str2 = str2[:i] + '1' + str2[i+1:]\n    return count\n",
        "test": "assert     min_Swaps(\"1011010101100\",\"1011010101100\") == 0",
        "num_ids": 528
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "test": "assert     tuple_size((1,2))    == 2, 'FAIL: tuple_size((1,2))'",
        "num_ids": 323
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    assert k >= 1, \"K should be at least 1\"\n    if not arr1:\n        return arr2[k-1]\n    if not arr2:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if arr1[0] < arr2[0]:\n        return find_kth(arr1[1:], arr2, k)\n    else:\n        return find_kth(arr1, arr2[1:], k-1)\n",
        "test": "assert     find_kth([1,2,3,4], [4,5,6], 2) == 4",
        "num_ids": 700
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_of_digits = len(str(number))\n    #sum_of_digits = sum(int(digit)**number_of_digits for digit in str(number))\n    sum_of_digits = sum(digit**number_of_digits for digit in map(int, str(number)))\n    return number == sum_of_digits\n",
        "test": "assert     armstrong_number(12) == False",
        "num_ids": 529
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    num = 1\n    while num <= number:\n        total += num\n        num += 1\n    return total, total/number\n",
        "test": "assert     sum_average(1) == (1,1)",
        "num_ids": 333
    },
    {
        "number": 600,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n == 1 : \n        return False \n    for i in range(2, n) : \n        if n % i == 0 : \n            return False \n    return True\n",
        "test": "assert     is_Even(10) == True",
        "num_ids": 247
    },
    {
        "number": 602,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    hash = {}\n    for char in str1:\n        if char not in hash:\n            hash[char] = 1\n        else:\n            return char\n    return None\n",
        "test": "assert     first_repeated_char('kamal') == 'a'",
        "num_ids": 458
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = [1]\n    i = 1\n    while len(lucids) < n:\n        i += 1\n        s = str(i)\n        l = int(s[0]) + int(s[1]) + int(s[2])\n        if (i % 2) == 0 and l <= 9:\n            lucids.append(l)\n    return lucids\n",
        "test": "assert     get_ludic(1) == [1]",
        "num_ids": 561
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s or len(s) == 0:\n        return ''\n",
        "test": "assert     reverse_words(\"this is my work\") == \"work is my is this\"",
        "num_ids": 446
    },
    {
        "number": 605,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n    return True\n",
        "test": "assert     prime_num(1) == False, \"1 is not a prime number\"",
        "num_ids": 534
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "test": "assert     radian_degree(degree = 90) == 1.5707963267948966, \"90 degree is 1.5707963267948966\"",
        "num_ids": 275
    },
    {
        "number": 607,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    match = re.search(pattern, text)\n    if match is not None:\n        start = match.start()\n        end = match.end()\n        return match.group(), start, end\n    else:\n        return None, None, None\n",
        "test": "assert     re.findall(r'\\s','') == [], 'Do not remove the spaces'",
        "num_ids": 530
    },
    {
        "number": 608,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a,b = 0,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 336
    },
    {
        "number": 610,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return list1\n    \n    first = list1[0]\n    list2 = [first]\n    for i in range(1,len(list1)):\n        if i!= L:\n            list2.append(list1[i])\n    return list2\n",
        "test": "assert     remove_kth_element([1,2,3,4,5], 2) == [1,2,4,5]",
        "num_ids": 548
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_num = 0\n    for row in test_list:\n        if len(row) >= N:\n            max_num = max(row[N-1], max_num)\n    return max_num\n",
        "test": "assert     max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 2) == 8",
        "num_ids": 579
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[], []]\n    for l in lst:\n        result[0].append(l[0])\n        result[1].append(l[1])\n    return result\n",
        "test": "assert     merge([[1, 2], [2, 3]])     == [[1, 2], [2, 3]]",
        "num_ids": 576
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:i+1]) for i in range(len(test_list))]\n",
        "test": "assert     cummulative_sum(test_list2) == test_tuple2",
        "num_ids": 636
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in nums:\n        average_list.append(sum(i) / len(i))\n    return average_list\n    \n    ",
        "test": "assert     average_tuple([(1,2),(3,4)]) == [1.5, 3.5]",
        "num_ids": 632
    },
    {
        "number": 616,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    return result\n",
        "test": "assert     (0, 1) == tuple_modulo((0, 1), (1, 2))",
        "num_ids": 600
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d < 0: \n        return 0\n    if d == 0: \n        return 1\n    if d > steps: \n        return 0\n    if d == steps: \n        return 1\n    return 1 + min_Jumps(steps, d + steps) + min_Jumps(steps, d - steps)\n",
        "test": "assert     min_Jumps(1, 0) == 1",
        "num_ids": 542
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n",
        "test": "assert     div_list([1,2,3],[4,5,6]) == [1/4, 2/5, 3/6]",
        "num_ids": 357
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str_list = list(test_str)\n    length = len(test_str_list)\n    pos = 0\n    \n    for i in range(length):\n        if not test_str_list[i].isdigit():\n            pos = i\n            break\n    \n    while pos < length:\n        test_str_list[pos], test_str_list[length-1] = test_str_list[length-1], test_str_list[pos]\n        pos += 1\n        length -= 1\n    \n    return ''.join(test_str_list)\n",
        "test": "assert     move_num('12345') == '54321'",
        "num_ids": 688
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n    \ndef lcs(x, y):\n    '''\n    Return the length of the longest common substrings of the two strings x and y.\n    '''\n    m = len(x)\n    n = len(y)\n    dp = [[0 for i in range(n + 1)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if x[i - 1] == y[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n",
        "test": "assert     largest_subset([1,2,3,4,5,6]) == 3",
        "num_ids": 1004
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    return (arr1[n // 2] + arr2[n // 2]) / 2\n",
        "test": "assert     get_median([1,2], [3, 4], 2) == 3.0",
        "num_ids": 571
    },
    {
        "number": 623,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n",
        "test": "assert     nth_nums([1, 2, 3], 2) == [1, 4, 9]",
        "num_ids": 329
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert     is_upper('l')",
        "num_ids": 233
    },
    {
        "number": 625,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert     [1,2,3] == swap_List([3,2,1])",
        "num_ids": 402
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0:\n        return -1\n    return 3*r*r*asin(r)\n",
        "test": "assert     triangle_area(2) == 1.584938516885583",
        "num_ids": 278
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start >= end:\n        return start\n    mid = (end-start)//2 + start\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n",
        "test": "assert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12]) == 11",
        "num_ids": 576
    },
    {
        "number": 628,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split())\n",
        "test": "assert     replace_spaces('Mr John Smith') == 'Mr%20John%20Smith'",
        "num_ids": 353
    },
    {
        "number": 629,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for x in list:\n        if x%2 == 0:\n            even_numbers.append(x)\n    return even_numbers\n",
        "test": "assert     [x for x in range(10) if x%2==0]     == [0, 2, 4, 6, 8]",
        "num_ids": 494
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] > 0:\n        sub.append((ele[0]-1,ele[1]))\n    if ele[1] > 0:\n        sub.append((ele[0],ele[1]-1))\n    if ele[1] < size[1]-1:\n        sub.append((ele[0],ele[1]+1))\n    if ele[0] < size[0]-1:\n        sub.append((ele[0]+1,ele[1]))\n    return sub\n",
        "test": "assert     [ (1,2,3), (0,2,3), (0,1,3) ] == adjac((1,2,3), sub = [])",
        "num_ids": 878
    },
    {
        "number": 631,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\")\n    #return text.replace(\"_\",\" \")\n",
        "test": "assert     replace_spaces('hello') == 'hello'",
        "num_ids": 343
    },
    {
        "number": 632,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #return list(filter(lambda x: x!=0,num_list))+[0]*(len(num_list)-len(list(filter(lambda x: x!=0,num_list))))\n    return [i for i in num_list if i!=0]+[0]*(len(num_list)-len(list(filter(lambda x: x!=0,num_list))))\n",
        "test": "assert     move_zero([0,1,0,2,3,0,0,4,0]) == [1,2,3,4,0,0,0,0,0]",
        "num_ids": 803
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    m=0\n    for i in range(n):\n        for j in range(i+1,n):\n            m=m^arr[i]^arr[j]\n    return m\n",
        "test": "assert     pair_xor_Sum([5,4,3,2,1],5) == 0",
        "num_ids": 494
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert ",
        "num_ids": 261
    },
    {
        "number": 637,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount: \n        return False\n    else: \n        return True\n",
        "test": "assert     noprofit_noloss(9.0,5.0)    == False",
        "num_ids": 334
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v * 0.000621371\n    t = (t * 9.0/5.0) + 32\n    wci = 13.12 + (0.6215*t) + (11.37*v) - (35.75*t*v) + (0.3965*t*t)\n    return round(wci)\n",
        "test": "assert     (6.94,9) == wind_chill(22,20)",
        "num_ids": 563
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n    return sum([len(x) for x in sample_names if x[0].isupper()])\n    \n    \ndef sample_nam1(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(x) for x in sample_names if x[0].isupper())\n    \n    \ndef sample_nam2(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam3(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(x) for x in sample_names if x[0].isupper())\n    \n    \ndef sample_nam4(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam5(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam6(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam7(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam8(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam9(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam10(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam11(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam12(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam13(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam14(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam15(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam16(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam17(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam18(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam19(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam20(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam21(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam22(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam23(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam24(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam25(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    ",
        "test": "assert     sample_nam(['Arnold', 'Arnold', 'Arnold', 'Arnold', 'Arnold']) == 30",
        "num_ids": 490
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\(.*?\\)', '', items)\n",
        "test": "assert     remove_parenthesis('()()()') == ''",
        "num_ids": 431
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n**2+n)%2==1\n",
        "test": "assert     is_nonagonal(5)     == False",
        "num_ids": 445
    },
    {
        "number": 643,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]','',text)\n    for word in text.split():\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    return False\n",
        "test": "assert     text_match_wordz_middle(text=\"aaa\") == False",
        "num_ids": 446
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[-k::]\n",
        "test": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5] ",
        "num_ids": 589
    },
    {
        "number": 720,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n",
        "test": "assert     add_dict_to_tuple(('a', 'b'), {'a': 1, 'b': 2}) == ('a', 'b', 1, 2)",
        "num_ids": 586
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Here the cost is a dp array and the problem is to find the maximum average cost of paths\n    # The idea is to use dp to store the maximum average cost of the path ending at cell [i][j]\n    # for each cell [i][j], we use the path with max average cost ending at cell [i][j] to compute the average path ending at cell [i][j]\n    \n    # let dp[i][j] be the maximum average cost of a path ending at cell [i][j]\n    # dp[i][j] = max(dp[i-1][j],dp[i][j-1])+cost[i][j]\n    # hence, dp[i][j] = max(dp[i-1][j],dp[i][j-1]) + cost[i][j]\n    # dp[i][j] = max(dp[i-1][j],dp[i-1][j-1]) + cost[i][j]\n    # dp[i][j] = max(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])\n    \n    # dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0 and j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])\n    \n    # we then have that, for each cell [i][j], the maximum average cost of a path ending at cell [i][j] is dp[i][j]. But, if i>0 and j>0, then we have to account for two cases\n    # (i,j) is a corner point\n    # (i-1,j) or (i,j-1) is a corner point\n    # hence, dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    \n    # For dp[i][j], we have two cases\n    # 1) (i,j) is a corner point\n    # 2) (i,j) is a non-corner point\n    \n    # so, dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0 and j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])\n    \n    # And if we have [i][j] = -1, it means we never had visited this cell, hence we should skip it when computing the average\n    # dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0 and j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])\n    \n    # for each cell [i][j] we have two cases\n    # (i,j) is a corner point\n    # (i-1,j) or (i,j-1) is a corner point\n    # hence, dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0 and j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])\n    \n    # when (i,j) is a non-corner point, we just need to return dp[i][j]\n    # when (i,j) is a corner point, we have to return dp[i][j] + cost[i][j]\n    \n    N = len(cost)\n    if N == 0:\n        return 0\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n    for j in range(1,N):\n        dp[0][j] = cost[0][j]\n    for i in range(1,N):\n        for j in range(1,N):\n            dp[i][j] = max(dp[i-1][j],dp[i][j-1]) + cost[i][j]\n    res = 0\n    for i in range(N):\n        res = max(res,dp[N-1][i])\n    return res\n",
        "test": "assert     maxAverageOfPath([",
        "num_ids": 1991
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n",
        "test": "assert     filter_data(STUDENTS,1.61,37) == {'Seymour Butler':(1.61, 37), 'Dwight Schrute':(1.59, 35), 'Jim Halpert':(1.59, 33), 'Pam Beesly':(1.58, 32), 'Stanley Hudson':(1.5, 33), 'Kevin Malone':(1.49, 32), 'Meredith Palmer':(1.47, 31), 'Angie Martin':(1.45, 31), 'William Gossamer':(1.43, 30), 'Oscar Martinez':(1.41, 29), 'Hannah Shaw':(1.39, 28), 'Freda May Alcott':(1.36, 28), 'Brenda Rogers':(1.32, 28), 'Kathryn Schooner':(1.29, 27), 'Nina Simone':(1.27, 27), 'Myra Liddel':(1.24, 26), 'Ebony Clay':(1.23, 25)}",
        "num_ids": 1325
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # the following only works for even length lists\n    if len(nums1) % 2 == 1:\n        return 0\n    else:\n        for x in xrange(len(nums1) / 2):\n            if nums1[x]!= nums2[x]:\n                return x\n",
        "test": "assert     count_same_pair([1,2,3], [1,2,3]) == 0",
        "num_ids": 661
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return int(sum([(int(i) ** power) for i in str(base)]))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     power_base_sum(4, 1) == 4",
        "num_ids": 2366
    },
    {
        "number": 725,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\\\"([^\"]*)\\\"', text1)\n",
        "test": "assert     extract_quotation('\"Nothing to see\" said the story. \"The world is nothing but a manniquin with a speaker.\"') == ['Nothing to see', 'The world is nothing but a manniquin with a speaker.']",
        "num_ids": 673
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    total = 1\n    for i in test_tup:\n        total = total*i\n    return (total,)*len(test_tup)\n",
        "test": "assert     multiply_elements((0,1,2,3)) == (0,0,0,0)",
        "num_ids": 427
    },
    {
        "number": 728,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a_i + b_i for a_i, b_i in zip(lst1, lst2)]\n    \ndef mul_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    return [a_i * b_i for a_i, b_i in zip(lst1, lst2)]\n",
        "test": "assert     sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 433
    },
    {
        "number": 730,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            del nums[i]\n            i -= 1\n        i += 1\n    return nums\n",
        "test": "assert     consecutive_duplicates([1,1,2,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 620
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h/3\n",
        "test": "assert     lateralsurface_cone(3.5,8) == (2.002259744565979*(1.6365344032205498 + 0.7280740504405137*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(1.2899094139372746 + 0.8523853944285851*(1.565959563382482 + 0.7698152650695742*(",
        "num_ids": 2344
    },
    {
        "number": 732,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new = []\n    for x in text:\n        if (x =='') or (x == ',') or (x == '.'):\n            new.append(':')\n        else:\n            new.append(x)\n    return ''.join(new)\n",
        "test": "assert     replace_specialchar(',') == ':', 'failed on \",\"'",
        "num_ids": 465
    },
    {
        "number": 733,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if A[0] == x:\n        return 0\n    if A[len(A)-1] == x:\n        return len(A)-1\n    l, r = 0, len(A)-1\n    while l <= r:\n        m = l + (r-l)//2\n        if A[m] == x:\n            return m\n        elif A[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1,2,3,3,3,4,5], -1) == -1",
        "num_ids": 656
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #Code here\n    total = 0\n    for i in range(len(arr)):\n        for j in range(len(arr) - i):\n            prod = 1\n            for k in range(i, i + j + 1):\n                prod *= arr[k]\n            total += prod\n    return total\n",
        "test": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6])     ==     56",
        "num_ids": 607
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n & 0x55555555) + ((n & 0xAAAAAAAA) >> 1)\n    return n & 0x0FFFFFFF\n",
        "test": "assert     (set_middle_bits(0) == 0)",
        "num_ids": 477
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n",
        "test": "assert     left_insertion([1, 2, 3], 0) == 0",
        "num_ids": 336
    },
    {
        "number": 737,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return True if re.match(regex,string)!=None else False\n",
        "test": "assert     check_str('eed') == True",
        "num_ids": 2252
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return 1/n * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 317
    },
    {
        "number": 739,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = \"\"\n    k = 1\n    while len(num)<n:\n        num = str(k*(k+1)/2)\n        k+=1\n    return num.index(num[n-1])\n    \ndef isPentagonal(n):\n    '''\n    Write a python function to check if a number is pentagonal number. https://www.geeksforgeeks.org/pentagonal-number/\n    '''\n    sq = (1+math.sqrt(1+24*n))/6\n    if sq == int(sq):\n        return True\n    else:\n        return False\n    \ndef isHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal number. https://www.geeksforgeeks.org/hexagonal-number/\n    '''\n    sq = (1+math.sqrt(1+8*n))/4\n    if sq == int(sq):\n        return True\n    else:\n        return False\n",
        "test": "assert     find_Index(1) == 0",
        "num_ids": 539
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n",
        "test": "assert     tuple_to_dict((1, 2, 3, 4)) == {1:2, 3:4}",
        "num_ids": 553
    },
    {
        "number": 741,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n",
        "test": "assert     all_Characters_Same('abcd') == False",
        "num_ids": 356
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = ((3**0.5) / 4) * (side ** 2)\n    return area\n",
        "test": "assert     area_tetrahedron(12) == area_tetrahedron(12.0)",
        "num_ids": 318
    },
    {
        "number": 743,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1,2,3,4,5], 2) == [3,4,5,1,2]",
        "num_ids": 283
    },
    {
        "number": 744,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
        "test": "assert     check_none((\"a\", None, 0, \"a\")) == True",
        "num_ids": 288
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: not (x%int(str(x)[0])), range(startnum,endnum))\n    \nprint(divisible_by_digits(startnum,endnum))\nprint(divisible_by_digits(5,100))",
        "test": "assert     divisible_by_digits(1,100) == [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]",
        "num_ids": 1176
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return math.pi*r*r*a/360\ndef area_of_the_sector(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return (math.pi*r*r*a/360)\ndef radius_of_the_sector(r,a):\n    '''\n    Write a function to find radius of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return r*(math.pi*a/360)\ndef radius_of_the_circle(r):\n    '''\n    Write a function to find radius of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return r\ndef radius_of_the_circle2(r):\n    '''\n    Write a function to find radius of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return abs(r)\ndef area_of_the_circle(r):\n    '''\n    Write a function to find area of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return math.pi*(r*r)\ndef area_of_the_circle2(r):\n    '''\n    Write a function to find area of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return math.pi*(r*r)\ndef circumference_of_the_circle(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return 2*math.pi*r\ndef circumference_of_the_circle2(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return 2*math.pi*r\ndef circumference_of_the_sector(r,a):\n    '''\n    Write a function to find circumference of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return (2*math.pi*r*a)/360\ndef circumference_of_the_sector2(r,a):\n    '''\n    Write a function to find circumference of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return (2*math.pi*r*a)/360\ndef circumference_of_the_circle3(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle4(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle5(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle6(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle7(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle8(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle9(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle10(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle11(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle12(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle13(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle14(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle15(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle16(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle17(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '",
        "test": "assert     sector_area(10,360) == None",
        "num_ids": 390
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]\n",
        "test": "assert     lcs_of_three('abc', 'bcd', 'ace') == 1",
        "num_ids": 731
    },
    {
        "number": 748,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub('(?<=[a-zA-Z0-9])([A-Z]+)', r'\\1 ', str1)\n    return result\n",
        "test": "assert     capital_words_spaces('Hi') == 'Hi'",
        "num_ids": 419
    },
    {
        "number": 749,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: int(x))\n",
        "test": "assert     sort_numeric_strings(['2', '1', '3', '6', '4', '7', '5', '9', '8']) == ['1', '2', '3', '4', '5', '6', '7', '8', '9']",
        "num_ids": 2631
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "test": "assert     add_tuple([3,4], (3,4)) == [3,4,3,4]",
        "num_ids": 328
    },
    {
        "number": 751,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent = i\n    while parent:\n        child = parent * 2 + 1\n        if child < len(arr) and arr[child] < arr[child+1]:\n            child += 1\n        if arr[parent] >= arr[child]:\n            return False\n        parent = child\n    return True\n",
        "test": "assert     check_min_heap_helper([4,1,3], 0) == True, 'Root is max heap'",
        "num_ids": 673
    },
    {
        "number": 752,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n==0): return 0\n    elif (n==1): return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 449
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return min(test_list, key=lambda x: x[K])\n",
        "test": "assert         min_k([(1,1,1),(1,1,2),(1,1,3),(1,1,4),(1,1,5)], 2) == (1,1,1)",
        "num_ids": 1074
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    def common_elements(l1, l2, l3):\n        return [e1 for e1 in l1 if e1 in l2 and e1 in l3]\n    return common_elements(l1, l2, l3)\n",
        "test": "assert     extract_index_list([1,2,3], [2,4,6], [3,5,7]) == []",
        "num_ids": 826
    },
    {
        "number": 755,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    second_smallest = None\n    for num in numbers:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    return second_smallest\n",
        "test": "assert second_smallest([0,2,3,4]) == 2",
        "num_ids": 432
    },
    {
        "number": 756,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    import re\n    text_match = re.match(r'a(.+)?b', text)\n    print(text_match.group())\n",
        "test": "assert     text_match_zero_one('abb') == None, \"do not match\"",
        "num_ids": 372
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #create a dictionary to store the count\n    dictionary = {}\n    for s in test_list:\n        if s[::-1] in dictionary:\n            dictionary[s[::-1]] += 1\n        else:\n            dictionary[s[::-1]] = 1\n    return len(dictionary)\n",
        "test": "assert     count_reverse_pairs(['abc', 'xyz', 'aba', 'xyx', 'xyz', 'xyy', 'xyx', 'xyx', 'xyy']) == 5",
        "num_ids": 688
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Hint: Use a dictionary to store the counts of the values\n    list1_dict = {}\n    for i in list1:\n        list1_dict[tuple(i)] = list1_dict.get(tuple(i), 0) + 1\n    return list1_dict\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 871
    },
    {
        "number": 759,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    if re.match(\"^-?\\d*\\.?\\d*$\", num)!= None:\n        return True\n    return False\n",
        "test": "assert     is_decimal('45') == True",
        "num_ids": 409
    },
    {
        "number": 760,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "test": "assert     unique_Element([1,1,2,3,3]) == False",
        "num_ids": 387
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if not isinstance(monthnum3, int):\n        raise ValueError('Month number should be an integer')\n    if monthnum3 <= 0 or monthnum3 > 12:\n        raise ValueError('Month number should be between 1 and 12')\n    if not (monthnum3 == 30 or monthnum3 == 31):\n        return False\n    else:\n        return True\n",
        "test": "assert     check_monthnumber_number(1)    == False, \"Failed\"",
        "num_ids": 464
    },
    {
        "number": 763,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n",
        "test": "assert     find_min_diff([1,2,3,4,5],5) == 1",
        "num_ids": 611
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "test": "assert     number_ctr('1') == 1",
        "num_ids": 239
    },
    {
        "number": 765,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #c=0\n    #for i in range(2,n):\n    #    if i%2!=0:\n    #        c+=1\n    #if n%2==0:\n    #    c-=1\n    #if n>2 and c%2==0:\n    #    return True\n    #else:\n    #    return False\n    return n%2!=0\n",
        "test": "assert     is_polite( 3) == True",
        "num_ids": 403
    },
    {
        "number": 766,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[x], l1[x+1]) for x in range(len(l1)-1)]\n",
        "test": "assert     pair_wise([])    == []",
        "num_ids": 1485
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n",
        "test": "assert     get_pairs_count([1, 2, 3, 4, 5], 6) == 2",
        "num_ids": 654
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    li_dif.sort()\n    return li_dif\n",
        "test": "assert     Diff([1,2,3],[1,2,3]) == []",
        "num_ids": 367
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(i*i*i for i in range(1,n) if i % 2 == 1)\n",
        "test": "assert     ( odd_num_sum(2) == 1 )",
        "num_ids": 355
    },
    {
        "number": 771,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for token in exp.split():\n        if token in '{[(':\n            stack.append(token)\n        elif token == '}':\n            if len(stack) == 0 or stack.pop()!= '{':\n                return False\n        elif token == ']':\n            if len(stack) == 0 or stack.pop()!= '[':\n                return False\n        elif token == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n",
        "test": "assert     check_expression('[(())]') == True, \"expected true\"",
        "num_ids": 2547
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    s = test_str.split(' ')\n    return''.join([s[i] for i in range(len(s)) if len(s[i])!=K])\n",
        "test": "assert     remove_length(' xyz', 2) == 'xyz'",
        "num_ids": 483
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while True:\n        start=text.find(pattern,index)\n        if start!=-1:\n            index=start+1\n            yield (start,start+len(pattern))\n        else:\n            break\n",
        "test": "assert     occurance_substring('haha is a test for substring','is')",
        "num_ids": 676
    },
    {
        "number": 775,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return None\n    else:\n        for i in range(0, len(nums), 2):\n            if i+1 < len(nums) and nums[i+1] % 2!= 0:\n                return False\n        return True\n",
        "test": "assert     odd_position([1, 3, 5, 7, 9, 11]) == False",
        "num_ids": 504
    },
    {
        "number": 776,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for i in range(1, len(test_str)):\n        if test_str[i-1] in \"aeiouAEIOU\":\n            if test_str[i+1] in \"aeiouAEIOU\":\n                vowels = vowels + 1\n    return vowels\n",
        "test": "assert     count_vowels('abcd efgh ijklmn opqrst uvwxyz') == 0",
        "num_ids": 573
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_arr = sum(arr)\n    return sum_arr\n",
        "test": "assert     find_sum([1,2,3,4,4,4]) == 12",
        "num_ids": 339
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    output = []\n    for k, g in groupby(list1):\n        output.append(list(g))\n    return output\n",
        "test": "assert     pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3]) == [[1, 1], [1, 2], [1, 3], [2], [2, 3], [3]]",
        "num_ids": 2602
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in list1:\n        dict[tuple(i)] = list1.count(i)\n    return dict\n",
        "test": "assert ",
        "num_ids": 703
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # sort the given tuple list to get unique value for each tuple\n    sorted_list = sorted(test_list, key = lambda x: (x[0],x[1]))\n    # get the unique value for each tuple\n    list_values = []\n    for i in range(len(sorted_list)):\n        if sorted_list[i] not in list_values:\n            list_values.append(sorted_list[i])\n    combinations_list = []\n    for i in range(len(list_values)):\n        # add the combinations in list_values\n        for j in range(i,len(list_values)):\n            combinations_list.append(list_values[i]+list_values[j])\n    return combinations_list\n",
        "test": "assert     find_combinations( [ (1, 2), (2, 3), (3, 4), (4, 5) ] ) == [(0,), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]",
        "num_ids": 1146
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            if n / i == i :\n                count += 1\n            else :\n                count += 2\n    return count\n",
        "test": "assert     count_divisors(1) == 1 ",
        "num_ids": 484
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n    res = sum(arr[0::2])\n    for i in range(1, len(arr)):\n        if i % 2:\n            res += sum(arr[i::2])\n        else:\n            res -= sum(arr[i::2])\n    return res\n",
        "test": "assert     odd_length_sum([1, 2, 3]) == 3",
        "num_ids": 497
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    R = r / 255\n    G = g / 255\n    B = b / 255\n    mx = max(R, G, B)\n    mn = min(R, G, B)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == R:\n        h = (60 * ((G - B) / df) + 360) % 360\n    elif mx == G:\n        h = (60 * ((B - R) / df) + 120) % 360\n    elif mx == B:\n        h = (60 * ((R - G) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0.0, 0.0, 0.0)",
        "num_ids": 718
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Edge case: empty list\n    if len(list1) == 0:\n        return 0\n    # Initialize list of products\n    list2 = []\n    # Loop through the list and add to the product\n    for item in list1:\n        if item % 2 == 0:\n            list2.append(item * 2)\n        else:\n            list2.append(item * 3)\n    return list2\n",
        "test": "assert ",
        "num_ids": 501
    },
    {
        "number": 785,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    import re\n    return tuple(map(int, re.findall(r'\\d+', test_str)))\n",
        "test": "assert     tuple_str_int('(1, 2, 3)') == tuple([1, 2, 3])",
        "num_ids": 430
    },
    {
        "number": 786,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    raise ValueError\n",
        "test": "assert     right_insertion([], 1) == 0",
        "num_ids": 569
    },
    {
        "number": 787,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'a(.)b{3}', text)\n",
        "test": "assert     re.search(r'a.*?b{3}', 'aabbbbbbaaabababaaabbbbbbaaaabbbbbbaaaaabbbbbbaaaa')!= None",
        "num_ids": 782
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # print(test_list, test_str)\n    new_tuple = tuple(test_str)\n    # print(new_tuple)\n    return new_tuple\n",
        "test": "assert         new_tuple(['a', 'b', 'c'], 'xyz') == ('x', 'y', 'z')",
        "num_ids": 451
    },
    {
        "number": 790,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     even_position([1,3,5,7,9]) == False",
        "num_ids": 450
    },
    {
        "number": 791,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([i for i in test_tup if not isinstance(i, tuple)])\n",
        "test": "assert     remove_nested(()) == ()",
        "num_ids": 485
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert     count_list([[]]) == 1",
        "num_ids": 429
    },
    {
        "number": 793,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # your code goes here\n    if x<arr[0] or x>arr[-1]:\n        return -1\n    l=0\n    r=len(arr)-1\n    while l<=r:\n        m=(l+r)//2\n        if arr[m]<x:\n            l=m+1\n        elif arr[m]>x:\n            r=m-1\n        else:\n            if m==0 or arr[m-1]!=x:\n                return m\n            else:\n                r=m-1\n    return -1\n",
        "test": "assert     last([1,2,3,4,5],3) == 2",
        "num_ids": 596
    },
    {
        "number": 794,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #text = text.replace(\" \",\"\")\n    #text = text.lower()\n    match = re.search(r'^[a-z].*b$', text)\n    return bool(match)\n",
        "test": "assert     text_starta_endb('a') == False",
        "num_ids": 356
    },
    {
        "number": 796,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k,v in dict.items():\n        total += v\n    return total\n",
        "test": "assert     return_sum({\"a\":1, \"b\":2, \"c\":3}) == 6",
        "num_ids": 284
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_odd(10) == 25",
        "num_ids": 313
    },
    {
        "number": 798,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     (_sum([1,2,3,4]) == 10)",
        "num_ids": 246
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = (n << d) | ((n & 0xffffffff) >> (32-d))\n    return n\n",
        "test": "assert     left_rotate(12345678,0)    == 12345678",
        "num_ids": 1788
    },
    {
        "number": 800,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\n",
        "test": "assert     remove_all_spaces('') == ''",
        "num_ids": 353
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    if x == y!= z:\n        return 2\n    if x == z!= y:\n        return 2\n    if y == z!= x:\n        return 2\n    return 0\n",
        "test": "assert     test_three_equal(1,1,1) == 3",
        "num_ids": 353
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count = count+1\n    return count\n",
        "test": "assert     count_rotation([3,4,5,1,2]) == 1",
        "num_ids": 503
    },
    {
        "number": 803,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 :\n        return True\n    sqrt = int(math.sqrt(n))\n    if sqrt*sqrt == n :\n        return True\n    else :\n        return False\n",
        "test": "assert     is_perfect_square(0) == True",
        "num_ids": 374
    },
    {
        "number": 804,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product = product*num\n    if product%2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([4, 5, 6]) == True, 'WRONG'",
        "num_ids": 456
    },
    {
        "number": 805,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return 0\n    current_sum = sum(lists[0])\n    result = lists[0]\n    for l in lists[1:]:\n        if current_sum < sum(l):\n            current_sum = sum(l)\n            result = l\n    return result\n",
        "test": "assert     max_sum_list([[1,2,3,4], [4,5,6,7], [7,8,9,10]]) == [7,8,9,10]",
        "num_ids": 974
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # convert to lowercase\n    test_str = test_str.lower()\n    # convert each character to unicode\n    lst = [ord(x) for x in test_str]\n    # list of maximum uppercase run for each character\n    max_run = [1]\n    # loop through each character\n    for i in range(1, len(lst)):\n        # if character is uppercase, update max_run\n        if lst[i] >= 65 and lst[i] <= 90:\n            max_run.append(max_run[i-1] + 1)\n        # otherwise, update max_run\n        else:\n            max_run.append(1)\n    return max(max_run)\n",
        "test": "assert     max_run_uppercase('google') == 1",
        "num_ids": 615
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n",
        "test": "assert     first_odd([1,2,3,4,5]) == 1",
        "num_ids": 365
    },
    {
        "number": 808,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if K in test_tup else False\n",
        "test": "assert not check_K(('a', 'b', 'c'), 1)",
        "num_ids": 557
    },
    {
        "number": 809,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check for null tuples\n    if test_tup1 is None:\n        return False\n    if test_tup2 is None:\n        return False\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    # check each element in tuple 1 with corresponding element in tuple 2\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    # if no false is returned, then each element of tuple 1 is smaller than each element of tuple 2\n    return True\n",
        "test": "assert     not check_smaller((1,2,3,4,5,6,7,8,9,10), (2,1,5,7,9,10))",
        "num_ids": 637
    }
]