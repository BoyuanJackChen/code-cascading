[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "test": "assert     similar_elements(",
        "num_ids": 663
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return True\n    return False\n",
        "test": "assert     is_not_prime(2) == False",
        "num_ids": 326
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return []\n    result=[]\n    for i in range(n):\n        hq.heappush(result,nums[0])\n        hq.heappop(nums)\n    return result\n",
        "test": "assert     heap_queue_largest([1,3,2,4,5],1)==[1]",
        "num_ids": 561
    },
    {
        "number": 6,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n",
        "test": "assert     is_Power_Of_Two(0) == True, 'True'",
        "num_ids": 312
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    words = text.split()\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n",
        "test": "assert     find_char_long('a') == []",
        "num_ids": 2428
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n",
        "test": "assert     [x**2 for x in [1,2,3,4]] == [1,4,9,16]",
        "num_ids": 471
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 1\n    l = len(str)\n    if l==1:\n        return 0\n    for i in range(1,l):\n        if str[i:]+str[:i]==str:\n            rotations = rotations +1\n    return rotations\n",
        "test": "assert     find_Rotations('a') == 0",
        "num_ids": 282
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', 1)\n    \nprint(remove_Occ(\"pranay is a good boy\",'r'))\n",
        "test": "assert     remove_Occ(\"hello\",'l') == 'heo' ",
        "num_ids": 337
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n",
        "test": "assert     sort_matrix([[1,2],[3,4]]) == [[1,2],[3,4]]",
        "num_ids": 668
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    return (l*b*h)/3\n",
        "test": "assert     find_Volume(3,2,3) == 6",
        "num_ids": 611
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_upper(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[A-Z]+',text):\n        return True\n    else:\n        return False\ndef text_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\d+',text):\n        return True\n    else:\n        return False\ndef text_space_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_ ',text):\n        return True\n    else:\n        return False\ndef text_space_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_\\d+',text):\n        return True\n    else:\n        return False\ndef text_space_number_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_dash(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+-\\d+',text):\n        return True\n    else:\n        return False\ndef text_dash_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_punctuation(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+\\.\\d+',text):\n        return True\n    else:\n        return False\ndef text_punctuation_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_multiple_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+__[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_multiple_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+\\s+',text):\n        return True\n    else:\n        return False\ndef text_multiple_space_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+\\s+',text):\n        return True\n    else:\n        return False\ndef text_multiple_space_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_one_word(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\w+',text):\n        return True\n    else:\n        return False\ndef text_one_word_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_',text):\n        return True\n    else:\n        return False\ndef text_multiple_space_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+\\s+\\d+',text):\n        return True\n    else:\n        return False\ndef text_one_word_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_',text):\n        return True\n    else:\n        return False\ndef text_one_word_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\d+',text):\n        return True\n    else:\n        return False\ndef text_one_word_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\s+',text):\n        return True\n    else:\n        return False\ndef text_one_word_space_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\s+_',text):\n        return True\n    else:\n        return False\ndef text_one_word_space_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\s+\\d+',text):\n        return True\n    else:\n        return False\ndef text_one_word_space_number_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\s+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_one_word_space_number_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\s+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_multiple_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+__[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_multiple_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+\\s+',text):\n        return True\n    else:\n        return False\ndef text_multiple_space_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    i",
        "test": "assert     text_lowercase_underscore('word') == False",
        "num_ids": 432
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "test": "assert     square_perimeter(1) == 4",
        "num_ids": 168
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n    return string\n",
        "test": "assert ",
        "num_ids": 772
    },
    {
        "number": 19,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    dic = {}\n    for num in arraynums:\n        if num in dic:\n            return True\n        else:\n            dic[num] = 1\n    return False\n",
        "test": "assert     test_duplicate([1,2,3,4,5,6]) == False",
        "num_ids": 389
    },
    {
        "number": 20,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    y = x\n    while x > 0:\n        digit = x % 10\n        if digit not in [1, 6, 8]:\n            return False\n        x = int(x/10)\n    return True\n    \nprint(is_woodall(54))\n",
        "test": "assert     is_woodall(232323)    == False",
        "num_ids": 468
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == int(str(num)[::-1]):\n        return True\n    else:\n        return False\n",
        "test": "assert     rev(321) == False",
        "num_ids": 368
    },
    {
        "number": 57,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize the max to the first element\n    max = arr[0]\n    # Traverse through the elements of arr[]\n    for i in range(1, len(arr)) :\n        # If the number obtained is greater than the max then update the max\n        if arr[i] > max :\n            max = arr[i]\n    # Return the max\n    return max\n",
        "test": "assert     find_Max_Num([0,2,3,4,5,6,7,8,9]) == 9",
        "num_ids": 578
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    return str(n)[::-1] == str(n)\n    \ndef is_Prime(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n    return True\n    \ndef power(a, b):\n    '''\n    Write a python function to calculate the power of a number with b.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return (a * power(a,b-1))\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a python function to check whether the given two strings are anagram or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = sorted(s1)\n        s2 = sorted(s2)\n        for i in range(len(s1)):\n            if s1[i]!= s2[i]:\n                return False\n        return True\n        \ndef palindrome_permutation(s):\n    '''\n    Write a python function to check whether the given string is a palindrome permutation or not.\n    '''\n    if len(s) < 2:\n        return True\n    else:\n        if s[0]!= s[-1]:\n            return palindrome_permutation(s[1:-1])\n        else:\n            return palindrome_permutation(s[1:])\n    \ndef lexicographic_permutation(s1, s2):\n    '''\n    Write a python function to check whether the given two strings are a lexicographic permutation or not.\n    '''\n    for i in range(len(s1)):\n        if s1[i] < s2[i]:\n            return False\n    return True\n    \ndef consecutive(n):\n    '''\n    Write a python function to check whether the given integer is a consecutive number or not.\n    '''\n    if n == 1:\n        return True\n    else:\n        return (n + 1) % 10 == 0\n    \ndef is_abecedarian(s):\n    '''\n    Write a python function to check whether the given string is an abecedarian or not.\n    '''\n    for i in range(len(s)):\n        if s[i] > s[i+1]:\n            return False\n    return True\n    \ndef is_anagram_of_pandigital(n):\n    '''\n    Write a python function to check whether the given number is an anagram of pandigital or not.\n    '''\n    n = str(n)\n    if len(n)!= 9:\n        return False\n    else:\n        for i in range(1,10):\n            if str(i) not in n:\n                return False\n        return True\n    \ndef next_bigger(n):\n    '''\n    Write a python function to check whether the given integer is the next bigger number or not.\n    '''\n    n = str(n)\n    l = list(n)\n    k = l.index(max(l))\n    if int(n[k+1:]) > int(n[k+1:] + n[0:k+1]):\n        return int(n[k+1:] + n[0:k+1])\n    else:\n        return -1\n    \ndef max_divisor(n):\n    '''\n    Write a python function to calculate the maximum divisor of the given number.\n    '''\n    for i in range(n,0,-1):\n        if n % i == 0:\n            return i\n            \ndef is_primitive_root(n):\n    '''\n    Write a python function to check whether the given number is a primitive root or not.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    d = max_divisor(n)\n    return max_divisor(d) == 1 and max_divisor(n)!= n\n    \ndef is_perfect_square(n):\n    '''\n    Write a python function to check whether the given number is a perfect square or not.\n    '''\n    if n < 1:\n        return False\n    d = max_divisor(n)\n    if n % d == 0:\n        return True\n    else:\n        return False\n    \ndef is_quadratic_residue(n):\n    '''\n    Write a python function to check whether the given number is a quadratic residue or not.\n    '''\n    if n < 1:\n        return False\n    if is_perfect_square(n):\n        return False\n    if is_primitive_root(n):\n        return True\n    return False\n    \ndef is_power_of_two(n):\n    '''\n    Write a python function to check whether the given number is a power of two or not.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_power_of_two(n//2)\n    else:\n        return False\n    \ndef max_palindrome(n):\n    '''\n    Write a python function to calculate the largest palindrome which is obtained by merging two consecutive palindromes.\n    '''\n    if n == 1:\n        return 9\n    elif n % 2 == 0:\n        return int((n/2) * 9)\n    else:\n        return int(n * 9)\n    \ndef is_merge(a,b):\n    '''\n    Write a python function to check whether the given two numbers are merge of each other or not.\n    '''\n    if a == 0 or b == 0:\n        return False\n    else:\n        return (a%10 == b/10) and is_merge(a/10, b%10)\n    \ndef is_digit(n):\n    '''\n    Write a python function to check whether the given number is a digit or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return False\n    else:\n        return True\n    \ndef is_digit_only(s):\n    '''\n    Write a python function to check whether the given string is a digit only or not.\n    '''\n    for i in range(len(s)):\n        if not is_digit(s[i]):\n            return False\n    return True\n    \ndef is_pallindrome(n):\n    '''\n    Write a python function to check whether the given number is a pallindrome or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        return str(n) == str(n)[::-1]\n    \ndef find_next_palindrome(n):\n    '''\n    Write a python function to find the next palindrome greater than the given number.\n    '''\n    if n < 0:\n        return -1\n    elif is_palindrome(n):\n        return n + 1\n    else:\n        n = n + 1\n        while True:\n            if is_palindrome(n):\n                return n\n            n += 1\n            \ndef find_next_palindrome(n):\n    '''\n    Write a python function to find the next pallindrome greater than the given number.\n    '''\n    if n < 0:\n        return -1\n    elif is_palindrome(n):\n        return n + 1\n    else:\n        n += 1",
        "test": "assert     opposite_Signs(2,2)     == False",
        "num_ids": 416
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #return True if n == 1 else (is_pentagonal(n) and is_hexagonal(n))\n    return n == 1 or is_pentagonal(n) and is_hexagonal(n)\n",
        "test": "assert     is_octagonal(1)     == 1",
        "num_ids": 309
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    substring_count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(map(int, list(substring))) == j+1:\n                substring_count += 1\n    return substring_count\n",
        "test": "assert     count_Substrings(\"12\") == 2",
        "num_ids": 594
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "test": "assert     smallest_num([1, 3, 2, 6, 8, 4, 7]) == 1",
        "num_ids": 241
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert     max_difference(  ([1, 2, 3],  [1, 4, 5],  [2, 3, 4],  [3, 4, 5]    )    ) == 3",
        "num_ids": 723
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    '''\n    ## TASK:\n    Given a list of tuples, sort by second tuple element.\n",
        "test": "assert ",
        "num_ids": 600
    },
    {
        "number": 65,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for elem in data_list:\n        if type(elem) is list:\n            result = result + recursive_list_sum(elem)\n        else:\n            result = result + elem\n    return result\n",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 485
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count = count + 1\n    return count\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 439
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = [1]\n    for i in range(1,n):\n        ways.append(sum(ways[:i]))\n    return ways[-1]\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 375
    },
    {
        "number": 68,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=2:\n        return True\n    elif A[0]<A[1]:\n        for i in range(2,len(A)):\n            if A[i-1]<=A[i]:\n                continue\n            else:\n                return False\n    else:\n        for i in range(2,len(A)):\n            if A[i-1]>=A[i]:\n                continue\n            else:\n                return False\n    return True\n",
        "test": "assert     is_Monotonic([1,2,2,3])",
        "num_ids": 2514
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist(['e', 'i','m', 'e', 'k','s', 'i'], 'j') == False",
        "num_ids": 501
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    num_tuples = len(Input)\n    if num_tuples < 2:\n        return True\n    else:\n        for i in range(0, num_tuples - 1):\n            if len(Input[i])!= len(Input[i+1]):\n                return False\n    return True\n",
        "test": "assert     find_equal_tuple((\"s\", \"s\", \"s\", \"s\", \"s\", \"s\")) == True",
        "num_ids": 572
    },
    {
        "number": 71,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(i,n):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 1036
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i=1\n    while(i**2<=n):\n        if n-i**2 in range(1,10**4):\n            return True\n        i+=1\n    return False\n",
        "test": "assert     dif_Square(18)     == True",
        "num_ids": 460
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if colors[0] == patterns[0]:\n        return is_samepatterns(colors[1:], patterns[1:])\n    return False\n",
        "test": "assert     is_samepatterns([\"red\", \"blue\", \"red\", \"green\", \"blue\"], [\"a\", \"b\", \"a\", \"a\", \"b\"]) == False",
        "num_ids": 1067
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if K == 1:\n        return [(x,y) for x,y in test_list if x % y == 0]\n    else:\n        return [(x,y) for x,y in test_list if all([x % i == 0 for i in range(1, K+1)]) and not any([x % k == 0 for k in range(2, K+1)])]\n",
        "test": "assert     find_tuples([(1, 2, 3), (4, 5, 6)], 7) == [(7, 14, 21)]",
        "num_ids": 848
    },
    {
        "number": 77,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return ((n%11) == 0)\n",
        "test": "assert     is_Diff(55) == True",
        "num_ids": 178
    },
    {
        "number": 79,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!= 0: \n        return True \n    else: \n        return False\n",
        "test": "assert     word_len('Hello World!') == False",
        "num_ids": 245
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)*(n+3) // 24\n",
        "test": "assert     tetrahedral_number(0) == 0",
        "num_ids": 2691
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=(4/3)*(math.pi*(r**3))\n    return v\n",
        "test": "assert     volume_sphere(5)     == (math.pi**(2*5))/6",
        "num_ids": 402
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    cnt = 0\n    for i in strr:\n        cnt = cnt + ord(i)\n    return cnt % 26\n",
        "test": "assert     get_Char('cristian') == 19",
        "num_ids": 389
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 278
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r <= 0:\n        return 0\n    return 4*math.pi*r**2\n",
        "test": "assert     surfacearea_sphere(1.0) == 4.0*math.pi",
        "num_ids": 306
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n*(2*n-1))\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 244
    },
    {
        "number": 87,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n",
        "test": "assert     merge_dictionaries_three({'a':1,'b':2}, {'b':3, 'c':4}, {'d':5, 'e':6}) == {'a':1,'b':3,'c':4,'d':5,'e':6}",
        "num_ids": 777
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #c = collections.Counter(list1)\n    #d = c.most_common(n)\n    #print d\n    #return d\n    return collections.Counter(list1)\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 676
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    if n <= 1:\n        return -1\n    else:\n        return (n - 1) % n + 1\n",
        "test": "assert     closest_num(0) == -1",
        "num_ids": 2278
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxlen = 0\n    for word in list1:\n        if len(word)>maxlen:\n            maxlen = len(word)\n    return maxlen\n",
        "test": "assert     len_log(['my', 'name', 'is', 'kim']) == 4",
        "num_ids": 404
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1) - len(sub_str) + 1):\n        if (str1[i:i + len(sub_str)] == sub_str):\n            return True\n    return False\n",
        "test": "assert     find_substring('hello', 'o')",
        "num_ids": 519
    },
    {
        "number": 92,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0: return False\n    n_str = str(n)\n    for i in range(len(n_str)//2):\n        if n_str[i]!= n_str[-(i+1)]: return False\n    return True\n",
        "test": "assert     is_undulating(123) == False",
        "num_ids": 479
    },
    {
        "number": 93,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a*power(a,b-1)\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n    \ndef is_power_of_two(n):\n    '''\n    Write a function to check if a number is power of 2 or not\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        while n!= 1:\n            if n % 2 == 0:\n                n /= 2\n            else:\n                return False\n        return True\n    \ndef gcd(a,b):\n    '''\n    Write a function to compute the greatest common divisor of two numbers\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\n    \ndef lcm(a,b):\n    '''\n    Write a function to compute the least common multiple of two numbers\n    '''\n    return (a*b) / gcd(a,b)\n    \ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome or not\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        str_n = str(n)\n        for i in range(0,len(str_n)):\n            if str_n[i]!= str_n[len(str_n)-1-i]:\n                return False\n        return True\n    \ndef is_anagram(a,b):\n    '''\n    Write a function to check if two words are anagrams or not\n    '''\n    if len(a)!= len(b):\n        return False\n    else:\n        str_a = sorted(a)\n        str_b = sorted(b)\n        if str_a == str_b:\n            return True\n        else:\n            return False\n    \ndef bubble_sort(arr):\n    '''\n    Write a function to sort an array using bubble sort\n    '''\n    for i in range(len(arr)-1,0,-1):\n        for j in range(0,i):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr\n",
        "test": "assert     power(2,3) == 8",
        "num_ids": 368
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #take input list of tuples\n    smallest_index = -1\n    smallest_value = -1\n    for i in range(0,len(test_list)):\n        if (test_list[i][1]<smallest_value or smallest_index==-1):\n            smallest_index = i\n            smallest_value = test_list[i][1]\n    return smallest_index\n",
        "test": "assert     index_minimum([(1,3),(1,2),(5,7),(6,8),(3,9)]) == 1",
        "num_ids": 583
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n    return min_length\n",
        "test": "assert     Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 611
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    i = 1\n    while i*i<=n:\n        if n%i==0:\n            divisors+=2\n        i+=1\n    if i*i==n:\n        divisors+=1\n    return divisors\n",
        "test": "assert     divisor(5) == 2",
        "num_ids": 405
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for item in list1:\n        if item in dic:\n            dic[item] += 1\n        else:\n            dic[item] = 1\n    return dic\n",
        "test": "assert ",
        "num_ids": 470
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result = result * i\n    return result\n",
        "test": "assert     multiply_num([0]) == 0",
        "num_ids": 241
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "test": "assert     decimal_to_binary(1) == '1'",
        "num_ids": 469
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    if (str(num)[::-1] == str(num)):\n        return num\n    else:\n        return next_smallest_palindrome(num)\n",
        "test": "assert     next_smallest_palindrome(0) == 1",
        "num_ids": 352
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        print(\"Invalid kth element\")\n        return\n    return arr[(len(arr)-k)]\n",
        "test": "assert     kth_element([], 3) == None, 'output is None'",
        "num_ids": 419
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    word = word.strip().split('_')\n    for w in word:\n        result += w.title()\n    return result\n",
        "test": "assert     snake_to_camel('snake_case_string')         == 'SnakeCaseString'",
        "num_ids": 468
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0: return 0\n    if m == 0: return 0\n    if n % 2 == 0: return eulerian_num(n-1, m)\n    if m % 2 == 0: return eulerian_num(n, m-1)\n    return (eulerian_num(n-1, m) + eulerian_num(n, m-1))\n",
        "test": "assert     eulerian_num(0, 0) == 0",
        "num_ids": 629
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[s for s in sublist] for sublist in input_list]\n",
        "test": "assert     sort_sublists([['abc', 'xyz'], ['abc'], ['abc', 'xyz']]) == [['abc', 'xyz'], ['abc'], ['abc', 'xyz']]",
        "num_ids": 902
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "test": "assert     count([True, True, False, True, False]) == 3",
        "num_ids": 304
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \ndef add_tuples(test_list, test_tup):\n    '''\n    Write a function to append the given tuple to the given lists.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_lists([], (1, 2, 3)) == [(1, 2, 3)]",
        "num_ids": 549
    },
    {
        "number": 108,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n",
        "test": "assert     merge_sorted_list([1,3,5,7,9],[2,4,6,8],[10,11,13,15])==[1,2,3,4,5,6,7,8,9,10,11,13,15]",
        "num_ids": 1115
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    assert type(s) == str\n    assert type(n) == int\n    assert n >= 0\n",
        "test": "assert     odd_Equivalent(\"0\",2) == 1",
        "num_ids": 570
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return_list = []\n    #print nestedlist\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in return_list:\n                return_list.append(item)\n    return return_list\n",
        "test": "assert     [1,2,3] == common_in_nested_lists([[1,2],[1,2,3]])",
        "num_ids": 765
    },
    {
        "number": 113,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "test": "assert     check_integer('123') == True, \"123 is an integer\"",
        "num_ids": 231
    },
    {
        "number": 115,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(len(lst) == 0 for lst in list1)\n",
        "test": "assert     empty_dit([{}, {}, {}]) == True",
        "num_ids": 2194
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total = total*10 + num\n    return total\n    \n",
        "test": "assert     tuple_to_int((1,)) == 1",
        "num_ids": 407
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], float):\n                pass\n            elif isinstance(test_list[i][j], int):\n                test_list[i][j] = float(test_list[i][j])\n            elif isinstance(test_list[i][j], str):\n                test_list[i][j] = float(test_list[i][j])\n            else:\n                raise ValueError(\"List element is not convertible to float\")\n    \n    return test_list\n",
        "test": "assert     [1, 2.0, '3']         == list_to_float([[1, '2'], [3, 4]])",
        "num_ids": 697
    },
    {
        "number": 118,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "test": "assert     string_to_list(\"1\")    == [\"1\"]",
        "num_ids": 224
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in xrange(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n",
        "test": "assert     search([0,0,0,0,1,1,2,2,3,3,4,5]) == 3",
        "num_ids": 2548
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for x,y in list1:\n        temp = x*y\n        if temp > max_product:\n            max_product = temp\n    return max_product\n",
        "test": "assert     max_product_tuple([(0, 2), (2, 2)]) == 4",
        "num_ids": 723
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    amicable_numbers = set()\n    amicable_numbers_sum = 0\n    \n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = amicable_number(i)\n        if j!= i and j in amicable_numbers:\n            amicable_numbers_sum += i + j\n    return amicable_numbers_sum\n",
        "test": "assert     (amicable_numbers_sum(1) == 0)",
        "num_ids": 696
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n",
        "test": "assert     angle_complex(1j,0) == cmath.pi/2",
        "num_ids": 296
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)): \n        count_0 = 0\n        count_1 = 0\n        for j in range(i,len(string)): \n            if string[j] == '0': \n                count_0 += 1\n            else: \n                count_1 += 1\n            max_diff = max(count_0 - count_1, max_diff)\n    return max_diff\n",
        "test": "assert     find_length(\"01101001\") == 2, \"Wrong answer\"",
        "num_ids": 2912
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            sum += i\n    return sum\n",
        "test": "assert     (sum(7,4) == 1)",
        "num_ids": 429
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(0, 3) == 0",
        "num_ids": 401
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    ans = []\n    for word in str:\n        if len(word) > n:\n            ans.append(word)\n    return ans\n",
        "test": "assert     long_words(2, ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII']) == ['IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII']",
        "num_ids": 558
    },
    {
        "number": 129,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    #Check if each row is same\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    #Check if each column is same\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[i][j]:\n                return False\n    #Check if each diag is same\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    #Check if each anti-diag is same\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[n-1-j][n-1-i]:\n                return False\n    #The matrix is magic\n    return True\n",
        "test": "assert     magic_square_test([[2,7,6], [9,5,1], [4,3,8]]) == False",
        "num_ids": 1313
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return\n    dicti = defaultdict(int)\n    for i in nums:\n        dicti[i] += 1\n    max_freq = 0\n    max_item = None\n    for i in dicti:\n        if dicti[i] > max_freq:\n            max_item = i\n            max_freq = dicti[i]\n    return max_item\n",
        "test": "assert     max_occurrences([1, 2, 3, 4, 5]) == 1",
        "num_ids": 537
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i = 0\n    j = len(str1)-1\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n",
        "test": "assert     reverse_vowels('hello') == 'holle', 'hello'",
        "num_ids": 775
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 = str1 + str(i)\n    return str1\n",
        "test": "assert     tup_string((1,)) == '1', 'tup_string'",
        "num_ids": 368
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] - sum_negativenum(nums[1:])\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 378
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return hexagonal_num(n - 1) + 2 * (n - 1)\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 261
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) < 2:\n        return 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count / float(len(nums))\ndef target_sum(nums, target):\n    '''\n    Given an array of integers, find the number of pairs of integers\n    that have a sum divisible by `target`.\n    '''\n    m = {}\n    for i in range(len(nums)):\n        tmp = target - nums[i]\n        if tmp in m:\n            return (m[tmp] + 1)\n        if nums[i] not in m:\n            m[nums[i]] = 1\n    return 0\ndef simple_multiply(x, y):\n    '''\n    Multiply two numbers in O(1) time and O(n) space\n    '''\n    y = y % 10\n    if y == 0:\n        return 0\n    if y == 1:\n        return x\n    elif y == 2:\n        return (x * 2) % 10\n    elif y == 3:\n        return (x * 3) % 10\n    elif y == 4:\n        return (x * 4) % 10\n    elif y == 5:\n        return (x * 5) % 10\n    elif y == 6:\n        return (x * 6) % 10\n    elif y == 7:\n        return (x * 7) % 10\n    elif y == 8:\n        return (x * 8) % 10\n    elif y == 9:\n        return (x * 9) % 10\n    return x\ndef find_missing_number(nums):\n    '''\n    Find the missing number in an array of consecutive integers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]!= i + 1:\n            return i + 1\n    return len(nums) + 1\ndef find_missing_number_2(nums):\n    '''\n    Find the missing number in an array of consecutive integers.\n    '''\n    n = len(nums)\n    s = sum(nums)\n    return (n * (n + 1)) / 2 - s\ndef rotate_array(nums, k):\n    '''\n    Given an array, rotate the array to the right by k steps, where k is non-negative.\n    '''\n    n = len(nums)\n    k = k % n\n    for i in range(k):\n        nums[i], nums[n - i - 1] = nums[n - i - 1], nums[i]\ndef rotate_array_2(nums, k):\n    '''\n    Given an array, rotate the array to the right by k steps, where k is non-negative.\n    '''\n    n = len(nums)\n    k = k % n\n    nums[:] = nums[n - k:] + nums[:n - k]\ndef max_rotate_array(nums, k):\n    '''\n    Given an array of integers, return the maximum possible sum of the array after applying at most k\n    rotations.\n    '''\n    n = len(nums)\n    k = k % n\n    max_sum = nums[n - k - 1]\n    curr_sum = nums[n - k - 1]\n    for i in range(n - k, n):\n        curr_sum = curr_sum + nums[i] - nums[n - i - 1]\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\ndef max_rotate_array_2(nums, k):\n    '''\n    Given an array of integers, return the maximum possible sum of the array after applying at most k\n    rotations.\n    '''\n    n = len(nums)\n    k = k % n\n    curr_sum = nums[n - k - 1]\n    max_sum = curr_sum\n    for i in range(n - k, n):\n        curr_sum = curr_sum + nums[i] - nums[n - i - 1]\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\ndef max_rotate_array_3(nums, k):\n    '''\n    Given an array of integers, return the maximum possible sum of the array after applying at most k\n    rotations.\n    '''\n    n = len(nums)\n    k = k % n\n    max_sum = nums[n - k - 1]\n    curr_sum = nums[n - k - 1]\n    for i in range(n - k, n):\n        curr_sum = curr_sum + nums[i] - nums[n - i - 1]\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\ndef reverse_array(nums, start, end):\n    '''\n    Given an array of integers, reverse the array in-place.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\ndef reverse_array_2(nums, start, end):\n    '''\n    Given an array of integers, reverse the array in-place.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\ndef reverse_array_3(nums, start, end):\n    '''\n    Given an array of integers, reverse the array in-place.\n    '''\n    nums[start:end + 1] = nums[end:start - 1:-1]\ndef reverse_array_4(nums, start, end):\n    '''\n    Given an array of integers, reverse the array in-place.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\ndef reverse_array_5(nums, start, end):\n    '''\n    Given an array of integers, reverse the array in-place.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\ndef reverse_array_6(nums, start, end):\n    '''\n    Given an array of integers, reverse the array in-place.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\ndef remove_duplicates(nums):\n    '''\n    Given an array of integers, remove the duplicates in place and return the new length.\n    Do not allocate extra space for another array, you must do this in place with constant space.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return n\n    i = 0\n    while i < n - 1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i + 1)\n            n -= 1\n        else:\n            i += 1\n    return n\ndef remove_duplicates_2(nums):\n    '''\n    Given an array of integers, remove the duplicates in place and return the new length.\n    Do not allocate extra space for another array, you must do this in place with constant space.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return n\n    i = 0\n    j = 1\n    while j < n:\n        if nums[j]!= nums[i]:\n            i += 1\n            nums[i] = nums[j]\n        j += 1\n    return i + 1\ndef remove_duplicates_3(nums):\n    '''\n    Given an array of integers, remove the duplicates in place and return the new length.\n    Do not allocate extra space for another array, you must do this in place with constant space.\n    '''\n    n = len(nums)\n    if n <= 1:\n        retur",
        "test": "assert     zero_count([1,2,0,0]) == 0.5",
        "num_ids": 481
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    import math\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    while n > 0:\n        if n%2 == 1:\n            return False\n        n = n/2\n    return True\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(     0b11010000) == False",
        "num_ids": 445
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 282
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    flatten_list = [x for sublist in test_list for x in sublist]\n    \n    return flatten_list\n",
        "test": "assert     extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 578
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        curr = nums[i-1]\n        j = i - 1\n        while j > 0 and nums[j-1] > curr:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = curr\n    return nums\n",
        "test": "assert     pancake_sort([1, 1, 1, 1])     ==     [1, 1, 1, 1]",
        "num_ids": 826
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]:\n            counter+=1\n    for i in range(len(list1)):\n        if list3[i]==list2[i]:\n            counter+=1\n    return counter\n",
        "test": "assert     count_samepair([1,2,3,4],[2,4,6,8],[3,5,9,10]) == 0",
        "num_ids": 666
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    #base case: \n    if len(Input) == 0: \n        return 0\n    elif type(Input[0]) == type(()): \n        return 1 + find_lists(Input[0])\n    else: \n        return 0 \n",
        "test": "assert     find_lists(()) == 0",
        "num_ids": 511
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    l = len(arr)\n    arr.sort()\n    if l==0:\n        return 0\n    if l==1:\n        return 0\n    if l==2:\n        return abs(arr[0]-arr[1])\n    return max(abs(arr[0]-arr[1]),abs(arr[l-1]-arr[l-2]))\n",
        "test": "assert     max_Abs_Diff([1,2,3]) == 1",
        "num_ids": 596
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (a, 0)\n    elif n > 0:\n        for a_i in range(a, n // a + 1):\n            for b_i in range(b, n // b + 1):\n                if a_i * b_i == n:\n                    return (a_i, b_i)\n    elif n < 0:\n        for a_i in range(a, -n // a - 1, -1):\n            for b_i in range(b, -n // b - 1, -1):\n                if a_i * b_i == -n:\n                    return (a_i, b_i)\n    return None\n",
        "test": "assert     find_solution(2, 3, 4) == None, \"wrong result\"",
        "num_ids": 594
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] in list2:\n            list1.pop(i)\n        else:\n            i += 1\n    return list1\n",
        "test": "assert     remove_elements([1, 2, 3, 4, 5], [2, 4, 6, 8])         == [1, 3, 5]",
        "num_ids": 558
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return 0\n    if n % 2 == 0:\n        return n // 2\n    return n - 2 + sum_series(n-2)\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 2265
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l**2) / (tan(pi/l))\n    return area\n",
        "test": "assert     area_polygon(5, 4) == 30.40",
        "num_ids": 356
    },
    {
        "number": 164,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s_divisors = set()\n    divisors_2 = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            s_divisors.add(i)\n            s_divisors.add(n//i)\n            divisors_2.append(i)\n            divisors_2.append(n//i)\n    if sum(divisors_2) == sum(s_divisors):\n        return True\n    return False\n",
        "test": "assert     div_sum(1)     == False",
        "num_ids": 667
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    counter = 0\n    for char in str1:\n        if char in alphabet:\n            counter += 1\n    return counter\n",
        "test": "assert     count_char_position('a') == 1, 'count_char_position(a)'",
        "num_ids": 760
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    a = 0\n    for i in range(len(A)):\n        if (A[i] ^ i) % 2 == 0:\n            a += 1\n    return a\n",
        "test": "assert     find_even_pair([2,4,6,8,10,3,7,5,1]) == 5",
        "num_ids": 603
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    count = 0\n    while n > 1:\n        n /= 2\n        count += 1\n    return pow(2, count)\n",
        "test": "assert     next_power_of_2(1) == 1",
        "num_ids": 2229
    },
    {
        "number": 168,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b = []\n    for i in a:\n        if i == x:\n            b.append(i)\n    return len(b)\n",
        "test": "assert     frequency([1,2,3,4,5],1) == 1",
        "num_ids": 577
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in list1:\n        if (m <= i <= n):\n            result += i\n    return result\n",
        "test": "assert     sum_range_list([1, 2, 3], 0, 1) == 1",
        "num_ids": 461
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6 * a\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 7 * a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return 10 * a\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (3 * math.sqrt(2) * a) + (4 * a)\ndef perimeter_hexaagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (2 * a) + (3 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (2 * a) + (3 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_hexaagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return (6 * a) + (4 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (2 * a) + (3 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (2 * a) + (3 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (2 * a) + (3 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a",
        "test": "assert     perimeter_pentagon(2) ==     15",
        "num_ids": 236
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('abcd') == 0",
        "num_ids": 308
    },
    {
        "number": 222,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tup = test_tuple\n    if not isinstance(tup, tuple):\n        return False\n    return all(isinstance(item, type(tup[0])) for item in tup)\n",
        "test": "assert     check_type((3,3.0,'a')) == False, 'wrong'",
        "num_ids": 449
    },
    {
        "number": 223,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return arr.count(x) > n // 2\n",
        "test": "assert     not is_majority([1, 2, 3, 4, 5, 5, 5, 5, 5, 6], 5, 6)",
        "num_ids": 485
    },
    {
        "number": 224,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        if n & 1: \n            count += 1\n        n = n >> 1\n    return count \n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 306
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if str == None:\n        return None\n    else:\n        result = \"\"\n        for i in range(0, len(str)):\n            if i%2 == 0:\n                result = result + str[i]\n        return result\n",
        "test": "assert     odd_values_string('abcdef') == 'ace'",
        "num_ids": 408
    },
    {
        "number": 227,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     min_of_three(1, 2, 3) == 1",
        "num_ids": 389
    },
    {
        "number": 228,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l,r+1):\n        if n & i == 0:\n            count = count + 1\n    if count == 1:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(1,0,5) == False",
        "num_ids": 426
    },
    {
        "number": 229,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = []\n    count = 0\n    for x in arr:\n        if x < 0:\n            result.append(x)\n            count += 1\n        else:\n            result.append(x)\n            count += 1\n    return result + [0] * (n - count)\n",
        "test": "assert     re_arrange_array([-1, -2, -3, 4, 5, 6, 7, 8, 9, 10], 0) == [-1, -2, -3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 1015
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == \" \":\n            new_str += char\n        else:\n            new_str += char\n    return new_str\n",
        "test": "assert     replace_blank('Hi', '*') == 'Hi'",
        "num_ids": 465
    },
    {
        "number": 232,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "test": "assert     larg_nnum([3,2,1,5,4],1) == [5]",
        "num_ids": 2189
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = math.pi\n    return pi * (r**2) * 2 + pi * r * h\n",
        "test": "assert     lateralsuface_cylinder(0,2) == 0",
        "num_ids": 245
    },
    {
        "number": 234,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(2) == 8",
        "num_ids": 196
    },
    {
        "number": 235,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    # Get the rightmost 1 bit\n    while n:\n        if n & 1:\n            even_bits += 1\n        n = n >> 1\n    return even_bits\n",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 376
    },
    {
        "number": 237,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n",
        "test": "assert     check_occurences([]) == {}",
        "num_ids": 1250
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str.split(\" \"))\n    \ndef number_of_substrings_v2(str):\n    return len(re.findall(r'[\\w]+', str))\n",
        "test": "assert     number_of_substrings('a') == 1",
        "num_ids": 417
    },
    {
        "number": 239,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(n):\n        if (i + 2) * (i + 1) / 2 <= m:\n            count += 1\n        else:\n            break\n    return count\n",
        "test": "assert     get_total_number_of_sequences(1,1) == 1",
        "num_ids": 435
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "test": "assert     replace_list([1,2,3,4,5], [4,5,6,7]) == [1,2,3,5,6,7]",
        "num_ids": 584
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac('hello') == 5",
        "num_ids": 193
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root=math.ceil(math.sqrt(N))\n    while True:\n        if root**2>N:\n            break\n        root+=1\n    return root**2\ndef is_perfect_square(N):\n    '''\n    Write a python function to check whether the given number is a perfect square\n    '''\n    root=math.sqrt(N)\n    if int(root)==root:\n        return True\n    return False\ndef is_perfect_square2(N):\n    '''\n    Write a python function to check whether the given number is a perfect square\n    '''\n    i=1\n    root=math.sqrt(N)\n    while i<root:\n        if root%i==0:\n            root1=root/i\n            if i*i==N:\n                return True\n        i+=1\n    return False\ndef is_perfect_square3(N):\n    '''\n    Write a python function to check whether the given number is a perfect square\n    '''\n    root=math.sqrt(N)\n    return int(root)**2==N\ndef find_fibo(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    num1=0\n    num2=1\n    for i in range(N):\n        num1,num2=num2,num1+num2\n    return num1\ndef find_fibo2(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    a,b=0,1\n    for i in range(N):\n        a,b=b,a+b\n    return a\ndef find_fibo3(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return (math.sqrt(5)+1)/2**N-(math.sqrt(5)-1)/2**N\ndef find_fibo4(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    x=1\n    y=1\n    for i in range(N-1):\n        x,y=y,x+y\n    return x\ndef find_fibo5(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo6(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    a,b=0,1\n    for i in range(N):\n        a,b=b,a+b\n    return a\ndef find_fibo7(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return (5**N-2**(N-1))/(5-2)\ndef find_fibo8(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return (2**(1/2)-1)**N\ndef find_fibo9(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return 2**(1/2)**N\ndef find_fibo10(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return (5**N-2**(N-1))/(5-2)\ndef find_fibo11(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((3**(1/2)-1)**N/(3-1))\ndef find_fibo12(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((3**(1/2)-1)**N/(3-1))\ndef find_fibo13(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((3**(1/2)-1)**N/(3-1))\ndef find_fibo14(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo15(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo16(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo17(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo18(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo19(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo20(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo21(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo22(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo23(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo24(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo25(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo26(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo27(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo28(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo29(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo30(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo31(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo32(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))",
        "test": "assert     next_Perfect_Square(2) == 4",
        "num_ids": 293
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # iterate from the end of the array\n    for i in range(len(arr) - 2, -1, -1):\n        # iterate from the start of the array\n        for j in range(i + 1, len(arr)):\n            # check if the sum of the array from the start and end is less than the value of the array\n            if sum(arr[i:j + 1]) < arr[i]:\n                # replace the value of the array if it is less than the sum of the array from the start and end\n                arr[i] = sum(arr[i:j + 1])\n    # return the max sum of the array\n    return max(arr)\n",
        "test": "assert     max_sum([1, 3, 8, 12, 4, 10, 2]) == 12",
        "num_ids": 590
    },
    {
        "number": 246,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return (number**0.5)\n",
        "test": "assert     babylonian_squareroot(4.0) == 2.0",
        "num_ids": 429
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    \n    # If input is single character, then output is 1 \n    if n == 1: \n        return 1\n    \n    # Matrix to store results of subproblems \n    l = [[0 for x in range(n)] for x in range(n)] \n    \n    # Strings of length 1 are palindrome of length 1 \n    for i in range(n): \n        l[i][i] = 1\n    \n    # Start from middle and find LPS starting \n    # from that middle \n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                l[i][j] = 2\n            elif str[i] == str[j]: \n                l[i][j] = l[i+1][j-1] + 2\n            else: \n                l[i][j] = max(l[i][j-1], l[i+1][j]); \n    return l[0][n-1]\n",
        "test": "assert     lps('a') == 1",
        "num_ids": 3505
    },
    {
        "number": 248,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + (harmonic_sum(n-1))\n",
        "test": "assert     harmonic_sum(0) == 0",
        "num_ids": 245
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for i in array_nums1:\n        if i in array_nums2:\n            result.append(i)\n    return result\n",
        "test": "assert     intersection_array([1,2,3,4,5],[2,3,4,5,6]) == [2,3,4,5]",
        "num_ids": 531
    },
    {
        "number": 250,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "test": "assert     count_X((1, 2, 3, 1, 3, 4, 5, 5, 2), 2) == 2",
        "num_ids": 2208
    },
    {
        "number": 251,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n",
        "test": "assert     insert_element([1,2,3,4,5],5) == [5,1,2,3,4,5]",
        "num_ids": 560
    },
    {
        "number": 252,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    absol=numbers.real\n    angle=cmath.phase(numbers)\n    if angle<0:\n        angle=360+angle\n    return (absol,angle)\n",
        "test": "assert     (convert(0+1j)    ==    (0, cmath.pi/2)), \"convert(0+1j) == (0, cmath.pi/2) == incorrect\"",
        "num_ids": 582
    },
    {
        "number": 253,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for each in list1:\n        if isinstance(each,int):\n            count += 1\n    return count\n",
        "test": "assert     count_integer([]) == 0, \"Error: list should be empty\"",
        "num_ids": 513
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i+n]) for i in range(len(l) - n + 1)]\n",
        "test": "assert     combinations_colors(['r', 'g', 'b'], 1)    ==     [('r',), ('g',), ('b',)]",
        "num_ids": 984
    },
    {
        "number": 256,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if type(n)!= int:\n        raise TypeError('n must be a non-negative integer')\n    if n < 0:\n        raise ValueError('n must be a non-negative integer')\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    primes = [2]\n    for num in range(3, n + 1):\n        is_prime = True\n        for prime in primes:\n            if prime > num ** 0.5:\n                break\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return len(primes)\n",
        "test": "assert     count_Primes_nums(0)         == 0",
        "num_ids": 623
    },
    {
        "number": 257,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n",
        "test": "assert     swap_numbers(5,9) == (9, 5), \"Failed\"",
        "num_ids": 263
    },
    {
        "number": 259,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n",
        "test": "assert     maximize_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h')) == ('e', 'f', 'g', 'h')",
        "num_ids": 590
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n==2 or n==3: return True\n        if n%2==0 or n<2: return False\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0: return False\n        return True\n    \n    def prime_generator(n):\n        for i in range(2,n):\n            if is_prime(i): yield i\n    \n    def newman_williams(p,n):\n        rn = pow(p,n,n**2)\n        rn2 = pow(rn,2,n**2)\n        rn3 = pow(rn2,2,n**2)\n        rn4 = pow(rn3,2,n**2)\n        rn5 = pow(rn4,2,n**2)\n        rn6 = pow(rn5,2,n**2)\n        rn7 = pow(rn6,2,n**2)\n        rn8 = pow(rn7,2,n**2)\n        rn9 = pow(rn8,2,n**2)\n        rn10 = pow(rn9,2,n**2)\n        rn11 = pow(rn10,2,n**2)\n        rn12 = pow(rn11,2,n**2)\n        rn13 = pow(rn12,2,n**2)\n        rn14 = pow(rn13,2,n**2)\n        rn15 = pow(rn14,2,n**2)\n        rn16 = pow(rn15,2,n**2)\n        rn17 = pow(rn16,2,n**2)\n        rn18 = pow(rn17,2,n**2)\n        rn19 = pow(rn18,2,n**2)\n        rn20 = pow(rn19,2,n**2)\n        rn21 = pow(rn20,2,n**2)\n        rn22 = pow(rn21,2,n**2)\n        rn23 = pow(rn22,2,n**2)\n        rn24 = pow(rn23,2,n**2)\n        rn25 = pow(rn24,2,n**2)\n        rn26 = pow(rn25,2,n**2)\n        rn27 = pow(rn26,2,n**2)\n        rn28 = pow(rn27,2,n**2)\n        rn29 = pow(rn28,2,n**2)\n        rn30 = pow(rn29,2,n**2)\n        rn31 = pow(rn30,2,n**2)\n        rn32 = pow(rn31,2,n**2)\n        rn33 = pow(rn32,2,n**2)\n        rn34 = pow(rn33,2,n**2)\n        rn35 = pow(rn34,2,n**2)\n        rn36 = pow(rn35,2,n**2)\n        rn37 = pow(rn36,2,n**2)\n        rn38 = pow(rn37,2,n**2)\n        rn39 = pow(rn38,2,n**2)\n        rn40 = pow(rn39,2,n**2)\n        rn41 = pow(rn40,2,n**2)\n        rn42 = pow(rn41,2,n**2)\n        rn43 = pow(rn42,2,n**2)\n        rn44 = pow(rn43,2,n**2)\n        rn45 = pow(rn44,2,n**2)\n        rn46 = pow(rn45,2,n**2)\n        rn47 = pow(rn46,2,n**2)\n        rn48 = pow(rn47,2,n**2)\n        rn49 = pow(rn48,2,n**2)\n        rn50 = pow(rn49,2,n**2)\n        rn51 = pow(rn50,2,n**2)\n        rn52 = pow(rn51,2,n**2)\n        rn53 = pow(rn52,2,n**2)\n        rn54 = pow(rn53,2,n**2)\n        rn55 = pow(rn54,2,n**2)\n        rn56 = pow(rn55,2,n**2)\n        rn57 = pow(rn56,2,n**2)\n        rn58 = pow(rn57,2,n**2)\n        rn59 = pow(rn58,2,n**2)\n        rn60 = pow(rn59,2,n**2)\n        rn61 = pow(rn60,2,n**2)\n        rn62 = pow(rn61,2,n**2)\n        rn63 = pow(rn62,2,n**2)\n        rn64 = pow(rn63,2,n**2)\n        rn65 = pow(rn64,2,n**2)\n        rn66 = pow(rn65,2,n**2)\n        rn67 = pow(rn66,2,n**2)\n        rn68 = pow(rn67,2,n**2)\n        rn69 = pow(rn68,2,n**2)\n        rn70 = pow(rn69,2,n**2)\n        rn71 = pow(rn70,2,n**2)\n        rn72 = pow(rn71,2,n**2)\n        rn73 = pow(rn72,2,n**2)\n        rn74 = pow(rn73,2,n**2)\n        rn75 = pow(rn74,2,n**2)\n        rn76 = pow(rn75,2,n**2)\n        rn77 = pow(rn76,2,n**2)\n        rn78 = pow(rn77,2,n**2)\n        rn79 = pow(rn78,2,n**2)\n        rn80 = pow(rn79,2,n**2)\n        rn81 = pow(rn80,2,n**2)\n        rn82 = pow(rn81,2,n**2)\n        rn83 = pow(rn82,2,n**2)\n        rn84 = pow(rn83,2,n**2)\n        rn85 = pow(rn84,2,n**2)\n        rn86 = pow(rn85,2,n**2)\n        rn87 = pow(rn86,2,n**2)\n        rn88 = pow(rn87,2,n**2)\n        rn89 = pow(rn88,2,n**2)\n        rn90 = pow(rn89,2,n**2)\n        rn91 = pow(rn90,2,n**2)\n        rn92 = pow(rn91,2,n**2)\n        rn93 = pow(rn92,2,n**2)\n        rn94 = pow(rn93,2,n**2)\n        rn95 = pow(rn94,2,n**2)\n        rn96 = pow(rn95,2,n**2)\n        rn97 = pow(rn96,2,n**2)\n        rn98 = pow(rn97,2,n**2)\n        rn99 = pow(rn98,2,n**2)\n        rn100 = pow(rn99,2,n**2)\n        rn101 = pow(rn100,2,n**2)\n        rn102 = pow(rn101,2,n**2)\n        rn103 = pow(rn102,2,n**2)\n        rn104 = pow(rn103,2,n**2)\n        rn105 = pow(rn104,2,n**2)\n        rn106 = pow(rn105,2,n**2)\n        rn107 = pow(rn106,2,n**2)\n        rn108 = pow(rn107,2,n**2)\n        rn109 = pow(rn108,2,n**2)\n        rn110 = pow(rn109,2,n**2)\n        rn111 = pow(rn110,2,n**2)\n        rn112 = pow(rn111,2,n**2)\n        rn113 = pow(rn112,2,n**2)\n        rn114 = pow(rn113,2,n**2)\n        rn115 = pow(rn114,2,n**2)\n        rn116 = pow(rn115,2,n**2)\n        rn117 = pow(rn116,2,n**2)\n        rn118 = pow(rn117,2,n**2)",
        "test": "assert     newman_prime(11)    == 31",
        "num_ids": 2452
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    len_tup1 = len(test_tup1)\n    len_tup2 = len(test_tup2)\n    \n    if len_tup1 == len_tup2:\n        \n        new_tup1 = ()\n        new_tup2 = ()\n        \n        for index in range(len_tup1):\n            new_tup1 += (test_tup1[index] / test_tup2[index],)\n            new_tup2 += (test_tup2[index] / test_tup1[index],)\n        \n        return new_tup1, new_tup2\n    \n    return 'Not possible!'\n",
        "test": "assert ",
        "num_ids": 798
    },
    {
        "number": 262,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 539
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 2:\n        return h_age*7\n    else:\n        return h_age*9\n",
        "test": "assert     isinstance(dog_age(0), int)     # check the type of return value",
        "num_ids": 240
    },
    {
        "number": 265,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n",
        "test": "assert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 492
    },
    {
        "number": 266,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 257
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1, n+1, 2)])\n",
        "test": "assert     square_Sum(3)     == 10",
        "num_ids": 407
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1:\n        return 'There is no %s-star' % n\n    if n == 1:\n        return 1\n    else:\n        return n * (find_star_num(n - 1) * 2 - 1)\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 2328
    },
    {
        "number": 269,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \n    \ndef base_change(k, b1, b2):\n    '''\n    Write a function to convert a base-k number to base-b number\n    Use the ascii_value function as the base.\n    '''\n    k = int(k)\n    b1 = int(b1)\n    b2 = int(b2)\n    \n    def base_convert(k, b1, b2):\n        if b1 == b2:\n            return k\n        elif b1 < b2:\n            return base_convert(int(k, b1), b2)\n        elif b2 < b1:\n            return base_convert(int(k, b2), b1)\n    \n    return base_convert(k, b1, b2)\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 356
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n",
        "test": "assert     sum_even_and_even_index([1,2,3,4,5,6,7])== sum([1,3,5,7])",
        "num_ids": 459
    },
    {
        "number": 271,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for num in range(1, n + 1):\n        if num ** 5 % 2 == 0:\n            result += num\n    return result\n",
        "test": "assert     even_Power_Sum(0)     == 0",
        "num_ids": 291
    },
    {
        "number": 272,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n",
        "test": "assert     rear_extract([(1,2),(3,4),(5,6)]) == [2,4,6]",
        "num_ids": 449
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples are not of the same length\"\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1\n",
        "test": "assert     substract_elements([(1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6)], [(1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6)]) == [(-2, -2, -2, -2, -2, -2), (-2, -2, -2, -2, -2, -2)]",
        "num_ids": 581
    },
    {
        "number": 274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0; # initialize as 0\n    for i in range(0, n):\n        s += binomial_coeff(i, n);\n    return s;\n",
        "test": "assert     even_binomial_Coeff_Sum( 100) == 210",
        "num_ids": 2391
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.1415\n    volume = pi*r**2*h\n    return volume\n",
        "test": "assert         volume_cylinder(0.0,2.5) == 0",
        "num_ids": 264
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newdict={k:v for (k,v) in dict.items() if v >= n}\n    return newdict\n",
        "test": "assert     (dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 3) == {\"c\": 3})",
        "num_ids": 359
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    new_tup = tuple(i[0] for i in test_tup)\n    \n    return len(new_tup)\n    \ndef count_first_elements_2(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    new_tup = tuple(i[0] for i in test_tup)\n    \n    return len(new_tup) - new_tup.index(test_tup[0][0])\n    \n    \ndef count_first_elements_3(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    new_tup = tuple(i[0] for i in test_tup)\n    \n    return len(new_tup) - test_tup.index(min(test_tup, key=lambda x: x[0]))\n    \n    \ndef count_first_elements_4(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    new_tup = tuple(i[0] for i in test_tup)\n    \n    return len(new_tup) - test_tup.index(min(test_tup, key=lambda x: x[0]))\n",
        "test": "assert     count_first_elements((\"a\", \"a\", \"a\")) == 3",
        "num_ids": 489
    },
    {
        "number": 279,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n + 1) / 2 \n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 2801
    },
    {
        "number": 280,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "test": "assert     (sequential_search([], 1) == (False, -1))",
        "num_ids": 389
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "test": "assert     all_unique([1,2,3,4,5]) == True, \"Failed\"",
        "num_ids": 391
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert     sub_list([0,0,0,0],[0,0,0,0]) == [0,0,0,0]",
        "num_ids": 986
    },
    {
        "number": 283,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n<10:\n        return True\n    else:\n        if n%10!=0 and n%10 not in [int(x) for x in str(n)]:\n            return False\n        else:\n            if len([int(x) for x in str(n)])<=len(str(n)):\n                return True\n            else:\n                return False\n",
        "test": "assert     validate(45) == True",
        "num_ids": 452
    },
    {
        "number": 284,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_element([1,1,1],1)",
        "num_ids": 355
    },
    {
        "number": 285,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"a[bbb]*\"\n    return bool(re.search(pattern, text))\n",
        "test": "assert     text_match_two_three('aaab') == True",
        "num_ids": 316
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(k):\n        if i == 0:\n            max_sum = max(max_sum, sum(a))\n        else:\n            max_sum = max(max_sum, sum(a) + max_sum)\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([1, 2, -3, -5], 3, 2) == 0",
        "num_ids": 497
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # even_sum = 0\n    # for i in range(1,n+1):\n    #     if i%2 == 0:\n    #         even_sum += i**2\n    # return even_sum\n    return sum(i**2 for i in range(1,n+1) if i%2 == 0)\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 372
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len\n",
        "test": "assert     max_length([[1,2,3,4], [5,6,7,8,9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25]]) == [25]",
        "num_ids": 595
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n: \n        return 0\n    if k == 0 or n == 0: \n        return 1\n    if n == 1: \n        return k \n    if n == 2: \n        if k == 1: \n            return k\n        else: \n            return k*k\n    if k == 1: \n        return n\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k) + count_no_of_ways(n-3, k)\n",
        "test": "assert     count_no_of_ways(6, 2) == 6",
        "num_ids": 965
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    from math import trunc\n    return trunc(n/m)\n    ",
        "test": "assert     find(11,11) == 1",
        "num_ids": 272
    },
    {
        "number": 293,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "test": "assert     otherside_rightangle(3,4) == 5",
        "num_ids": 339
    },
    {
        "number": 294,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n",
        "test": "assert     max_val([1,2,3,4,5]) == 5",
        "num_ids": 582
    },
    {
        "number": 295,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number <= 0:\n        return 0\n    divisors = 0\n    for i in range(1, number):\n        if number % i == 0:\n            divisors += i\n    return divisors\n",
        "test": "assert     sum_div(0) == 0",
        "num_ids": 458
    },
    {
        "number": 296,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    #this is for dynamic programming\n    #count = [0]*len(arr)\n    #Inversion_Count(arr, count, 0, len(arr)-1)\n    \n    #This is for linear runtime, better than the above code\n    count = 0\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[j] > arr[i]:\n                count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     get_Inv_Count([1, 2, 3, 4, 5])     == 0",
        "num_ids": 2520
    },
    {
        "number": 297,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for i in list1:\n        if type(i) == list:\n            res.extend(flatten_list(i))\n        else:\n            res.append(i)\n    return res\n",
        "test": "assert     [1] == flatten_list([1])",
        "num_ids": 419
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    t=defaultdict(float)\n    for i in stdata:\n        t[i[0]]=max(i[1],t[i[0]])\n    return t\n",
        "test": "assert ",
        "num_ids": 550
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    n2 = 2**n\n    n3 = 2*n2\n    n4 = 3*n2\n    n5 = 4*n2\n    n6 = 5*n2\n    n7 = 6*n2\n    n8 = 7*n2\n    n9 = 8*n2\n    n10 = 9*n2\n    n11 = 10*n2\n    n12 = 11*n2\n    n13 = 12*n2\n    n14 = 13*n2\n    n15 = 14*n2\n    n16 = 15*n2\n    n17 = 16*n2\n    n18 = 17*n2\n    n19 = 18*n2\n    n20 = 19*n2\n    n21 = 20*n2\n    n22 = 21*n2\n    n23 = 22*n2\n    n24 = 23*n2\n    n25 = 24*n2\n    n26 = 25*n2\n    n27 = 26*n2\n    n28 = 27*n2\n    n29 = 28*n2\n    n30 = 29*n2\n    n31 = 30*n2\n    n32 = 31*n2\n    n33 = 32*n2\n    n34 = 33*n2\n    n35 = 34*n2\n    n36 = 35*n2\n    n37 = 36*n2\n    n38 = 37*n2\n    n39 = 38*n2\n    n40 = 39*n2\n    n41 = 40*n2\n    n42 = 41*n2\n    n43 = 42*n2\n    n44 = 43*n2\n    n45 = 44*n2\n    n46 = 45*n2\n    n47 = 46*n2\n    n48 = 47*n2\n    n49 = 48*n2\n    n50 = 49*n2\n    n51 = 50*n2\n    n52 = 51*n2\n    n53 = 52*n2\n    n54 = 53*n2\n    n55 = 54*n2\n    n56 = 55*n2\n    n57 = 56*n2\n    n58 = 57*n2\n    n59 = 58*n2\n    n60 = 59*n2\n    n61 = 60*n2\n    n62 = 61*n2\n    n63 = 62*n2\n    n64 = 63*n2\n    n65 = 64*n2\n    n66 = 65*n2\n    n67 = 66*n2\n    n68 = 67*n2\n    n69 = 68*n2\n    n70 = 69*n2\n    n71 = 70*n2\n    n72 = 71*n2\n    n73 = 72*n2\n    n74 = 73*n2\n    n75 = 74*n2\n    n76 = 75*n2\n    n77 = 76*n2\n    n78 = 77*n2\n    n79 = 78*n2\n    n80 = 79*n2\n    n81 = 80*n2\n    n82 = 81*n2\n    n83 = 82*n2\n    n84 = 83*n2\n    n85 = 84*n2\n    n86 = 85*n2\n    n87 = 86*n2\n    n88 = 87*n2\n    n89 = 88*n2\n    n90 = 89*n2\n    n91 = 90*n2\n    n92 = 91*n2\n    n93 = 92*n2\n    n94 = 93*n2\n    n95 = 94*n2\n    n96 = 95*n2\n    n97 = 96*n2\n    n98 = 97*n2\n    n99 = 98*n2\n    n100 = 99*n2\n    n101 = 100*n2\n    n102 = 101*n2\n    n103 = 102*n2\n    n104 = 103*n2\n    n105 = 104*n2\n    n106 = 105*n2\n    n107 = 106*n2\n    n108 = 107*n2\n    n109 = 108*n2\n    n110 = 109*n2\n    n111 = 110*n2\n    n112 = 111*n2\n    n113 = 112*n2\n    n114 = 113*n2\n    n115 = 114*n2\n    n116 = 115*n2\n    n117 = 116*n2\n    n118 = 117*n2\n    n119 = 118*n2\n    n120 = 119*n2\n    n121 = 120*n2\n    n122 = 121*n2\n    n123 = 122*n2\n    n124 = 123*n2\n    n125 = 124*n2\n    n126 = 125*n2\n    n127 = 126*n2\n    n128 = 127*n2\n    n129 = 128*n2\n    n130 = 129*n2\n    n131 = 130*n2\n    n132 = 131*n2\n    n133 = 132*n2\n    n134 = 133*n2\n    n135 = 134*n2\n    n136 = 135*n2\n    n137 = 136*n2\n    n138 = 137*n2\n    n139 = 138*n2\n    n140 = 139*n2\n    n141 = 140*n2\n    n142 = 141*n2\n    n143 = 142*n2\n    n144 = 143*n2\n    n145 = 144*n2\n    n146 = 145*n2\n    n147 = 146*n2\n    n148 = 147*n2\n    n149 = 148*n2\n    n150 = 149*n2\n    n151 = 150*n2\n    n152 = 151*n2\n    n153 = 152*n2\n    n154 = 153*n2\n    n155 = 154*n2\n    n156 = 155*n2\n    n157 = 156*n2\n    n158 = 157*n2\n    n159 = 158*n2\n    n160 = 159*n2\n    n161 = 160*n2\n    n162 = 161*n2\n    n163 = 162*n2\n    n164 = 163*n2\n    n165 = 164*n2\n    n166 = 165*n2\n    n167 = 166*n2\n    n168 = 167*n2\n    n169 = 168*n2\n    n170 = 169*n2\n    n171 = 170*n2\n    n172 = 171*n2\n    n173 = 172*n2\n    n174 = 173*n2\n    n175 = 174*n2\n    n176 = 175*n2\n    n177 = 176*n2\n    n178 = 177*n2\n    n179 = 178*n2\n    n180 = 179*n2\n    n181 = 180*n2\n    n182 = 181*n2\n    n183 = 182*n2\n    n184 = 183*n2\n    n185 = 184*n2\n    n186 = 185*n2\n    n187 = 186*n2\n    n188 = 187*n2\n    n189 = 188*n2\n    n190 = 189*n2\n    n191 = 190*n2\n    n192 = 191*n2\n    n193 = 192*n2\n    n194 = 193*n2\n    n195 = 194*n2\n    n196 = 195*n2\n    n197 = 196*n2\n    n198 = 197*n2\n    n199 = 198*n2\n    n200 = 199*n2\n    n201 = 200*n2\n    n202 = 201*n2\n    n203 = 202*n2\n    n204 = 203*n2\n    n205 = 204*n2\n    n206 = 205*n2\n    n207 = 206*n2\n    n208 = 207*n2\n    n209 = 208*n2\n    n210 = 209*n2\n    n211 = 210*n2\n    n212 = 211*n2\n    n213 = 212*n2\n    n214 = 213*n2\n    n215 = 214*n2\n    n216 = 215*n2\n    n217 = 216*n2\n    n218 = 217*n2\n    n219 = 218*n2\n    ",
        "test": "assert     count_binary_seq(1) == 1",
        "num_ids": 2355
    },
    {
        "number": 301,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if type(d) == dict:\n        depth += 1\n        for k,v in d.items():\n            depth = max(depth, dict_depth(v))\n    return depth\n",
        "test": "assert     dict_depth({\"key\":\"value\"}) == 1",
        "num_ids": 646
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start = ranges[0]\n    end = ranges[1]\n    target = ranges[2]\n    rotation = rotations[index]\n    if index == 0 :\n        return arr[0]\n    if index == 1 :\n        return arr[end]\n    if index == 2 :\n        return arr[target]\n    if index == 3 :\n        return arr[start]\n    if index == 4 :\n        return arr[rotation]\n    if index == 5 :\n        return arr[rotation-1]\n    if index == 6 :\n        return arr[rotation+1]\n    if index == 7 :\n        return arr[rotation+2]\n    if index == 8 :\n        return arr[rotation+3]\n",
        "test": "assert     find_Element([1,2,3,4,5],[2,3,4,5,6,7,8,9,10],[2,2,3,4,5,6,7,8,9,10],3) == 3",
        "num_ids": 857
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_list = []\n    for word in words:\n        if word.startswith('p'):\n            p_list.append(word)\n    return p_list\n",
        "test": "assert     start_withp(['wow','pizza']) == ['pizza']",
        "num_ids": 2141
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index > n - 1:\n        return a[index]\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    # max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(max_sum_increasing_subseq(a, n, index + 1, k) + a[index], max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index])\n    # return max(max_sum_increasing_subseq(a, n, index + 1, k) + a[index], max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index])\n",
        "test": "assert     max_sum_increasing_subseq([5, 9, -3, 2, 1, 3, 5], 6, 3, 1) == 5",
        "num_ids": 945
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0 and n>0:\n        return tuple(tuplex[m:]+tuplex[:n])\n    elif m==0 and n==0:\n        return tuple(tuplex)\n    elif m>0 and n==0:\n        return tuple(tuplex[m:])\n    else:\n        return tuple(tuplex[m:n])\n",
        "test": "assert     colon_tuplex((1,2,3),1,3) == (2,3)",
        "num_ids": 790
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        nums1_product = 1\n        nums2_product = 1\n        for j in range(len(nums1)):\n            nums1_product *= nums1[j]\n        for k in range(len(nums2)):\n            nums2_product *= nums2[k]\n        products.append(max(nums1_product, nums2_product))\n    return products\n",
        "test": "assert     large_product([-3, 1, 2, 3, -4], [1, 2, 3, 4], 2) == [12, 8]",
        "num_ids": 2684
    },
    {
        "number": 309,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(2,3) == 3",
        "num_ids": 230
    },
    {
        "number": 310,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list_char = list(str1)\n    tuple_char = tuple(list_char)\n    return tuple_char\n",
        "test": "assert         string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 411
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & (n-1): \n        n = n & ~(n-1)\n    return n\n",
        "test": "assert     set_left_most_unset_bit(10) == 2, 'incorrect'",
        "num_ids": 350
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3.0*math.pi*r**2*h\n",
        "test": "assert     volume_cone(1,1) == math.pi/3",
        "num_ids": 280
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    power = 1\n    while (power < n):\n        power *= 2\n    return power\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 250
    },
    {
        "number": 389,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: return 2\n    if n == 1: return 1\n    if n == 2: return 3\n    return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 428
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    lst = []\n    for elem in list_:\n        lst.append(string % elem)\n    return lst\n",
        "test": "assert     add_string([1, 2, 3], '%d') == ['1', '2', '3']",
        "num_ids": 474
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    dict_l = []\n    for i in range(len(l1)):\n        dict_l.append({l1[i]: l2[i], l3[i]: l3[i]})\n    return dict_l\n",
        "test": "assert     convert_list_dictionary(['foo', 'bar', 'baz'], [0, 1, 2, 3, 4], [5, 6, 7, 8, 9]) == \\",
        "num_ids": 533
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    else:\n        return 11\n",
        "test": "assert     get_max_sum(1)                 == 1",
        "num_ids": 592
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n    return max_len\n",
        "test": "assert         max_length_list([]) == 0",
        "num_ids": 693
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_distinct(()) == True",
        "num_ids": 533
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # for i in str1:\n    #     count[i] = count.get(i, 0) + 1\n    # for i in str1:\n    #     if count[i] == 1:\n    #         return i\n    # return None\n    count = {}\n    for i in str1:\n        count[i] = count.get(i, 0) + 1\n    for i in str1:\n        if count[i] == 1:\n            return i\n    return None\n",
        "test": "assert     first_non_repeating_character('abcdef') == 'a'",
        "num_ids": 480
    },
    {
        "number": 396,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_char('a') == True,'should be True'",
        "num_ids": 2220
    },
    {
        "number": 397,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    else:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n",
        "test": "assert     median_numbers(1,1,1) == 1",
        "num_ids": 446
    },
    {
        "number": 398,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def _sum_of_digits(nums):\n        '''\n        Returns the sum of digits of each element of a given list.\n        '''\n        sum_of_digits = 0\n        for num in nums:\n            sum_of_digits += sum(int(i) for i in str(num))\n        return sum_of_digits\n    return _sum_of_digits(nums)\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 359
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([tup1[i]^tup2[i] for i in range(len(tup1))])\n",
        "test": "assert ",
        "num_ids": 337
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for key in test_list:\n        freq[key] = freq.get(key,0) + 1\n    return len(freq)\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 552
    },
    {
        "number": 401,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple):\n        return test_tup2\n    elif not isinstance(test_tup2, tuple):\n        return test_tup1\n    else:\n        return tuple(x + y for x, y in zip(test_tup1, test_tup2))\n",
        "test": "assert     add_nested_tuples((1,2,3),(4,5,6)) == (5,7,9)",
        "num_ids": 667
    },
    {
        "number": 404,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n",
        "test": "assert     minimum(2,4) == 2",
        "num_ids": 191
    },
    {
        "number": 405,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    for tup in tuplex: \n        if tup == tuple1: \n            return True \n    return False \n",
        "test": "assert     (check_tuplex((1,2,3),(1,2,3,4)) == False)",
        "num_ids": 326
    },
    {
        "number": 406,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x & 1\n",
        "test": "assert     find_Parity(0) == 0,    'find_Parity(0) = %s' %    find_Parity(0)",
        "num_ids": 278
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    for i in range(len(s)-1):\n        if int(s[i]) < int(s[i+1]):\n            for j in range(i+1, len(s)):\n                if int(s[j]) > int(s[i]):\n                    k = s[j]\n                    break\n            t = s[:i] + k + s[i+1:len(s)]\n            return int(t)\n    return -1\n",
        "test": "assert     rearrange_bigger(7638) == 76638",
        "num_ids": 666
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    m = len(nums1)\n    n = len(nums2)\n    #for i in range(m):\n        #for j in range(n):\n            #if nums1[i] < nums2[j]:\n                #pairs.append((nums1[i], nums2[j]))\n    #return pairs\n    heap = []\n    for i in range(min(k,m)):\n        heapq.heappush(heap,(nums1[i],nums2[0]))\n    for i in range(min(k,m),m):\n        nums1[i] < nums2[0]\n        if len(heap) == k:\n            if heap[0][0] > nums2[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap,(nums1[i],nums2[0]))\n        else:\n            heapq.heappush(heap,(nums1[i],nums2[0]))\n    while len(heap)!= 0:\n        pairs.append(heapq.heappop(heap))\n    return pairs\n",
        "test": "assert     k_smallest_pairs([1, 1, 2], [1, 2, 3], 1) == [(1, 1)]",
        "num_ids": 1162
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]*list1[0][1]\n    for i in range(1,len(list1)):\n        current_product = list1[i][0]*list1[i][1]\n        if current_product < min_product:\n            min_product = current_product\n    return min_product\n",
        "test": "assert     min_product_tuple([(4,3), (5,6)]) == 12",
        "num_ids": 861
    },
    {
        "number": 410,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # If list is empty\n    if len(listval) == 0:\n        return None\n    # If list is a singleton\n    if len(listval) == 1:\n        return listval[0]\n    # If list has just 2 elements\n    if len(listval) == 2:\n        if listval[0] <= listval[1]:\n            return listval[0]\n        else:\n            return listval[1]\n    # If list has more than 2 elements\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n",
        "test": "assert     min_val([5,4,3,2,1]) == 1",
        "num_ids": 481
    },
    {
        "number": 411,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # use re.sub\n    if word == '':\n        return ''\n    # print(word)\n    words = word.split('_')\n    # print(words)\n    ret = ''\n    for i in range(len(words)):\n        if i == 0:\n            ret += words[i].capitalize()\n        elif i == len(words) - 1:\n            ret += words[i].lower()\n        else:\n            ret += words[i].lower() + words[i+1].capitalize()\n    # print(ret)\n    return ret\n",
        "test": "assert     snake_to_camel('') == ''",
        "num_ids": 733
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [item for item in l if item%2==0]\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 404
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i, (a,b) in enumerate(list1):\n        if i == n:\n            return b\n",
        "test": "assert     extract_nth_element([(0,3),(1,2),(2,1),(3,0)],1) == 2",
        "num_ids": 411
    },
    {
        "number": 414,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #Return True if the set of elements in list1 is a subset of the set of elements in list2\n    return len(set(list1) & set(list2)) > 0\n",
        "test": "assert     overlapping([1,2,3,4,5],[2,3,4,5,6]) == True",
        "num_ids": 264
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    l=len(arr)\n    if l<4:\n        return -1\n    if l==4:\n        if arr[0]*arr[1]*arr[2]*arr[3]>arr[1]*arr[2]*arr[3]*arr[0]:\n            return arr[0]*arr[1]*arr[2]*arr[3]\n        else:\n            return arr[1]*arr[2]*arr[3]*arr[0]\n    if l==5:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]>arr[0]*arr[1]*arr[3]*arr[4]*arr[2]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]\n        else:\n            return arr[0]*arr[1]*arr[3]*arr[4]*arr[2]\n    if l==6:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[3]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[3]\n    if l==7:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[4]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[4]\n    if l==8:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[5]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[5]\n    if l==9:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[6]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[6]\n    if l==10:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[7]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[7]\n    if l==11:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[8]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[8]\n    if l==12:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[9]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[9]\n    if l==13:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]*arr[10]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]*arr[10]\n    if l==14:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*ar",
        "test": "assert     max_Product([1, 2, 3, 4, -5]) == 24",
        "num_ids": 2853
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_of_tuples = Input\n    sorted_list_of_tuples = sorted(list_of_tuples)\n    dictionaries = []\n    for item in sorted_list_of_tuples:\n        tmp_dictionary = {}\n        tmp_dictionary[item[0]] = 1\n        dictionaries.append(tmp_dictionary)\n    #print dictionaries\n    result = {}\n    for i in range(len(dictionaries)):\n        for j in range(len(dictionaries)):\n            if i == j:\n                continue\n            else:\n                tmp_dictionary = dictionaries[i]\n                tmp_dictionary_2 = dictionaries[j]\n                for ele in tmp_dictionary:\n                    if ele in tmp_dictionary_2:\n                        tmp_dictionary_2[ele] += 1\n                for ele in tmp_dictionary_2:\n                    if tmp_dictionary[ele] < tmp_dictionary_2[ele]:\n                        tmp_dictionary_2[ele] = tmp_dictionary[ele]\n                dictionaries[j] = tmp_dictionary_2\n    #print dictionaries\n    for i in range(len(dictionaries)):\n        for j in dictionaries[i]:\n            if dictionaries[i][j] > 1:\n                result[j] = 1\n    return result\n    \n    \ndef count_in_dict(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_of_tuples = Input\n    sorted_list_of_tuples = sorted(list_of_tuples)\n    dictionaries = []\n    for item in sorted_list_of_tuples:\n        tmp_dictionary = {}\n        tmp_dictionary[item[0]] = 1\n        dictionaries.append(tmp_dictionary)\n    #print dictionaries\n    result = {}\n    for i in range(len(dictionaries)):\n        for j in range(len(dictionaries)):\n            if i == j:\n                continue\n            else:\n                tmp_dictionary = dictionaries[i]\n                tmp_dictionary_2 = dictionaries[j]\n                for ele in tmp_dictionary:\n                    if ele in tmp_dictionary_2:\n                        tmp_dictionary_2[ele] += 1\n                for ele in tmp_dictionary_2:\n                    if tmp_dictionary[ele] < tmp_dictionary_2[ele]:\n                        tmp_dictionary_2[ele] = tmp_dictionary[ele]\n                dictionaries[j] = tmp_dictionary_2\n    #print dictionaries\n    for i in range(len(dictionaries)):\n        for j in dictionaries[i]:\n            if dictionaries[i][j] > 1:\n                result[j] = 1\n    return result\n    \ndef count_in_dict2(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_of_tuples = Input\n    dictionaries = []\n    for item in list_of_tuples:\n        tmp_dictionary = {}\n        tmp_dictionary[item[0]] = 1\n        dictionaries.append(tmp_dictionary)\n    #print dictionaries\n    result = {}\n    for i in range(len(dictionaries)):\n        for j in range(len(dictionaries)):\n            if i == j:\n                continue\n            else:\n                tmp_dictionary = dictionaries[i]\n                tmp_dictionary_2 = dictionaries[j]\n                for ele in tmp_dictionary:\n                    if ele in tmp_dictionary_2:\n                        tmp_dictionary_2[ele] += 1\n                for ele in tmp_dictionary_2:\n                    if tmp_dictionary[ele] < tmp_dictionary_2[ele]:\n                        tmp_dictionary_2[ele] = tmp_dictionary[ele]\n                dictionaries[j] = tmp_dictionary_2\n    #print dictionaries\n    for i in range(len(dictionaries)):\n        for j in dictionaries[i]:\n            if dictionaries[i][j] > 1:\n                result[j] = 1\n    return result\n",
        "test": "assert ",
        "num_ids": 853
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum = -1\n    maximum_index = -1\n    for i in range(len(lst)):\n        if len(lst[i])>maximum:\n            maximum = len(lst[i])\n            maximum_index = i\n    return lst[maximum_index]\n",
        "test": "assert     Find_Max([\"K\",\"U\",\"L\",\"K\",\"K\",\"C\",\"V\",\"C\",\"H\",\"O\",\"K\",\"K\"]) == \"K\"",
        "num_ids": 724
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    return total_sum * len(list1)\n",
        "test": "assert     round_and_sum([1.4, 1.5, 1.6, 1.7, 1.8, 1.9])     == 14,     'incorrect'",
        "num_ids": 2377
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([n**3 for n in range(1,n+1,2)])\n",
        "test": "assert     (cube_Sum(0) == 0)",
        "num_ids": 318
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    tup_str = delimiter.join(test_tup)\n    return tup_str\n",
        "test": "assert     concatenate_tuple(('a','b','c')) == 'a,b,c'",
        "num_ids": 349
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total / n\n",
        "test": "assert     find_Average_Of_Cube(10) == 2.222222222222222",
        "num_ids": 437
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(rear_str.split(\".\")[-1] for rear_str in test_tuple)\n",
        "test": "assert     extract_rear(('www.nytimes.com', 'www.bbc.com')) == ('com', 'com')",
        "num_ids": 403
    },
    {
        "number": 425,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count\n",
        "test": "assert     count_element_in_list([1, 2, 3, 4, 5, 6], 5) == 1",
        "num_ids": 422
    },
    {
        "number": 426,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]",
        "num_ids": 418
    },
    {
        "number": 427,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year, month, day = re.split('-', dt)\n    return '{:02d}-{:02d}-{:04d}'.format(int(day), int(month), int(year))\n",
        "test": "assert     change_date_format('1999-02-02') == '02-02-1999'",
        "num_ids": 425
    },
    {
        "number": 428,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([4,3,2,1]) == [1,2,3,4], 'incorrect'",
        "num_ids": 906
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1])\n",
        "test": "assert     and_tuples((2, 4), (3, 4)) == (2, 4, 3, 4)",
        "num_ids": 495
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n",
        "test": "assert     parabola_directrix(1, 0, -1) == None",
        "num_ids": 496
    },
    {
        "number": 431,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n",
        "test": "assert     common_element([1, 2, 3, 4, 5, 6], [1, 2, 3, 7, 8, 9])",
        "num_ids": 417
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return height*(base1+base2)/2\n",
        "test": "assert     median_trapezium(0,1,2) == 1",
        "num_ids": 258
    },
    {
        "number": 433,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return max(arr) > number\n",
        "test": "assert     check_greater([2, 3, 6, 7, 11], 8) == True",
        "num_ids": 411
    },
    {
        "number": 434,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text) is not None:\n        return True\n    else:\n        return False\n",
        "test": "assert     re.match('a', 'a')",
        "num_ids": 269
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # print (n % 10)\n    return n%10\n",
        "test": "assert     last_Digit(100) == 0",
        "num_ids": 232
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n",
        "test": "assert     neg_nos([-1,-2,-3,-4,5]) == [-1,-2,-3,-4]",
        "num_ids": 418
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if i % 2!= 0:\n            str1 = str1[0:i] + str1[i + 1:]\n    return str1\n",
        "test": "assert     remove_odd('hello') == 'hll'",
        "num_ids": 378
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # example test_list: [(1, 2), (3, 4), (5, 6), (7, 8)]\n    pairs = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list and (test_list[j], test_list[i]) in test_list:\n                pairs += 1\n    return pairs\n",
        "test": "assert     count_bidirectional([('a', 'b'), ('c', 'd')]) == 0",
        "num_ids": 875
    },
    {
        "number": 439,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(e) for e in L))\n",
        "test": "assert     multiple_to_single([1, 2, 3, 4]) == 1234",
        "num_ids": 366
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\w+|[^\\w\\s]'\n    text = re.findall(pattern,text)\n    n = len(text)\n    i = 0\n    adverb_index = []\n    while i < n:\n        if text[i] in ['is','are','has','have','am','are','was','were','being','been','be','will','shall','will','would','should']:\n            adverb_index.append(i)\n            i+=1\n        else:\n            i+=1\n    return adverb_index\n",
        "test": "assert     find_adverb_position(text = \"The boy ran to the store. The boy was sad\") == ([0, 12, 17], [7, 8, 10])",
        "num_ids": 2587
    },
    {
        "number": 441,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n",
        "test": "assert     surfacearea_cube(1) == 6",
        "num_ids": 170
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n",
        "test": "assert     positive_count([1,1,1,1,1,1,1]) == 1",
        "num_ids": 2415
    },
    {
        "number": 443,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg=list1[0]\n    for i in list1:\n        if i < 0:\n            max_neg=i\n    return max_neg\n",
        "test": "assert     largest_neg([1,3,-1,5,7]) == -1",
        "num_ids": 463
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    res = []\n    for i in test_list:\n        res.append(i[:K])\n    return res\n",
        "test": "assert ",
        "num_ids": 458
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # write your logic here\n    list1 = []\n    list2 = []\n    for i in range(len(test_tup1)):\n        list1.append(test_tup1[i] * test_tup2[i])\n    return tuple(list1)\n",
        "test": "assert izip(index_multiplication(test_tup2, test_tup1), (10,20,30,40,50,60,70,80,90,100))",
        "num_ids": 654
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return count \ndef remove_duplicates(lst): \n    '''\n    Write a python function to remove duplicates elements in a list.\n    '''\n    return list(set(lst))\ndef print_list_elem(lst, index): \n    '''\n    Write a python function to print a particular element in a list.\n    '''\n    print (lst[index])\ndef reverse_string(string): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return string[::-1]\ndef is_palindrome(string): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    return string == reverse_string(string)\ndef is_numeric(string): \n    '''\n    Write a python function to check if a string is numeric or not.\n    '''\n    try:\n        float(string)\n        return True\n    except:\n        return False\ndef is_leap_year(year): \n    '''\n    Write a python function to check if a year is leap year or not.\n    '''\n    return (year % 4 == 0 and year % 100!= 0) or year % 400 == 0\ndef is_palindrome_sentence(string): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    return string == reverse_string(string)\ndef count_non_vowels(string): \n    '''\n    Write a python function to count non vowels in a string.\n    '''\n    return len(string) - count_Occurrence(string, \"aeiouAEIOU\")\ndef count_vowels(string): \n    '''\n    Write a python function to count vowels in a string.\n    '''\n    return count_Occurrence(string, \"aeiouAEIOU\")\ndef alphabet_position(string): \n    '''\n    Write a python function to find alphabet position of each character of a string.\n    '''\n    return ''.join(str(ord(i) - ord('a') + 1) for i in string.lower())\ndef hourglass_sum(array): \n    '''\n    Write a python function to find the hourglass sum of a 6x6 array.\n    '''\n    return (array[0][0] + array[1][1] + array[2][2] + array[3][3] + array[4][4] + array[5][5]) + (array[0][5] + array[1][4] + array[2][3] + array[3][2] + array[4][1] + array[5][0])\ndef make_absolute(num): \n    '''\n    Write a python function to return absolute value of a number.\n    '''\n    return abs(num)\ndef palindrome_permutation(string): \n    '''\n    Write a python function to check if a string is palindrome permutation or not.\n    '''\n    return Counter(string) == Counter(reverse_string(string))\ndef find_occurence(lst, num): \n    '''\n    Write a python function to find the index of a particular element in a list.\n    '''\n    return lst.index(num)\ndef is_permutation(lst1, lst2): \n    '''\n    Write a python function to check if two lists are permutations of each other.\n    '''\n    return Counter(lst1) == Counter(lst2)\ndef compute_average(lst): \n    '''\n    Write a python function to compute average of a list.\n    '''\n    return sum(lst)/float(len(lst))\ndef compute_average_of_even_numbers(lst): \n    '''\n    Write a python function to compute average of all even numbers in a list.\n    '''\n    return compute_average([i for i in lst if i%2 == 0])\ndef smallest_difference(lst1, lst2): \n    '''\n    Write a python function to find the smallest difference between 2 lists.\n    '''\n    return min([abs(i-j) for i in lst1 for j in lst2])\ndef find_missing_letter(string1, string2): \n    '''\n    Write a python function to find the missing letter in 2 strings.\n    '''\n    return [i for i in string1 if i not in string2][0]\ndef is_isogram(string): \n    '''\n    Write a python function to check if a string is isogram or not.\n    '''\n    return len(string) == len(remove_duplicates(string))\ndef factorial(n): \n    '''\n    Write a python function to find factorial of a number.\n    '''\n    return reduce(lambda x,y:x*y, range(1, n+1))\ndef is_prime(n): \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    return n > 1 and all(n%i for i in range(2,n))\ndef sum_n_numbers(n): \n    '''\n    Write a python function to find sum of n numbers.\n    '''\n    return n * (n+1) / 2\ndef max_digit(num): \n    '''\n    Write a python function to find the max digit of a number.\n    '''\n    return int(max(str(num)))\ndef max_number_of_consecutive_ones(n): \n    '''\n    Write a python function to find max number of consecutive 1's in a number.\n    '''\n    count = 0\n    while n: \n        n &= n - 1\n        count += 1\n    return count\ndef is_powerful(number): \n    '''\n    Write a python function to check if a number is powerful or not.\n    '''\n    if number == 1:\n        return False\n    elif number == 2 or number == 5:\n        return True\n    elif number%2 == 0:\n        return is_powerful(number/2)\n    elif number%5 == 0:\n        return is_powerful(number/5)\n    else:\n        return False\ndef is_perfect(number): \n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    return sum_n_numbers(number) == number\ndef is_an_abundant_number(number): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    return sum_n_numbers(number) > number\ndef is_abundant_number(number): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    return sum_n_numbers(number) > number and is_an_abundant_number(number)\ndef is_anti_abundant_number(number): \n    '''\n    Write a python function to check if a number is anti abundant or not.\n    '''\n    return sum_n_numbers(number) < number and is_an_abundant_number(number)\ndef is_antiabundant_number(number): \n    '''\n    Write a python function to check if a number is anti abundant or not.\n    '''\n    return sum_n_numbers(number) < number and is_anti_abundant_number(number)\ndef is_antidigit_number(number): \n    '''\n    Write a python function to check if a number is antidigit or not.\n    '''\n    return not any(int(i) for i in str(number))\ndef is_anti_digit_number(number): \n    '''\n    Write a python function to check if a number is antidigit or not.\n    '''\n    return not any(int(i) for i in str(number)) and is_antidigit_number(number)\ndef is_arithmatic_number(number): \n    '''\n    Write a python function to check if a number is arithmatic or not.\n    '''\n    return sum_n_number",
        "test": "assert     count_Occurrence((3,3,3,3,4), (3,3,3,4,5,6,7,8)) == 4",
        "num_ids": 2087
    },
    {
        "number": 447,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    list1 = [num ** 3 for num in nums]\n    return list1\n",
        "test": "assert     cube_nums([1,2,3,4,5]) == [1,8,27,64,125], \"Failed\"",
        "num_ids": 384
    },
    {
        "number": 448,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n",
        "test": "assert     (cal_sum(1) == 1)",
        "num_ids": 282
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[:l] for x in str]\n",
        "test": "assert     extract_string([\"this\", \"is\", \"a\", \"test\"], 2)     == [\"is\", \"a\"], \"WRONG\"",
        "num_ids": 455
    },
    {
        "number": 451,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+', '', text1)\n    return text1\n",
        "test": "assert     remove_whitespaces(\"My name is Nikhil\") == \"MynameisNikhil\"",
        "num_ids": 238
    },
    {
        "number": 452,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(2000,2000)==0",
        "num_ids": 272
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(n % i == 0):\n            if (i % 2 == 0):\n                sum = sum + i\n    return sum\n",
        "test": "assert     sumofFactors(2) == 2",
        "num_ids": 394
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r\"\\b[a-z]*z\\b\", re.IGNORECASE)\n    result = pattern.findall(text)\n    if len(result) > 0:\n        print(result)\n    else:\n        print(\"No word found\")\n",
        "test": "assert     text_match_wordz('az') is True",
        "num_ids": 2373
    },
    {
        "number": 455,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # The default value of the function is False.\n    # It should return True or False.\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(1) == True",
        "num_ids": 1997
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for item in stringlist:\n        result.append(item[::-1])\n    return result\n",
        "test": "assert     reverse_string_list([\"cat\", \"dog\", \"cow\"]) == [\"caw\", \"ow\", \"doog\"], \"test 2 failed\"",
        "num_ids": 473
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_of_min=[]\n    for i in lst:\n        if len(i)==len(lst[0]):\n            lst_of_min.append(i)\n    lst_of_min.sort()\n    return lst_of_min\n",
        "test": "assert     Find_Min([]) == []",
        "num_ids": 2807
    },
    {
        "number": 458,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert     rectangle_area(1, 2) == 2, 'wrong'",
        "num_ids": 190
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = re.findall(r'[A-Z][^A-Z]*', str1)\n    return ''.join(result)\n",
        "test": "assert     'CodingDojo' == remove_uppercase('CodingDojo')",
        "num_ids": 322
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst] \n",
        "test": "assert ",
        "num_ids": 258
    },
    {
        "number": 461,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        if (str[i].isupper()):\n            count = count + 1\n    return count\n",
        "test": "assert     upper_ctr('C') == 1",
        "num_ids": 341
    },
    {
        "number": 462,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    result = []\n    for i in range(len(list1)):\n        t = list1[i]\n        remaining = list1[:i] + list1[i+1:]\n        for c in combinations_list(remaining):\n            result.append([t] + c)\n    return result\n",
        "test": "assert     combinations_list([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        "num_ids": 2894
    },
    {
        "number": 463,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return None\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "test": "assert     max_subarray_product([0]) == 0",
        "num_ids": 714
    },
    {
        "number": 464,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    #code here\n    if len(dict.values())==1:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_value({'a':1}, 1) == True",
        "num_ids": 449
    },
    {
        "number": 465,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    newdict = {k: v for k, v in dict1.items() if v!= ''}\n    return newdict\n",
        "test": "assert     drop_empty({'A':[1,2,3], 'B':[4,5,{'C':[6,7,8]}]}) == {'A':[1,2,3], 'B':[4,5,{'C':[6,7,8]}]}",
        "num_ids": 445
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = arr[0] * arr[1]\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[j]*arr[i] > max_prod:\n                max_prod = arr[j] * arr[i]\n    return max_prod\n",
        "test": "assert ",
        "num_ids": 495
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return\n    elif len(test_tup) == 1:\n        return test_tup\n    else:\n        return test_tup[0] + test_tup[1]\n",
        "test": "assert     add_pairwise((1,2,3,4,5)) == (2,4,6,8,10)",
        "num_ids": 510
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = result * i % n\n    return result\n    \ndef find_result_s3(n, arr):\n    result = 0\n    for i in arr:\n        result = (result + i) % n\n    return result\n",
        "test": "assert     find_remainder( [2, 3, 4, 5], 10) == (2*3*4*5) % 10",
        "num_ids": 466
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # return True\n    for i in range(0,len(l)-1):\n        if (l[i+1]-l[i])!= 1:\n            return False\n    return True\n",
        "test": "assert     check_Consecutive([1,2,3,4]) == True",
        "num_ids": 482
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #initially define a function to get the intersection\n    def get_intersection(test_list1, test_list2):\n        intersection = []\n        for item1 in test_list1:\n            for item2 in test_list2:\n                if item1 == item2:\n                    intersection.append(item1)\n        return intersection\n",
        "test": "assert     tuple_intersection((1, 2, 3), (3, 2, 4)) == (2, 2)",
        "num_ids": 702
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = str1.replace(ch,newch)\n    return newstr\n",
        "test": "assert ",
        "num_ids": 274
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # my_dict = {}\n    # for key, value in dict1.items():\n    #     if value not in my_dict:\n    #         my_dict[value] = [key]\n    #     else:\n    #         my_dict[value].append(key)\n    # for key in sorted(my_dict.keys()):\n    #     print key, my_dict[key]\n    #     for item in my_dict[key]:\n    #         print item\n    #     print\n    #     \n    # print dict1.items()\n    # for key, value in dict1.items():\n    #     print key, value\n    # print dict1\n    return sorted(dict1.items(), key=lambda x:x[1])\n",
        "test": "assert     sort_counter({'a': 2, 'b': 3, 'c': 1}) == [('c', 1), ('a', 2), ('b', 3)]",
        "num_ids": 688
    },
    {
        "number": 476,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result\n",
        "test": "assert     big_sum([10, 100]) == 110",
        "num_ids": 287
    },
    {
        "number": 477,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    assert isinstance(string, str)\n    return string.lower()\n",
        "test": "assert     is_lower(\"Helloworld\") == \"helloworld\"",
        "num_ids": 224
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n",
        "test": "assert     remove_lowercase(\"ABC\") == \"ABC\"",
        "num_ids": 368
    },
    {
        "number": 479,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    temp = str(n)\n    if temp[0] == '0' :\n        return 0\n    else :\n        return int(temp[0])\n    \ndef second_Digit(n) :\n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    temp = str(n)\n    if temp[1] == '0' :\n        return 0\n    else :\n        return int(temp[1])\n",
        "test": "assert     first_Digit(5) == 5",
        "num_ids": 216
    },
    {
        "number": 554,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if (i % 2) == 1:\n            result.append(i)\n    return result\n",
        "test": "assert         (Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9])",
        "num_ids": 374
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([x**3 for x in range(1,n+1)]) - sum([x for x in range(1,n+1)])\n",
        "test": "assert     difference(1) == 0",
        "num_ids": 574
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # write code here\n    count = 0\n    for i in range(0,N-1) : \n        if ( A[i] ^ A[i+1] ) % 2 == 1 :\n            count += 1\n    return count\n",
        "test": "assert     find_Odd_Pair( [1,2,4,5,9],5) == 2",
        "num_ids": 2523
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('Hello') == 'hELLO', 'Failed'",
        "num_ids": 283
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1, d2 = len(str(n1)), len(str(n2))\n    if d1 > d2:\n        n1, n2 = n2, n1\n        d1, d2 = d2, d1\n    d1 = d1 - d2\n    return sum([int(s1!= s2) for s1, s2 in zip(str(n1), str(n2))]) + d1 * (d1 + 1) / 2\n",
        "test": "assert     digit_distance_nums(0, 0) == 0",
        "num_ids": 531
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) == 0:\n        return 0\n    max_ending_here = max_so_far = a[0]\n    for i in xrange(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "test": "assert     max_sub_array_sum([],0)     == 0",
        "num_ids": 761
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1).union(set(test_tup2)))\n    return sorted(union_list)\n",
        "test": "assert union_elements(('a', 'b'), ('a', 'c')) == ('a', 'b', 'c')",
        "num_ids": 510
    },
    {
        "number": 562,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    m=0\n    for i in lst:\n        if len(i)>m:\n            m=len(i)\n    return m\n",
        "test": "assert     Find_Max_Length([[3, 4, 7, 10], [2, 4, 6, 8], [2, 6, 9, 10], [1, 4, 7, 10], [2, 6, 9, 10], [1, 4, 7, 10]]) == 4, 'incorrect'",
        "num_ids": 726
    },
    {
        "number": 563,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    r = re.findall(r'[\\\"](.*?)[\\\"]', text)\n    return r\n",
        "test": "assert     extract_values('\"1\"') == ['1']",
        "num_ids": 2379
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count+=1 \n    return count \n",
        "test": "assert     count_Pairs([1,2,3,4,5],3) == 3",
        "num_ids": 586
    },
    {
        "number": 565,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    \n    return [char for char in word]\n",
        "test": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 394
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    nums = str(n)\n    digit_sum = 0\n    for i in nums:\n        digit_sum += int(i)\n    return digit_sum\n",
        "test": "assert     sum_digits(1) == 1",
        "num_ids": 240
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    elif list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n",
        "test": "assert     issort_list([1,2,3,4,5]) == True",
        "num_ids": 476
    },
    {
        "number": 568,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n",
        "test": "assert     empty_list(1) == [{}]",
        "num_ids": 226
    },
    {
        "number": 569,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # List of lists\n    list_of_lists = [list1[i:i + 5] for i in range(0, len(list1), 5)]\n    # Empty list to store the results\n    results = []\n    # Iterate over each sublist and sort each sublist in the list of lists\n    for sublist in list_of_lists:\n        sublist.sort()\n    # Add each sorted sublist to results list\n    for sublist in list_of_lists:\n        results.extend(sublist)\n    # Return results\n    return results\n",
        "test": "assert     [['a', 'b', 'c'], ['e', 'f', 'g'], ['h', 'i', 'j'], ['k', 'l','m']] == sort_sublists([['a', 'b', 'c'], ['e', 'f', 'g'], ['h', 'i', 'j'], ['k', 'l','m']])",
        "num_ids": 869
    },
    {
        "number": 572,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert     two_unique_nums([1,2,3,3,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 622
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product *= i\n    return product\n",
        "test": "assert     unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 410
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surf_area_cyl = pi*r**2 + 2*pi*r*h + 2*pi*h**2\n    return surf_area_cyl\n",
        "test": "assert     surfacearea_cylinder(1,2) == 12.5",
        "num_ids": 309
    },
    {
        "number": 576,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    A = A[:]\n    for item in B: \n        if item in A: \n            A.remove(item)\n        else: \n            return False\n    return True\n    \n    \ndef is_Sub_Set(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    A = A[:]\n    for item in B: \n        if item in A: \n            A.remove(item)\n        else: \n            return False\n    return True\n    \ndef is_Sub_List(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    for item in A: \n        if item not in B: \n            return False\n    return True\n",
        "test": "assert     is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True",
        "num_ids": 1366
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    a = n\n    factorial = 1\n    while (a > 0): \n        factorial = factorial * a\n        a = a - 1\n    last_digit = factorial % 10\n    return last_digit\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 343
    },
    {
        "number": 578,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "test": "assert     interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 2605
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1_len = len(test_tup1)\n    test_tup2_len = len(test_tup2)\n    i = 0\n    j = 0\n    result = []\n    while i < test_tup1_len and j < test_tup2_len:\n        if test_tup1[i]!= test_tup2[j]:\n            result.append(test_tup1[i])\n            result.append(test_tup2[j])\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return result\n",
        "test": "assert     find_dissimilar([1,2,3,4],[1,2,3,4,5]) == []",
        "num_ids": 896
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    nested_tuple = tuple(test_tuple)\n    output = tuple(filter(even_fnc, nested_tuple))\n    return output\n",
        "test": "assert     (even_ele((1, 2, 3, 4, 5, 6), lambda x: x % 2 == 0)) == (2, 4, 6)",
        "num_ids": 705
    },
    {
        "number": 581,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2)*s\n",
        "test": "assert     surface_Area(2,1) == 4",
        "num_ids": 218
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\ndef all_the_same(items):\n    '''\n    Given an iterable, return True if all the elements are the same, and False otherwise.\n    '''\n    if len(items) == 0:\n        return True\n    else:\n        x = items[0]\n        for item in items:\n            if x!= item:\n                return False\n        return True\ndef remove_adjacent(items):\n    '''\n    Given an iterable, remove adjacent duplicate values.\n    '''\n    if len(items) == 0:\n        return items\n    elif len(items) == 1:\n        return items\n    elif len(items) == 2:\n        if items[0] == items[1]:\n            return items\n        else:\n            return items\n    else:\n        i = 1\n        while i < len(items):\n            if items[i] == items[i-1]:\n                del items[i]\n            i += 1\n    return items\n",
        "test": "assert     True",
        "num_ids": 241
    },
    {
        "number": 583,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num - 1) * (num + 1) / 2\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 447
    },
    {
        "number": 584,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    results = []\n    ly_pos = []\n    pos_after_ly = []\n    ly_pattern = re.compile(r'ly$')\n    ly_matches = ly_pattern.finditer(text)\n    for match in ly_matches:\n        ly_pos.append(match.start())\n    for i in range(len(ly_pos)):\n        pos_after_ly.append(ly_pos[i]+1)\n    adverb_pattern = re.compile(r'[A-Za-z]+ly')\n    adverbs = adverb_pattern.findall(text)\n    if len(adverbs)>0:\n        print(adverbs[0])\n        print(ly_pos)\n        print(pos_after_ly)\n        for i in range(len(adverbs)):\n            if pos_after_ly[i]>ly_pos[i]:\n                results.append([adverbs[i],ly_pos[i],pos_after_ly[i]])\n    return results\n",
        "test": "assert     re.search(r'(.*)ly', 'runly')!= None,     'True'",
        "num_ids": 709
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item,price in items:\n        heapq.heappush(heap,-price)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    #print(heap)\n    return [[item,price] for item,price in items if price==-heap[0]]\n",
        "test": "assert     (expensive_items([],4) == [])",
        "num_ids": 716
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    r = []\n    for i in range(0, len(l), n):\n        r.append(l[i:i+n])\n    return r\n",
        "test": "assert     split_Arr([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]",
        "num_ids": 710
    },
    {
        "number": 587,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1,2,3,4,5,6,7,8]) == (1,2,3,4,5,6,7,8)",
        "num_ids": 269
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([1, 2, 3]) == 2",
        "num_ids": 340
    },
    {
        "number": 589,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x for x in range(a,b+1) if x**.5 == int(x**.5)]\n",
        "test": "assert     perfect_squares(4, 9) == [4, 9]",
        "num_ids": 399
    },
    {
        "number": 590,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0:\n        if y==0:\n            return (0,0)\n        elif y>0:\n            return (0,y)\n        else:\n            return (x,-y)\n    elif x>0:\n        if y==0:\n            return (x,0)\n        elif y>0:\n            return (x,y)\n        else:\n            return (x,-y)\n    else:\n        if y==0:\n            return (x,-y)\n        elif y>0:\n            return (x,-y)\n        else:\n            return (x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    if x==0:\n        if y==0:\n            return (0,0)\n        elif y>0:\n            return (0,y)\n        else:\n            return (x,-y)\n    elif x>0:\n        if y==0:\n            return (x,0)\n        elif y>0:\n            return (x,y)\n        else:\n            return (x,-y)\n    else:\n        if y==0:\n            return (x,-y)\n        elif y>0:\n            return (x,-y)\n        else:\n            return (x,y)\ndef trig_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0:\n        if y==0:\n            return (0,0)\n        elif y>0:\n            return (0,y)\n        else:\n            return (x,-y)\n    elif x>0:\n        if y==0:\n            return (x,0)\n        elif y>0:\n            return (x,y)\n        else:\n            return (x,-y)\n    else:\n        if y==0:\n            return (x,-y)\n        elif y>0:\n            return (x,-y)\n        else:\n            return (x,y)\ndef rotate(origin, point, angle):\n    \"\"\"\n    Rotate a point counterclockwise by a given angle around a given origin.\n    The angle should be given in radians.\n    \"\"\"\n    ox, oy = origin\n    px, py = point\n    qx = ox + math.cos(angle) * (px - ox) - math.sin(angle) * (py - oy)\n    qy = oy + math.sin(angle) * (px - ox) + math.cos(angle) * (py - oy)\n    return qx, qy\ndef main():\n    '''\n    Write a program to implement Sierpinski Triangle.\n    '''\n    # a = 1.0\n    # b = 1.0\n    # c = 1.0\n    a,b,c = input().split()\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    i = float(1)\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*(i**3))/6\n        y = (b*(i**2))/4\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*(i**2))/4\n        y = (b*(i**3))/6\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*(i**2))/2\n        y = (b*(i**2))/2\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x ",
        "test": "assert     polar_rect(0,0) == (0,0)",
        "num_ids": 1767
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "test": "assert     (swap_List([1,2,3,4,5]) == [5,2,3,4,1]), 'incorrect'",
        "num_ids": 427
    },
    {
        "number": 592,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff=1\n    if k>n-k:\n        k=n-k\n    for i in range(0,k):\n        coeff=coeff*(n-i)\n        coeff=coeff//(i+1)\n    return coeff\n    \ndef binomial_list(n):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_list=[]\n    for i in range(0,n+1):\n        binomial_list.append(binomial_Coeff(n,i))\n    return binomial_list\n    \nprint(binomial_list(4))",
        "test": "assert     binomial_Coeff(1,0) == 1",
        "num_ids": 490
    },
    {
        "number": 593,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return '.'.join([str(int(i)) for i in ip.split('.')])\n",
        "test": "assert     removezero_ip(\"192.168.1.1\") == \"192.168.1.1\"",
        "num_ids": 532
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    def first_even_odd(list2):\n        first_even = list2[0]\n        first_odd = list2[1]\n",
        "test": "assert ",
        "num_ids": 429
    },
    {
        "number": 595,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # the string you'll use to convert a base 10 number to base 2\n    binary_table = \"01\"\n    \n    # the string you'll use to convert a base 10 number to base 16\n    hexadecimal_table = \"0123456789ABCDEF\"\n    \n    # convert the string into a list of integers\n    str1_int_list = []\n    \n    for i in str1 :\n        str1_int_list.append(ord(i))\n    \n    # convert the string into a list of integers\n    str2_int_list = []\n    \n    for i in str2 :\n        str2_int_list.append(ord(i))\n    \n    # base 10\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n    \n    # two pointers to traverse each string\n    str1_index = 0\n    str2_index = 0\n    \n    # counter for swaps\n    count = 0\n    \n    while str1_index < len_str1 and str2_index < len_str2 :\n        \n        # check if we have a match\n        if str1_int_list[str1_index]!= str2_int_list[str2_index] :\n            \n            # if not, swap the elements and increment the count\n            str1_int_list[str1_index],str2_int_list[str2_index] = str2_int_list[str2_index],str1_int_list[str1_index]\n            count += 1\n            \n        str1_index += 1\n        str2_index += 1\n    \n    return count\n    \ndef min_Swaps_recursive(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # the string you'll use to convert a base 10 number to base 2\n    binary_table = \"01\"\n    \n    # the string you'll use to convert a base 10 number to base 16\n    hexadecimal_table = \"0123456789ABCDEF\"\n    \n    # convert the string into a list of integers\n    str1_int_list = []\n    \n    for i in str1 :\n        str1_int_list.append(ord(i))\n    \n    # convert the string into a list of integers\n    str2_int_list = []\n    \n    for i in str2 :\n        str2_int_list.append(ord(i))\n    \n    # base 10\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n    \n    # two pointers to traverse each string\n    str1_index = 0\n    str2_index = 0\n    \n    # counter for swaps\n    count = 0\n    \n    # recursive call\n    def helper(str1_index,str2_index,count) :\n        \n        # check if we have a match\n        if str1_index >= len_str1 or str2_index >= len_str2 :\n            \n            return count\n        \n        # check if we have a match\n        if str1_int_list[str1_index]!= str2_int_list[str2_index] :\n            \n            # if not, swap the elements and increment the count\n            str1_int_list[str1_index],str2_int_list[str2_index] = str2_int_list[str2_index],str1_int_list[str1_index]\n            count += 1\n            \n        str1_index += 1\n        str2_index += 1\n        \n        return helper(str1_index,str2_index,count)\n    \n    # calling the helper\n    count = helper(str1_index,str2_index,count)\n    \n    return count\n    \ndef min_Swaps_recursive_optimized(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # the string you'll use to convert a base 10 number to base 2\n    binary_table = \"01\"\n    \n    # the string you'll use to convert a base 10 number to base 16\n    hexadecimal_table = \"0123456789ABCDEF\"\n    \n    # convert the string into a list of integers\n    str1_int_list = []\n    \n    for i in str1 :\n        str1_int_list.append(ord(i))\n    \n    # convert the string into a list of integers\n    str2_int_list = []\n    \n    for i in str2 :\n        str2_int_list.append(ord(i))\n    \n    # base 10\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n    \n    # two pointers to traverse each string\n    str1_index = 0\n    str2_index = 0\n    \n    # counter for swaps\n    count = 0\n    \n    # recursive call\n    def helper(str1_index,str2_index,count) :\n        \n        # check if we have a match\n        if str1_index >= len_str1 or str2_index >= len_str2 :\n            \n            return count\n        \n        # check if we have a match\n        if str1_int_list[str1_index]!= str2_int_list[str2_index] :\n            \n            # if not, swap the elements and increment the count\n            str1_int_list[str1_index],str2_int_list[str2_index] = str2_int_list[str2_index],str1_int_list[str1_index]\n            count += 1\n            \n        str1_index += 1\n        str2_index += 1\n        \n        return helper(str1_index,str2_index,count)\n    \n    # calling the helper\n    count = helper(str1_index,str2_index,count)\n    \n    return count\n    \ndef min_Swaps_iterative(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # the string you'll use to convert a base 10 number to base 2\n    binary_table = \"01\"\n    \n    # the string you'll use to convert a base 10 number to base 16\n    hexadecimal_table = \"0123456789ABCDEF\"\n    \n    # convert the string into a list of integers\n    str1_int_list = []\n    \n    for i in str1 :\n        str1_int_list.append(ord(i))\n    \n    # convert the string into a list of integers\n    str2_int_list = []\n    \n    for i in str2 :\n        str2_int_list.append(ord(i))\n    \n    # base 10\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n    \n    # two pointers to traverse each string\n    str1_index = 0\n    str2_index = 0\n    \n    # counter for swaps\n    count = 0\n    \n    # iterative\n    while str1_index < len_str1 and str2_index < len_str2 :\n        \n        # check if we have a match\n        if str1_int_list[str1_index]!= str2_int_list[str2_index] :\n            \n            # if not, swap the elements and increment the count\n            str1_int_list[str1_index],str2_int_list[str2_index] = str2_int_list[str2_index],str1_int_list[str1_index]\n            count += 1\n            \n        str1_index += 1\n        str2_index += 1\n    \n    return count\n    \ndef min_Swaps_iterative_optimized(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # the string you'll use to convert a base 10 number to base 2\n    binary_table = \"01\"\n    \n    # the string you'll use to convert a base 10 number to bas",
        "test": "assert     min_Swaps(\"10101\",\"10101\") == 0",
        "num_ids": 534
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n",
        "test": "assert     tuple_size((2,3,4,5)) == 16",
        "num_ids": 322
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n        if j == k:\n            return arr1[i - 1]\n",
        "test": "assert     find_kth([1, 3, 4, 5, 6, 8, 10, 11, 12, 13], [4, 5, 6, 7, 8, 9], 4) == 6",
        "num_ids": 995
    },
    {
        "number": 598,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #raise NotImplementedError(\"Create a function that checks whether the given number is armstrong or not.\")\n    return sum([int(i)**len(str(number)) for i in str(number)]) == number\n",
        "test": "assert     armstrong_number(153) == True",
        "num_ids": 346
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n    total_sum = 0\n    total_average = 0\n    for i in range(n):\n        total_sum += i\n    total_average = total_sum / n\n    return total_sum, total_average\n",
        "test": "assert     sum_average(3) == (3, 2)",
        "num_ids": 384
    },
    {
        "number": 600,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Even(0) == True",
        "num_ids": 452
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for c in str1:\n        if c in char_dict:\n            return c\n        char_dict[c] = 1\n    return None\n",
        "test": "assert     first_repeated_char('mafadkafd') == 'a'",
        "num_ids": 417
    },
    {
        "number": 603,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1, n + 1) if all(str(i).count(j) <= 2 for j in '01')]\n",
        "test": "assert     get_ludic(1) == [1]",
        "num_ids": 830
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    word_list = s.split()\n    reversed_words = []\n    for word in word_list:\n        reversed_words.insert(0, word)\n    return''.join(reversed_words)\n",
        "test": "assert     reverse_words(s = \"  hello world!  \") == \"world! hello\"",
        "num_ids": 375
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(2) == True",
        "num_ids": 311
    },
    {
        "number": 606,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef radian_degree_list(degree_list):\n    return [radian_degree(degree) for degree in degree_list]\ndef convert_map_to_list(map_obj):\n    return map_obj.map_list\ndef convert_map_to_string(map_obj):\n    return ''.join(map_obj.map_list)\ndef convert_map_to_tuple(map_obj):\n    return tuple(map_obj.map_list)\ndef convert_map_to_matrix(map_obj):\n    map_list = convert_map_to_list(map_obj)\n    return [map_list[x:x + map_obj.column_count] for x in range(0, len(map_list), map_obj.column_count)]\ndef convert_map_to_string_matrix(map_obj):\n    map_matrix = convert_map_to_matrix(map_obj)\n    return '\\n'.join([''.join(line) for line in map_matrix])\ndef convert_map_to_string_list(map_obj):\n    return [''.join(line) for line in convert_map_to_matrix(map_obj)]\ndef convert_map_to_tuple_matrix(map_obj):\n    map_matrix = convert_map_to_matrix(map_obj)\n    return tuple([tuple(line) for line in map_matrix])\ndef convert_map_to_tuple_list(map_obj):\n    return [tuple(line) for line in convert_map_to_matrix(map_obj)]\ndef convert_map_to_string_tuple_matrix(map_obj):\n    map_matrix = convert_map_to_matrix(map_obj)\n    return '\\n'.join([','.join(line) for line in map_matrix])\ndef convert_map_to_string_tuple_list(map_obj):\n    return [','.join(line) for line in convert_map_to_matrix(map_obj)]\ndef convert_map_to_tuple_tuple_matrix(map_obj):\n    map_matrix = convert_map_to_matrix(map_obj)\n    return tuple([tuple(line) for line in map_matrix])\ndef convert_map_to_tuple_tuple_list(map_obj):\n    return [tuple(line) for line in convert_map_to_matrix(map_obj)]\ndef convert_map_to_string_tuple_tuple_matrix(map_obj):\n    map_matrix = convert_map_to_matrix(map_obj)\n    return '\\n'.join([','.join(line) for line in map_matrix])\ndef convert_map_to_string_tuple_tuple_list(map_obj):\n    return [','.join(line) for line in convert_map_to_matrix(map_obj)]\ndef convert_map_to_list_of_list(map_obj):\n    return [list(line) for line in convert_map_to_matrix(map_obj)]\ndef convert_map_to_list_of_string(map_obj):\n    return [''.join(line) for line in convert_map_to_list_of_list(map_obj)]\ndef convert_map_to_string_list_of_string(map_obj):\n    return [','.join(line) for line in convert_map_to_list_of_string(map_obj)]\ndef convert_map_to_list_of_tuple(map_obj):\n    return [tuple(line) for line in convert_map_to_list_of_list(map_obj)]\ndef convert_map_to_string_list_of_tuple(map_obj):\n    return [','.join(line) for line in convert_map_to_list_of_tuple(map_obj)]\ndef convert_map_to_tuple_of_list(map_obj):\n    return tuple([list(line) for line in convert_map_to_matrix(map_obj)])\ndef convert_map_to_tuple_of_string(map_obj):\n    return tuple([''.join(line) for line in convert_map_to_tuple_of_list(map_obj)])\ndef convert_map_to_string_tuple_of_string(map_obj):\n    return ','.join(convert_map_to_tuple_of_string(map_obj))\ndef convert_map_to_tuple_of_tuple(map_obj):\n    return tuple([tuple(line) for line in convert_map_to_matrix(map_obj)])\ndef convert_map_to_tuple_of_string(map_obj):\n    return tuple([','.join(line) for line in convert_map_to_tuple_of_list(map_obj)])\ndef convert_map_to_list_of_list_of_int(map_obj):\n    return [list(line) for line in convert_map_to_list_of_list(map_obj)]\ndef convert_map_to_list_of_string_of_int(map_obj):\n    return [','.join(str(x) for x in line) for line in convert_map_to_list_of_list_of_int(map_obj)]\ndef convert_map_to_string_list_of_string_of_int(map_obj):\n    return [','.join(str(x) for x in line) for line in convert_map_to_list_of_string_of_int(map_obj)]\ndef convert_map_to_list_of_tuple_of_int(map_obj):\n    return [tuple(line) for line in convert_map_to_list_of_list_of_int(map_obj)]\ndef convert_map_to_string_list_of_tuple_of_int(map_obj):\n    return [','.join(str(x) for x in line) for line in convert_map_to_list_of_tuple_of_int(map_obj)]\ndef convert_map_to_tuple_of_list_of_int(map_obj):\n    return tuple([list(line) for line in convert_map_to_matrix(map_obj)])\ndef convert_map_to_tuple_of_string_of_int(map_obj):\n    return tuple([','.join(str(x) for x in line) for line in convert_map_to_tuple_of_list_of_int(map_obj)])\ndef convert_map_to_list_of_list_of_string(map_obj):\n    return [list(line) for line in convert_map_to_list_of_list(map_obj)]\ndef convert_map_to_list_of_string_of_string(map_obj):\n    return [','.join(line) for line in convert_map_to_list_of_list_of_string(map_obj)]\ndef convert_map_to_string_list_of_string_of_string(map_obj):\n    return [','.join(line) for line in convert_map_to_list_of_string_of_string(map_obj)]\ndef convert_map_to_tuple_of_list_of_string(map_obj):\n    return tuple([','.join(line) for line in convert_map_to_list_of_list_of_string(map_obj)])\ndef convert_map_to_tuple_of_string_of_string(map_obj):\n    return tuple([','.join(line) for line in convert_map_to_list_of_string_of_string(map_obj)])\ndef convert_map_to_list_of_tuple_of_int(map_obj):\n    return [tuple(line) for line in convert_map_to_matrix(map_obj)]\ndef convert_map_to_list_of_tuple_of_string(map_obj):\n    return [','.join(line) for line in convert_map_to_list_of_tuple_of_int(map_obj)]\ndef convert_map_to_string_list_of_tuple_of_string(map_obj):\n    return ",
        "test": "assert     math.degrees(radian_degree(0)) == 0",
        "num_ids": 5524
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n",
        "test": "assert     find_literals(\"love\", r'(love)') == ('love', 0, 4)",
        "num_ids": 495
    },
    {
        "number": 608,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return ((1/float(n))*((2**n)-1))\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 407
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [x for i, x in enumerate(list1) if i!= L]\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 4, 5]",
        "num_ids": 342
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = []\n    for row in test_list:\n        max_col.append(row[N-1])\n    return max(max_col)\n",
        "test": "assert     max_of_nth([[1]], 1) == 1",
        "num_ids": 452
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [ [x[0],x[1]] for x in lst ]\n",
        "test": "assert     merge([[1, 1], [2, 2], [3, 3]]) == [[1, 1], [2, 2], [3, 3]]",
        "num_ids": 594
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n",
        "test": "assert     cummulative_sum((1, 2, 3, 4)) == (1, 3, 6, 10)",
        "num_ids": 428
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums_lst = []\n    for i in nums:\n        nums_lst.append(sum(i) / len(i))\n    return nums_lst\n",
        "test": "assert     average_tuple(",
        "num_ids": 481
    },
    {
        "number": 616,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n    else:\n        return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
        "test": "assert         (tuple_modulo((1, 2, 3), (1, 2, 3))) == (0, 0, 0)",
        "num_ids": 621
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d==0 or d==steps:\n        return 0\n",
        "test": "assert     min_Jumps(1, 0) == 0",
        "num_ids": 801
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list=[]\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]/nums2[i])\n    return div_list\n",
        "test": "assert ",
        "num_ids": 406
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    char_list = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            char_list.append(test_str[i])\n    for i in range(len(test_str)):\n        if not test_str[i].isdigit():\n            char_list.append(test_str[i])\n    return ''.join(char_list)\n",
        "test": "assert     move_num('abc123')         == '123abc', 'Wrong answer'",
        "num_ids": 610
    },
    {
        "number": 620,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # first check for the case when the given array is empty\n    if a == []:\n        return 0\n    # now sort the array, and iterate over the array to find the largest subset\n    a.sort()\n    max_size = 1\n    n = len(a)\n    # let a[i] be the first element of the list a\n    for i in range(n):\n        # check if the current element is divisible by all the elements before it\n        for j in range(i):\n            if a[i] % a[j]!= 0:\n                break\n        else:\n            # if the current element is divisible by all the elements before it, then increment the size by 1\n            max_size += 1\n    # return the size of the largest subset\n    return max_size\n",
        "test": "assert     (largest_subset([1, 3, 6, 10, 15]) == 4)",
        "num_ids": 874
    },
    {
        "number": 622,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return (arr1[0] + arr2[0])/2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1]))/2\n    if n == 3:\n        return (arr1[1] + arr2[2])/2\n    if n%2 == 1:\n        return arr1[n/2]\n    else:\n        return (arr1[n/2] + arr2[n/2-1])/2\n",
        "test": "assert     get_median([1, 2, 3], [2, 3, 4], 2) == 2",
        "num_ids": 1017
    },
    {
        "number": 623,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n",
        "test": "assert     nth_nums([1, 2, 3, 4], 2) == [1, 4, 9, 16]",
        "num_ids": 293
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = ''\n    for i in string:\n        if ord(i) >= 65 and ord(i) <= 90:\n            new_string += chr(ord(i) - 32)\n        else:\n            new_string += i\n    return new_string\n",
        "test": "assert     is_upper(\"PIZZA\") == False",
        "num_ids": 231
    },
    {
        "number": 625,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #Expected output: [5, 10, 2, 4, 6]\n    #Sample Input: [5, 10, 2, 4, 6]\n    #Sample Output: [6, 2, 4, 10, 5]\n    if len(newList)>2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert     swap_List([2,1,3]) == [3,1,2], 'wrong answer'",
        "num_ids": 594
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    s = math.pi * math.pow(r,2)/4\n    return s\n",
        "test": "assert     ( triangle_area(1) == 0.25*math.pi )",
        "num_ids": 368
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if array == []:\n        return 1\n    if array[start] == array[end-1]:\n        return find_First_Missing(array,start+1,end)\n    else:\n        return array[start] + 1\n",
        "test": "assert     find_First_Missing([4,2,1,6,7,8,3,1]) == 5",
        "num_ids": 920
    },
    {
        "number": 628,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "test": "assert     replace_spaces(\"coding\") == 'coding', replace_spaces(\"coding\")",
        "num_ids": 377
    },
    {
        "number": 629,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [num for num in list if num % 2 == 0]\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10],    \"Test 1 failed\"",
        "num_ids": 653
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] < 0 or ele[1] < 0:\n        print \"Input tuples should not have negative elements\"\n        return []\n    if ele[0] == 0:\n        return [(ele[0], ele[1] - 1), (ele[0], ele[1] + 1)]\n    if ele[1] == 0:\n        return [(ele[0] - 1, ele[1]), (ele[0] + 1, ele[1])]\n    return [(ele[0] - 1, ele[1]), (ele[0] + 1, ele[1]), (ele[0], ele[1] - 1), (ele[0], ele[1] + 1)]\n",
        "test": "assert     [(1,1), (1,2), (2,1), (2,2)] == adjac((1,1), [])",
        "num_ids": 798
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    import re\n    return re.sub(r'\\s', '_', text)\n",
        "test": "assert     replace_spaces('hi_there') == 'hi_there'",
        "num_ids": 454
    },
    {
        "number": 632,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    pos = 0\n    for i in range(n):\n        if num_list[i]!=0:\n            num_list[pos],num_list[i] = num_list[i],num_list[pos]\n            pos += 1\n    return num_list\n",
        "test": "assert     move_zero([1,0,3,7,2,0,5,8,0,6]) == [1,3,7,2,5,8,6,0,0,0]",
        "num_ids": 737
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans + arr[i] ^ arr[j]\n    return ans\n    \ndef xor_pair(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_2(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans + arr[i] ^ arr[j]\n    return ans\n    \ndef xor_pair_2(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_3(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_3(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_4(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_4(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_5(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_5(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_6(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_6(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_7(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_7(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_8(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_8(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_9(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_9(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_10(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_10(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])",
        "test": "assert     pair_xor_Sum([1,2,3,4,5,6],3) == 10",
        "num_ids": 2302
    },
    {
        "number": 635,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for val in iterable:\n        hq.heappush(h, val)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     heap_sort([3,1,5,4,2]) == [1, 2, 3, 4, 5]",
        "num_ids": 536
    },
    {
        "number": 637,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True\n",
        "test": "assert     noprofit_noloss(7, 11) == False",
        "num_ids": 408
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        return \"Invalid\"\n    wci = 35.74 + 0.6215*t + (13.12 + 0.3965*t) * (v ** 0.16)\n    return int(math.ceil(wci))\ndef cel_to_fah(c):\n    '''\n    Write a function to convert a temperature from celsius to fahrenheit rounded to the next integer.\n    '''\n    if c < -273.15:\n        return \"Invalid\"\n    fah = (c * 9 / 5) + 32\n    return int(math.ceil(fah))\ndef fah_to_cel(f):\n    '''\n    Write a function to convert a temperature from fahrenheit to celsius rounded to the next integer.\n    '''\n    if f < -459.67:\n        return \"Invalid\"\n    cel = (f - 32) * 5 / 9\n    return int(math.ceil(cel))\ndef gph_to_mph(g):\n    '''\n    Write a function to convert a speed from m/s to mph rounded to the next integer.\n    '''\n    if g < 0:\n        return \"Invalid\"\n    mph = g * 2.23694\n    return int(math.ceil(mph))\ndef mph_to_gph(m):\n    '''\n    Write a function to convert a speed from mph to m/s rounded to the next integer.\n    '''\n    if m < 0:\n        return \"Invalid\"\n    gph = m * 0.44704\n    return int(math.ceil(gph))\ndef mph_to_kph(m):\n    '''\n    Write a function to convert a speed from mph to kph rounded to the next integer.\n    '''\n    if m < 0:\n        return \"Invalid\"\n    kph = m * 1.60934\n    return int(math.ceil(kph))\ndef kph_to_mph(k):\n    '''\n    Write a function to convert a speed from kph to mph rounded to the next integer.\n    '''\n    if k < 0:\n        return \"Invalid\"\n    mph = k * 2.23694\n    return int(math.ceil(mph))\ndef c_to_f(c):\n    '''\n    Write a function to convert a temperature from celsius to fahrenheit rounded to the next integer.\n    '''\n    if c < -459.67:\n        return \"Invalid\"\n    f = (c * 9 / 5) + 32\n    return int(math.ceil(f))\ndef f_to_c(f):\n    '''\n    Write a function to convert a temperature from fahrenheit to celsius rounded to the next integer.\n    '''\n    if f < -459.67:\n        return \"Invalid\"\n    c = (f - 32) * 5 / 9\n    return int(math.ceil(c))\ndef in_to_cm(in_):\n    '''\n    Write a function to convert inches to centimeters rounded to the next integer.\n    '''\n    if in_ < 0:\n        return \"Invalid\"\n    cm = in_ * 2.54\n    return int(math.ceil(cm))\ndef cm_to_in(cm):\n    '''\n    Write a function to convert centimeters to inches rounded to the next integer.\n    '''\n    if cm < 0:\n        return \"Invalid\"\n    in_ = cm * 0.3937\n    return int(math.ceil(in_))\ndef in_to_mm(in_):\n    '''\n    Write a function to convert inches to millimeters rounded to the next integer.\n    '''\n    if in_ < 0:\n        return \"Invalid\"\n    mm = in_ * 25.4\n    return int(math.ceil(mm))\ndef mm_to_in(mm):\n    '''\n    Write a function to convert millimeters to inches rounded to the next integer.\n    '''\n    if mm < 0:\n        return \"Invalid\"\n    in_ = mm * 0.03937\n    return int(math.ceil(in_))\ndef mph_to_kph(m):\n    '''\n    Write a function to convert a speed from mph to kph rounded to the next integer.\n    '''\n    if m < 0:\n        return \"Invalid\"\n    kph = m * 1.60934\n    return int(math.ceil(kph))\ndef kph_to_mph(k):\n    '''\n    Write a function to convert a speed from kph to mph rounded to the next integer.\n    '''\n    if k < 0:\n        return \"Invalid\"\n    mph = k * 0.44704\n    return int(math.ceil(mph))\ndef f_to_k(f):\n    '''\n    Write a function to convert a temperature from fahrenheit to kelvin rounded to the next integer.\n    '''\n    if f < -459.67:\n        return \"Invalid\"\n    k = (f - 32) * 5 / 9 + 273.15\n    return int(math.ceil(k))\ndef k_to_f(k):\n    '''\n    Write a function to convert a temperature from kelvin to fahrenheit rounded to the next integer.\n    '''\n    if k < -273.15:\n        return \"Invalid\"\n    f = (k - 273.15) * 9 / 5 + 32\n    return int(math.ceil(f))\ndef f_to_c(f):\n    '''\n    Write a function to convert a temperature from fahrenheit to celsius rounded to the next integer.\n    '''\n    if f < -459.67:\n        return \"Invalid\"\n    c = (f - 32) * 5 / 9\n    return int(math.ceil(c))\ndef c_to_f(c):\n    '''\n    Write a function to convert a temperature from celsius to fahrenheit rounded to the next integer.\n    '''\n    if c < -459.67:\n        return \"Invalid\"\n    f = (c * 9 / 5) + 32\n    return int(math.ceil(f))\ndef mm_to_in(mm):\n    '''\n    Write a function to convert millimeters to inches rounded to the next integer.\n    '''\n    if mm < 0:\n        return \"Invalid\"\n    in_ = mm * 0.03937\n    return int(math.ceil(in_))\ndef in_to_mm(in_):\n    '''\n    Write a function to convert inches to millimeters rounded to the next integer.\n    '''\n    if in_ < 0:\n        return \"Invalid\"\n    mm = in_ * 25.4\n    return int(math.ceil(mm))\ndef k_to_c(k):\n    '''\n    Write a function to convert a temperature from kelvin to celsius rounded to the next integer.\n    '''\n    if k < -273.15:\n        return \"Invalid\"\n    c = k - 273.15\n    return int(math.ceil(c))\ndef c_to_k(c):\n    '''\n    Write a function to convert a temperature from celsius to kelvin rounded to the next integer.\n    '''\n    if c < -273.15:\n        return \"Invalid\"\n    k = c + 273.15\n    return int(math.ceil(k))\ndef h_to_cel(h):\n    '''\n    Write a function to convert a humidity from % to celsius rounded to the next integer.\n    '''\n    if h < 0:\n        return \"Invalid\"\n    cel = h * 0.01\n    return int(math.ceil(cel))\ndef cel_to_h(cel):\n    '''\n    Write a function to convert a humidity from celsius to % rounded to the next integer.\n    '''\n    if cel < 0:\n        return \"Invalid\"\n    h = cel * 100\n    return int(math.ceil(h))\ndef m_to_in(m):\n    '''\n    Write a function to convert a distance from meters to inches rounded to the next integer.\n    '''\n    if m < 0:\n        return \"Invalid\"\n    in_ = m * 39.37\n    return int(math.ceil(in_))\ndef in_to_m(in_):\n    '''\n    Write ",
        "test": "assert     wind_chill(70,15) == 35.0",
        "num_ids": 319
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    num = 0\n    for n in sample_names:\n        if n[0] == n[0].upper():\n            num += len(n)\n    return num\n",
        "test": "assert     sample_nam(['Abe', 'Bill', 'dave']) == 7",
        "num_ids": 457
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    p = re.compile(r'\\([^()]+\\)')\n    n = p.sub('', items)\n    return n\n",
        "test": "assert     '1,2,3,4,5,6' == remove_parenthesis('1,2,3,4,5,6')",
        "num_ids": 431
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return (n - 1) * (n - 2) + 1\n",
        "test": "assert     is_nonagonal(1) == 0",
        "num_ids": 283
    },
    {
        "number": 643,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    start = 0\n    end = len(text) - 1\n    while start < end:\n        if not text[start] == 'z' and not text[end] == 'z':\n            return False\n        start += 1\n        end -= 1\n    return True\n",
        "test": "assert     text_match_wordz_middle('z') == True",
        "num_ids": 2431
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k] + list(reversed(input[k:]))\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5], 0) == [5,4,3,2,1], 'Failed'",
        "num_ids": 663
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #print test_tup, test_dict\n    #print type(test_tup), type(test_dict)\n    new_tup = (test_tup[0] + 1, test_tup[1] + 1, test_dict)\n    return new_tup\n",
        "test": "assert     add_dict_to_tuple(('cat', 'dog', 'fish', {}), {'fish': 'turtle'}) == ('cat', 'dog', 'fish', {'fish': 'turtle'})",
        "num_ids": 651
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0 or len(cost[0]) == 0:\n        return 0\n",
        "test": "assert         maxAverageOfPath([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10], [10, 11, 12, 13]]) == 11",
        "num_ids": 585
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    out = {}\n    for name,val in students.items():\n        if val[0] > h and val[1] > w:\n            out[name] = val\n    return out\n",
        "test": "assert filter_data(students,1.4,70) == {'Ann': (1.6, 70), 'Bob': (1.3, 76), 'Calvin': (1.5, 75)}",
        "num_ids": 1077
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i,n1 in enumerate(nums1):\n        for j,n2 in enumerate(nums2):\n            if n1 == n2 and i!=j:\n                count += 1\n    return count\n",
        "test": "assert     count_same_pair([1,1,2],[2,1,2]) == 2",
        "num_ids": 647
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert isinstance(base, int)\n    assert isinstance(power, int)\n    if power < 0:\n        return None\n    result = 0\n    for i in str(base ** power):\n        result += int(i)\n    return result\n",
        "test": "assert     power_base_sum(2, 3) ==     8",
        "num_ids": 316
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\"([^\"]*)\"',text1)\n",
        "test": "assert     extract_quotation('\"I love you forever\"') == ['I love you forever']",
        "num_ids": 971
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # test_tup = tuple(map(int, test_tup))\n    n = len(test_tup)\n    out = ()\n    for i in range(n-1):\n        out += (test_tup[i],)\n    out += (test_tup[n-1],)\n    return out\n",
        "test": "assert     (multiply_elements( (10,3,2) ) == (10,3,2))",
        "num_ids": 549
    },
    {
        "number": 728,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert     sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 487
    },
    {
        "number": 730,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = list(set(nums))\n    # print(nums)\n    if len(nums) < 2:\n        return nums\n    nums.sort()\n    # print(nums)\n    i = 1\n    while i < len(nums):\n        if nums[i-1] == nums[i]:\n            nums.pop(i)\n        else:\n            i += 1\n    # print(nums)\n    return nums\n",
        "test": "assert     consecutive_duplicates([2, 4, 6, 8, 10, 10, 10, 14, 14]) == [2, 4, 6, 8, 10, 14]",
        "num_ids": 660
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Use the fact that for a cone, the lateral surface area of a cone is half the area of the base plus the area of the\n    # circle that is inscribed in the base.\n    a = math.pi * (r**2)\n    b = math.pi * (r**2)\n    s = (a/2) + b\n    return s\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    # Use the fact that for a cylinder, the lateral surface area of a cylinder is 2*pi*r*(r+h)\n    s = 2 * math.pi * r * (r + h)\n    return s\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    # Use the fact that for a sphere, the lateral surface area of a sphere is 4*pi*(r**2)\n    s = 4 * math.pi * (r**2)\n    return s\n",
        "test": "assert     (lateralsurface_cone(0,5) == 0)",
        "num_ids": 387
    },
    {
        "number": 732,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub('[\\s,\\.]','',text)\n    return new_text\n",
        "test": "assert     replace_specialchar('') == ''",
        "num_ids": 376
    },
    {
        "number": 733,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first_occurrence = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n        elif A[i] > x:\n            break\n    return -1\n",
        "test": "assert     find_first_occurrence([1,2,3,3,3,3,4,5], 6) == -1",
        "num_ids": 806
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            lst = arr[i:j+1]\n            total += lst[0] * lst[len(lst)-1]\n    return total\n",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 748
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ ((n & 1) << 1)\n    n = n ^ ((n & 2) << 2)\n    n = n ^ ((n & 4) << 4)\n    n = n ^ ((n & 8) << 8)\n    n = n ^ ((n & 16) << 16)\n    return n\n",
        "test": "assert     set_middle_bits(256) == 256, \"wrong result for 256\"",
        "num_ids": 360
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return i\n    elif a[i-1] <= x:\n        return i\n    elif a[i] > x:\n        return i-1\n    else:\n        return i\n",
        "test": "assert     left_insertion([1, 2, 3, 4, 5, 6, 7], 4) == 3",
        "num_ids": 405
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string): \n        return True\n    return False\n",
        "test": "assert     check_str('qweerty') == False",
        "num_ids": 2323
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1.0/n) * (n-1) + geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 256
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # base case \n    if n==1: \n        return 0 \n    else: \n        # Recursive function call \n        return 1 + find_Index(n-1) \n",
        "test": "assert     find_Index(4) == 3, \"find_Index(4) should be 3\"",
        "num_ids": 387
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup,test_tup[1:]))\n",
        "test": "assert     tuple_to_dict(('a', 'b', 'c')) == {'a': 'b', 'b': 'c'}",
        "num_ids": 520
    },
    {
        "number": 741,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = s[0]\n    for i in s :\n        if i!= char :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same(\"A\")     == True",
        "num_ids": 384
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 2 / 12\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return area_tetrahedron(side) * side\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side ** 2\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side ** 3\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    return (5*side**2 / 4) * math.sqrt(5)\ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return area_dodecahedron(side) * side\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of a octahedron.\n    '''\n    return (7 * side**2 / 4) * math.sqrt(7)\ndef volume_octahedron(side):\n    '''\n    Write a function to caluclate the volume of a octahedron.\n    '''\n    return area_octahedron(side) * side\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of a icosahedron.\n    '''\n    return (5 * side**2 / 4) * math.sqrt(5/2)\ndef volume_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of a icosahedron.\n    '''\n    return area_icosahedron(side) * side\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    return (5 * side**2 / 4) * math.sqrt(5/3)\ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return area_dodecahedron(side) * side\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 2 / 2\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return area_tetrahedron(side) * side\ndef area_cuboctahedron(side):\n    '''\n    Write a function to caluclate the area of a cuboctahedron.\n    '''\n    return (7 * side**2 / 4) * math.sqrt(7/3)\ndef volume_cuboctahedron(side):\n    '''\n    Write a function to caluclate the volume of a cuboctahedron.\n    '''\n    return area_cuboctahedron(side) * side\ndef area_octodecahedron(side):\n    '''\n    Write a function to caluclate the area of an octodecahedron.\n    '''\n    return (7 * side**2 / 4) * math.sqrt(7/3)\ndef volume_octodecahedron(side):\n    '''\n    Write a function to caluclate the volume of an octodecahedron.\n    '''\n    return area_octodecahedron(side) * side\ndef area_icosodecahedron(side):\n    '''\n    Write a function to caluclate the area of an icosodecahedron.\n    '''\n    return (5 * side**2 / 4) * math.sqrt(5/3)\ndef volume_icosodecahedron(side):\n    '''\n    Write a function to caluclate the volume of an icosodecahedron.\n    '''\n    return area_icosodecahedron(side) * side\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    return (5 * side**2 / 4) * math.sqrt(5/3)\ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return area_dodecahedron(side) * side\ndef area_truncated_cone(side, h):\n    '''\n    Write a function to caluclate the area of a truncated cone.\n    '''\n    return (math.pi * side**2 * h) / 3\ndef volume_truncated_cone(side, h):\n    '''\n    Write a function to caluclate the volume of a truncated cone.\n    '''\n    return area_truncated_cone(side, h) * side\ndef area_ellipsoidal_cone(side, h):\n    '''\n    Write a function to caluclate the area of an ellipsoidal cone.\n    '''\n    return (math.pi * side**2 * h) / 2\ndef volume_ellipsoidal_cone(side, h):\n    '''\n    Write a function to caluclate the volume of an ellipsoidal cone.\n    '''\n    return area_ellipsoidal_cone(side, h) * side\ndef area_conical_cone(side, h):\n    '''\n    Write a function to caluclate the area of a conical cone.\n    '''\n    return (math.pi * side**2 * h) / 4\ndef volume_conical_cone(side, h):\n    '''\n    Write a function to caluclate the volume of a conical cone.\n    '''\n    return area_conical_cone(side, h) * side\ndef area_conic_cylinder(side, h):\n    '''\n    Write a function to caluclate the area of a conic cylinder.\n    '''\n    return (math.pi * side**2)\ndef volume_conic_cylinder(side, h):\n    '''\n    Write a function to caluclate the volume of a conic cylinder.\n    '''\n    return area_conic_cylinder(side, h) * side\ndef area_prism(side, h):\n    '''\n    Write a function to caluclate the area of a prism.\n    '''\n    return (side * h)\ndef volume_prism(side, h):\n    '''\n    Write a function to caluclate the volume of a prism.\n    '''\n    return area_prism(side, h) * side\ndef area_pyramid(side, h):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    return (side * h)\ndef volume_pyramid(side, h):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return area_pyramid(side, h) * side\ndef area_cone(side, h):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return (math.pi * side**2 * h) / 2\ndef volume_cone(side, h):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return area_cone(side, h) * side\ndef area_tube(side, h):\n    '''\n    Write a function to caluclate the area of a tube.\n    '''\n    return (math.pi * side**2 * h) / 2\ndef volume_tube(side, h):\n    '''\n    Write a function to caluclate the volume of a tube.\n    '''\n    return area_tube(side, h) * side\ndef area_parabola(side, h):\n    '''\n    Write a function to caluclate the area of a parabola.\n    '''\n    return (math.pi * side**2 * h) ",
        "test": "assert     area_tetrahedron(2) == 2",
        "num_ids": 328
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1,2,3,4,5,6,7,8], 4) == [5,6,7,8,1,2,3,4]",
        "num_ids": 413
    },
    {
        "number": 744,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val == None:\n            return True\n    return False\n",
        "test": "assert         check_none((2,3)) == False",
        "num_ids": 286
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # We don't want to include 0 so we set the startnum to 1 and endnum to max+1\n    startnum = 1\n    endnum = (endnum - 1)\n    lst = range(startnum, endnum+1)\n    lst2 = []\n    lst3 = []\n    # Set up the function to filter out anything that's not divisible by the digits in the number\n    for num in lst:\n        digits = [int(i) for i in str(num)]\n        digits = list(filter(lambda x: x!= 0, digits))\n        if num % sum(digits) == 0:\n            lst2.append(num)\n    lst3 = [str(x) for x in lst2]\n    return lst3\n",
        "test": "assert     divisible_by_digits(20,21) == [20, 21]",
        "num_ids": 633
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r**2) * (a/360)\n        return area\n",
        "test": "assert     0 == sector_area(0,0)",
        "num_ids": 356
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]\n",
        "test": "assert     lcs_of_three(\"abc\", \"abc\", \"abc\") == \"abc\"",
        "num_ids": 1211
    },
    {
        "number": 748,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.strip()\n    l1 = re.findall(r'[A-Z][^A-Z]*', str1)\n    new_str =''.join(l1)\n    return new_str\n    #str1 = str1.strip()\n    #l1 = re.findall(r'[A-Z][^A-Z]*', str1)\n    #new_str =''.join(l1)\n    #return new_str\n",
        "test": "assert     capital_words_spaces(\"Python\") == \"Python\"",
        "num_ids": 655
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(i) for i in nums_str]\n    nums.sort()\n    return [str(i) for i in nums]\n",
        "test": "assert     sort_numeric_strings([\"1\", \"2\", \"3\"]) == [\"1\", \"2\", \"3\"]",
        "num_ids": 574
    },
    {
        "number": 750,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert         ( add_tuple(['a','b'], ('a','b')) == ['a','b',('a','b')] )",
        "num_ids": 368
    },
    {
        "number": 751,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] < arr[i // 2]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n",
        "test": "assert     check_min_heap_helper([1,2,3,4,5], 0) == True",
        "num_ids": 535
    },
    {
        "number": 752,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a = 0\n    b = 1\n    c = 1\n    \n    for i in range(n-1):\n        c = a + b\n        a = b\n        b = c\n    \n    return c\n    \n    \ndef longest_common_sequence(s1, s2):\n    '''\n    Write a function to find the longest common sequence between two strings. https://www.geeksforgeeks.org/longest-common-subsequence-dp-4/\n    '''\n    \n    m = len(s1)\n    n = len(s2)\n    \n    table = [[0 for x in range(n+1)] for x in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    \n    return table[m][n]\n    \n    \ndef count_numbers_in_range(n, A):\n    '''\n    Write a function to count the numbers that are multiples of 3 and between 1 and n (both inclusive). https://www.geeksforgeeks.org/count-numbers-range-3-n/\n    '''\n    \n    count = 0\n    \n    for i in range(n+1):\n        if i % 3 == 0:\n            count += 1\n    \n    return count\n    \n    \ndef can_reach_end(A):\n    '''\n    Write a function to check if you can reach the end of the array A using only one jump. https://www.geeksforgeeks.org/can-reach-end-of-array-using-only-one-jump/\n    '''\n    \n    if A[0] == 0:\n        return False\n    \n    steps = 0\n    i = 0\n    \n    while i < len(A) and i < steps:\n        if i == steps:\n            break\n        \n        if i < len(A)-1:\n            if A[i+1] == 0:\n                steps += 1\n                i += 1\n            else:\n                i += 1\n        elif i == len(A)-1:\n            if A[i] == 0:\n                steps += 1\n            else:\n                i += 1\n                break\n        \n    return i == steps\n    \n    \ndef longest_common_prefix(str1, str2):\n    '''\n    Write a function to find the longest common prefix of two strings. https://www.geeksforgeeks.org/longest-common-prefix-of-two-strings/\n    '''\n    \n    if not str1 or not str2:\n        return 0\n    \n    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]:\n        i += 1\n    \n    return i\n    \n    \ndef find_minimum_cost_to_reach_target(A, target):\n    '''\n    Write a function to find the minimum cost to reach a target position. https://www.geeksforgeeks.org/minimum-cost-to-reach-target-position-in-a-matrix/\n    '''\n    \n    rows = len(A)\n    cols = len(A[0])\n    \n    min_costs = [[0 for i in range(cols)] for j in range(rows)]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                min_costs[i][j] = A[i][j]\n            elif i == 0:\n                min_costs[i][j] = min_costs[i][j-1] + A[i][j]\n            elif j == 0:\n                min_costs[i][j] = min_costs[i-1][j] + A[i][j]\n            else:\n                min_costs[i][j] = min(min_costs[i-1][j], min_costs[i][j-1]) + A[i][j]\n            \n            if min_costs[i][j] >= target:\n                return min_costs[i][j]\n    \n    return min_costs[rows-1][cols-1]\n    \n    \ndef count_unique_paths(A):\n    '''\n    Write a function to count all possible unique paths from top left to bottom right of a m*n matrix. https://www.geeksforgeeks.org/count-all-possible-unique-paths-from-top-left-to-bottom-right-of-a-m*n-matrix/\n    '''\n    \n    m = len(A)\n    n = len(A[0])\n    \n    table = [[0 for x in range(n)] for x in range(m)]\n    \n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                table[i][j] = 1\n            elif i == 0:\n                table[i][j] = table[i][j-1]\n            elif j == 0:\n                table[i][j] = table[i-1][j]\n            else:\n                table[i][j] = table[i-1][j] + table[i][j-1]\n    \n    return table[m-1][n-1]\n    \n    \ndef minimum_cost_to_connect_points(A, B):\n    '''\n    Write a function to find the minimum cost to connect the points of a line segment. https://www.geeksforgeeks.org/minimum-cost-to-connect-points-of-a-line-segment/\n    '''\n    \n    if not A or not B:\n        return 0\n    \n    costs = [[0 for x in range(len(A))] for y in range(len(B))]\n    \n    for i in range(len(A)):\n        for j in range(len(B)):\n            costs[j][i] = min(costs[j-1][i]+abs(A[i]-B[j]), costs[j][i-1]+abs(A[i]-B[j]))\n    \n    return costs[len(B)-1][len(A)-1]\n    \n    \ndef modify_string(str1):\n    '''\n    Write a function to modify a string. https://www.geeksforgeeks.org/modify-string/\n    '''\n    \n    if not str1:\n        return 0\n    \n    count = 0\n    \n    for i in range(len(str1)):\n        if str1[i]!= str1[len(str1)-i-1]:\n            count += 1\n    \n    return count\n    \n    \ndef find_smallest_integer(A):\n    '''\n    Write a function to find the smallest integer in an array. https://www.geeksforgeeks.org/find-smallest-integer-in-an-array/\n    '''\n    \n    if not A:\n        return None\n    \n    A = sorted(A)\n    \n    return A[0]\n    \n    \ndef beautiful_arrangement(A):\n    '''\n    Write a function to check if a given sequence is beautiful. https://www.geeksforgeeks.org/check-if-a-given-sequence-is-beautiful/\n    '''\n    \n    if len(A) <= 3:\n        return True\n    \n    for i in range(2, len(A)):\n        if A[i] - A[i-1]!= A[i-1] - A[i-2]:\n            return False\n    \n    return True\n    \n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 472
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return\n    \n    #sort the list by the first value of each tuple\n    sorted_list = sorted(test_list, key = lambda tup: tup[0])\n",
        "test": "assert     min_k(((1,2,3,4),(2,3,4,5),(3,4,5,6)),1) == (1,2,3,4)",
        "num_ids": 532
    },
    {
        "number": 754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    indices = [l1.index(i) for i in l1 if i in l2]\n    indices = [indices[i] for i in range(len(indices)) if indices[i] == indices[i-1]]\n    indices = [l3.index(i) for i in l3 if i in l2]\n    indices = [indices[i] for i in range(len(indices)) if indices[i] == indices[i-1]]\n    return indices\n",
        "test": "assert     extract_index_list([1,1,2,2,3,4,4,5,6,7,7,8,9,9,9],",
        "num_ids": 968
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    minimum_number = min(numbers)\n    new_list = []\n    for x in numbers:\n        if x!= minimum_number:\n            new_list.append(x)\n    return min(new_list)\n",
        "test": "assert     second_smallest([1, 2, 5, 6, 5, 2]) == 2",
        "num_ids": 513
    },
    {
        "number": 756,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    return True if re.search(pattern, text) is not None else False\n",
        "test": "assert     text_match_zero_one('ababab') == True",
        "num_ids": 310
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #count = 0\n    #for x in range(len(test_list)):\n    #    if test_list[x][::-1] in test_list:\n    #        count += 1\n    #return count\n    return len([x for x in test_list if x[::-1] in test_list])\n",
        "test": "assert     count_reverse_pairs(['abc', 'cba', 'abc']) == 3, \"failed test 2\"",
        "num_ids": 678
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in list1:\n        sub = tuple(i)\n        if sub in d:\n            d[sub] += 1\n        else:\n            d[sub] = 1\n    return d\n",
        "test": "assert     unique_sublists([1, 1, 1, 2, 3, 3, 3, 3, 4]) == \\",
        "num_ids": 764
    },
    {
        "number": 759,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if num.count('.') > 1:\n        return False\n    if 'e' in num:\n        return False\n    for i in num:\n        if i not in '1234567890':\n            return False\n    return True\n",
        "test": "assert     is_decimal('0')",
        "num_ids": 312
    },
    {
        "number": 760,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # first, we will convert the list to a set, as sets are faster for lookup\n    set_arr = set(arr)\n    \n    # second, we will convert the set back to a list, this will contain the unique elements\n    unique_arr = list(set_arr)\n    \n    # we will check if the list has only one element\n    if len(unique_arr) == 1:\n        return True\n    else:\n        return False\n        ",
        "test": "assert     unique_Element([1, 2, 3, 4, 3]) == False",
        "num_ids": 493
    },
    {
        "number": 762,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return True\n    if monthnum3 == 2:\n        return True\n    if monthnum3 == 3:\n        return True\n    if monthnum3 == 4:\n        return True\n    if monthnum3 == 5:\n        return True\n    if monthnum3 == 6:\n        return True\n    if monthnum3 == 7:\n        return True\n    if monthnum3 == 8:\n        return True\n    if monthnum3 == 9:\n        return True\n    if monthnum3 == 10:\n        return True\n    if monthnum3 == 11:\n        return True\n    if monthnum3 == 12:\n        return True\n    if monthnum3 == 13:\n        return False\n    if monthnum3 == 14:\n        return False\n    if monthnum3 == 15:\n        return False\n    if monthnum3 == 16:\n        return False\n    if monthnum3 == 17:\n        return False\n    if monthnum3 == 18:\n        return False\n    if monthnum3 == 19:\n        return False\n    if monthnum3 == 20:\n        return False\n    if monthnum3 == 21:\n        return False\n    if monthnum3 == 22:\n        return False\n    if monthnum3 == 23:\n        return False\n    if monthnum3 == 24:\n        return False\n    if monthnum3 == 25:\n        return False\n    if monthnum3 == 26:\n        return False\n    if monthnum3 == 27:\n        return False\n    if monthnum3 == 28:\n        return False\n    if monthnum3 == 29:\n        return False\n    if monthnum3 == 30:\n        return True\n    if monthnum3 == 31:\n        return False\n",
        "test": "assert     check_monthnumber_number(3) == True, \"Test 1 failed\"",
        "num_ids": 843
    },
    {
        "number": 763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    arr_len = len(arr)\n    max_range = arr_len-1\n",
        "test": "assert     find_min_diff([1,2,3,4,5],4) == 4",
        "num_ids": 610
    },
    {
        "number": 764,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr('5') == 1",
        "num_ids": 311
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #Cannot have more than 2 digits\n    if n>9:\n        return \"Please give a number less than or equal to 9\"\n    #0 is not a polite number\n    if n==0:\n        return 0\n    #Calculate the length of number\n    l=len(str(n))\n    #Store the count of zeros\n    c=0\n    #Multiply the factorial of n\n    for i in range(1,n+1):\n        fact=math.factorial(i)\n        c+=fact//math.factorial(i)%10\n        #1 is a polite number\n        if i==1:\n            return 1\n        #If c is equal to l, number is polite\n        if c==l:\n            return 1\n    return 0\n",
        "test": "assert     is_polite(1) == True",
        "num_ids": 710
    },
    {
        "number": 766,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]\n",
        "test": "assert     pair_wise([1,2,3,4,5,6,7]) == [[1,2], [2,3], [3,4], [4,5], [5,6], [6,7]]",
        "num_ids": 514
    },
    {
        "number": 767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return len(arr) * (len(arr) - 1) // 2\n",
        "test": "assert ",
        "num_ids": 464
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [item for item in li1 + li2 if item not in li1 or item not in li2]\n",
        "test": "assert     [] == Diff([], [])",
        "num_ids": 363
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0: \n        return 0\n    else:\n        return (n**4) + odd_num_sum(n-1)\n",
        "test": "assert     odd_num_sum(100) == 2258575",
        "num_ids": 2267
    },
    {
        "number": 771,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = []\n    for i in exp:\n        if i in ['(','{','[']:\n            s.append(i)\n        else:\n            if not s:\n                return False\n            else:\n                if i == ')':\n                    if s[-1]!= '(':\n                        return False\n                    s.pop()\n                if i == '}':\n                    if s[-1]!= '{':\n                        return False\n                    s.pop()\n                if i == ']':\n                    if s[-1]!= '[':\n                        return False\n                    s.pop()\n    if not s:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_expression('((a+b)*(c+d))')     == True",
        "num_ids": 657
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_list = test_str.split(' ')\n    for i in range(len(str_list)):\n        if len(str_list[i]) == K:\n            str_list[i] = ''\n    \n    for i in range(len(str_list)):\n        if str_list[i] == '':\n            str_list.remove('')\n    \n    for i in range(len(str_list)):\n        if str_list[i] == '':\n            str_list.remove('')\n    \n    return''.join(str_list)\n",
        "test": "assert     remove_length('aaaaaaaaa', 1) == 'aaaaaaaaa'",
        "num_ids": 554
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index_list = []\n    for i in range(0, len(text)):\n        if text[i:].startswith(pattern):\n            index_list.append(i)\n    if index_list:\n        print(\"{0} is found at {1}\".format(pattern, index_list))\n    else:\n        print(\"{0} is not found\".format(pattern))\n        ",
        "test": "assert     occurance_substring('','') == None",
        "num_ids": 2470
    },
    {
        "number": 775,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) % 2 == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     odd_position([1,2,3,4,5,6]) == False",
        "num_ids": 337
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    return sum(test_str[i-1] in vowels and test_str[i+1] in vowels for i in range(1, len(test_str)-1))\n    \n",
        "test": "assert     count_vowels('ab') == 0",
        "num_ids": 2654
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = set()\n    sum = 0\n    for i in arr:\n        if i not in s:\n            s.add(i)\n            sum += i\n    return sum\n",
        "test": "assert     find_sum([1,2,3,4,5]) == 15, 'find_sum([1,2,3,4,5]) should be 15'",
        "num_ids": 537
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) == 0:\n        return list1\n    for i,j in groupby(list1):\n        list1[list1.index(i):list1.index(j)] = [list(j)]\n    return list1\n",
        "test": "assert     pack_consecutive_duplicates([1,2,2,2,3,4,4,5,5])         == [1, [2,2,2], 3, [4,4,5], 5]",
        "num_ids": 981
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    for item in list1:\n        if type(item) == list:\n            tuple_item = tuple(item)\n            if tuple_item in list_dict:\n                list_dict[tuple_item] += 1\n            else:\n                list_dict[tuple_item] = 1\n    return list_dict\n",
        "test": "assert     unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {(1, 2, 3): 3}",
        "num_ids": 914
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    list_len = len(test_list)\n    return list(combinations(test_list,2))\n",
        "test": "assert     find_combinations([(1,2),(2,3),(3,4)]) ==     [(1,1),(1,2),(1,3),(2,2),(3,3)]",
        "num_ids": 2466
    },
    {
        "number": 781,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 :\n        return 1\n    else :\n        divisors = 0\n        for i in range(1,int(math.sqrt(n))+1) :\n            if n%i == 0 :\n                divisors += 2\n        if divisors%2 == 0 :\n            return True\n        else :\n            return False\ndef gcd(a,b) :\n    '''\n    Write a python function to return the GCD of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-20.php\n    '''\n    if a==0:\n        return b\n    elif b==0:\n        return a\n    else :\n        return gcd(b,a%b)\n",
        "test": "assert     count_divisors(2) == 1         # divisors = 2",
        "num_ids": 1359
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum(arr)\n",
        "test": "assert     odd_length_sum([1, 2, 3, 4, 5]) == 15, odd_length_sum([1, 2, 3, 4, 5])",
        "num_ids": 480
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0,0,0.0)",
        "num_ids": 914
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_even = 1\n    product_odd = 1\n    for num in list1:\n        if num%2 == 0:\n            product_even = product_even*num\n        else:\n            product_odd = product_odd*num\n    return [product_even, product_odd]\n",
        "test": "assert     mul_even_odd([3, 2, 4, 6, 7]) == 18",
        "num_ids": 584
    },
    {
        "number": 785,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = []\n    for i in test_str:\n        if i!= ',':\n            str_list.append(i)\n    str_list.remove('(')\n    str_list.remove(')')\n    str_list.remove(' ')\n    res = []\n    for i in str_list:\n        res.append(int(i))\n    return tuple(res)\n",
        "test": "assert     tuple_str_int('(1, 2)') == (1, 2)",
        "num_ids": 559
    },
    {
        "number": 786,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    bisect.insort_right(a, x)\n    return a.index(x)\n",
        "test": "assert         right_insertion([1, 3, 5, 6, 9], 3) == 1",
        "num_ids": 2336
    },
    {
        "number": 787,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = 'a.*b+'\n    if re.match(pattern,text):\n        print('Match')\n    else:\n        print('No match')\n",
        "test": "assert     text_match_three(\"\") == None, \"String is empty\"",
        "num_ids": 587
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = ()\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            test_tuple += (test_list[i],)\n        else:\n            test_tuple += (test_str[i],)\n    return test_tuple\n",
        "test": "assert     new_tuple(['a', 'b', 'c'], 'ab') == ('a', 'b', 'c')",
        "num_ids": 481
    },
    {
        "number": 790,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    def check(nums,i):\n        #checking whether the value at index i is even\n        return nums[i] % 2 == 0\n    #checking whether the length of the list is even\n    if len(nums) % 2 == 0:\n        #checking every even index\n        for i in range(0,len(nums),2):\n            if not check(nums,i):\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert     not even_position([1, 3, 5, 7])",
        "num_ids": 471
    },
    {
        "number": 791,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for val in test_tup:\n        if not isinstance(val, tuple):\n            new_tup = new_tup + (val,)\n        else:\n            new_tup = new_tup + remove_nested(val)\n    return new_tup\n",
        "test": "assert     remove_nested(()) == ()",
        "num_ids": 483
    },
    {
        "number": 792,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if isinstance(x, list):\n            count += 1\n    return count\n",
        "test": "assert     count_list([]) == 0, \"error\"",
        "num_ids": 396
    },
    {
        "number": 793,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if arr[0] == x:\n        return 0\n    if arr[-1] == x:\n        return len(arr) - 1\n    return last(arr[1:],x)\n",
        "test": "assert last([1,2,3,4,5,6],7) == -1",
        "num_ids": 715
    },
    {
        "number": 794,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_starta_endb('aab') == True",
        "num_ids": 346
    },
    {
        "number": 796,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "test": "assert     return_sum({'a': 1, 'b': 2, 'c': 3}) == 6, return_sum({'a': 1, 'b': 2, 'c': 3})",
        "num_ids": 331
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd_sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            odd_sum += i\n    return odd_sum\n    \ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    even_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            even_sum += i\n    return even_sum\n",
        "test": "assert     (sum_odd(0) == 0)",
        "num_ids": 237
    },
    {
        "number": 798,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    tot=0\n    for i in range(len(arr)):\n        tot+=arr[i]\n    return tot\n",
        "test": "assert     _sum([1,2,3,4,5]) == 15",
        "num_ids": 244
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d | n >> (32-d)) & 0xffffffff\ndef ror(x, n):\n    return ((x >> n) | (x << (32-n))) & 0xffffffff\ndef p64(s):\n    return struct.pack(\"<Q\",s)\ndef k(a,b,c,d):\n    return (b & c) | ((~b) & d)\ndef xor(a,b):\n    return a^b\ndef left_rotate(n,d):\n    return (n << d | n >> (32-d)) & 0xffffffff\ndef ch(s,pos):\n    return ((s >> (8*pos)) & 0x000000ff)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef shuffle(a,b,c):\n    temp = a & b\n    a = b\n    b = temp\n    a = (a << 7) & 0xffffffff\n    a = a ^ c\n    b = (b << 7) & 0xffffffff\n    b = b ^ c\n    a = (a << 7) & 0xffffffff\n    return (a,b)\ndef hash(data):\n    return sha1(sha1(data).digest()).digest()\ndef sha1(data):\n    return sha.new(data)\ndef chmul(a,b):\n    return (a*b)\ndef chmul(a,b):\n    return (a*b)\ndef chmul(a,b):\n    return (a*b)\ndef chmul(a,b):\n    return (a*b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chxor(a,b):\n    return (a^b)\ndef chmul(a,b):\n    return (a*b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef shuffle(a,b,c):\n    temp = a & b\n    a = b\n    b = temp\n    a = (a << 7) & 0xffffffff\n    a = a ^ c\n    b = (b << 7) & 0xffffffff\n    b = b ^ c\n    a = (a << 7) & 0xffffffff\n    return (a,b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef shuffle(a,b,c):\n    temp = a & b\n    a = b\n    b = temp\n    a = (a << 7) & 0xffffffff\n    a = a ^ c\n    b = (b << 7) & 0xffffffff\n    b = b ^ c\n    a = (a << 7) & 0xffffffff\n    return (a,b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chmul(a,b):\n    return (a*b)\ndef chmul(a,b):\n    return (a*b)\ndef chmul(a,b):\n    return (a*b)\ndef chmul(a,b):\n    return (a*b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef cadd(a,b):\n    return (a+b)\ndef chmul(a,b):\n    return (a*b)\ndef chxor(a,b):\n    return (a^b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef shuffle(a,b,c):\n    temp = a & b\n    a = b\n    b = temp\n    a = (a << 7) & 0xffffffff\n    a = a ^ c\n    b = (b << 7) & 0xffffffff\n    b = b ^ c\n    a = (a << 7) & 0xffffffff\n    return (a,b)\ndef cadd(a,b):\n    return (a+b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef shuffle(a,b,c):\n    temp = a & b\n    a = b\n    b = temp\n    a = (a << 7) & 0xffffffff\n    a = a ^ c\n    b = (b << 7) & 0xffffffff\n    b = b ^ c\n    a = (a << 7) & 0xffffffff\n    return (a,b)\ndef xor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chmul(a,b):\n    return (a*b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chmul(a,b):\n    return (a*b)\ndef shuffle(a,b,c):\n    temp = a & b\n    a = b\n    ",
        "test": "assert     left_rotate(0b00000000,0)     == 0b00000000",
        "num_ids": 2366
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n",
        "test": "assert     remove_all_spaces('') == ''",
        "num_ids": 311
    },
    {
        "number": 801,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    if x==y:\n        return 2\n    if x==z:\n        return 2\n    if y==z:\n        return 2\n    return 0\n",
        "test": "assert     test_three_equal(1,2,3)==0",
        "num_ids": 473
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    mid = n // 2\n    arr_1 = arr[0:mid]\n    arr_2 = arr[mid:]\n    if arr_1 == sorted(arr_1) and arr_2 == sorted(arr_2):\n        return 0\n    else:\n        count_rot = 0\n        for i in range(len(arr)):\n            if arr_1 == sorted(arr_1) and arr_2 == sorted(arr_2):\n                return count_rot\n            else:\n                arr_1.append(arr_1.pop(0))\n                arr_2.append(arr_2.pop(0))\n                count_rot += 1\n    return count_rot\n",
        "test": "assert     count_rotation([4, 5, 1, 2, 3]) == 0",
        "num_ids": 588
    },
    {
        "number": 803,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    if (x == 1) :\n        return True\n    \n    # check if divisible by 4\n    if (x%4 == 0) :\n        return is_perfect_square(x/4)\n    \n    if (x%2 == 0) :\n        return True\n    \n    i = 3\n    while (i*i <= x) :\n        if (x%i == 0) :\n            return is_perfect_square(x/i)\n        i = i + 2\n    \n    return False\n",
        "test": "assert     is_perfect_square(1) == True",
        "num_ids": 445
    },
    {
        "number": 804,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product*i\n    if product%2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([1, 3, 3, 4, 4]) == True",
        "num_ids": 496
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    max_list = max_sum_list_rec(lists,0,len(lists)-1)\n    return max_list\n",
        "test": "assert     max_sum_list(max_sum_list([[[-1, -3, -5], [-9, -8, -7], [-6, -6, -4]], [[7, 6, 5], [5, 4, 3], [3, 2, 1]]])) == [[7, 6, 5], [5, 4, 3], [3, 2, 1]]",
        "num_ids": 620
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            j = i\n            count = 0\n            while j < len(test_str) and test_str[j].isupper():\n                count += 1\n                j += 1\n            if count > max_run:\n                max_run = count\n    return max_run\n",
        "test": "assert     max_run_uppercase('aBcD') == 1",
        "num_ids": 617
    },
    {
        "number": 807,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n",
        "test": "assert     first_odd([2,3,4,5]) == 3",
        "num_ids": 308
    },
    {
        "number": 808,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup) == K\n",
        "test": "assert     check_K(('x', 'y', 'z'), 2) == False",
        "num_ids": 395
    },
    {
        "number": 809,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for idx, val in enumerate(test_tup1):\n        if val > test_tup2[idx]:\n            return False\n    return True\n",
        "test": "assert     check_smaller((1, 3, 5), (2, 4, 6)) == True",
        "num_ids": 834
    }
]