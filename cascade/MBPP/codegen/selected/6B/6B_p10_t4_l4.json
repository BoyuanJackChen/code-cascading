[
    {
        "number": 2,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    ans = list(set(test_tup1) & set(test_tup2))\n    return ans\n",
        "test": "assert     (similar_elements([1, 2, 3], [3, 2, 1]) == [1, 2, 3])",
        "num_ids": 1422
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return False\n    if n > 2 and n % 2 == 0:\n        return False\n    max = math.ceil(math.sqrt(n))\n    for j in range(3, max+1, 2):\n        if n % j == 0:\n            return False\n    return True\n",
        "test": "assert     is_not_prime(1) == False",
        "num_ids": 1164
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums == None or len(nums) == 0 or n == 0:\n        return []\n    heap = []\n    for i in range(len(nums)):\n        hq.heappush(heap,nums[i])\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if nums == None or len(nums) == 0 or n == 0:\n        return []\n    heap = []\n    for i in range(len(nums)):\n        hq.heappush(heap,nums[i])\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef heap_sorted(nums,n):\n    '''\n    Write a function to sort a given list of numbers using heapsort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    heap = []\n    for i in range(len(nums)):\n        hq.heappush(heap,nums[i])\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef bubble_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using bubblesort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\ndef insertion_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using insertion sort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    for i in range(1,len(nums)):\n        j = i\n        while j > 0 and nums[j] < nums[j-1]:\n            nums[j],nums[j-1] = nums[j-1],nums[j]\n            j -= 1\n    return nums\ndef shell_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using shellsort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    gap = int(len(nums)/2)\n    while gap > 0:\n        for i in range(gap,len(nums)):\n            j = i\n            while j > 0 and nums[j] < nums[j-gap]:\n                nums[j],nums[j-gap] = nums[j-gap],nums[j]\n                j -= gap\n        gap = int(gap/2)\n    return nums\ndef merge_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using mergesort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums)//2\n    left,right = merge_sort(nums[:mid]),merge_sort(nums[mid:])\n    return merge(left,right)\ndef merge(left,right):\n    '''\n    Merge two given lists in ascending order.\n    '''\n    if left == None or len(left) == 0:\n        return right\n    if right == None or len(right) == 0:\n        return left\n    i,j = 0,0\n    result = []\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    while i < len(left):\n        result.append(left[i])\n        i += 1\n    while j < len(right):\n        result.append(right[j])\n        j += 1\n    return result\ndef radix_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using radixsort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    max_length = 1\n    for i in range(len(str(max(nums)))):\n        max_length = max_length*10\n    buckets = [[] for i in range(max_length)]\n    for i in range(len(nums)):\n        buckets[nums[i]//(max_length//10**i)%10].append(nums[i])\n    i = 0\n    for bucket in buckets:\n        for num in bucket:\n            nums[i] = num\n            i += 1\n    return nums\ndef quick_sort(nums,start,end):\n    '''\n    Write a function to sort a given list of numbers using quicksort.\n    '''\n    if start >= end:\n        return\n    pivot = nums[start]\n    left = start+1\n    right = end\n    while left <= right:\n        while left <= end and nums[left] < pivot:\n            left += 1\n        while right > start and nums[right] > pivot:\n            right -= 1\n        if left <= right:\n            nums[left],nums[right] = nums[right],nums[left]\n            left += 1\n            right -= 1\n    quick_sort(nums,start,right-1)\n    quick_sort(nums,right+1,end)\n    return nums\ndef bucket_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using bucket sort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    length = len(nums)\n    size = max(nums)-min(nums)+1\n    buckets = [[] for i in range(size)]\n    for i in range(length):\n        buckets[nums[i]-min(nums)//size].append(nums[i])\n    for i in range(size):\n        buckets[i].sort()\n    i = 0\n    for bucket in buckets:\n        for num in bucket:\n            nums[i] = num\n            i += 1\n    return nums\ndef count_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using counting sort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    max_num = max(nums)\n    counts = [0 for i in range(max_num+1)]\n    for i in range(len(nums)):\n        counts[nums[i]] += 1\n    index = 0\n    for i in range(max_num+1):\n        while counts[i] > 0:\n            nums[index] = i\n            counts[i] -= 1\n            index += 1\n    return nums\ndef radix_count_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using radix counting sort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    max_length = 1\n    for i in range(len(str(max(nums)))):\n        max_length = max_length*10\n    buckets = [[] for i in range(max_length)]\n    for i in range(len(nums)):\n        buckets[nums[i]//(max_length//10**i)%10]",
        "test": "assert     heap_queue_largest([], 10) == []",
        "num_ids": 1813
    },
    {
        "number": 6,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 0:\n        return False\n    elif x == 0:\n        return True\n    else:\n        return (x & (x - 1)) == 0\n",
        "test": "assert     is_Power_Of_Two(2) == True ",
        "num_ids": 1067
    },
    {
        "number": 7,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall('[A-Za-z]+', text)\n    return result\n",
        "test": "assert     find_char_long(\"\") == []",
        "num_ids": 1653
    },
    {
        "number": 8,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert         [i*i for i in [1,2,3,4,5,6,7,8,9,10]] == square_nums([1,2,3,4,5,6,7,8,9,10])",
        "num_ids": 1048
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    temp = str + str\n    for i in range(0, n):\n        if str[i:] == temp[i:n]:\n            return i\n    return -1\n",
        "test": "assert     find_Rotations('A') == 0",
        "num_ids": 1386
    },
    {
        "number": 11,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if (s.count(ch)>1):\n        s=s[:s.rfind(ch)]+s[s.rfind(ch)+1:]\n    return s\n",
        "test": "assert     remove_Occ('ABC', 'D') == 'ABC'",
        "num_ids": 1121
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    '''\n    sort the rows in an ascending order\n    '''\n    new_M = sorted(M)\n    '''\n    get the sum of each row\n    '''\n    row_sums = []\n    for row in new_M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    '''\n    get the sorted indices of the row_sums list\n    '''\n    sort_idx = sorted(range(len(row_sums)), key=lambda k:row_sums[k])\n    '''\n    return the new sorted matrix according to row_sums list\n    '''\n    return [new_M[i] for i in sort_idx]\n",
        "test": "assert     sort_matrix([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [[1, 2, 3], [1, 2, 3], [1, 2, 3]]",
        "num_ids": 3096
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return b*h/2\n",
        "test": "assert     find_Volume(1,0,1) == 0",
        "num_ids": 979
    },
    {
        "number": 16,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.lower() == text\n",
        "test": "assert     text_lowercase_underscore('hello_world') == True",
        "num_ids": 1036
    },
    {
        "number": 17,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert     square_perimeter(4) == 16",
        "num_ids": 548
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return string\n    else:\n        string_list = [string[0]]\n        for i in range(1, len(string)):\n            if string[i] not in string_list:\n                string_list.append(string[i])\n        return string_list\n",
        "test": "assert     str_to_list('Aa') == ['A', 'a']",
        "num_ids": 3201
    },
    {
        "number": 19,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    elif len(arraynums) == 1:\n        return False\n    else:\n        for i in range(len(arraynums)):\n            for j in range(i+1, len(arraynums)):\n                if arraynums[i] == arraynums[j]:\n                    return True\n    return False\n",
        "test": "assert     test_duplicate([]) == False",
        "num_ids": 1273
    },
    {
        "number": 20,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x == '3':\n        return True\n    elif x == '6':\n        return True\n    elif x == '9':\n        return True\n    elif x == '8':\n        return True\n    elif x == '7':\n        return True\n    elif x == '6':\n        return True\n    elif x == '4':\n        return True\n    elif x == '5':\n        return True\n    elif x == '2':\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(14) is False",
        "num_ids": 5374
    },
    {
        "number": 56,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    if rev_num == 2 * rev_num:\n        return True\n    return False\n    \n",
        "test": "assert     rev(12) == False",
        "num_ids": 941
    },
    {
        "number": 57,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : \n        return 0\n    arr.sort()\n    return arr[-1]\n",
        "test": "assert     find_Max_Num([1,2,3,4]) == 4 ",
        "num_ids": 1297
    },
    {
        "number": 58,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x * y < 0\n",
        "test": "assert     opposite_Signs(0, 3) == False",
        "num_ids": 1250
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    l = []\n    i = 1\n    while len(l) < n:\n        l.append(i**3)\n        i += 1\n    return l[n-1]\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 2714
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substring_count = 0\n    length_map = defaultdict(lambda:0)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if j-i == len(s):\n                substring_count +=1\n            elif len(s[i:j]) == len(set([int(c) for c in s[i:j]])):\n                substring_count +=1\n            length_map[len(s[i:j])] +=1\n    print(substring_count)\n    print(length_map)\n    return substring_count\n",
        "test": "assert     count_Substrings('1') == 1",
        "num_ids": 1492
    },
    {
        "number": 62,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest is None or x < smallest:\n            smallest = x\n    return smallest\n    \n",
        "test": "assert     smallest_num([1, 3, 2, 4, 5, 6]) == 1",
        "num_ids": 1108
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    if n < 2:\n        return 0\n    else:\n        # sort the list\n        sorted_list = sorted(test_list)\n        # find the maximum difference\n        diff = abs(sorted_list[n - 1] - sorted_list[0])\n        # compare with the pair from right\n        for i in range(1, n - 1):\n            diff = max(diff, abs(sorted_list[i] - sorted_list[i + 1]))\n        # compare with the pair from left\n        for i in range(1, n - 1):\n            diff = max(diff, abs(sorted_list[i - 1] - sorted_list[i]))\n        return diff\n",
        "test": "assert     max_difference((4,4,4,4,4,4,4,4,4,4)) == 0",
        "num_ids": 2317
    },
    {
        "number": 64,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    a = sorted(subjectmarks, key=lambda x: x[1])\n    return a\n    \n    ",
        "test": "assert     subject_marks([('Class-V',4),('English',3),('Physics',5)]) == [('English',3),('Class-V',4),('Physics',5)]",
        "num_ids": 1932
    },
    {
        "number": 65,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        data = data_list[0]\n        \n        if isinstance(data, list):\n            return recursive_list_sum(data) + recursive_list_sum(data_list[1:])\n        else:\n            return data + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 1170
    },
    {
        "number": 66,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([1, 2, -3, 4, -5, 6, -7, 8, -9, 10]) == 6",
        "num_ids": 1175
    },
    {
        "number": 67,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "test": "assert     bell_number(0)     == 1",
        "num_ids": 3013
    },
    {
        "number": 68,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n",
        "test": "assert     not is_Monotonic([1,1,2,3,2])",
        "num_ids": 1435
    },
    {
        "number": 69,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == s:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i: i + len(s)] == s:\n            return True\n    return False\n",
        "test": "assert     not is_sublist([], [1, 2])",
        "num_ids": 1153
    },
    {
        "number": 70,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Tuple = set(Input)\n    return len(Tuple) == len(Input)\n    \ndef find_all_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:\n        return False\n    else:\n        return all(find_equal_tuple(tup) for tup in Input)\n",
        "test": "assert     find_equal_tuple(())",
        "num_ids": 1504
    },
    {
        "number": 71,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # TODO: Implement this function.\n    # nums = nums.copy()\n    for i in range(len(nums)):\n        min_index = i\n        for j in range(i, len(nums)):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 3009
    },
    {
        "number": 72,
        "max_answer_num": 27,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    squares = []\n    \n    for i in range(1,n+1):\n        squares.append(i*i)\n    \n    for s1 in squares:\n        for s2 in squares:\n            if (s1 - s2) == n:\n                return True\n    return False\n",
        "test": "assert     dif_Square(10) == False",
        "num_ids": 1490
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)-1):\n        if patterns[i]==1 and patterns[i+1]==2 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==1 and patterns[i+1]==3 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==2 and patterns[i+1]==1 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==2 and patterns[i+1]==3 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==3 and patterns[i+1]==1 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==3 and patterns[i+1]==2 and colors[i]==colors[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_samepatterns([\"red\", \"red\", \"green\", \"black\"], [\"red\", \"red\", \"green\", \"black\"]) == True",
        "num_ids": 1755
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return list(filter(lambda x: all(x[i]%K==0 for i in range(len(x))), test_list))\n",
        "test": "assert     find_tuples([(1,2),(3,4),(5,6)], 1) == [(1,2),(3,4),(5,6)]",
        "num_ids": 2035
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "test": "assert     is_Diff( 11 ) == True",
        "num_ids": 536
    },
    {
        "number": 79,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "test": "assert     word_len('abcdf') == True",
        "num_ids": 734
    },
    {
        "number": 80,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n*(n+1))*(n+2) / 6)\n",
        "test": "assert     tetrahedral_number(0) == 0",
        "num_ids": 2974
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\n",
        "test": "assert     abs(volume_sphere(1) - 4.1887902047863905) < 0.0000001",
        "num_ids": 1193
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return (sum % 26)\n",
        "test": "assert     get_Char('xyz') == 25",
        "num_ids": 1067
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return sum([2**i for i in range(n)])\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 1233
    },
    {
        "number": 85,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n",
        "test": "assert     surfacearea_sphere(1) == 4*math.pi, 'Error'",
        "num_ids": 877
    },
    {
        "number": 86,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(2*n - 1)) // 2\n",
        "test": "assert     centered_hexagonal_number(0) == 0",
        "num_ids": 2771
    },
    {
        "number": 87,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {**dict1, **dict2, **dict3}\n    return dict4\n",
        "test": "assert     merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 2294
    },
    {
        "number": 88,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # list1=input('Enter the list: ')\n    d={}\n    for i in list1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n",
        "test": "assert     freq_count([1, 2, 3, 4, 5, 6]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}",
        "num_ids": 9183
    },
    {
        "number": 89,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N > 99:\n        return None\n    elif N == 1:\n        return 2\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 1\n    elif N == 4:\n        return 2\n    else:\n        return N - 1\n",
        "test": "assert     closest_num(5)    == 4",
        "num_ids": 988
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    # find the length of longest word in the list\n    max_len = 0\n    for word in list1:\n        if(len(word) > max_len):\n            max_len = len(word)\n    \n    return max_len\n",
        "test": "assert     len_log(['a']) == 1",
        "num_ids": 2917
    },
    {
        "number": 91,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any([True for s in sub_str if s in str1])\n",
        "test": "assert     find_substring('this is a test string', '123') == False",
        "num_ids": 4920
    },
    {
        "number": 92,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    c=0\n    if n==1:\n        return False\n    else:\n        for i in range(1,n):\n            if i%n==0:\n                c=c+1\n        if c>1:\n            return False\n        else:\n            return True\n",
        "test": "assert     is_undulating(11) is True",
        "num_ids": 1010
    },
    {
        "number": 93,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert     (power(2,3) == 8)",
        "num_ids": 909
    },
    {
        "number": 94,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    new_list=sorted(test_list,key=itemgetter(1))\n    return new_list[0][0]\n",
        "test": "assert     (index_minimum( [(0, 3), (1, 9), (2, 2), (4, 8), (2, 8)] ) == 2)",
        "num_ids": 2608
    },
    {
        "number": 95,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_min = []\n    for item in lst:\n        lst_min.append(len(item))\n    return min(lst_min)\n",
        "test": "assert     Find_Min_Length([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == 4",
        "num_ids": 3902
    },
    {
        "number": 96,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert divisor(1) == 1",
        "num_ids": 993
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n    \ndef sum_list(list1):\n    '''\n    Write a function to find sum of elements in a list, where the list is an\n    arbitrary number of nested lists.\n    '''\n    sum = 0\n    for i in list1:\n        if type(i) is list:\n            sum += sum_list(i)\n        else:\n            sum += i\n    return sum\n",
        "test": "assert     frequency_lists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 2402
    },
    {
        "number": 98,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for n in numbers:\n        total = total * n\n    return total\n",
        "test": "assert     multiply_num([0]) == 0",
        "num_ids": 1155
    },
    {
        "number": 99,
        "max_answer_num": 32,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n % 2 == 0:\n        return decimal_to_binary(n//2) + '0'\n    else:\n        return decimal_to_binary(n//2) + '1'\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 1201
    },
    {
        "number": 100,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def palindrome(x):\n        if str(x)[::-1] == str(x):\n            return True\n        return False\n    while True:\n        num += 1\n        if palindrome(num) == True:\n            break\n    return num\n",
        "test": "assert     next_smallest_palindrome(0) == 1",
        "num_ids": 1839
    },
    {
        "number": 101,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[len(arr)//2]\n    left = [x for x in arr if x < pivot]\n    right = [x for x in arr if x > pivot]\n    if len(left) == k-1:\n        return pivot\n    elif len(left) < k-1:\n        return kth_element(right, k-len(left)-1)\n    else:\n        return kth_element(left, k)\n",
        "test": "assert     kth_element([3,4,5,6], 1) == 3",
        "num_ids": 1189
    },
    {
        "number": 102,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n",
        "test": "assert     snake_to_camel(\"\") == \"\"",
        "num_ids": 1706
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Your code here\n    E = 0\n    for i in range(0, n + 1):\n        for j in range(0, m + 1):\n            if i * j == n - i + m - j:\n                E += 1\n    return E\n",
        "test": "assert     eulerian_num(4, 1) == 1",
        "num_ids": 1163
    },
    {
        "number": 104,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_length = len(input_list[0])\n    return sorted(input_list, key=lambda x: x[sublist_length - 1])\n",
        "test": "assert     sort_sublists([['A'], ['B', 'C'], ['D', 'E', 'F']]) == [['A'], ['B', 'C'], ['D', 'E', 'F']]",
        "num_ids": 2177
    },
    {
        "number": 105,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_true = 0\n    for i in lst:\n        if i:\n            count_true += 1\n    return count_true\n",
        "test": "assert     count([]) == 0",
        "num_ids": 998
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n",
        "test": "assert     add_lists([4, 5, 6], [1, 2, 3]) == [4, 5, 6, 1, 2, 3]",
        "num_ids": 1154
    },
    {
        "number": 108,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=j=k=0\n    result=[]\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            result.append(num1[i])\n            i+=1\n        elif num2[j]<num3[k]:\n            result.append(num2[j])\n            j+=1\n        else:\n            result.append(num3[k])\n            k+=1\n    while i<len(num1):\n        result.append(num1[i])\n        i+=1\n    while j<len(num2):\n        result.append(num2[j])\n        j+=1\n    while k<len(num3):\n        result.append(num3[k])\n        k+=1\n    return result\n",
        "test": "assert     merge_sorted_list([0], [1], [2]) == [0,1,2]",
        "num_ids": 5796
    },
    {
        "number": 109,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif len(s) == 1:\n        return 0\n    else:\n        if s[:1] == '1':\n            return odd_Equivalent(s[1:],n-1)\n        else:\n            return odd_Equivalent(s[:-1],n-1)\n",
        "test": "assert     odd_Equivalent('1001',2) == 1",
        "num_ids": 1628
    },
    {
        "number": 111,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Use sets to remove duplicates\n    return list(set.intersection(*(set(item) for item in nestedlist)))\n",
        "test": "assert     common_in_nested_lists( [ [1, 2, 3], [2, 4], [2, 1, 3, 5] ] ) == [2]",
        "num_ids": 1943
    },
    {
        "number": 113,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # try:\n    #     int(text)\n    #     return True\n    # except ValueError:\n    #     return False\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_integer(\"1\") == True",
        "num_ids": 815
    },
    {
        "number": 115,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True\n",
        "test": "assert     empty_dit( [ {}, {} ] ) == True",
        "num_ids": 1097
    },
    {
        "number": 116,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    total = 0\n    for i in nums:\n        total = total * 10 + i\n    return total\n",
        "test": "assert     tuple_to_int((0,)) == 0",
        "num_ids": 789
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n",
        "test": "assert     list_to_float([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]]) == [[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0], [12.0, 13.0, 14.0, 15.0]]",
        "num_ids": 2069
    },
    {
        "number": 118,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('hello') == ['hello']",
        "num_ids": 1039
    },
    {
        "number": 119,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr)//2\n    if len(arr)%2 == 0:\n        if arr[mid] == arr[mid-1] == arr[mid+1]:\n            return search(arr[:mid])\n        else:\n            return search(arr[mid:])\n    else:\n        if arr[mid] == arr[mid+1]:\n            return search(arr[:mid])\n        else:\n            return search(arr[mid+1:])\n",
        "test": "assert     search([1, 1, 1, 1, 2, 2]) == 1",
        "num_ids": 1962
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) % 2!= 0:\n        return\n    if len(list1) == 0:\n        return\n    if len(list1) == 2:\n        return\n    list2 = []\n    list3 = []\n    for a,b in list1:\n        list2.append(abs(a*b))\n    return max(list2)\n",
        "test": "assert     max_product_tuple([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]) == 36",
        "num_ids": 2494
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [i for i in range(1, limit)]\n    for i in range(len(amicable_numbers)):\n        amicable_numbers[i] = sum(divisors(amicable_numbers[i]))\n    amicable_sum = sum(amicable_numbers)\n    amicable_numbers = [i for i in range(1, limit) if i!= amicable_sum]\n    return sum(amicable_numbers)\n",
        "test": "assert         amicable_numbers_sum(1) == 0",
        "num_ids": 1156
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Get real and imaginary part of complex number\n    # Return the angle\n    \n    c = abs(complex(a,b))\n    return cmath.phase(c)\n    \na = 1.0\nb = 1.0\n",
        "test": "assert     angle_complex(a=cmath.rect(0,1), b=cmath.rect(0,1)) == 0.0",
        "num_ids": 3451
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #O(n) time and O(n) space\n    max_diff = 0\n    zeros = 0\n    ones = 0\n    for i in range(len(string)):\n        zeros += string[i] == \"0\"\n        ones += string[i] == \"1\"\n        if zeros == ones:\n            max_diff = max(max_diff, zeros-ones)\n        elif zeros > ones:\n            max_diff = max(max_diff, zeros-ones)\n            zeros = ones\n        elif ones > zeros:\n            max_diff = max(max_diff, zeros-ones)\n            ones = zeros\n    return max_diff\n",
        "test": "assert     find_length('') == 0",
        "num_ids": 6396
    },
    {
        "number": 126,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lcm = max(a,b)\n    for i in range(1, lcm):\n        if a % i == 0 and b % i == 0:\n            lcm = i\n    return lcm\n",
        "test": "assert     sum(10,12) == 2",
        "num_ids": 1087
    },
    {
        "number": 127,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(2,3) == 6",
        "num_ids": 770
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert     long_words(8, [\"i\", \"am\", \"here\", \"to\", \"live\", \"so\", \"long\", \"and\", \"welcome\"])    ==    []",
        "num_ids": 1279
    },
    {
        "number": 129,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if (len(my_matrix) == 0) or (len(my_matrix[0]) == 0):\n        return False\n    for row in my_matrix:\n        if (len(row)!= len(my_matrix)):\n            return False\n        if (sum(row)!= sum(my_matrix[0])):\n            return False\n    \n    #If this line is reached then the matrix is a magic square\n    return True\n",
        "test": "assert     magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 2639
    },
    {
        "number": 130,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for item in nums:\n        count[item] += 1\n    return max(count, key=count.get)\n",
        "test": "assert     max_occurrences([1,1,1,1,1,1,1]) == 1",
        "num_ids": 3491
    },
    {
        "number": 131,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'AEIOUaeiou'\n    l = list(str1)\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        if l[i] not in vowels:\n            i+=1\n        elif l[j] not in vowels:\n            j-=1\n        else:\n            l[i],l[j] = l[j],l[i]\n            i+=1\n            j-=1\n    return ''.join(l)\nprint(reverse_vowels('abcdefg'))\n",
        "test": "assert         reverse_vowels(\"\") == \"\"",
        "num_ids": 3462
    },
    {
        "number": 132,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert     tup_string(()) == '()'",
        "num_ids": 1264
    },
    {
        "number": 133,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 1350
    },
    {
        "number": 135,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Hexagonal number is n(n+1)/2\n    return (n*(n+1))/2\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 715
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        if nums[0] == 0:\n            return 1\n        else:\n            return 0\n    c = 0\n    for i in range(n):\n        if nums[i] == 0:\n            c += 1\n    return float(c) / (n - c)\n",
        "test": "assert     zero_count([1,0,0]) == 2",
        "num_ids": 5099
    },
    {
        "number": 138,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while(n): \n        if(n%2==0): \n            n = n/2\n        else: \n            count+=1\n            n-=1\n    if(count>1): \n        return False\n    else: \n        return True\ndef is_Sum_Of_Powers_Of_Two2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<=0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two(): \n    assert(is_Sum_Of_Powers_Of_Two(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two(26)==False)\ndef is_Sum_Of_Powers_Of_Two_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    elif n%2==0: \n        return is_Sum_Of_Powers_Of_Two_2(n/2)\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_2(): \n    assert(is_Sum_Of_Powers_Of_Two_2(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_2(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two_2(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two_2(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(26)==False)\ndef is_Sum_Of_Powers_Of_Two_3(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_3(): \n    assert(is_Sum_Of_Powers_Of_Two_3(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_3(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two_3(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two_3(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(26)==False)\ndef is_Sum_Of_Powers_Of_Two_4(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_4(): \n    assert(is_Sum_Of_Powers_Of_Two_4(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_4(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two_4(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two_4(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(26)==False)\ndef is_Sum_Of_Powers_Of_Two_5(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_5(): \n    assert(is_Sum_Of_Powers_Of_Two_5(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_5(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(17)==False)",
        "test": "assert     is_Sum_Of_Powers_Of_Two(100) == False",
        "num_ids": 3520
    },
    {
        "number": 139,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 724
    },
    {
        "number": 140,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output_list = []\n    for x in test_list:\n        if type(x) == list:\n            for y in x:\n                output_list.append(y)\n        else:\n            output_list.append(x)\n    return output_list\n",
        "test": "assert extract_singly([[3, 1, 4, 1], [], [5, 9, 2], [6], []]) == [3, 1, 4, 1, 5, 9, 2, 6]",
        "num_ids": 1491
    },
    {
        "number": 141,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted = False\n    while not sorted:\n        sorted = True\n        n = len(nums)\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                sorted = False\n                p = nums[i]\n                nums[i] = nums[i+1]\n                nums[i+1] = p\n    return nums\n",
        "test": "assert     [1, 2, 3, 4, 5]     == pancake_sort([1, 2, 3, 4, 5])",
        "num_ids": 2008
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum(1 for item1,item2,item3 in zip(list1,list2,list3) if item1==item2==item3)\n",
        "test": "assert     count_samepair([1,2,3],[2,1,3],[1,1,1])==0",
        "num_ids": 2334
    },
    {
        "number": 143,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # return len([x for x in Input if type(x)==list])\n    return len(Input)\n    \ndef find_words(Input):\n    '''\n    Write a function to find number of words present in the given tuple.\n    '''\n    # return len([x for x in Input if type(x)==str])\n    return len(Input)\n",
        "test": "assert     find_lists(()) == 0",
        "num_ids": 1432
    },
    {
        "number": 145,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n",
        "test": "assert     max_Abs_Diff([0,0,0,0,0]) == 0",
        "num_ids": 1265
    },
    {
        "number": 160,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return [0, 1]\n    if n < 0:\n        return None\n    if a == 0:\n        return None\n",
        "test": "assert     find_solution(2, 2, 3) == None",
        "num_ids": 1650
    },
    {
        "number": 161,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n",
        "test": "assert     remove_elements([1,2,3,4], [1,2,3]) == [4]",
        "num_ids": 1536
    },
    {
        "number": 162,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return n*(n+1)/2\n    else:\n        return n*(n+1)/2 + (n-1)\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 880
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    import math\n    return (s*l/2)*(1+(math.tan(pi/s))**2)**(-1)\n",
        "test": "assert     area_polygon(1, 1) == 0.5",
        "num_ids": 1131
    },
    {
        "number": 164,
        "max_answer_num": 25,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    d = n\n    s1 = 0\n    while d > 1:\n        if n % d == 0:\n            s1 = s1 + d\n        d = d - 1\n    d = n\n    s2 = 0\n    while d > 1:\n        if n % d == 0:\n            s2 = s2 + d\n        d = d - 1\n    if s1 == s2:\n        return True\n    else:\n        return False\n",
        "test": "assert     div_sum(3) == True",
        "num_ids": 1007
    },
    {
        "number": 165,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = [chr(i) for i in range(97, 123)]\n    total = 0\n    for index in range(len(str1)):\n        if str1[index] in alphabet:\n            total += 1\n    return total\n",
        "test": "assert     count_char_position('a') == 1, \"Counting character position should be 1 for a\"",
        "num_ids": 2473
    },
    {
        "number": 166,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    xor = 0\n    for num in A:\n        xor ^= num\n    \n    count = 0\n    for num in A:\n        if num ^ xor == 0:\n            count += 1\n    return count\n",
        "test": "assert     find_even_pair([]) == 0",
        "num_ids": 1375
    },
    {
        "number": 167,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    res = 1\n    while res <= n:\n        res = res * 2\n    return res\n",
        "test": "assert     next_power_of_2(3) == 4",
        "num_ids": 888
    },
    {
        "number": 168,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len([i for i in a if i == x])\n    \n    ",
        "test": "assert     frequency([1,2,3,4,5,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9],10) == 0",
        "num_ids": 1026
    },
    {
        "number": 170,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for x in list1:\n        if x > m and x <= n:\n            sum += x\n    return sum\n",
        "test": "assert     sum_range_list([1, 2, 3, 4, 5, 6, 7], 0, 7) == 28",
        "num_ids": 2704
    },
    {
        "number": 171,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n",
        "test": "assert     perimeter_pentagon(0) == 0",
        "num_ids": 781
    },
    {
        "number": 172,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('std') == 1",
        "num_ids": 820
    },
    {
        "number": 222,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    return len(set([type(item) for item in test_tuple])) <= 1\n",
        "test": "assert     check_type( (1,2,3) )",
        "num_ids": 1190
    },
    {
        "number": 223,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[0] == x:\n        return True\n    if arr[0]!= x:\n        return is_majority(arr[1:], n-1, x)\n",
        "test": "assert     is_majority([1, 2, 3, 1, 2, 1, 1, 3, 3, 3], 9, 4) == False",
        "num_ids": 1707
    },
    {
        "number": 224,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while(n):\n        count=count+1\n        n=n&(n-1)\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 876
    },
    {
        "number": 226,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) < 2:\n        return str\n    else:\n        return odd_values_string(str[1:]) + str[0]\n",
        "test": "assert     odd_values_string(\"\") == \"\"",
        "num_ids": 1240
    },
    {
        "number": 227,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n",
        "test": "assert     min_of_three(5, 3, 1) == 1",
        "num_ids": 1196
    },
    {
        "number": 228,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n &= (1<<r)-1\n    return n == 0\n",
        "test": "assert         all_Bits_Set_In_The_Given_Range(16,4,16) == False",
        "num_ids": 3579
    },
    {
        "number": 229,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return sorted(arr, key=lambda x: (x < 0, x))\n    \ndef re_arrange_array2(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return sorted(arr, key=lambda x: (x < 0, x))[:n]\n",
        "test": "assert     re_arrange_array([0], 2) == [0]",
        "num_ids": 2774
    },
    {
        "number": 230,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1 == '':\n        return str1\n    else:\n        if len(str1) == 1:\n            if str1 =='':\n                return char\n            else:\n                return str1\n        else:\n            str2 = str1[0]\n            str3 = replace_blank(str1[1:],char)\n            if str2 =='':\n                return char + str3\n            else:\n                return str2 + str3\n",
        "test": "assert     replace_blank('hello','') == 'hello','replace_blank does not work'",
        "num_ids": 1252
    },
    {
        "number": 232,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n",
        "test": "assert     larg_nnum([3,2,1,4,5,6,7,8,9],0)     == []",
        "num_ids": 1647
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510\n    return pi * (r**2) * (h/2)\n",
        "test": "assert     lateralsuface_cylinder(2,1)    ==     6.283185307179586",
        "num_ids": 1654
    },
    {
        "number": 234,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(2) == 8, 'failure'",
        "num_ids": 497
    },
    {
        "number": 235,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    x = bin(n).replace(\"0b\",\"\")\n    l = [x[i] for i in range(len(x)) if i % 2 == 0]\n    z = \"\".join(l)\n    return int(z, 2)\n",
        "test": "assert     even_bit_set_number(0) == 0 ",
        "num_ids": 788
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dic = {}\n    for i in test_list:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic\ndef find_duplicates(test_list):\n    '''\n    Write a function that takes in a list of integers and returns a list of all the integers that appear more than once.\n    '''\n    l = []\n    for i in test_list:\n        if test_list.count(i) > 1:\n            l.append(i)\n    return l\ndef group_by_length(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary mapping each unique string to the list of strings that have that unique string as a substring.\n    '''\n    dic = {}\n    for i in test_list:\n        if i not in dic:\n            dic[i] = [i]\n        else:\n            dic[i].append(i)\n    return dic\ndef find_average(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the average of the numbers.\n    '''\n    total = 0\n    for i in test_list:\n        total += i\n    return total / len(test_list)\ndef word_count(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary mapping each unique string to the number of times it appears in the list.\n    '''\n    dic = {}\n    for i in test_list:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic\ndef find_sum(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers.\n    '''\n    total = 0\n    for i in test_list:\n        total += i\n    return total\ndef find_min(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the minimum of the numbers.\n    '''\n    l = []\n    for i in test_list:\n        l.append(i)\n    return min(l)\ndef find_max(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the maximum of the numbers.\n    '''\n    l = []\n    for i in test_list:\n        l.append(i)\n    return max(l)\ndef find_common(test_list1,test_list2):\n    '''\n    Write a function that takes in two lists of numbers and returns a list of numbers that appear in both lists.\n    '''\n    l = []\n    for i in test_list1:\n        if i in test_list2:\n            l.append(i)\n    return l\ndef is_palindrome(test_list):\n    '''\n    Write a function that takes in a list of strings and returns True if all the strings in the list are palindromes, and False otherwise.\n    '''\n    for i in test_list:\n        l = [i[::-1]]\n        if l == i:\n            return True\n    return False\ndef filter_by_length(test_list, length):\n    '''\n    Write a function that takes in a list of strings and returns a list of strings that are of the given length.\n    '''\n    l = []\n    for i in test_list:\n        if len(i) == length:\n            l.append(i)\n    return l\ndef filter_by_letter(test_list, letter):\n    '''\n    Write a function that takes in a list of strings and returns a list of strings that contain the given letter.\n    '''\n    l = []\n    for i in test_list:\n        if letter in i:\n            l.append(i)\n    return l\ndef generate_list(test_list, integer):\n    '''\n    Write a function that takes in a list of strings and returns a list of strings of the given length, but each element of the new list is a random string from the original list.\n    '''\n    l = []\n    for i in range(0,integer):\n        l.append(test_list[random.randrange(0,len(test_list))])\n    return l\ndef get_anagrams(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the anagrams of that list.\n    '''\n    l = []\n    for i in test_list:\n        l.append(sorted(i))\n    return l\ndef get_permutations(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the permutations of those strings.\n    '''\n    l = []\n    for i in test_list:\n        l.append(i[::-1])\n    return l\ndef get_all_permutations(test_list):\n    '''\n    Write a function that takes in a list of strings and returns all permutations of those strings, including the original string.\n    '''\n    l = []\n    for i in test_list:\n        l.append(i[::-1])\n    return l\ndef check_anagram(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the permutations of those strings, but only the permutations that are anagrams.\n    '''\n    l = []\n    for i in test_list:\n        l.append(i[::-1])\n    return l\ndef get_item(test_list, index):\n    '''\n    Write a function that takes in a list of strings and returns a list of the string in the given index.\n    '''\n    return test_list[index]\ndef get_index(test_list, item):\n    '''\n    Write a function that takes in a list of strings and returns a list of the indexes of all the instances of the given string.\n    '''\n    l = []\n    for i,j in enumerate(test_list):\n        if j == item:\n            l.append(i)\n    return l\ndef get_occurrences(test_list, item):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the indexes of all the instances of the given string.\n    '''\n    l = []\n    for i,j in enumerate(test_list):\n        if j == item:\n            l.append(i)\n    return l\ndef get_duplicates(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the duplicates of the string in that list.\n    '''\n    l = []\n    for i in test_list:\n        if test_list.count(i) > 1:\n            l.append(i)\n    return l\ndef get_letter_count(test_list, letter):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the indexes of all the instances of the given string.\n    '''\n    l = []\n    for i,j in enumerate(test_list):\n        if j == letter:\n            l.append(i)\n    return l\ndef get_letter_index(test_list, letter):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the indexes of all the instances of the given string.\n    '''\n    l = []\n    for i,j in enumerate(test_list):\n        if j == letter:\n            l.append(i)\n    return l\ndef get_item_count(test_list, item):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the indexes of all the instances of the given string.\n    '''\n    l = []\n    for i,j in enumerate(test_list):\n        if j == item:\n            l.append(i)\n    return l\ndef get_items_with_index(test_list, index):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the strings with the given index.\n    '''",
        "test": "assert     check_occurences([(0, 0), (0, 1), (1, 0)]) == {(0, 0): 1, (0, 1): 1, (1, 0): 1}",
        "num_ids": 3539
    },
    {
        "number": 238,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str.split('a')) - 1\n    \ndef pattern(n):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str(n).split('a')) - 1\n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 1292
    },
    {
        "number": 239,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return math.factorial(n)//(math.factorial(n-2)*2**(n-2))\n    \n    ",
        "test": "assert     get_total_number_of_sequences(3,2) == 2",
        "num_ids": 3345
    },
    {
        "number": 240,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    result = list1[:]\n    result[-1:] = list2\n    return result\n",
        "test": "assert     replace_list([1, 2, 3], [3]) == [1, 2, 3]",
        "num_ids": 1552
    },
    {
        "number": 242,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac('abcdefghijklmnopqrstuvwxyz') == 26,     \"Incorrect count\"",
        "num_ids": 825
    },
    {
        "number": 244,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N))**2)\n",
        "test": "assert     next_Perfect_Square(2)     == 4",
        "num_ids": 969
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    \n    # dynamic programming, store the max subarray with i and max subarray with i-1\n    # store the maximum subarray ending with i as max_end[i]\n    # max_end[i] = max(max_end[i-1]+arr[i], arr[i])\n    # max_end[i] = max(max_end[i-1]+arr[i], arr[i], arr[i-1])\n    # max_end[i] = max(arr[i], max_end[i-1], max_end[i-1]+arr[i])\n    # \n    max_end = [0]*len(arr)\n    max_end[0] = arr[0]\n    max_end[1] = max(arr[0], arr[1])\n    \n    for i in range(2, len(arr)):\n        max_end[i] = max(max_end[i-1]+arr[i], arr[i])\n    \n    return max(max_end)\n",
        "test": "assert max_sum([-1, -2, -3, -4]) == -1",
        "num_ids": 1448
    },
    {
        "number": 246,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number ** 0.5\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 5204
    },
    {
        "number": 247,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    max_len = 1\n    \n    # Every substring of length 1 is a palindrome \n    for i in range(n): \n        L[i][i] = 1\n        max_len = max(max_len, 1)\n        \n    # Now check for lengths 2 to n \n    for start in range(n-1): \n        end = start + 1\n        \n        # first substring\n        if str[start] == str[end]: \n            L[start][end] = 2\n            max_len = max(max_len, 2)\n        else: \n            L[start][end] = 0\n            \n    # Now calculate for lengths 3 to n+1 \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1\n            \n            if str[i] == str[j] and k == 3: \n                L[i][j] = 3\n                max_len = max(max_len, 3)\n            elif str[i] == str[j]: \n                L[i][j] = 2 + L[i+1][j-1]\n                max_len = max(max_len, 2 + L[i+1][j-1])\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j])\n                max_len = max(max_len, L[i][j])\n                \n    return max_len\n",
        "test": "assert     lps('a') == 1",
        "num_ids": 1635
    },
    {
        "number": 248,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 871
    },
    {
        "number": 249,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 210,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if not array_nums1:\n        return []\n    result = []\n    # result = array_nums2.copy()\n    for num in array_nums1:\n        if num in array_nums2:\n            result.append(num)\n    return result\n    \n",
        "test": "assert     intersection_array([1,2,3],[2,3,4])    == [2,3]",
        "num_ids": 1515
    },
    {
        "number": 250,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    cnt = 0\n    for e in tup:\n        if x == e:\n            cnt+=1\n    return cnt\n",
        "test": "assert     (count_X((0,0,0,0,0), 0) == 5),     'Not correct'",
        "num_ids": 1259
    },
    {
        "number": 251,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Your Code Here\n    return [element] + list\n",
        "test": "assert     insert_element([1], 2) == [2, 1]",
        "num_ids": 1453
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if (numbers[0] >=0 and numbers[1] >=0):\n        r = abs(numbers[0])\n        t = math.atan(numbers[1]/numbers[0])\n    elif (numbers[0] < 0 and numbers[1] >=0):\n        r = abs(numbers[0])\n        t = math.atan(numbers[1]/numbers[0]) + 2*math.pi\n    elif (numbers[0] < 0 and numbers[1] < 0):\n        r = abs(numbers[0])\n        t = math.atan(numbers[1]/numbers[0]) + math.pi\n    elif (numbers[0] >=0 and numbers[1] < 0):\n        r = abs(numbers[0])\n        t = math.atan(numbers[1]/numbers[0]) + math.pi\n    return (r,t)\ndef add_complex(c1,c2):\n    '''\n    Write a python function to add two complex numbers.\n    '''\n    return(c1[0] + c2[0],c1[1] + c2[1])\ndef multiply_complex(c1,c2):\n    '''\n    Write a python function to multiply two complex numbers.\n    '''\n    return(c1[0]*c2[0] - c1[1]*c2[1],c1[0]*c2[1] + c1[1]*c2[0])\ndef magnitude(c1):\n    '''\n    Write a python function to return the magnitude of a complex number.\n    '''\n    return math.sqrt(c1[0]**2 + c1[1]**2)\ndef phase(c1):\n    '''\n    Write a python function to return the phase of a complex number.\n    '''\n    return cmath.phase(c1[0]+c1[1]*1j)\ndef convert_list(num_list):\n    '''\n    Write a python function to convert a list of complex numbers to polar coordinates.\n    '''\n    return list(map(convert,num_list))\ndef add_list(num_list):\n    '''\n    Write a python function to add two lists of complex numbers.\n    '''\n    return list(map(add_complex,num_list))\ndef multiply_list(num_list):\n    '''\n    Write a python function to multiply two lists of complex numbers.\n    '''\n    return list(map(multiply_complex,num_list))\ndef magnitude_list(num_list):\n    '''\n    Write a python function to return the magnitudes of a list of complex numbers.\n    '''\n    return list(map(magnitude,num_list))\ndef phase_list(num_list):\n    '''\n    Write a python function to return the phase of a list of complex numbers.\n    '''\n    return list(map(phase,num_list))\ndef add_vector(vec1,vec2):\n    '''\n    Write a python function to add two complex vectors.\n    '''\n    return(vec1[0]+vec2[0],vec1[1]+vec2[1])\ndef add_matrix(mat1,mat2):\n    '''\n    Write a python function to add two complex matrices.\n    '''\n    if(len(mat1[0]) == len(mat2[0])):\n        return list(map(add_vector,mat1,mat2))\n    else:\n        return \"Matrices are not of same size\"\ndef matrix_transpose(matrix):\n    '''\n    Write a python function to return the transpose of a complex matrix.\n    '''\n    return list(zip(*matrix))\ndef matrix_matrix_product(matrix1,matrix2):\n    '''\n    Write a python function to return the product of a complex matrix and another complex matrix.\n    '''\n    if(len(matrix1[0]) == len(matrix2)):\n        return list(map(add_vector,matrix_transpose(matrix1),matrix2))\n    else:\n        return \"Matrices are not of same size\"\ndef add_matrix_matrix(matrix1,matrix2):\n    '''\n    Write a python function to add two complex matrices.\n    '''\n    if(len(matrix1[0]) == len(matrix2)):\n        return list(map(add_list,matrix1,matrix2))\n    else:\n        return \"Matrices are not of same size\"\ndef matrix_vector_product(matrix,vector):\n    '''\n    Write a python function to return the product of a complex matrix and a vector.\n    '''\n    if(len(matrix[0]) == len(vector)):\n        return list(map(add_vector,matrix,vector))\n    else:\n        return \"Matrix and vector are of different lengths\"\ndef matrix_matrix_product(matrix1,matrix2):\n    '''\n    Write a python function to return the product of a complex matrix and another complex matrix.\n    '''\n    if(len(matrix1[0]) == len(matrix2)):\n        return list(map(add_matrix,matrix1,matrix2))\n    else:\n        return \"Matrices are not of same size\"\ndef inverse(matrix):\n    '''\n    Write a python function to return the inverse of a complex matrix.\n    '''\n    return list(map(lambda x: x/matrix[0][0],matrix))\ndef matrix_inverse(matrix):\n    '''\n    Write a python function to return the inverse of a complex matrix.\n    '''\n    return list(map(lambda x: x/matrix[0][0],matrix))\ndef matrix_power(matrix,n):\n    '''\n    Write a python function to return the nth power of a complex matrix.\n    '''\n    if(n==1):\n        return matrix\n    elif(n%2 == 0):\n        return matrix_matrix_product(matrix_power(matrix,int(n/2)),matrix)\n    else:\n        return matrix_matrix_product(matrix_power(matrix,(n-1)/2),matrix)\ndef matrix_power_vector(matrix,vector):\n    '''\n    Write a python function to return the nth power of a complex matrix and a complex vector.\n    '''\n    return matrix_matrix_product(matrix_power(matrix,len(vector)-1),vector)\ndef multiply_matrix(matrix1,matrix2):\n    '''\n    Write a python function to multiply two complex matrices.\n    '''\n    if(len(matrix1[0]) == len(matrix2)):\n        return list(map(add_matrix_matrix,matrix_transpose(matrix1),matrix2))\n    else:\n        return \"Matrices are not of same size\"\ndef matrix_element_product(matrix1,matrix2):\n    '''\n    Write a python function to return the element product of two complex matrices.\n    '''\n    if(len(matrix1[0]) == len(matrix2)):\n        return list(map(multiply_list,matrix1,matrix2))\n    else:\n        return \"Matrices are not of same size\"\ndef vector_vector_product(vector1,vector2):\n    '''\n    Write a python function to return the product of a vector and another vector.\n    '''\n    if(len(vector1) == len(vector2)):\n        return list(map(multiply_list,vector1,vector2))\n    else:\n        return \"Vectors are not of same size\"\ndef complex_to_int(complex_number):\n    '''\n    Write a python function to convert a complex number to an integer number.\n    '''\n    return (int(complex_number[0]),int(complex_number[1]))\ndef int_to_complex(integer):\n    '''\n    Write a python function to convert an integer number to a complex number.\n    '''\n    return (complex(integer[0]),complex(integer[1]))\ndef matrix_to_int(matrix):\n    '''\n    Write a python function to convert a complex matrix to an integer matrix.\n    '''\n    retur",
        "test": "assert     convert((1.0-1.0j)) == (0.0, 3.0*cmath.pi/2.0)",
        "num_ids": 1440
    },
    {
        "number": 253,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    return count\n",
        "test": "assert     count_integer([])    == 0",
        "num_ids": 1291
    },
    {
        "number": 255,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(comb) for comb in combinations_with_replacement(l, n)]\n    ",
        "test": "assert     [tuple(x) for x in combinations_colors(['a', 'b', 'c', 'd'], 3)] == [('a', 'a', 'a'), ('a', 'a', 'b'), ('a', 'a', 'c'), ('a', 'a', 'd'), ('a', 'b', 'b'), ('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'c', 'c'), ('a', 'c', 'd'), ('a', 'd', 'd'), ('b', 'b', 'b'), ('b', 'b', 'c'), ('b', 'b', 'd'), ('b', 'c', 'c'), ('b', 'c', 'd'), ('b', 'd', 'd'), ('c', 'c', 'c'), ('c', 'c', 'd'), ('c', 'd', 'd'), ('d', 'd', 'd')]",
        "num_ids": 2653
    },
    {
        "number": 256,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        count=1\n        i=2\n        while (i<=n):\n            if n%i==0:\n                count=count+1\n                i=i+1\n            else:\n                i=i+1\n        return count\n",
        "test": "assert     count_Primes_nums(1) == 0",
        "num_ids": 1424
    },
    {
        "number": 257,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     swap_numbers(2, 1) == (1, 2)",
        "num_ids": 730
    },
    {
        "number": 259,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert     maximize_elements(('c', 'b'), ('b', 'a')) == ('c', 'b')",
        "num_ids": 3877
    },
    {
        "number": 260,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    \n    y = 3\n    x = 2\n    i = 1\n    while i < n:\n        x = ((x ** 2) + (1/y)) % n\n        y = ((y ** 2) - 2) % n\n        i += 1\n    return (x, n)\n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 1569
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Write your function here\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError('Both the tuples must be tuples')\n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError('Both the tuples must have the same size')\n",
        "test": "assert     division_elements(    (3, 3, 1), ",
        "num_ids": 3300
    },
    {
        "number": 262,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "test": "assert     (split_two_parts(['a','b','c','d','e','f','g','h'], 2) == (['a','b'], ['c','d','e','f','g','h']))",
        "num_ids": 1818
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # h_age = input(\"Enter your dog's age in human years: \")\n    h_age = float(h_age)\n    return h_age * 7.0\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 978
    },
    {
        "number": 265,
        "max_answer_num": 22,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    i = 0\n    while i < len(S):\n        res.append(S[i:i+step])\n        i += step\n    return res\n",
        "test": "assert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1720
    },
    {
        "number": 266,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "test": "assert     lateralsurface_cube(0) == 0",
        "num_ids": 1220
    },
    {
        "number": 267,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 864
    },
    {
        "number": 268,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 5*find_star_num(n-2)\n",
        "test": "assert     find_star_num(1) ==    1",
        "num_ids": 937
    },
    {
        "number": 269,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('0') == 48",
        "num_ids": 659
    },
    {
        "number": 270,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        if(i%2 == 0):\n            sum += arr[i]\n    return sum\n",
        "test": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == 25",
        "num_ids": 1691
    },
    {
        "number": 271,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 8\n    return 2 + 8 + 16 + 32 + 48 + 64 + 80 + 96 + 128\n",
        "test": "assert     (even_Power_Sum(0) == 0)",
        "num_ids": 1154
    },
    {
        "number": 272,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [val[-1] for val in test_list]\n",
        "test": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 1265
    },
    {
        "number": 273,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([x-y for x,y in zip(test_tup1, test_tup2)])\n",
        "test": "assert     substract_elements((10,20,30,40,50,60,70,80,90), (10,20,30,40,50,60,70,80,90)) == (0,0,0,0,0,0,0,0,0)",
        "num_ids": 1355
    },
    {
        "number": 274,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif n % 2 == 0:\n        return int(n / 2) * (int(n / 2) + 1)\n    else:\n        return int(n / 2) * (int(n / 2) + 1) + 1\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 1",
        "num_ids": 1514
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**2*pi*h\n",
        "test": "assert     volume_cylinder(2,2) == 2.22",
        "num_ids": 736
    },
    {
        "number": 277,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    #a new dictionary with only keys that are greater than or equal to n\n    new_dict = {key:value for key,value in dict.items() if value >= n}\n    return new_dict\n",
        "test": "assert     dict_filter({1:5, 2:4, 3:7, 4:9, 5:1, 6:2, 7:3, 8:4}, 1) == {1:5, 2:4, 3:7, 4:9, 5:1, 6:2, 7:3, 8:4}",
        "num_ids": 1933
    },
    {
        "number": 278,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    list_ = list(test_tup)\n    num_count = 0\n    for i in list_:\n        if i == list_[0]:\n            num_count += 1\n    return num_count\n",
        "test": "assert     count_first_elements((1, 2, 3, 4, 5, 3)) == 1",
        "num_ids": 3368
    },
    {
        "number": 279,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return 1\n    num = 0\n    for i in range(1,n+1):\n        num += i*(i-1)\n    return num\n",
        "test": "assert     is_num_decagonal(1) == False",
        "num_ids": 1110
    },
    {
        "number": 280,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert     (True, 0) == sequential_search([0, 1, 2, 3, 4], 0)",
        "num_ids": 1130
    },
    {
        "number": 281,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert     all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 1057
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == 0:\n        return []\n    elif len(nums2) == 0:\n        return nums1\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert     sub_list([1,2,3,4],[]) == [1,2,3,4]",
        "num_ids": 1018
    },
    {
        "number": 283,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def dig(n): \n        n=str(n)\n        return [int(i) for i in n]\n    def digit_freq(n): \n        dic={}\n        for i in dig(n): \n            if i not in dic: \n                dic[i]=1\n            else: \n                dic[i]+=1\n        return dic\n    def digit_freq_check(dic): \n        for k,v in dic.items(): \n            if v>k: \n                return False\n        return True\n    n=str(n)\n    dic=digit_freq(n)\n    return digit_freq_check(dic)\n",
        "test": "assert     validate(123123) == False",
        "num_ids": 1385
    },
    {
        "number": 284,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n    \n    \ndef check_element_bool(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return element in list\n    \n    \ndef check_element_bool_2(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n    \n",
        "test": "assert     check_element(['A','B','C'],'D') == False",
        "num_ids": 1017
    },
    {
        "number": 285,
        "max_answer_num": 29,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'[ab]{2}',text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('') == False",
        "num_ids": 1112
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(k):\n        max_sum += max(a)\n        a = a[1:] + [a[0]]\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([0,0,0,0], 4, 0) == 0",
        "num_ids": 1470
    },
    {
        "number": 287,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n<0:\n        return\n    \n    if n==0:\n        return 0\n    else:\n        return square_Sum(n-1)+n*n\n    \n    \ndef consecutive_product(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of consecutive product of first n natural numbers.\n    '''\n    if n<0:\n        return\n    \n    if n==0:\n        return 1\n    else:\n        return consecutive_product(n-1)*n\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 2827
    },
    {
        "number": 290,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = -1\n    max_list = []\n    for i in list1:\n        if max_len < len(i):\n            max_len = len(i)\n            max_list = i\n    return max_list\n",
        "test": "assert     max_length([]) == []",
        "num_ids": 2944
    },
    {
        "number": 291,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n:\n        return 0\n    elif k == 1:\n        return 1\n    elif k == 2:\n        return n\n    else:\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 1590
    },
    {
        "number": 292,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert     find(25,5) == 5",
        "num_ids": 623
    },
    {
        "number": 293,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>h:\n        return(h*h)\n    else:\n        return(w*w)\n",
        "test": "assert     otherside_rightangle(1,1) == 1",
        "num_ids": 1358
    },
    {
        "number": 294,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    maximum = listval[0]\n    for item in listval:\n        if item > maximum:\n            maximum = item\n    return maximum\n",
        "test": "assert max_val([4, 4, 4]) == 4",
        "num_ids": 1285
    },
    {
        "number": 295,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = 0\n    for divisor in range(1, number):\n        if number % divisor == 0:\n            divisors = divisors + divisor\n    return divisors\n",
        "test": "assert     sum_div(1) == 0",
        "num_ids": 907
    },
    {
        "number": 296,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                Inv_Count = Inv_Count + 1\n    return Inv_Count\n",
        "test": "assert     get_Inv_Count([])        == 0",
        "num_ids": 1649
    },
    {
        "number": 297,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for item in list1:\n        if isinstance(item, list):\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n",
        "test": "assert     flatten_list([])     == []",
        "num_ids": 1463
    },
    {
        "number": 299,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = []\n    for i in stdata:\n        data.append(i[1])\n    print(data)\n    return max(data)\n",
        "test": "assert     max_aggregate( [ ( 1, -1 ), ( -1, 1 ), ( 1, 1 ), ( -1, -1 ) ] ) == 1",
        "num_ids": 2229
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    count = 0\n    if n > 1:\n        count += count_binary_seq(n-1)\n    if n > 2:\n        count += count_binary_seq(n-2)\n    if n > 3:\n        count += count_binary_seq(n-3)\n    return count\n",
        "test": "assert     count_binary_seq(4) == 8",
        "num_ids": 1123
    },
    {
        "number": 301,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n        else:\n            depth = max(depth, 1)\n    return depth\n",
        "test": "assert     dict_depth({'a':1, 'b':2, 'c':3}) == 1",
        "num_ids": 3185
    },
    {
        "number": 304,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations % len(arr)\n    for i in range(rotations) :\n        index += 1\n    return arr[index % len(arr)]\n    \ndef find_Element_binary(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations % len(arr)\n    for i in range(rotations) :\n        index = (index + 1) % len(arr)\n    return arr[index]\n",
        "test": "assert     find_Element([4,5,6,7,0,1,2], (0,4), 0, 0) == 4",
        "num_ids": 2276
    },
    {
        "number": 305,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n",
        "test": "assert     start_withp(['this', 'is', 'a', 'test', 'pqr', 'pqr', 'pqr']) == ['pqr', 'pqr', 'pqr']",
        "num_ids": 3441
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    \n    # use k as pointer and modify kth index element\n    # and recurse for remaining array elements\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k-1))\n    \n",
        "test": "assert     max_sum_increasing_subseq([1,2,3,4,5], 5, 3, 4) == 9",
        "num_ids": 1804
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==1:\n        return tuplex[n-1]\n    else:\n        return tuplex[n-1:]\n",
        "test": "assert     colon_tuplex((4,5,6),1,3) == 6",
        "num_ids": 1441
    },
    {
        "number": 308,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1 or not nums2:\n        return -1\n    l1 = len(nums1)\n    l2 = len(nums2)\n    if l1 == 0 or l2 == 0:\n        return -1\n    if l1 < N or l2 < N:\n        N = max(l1, l2)\n    res = [0] * N\n    for i in range(N):\n        x = nums1[i % l1]\n        y = nums2[i % l2]\n        if x > y:\n            res[i] = x\n        else:\n            res[i] = y\n    return res\n",
        "test": "assert     large_product([1, 2, 3, 4], [1, 2, 3, 4], 3) == [1, 2, 3]",
        "num_ids": 2524
    },
    {
        "number": 309,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(5, 2)    ==    5",
        "num_ids": 848
    },
    {
        "number": 310,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    l = []\n    for i in str1:\n        l.append(i)\n    return tuple(l)\n",
        "test": "assert     string_to_tuple('ab') == ('a', 'b')",
        "num_ids": 1176
    },
    {
        "number": 311,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 0:\n        n = n & 0xffffffff\n    return n\n",
        "test": "assert     (set_left_most_unset_bit(0) == 0)",
        "num_ids": 2693
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=math.pi\n    v=pi*r**2*h/3\n    return v\n",
        "test": "assert     volume_cone(0, 10) == 0",
        "num_ids": 945
    },
    {
        "number": 388,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(2**math.ceil(math.log(n,2)))\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 781
    },
    {
        "number": 389,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n",
        "test": "assert     find_lucas(1) == 1",
        "num_ids": 986
    },
    {
        "number": 390,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n",
        "test": "assert     add_string(['{}', '{}'], '{}') == ['{}', '{}'], 'incorrect'",
        "num_ids": 2172
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return_dict = {}\n    for i in range(len(l1)):\n        return_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            return_dict[l1[i]][l2[j]] = l3[i][j]\n    return return_dict\n",
        "test": "assert convert_list_dictionary([1, 2, 3, 4, 5], ['A', 'B', 'C'], ['cat', 'dog', 'rat']) == {1: {'A': 'cat', 'B': 'dog', 'C': 'rat'}, 2: {'A': 'cat', 'B': 'dog', 'C': 'rat'}, 3: {'A': 'cat', 'B': 'dog', 'C': 'rat'}, 4: {'A': 'cat', 'B': 'dog', 'C': 'rat'}, 5: {'A': 'cat', 'B': 'dog', 'C': 'rat'}}",
        "num_ids": 3081
    },
    {
        "number": 392,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n_sum = 1\n    for i in range(2, n):\n        n_sum = max(n_sum + i, i)\n    return n_sum\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 1610
    },
    {
        "number": 393,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_len_list = i\n    return max_len_list\n",
        "test": "assert     max_length_list([[2,3],[4],[5], [1,2,3,4,5]]) == [1,2,3,4,5]",
        "num_ids": 1470
    },
    {
        "number": 394,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    t = set(test_tup)\n    return len(t) == len(test_tup)\n",
        "test": "assert     check_distinct((1, 2, 3, 4)) == True",
        "num_ids": 1042
    },
    {
        "number": 395,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    list1 = []\n    for i in str1:\n        if i not in list1:\n            list1.append(i)\n        else:\n            continue\n    return list1[0]\n",
        "test": "assert     first_non_repeating_character('s') =='s'",
        "num_ids": 1379
    },
    {
        "number": 396,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (string[0] == string[-1])\n",
        "test": "assert     check_char('a')",
        "num_ids": 2183
    },
    {
        "number": 397,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # https://docs.python.org/2/library/statistics.html\n    # https://docs.python.org/2/library/math.html\n    # https://docs.python.org/2/library/collections.html\n    return sorted([a,b,c])[1]\n",
        "test": "assert     median_numbers(0,0,0) == 0",
        "num_ids": 1305
    },
    {
        "number": 398,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum([int(i) for i in str(num)])\n    return total\n",
        "test": "assert     (sum_of_digits([]) == 0)",
        "num_ids": 1026
    },
    {
        "number": 399,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x ^ y for x, y in zip(test_tup1, test_tup2)])\n",
        "test": "assert     bitwise_xor((0, 0), (0, 1)) == (0, 1)",
        "num_ids": 1436
    },
    {
        "number": 400,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    seen = set()\n    for i in test_list:\n        if i not in seen:\n            seen.add(i)\n    return len(seen)\n",
        "test": "assert     extract_freq([])     == 0,    'empty list'",
        "num_ids": 1250
    },
    {
        "number": 401,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = tuple([t1 + t2 for t1, t2 in zip(test_tup1, test_tup2)])\n    return result_tup\n",
        "test": "assert         add_nested_tuples((1,3),(2,4)) == (1+2,3+4)",
        "num_ids": 1884
    },
    {
        "number": 404,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "test": "assert     minimum(5,5) == 5",
        "num_ids": 721
    },
    {
        "number": 405,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_tuplex(('a', 'b', 'c'), ('a', 'b', 'd')) == False, \"2nd case\"",
        "num_ids": 1377
    },
    {
        "number": 406,
        "max_answer_num": 21,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n",
        "test": "assert     find_Parity(8) == 0",
        "num_ids": 916
    },
    {
        "number": 407,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # algorithm\n    # if n is a negative number, return 0\n    # sort the digits of n\n    # take the first and last digit\n    # swap these to create the bigger number\n    # reverse the bigger number\n    # return the bigger number\n    n = abs(n)\n    # if n is a single digit, return n\n    if n < 10:\n        return n\n    else:\n        s = list(str(n))\n        s.sort()\n        return int(''.join(s[1:][::-1]) + s[0])\n",
        "test": "assert     rearrange_bigger(6) == 6",
        "num_ids": 1599
    },
    {
        "number": 408,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store the top k pairs in\n    heap = []\n    pairs = []\n    # iterate over nums1\n    for i in range(len(nums1)):\n        # iterate over nums2\n        for j in range(len(nums2)):\n            # if the current element of nums1 and nums2 are the same, skip the rest\n            if nums1[i] == nums2[j]:\n                continue\n            # push the current pair onto the heap\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            # if the heap has reached k pairs, break out of the loop\n            if len(heap) == k:\n                break\n        # if the heap has reached k pairs, break out of the loop\n        if len(heap) == k:\n            break\n    # iterate over the heap and store the pairs in the pairs array\n    while heap:\n        pairs.append(heapq.heappop(heap)[1])\n    # return the array of pairs\n    return pairs\n",
        "test": "assert     k_smallest_pairs([], [], 0) == []",
        "num_ids": 4913
    },
    {
        "number": 409,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    res = None\n    for a,b in list1:\n        if res is None:\n            res = (a,b)\n        else:\n            if a*b < res[0]*res[1]:\n                res = (a,b)\n    return res\n",
        "test": "assert     min_product_tuple([(0, 1), (2, 3), (3, 4), (4, 5), (1, 3)]) == (0, 1)",
        "num_ids": 2221
    },
    {
        "number": 410,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if(len(listval)==0):\n        return None\n    \n    min=listval[0]\n    for i in listval:\n        if(i<min):\n            min=i\n    return min\n",
        "test": "assert     min_val([1,2,3,4,5,6]) == 1",
        "num_ids": 1122
    },
    {
        "number": 411,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = \"\"\n    if word == None or word == \"\":\n        return None\n    elif word == \"\":\n        return \"\"\n    else:\n        words = word.split(\"_\")\n        for i, word in enumerate(words):\n            if i == 0:\n                result += word\n            else:\n                result += word.capitalize()\n        return result\n",
        "test": "assert     snake_to_camel('foo') == 'foo'",
        "num_ids": 1771
    },
    {
        "number": 412,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n    \n",
        "test": "assert     (remove_odd([]) == []), \"broken\"",
        "num_ids": 1642
    },
    {
        "number": 413,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        print(\"Given index is out of bounds\")\n        return\n    if n == 0:\n        print(list1[0])\n        return\n    else:\n        new_list = []\n        for i in range(0,n):\n            new_list.append(list1[i])\n        for i in range(n, len(list1)):\n            new_list.append(list1[i])\n    print(new_list)\n",
        "test": "assert     extract_nth_element([('A', 4), ('B', 2), ('C', 1)], 3)     == None",
        "num_ids": 1727
    },
    {
        "number": 414,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return 1\n    return 0\n",
        "test": "assert     overlapping(['a','b','c','d'],['a']) == True, \"overlapping\"",
        "num_ids": 1187
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 360,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m=1\n    n=1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j]>m*n:\n                m=arr[i]\n                n=arr[j]\n            elif arr[i]*arr[j]>n*m and arr[j]!=0:\n                n=arr[j]\n    return m*n\n",
        "test": "assert     [5, 6, 7, 8, -500] == max_Product([5, 6, 7, 8, -500])",
        "num_ids": 1638
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 360,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # if len(Input) > 0:\n    #     if len(Input[0]) > 0:\n    #         List_of_First_Elements = [t[0] for t in Input]\n    #         print List_of_First_Elements\n    #         print 'First element is ',max(set(List_of_First_Elements), key=List_of_First_Elements.count)\n    #     else:\n    #         print 'The input list is empty'\n    # else:\n    #     print 'The input list is empty'\n    if len(Input) > 0:\n        List_of_First_Elements = [t[0] for t in Input]\n        print List_of_First_Elements\n        print 'First element is ',max(set(List_of_First_Elements), key=List_of_First_Elements.count)\n    else:\n        print 'The input list is empty'\n",
        "test": "assert     group_tuples([(1,2,3),(2,3,4),(3,4,5)]) == (1,2,3)",
        "num_ids": 2543
    },
    {
        "number": 418,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    for item in lst: \n        if len(item) == max(len(item) for item in lst):\n            return item\n",
        "test": "assert     Find_Max(['a', 'aa', 'bb', 'cc', 'dddd', 'e']) == 'dddd'",
        "num_ids": 1416
    },
    {
        "number": 419,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = [round(x) for x in list1]\n    total = 0\n    for i in list2:\n        total += i\n    return total * len(list1)\n",
        "test": "assert     round_and_sum([]) == 0",
        "num_ids": 1739
    },
    {
        "number": 420,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            result += i ** 3\n    return result\n",
        "test": "assert     (cube_Sum(0) == 0)",
        "num_ids": 899
    },
    {
        "number": 421,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_string = ''\n    for i in test_tup:\n        new_string = new_string +'' + i\n    return new_string\n",
        "test": "assert     concatenate_tuple(('a')) == 'a'",
        "num_ids": 1565
    },
    {
        "number": 422,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0.0\n    for i in range(1,n+1):\n        cube_sum += i**3\n    average = cube_sum / n\n    return average\n",
        "test": "assert     find_Average_Of_Cube(1) ==     1 ",
        "num_ids": 1000
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    # we can also use the zip() function\n    return tuple(elem[-1] for elem in test_tuple)\n",
        "test": "assert     extract_rear((\"123\", \"456\", \"789\")) == (\"3\", \"6\", \"9\")",
        "num_ids": 1509
    },
    {
        "number": 425,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1:\n        if element == x:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([\"a\",\"b\",\"c\",\"d\",\"e\"], \"z\") == 0",
        "num_ids": 1291
    },
    {
        "number": 426,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2==1]\n",
        "test": "assert     filter_oddnumbers([]) == [], 'Empty list should return empty list'",
        "num_ids": 1937
    },
    {
        "number": 427,
        "max_answer_num": 34,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_list = dt.split('-')\n    # print (date_list)\n    return (date_list[2] + '-' + date_list[1] + '-' + date_list[0])\n",
        "test": "assert     change_date_format('2016-01-01') == '01-01-2016', change_date_format('2016-01-01')",
        "num_ids": 1663
    },
    {
        "number": 428,
        "max_answer_num": 28,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3*h+1\n    while h >= 1:\n        for i in range(h,n):\n            val = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > val:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = val\n        h = int(h/3)\n    return my_list\n",
        "test": "assert     shell_sort([4, 3, 2, 1]) == [1, 2, 3, 4], 'Failed test 1'",
        "num_ids": 5831
    },
    {
        "number": 429,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (list(zip(test_tup1, test_tup2))[0][0], list(zip(test_tup1, test_tup2))[1][0])\n    \n",
        "test": "assert     and_tuples( (1,2), (2,3) )     == (1,2)",
        "num_ids": 1570
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4 * a * c)**0.5) / (2 * a)\n",
        "test": "assert     parabola_directrix(1, 0, -1) == 1",
        "num_ids": 2691
    },
    {
        "number": 431,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert     common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == False",
        "num_ids": 1296
    },
    {
        "number": 432,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2.0\n",
        "test": "assert     median_trapezium(1,1,1) == 1",
        "num_ids": 928
    },
    {
        "number": 433,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] < number:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_greater([2,1,3,5,6,4], 5) == True",
        "num_ids": 1131
    },
    {
        "number": 434,
        "max_answer_num": 21,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.search(r'ab+', text))\n",
        "test": "assert     text_match_one(\"have an b\") == False",
        "num_ids": 812
    },
    {
        "number": 435,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0 :\n        return n % 10\n    elif n == 0 :\n        return 0\n    else :\n        return -1 * (n % -10)\n",
        "test": "assert     last_Digit(1001) == 1",
        "num_ids": 753
    },
    {
        "number": 436,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n    \ndef neg_nos2(list2):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list2 if x < 0]\n    \ndef neg_nos3(list3):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list3 if x < 0]\n    \ndef neg_nos4(list4):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list4 if x < 0]\n    \ndef neg_nos5(list5):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list5 if x < 0]\n    \ndef neg_nos6(list6):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list6 if x < 0]\n    \ndef neg_nos7(list7):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list7 if x < 0]\n    \ndef neg_nos8(list8):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list8 if x < 0]\n    \ndef neg_nos9(list9):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list9 if x < 0]\n    \ndef neg_nos10(list10):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list10 if x < 0]\n    \ndef neg_nos11(list11):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list11 if x < 0]\n    \ndef neg_nos12(list12):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list12 if x < 0]\n    \ndef neg_nos13(list13):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list13 if x < 0]\n    \ndef neg_nos14(list14):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list14 if x < 0]\n    \ndef neg_nos15(list15):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list15 if x < 0]\n    \ndef neg_nos16(list16):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list16 if x < 0]\n    \ndef neg_nos17(list17):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list17 if x < 0]\n    \ndef neg_nos18(list18):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list18 if x < 0]\n    \ndef neg_nos19(list19):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list19 if x < 0]\n    \ndef neg_nos20(list20):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list20 if x < 0]\n    \ndef neg_nos21(list21):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list21 if x < 0]\n    \ndef neg_nos22(list22):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list22 if x < 0]\n    \ndef neg_nos23(list23):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list23 if x < 0]\n    \ndef neg_nos24(list24):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list24 if x < 0]\n    \ndef neg_nos25(list25):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list25 if x < 0]\n    \ndef neg_nos26(list26):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list26 if x < 0]\n    \ndef neg_nos27(list27):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list27 if x < 0]\n    \ndef neg_nos28(list28):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list28 if x < 0]\n    \ndef neg_nos29(list29):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list29 if x < 0]\n    \ndef neg_nos30(list30):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list30 if x < 0]\n    \ndef neg_nos31(list31):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list31 if x < 0]\n    \ndef neg_nos32(list32):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list32 if x < 0]\n    \ndef neg_nos33(list33):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list33 if x < 0]\n    \ndef neg_nos34(list34):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list34 if x < 0]\n    \ndef neg_nos35(list35):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list35 if x < 0]\n    \ndef neg_nos36(list36):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list36 if x < 0]\n    \ndef neg_nos37(list37):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list37 if x < 0]\n    \ndef neg_nos38(list38):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list38 if x < 0]\n    \ndef neg_nos39(list39):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list39 if x < 0]\n    \ndef neg_nos40(list40):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list40 if x < 0]\n    \ndef neg_nos41(list41):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list41 if x < 0]\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 791
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str\n",
        "test": "assert     'a' == remove_odd('a')",
        "num_ids": 1053
    },
    {
        "number": 438,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if i[0] < i[1]:\n            count += 1\n    return count\n",
        "test": "assert         count_bidirectional( [(1, 1), (2, 1), (3, 1)] ) == 0",
        "num_ids": 3797
    },
    {
        "number": 439,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ret = 0\n    for x in L:\n        ret = ret * 10 + x\n    return ret\n",
        "test": "assert     multiple_to_single([1]) == 1",
        "num_ids": 1253
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adv_pattern = re.compile(r'adverb',re.IGNORECASE)\n    \n    #pattern = re.compile('adverb', re.IGNORECASE)\n    #pattern.findall(text)\n    \n    #adv_pattern = re.compile(r'adverb',re.IGNORECASE)\n    #pattern = r'\\b\\w{1,2}\\b'\n    #print text\n    \n    #pattern = re.compile(r'\\b\\w{1,2}\\b',re.IGNORECASE)\n    \n    #pattern = re.compile(r'\\b\\w{1,2}\\b', re.IGNORECASE)\n    #pattern = re.compile(r'\\b\\w{1,2}\\b',re.IGNORECASE)\n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #pattern = re.compile(r'\\b\\w{1,2}\\b', re.IGNORECASE)\n    \n    #pattern = re.compile(r'\\b\\w{1,2}\\b',re.IGNORECASE)\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n",
        "test": "assert     find_adverb_position('the cat is on the table') == ['on', [5, 6, 7]]",
        "num_ids": 6601
    },
    {
        "number": 441,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import numpy as np\n    surfacearea = 6*l**2\n    return surfacearea\n",
        "test": "assert     surfacearea_cube(0)     == 0",
        "num_ids": 641
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>0:\n            count+=1\n    return (count/len(nums))*100\n",
        "test": "assert     positive_count([-5,-5,-5,-5,-5,-5]) == 0",
        "num_ids": 1462
    },
    {
        "number": 443,
        "max_answer_num": 21,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1=sorted(list1, reverse = True)\n    maxi=-1\n    for each in list1:\n        if each<0:\n            maxi=each\n    return maxi\n",
        "test": "assert     largest_neg([10, -2, 9, 8, 7, 6, 5, 4, 3, -2, 1]) == -2",
        "num_ids": 1825
    },
    {
        "number": 444,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    ret_list = []\n    for i in test_list:\n        ret_list.append(i[:K])\n    return ret_list\n",
        "test": "assert     trim_tuple([(1,2,3),(4,5,6),(7,8,9)], 3)    == [(1,2,3),(4,5,6),(7,8,9)]",
        "num_ids": 1860
    },
    {
        "number": 445,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    assert isinstance(test_tup1, tuple)\n    assert isinstance(test_tup2, tuple)\n    assert len(test_tup1) == len(test_tup2)\n    return tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n",
        "test": "assert     index_multiplication((1, 2, 3), (5, 6, 7)) == (5, 12, 21)",
        "num_ids": 1752
    },
    {
        "number": 446,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    return len([x for x in lst if x in tup]) \n",
        "test": "assert     (count_Occurrence((1,2,3,4), [1,2,3,4]) == 4)",
        "num_ids": 3667
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n",
        "test": "assert     cube_nums([]) == []",
        "num_ids": 3316
    },
    {
        "number": 448,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0 \n    for i in range(n):\n        result += i + 1\n    return result \n",
        "test": "assert     cal_sum(0) == 0     ",
        "num_ids": 899
    },
    {
        "number": 450,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 390,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) <= l:\n        return str\n    else:\n        return str[0:l]\n",
        "test": "assert     extract_string('abcdefg',3) == 'abc'",
        "num_ids": 3537
    },
    {
        "number": 451,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n",
        "test": "assert     remove_whitespaces(\"abcd\") == \"abcd\"",
        "num_ids": 908
    },
    {
        "number": 452,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    return 0\n",
        "test": "assert     (loss_amount(10,10) == 0)",
        "num_ids": 686
    },
    {
        "number": 453,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    if n < 2 :\n        return 0\n    if n == 2 :\n        return 2\n    if n % 2 == 0 :\n        total += n/2\n        return total + sumofFactors(n/2)\n    else :\n        for i in range(1,math.ceil(math.sqrt(n)) + 1) :\n            if n % i == 0 :\n                total += i\n                if (n/i)!= i :\n                    total += n/i\n        return total\n",
        "test": "assert     (sumofFactors(0) == 0)",
        "num_ids": 1198
    },
    {
        "number": 454,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    reg = re.compile(r'\\b(.*z.*)\\b', re.IGNORECASE)\n    result = re.search(reg, text)\n    if result:\n        return result.group(1)\n    else:\n        return None\n",
        "test": "assert     text_match_wordz('HeLLo, I AM IYOu') == None",
        "num_ids": 1164
    },
    {
        "number": 455,
        "max_answer_num": 29,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 > 0 and monthnum2 < 13\n",
        "test": "assert     check_monthnumb_number(1) is True",
        "num_ids": 1196
    },
    {
        "number": 456,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = [str(x) for x in stringlist]\n    stringlist = stringlist[::-1]\n    return stringlist\n",
        "test": "assert     reverse_string_list(['h']) == ['h']",
        "num_ids": 1309
    },
    {
        "number": 457,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #Base Case: If the list is empty, return None\n    if lst == []: \n        return None\n    #Find the minimum element in the list\n    min = lst[0]\n    for element in lst:\n        if element < min:\n            min = element\n    #Return the minimum element\n    return min\n",
        "test": "assert     Find_Min([[1, 2, 3, 4, 5], [3, 4, 6, 7, 8], [9, 10, 11, 12, 13], [13, 14, 15, 16, 17], [19, 20, 21, 22, 23]]) == [1, 2, 3, 4, 5], \"Test 1 failed\"",
        "num_ids": 3504
    },
    {
        "number": 458,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(2,3) == 6",
        "num_ids": 689
    },
    {
        "number": 459,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str=''\n    for char in str1:\n        if char.isalpha()==True:\n            new_str=new_str+char\n    return new_str\n",
        "test": "assert     remove_uppercase('hello') == 'hello'",
        "num_ids": 3140
    },
    {
        "number": 460,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst] \n",
        "test": "assert     Extract([['a'], ['b', 'c'], ['d', 'e', 'f']]) == ['a', 'b', 'd']",
        "num_ids": 1398
    },
    {
        "number": 461,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr('') == 0",
        "num_ids": 827
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combination_helper(list1, tmp_list, n, k):\n        if k == 0:\n            return\n        if len(tmp_list) == n:\n            result_list.append(tmp_list)\n            return\n        for i in range(len(list1)):\n            combination_helper(list1[i+1:], tmp_list+[list1[i]], n, k-1)\n    result_list = []\n    combination_helper(list1, [], len(list1), 2)\n    return result_list\n",
        "test": "assert     combinations_list([1, 2, 3]) == [], 'Test 2 failed'",
        "num_ids": 5706
    },
    {
        "number": 463,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return None\n    \n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        # if previous number is negative, multiply it with max ending here,\n        # instead of adding it\n        if arr[i-1] < 0:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n            \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n",
        "test": "assert     max_subarray_product([0]) == 0",
        "num_ids": 5888
    },
    {
        "number": 464,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    if len(dict) == 0:\n        return False\n    if not all(dict.values()):\n        return False\n    else:\n        return True\n",
        "test": "assert     check_value({'a': 1, 'b': 1, 'c': 1}, 1)",
        "num_ids": 1298
    },
    {
        "number": 465,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1.keys():\n        if dict1[item] == {}:\n            del dict1[item]\n    return dict1\n",
        "test": "assert         drop_empty({}) == {}",
        "num_ids": 1619
    },
    {
        "number": 468,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        min_ending_here = arr[0]\n        min_so_far = arr[0]\n        for i in range(1,n):\n            max_ending_here = max(arr[i],max_ending_here*arr[i])\n            min_ending_here = min(arr[i],min_ending_here*arr[i])\n            max_so_far = max(max_so_far,max_ending_here)\n            min_so_far = min(min_so_far,min_ending_here)\n        return max_so_far\n",
        "test": "assert     max_product([3,1,2]) == 6",
        "num_ids": 1809
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n",
        "test": "assert         add_pairwise( (5, 5) ) ==         (10, 10)",
        "num_ids": 1575
    },
    {
        "number": 471,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a%b)\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return (arr[0] * arr[1]) % n\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = (res * arr[i]) % n\n    return res\n",
        "test": "assert     find_remainder([1, 2, 3], 10) == 6",
        "num_ids": 4991
    },
    {
        "number": 472,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    def is_consecutive(l):\n        l.sort()\n        if(len(l) == 1):\n            return True\n        else:\n            for i in range(1,len(l)):\n                if(l[i] - l[i-1]!= 1):\n                    return False\n            return True\n    l = [int(i) for i in l]\n    return is_consecutive(l)\n",
        "test": "assert     check_Consecutive([1,2,3,4,5,6,7,8]) == True",
        "num_ids": 1452
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list3 = []\n    for item in test_list1:\n        if item in test_list2:\n            test_list3.append(item)\n    return test_list3\n",
        "test": "assert     [(1, 2), (2, 4), (3, 6), (5, 8), (8, 10), (10, 12), (12, 14)] == tuple_intersection([(1, 2), (2, 4), (3, 6), (5, 8), (8, 10), (10, 12), (12, 14)], [(1, 2), (2, 4), (3, 6), (5, 8), (8, 10), (10, 12), (12, 14)])",
        "num_ids": 1876
    },
    {
        "number": 474,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = str1\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr = newstr[:i]+newch+newstr[i+1:]\n    return newstr\n",
        "test": "assert     replace_char(\"Test\",\"x\",\"a\") == \"Test\"",
        "num_ids": 926
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n",
        "test": "assert     sort_counter({'c':1,'b':2,'a':3}) ==     [('a',3),('b',2),('c',1)]",
        "num_ids": 3447
    },
    {
        "number": 476,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n",
        "test": "assert     big_sum([1]) == 1",
        "num_ids": 962
    },
    {
        "number": 477,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of the given number n.\n    '''\n    res = 1\n    for i in range(1,n+1):\n        res = res * i\n    return res\n",
        "test": "assert     is_lower('C++')",
        "num_ids": 654
    },
    {
        "number": 478,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if str1.islower() == True:\n        str1 = str1.lower()\n        return str1\n    else:\n        return str1\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all the digits from a given string.\n    '''\n    return re.sub(r'\\d', '', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all the punctuations from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', str1)\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove all the stopwords from a given string.\n    '''\n    stopwords = ['a','an','and','are','as','at','be','but','by','can','dont','didnt',\\\n    'do','does','doesnt','doing','dont','for','from','get','got','hadnt','hasnt',\\\n    'has','had','hasnt','have','he','he\\'d','he\\'ll','he\\'s','her','here','heres',\\\n    'here\\'s','hers','herself','him','himself','his','how','how\\'d','how\\'ll','how\\'s',\\\n    'i','i\\'d','i\\'ll','i\\'m','i\\'ve','if','in','into','is','isnt','it','it\\'s','its',\\\n    'it\\'s','its','itself','lets','me','more','most','mustnt','my','myself','neither',\\\n    'no','nor','not','of','off','on','once','only','or','other','ought','our','ours',\\\n    'ourselves','out','over','own','same','she','she\\'d','she\\'ll','she\\'s','should','shouldnt',\\\n    'shall','shouldn','shouldnt','so','some','such','than','that','that\\'s','the','their',\\\n    'theirs','them','themselves','then','there','there\\'s','these','they','they\\'d','they\\'ll',\\\n    'they\\'re','they\\'ve','this','those','through','to','too','under','until','up','very',\\\n    'very','was','wasnt','we','we\\'d','we\\'ll','we\\'re','we\\'ve','were','werent',\\\n    'what','what\\'s','when','when\\'s','where','where\\'s','which','while','who','who\\'s',\\\n    'whom','why','will','with','won\\'t','would','wouldnt','you','you\\'d','you\\'ll','you\\'re',\\\n    'you\\'ve','your','yours','yourself','yourselves']\n    return''.join([word for word in str1.split() if word not in stopwords])\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove all the whitespaces from a given string.\n    '''\n    return re.sub(r'\\s', '', str1)\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all the numbers from a given string.\n    '''\n    return re.sub(r'\\d', '', str1)\ndef clean_sentence(str1):\n    '''\n    Write a function to clean the given string.\n    '''\n    str1 = remove_punctuation(str1)\n    str1 = remove_lowercase(str1)\n    str1 = remove_numbers(str1)\n    str1 = remove_whitespace(str1)\n    return str1\ndef is_anagram(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    str1 = remove_punctuation(str1)\n    str2 = remove_punctuation(str2)\n    str1 = remove_lowercase(str1)\n    str2 = remove_lowercase(str2)\n    str1 = remove_numbers(str1)\n    str2 = remove_numbers(str2)\n    str1 = remove_whitespace(str1)\n    str2 = remove_whitespace(str2)\n    str1 = sorted(str1.split(' '))\n    str2 = sorted(str2.split(' '))\n    return str1 == str2\ndef to_hex(dec):\n    '''\n    Write a function to convert an integer to hexadecimal.\n    '''\n    if dec > 255:\n        return 'Error'\n    elif dec == 0:\n        return '0'\n    else:\n        hex_dict = {10:'a', 11:'b', 12:'c', 13:'d', 14:'e', 15:'f'}\n        hex_num = ''\n        while dec > 0:\n            remainder = dec % 16\n            if remainder > 9:\n                hex_num = hex_dict[remainder] + hex_num\n            else:\n                hex_num = str(remainder) + hex_num\n            dec = int(dec/16)\n        return hex_num\ndef to_hex_digit(dec):\n    '''\n    Write a function to convert a hexadecimal digit to its decimal value.\n    '''\n    if dec < 0 or dec > 9:\n        return 'Error'\n    else:\n        return dec\ndef hex_to_int(str1):\n    '''\n    Write a function to convert a hexadecimal string to its integer equivalent.\n    '''\n    if str1 == '' or str1 == None:\n        return 0\n    elif str1[0] == '0':\n        return int(str1, 16)\n    else:\n        hex_dict = {'a':10, 'b':11, 'c':12, 'd':13, 'e':14, 'f':15}\n        dec = 0\n        digit_len = len(str1)\n        for i in range(digit_len):\n            digit = str1[digit_len-1-i]\n            if digit not in hex_dict.keys():\n                return 0\n            dec += hex_dict[digit]*(16**i)\n        return dec\ndef to_base(dec, base):\n    '''\n    Write a function to convert a decimal integer to a given base.\n    '''\n    if dec < 0:\n        return 'Error'\n    elif dec == 0:\n        return 0\n    else:\n        remainder = ''\n        while dec > 0:\n            remainder = str(dec % base) + remainder\n            dec = int(dec/base)\n        return remainder\ndef to_base_digit(dec, base):\n    '''\n    Write a function to convert a decimal integer to a given base.\n    '''\n    if dec < 0 or dec > 9:\n        return 'Error'\n    else:\n        return dec\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    str1 = remove_punctuation(str1)\n    str1 = remove_lowercase(str1)\n    str1 = remove_numbers(str1)\n    str1 = remove_whitespace(str1)\n    str1 = sorted(str1.split(' '))\n    return str1 == str1[::-1]\ndef is_anagram_sorted(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    str1 = remove_punctuation(str1)\n    str1 = remove_lowercase(str1)\n    str1 = remove_numbers(str1)\n    str1 = remove_whitespace(str1)\n    str2 = remove_punctuation(str2)\n    str2 = remove_lowercase(str2)\n    str2 = remove_numbers(str2)\n    str2 = remove_whitespace(str2)\n    str1 = sorted(str1.split(' '))\n    str2 = sorted(str2.split(' '))\n    return str1 == str2\ndef is_anagram_dict(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    str1 = remove_punctuation(str1)\n    str1 ",
        "test": "assert     re.sub(r'([a-z])', r'', remove_lowercase('A')) == 'A'",
        "num_ids": 1101
    },
    {
        "number": 479,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<10 :\n        return n\n    else :\n        return first_Digit(n//10)\n",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 749
    },
    {
        "number": 554,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    l=[]\n    for x in list:\n        if x%2==1:\n            l.append(x)\n    return l\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]",
        "num_ids": 1762
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # the sum of the cubes of the first n natural numbers is given by:\n    # sum = n*(n+1)*(n+2)*(n+3)\n    # so the sum of the first n natural numbers is given by:\n    # sum = ((n+1)*n/2)**2\n    # therefore, the difference is given by:\n    # sum - ((n+1)*n/2)**2 = n**3 + (n**2/2)**2 - (n**2/2)**2\n    # sum - (n**3/2) = n**3 + n**2 - n**2\n    # so the difference is given by:\n    # n**3 - (n**2/2) = n**3\n    # and the difference is given by:\n    # n**3 - n**2 = n**3\n    # so the difference is:\n    # n**3 - n**2 = n**3\n    return n**3 - n**2\n",
        "test": "assert     difference(1) == 0",
        "num_ids": 2958
    },
    {
        "number": 556,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i = 0\n    count = 0\n    while i<N : \n        if A[i]&1==1 : \n            count+=1\n        i+=1\n    return count\n",
        "test": "assert     find_Odd_Pair( [0,0,0,0],3) == 0",
        "num_ids": 1363
    },
    {
        "number": 557,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('welcome') == 'WELCOME'",
        "num_ids": 948
    },
    {
        "number": 558,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1))!= len(str(n2)):\n        return 1\n    for i in range(len(str(n1))):\n        if int(str(n1)[i])!= int(str(n2)[i]):\n            return 1\n    return 0\n",
        "test": "assert     digit_distance_nums(123, 123) == 0",
        "num_ids": 1012
    },
    {
        "number": 559,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0 or len(a) == 0:\n        return 0\n    max_sum = a[0]\n    s = a[0]\n    for i in range(size):\n        if s < 0:\n            s = a[i]\n        else:\n            s = s + a[i]\n        if s > max_sum:\n            max_sum = s\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7) == 7",
        "num_ids": 3345
    },
    {
        "number": 560,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result_tup = ()\n    for item in test_tup1:\n        if item not in test_tup2:\n            result_tup = result_tup + (item,)\n    for item in test_tup2:\n        if item not in test_tup1:\n            result_tup = result_tup + (item,)\n    return result_tup\n    #return sorted(set(test_tup1) | set(test_tup2))\n",
        "test": "assert     union_elements(('a', 'b'), ('c', 'd')) == ('a', 'b', 'c', 'd')",
        "num_ids": 1384
    },
    {
        "number": 562,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    print(lst)\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return 1\n    else:\n        return Find_Max_Length(lst[1:]) + 1\n",
        "test": "assert     Find_Max_Length([]) == 0",
        "num_ids": 4201
    },
    {
        "number": 563,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall(r'\"([^\"]*)\"', text)\n    return result\n",
        "test": "assert     extract_values('\"hello\" world') == ['hello']",
        "num_ids": 3331
    },
    {
        "number": 564,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    sorted_arr = sorted(arr)\n    i = 0\n    j = len(arr)-1\n    count = 0\n    while i < j:\n        if sorted_arr[i] == sorted_arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n    return count\n",
        "test": "assert     count_Pairs([1,2,3,4],0) == 0",
        "num_ids": 1421
    },
    {
        "number": 565,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert     split('string') == ['s', 't', 'r', 'i', 'n', 'g']",
        "num_ids": 2931
    },
    {
        "number": 566,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 782
    },
    {
        "number": 567,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([1,2,3,4]) == True, \"issort_list([1,2,3,4]) == True\"",
        "num_ids": 3217
    },
    {
        "number": 568,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert         empty_list(3) == [{}, {}, {}]",
        "num_ids": 585
    },
    {
        "number": 569,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # We assume that every sublist is of the same length\n    for i in range(1,len(list1)):\n        current_i = i\n        while current_i > 0:\n            if len(list1[current_i]) < len(list1[current_i - 1]):\n                list1[current_i], list1[current_i - 1] = list1[current_i - 1], list1[current_i]\n                current_i -= 1\n            else:\n                break\n    return list1\n",
        "test": "assert     sort_sublists([['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l']]) == [['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l']]",
        "num_ids": 2755
    },
    {
        "number": 572,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for num in nums:\n        if num not in unique:\n            unique.append(num)\n    return unique\n",
        "test": "assert     two_unique_nums([]) == []",
        "num_ids": 3995
    },
    {
        "number": 573,
        "max_answer_num": 29,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    product = 1\n    for number in list_data:\n        if number not in unique_list:\n            unique_list.append(number)\n    for number in unique_list:\n        product = product * number\n    return product\n",
        "test": "assert     unique_product([]) == 1",
        "num_ids": 1317
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*(r+h)\n",
        "test": "assert     surfacearea_cylinder(2,2) == 4*math.pi*math.pow(2,2)",
        "num_ids": 927
    },
    {
        "number": 576,
        "max_answer_num": 28,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True\n",
        "test": "assert     not is_Sub_Array([1,2,3], [4,5])",
        "num_ids": 1768
    },
    {
        "number": 577,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0 or n == 1: \n        return 1\n    else: \n        return (n % 10) * last_Digit_Factorial(n // 10)\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 975
    },
    {
        "number": 578,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    return [x for z in zip(list1, list2, list3) for x in z]\n",
        "test": "assert     interleave_lists([], [], []) == []",
        "num_ids": 1914
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar_tup.append((elem1, elem2))\n    return dissimilar_tup\n",
        "test": "assert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c')) == []",
        "num_ids": 2181
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = filter(lambda x: x[1]%2==0, test_tuple)\n    test_tuple = map(lambda x: x[0], test_tuple)\n    return even_fnc(test_tuple)\n",
        "test": "assert     even_ele(('A',1,'B',3,'A'), even_fnc) == ('A',1)",
        "num_ids": 1369
    },
    {
        "number": 581,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = b * s\n    return s\n",
        "test": "assert     surface_Area(6,3) == 18.0",
        "num_ids": 861
    },
    {
        "number": 582,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert     not my_dict({1:2})",
        "num_ids": 652
    },
    {
        "number": 583,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    return catalan_number(num - 1) + catalan_number(num - 2)\n",
        "test": "assert     catalan_number(1)     == 1",
        "num_ids": 1164
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    # pattern = re.compile('\\w*ly$')\n    # if re.search(pattern, text):\n    #     return True\n    # else:\n    #     return False\n    #\n    # print(re.search(pattern,text))\n    \n    text = re.sub('\\s','',text)\n    pattern = re.compile('ly$')\n    # print(text)\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n",
        "test": "assert     find_adverbs(\"\") == 0",
        "num_ids": 7301
    },
    {
        "number": 585,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    #heapq.heapify(items)\n    for item in items:\n        heapq.heappush(heap,item)\n    #print(heap)\n    return heapq.nlargest(n,heap)\n",
        "test": "assert     (expensive_items([10,3,7,2,1,9],0) == [])",
        "num_ids": 2399
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    k, m = divmod(len(l), n)\n    return l[:k*(n-m)] + l[k*(n-m):]\n",
        "test": "assert     split_Arr([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "num_ids": 1779
    },
    {
        "number": 587,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     (list_tuple([]) == ())",
        "num_ids": 888
    },
    {
        "number": 588,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([1, -1, -5, 3]) == 8",
        "num_ids": 999
    },
    {
        "number": 589,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    b = int(b)\n    a = int(a)\n    result = []\n    for i in range(a, b):\n        if i*i == i:\n            result.append(i)\n    return result\n",
        "test": "assert     perfect_squares(3, 4) == []",
        "num_ids": 1410
    },
    {
        "number": 590,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\n",
        "test": "assert     polar_rect(0,0) == (0,0)",
        "num_ids": 1210
    },
    {
        "number": 591,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "test": "assert     swap_List([1,2,3,4,5]) == [5,2,3,4,1], 'incorrect'",
        "num_ids": 1085
    },
    {
        "number": 592,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(min(k,n-k)):\n        res = res * (n-i)\n        res = res // (i+1)\n    return res\n",
        "test": "assert     binomial_Coeff(1,1) == 1",
        "num_ids": 1113
    },
    {
        "number": 593,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.match('^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$',ip):\n        return ip\n    return re.sub('^0*(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$','\\\\1.\\\\2.\\\\3.\\\\4',ip)\n",
        "test": "assert     removezero_ip('1.2.3.4') == '1.2.3.4'",
        "num_ids": 1326
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = (list1[0] - list1[1])\n    return diff\n",
        "test": "assert     diff_even_odd([2, 4, 6, 8]) == -2",
        "num_ids": 1276
    },
    {
        "number": 595,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count+=1\n            str1 = str1[:i] + '0' + str1[i+1:]\n            str2 = str2[:i] + '1' + str2[i+1:]\n    return count\n",
        "test": "assert     min_Swaps(\"1011010101100\",\"1011010101100\") == 0",
        "num_ids": 1481
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n",
        "test": "assert     tuple_size(()) == 0",
        "num_ids": 6868
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while True:\n        if i == len(arr1):\n            return arr2[j + k - 1]\n        elif j == len(arr2):\n            return arr1[i + k - 1]\n        elif k == 1:\n            return min(arr1[i], arr2[j])\n        if k > 1:\n            if arr1[i] > arr2[j]:\n                j += 1\n                k -= 1\n            else:\n                i += 1\n                k -= 1\n",
        "test": "assert     find_kth([1,2,3,4], [4,5,6], 4) == 4",
        "num_ids": 1929
    },
    {
        "number": 598,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_of_digits = len(str(number))\n    #sum_of_digits = sum(int(digit)**number_of_digits for digit in str(number))\n    sum_of_digits = sum(digit**number_of_digits for digit in map(int, str(number)))\n    return number == sum_of_digits\n",
        "test": "assert     not armstrong_number(999)",
        "num_ids": 1288
    },
    {
        "number": 599,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    num = 1\n    while num <= number:\n        total += num\n        num += 1\n    return total, total/number\n",
        "test": "assert     sum_average(1) == (1,1)",
        "num_ids": 913
    },
    {
        "number": 600,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n == 1 : \n        return False \n    for i in range(2, n) : \n        if n % i == 0 : \n            return False \n    return True\n",
        "test": "assert     is_Even(10) == True",
        "num_ids": 705
    },
    {
        "number": 602,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 is None:\n        return None\n    if len(str1) <= 1:\n        return str1\n    \n    dic = {}\n    for i in range(0, len(str1)):\n        if str1[i] in dic:\n            return str1[i]\n        else:\n            dic[str1[i]] = 1\n    return None\n",
        "test": "assert     first_repeated_char('kamal') == 'a'",
        "num_ids": 1270
    },
    {
        "number": 603,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    from math import sqrt\n    lucids = []\n    for i in range(1, int(sqrt(n)) + 1):\n        if i**2 == n:\n            lucids.append(i)\n        else:\n            if i**2 > n:\n                break\n            elif i**2 < n and (i + 1)**2 > n:\n                lucids.append(i)\n            else:\n                lucids += get_ludic(n - i**2)\n    return sorted(lucids)\n",
        "test": "assert     get_ludic(1) == [1]",
        "num_ids": 1683
    },
    {
        "number": 604,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    # print words\n    new_word = []\n    for i in words[::-1]:\n        new_word.append(i)\n    return \" \".join(new_word)\n",
        "test": "assert     reverse_words('   ') == '', 'Failed'",
        "num_ids": 1250
    },
    {
        "number": 605,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the given number is a prime number\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    \n    \ndef bunnies(n):\n    '''\n    You have n bunnies and you want to give them to other bunnies. Each bunny has\n    to find a way to do that.\n    \n    Bunnies can just give the bunnies the bunny with a higher number.\n    \n    You know that there are bunnies with number 1, 2, 3, 4 and 5.\n    \n    It is not enough to find a way to give the bunnies. How many bunnies will be\n    given to each bunny (3, 4 or 5)?\n    \n    Example:\n    \n    Given:\n    - n = 5\n    \n    Return:\n    - 1\n    - 2\n    - 3\n    - 4\n    - 5\n    '''\n    if n <= 0:\n        return []\n    # Create a list with the given number of bunnies\n    bunnies = [1] * n\n    # Check if the bunnies are given to the right bunnies\n    for i in range(2, n + 1):\n        # Loop through all bunnies\n        for j in range(2, i):\n            # If the bunnies are given to the right bunnies\n            if i % j == 0:\n                # Remove the bunnies that are given to the right bunnies\n                bunnies[i - j] -= 1\n                break\n    # Return the number of bunnies that are given to the right bunnies\n    return bunnies\n    \n",
        "test": "assert not prime_num(10)",
        "num_ids": 1292
    },
    {
        "number": 606,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "test": "assert     radian_degree(degree = 90) == 1.5707963267948966, \"90 degree is 1.5707963267948966\"",
        "num_ids": 979
    },
    {
        "number": 607,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text).group(), re.search(pattern, text).start(), re.search(pattern, text).end()\n",
        "test": "assert     re.findall(r'\\s','') == [], 'Do not remove the spaces'",
        "num_ids": 1515
    },
    {
        "number": 608,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a,b = 0,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\n",
        "test": "assert     bell_Number(5) == bell_Number(5)",
        "num_ids": 783
    },
    {
        "number": 610,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return list1\n    \n    first = list1[0]\n    list2 = [first]\n    for i in range(1,len(list1)):\n        if i!= L:\n            list2.append(list1[i])\n    return list2\n",
        "test": "assert     remove_kth_element([1,2,3,4,5], 2) == [1,2,4,5]",
        "num_ids": 1809
    },
    {
        "number": 611,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([max(sublist) for sublist in test_list])\n",
        "test": "assert     max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 3) == 9",
        "num_ids": 1580
    },
    {
        "number": 612,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for i in range(len(lst)):\n        res.append([lst[i][0],lst[i][1]])\n    return res\n",
        "test": "assert     merge([[1, 2], [2, 3]])     == [[1, 2], [2, 3]]",
        "num_ids": 2597
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = []\n    for index, value in enumerate(test_list):\n        if index == 0:\n            cumulative_sum.append(value)\n        else:\n            cumulative_sum.append(cumulative_sum[index - 1] + value)\n    return cumulative_sum\n",
        "test": "assert     cummulative_sum([0,0,0,0,0,0]) == [0,0,0,0,0,0]",
        "num_ids": 1530
    },
    {
        "number": 615,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in nums:\n        average_list.append(sum(i) / len(i))\n    return average_list\n    \n    ",
        "test": "assert     average_tuple([(1,2),(3,4)]) == [1.5, 3.5]",
        "num_ids": 1750
    },
    {
        "number": 616,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    return result\n",
        "test": "assert     (0, 1) == tuple_modulo((0, 1), (1, 2))",
        "num_ids": 1817
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d < 0: \n        return 0\n    if d == 0: \n        return 1\n    if d > steps: \n        return 0\n    if d == steps: \n        return 1\n    return 1 + min_Jumps(steps, d + steps) + min_Jumps(steps, d - steps)\n",
        "test": "assert     min_Jumps(1, 0) == 1",
        "num_ids": 3353
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n",
        "test": "assert     div_list([1,2,3],[4,5,6]) == [1/4, 2/5, 3/6]",
        "num_ids": 1338
    },
    {
        "number": 619,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str_list = list(test_str)\n    length = len(test_str_list)\n    pos = 0\n    \n    for i in range(length):\n        if not test_str_list[i].isdigit():\n            pos = i\n            break\n    \n    while pos < length:\n        test_str_list[pos], test_str_list[length-1] = test_str_list[length-1], test_str_list[pos]\n        pos += 1\n        length -= 1\n    \n    return ''.join(test_str_list)\n",
        "test": "assert     move_num('Z2') == '2Z', 'Failed test for move_num'",
        "num_ids": 3820
    },
    {
        "number": 620,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n    \ndef lcs(x, y):\n    '''\n    Return the length of the longest common substrings of the two strings x and y.\n    '''\n    m = len(x)\n    n = len(y)\n    dp = [[0 for i in range(n + 1)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if x[i - 1] == y[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n",
        "test": "assert     largest_subset([1,2,3,4,5,6]) == 3",
        "num_ids": 2183
    },
    {
        "number": 622,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2 == 0:\n        return (arr1[n//2] + arr2[n//2-1])/2\n    else:\n        return arr1[n//2]\n",
        "test": "assert     get_median([1], [1], 1) == 1",
        "num_ids": 1670
    },
    {
        "number": 623,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n",
        "test": "assert     nth_nums([1, 2, 3], 2) == [1, 4, 9]",
        "num_ids": 982
    },
    {
        "number": 624,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string[0].isupper():\n        return True\n    else:\n        return False\n",
        "test": "assert     is_upper('HELLO') == True",
        "num_ids": 775
    },
    {
        "number": 625,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Using list slicing to swap the first and last element\n    return newList[-1:]+newList[1:-1]+newList[:1]\n",
        "test": "assert     swap_List([1,2]) == [2,1], 'incorrect'",
        "num_ids": 1511
    },
    {
        "number": 626,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import sqrt\n    return sqrt( r * r * r - (r * r - 3 * r) * (r * r - 3 * r) ) / 2\n    \n",
        "test": "assert     triangle_area(0) == 0",
        "num_ids": 976
    },
    {
        "number": 627,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start >= end:\n        return start\n    mid = (end-start)//2 + start\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n",
        "test": "assert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12]) == 11",
        "num_ids": 1919
    },
    {
        "number": 628,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split())\n",
        "test": "assert     replace_spaces('i') == 'i'",
        "num_ids": 1039
    },
    {
        "number": 629,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for x in list:\n        if x%2 == 0:\n            even_numbers.append(x)\n    return even_numbers\n",
        "test": "assert     [x for x in range(10) if x%2==0]     == [0, 2, 4, 6, 8]",
        "num_ids": 3121
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for row in range(ele[0]-1, ele[0]+2):\n        for col in range(ele[1]-1, ele[1]+2):\n            if (row, col)!= ele:\n                adj.append((row, col))\n    return adj\n",
        "test": "assert ",
        "num_ids": 2203
    },
    {
        "number": 631,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\")\n    #return text.replace(\"_\",\" \")\n",
        "test": "assert     replace_spaces('hello') == 'hello'",
        "num_ids": 3002
    },
    {
        "number": 632,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #return list(filter(lambda x: x!=0,num_list))+[0]*(len(num_list)-len(list(filter(lambda x: x!=0,num_list))))\n    return [i for i in num_list if i!=0]+[0]*(len(num_list)-len(list(filter(lambda x: x!=0,num_list))))\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 2203
    },
    {
        "number": 633,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    m=0\n    for i in range(n):\n        for j in range(i+1,n):\n            m=m^arr[i]^arr[j]\n    return m\n",
        "test": "assert     pair_xor_Sum([1,2,3,4,5],0) == 0",
        "num_ids": 1493
    },
    {
        "number": 635,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     [-2, -1, 0, 1, 4, 6, 9, 11, 15] == heap_sort([15, 9, 11, 6, 4, 1, 0, -1, -2])",
        "num_ids": 2963
    },
    {
        "number": 637,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount: \n        return False\n    else: \n        return True\n",
        "test": "assert     noprofit_noloss(9.0,5.0)    == False",
        "num_ids": 1042
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_mod = v/3.6\n    a = 13.12 + (0.6215*t) - (11.37*(v_mod**0.16)) + (0.3965*(t**2))\n    return round(a)\n",
        "test": "assert     wind_chill(0, 35.1) == 35.0",
        "num_ids": 1523
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n    return sum([len(x) for x in sample_names if x[0].isupper()])\n    \n    \ndef sample_nam1(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(x) for x in sample_names if x[0].isupper())\n    \n    \ndef sample_nam2(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam3(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(x) for x in sample_names if x[0].isupper())\n    \n    \ndef sample_nam4(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam5(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam6(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam7(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam8(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam9(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam10(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam11(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam12(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam13(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam14(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam15(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam16(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam17(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam18(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam19(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam20(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam21(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam22(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam23(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam24(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam25(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    ",
        "test": "assert     sample_nam(['Arnold', 'Arnold', 'Arnold', 'Arnold', 'Arnold']) == 30",
        "num_ids": 1627
    },
    {
        "number": 640,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items[0] == '(':\n        del items[0]\n    if items[-1] == ')':\n        del items[-1]\n    return ''.join(items)\n",
        "test": "assert     remove_parenthesis('abc') == 'abc'",
        "num_ids": 1327
    },
    {
        "number": 641,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 896
    },
    {
        "number": 643,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]','',text)\n    for word in text.split():\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    return False\n",
        "test": "assert     text_match_wordz_middle('') == False",
        "num_ids": 1175
    },
    {
        "number": 644,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input\n    return input[len(input) - k : ] + input[ : len(input) - k ] \n",
        "test": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5], \"reverse_Array_Upto_K() fails for the given example\"",
        "num_ids": 3914
    },
    {
        "number": 720,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n",
        "test": "assert     add_dict_to_tuple(tuple(), {}) == tuple()",
        "num_ids": 1862
    },
    {
        "number": 721,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    table = [ [0 for i in range(len(cost[0]))] for j in range(len(cost))]\n    for i in range(len(cost)):\n        table[i][0] = cost[i][0]\n    for j in range(1,len(cost[0])):\n        table[0][j] = table[0][j-1] + cost[0][j]\n    for i in range(1,len(cost)):\n        table[i][0] = table[i-1][0] + cost[i][0]\n    for i in range(1,len(cost)):\n        for j in range(1,len(cost[0])):\n            table[i][j] = min(table[i-1][j-1],table[i-1][j],table[i][j-1]) + cost[i][j]\n    return table[-1][-1]/len(cost)\n",
        "test": "assert     maxAverageOfPath([[1,1,1],[1,1,1],[1,1,1]]) == 1.0",
        "num_ids": 3848
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = {}\n    for student in students:\n        if students[student][0] >= h and students[student][1] >= w:\n            filtered_students[student] = students[student]\n    return filtered_students\n",
        "test": "assert     filter_data({'Mark':(170.0,70.0),'Matt':(160.0,60.0),'Jennifer':(185.0,70.0)},160.0,60.0) == {'Mark':(170.0,70.0),'Matt':(160.0,60.0),'Jennifer':(185.0,70.0)}",
        "num_ids": 5414
    },
    {
        "number": 723,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    num1, num2 = nums1, nums2\n    if len(num1)!= len(num2):\n        raise ValueError('lists have different length')\n    else:\n        count = 0\n        for i in range(len(num1)):\n            if num1[i] == num2[i]:\n                count += 1\n        return count\n",
        "test": "assert     count_same_pair([], []) == 0, 'Failed'",
        "num_ids": 1841
    },
    {
        "number": 724,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return int(sum([(int(i) ** power) for i in str(base)]))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     power_base_sum(4, 1) == 4",
        "num_ids": 3049
    },
    {
        "number": 725,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\\\"([^\"]*)\\\"', text1)\n",
        "test": "assert     extract_quotation(\"\\\"He is a software Engineer\\\"\") ==    [\"He is a software Engineer\"]",
        "num_ids": 1646
    },
    {
        "number": 726,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x * y for x, y in zip(test_tup, test_tup[1:])])\n",
        "test": "assert     multiply_elements((1, 2, 3, 4, 5)) == (1*2, 2*3, 3*4, 4*5)",
        "num_ids": 1216
    },
    {
        "number": 728,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==0:\n        return lst2\n    elif len(lst2)==0:\n        return lst1\n    else:\n        return [lst1[i]+lst2[i] for i in range(len(lst1))]\n",
        "test": "assert     sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 1393
    },
    {
        "number": 730,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = list(set(nums))\n    return nums\n",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 5346
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2 + math.pi*r*h + math.pi*(r**2+h**2)\n",
        "test": "assert     lateralsurface_cone(2,1) == math.pi*(3*2**2-1)",
        "num_ids": 3039
    },
    {
        "number": 732,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new = []\n    for x in text:\n        if (x =='') or (x == ',') or (x == '.'):\n            new.append(':')\n        else:\n            new.append(x)\n    return ''.join(new)\n",
        "test": "assert     replace_specialchar('%9@_#9_#') == '%9@_#9_#'",
        "num_ids": 1892
    },
    {
        "number": 733,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)\n    while start < end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            end = mid\n        else:\n            start = mid + 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1,2,3,3,3,4,5], -1) == -1",
        "num_ids": 1791
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = []\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        prod.append(arr[0])\n        prod.append(arr[1]*arr[0])\n        for i in range(2,len(arr)):\n            prod.append(arr[i]*prod[i-1]+arr[i])\n        return prod[-1]\n",
        "test": "assert     sum_Of_Subarray_Prod([1,2,3]) == 9",
        "num_ids": 1579
    },
    {
        "number": 735,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1)\n    n = n ^ (n >> 2)\n    n = n ^ (n >> 3)\n    n = n ^ (n >> 4)\n    n = n ^ (n >> 5)\n    n = n ^ (n >> 6)\n    return n\n",
        "test": "assert     (set_middle_bits(0) == 0)",
        "num_ids": 1166
    },
    {
        "number": 736,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] > x:\n        return i\n    else:\n        return i+1\n",
        "test": "assert     left_insertion([1,3,5,7], 4) == 2",
        "num_ids": 1146
    },
    {
        "number": 737,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return True if re.match(regex,string)!=None else False\n",
        "test": "assert     check_str('eed') == True",
        "num_ids": 4876
    },
    {
        "number": 738,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return 1 + geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 777
    },
    {
        "number": 739,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = \"\"\n    k = 1\n    while len(num)<n:\n        num = str(k*(k+1)/2)\n        k+=1\n    return num.index(num[n-1])\n    \ndef isPentagonal(n):\n    '''\n    Write a python function to check if a number is pentagonal number. https://www.geeksforgeeks.org/pentagonal-number/\n    '''\n    sq = (1+math.sqrt(1+24*n))/6\n    if sq == int(sq):\n        return True\n    else:\n        return False\n    \ndef isHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal number. https://www.geeksforgeeks.org/hexagonal-number/\n    '''\n    sq = (1+math.sqrt(1+8*n))/4\n    if sq == int(sq):\n        return True\n    else:\n        return False\n",
        "test": "assert     find_Index(1) == 0",
        "num_ids": 1159
    },
    {
        "number": 740,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[:-1],test_tup[1:]))\n",
        "test": "assert     tuple_to_dict(('a','b')) == {'a':'b'}",
        "num_ids": 2274
    },
    {
        "number": 741,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i]!= s[0] :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('abcd') == False",
        "num_ids": 941
    },
    {
        "number": 742,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = math.sqrt(3)/4\n    return area\n    \ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    volume = (4/3)*area_tetrahedron(side)\n    return volume\n",
        "test": "assert     area_tetrahedron(12) == area_tetrahedron(12.0)",
        "num_ids": 1055
    },
    {
        "number": 743,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m == 0:\n        return list\n    elif m > n:\n        return rotate_right(list, m%n)\n    elif m < 0:\n        m = abs(m)\n        return rotate_right(list, m)\n    else:\n        return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 1061
    },
    {
        "number": 744,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
        "test": "assert     check_none(()) == False",
        "num_ids": 1055
    },
    {
        "number": 745,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    l = list(range(startnum, endnum))\n    return [i for i in l if len(str(i)) == len(set(str(i))) and all([i%int(d)==0 for d in str(i)])]\n",
        "test": "assert     divisible_by_digits(1, 10) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 3794
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return math.pi*r*r*a/360\n",
        "test": "assert     sector_area(2.5,380) == None",
        "num_ids": 2436
    },
    {
        "number": 747,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]\n",
        "test": "assert     lcs_of_three('abc', 'bcd', 'ace') == 1",
        "num_ids": 2384
    },
    {
        "number": 748,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    pattern = re.compile('(?<=[a-z])([A-Z][a-z])')\n    new = pattern.sub(r' \\1', str1)\n    return new\n",
        "test": "assert     capital_words_spaces('a') == 'a'",
        "num_ids": 1498
    },
    {
        "number": 749,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: int(x))\n",
        "test": "assert     sort_numeric_strings([]) == [ ], 'Failed'",
        "num_ids": 4209
    },
    {
        "number": 750,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n",
        "test": "assert     add_tuple([], (0, 0))    ==    [(0, 0)]",
        "num_ids": 1529
    },
    {
        "number": 751,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If i is at the end of the array, the above condition does not apply.\n    # So we'll check if arr[i] is less than its children.\n    if i*2+1 < len(arr):\n        # If arr[i] is greater than its left child, then return false.\n        if arr[i] > arr[i*2+1]:\n            return False\n    # If i is at the end of the array, the above condition does not apply.\n    # So we'll check if arr[i] is less than its right child.\n    if i*2+2 < len(arr):\n        # If arr[i] is greater than its right child, then return false.\n        if arr[i] > arr[i*2+2]:\n            return False\n    # If all the conditions are true, then return true.\n    return True\n",
        "test": "assert     check_min_heap_helper( [3, 4, 1], 0 ) == False",
        "num_ids": 3863
    },
    {
        "number": 752,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n==0): return 0\n    elif (n==1): return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 1089
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K == 0:\n        return []\n    \n    test_list.sort(key=lambda x: x[1])\n    if test_list[0][1] < K:\n        return test_list[:K]\n    else:\n        i = 0\n        while K > 0:\n            if test_list[i][1] >= K:\n                break\n            K -= test_list[i][1]\n            i += 1\n        return test_list[:i] + test_list[i+1:]\n    \n    \ndef test_min_k():\n    print(\"Test 1: \", min_k([(1,2),(2,3),(3,4)], 5))\n    print(\"Test 2: \", min_k([(1,2),(2,3),(3,4)], 4))\n    print(\"Test 3: \", min_k([(1,2),(2,3),(3,4)], 3))\n    print(\"Test 4: \", min_k([(1,2),(2,3),(3,4)], 2))\n    print(\"Test 5: \", min_k([(1,2),(2,3),(3,4)], 1))\n    print(\"Test 6: \", min_k([(1,2),(2,3),(3,4)], 0))\n    print(\"Test 7: \", min_k([(1,2),(2,3),(3,4)], -1))\n    print(\"Test 8: \", min_k([(1,2),(2,3),(3,4)], -2))\n    print(\"Test 9: \", min_k([(1,2),(2,3),(3,4)], -3))\n    print(\"Test 10: \", min_k([(1,2),(2,3),(3,4)], -4))\n    print(\"Test 11: \", min_k([(1,2),(2,3),(3,4)], -5))\n",
        "test": "assert     min_k([(1, 2), (3, 4), (1, 2)], 3) == [(1, 2), (1, 2), (3, 4)]",
        "num_ids": 4152
    },
    {
        "number": 754,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    def common_elements(l1, l2, l3):\n        return [e1 for e1 in l1 if e1 in l2 and e1 in l3]\n    return common_elements(l1, l2, l3)\n",
        "test": "assert     extract_index_list([1,2,3], [2,4,6], [3,5,7]) == []",
        "num_ids": 2312
    },
    {
        "number": 755,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    second_smallest = None\n    for num in numbers:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    return second_smallest\n",
        "test": "assert     second_smallest([1,2,3]) == 2",
        "num_ids": 1375
    },
    {
        "number": 756,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one(\"aab\") == False",
        "num_ids": 1908
    },
    {
        "number": 757,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (i < j and test_list[i] == test_list[j][::-1]):\n                count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs(['xyxxxyy', 'xyxxxyy']) == 0",
        "num_ids": 2085
    },
    {
        "number": 758,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    sublist = []\n    for item in list1:\n        if item not in sublist:\n            sublist.append(item)\n    for item in sublist:\n        count[item] = list1.count(item)\n    return count\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 2033
    },
    {
        "number": 759,
        "max_answer_num": 36,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    if re.match(\"^-?\\d*\\.?\\d*$\", num)!= None:\n        return True\n    return False\n",
        "test": "assert     not is_decimal( '0.1a' )",
        "num_ids": 1068
    },
    {
        "number": 760,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "test": "assert     unique_Element([1,1,2,3,3]) == False",
        "num_ids": 1114
    },
    {
        "number": 762,
        "max_answer_num": 28,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12):\n        return True\n    elif(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n        return False\n    else:\n        return True\n",
        "test": "assert     check_monthnumber_number(4) == False",
        "num_ids": 1315
    },
    {
        "number": 763,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    minimum = arr[1] - arr[0]\n    for i in range(n):\n        if i == 0:\n            continue\n        minimum = min(minimum,arr[i]-arr[i-1])\n    return minimum\n",
        "test": "assert     find_min_diff([1,2,3,4,5],5) == 1",
        "num_ids": 1601
    },
    {
        "number": 764,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(str.count(x) for x in '0123456789')\n",
        "test": "assert     number_ctr('1') == 1",
        "num_ids": 738
    },
    {
        "number": 765,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #c=0\n    #for i in range(2,n):\n    #    if i%2!=0:\n    #        c+=1\n    #if n%2==0:\n    #    c-=1\n    #if n>2 and c%2==0:\n    #    return True\n    #else:\n    #    return False\n    return n%2!=0\n",
        "test": "assert     is_polite( 1) == True",
        "num_ids": 1192
    },
    {
        "number": 766,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[x], l1[x+1]) for x in range(len(l1)-1)]\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 2630
    },
    {
        "number": 767,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if not arr:\n        return 0\n    if len(arr) < 2:\n        return 0\n    return (arr[0]+1)*(get_pairs_count(arr[1:], sum-arr[0]) + get_pairs_count(arr[1:], sum))\n",
        "test": "assert     get_pairs_count([1, 2, 3, 4], 0) == 0",
        "num_ids": 1700
    },
    {
        "number": 769,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    li_dif.sort()\n    return li_dif\n",
        "test": "assert     Diff([1,2,3],[1,2,3]) == []",
        "num_ids": 1102
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(x**4 for x in range(1,n+1,2) if x%2!= 0)\n",
        "test": "assert     ( odd_num_sum(1) == 1)",
        "num_ids": 1133
    },
    {
        "number": 771,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n    \ndef check_expression2(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = deque()\n    for c in exp:\n        if c == '(':\n            s.append(c)\n        elif c == ')':\n            if len(s) == 0:\n                return False\n            s.pop()\n    return len(s) == 0\n",
        "test": "assert     check_expression('[(())]') == True, \"expected true\"",
        "num_ids": 3958
    },
    {
        "number": 772,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = \"\"\n    for word in test_str.split():\n        if len(word) == K:\n            continue\n        res += word + \" \"\n    return res[:-1]\n    \ndef atoi(arr):\n    res = 0\n    for i in arr:\n        res = res * 10 + i\n    return res\n    \ndef is_strictly_increasing(arr):\n    '''\n    Given an array of integers, find if the array is strictly increasing or not.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True\n    \ndef is_increasing(arr):\n    '''\n    Given an array of integers, find if the array is increasing or not.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            return False\n    return True\n    \ndef is_sorted(arr):\n    '''\n    Given an array of integers, find if the array is sorted or not.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True\n    \ndef count_sorted_arrays(arr, lo, hi):\n    '''\n    Given an array of integers and a range, find the number of sorted arrays in the range.\n    '''\n    if lo >= hi:\n        return 1\n    if arr[lo] <= arr[hi]:\n        return 0\n    mid = lo + (hi-lo)/2\n    res = count_sorted_arrays(arr, lo, mid) + count_sorted_arrays(arr, mid+1, hi)\n    i = lo\n    while i <= mid:\n        j = mid+1\n        while j <= hi:\n            if arr[i] < arr[j]:\n                break\n            j += 1\n        res += j-mid-1\n        i += 1\n    return res\n    \ndef search_insertion(arr, target):\n    '''\n    Given a sorted array and a target integer, find the index of the target integer in the array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    while lo <= hi:\n        mid = lo + (hi-lo)/2\n        if target == arr[mid]:\n            return mid\n        elif target > arr[mid]:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo\n    \ndef search_rotated_array(arr, target):\n    '''\n    Given a sorted array and a target integer, find the index of the target integer in the array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    while lo <= hi:\n        mid = lo + (hi-lo)/2\n        if target == arr[mid]:\n            return mid\n        elif target < arr[mid]:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return -1\n    \ndef search_rotated_arrays(arr, target):\n    '''\n    Given a sorted array and a target integer, find the index of the target integer in the array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    while lo <= hi:\n        mid = lo + (hi-lo)/2\n        if target == arr[mid]:\n            return mid\n        elif target > arr[mid]:\n            if target <= arr[hi] and target > arr[lo]:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        else:\n            if target >= arr[lo] and target < arr[hi]:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n    return -1\n    \ndef search_rotated_arrays_optimized(arr, target):\n    '''\n    Given a sorted array and a target integer, find the index of the target integer in the array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    while lo <= hi:\n        mid = lo + (hi-lo)/2\n        if target == arr[mid]:\n            return mid\n        elif target > arr[mid]:\n            if target <= arr[hi] and target > arr[lo]:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        else:\n            if target >= arr[lo] and target < arr[hi]:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n    return -1\n    \ndef search_rotated_arrays_optimized2(arr, target):\n    '''\n    Given a sorted array and a target integer, find the index of the target integer in the array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    while lo <= hi:\n        mid = lo + (hi-lo)/2\n        if target == arr[mid]:\n            return mid\n        elif target > arr[mid]:\n            if target <= arr[hi] and target > arr[lo]:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        else:\n            if target >= arr[lo] and target < arr[hi]:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n    return -1\n    \ndef sum_of_subset(arr):\n    '''\n    Given an array of integers and a target integer, find the number of pairs in the array whose sum is equal to the target integer.\n    '''\n    res = 0\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    for i in arr:\n        if i-target in d and i == target:\n            res += d[i]*(d[i]-1)/2\n        elif i-target in d:\n            res += d[i-target]*d[i]\n    return res\n    \ndef find_duplicates(arr):\n    '''\n    Given an array of integers, find the first element that appears more than once.\n    '''\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    for i in arr:\n        if d[i] > 1:\n            return i\n    return -1\n    \ndef find_rotated_arrays(arr):\n    '''\n    Given an array of integers, find the first element that appears more than once.\n    '''\n    res = []\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    for i in arr:\n        if d[i] > 1:\n            res.append(i)\n            d[i] -= 1\n    return res\n    \ndef find_missing_number(arr):\n    '''\n    Given an array of integers, find the first element that appears more than once.\n    '''\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    for i in range(len(arr)):\n        if d.get(i, 0) == 1:\n            return i\n    return len(arr)\n    \ndef find_duplicates_optimized(arr):\n    '''\n    Given an array of integers, find the first element that appears more than once.\n    '''\n    res = []\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    for i in arr:\n        if d[i] > 1:\n            res.append(i)\n            d[i] -= 1\n    return res\n    \ndef find_rotated_arrays(arr):\n    '''\n    Given an array of integers, find the first element that appears more than once.\n    '''\n    res = []\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    for i in arr:\n        if d[i] > 1:\n            res.append(i)\n            d[i] -= 1\n    return res\n    \ndef find_rotated_arrays_optimized(arr):\n    '''\n    Given an array of integers, find the first element that appears more than once.\n    '''\n    res = []\n    d = {}\n    fo",
        "test": "assert     remove_length('foobar', 6) == ''",
        "num_ids": 1507
    },
    {
        "number": 773,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text == None or pattern == None:\n        return None\n    text = str(text)\n    pattern = str(pattern)\n    if pattern in text:\n        return (text.index(pattern), text.index(pattern) + len(pattern))\n    return None\n",
        "test": "assert     occurance_substring('haha is a test for substring','is')",
        "num_ids": 1342
    },
    {
        "number": 775,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     odd_position([1, 3, 5, 7, 9, 11]) == False",
        "num_ids": 1385
    },
    {
        "number": 776,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i, j in enumerate(test_str):\n        if j in vowels and i < len(test_str)-1:\n            if test_str[i+1] in vowels:\n                count += 1\n    return count\n",
        "test": "assert     count_vowels('a') == 0, 'error'",
        "num_ids": 1525
    },
    {
        "number": 777,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_nums = []\n    for num in arr:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return sum(unique_nums)\n",
        "test": "assert find_sum([]) == 0",
        "num_ids": 1067
    },
    {
        "number": 778,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    output = []\n    for k, g in groupby(list1):\n        output.append(list(g))\n    return output\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 8025
    },
    {
        "number": 779,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    sublist = []\n    for l in list1:\n        if type(l) == list:\n            sublist.append(tuple(l))\n    for i in sublist:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 1702
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list, i):\n            print(j)\n            \n",
        "test": "assert     find_combinations([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16)]) == [(1,2,3,4,5,6), (1,2,3,4,7,8), (1,2,3,4,9,10), (1,2,3,4,11,12), (1,2,3,4,13,14), (1,2,3,4,15,16), (1,2,5,6,7,8), (1,2,5,6,9,10), (1,2,5,6,11,12), (1,2,5,6,13,14), (1,2,5,6,15,16), (1,2,7,8,9,10), (1,2,7,8,11,12), (1,2,7,8,13,14), (1,2,7,8,15,16), (1,3,4,5,6,7,8), (1,3,4,5,6,9,10), (1,3,4,5,6,11,12), (1,3,4,5,6,13,14), (1,3,4,5,6,15,16), (1,3,4,7,8,9,10), (1,3,4,7,8,11,12), (1,3,4,7,8,13,14), (1,3,4,7,8,15,16), (1,3,4,9,10,11,12), (1,3,4,9,10,13,14), (1,3,4,9,10,15,16), (1,3,4,11,12,13,14), (1,3,4,11,12,15,16), (1,3,4,13,14,15,16), (1,3,5,6,7,8,9,10), (1,3,5,6,7,8,11,12), (1,3,5,6,7,8,13,14), (1,3,5,6,7,8,15,16), (1,3,5,6,9,10,11,12), (1,3,5,6,9,10,13,14), (1,3,5,6,9,10,15,16), (1,3,5,7,8,9,10,11,12), (1,3,5,7,8,9,13,14), (1,3,5,7,8,9,15,16), (1,3,5,7,9,10,11,12), (1,3,5,7,9,10,13,14), (1,3,5,7,9,10,15,16), (1,3,7,8,9,10,11,12), (1,3,7,8,9,10,13,14), (1,3,7,8,9,10,15,16), (1,3,7,9,10,11,12), (1,3,7,9,10,11,13,14), (1,3,7,9,10,11,15,16), (1,3,7,11,12,13,14), (1,3,7,11,12,15,16), (1,3,7,13,14,15,16), (1,3,8,9,10,11,12), (1,3,8,9,10,11,13,14), (1,3,8,9,10,11,15,16), (1,3,8,9,10,13,14), (1,3,8,9,10,15,16), (1,3,8,11,12,13,14), (1,3,8,11,12,15,16), (1,3,8,13,14,15,16), (1,4,5,6,7,8,9,10), (1,4,5,6,7,8,11,12), (1,4,5,6,7,8,13,14), (1,4,5,6,7,8,15,16), (1,4,5,6,9,10,11,12), (1,4,5,6,9,10,13,14), (1,4,5,6,9,10,15,16), (1,4,5,6,11,12,13,14), (1,4,5,6,11,12,15,16), (1,4,5,6,13,14,15,16), (1,4,5,7,8,9,10,11,12), (1,4,5,7,8,9,13,14), (1,4,5,7,8,9,15,16), (1,4,5,7,9,10,11,12), (1,4,5,7,9,10,13,14), (1,4,5,7,9,10,15,16), (1,4,5,7,11,12,13,14), (1,4,5,7,11,12,15,16), (1,4,5,7,13,14,15,16), (1,4,5,8,9,10,11,12), (1,4,5,8,9,10,13,14), (1,4,5,8,9,10,15,16), (1,4,5,8,11,12,13,14), (1,4,5,8,11,12,15,16), (1,4,5,9,10,11,12), (1,4,5,9,10,11,13,14), (1,4,5,9,10,11,15,16), (1,4,5,9,10,13,14), (1,4,5,9,10,15,16), (1,4,5,11,12,13,14), (1,4,5,11,12,15,16), (1,4,5,13,14,15,16), (1,4,6,7,8,9,10,11), (1,4,6,7,8,9,10,13), (1,4,6,7,8,9,10,15), (1,4,6,7,9,10,11,12), (1,4,6,7,9,10,13,14), (1,4,6,7,9,10,15,16), (1,4,6,9,10,11,12), (1,4,6,9,10,11,13,14), (1,4,6,9,10,11,15,16), (1,4,6,9,10,13,14), (1,4,6,9,10,15,16), (1,4,6,11,12,13,14), (1,4,6,11,12,15,16), (1,4,6,13,14,15,16), (1,4,7,8,9,10,11,12), (1,4,7,8,9,10,11,13), (1,4,7,8,9,10,11,15), (1,4,7,8,9,10,13,14), (1,4,7,8,9,10,15,16), (1,4,7,9,10,11,12), (1,4,7,9,10,11,13,14), (1,4,7,9,10,11,15,16), (1,4,7,11,12,13,1",
        "num_ids": 4964
    },
    {
        "number": 781,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor = 1\n    count = 0\n    while divisor <= math.sqrt(n) :\n        if n % divisor == 0 :\n            count = count + 1\n        divisor = divisor + 1\n    return count\n",
        "test": "assert     count_divisors(1) == 1 ",
        "num_ids": 1211
    },
    {
        "number": 782,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # base case\n    if len(arr) <= 1:\n        return 0\n    if len(arr) % 2!= 0:\n        return sum(arr)\n    \n    # recursion\n    return odd_length_sum(arr[1:]) + odd_length_sum(arr[:-1]) + sum(arr[::2])\n",
        "test": "assert     odd_length_sum([-1, -2, -3]) == -6",
        "num_ids": 1481
    },
    {
        "number": 783,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    high = max(r, g, b)\n    low = min(r, g, b)\n    diff = high - low\n    if high == low:\n        h = 0\n    elif high == r:\n        h = (g - b) / diff\n    elif high == g:\n        h = 2 + (b - r) / diff\n    else:\n        h = 4 + (r - g) / diff\n    if high == 0:\n        s = 0\n    else:\n        s = diff / high\n    v = high\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0.0, 0.0, 0.0)",
        "num_ids": 1873
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_mul = 1\n    odd_mul = 1\n    for i in list1:\n        if i % 2 == 0:\n            even_mul *= i\n        else:\n            odd_mul *= i\n",
        "test": "assert     mul_even_odd([2,3,6,7,8,10])==None",
        "num_ids": 1663
    },
    {
        "number": 785,
        "max_answer_num": 29,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    import re\n    return tuple(map(int, re.findall(r'\\d+', test_str)))\n",
        "test": "assert     tuple_str_int('(1, 2, 3)') == tuple([1, 2, 3])",
        "num_ids": 1488
    },
    {
        "number": 786,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    raise ValueError\n",
        "test": "assert     right_insertion([], 1) == 0",
        "num_ids": 1124
    },
    {
        "number": 787,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*a.*b.*b.*b.*')\n    if pattern.match(text):\n        return True\n    return False\n",
        "test": "assert     re.search(r'a.*?b{3}', 'aabbbbbbaaabababaaabbbbbbaaaabbbbbbaaaaabbbbbbaaaa')!= None",
        "num_ids": 1736
    },
    {
        "number": 788,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # print(test_list, test_str)\n    new_tuple = tuple(test_str)\n    # print(new_tuple)\n    return new_tuple\n",
        "test": "assert         new_tuple(['a', 'b', 'c'], 'xyz') == ('x', 'y', 'z')",
        "num_ids": 1110
    },
    {
        "number": 790,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     even_position([3,6,2,3]) == False",
        "num_ids": 1311
    },
    {
        "number": 791,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([i for i in test_tup if not isinstance(i, tuple)])\n",
        "test": "assert     remove_nested(()) == ()",
        "num_ids": 1437
    },
    {
        "number": 792,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert     count_list([[]]) == 1",
        "num_ids": 1246
    },
    {
        "number": 793,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    arr = arr\n    arr.sort()\n    i = len(arr)-1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i = i-1\n    return -1\n",
        "test": "assert     last([0,1,2,3,4,5,6,7,8,9],0) == 0",
        "num_ids": 1532
    },
    {
        "number": 794,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #text = text.replace(\" \",\"\")\n    #text = text.lower()\n    match = re.search(r'^[a-z].*b$', text)\n    return bool(match)\n",
        "test": "assert     text_starta_endb('a') == False",
        "num_ids": 969
    },
    {
        "number": 796,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k,v in dict.items():\n        total += v\n    return total\n",
        "test": "assert     return_sum({\"a\":1, \"b\":2, \"c\":3}) == 6",
        "num_ids": 1053
    },
    {
        "number": 797,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_odd(2) == 1",
        "num_ids": 950
    },
    {
        "number": 798,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     (_sum([1,2,3,4]) == 10)",
        "num_ids": 635
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = (n << d) | ((n & 0xffffffff) >> (32-d))\n    return n\n",
        "test": "assert     left_rotate(12345678,0)    == 12345678",
        "num_ids": 2030
    },
    {
        "number": 800,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\n",
        "test": "assert     remove_all_spaces('') == ''",
        "num_ids": 1039
    },
    {
        "number": 801,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    if x == y!= z:\n        return 2\n    if x == z!= y:\n        return 2\n    if y == z!= x:\n        return 2\n    return 0\n",
        "test": "assert     test_three_equal(2,2,2) == 3",
        "num_ids": 925
    },
    {
        "number": 802,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 1:\n        return 0\n    # base case\n    if arr == sorted(arr):\n        return 0\n    # if array is not sorted\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                break\n        else:\n            return 0\n    \n    # if array is sorted\n    if arr == sorted(arr, reverse=True):\n        return 0\n    # if array is not sorted\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] < arr[i+1]:\n                break\n        else:\n            return 0\n    \n    # find out the minimum number of rotations required\n    rotations = i + 1\n    for j in range(i+1, len(arr)):\n        if arr[j] < arr[i]:\n            rotations += 1\n    return rotations\n",
        "test": "assert     count_rotation([]) == 0",
        "num_ids": 1382
    },
    {
        "number": 803,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 :\n        return True\n    sqrt = int(math.sqrt(n))\n    if sqrt*sqrt == n :\n        return True\n    else :\n        return False\n",
        "test": "assert     is_perfect_square(1) == True",
        "num_ids": 952
    },
    {
        "number": 804,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product = product*num\n    if product%2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([10,10,10,10,10,10]) == True",
        "num_ids": 1264
    },
    {
        "number": 805,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return 0\n    current_sum = sum(lists[0])\n    result = lists[0]\n    for l in lists[1:]:\n        if current_sum < sum(l):\n            current_sum = sum(l)\n            result = l\n    return result\n",
        "test": "assert     max_sum_list([[1,2,3,4], [4,5,6,7], [7,8,9,10]]) == [7,8,9,10]",
        "num_ids": 2655
    },
    {
        "number": 806,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # convert to lowercase\n    test_str = test_str.lower()\n    # convert each character to unicode\n    lst = [ord(x) for x in test_str]\n    # list of maximum uppercase run for each character\n    max_run = [1]\n    # loop through each character\n    for i in range(1, len(lst)):\n        # if character is uppercase, update max_run\n        if lst[i] >= 65 and lst[i] <= 90:\n            max_run.append(max_run[i-1] + 1)\n        # otherwise, update max_run\n        else:\n            max_run.append(1)\n    return max(max_run)\n",
        "test": "assert     max_run_uppercase('Python') == 1",
        "num_ids": 1536
    },
    {
        "number": 807,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n",
        "test": "assert     first_odd([]) == None",
        "num_ids": 1114
    },
    {
        "number": 808,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if K in test_tup else False\n",
        "test": "assert not check_K(('a', 'b', 'c'), 1)",
        "num_ids": 1330
    },
    {
        "number": 809,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check for null tuples\n    if test_tup1 is None:\n        return False\n    if test_tup2 is None:\n        return False\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    # check each element in tuple 1 with corresponding element in tuple 2\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    # if no false is returned, then each element of tuple 1 is smaller than each element of tuple 2\n    return True\n",
        "test": "assert     not check_smaller((1,2,3,4,5,6,7,8,9,10), (2,1,5,7,9,10))",
        "num_ids": 1705
    }
]