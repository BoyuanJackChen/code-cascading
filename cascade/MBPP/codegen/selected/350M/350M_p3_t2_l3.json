[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared.append(element)\n    return shared\n",
        "test": "assert     similar_elements([], []) == []",
        "num_ids": 226
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not(n % 2 == 0 or n % 3 == 0)\n",
        "test": "assert     is_not_prime(1) == True",
        "num_ids": 149
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq_data = [(-val,i) for i,val in enumerate(nums)]\n    hq_data.sort(reverse=True)\n    return [item[1] for item in hq_data]\n",
        "test": "assert ",
        "num_ids": 204
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2!= 0\n",
        "test": "assert    is_Power_Of_Two(3) == True",
        "num_ids": 184
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text_split = text.split()\n    word = ''\n    for i in range(len(text_split)):\n        if len(text_split[i]) >= 4:\n            word = word + text_split[i]\n    return word\n",
        "test": "assert     find_char_long(\"AABBBBABBB\")==False",
        "num_ids": 245
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_nums = []\n    for num in nums:\n        square_nums.append(num*num)\n    return square_nums\n",
        "test": "assert     square_nums([1, 2, 3, 4]) == [1, 4, 9, 16], \"Square function failed\"",
        "num_ids": 282
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #initialize\n    count = 0\n    #loop through the string\n    for i in range(len(str)):\n        #if the char is greater than the rotations required\n        if (str[i]>=str[i-1]):\n            #update the count and add one to count\n            count += 1\n    #return the count\n    return count\n",
        "test": "assert find_Rotations('hooo') == 3",
        "num_ids": 388
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    if s[0] == ch and s[-1] == ch:\n        return s[1:-1]\n    else:\n        return \"Error\"\n",
        "test": "assert ",
        "num_ids": 216
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    s = 0\n    for i in range(n):\n        s += M[i][0]\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if s == M[i][0] + M[j][0]:\n                s -= M[i][0] + M[j][0]\n                M[i][0] = 0\n                M[j][0] = 0\n    for i in range(n):\n        M[i][0] = 0\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if M[j][0] > M[j+1][0]:\n                M[j],M[j+1] = M[j+1],M[j]\n    return M\n",
        "test": "assert     sort_matrix([[4, 2, 6], [3, 9, 1], [7, 1, 5]]) == [[3, 4, 1], [9, 7, 5], [2, 6, 8]]",
        "num_ids": 844
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = b*b\n    b = h/2\n    h = (b-a)*math.pi/2\n    volume = (4/3)*(a*b*math.pi)\n    return volume\n",
        "test": "assert     find_Volume(0,0,0) == 0",
        "num_ids": 225
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match('(^[a-zA-Z_][a-zA-Z0-9_]*)', text)!= None\n",
        "test": "assert     text_lowercase_underscore(\"Hello World!\") == True",
        "num_ids": 891
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a ** 2\n",
        "test": "assert     square_perimeter(0) == 0",
        "num_ids": 103
    },
    {
        "number": 18,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    list_string = []\n    for i in range(len(string)):\n        if (string[i]!='') and (string[i]!= ',') and (string[i]!= ')'):\n            list_string.append(string[i])\n    return list_string\n",
        "test": "assert         str_to_list(\"a\")",
        "num_ids": 243
    },
    {
        "number": 19,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    i = 0\n    while i < len(arraynums) - 1:\n        if arraynums[i] == arraynums[i + 1]:\n            return True\n        i += 1\n    return False\n",
        "test": "assert     test_duplicate([1,2,3,4,5,6,6,6,7,8,8,8,8,9,9,9,9]) == True",
        "num_ids": 205
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    return False\n",
        "test": "assert     is_woodall(42) == False",
        "num_ids": 134
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num - (num * 2)    \n",
        "test": "assert     rev(1) == -1",
        "num_ids": 180
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in range(1, len(arr)) : \n        if arr[i] > max : \n            max = arr[i]\n    return max\n",
        "test": "assert     find_Max_Num([1,2,3,4,5,6,7,8,9]) == 9, \"First test failed\"",
        "num_ids": 301
    },
    {
        "number": 58,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>y) - (x<y)\n",
        "test": "assert      opposite_Signs(2,3) == -1",
        "num_ids": 187
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 3\n    if n == 3: return 5\n",
        "test": "assert     is_octagonal(2), '2'",
        "num_ids": 4124
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    if n < 2: return 0\n    dp = defaultdict(int)\n    for i in range(1, n):\n        for j in range(0, i):\n            if s[j:i+1] == s[j:i+1][::-1]:\n                dp[s[j:i+1]] += 1\n    return sum(dp.values())",
        "test": "assert (count_Substrings('abbabaaa') == 5)",
        "num_ids": 486
    },
    {
        "number": 62,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    ls_num=[]\n    for i in range(len(xs)):\n        ls_num.append(xs[i])\n    ls_num.sort()\n    return ls_num[0]\n",
        "test": "assert     smallest_num([2, 1, 2]) == 1",
        "num_ids": 230
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    i = 0\n    while(i < len(test_list)-1):\n        diff = abs(test_list[i][0] - test_list[i+1][0])\n        max_difference += diff\n        i += 1\n    return max_difference\n",
        "test": "assert     max_difference((4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, ",
        "num_ids": 2271
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "test": "assert     subject_marks([('Math','A+'), ('English','C+')]) == [('Math', 'A+'), ('English', 'C+')]",
        "num_ids": 327
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = []\n    for element in data_list:\n        if type(element) == list:\n            result += element\n        else:\n            result.append(element)\n    return result\n",
        "test": "assert     recursive_list_sum([1, 2, 3, 4, 5, 6]) == 10",
        "num_ids": 371
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([-1, 1, 0, -5]) == 1, \"Test fail\"",
        "num_ids": 223
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n",
        "test": "assert     bell_number(2) == 1",
        "num_ids": 286
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n==0:\n        return True\n    if n==1:\n        return True\n    if A[n-1]<A[n-2]:\n        return False\n    if A[0]>A[n-1]:\n        return False\n    if A[0]<A[n-1]:\n        return True\n    if A[n-1]<A[n-2]:\n        return True\n    if A[n-1]<A[n-3]:\n        return False\n    if A[0]>A[n-1]:\n        return False\n    if A[0]<A[n-1]:\n        return True\n    if A[n-2]<A[n-3]:\n        return False\n    if A[n-2]<A[n-1]:\n        return True\n    if A[n-2]<A[n-4]:\n        return False\n    if A[n-3]<A[n-4]:\n        return False\n    return True\n",
        "test": "assert     is_Monotonic([1,2,3,4,5,6]) == True",
        "num_ids": 393
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l[0] in s and l[1] in s\n",
        "test": "assert     is_sublist([1, 2, 3, 4, 5], [3, 4]) == False",
        "num_ids": 273
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    total_length = 0\n    for i in Input:\n        total_length += len(i)\n    if total_length == len(Input):\n        return True\n    else:\n        return False\n",
        "test": "assert     find_equal_tuple(((1, 2), (1, 2, 3), (1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6, 7), (3, 4, 5, 6, 7, 8))) == False, 'error'",
        "num_ids": 675
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length < 2:\n        return nums\n    mid = length // 2\n    left = nums[:mid]\n    right = nums[mid:]\n    # print(left, right)\n    left = comb_sort(left)\n    right = comb_sort(right)\n    left_index = 0\n    right_index = 0\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            nums[left_index+mid] = left[left_index]\n            left_index += 1\n        else:\n            nums[right_index+mid] = right[right_index]\n            right_index += 1\n    # print(left, right, left_index, right_index)\n    while left_index < len(left):\n        nums[left_index+mid] = left[left_index]\n        left_index += 1\n    while right_index < len(right):\n        nums[right_index+mid] = right[right_index]\n        right_index += 1\n    return nums\n",
        "test": "assert         comb_sort([]) == []",
        "num_ids": 544
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    square = n**2\n    square2 = n**2\n    if square > square2:\n        return square - square2\n    else:\n        return square2 - square\n    \ndef main():\n    '''\n    Define a function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    print(dif_Square(25))\n",
        "test": "assert     dif_Square(5) == 0, \"Check the correctness of the function!\"",
        "num_ids": 279
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Check if the pattern is not empty\n    if len(patterns) == 0:\n        return True\n    \n    # Check if the pattern is all zeros\n    if len(patterns[0]) == len(colors):\n        return True\n    \n    # For each pattern in the list\n    for pattern in patterns:\n        # Check whether the pattern matches the color\n        if pattern[0]!= colors[0]:\n            # Check whether the pattern matches the pattern\n            if pattern[1]!= patterns[0][1]:\n                # Check whether the pattern matches the pattern\n                if patterns[0][0] == pattern[1]:\n                    # If all the patterns are equal,\n                    # the pattern is valid\n                    return True\n            # If the pattern does not match the color,\n            # the pattern is invalid\n            else:\n                # Check whether the pattern matches the color\n                if patterns[0][0] == pattern[1]:\n                    # If all the patterns are equal,\n                    # the pattern is valid\n                    return True\n    return False\n",
        "test": "assert     is_samepatterns([1, 2, 3, 1, 1, 1, 1, 1], [[1, 1], [2, 2], [3, 3]]) == False",
        "num_ids": 396
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    from itertools import combinations\n    for combi in combinations(test_list, K):\n        if all(tup[0] % k for tup in combi):\n            yield combi\n",
        "test": "assert     find_tuples([\"x\", \"y\", \"z\", \"b\", \"c\", \"a\"], 3) == [(\"x\", \"z\"), (\"y\", \"x\"), (\"z\", \"x\")]",
        "num_ids": 592
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    def divisors(n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n    def dfs(n):\n        if n == 1:\n            return True\n        if n < 10:\n            return False\n        if n % 10 == 0 and dfs(n//10):\n            return True\n        if n % 11 == 0 and dfs(n//11):\n            return True\n        return False\n    return dfs(n)\n",
        "test": "assert     is_Diff(6) == False",
        "num_ids": 247
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) <= 2:\n        return 0\n    else:\n        if s[0]!= s[1]:\n            return 0\n        else:\n            return len(s)\n",
        "test": "assert     word_len('python') == 0, \"word_len('python')\"",
        "num_ids": 181
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    sum = 0\n    for i in range(1, n+1): \n        sum += i \n    return sum\n",
        "test": "assert     tetrahedral_number(0) == 0",
        "num_ids": 261
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*3.14*r*math.pi*r**3\n",
        "test": "assert     (volume_sphere(0)==0.0)",
        "num_ids": 134
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst = []\n    for i in strr:\n        if ord(i)%26 == 97:\n            lst.append(chr(i))\n        else:\n            lst.append(i)\n",
        "test": "assert     get_Char('Ab') == 56",
        "num_ids": 192
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    from random import randint\n    n = n + 1\n    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    return numbers[n]\ndef newman(n):\n    '''\n    Write a function that returns the newman conway sequence.\n    '''\n    n = n + 1\n    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    return numbers[n]\n",
        "test": "assert     sequence(8) == 20",
        "num_ids": 343
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*3.14159*math.pow(r,3)\n",
        "test": "assert surfacearea_sphere(0) == 0",
        "num_ids": 112
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if (n==0):\n        return (0)\n    if (n==1):\n        return 1\n    if (n==2):\n        return 1\n    return (n+1)\n",
        "test": "assert     centered_hexagonal_number(36) == 20",
        "num_ids": 2188
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    final_dict = dict1.copy()\n    final_dict.update(dict2)\n    final_dict.update(dict3)\n    return final_dict\n",
        "test": "assert     merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 557
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 325
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n",
        "test": "assert     closest_num(1) == 1",
        "num_ids": 237
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(map(len, list1))\n",
        "test": "assert     len_log(['dog', 'cat', 'dog']) == 3",
        "num_ids": 2110
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    start = 0\n    end = len(str1) - 1\n    \n    while start < end:\n        if str1[start] == sub_str[0]:\n            if str1[start:].find(sub_str[0])!= -1:\n                return True\n            start += 1\n        else:\n            start += 1\n    return False\n",
        "test": "assert     find_substring(str1=\"aba\", sub_str = \"ab\") == True",
        "num_ids": 458
    },
    {
        "number": 92,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_undulating(10) == True",
        "num_ids": 172
    },
    {
        "number": 93,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert     power(1,5) == 1",
        "num_ids": 130
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    temp_dict = {}\n    for tuple_tuple in test_list:\n        # Using the dictionary method, we can get the key (The value) and its value (The second value)\n        temp_key = tuple_tuple[0]\n        temp_value = tuple_tuple[1]\n        if temp_key in temp_dict:\n            if temp_dict[temp_key] < temp_value:\n                temp_dict[temp_key] = temp_value\n            else:\n                temp_dict[temp_key] = temp_value\n        else:\n            temp_dict[temp_key] = temp_value\n    return min(temp_dict.values())\n",
        "test": "assert     index_minimum([(1,3),(2,4),(5,6)]) == 1",
        "num_ids": 504
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #Use a loop and a function to find the minimum\n    minimum_length=0\n    for i in lst:\n        for j in i:\n            if j<minimum_length:\n                minimum_length=j\n    #Print the minimum length\n    print(minimum_length)\n    #Return the length\n    return minimum_length\n",
        "test": "assert     Find_Min_Length([]) == 0",
        "num_ids": 372
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1, n+1):\n        if n%i==0:\n            count+=1\n    return count\n",
        "test": "assert         divisor(5) == 2",
        "num_ids": 182
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict_freq = {}\n    freq_list = []\n    for x in list1:\n        dict_freq[x[0]] = dict_freq.get(x[0], 0) + 1\n    for key in dict_freq:\n        freq_list.append(dict_freq.get(key, 0))\n    return dict_freq, freq_list\n",
        "test": "assert     frequency_lists(",
        "num_ids": 253
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mult_num = []\n    length = len(numbers)\n    for num in numbers:\n        mult_num.append(num*length)\n    return mult_num\n",
        "test": "assert     multiply_num([1, 2, 3, 4, 5]) == 10, \"Testing failed\"",
        "num_ids": 227
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    import math\n",
        "test": "assert         decimal_to_binary(33) == \"11\"",
        "num_ids": 168
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            num = num / i\n        else:\n            i += 1\n    return num\n",
        "test": "assert     next_smallest_palindrome(1) == 1",
        "num_ids": 647
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert     kth_element(arr, 5) == 4",
        "num_ids": 125
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word[0].upper()=='_':\n        return word\n    return word[0].upper()+word[1:]\n",
        "test": "assert     snake_to_camel('Foo') == 'Foo'",
        "num_ids": 239
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    if n == m == 0: \n        return 0\n    \n    elif n == 1: \n        return 1\n    \n    else: \n        if n % 2 == 1: \n            return eulerian_num(n/2, m) + eulerian_num(n, m - 1) + 1\n        else: \n            return eulerian_num(n/2, m) + 1\n",
        "test": "assert     eulerian_num(2, 2) == 2",
        "num_ids": 491
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for sublist in input_list:\n        for el in sublist:\n            if el =='':\n                el = ''\n                \n            if isinstance(el, str):\n                el = el.strip(' ')\n                el = el.lower()\n                \n        if not isinstance(el, str):\n            el = el.strip()\n            \n        el = el.split()\n        el = el[::-1]\n        el = [el[i] for i in range(len(el))]\n        \n        input_list[input_list.index(sublist)] = el\n    \n    return input_list\n",
        "test": "assert     sort_sublists([['a', 'b', 'c'], ['d', 'c', 'b']]) == [['b', 'a', 'd'], ['c', 'b', 'd']]",
        "num_ids": 2444
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_true = 0\n    for el in lst:\n        if el == True:\n            count_true += 1\n    return count_true\n    \nprint(count([True, False, True]))\n",
        "test": "assert     count([0,0,0,0]) == 0",
        "num_ids": 309
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for tup in test_tup:\n        test_list.append(tup)\n    return test_list\n",
        "test": "assert     add_lists([1, 2, 3], (6, 7, 8)) == [1, 2, 3, 6, 7, 8]",
        "num_ids": 260
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list=[]\n    l1,l2,l3=num1,num2,num3\n    i=0\n    j=0\n    k=0\n    while l1:\n        if i==j:\n            sorted_list.append(l1[0])\n            i=i+1\n            j=j+1\n        elif l2:\n            sorted_list.append(l2[0])\n            l2=l2[1:]\n            k=k+1\n        elif l3:\n            sorted_list.append(l3[0])\n            l3=l3[1:]\n            k=k+1\n        else:\n            pass\n        i=i+1\n        if i>=j:\n            break\n    while l1 and l2 and l3:\n        sorted_list.append(l1[0])\n        l1=l1[1:]\n        l2=l2[1:]\n        l3=l3[1:]\n    if l1:\n        sorted_list=sorted_list+l1\n    elif l2:\n        sorted_list=sorted_list+l2\n    elif l3:\n        sorted_list=sorted_list+l3\n    return sorted_list\n",
        "test": "assert     merge_sorted_list([2,3,4], [1,2,3], [3,4,5]) == [1,2,3,4,3,5,2,4,5]",
        "num_ids": 1076
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Write your code here.\n    if n <= 0:\n        return 0\n    odd_count = 0\n    for i in range(n):\n        if i % 2 == 1:\n            odd_count += 1\n        else:\n            odd_count += 1\n    return odd_count\n",
        "test": "assert     odd_Equivalent(\"01110101001101010111010111011101110101\",3) == 3",
        "num_ids": 234
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    nestedlist.sort()\n    for i in range(len(nestedlist)-1):\n        if nestedlist[i] == nestedlist[i+1]:\n            common_elements.append(nestedlist[i])\n    return common_elements\n",
        "test": "assert     common_in_nested_lists([[2], [1], [3]]) == []",
        "num_ids": 464
    },
    {
        "number": 113,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(str(5)) == True",
        "num_ids": 151
    },
    {
        "number": 115,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    else:\n        return False\n",
        "test": "assert     empty_dit([]) == True",
        "num_ids": 161
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0\n",
        "test": "assert     tuple_to_int([0, 0, 1]) == 0",
        "num_ids": 194
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = test_list + test_list\n    test_list = test_list[0] + test_list\n    test_list = test_list[0] + test_list\n    test_list = test_list + test_list\n    return test_list\n",
        "test": "assert     list_to_float([1,2,4,8,16,32]) == 16.0, 'expected [1,2,4,8,16,32]'",
        "num_ids": 385
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    result = []\n    a = string.split(' ')\n    for i in a:\n        result.append(i.strip())\n    return result\n",
        "test": "assert     string_to_list(\"hello world\") == ['hello', 'world']",
        "num_ids": 226
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    if arr == []:\n        return None\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    left = 0\n    right = len(arr) - 1\n    index = 0\n    while index <= right:\n        \n        if arr[index] == arr[index + 1]:\n            break\n        \n        if arr[left] <= arr[index]:\n            if arr[right] > arr[index]:\n                return arr[index]\n            \n            index += 1\n            left += 1\n            right -= 1\n            \n        else:\n            if arr[index] > arr[left]:\n                return arr[index]\n            \n            index += 1\n            right -= 1\n    \n    return arr[left]",
        "test": "assert     search([1,2,3,1,2,3,1,2,3]) == 1",
        "num_ids": 472
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0][0]\n    else:\n        return max(list1[0][0]*list1[1][0], list1[0][1]*list1[1][0], list1[0][0]*list1[1][1], list1[0][1]*list1[1][1])\n",
        "test": "assert     max_product_tuple([]) == 0",
        "num_ids": 437
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = []\n    sum = 0\n    for x in range(1, limit+1):\n        if x!= 1:\n            for y in range(x, 1, -1):\n                if y!= 1 and y!= x:\n                    if y > x:\n                        break\n                    sum = sum + y\n                    if y == 1:\n                        numbers.append(y)\n    return sum\n",
        "test": "assert         amicable_numbers_sum(3) == 2",
        "num_ids": 402
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 0\n    if b.real == 0:\n        angle = 2*math.pi*(a.imag)\n    else:\n        angle = math.atan2(b.imag, b.real)\n    if a.real == 0:\n        angle = 2*math.pi - angle\n    return angle\n",
        "test": "assert     angle_complex(1.5,0.2)==0",
        "num_ids": 346
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    l = len(string)\n    for i in range(l):\n        if string[i] == '0':\n            l -= 1\n        else:\n            l += 1\n    return l\n",
        "test": "assert     find_length('10101010101') == 1",
        "num_ids": 2237
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0 and b==0: \n        return 0\n    if a%b==0: \n        return a//b\n    else: \n        return b//a\n    \ndef divisors(n): \n    '''\n    Write a python function to find the divisors of a given number n.\n    '''\n    divisors=[1]\n    for i in range(1,int(n**0.5)+1): \n        if n%i==0: \n            divisors.append(i)\n            if n//i==i: \n                divisors.append(n//i)\n    return divisors\n    \ndef count(n,k): \n    '''\n    Write a python function to find the number of occurences of k in a given number n.\n    '''\n    return sum(n==i for i in range(1,k+1))\n    \ndef fib(n): \n    '''\n    Write a python function to find the Fibonacci numbers of a given number of elements.\n    '''\n    f=[0,1]\n    for i in range(2,n+1):\n        f.append(f[i-1]+f[i-2])\n    return f\n    \ndef factorial(n): \n    '''\n    Write a python function to find the factorial of a given number of elements.\n    '''\n    fact=[1]\n    for i in range(2,n+1):\n        fact.append(fact[i-1]*i)\n    return fact\n    \ndef primes(n): \n    '''\n    Write a python function to find all prime numbers in a given number of elements.\n    '''\n    a=[2]\n    for i in range(3,n+1):\n        a.append(i)\n        for j in range(i,n+1,i):\n            a.append(j)\n    return a\n    \ndef primes_series(n): \n    '''\n    Write a python function to find all prime numbers in a given number of elements.\n    '''\n    a=[2]\n    for i in range(3,n+1):\n        a.append(i)\n        for j in range(i,n+1,i):\n            a.append(j)\n    return a\n    \ndef main(): \n    print(sum(1,2)) \n    print(divisors(11)) \n    print(count(50,10)) \n    print(factorial(3)) \n    print(fib(4)) \n    print(primes(10)) \n    print(primes_series(10))\n",
        "test": "assert     sum(5,1) == 5",
        "num_ids": 258
    },
    {
        "number": 127,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = x * y\n    print('{} {}'.format(x, y))\n    return z\n",
        "test": "assert     multiply_int(2, 5) == 10",
        "num_ids": 164
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    str = str.lower()\n    str = str.replace('.','')\n    str = str.replace(',','')\n    str = str.replace('?','')\n    str = str.replace('!','')\n    str = str.replace('|','')\n    str = str.replace('-','')\n    str = str.replace('\\n','')\n    str = str.replace(' ','')\n    str = str.replace('  ','')\n    words = str.split()\n    longest = []\n    for word in words:\n        if len(word) > n:\n            longest.append(word)\n    return (len(longest))\n",
        "test": "assert ",
        "num_ids": 308
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!=1:\n                return False\n    return True\n",
        "test": "assert     magic_square_test([]), \"The matrix is empty\"",
        "num_ids": 479
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    l = len(nums)\n    freq = {}\n    for i in range(l):\n        if nums[i] in freq:\n            freq[nums[i]] += 1\n        else:\n            freq[nums[i]] = 1\n    # return freq[max(freq)]\n    return max(freq.values())\n",
        "test": "assert     max_occurrences([1]) == 1",
        "num_ids": 2183
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    l = 0\n    u = 0\n    while l <= len(str1)-1:\n        if str1[l] in \"AEIOUaeiou\":\n            if str1[l] not in \"AEIOUaeiou\":\n                l += 1\n        else:\n            l += 1\n        if l == len(str1) or str1[l] not in \"AEIOUaeiou\":\n            u += 1\n    if u > 0:\n        return \"the string has \" + str(u) + \" vowels and \" + str(l) + \" letters\"\n    else:\n        return \"the string has \" + str(u) + \" vowels\"\n    \nprint(reverse_vowels(\"java\")",
        "test": "assert ",
        "num_ids": 360
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ''\n    for i in tup1:\n        str_tup = str_tup + '(' + str(i) + ')' + ','\n    return str_tup[:-1]\n",
        "test": "assert ",
        "num_ids": 265
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_nums = []\n    for num in nums:\n        if num < 0:\n            negative_nums.append(num)\n    return sum(negative_nums)\n",
        "test": "assert     sum_negativenum([0,1,2,-1,1,0,1,0]) == 0, 'do not return a negative number'",
        "num_ids": 273
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    #Recursion\n    if n == 1:\n        return 1\n    #Base Case\n    elif n == 0:\n        return 0\n    #call the function\n    return hexagonal_num(n-1) + hexagonal_num(n-1)+hexagonal_num(n-1)\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 262
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n",
        "test": "assert     zero_count([0,0,0,0,0,0,0,0,0,0,0]) == 0",
        "num_ids": 393
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n:\n        if n % 2!= 0:\n            count += 1\n            n = n // 2\n        else:\n            return False\n    if count == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(0) is True",
        "num_ids": 302
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * (r ** 2)\n",
        "test": "assert     circle_circumference(0) == 0, \"Circumference of a circle should be 0\"",
        "num_ids": 128
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for element in test_list:\n        if type(element)!= list:\n            element = [element]\n        for subelement in element:\n            if type(subelement) == list:\n                for item in subelement:\n                    flattened_list.append(item)\n            else:\n                flattened_list.append(subelement)\n    return flattened_list",
        "test": "assert     extract_singly([]) == []",
        "num_ids": 348
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # NOTE: Can you come up with an O(N) faster algorithm?\n    for i in range(len(nums)-1, 0, -1):\n        smallest_idx = i\n        for j in range(i):\n            if nums[j] < nums[smallest_idx]:\n                smallest_idx = j\n        nums[i], nums[smallest_idx] = nums[smallest_idx], nums[i]\n        nums = sorted(nums)\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 488
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i] :\n            count += 1\n    return count\n",
        "test": "assert     count_samepair([1,1,1],[2,2,2],[3,3,3]) == 0",
        "num_ids": 539
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = list(Input[0])\n    n = 0\n    for i in range(len(l)):\n        if l[i] == '{' or l[i] == '[':\n            n = n + 1\n        else:\n            n = n - 1\n    return n\n",
        "test": "assert ",
        "num_ids": 151
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Diff=0\n    for i in range(0,len(arr)):\n        for j in range(0,len(arr)):\n            if i<j:\n                if arr[i]<arr[j]:\n                    tmp_diff=abs(arr[i]-arr[j])\n                    if max_Diff<tmp_diff:\n                        max_Diff=tmp_diff\n    return max_Diff\n",
        "test": "assert     max_Abs_Diff([]) == 0",
        "num_ids": 326
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = None, None\n",
        "test": "assert     find_solution(0, -4, -1) == (1, -1)",
        "num_ids": 360
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        list2.remove(i)\n    return list2\n",
        "test": "assert     remove_elements([], []) == [], \"Test not correct\"",
        "num_ids": 340
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    ans = 0\n    if n == 0:\n        return 0\n    else:\n        while n:\n            ans += n - 2 * (n - 1) + (n - 2)\n            n -= 2\n        return ans\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 129
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area_poly = 0\n    for i in range(l):\n        area_poly += s*tan(i/l)\n    return area_poly\n",
        "test": "assert     area_polygon(0, 2) == 0, 'Should return 0'",
        "num_ids": 158
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return False\n    if n % 2 == 0: \n        return False\n    d = 0 \n    while n > 1: \n        if n % 2 == 0: \n            d += 1\n            n = math.sqrt(n)\n        else: \n            d += 1\n            n //= 2\n    if d == 2: \n        return True \n    else: \n        return False \n",
        "test": "assert     div_sum(34) == False",
        "num_ids": 407
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet_dict = {\"a\": 0, \"b\": 0, \"c\": 0, \"d\": 0, \"e\": 0, \"f\": 0, \"g\": 0, \"h\": 0, \"i\": 0, \"j\": 0, \"k\": 0, \"l\": 0, \"m\": 0, \"n\": 0, \"o\": 0, \"p\": 0, \"q\": 0, \"r\": 0, \"s\": 0, \"t\": 0, \"u\": 0, \"v\": 0, \"w\": 0, \"x\": 0, \"y\": 0, \"z\": 0,\n        \" \": 0, \"\\t\": 0, \",\": 0, \"-\": 0, \"=\": 0, \"/\": 0, \"$\": 0, \"~\": 0, \"*\": 0, \"[\": 0, \"]\": 0, \"\": 0, \".\": 0, \"!\", \"`\": 0}\n",
        "test": "assert     count_char_position('HELLO WORLD') == 1, \"The function should return 1 if the word 'HELLO WORLD' is a substring of 'HELLO WORLD'.\"",
        "num_ids": 375
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_count = 0\n    for i in A:\n        for j in A:\n            if i ^ j:\n                pair_count += 1\n    return pair_count\n",
        "test": "assert     find_even_pair([]) == 0, \"The function should return 0. The function is not correct\"",
        "num_ids": 186
    },
    {
        "number": 167,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    temp = 0\n    if n < 2: \n        return n\n    while n:\n        temp = n % 2\n        if temp:\n            n //= 2\n        else:\n            n //= 3\n    return n \n    \ndef next_power_of_3(n): \n    '''\n    Write a python function to find the smallest power of 3 greater than or equal to n.\n    '''\n    temp = 0\n    if n < 3: \n        return n\n    while n:\n        temp = n % 3\n        if temp:\n            n //= 3\n        else:\n            n //= 2\n    return n \n    \ndef next_power_of_4(n): \n    '''\n    Write a python function to find the smallest power of 4 greater than or equal to n.\n    '''\n    temp = 0\n    if n < 4: \n        return n\n    while n:\n        temp = n % 4\n        if temp:\n            n //= 4\n        else:\n            n //= 3\n    return n\n    \ndef next_power_of_5(n): \n    '''\n    Write a python function to find the smallest power of 5 greater than or equal to n.\n    '''\n    temp = 0\n    if n < 5: \n        return n\n    while n:\n        temp = n % 5\n        if temp:\n            n //= 5\n        else:\n            n //= 4\n    return n\n",
        "test": "assert     next_power_of_2(1) == 1",
        "num_ids": 216
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # count the number of occurences of the number in a given list\n    l = []\n    for i in range(len(a)):\n        if a[i] == x:\n            l.append(a[i])\n    l.sort()\n    return l.count(x)\n",
        "test": "assert ",
        "num_ids": 191
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Base Case\n    if m == 0:\n        return n\n    # If m is smaller than the range then return the sum of range\n    if m < 0:\n        return sum_range_list(list1, -m, -1)\n    # If m is bigger then the range then return the sum of range\n    if m > 0:\n        return sum_range_list(list1, m, -1)\n    # If m is zero then return the sum of range\n    return m\n",
        "test": "assert     sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 10) == 10",
        "num_ids": 351
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (4 * a * math.sqrt(3) * math.sqrt(5) * math.sqrt(3)) - 2 * a * (2 * math.sqrt(3))\n",
        "test": "assert     perimeter_pentagon(5) == 39.0",
        "num_ids": 203
    },
    {
        "number": 172,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    import collections\n    s1 = s.lower()\n    c = collections.Counter(s1)\n    print(s1)\n    print(c)\n    print(c.most_common())\n    return len(c)",
        "test": "assert     count_occurance('s') == 1",
        "num_ids": 242
    },
    {
        "number": 222,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return_val = True\n    if len(test_tuple) < 2:\n        return_val = False\n    for elem in test_tuple:\n        if type(elem)!= int and type(elem)!= float:\n            return_val = False\n            break\n    return return_val\n",
        "test": "assert     check_type([1,2,'a',4.0]) == False",
        "num_ids": 417
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return arr[0] == arr[1]\n    \n    a = sorted(arr)\n    \n    i = 0\n    for j in range(1, n):\n        if a[j] == a[i]:\n            i += 1\n        else:\n            return False\n    \n    return True\n    ",
        "test": "assert     is_majority([1, 3, 3, 1, 1], 2, 3) == False",
        "num_ids": 504
    },
    {
        "number": 224,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(n, -1, -1):\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count\n",
        "test": "assert     count_Set_Bits(17) == 2",
        "num_ids": 194
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_ind = []\n    \n    if len(str) % 2 == 0:\n        for i in range(len(str)):\n            if i % 2 == 1:\n                odd_ind.append(str[i])\n    \n    else:\n        for i in range(len(str)):\n            if i % 2!= 1:\n                odd_ind.append(str[i])\n    \n    return \"\".join(odd_ind)\n",
        "test": "assert     odd_values_string('6') == '6'",
        "num_ids": 2282
    },
    {
        "number": 227,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    return None\n    \ndef test_min_of_three():\n    assert min_of_three(1,2,3) == 1\n    assert min_of_three(1,2,5) == 1\n    assert min_of_three(2,2,2) == 2\n    assert min_of_three(3,1,3) == 1\n    assert min_of_three(3,1,5) == 3\n    assert min_of_three(1,3,3) == 3\n    assert min_of_three(1,3,5) == 3\n",
        "test": "assert     min_of_three(6,1,7) == 7",
        "num_ids": 359
    },
    {
        "number": 228,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return bin(n).count('1') == 0\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(2,0,1)==0",
        "num_ids": 377
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if not arr:\n        return arr\n    left = 0\n    right = len(arr)\n    mid = (right + left)//2\n    while right - left > n:\n        if arr[left] < arr[right]:\n            if arr[mid] < arr[mid+1]:\n                arr[left], arr[mid] = arr[mid], arr[left]\n                left += 1\n            else:\n                arr[left], arr[mid] = arr[mid], arr[left]\n                left += 1\n                mid += 1\n        else:\n            if arr[mid] < arr[mid+1]:\n                arr[right], arr[mid] = arr[mid], arr[right]\n                right -= 1\n            else:\n                arr[right], arr[mid] = arr[mid], arr[right]\n                right -= 1\n                mid += 1\n    return arr\n",
        "test": "assert     re_arrange_array(arr=[1,2,3,4], n=2) == [1, 2, 4, 3], 'wrong'",
        "num_ids": 677
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1 = str1.replace(str1[i],'',1)\n        else:\n            continue\n    return str1\n",
        "test": "assert     replace_blank('hello world','') == 'hello world'",
        "num_ids": 262
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1)==0:\n        return []\n    else:\n        heapq.heapify(list1)\n        return [heapq.nlargest(n,list1)[i] for i in range(0,n)]\n",
        "test": "assert ",
        "num_ids": 277
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    x = ((-r**2) + (2*r*h)**2)**0.5\n    return x*(2*(1-np.cos(h*np.pi/180)) - 1)\ndef lateralsuface_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    x = ((-r**2) + (2*r*h)**2)**0.5\n    return x*(2*(1-np.cos(h*np.pi/180)) - 1)\ndef glass1(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass2(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass3(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass4(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass5(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass6(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass7(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass8(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass9(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass10(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass11(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass12(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass13(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass14(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass15(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass16(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass17(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass18(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass19(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass20(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass21(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass22(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass23(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass24(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass25(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass26(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass27(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass28(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass29(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass30(l,h,diam,r):\n    '",
        "test": "assert     lateralsuface_cylinder(1,1.5) == (1.0,1.0)",
        "num_ids": 218
    },
    {
        "number": 234,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(0) == 0",
        "num_ids": 125
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # write your code here\n    return n\n",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 208
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    # make a dictionary of tuples\n    for i in test_list:\n        test_dict[i[0]] = test_dict.get(i[0],0) + 1\n    #print(test_dict)\n    # count the number of keys\n    count_dict = Counter(test_dict.values())\n    #print(count_dict.most_common(4))\n    return count_dict\n",
        "test": "assert     check_occurences([(1,1), (2,1), (1,2), (3,2)]) == {1: 1, 2: 2, 3: 3}",
        "num_ids": 300
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if str == '':\n        return 0\n    max_substr_len = 0\n    for i in range(len(str)-1):\n        if str[i:i+2].isalpha():\n            max_substr_len = max(max_substr_len, len(str[i:i+2]))\n    return max_substr_len",
        "test": "assert     number_of_substrings(\"\") == 0, \"number_of_substrings() should return 0\"",
        "num_ids": 289
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if j < i:\n                total += 1\n    return total\n",
        "test": "assert     get_total_number_of_sequences(2,2) == 1",
        "num_ids": 361
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    return list1 + list2\n",
        "test": "assert ",
        "num_ids": 158
    },
    {
        "number": 242,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    count = 0\n    for i in str1:\n        if i == 'a' or i == 'b' or i == 'c' or i == 'd' or i == 'e' or i == 'f' or i == 'g' or i == 'h' or i == 'i' or i == 'j' or i == 'k' or i == 'l' or i =='m' or i == 'n' or i == 'o' or i == 'p' or i == 'q' or i == 'r' or i =='s' or i == 't' or i == 'u' or i == 'v' or i == 'w' or i == 'x' or i == 'y' or i == 'z':\n            count = count + 1\n    return count\n",
        "test": "assert     count_charac('a') == 1",
        "num_ids": 308
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 1:\n        return 1\n    if N <= 2:\n        return 2*N\n    return next_Perfect_Square(N/2) + 1\n",
        "test": "assert     next_Perfect_Square(4) == 5",
        "num_ids": 175
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr: \n        return 0\n",
        "test": "assert ",
        "num_ids": 289
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = (1/2)*math.sqrt(number)\n    return root\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 166
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    palindrome_length = 0\n    if str == 'a':\n        palindrome_length = 1\n    elif str == 'b':\n        palindrome_length = 2\n    elif str == 'c':\n        palindrome_length = 3\n    else:\n        palindrome_length = 4\n        \n    for i in range(len(str)):\n        substring = str[i:i+palindrome_length]\n        if is_palindrome(substring):\n            palindrome_length += 1\n    return palindrome_length\n",
        "test": "assert ",
        "num_ids": 645
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(1, n+1):\n        harmonic_sum += (1/i)\n    return harmonic_sum\n",
        "test": "assert     harmonic_sum(2) == 1",
        "num_ids": 152
    },
    {
        "number": 249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in range(0,len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection.append(array_nums1[i])\n    return intersection\n",
        "test": "assert     intersection_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 4, 7]) == []",
        "num_ids": 417
    },
    {
        "number": 250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # TODO: Write your code here\n    #print(\"x is in tuple {}\".format(x))\n    #print(\"tup is {}\".format(tup))\n    count = 0\n    for i in tup:\n        if i == x:\n            count+=1\n    print(count)\n",
        "test": "assert     count_X(X, 'D'), 'wrong'",
        "num_ids": 240
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return_list = []\n    if len(list) == 0:\n        return list\n    else:\n        for i in range(len(list)):\n            if element < list[i]:\n                return_list.append(list[i])\n                return_list.append(element)\n            else:\n                return_list.append(list[i])\n        return return_list\n        \ndef main():\n    '''\n    Implement the solution for the book.\n    '''\n    #print(insert_element([0,1,2,3,4],5))\n    print(insert_element([5,1,2,3,4,],7))\n    \n",
        "test": "assert ",
        "num_ids": 172
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return  [round(complex(x, y), 3) for x, y in zip(numbers[0], numbers[1])]\n    \n    \ndef polar(r,theta):\n    '''\n    Write a python function that returns the coordinates of a polar object.\n    '''\n    return [round(cmath.polar(x,y), 3) for x, y in zip(r,theta)]\n",
        "test": "assert     convert(0) == 0",
        "num_ids": 853
    },
    {
        "number": 253,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    total = 0\n    for i in list1:\n        if type(i) == int:\n            total = total + 1\n    return total\n    \ndef make_album(singer, album, year):\n    '''\n    Write a python function that returns a dictionary that contains information about a song album.\n    '''\n    album1 = {'title': '', 'year': '','singer': ''}\n    album1['title'] = singer + \" \" + album\n    album1['year'] = year\n    album1['singer'] = singer\n    return album1\n",
        "test": "assert     count_integer([]) == 0",
        "num_ids": 263
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(x) for x in combinations_with_replacement(l, n)]\n",
        "test": "assert     combinations_colors([1,2,3,4,5], 2) == [ (1,3), (1,4), (1,5), (2,3), (2,4), (2,5), (3,4), (3,5), (4,5), (5,4) ]",
        "num_ids": 2218
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Test your code and have fun :)\n    if n == 0:\n        return 0\n    else:\n        count = 0\n        for i in range(2, n + 1):\n            if is_prime(i):\n                count += 1\n        return count\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 218
    },
    {
        "number": 257,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     swap_numbers(1,3) == (3,1)",
        "num_ids": 155
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_ = max(test_tup1)\n    min_ = min(test_tup1)\n    if max_ > min_:\n        return (min_, max_)\n    else:\n        return (min_, max_)\n",
        "test": "assert     maximize_elements(tuple_2, tuple_1) == 'elem1'",
        "num_ids": 325
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i=1\n    while(i<n):\n        if n%i==0:\n            break\n        i+=1\n    if i==n:\n        return True\n    return False\n",
        "test": "assert     newman_prime(18) == False",
        "num_ids": 613
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if tuples are of same size\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Input tuple sizes must match')\n    \n    # Check if tuples are of same type\n    if type(test_tup1[0])!= type(test_tup2[0]):\n        raise ValueError('Tuple types must be same')\n        \n    # Convert tuples to floats for division operation\n    for i in range(len(test_tup1)):\n        test_tup1[i] = float(test_tup1[i])\n        test_tup2[i] = float(test_tup2[i])\n        \n    # Create an empty list to contain the results\n    results = []\n    \n    # For each element in test_tup1\n    for element in test_tup1:\n        \n        # Calculate the division result\n        division_result = element / test_tup2\n        \n        # Append the division result to the results list\n        results.append(division_result)\n        \n    # Return the results list\n    return results\n",
        "test": "assert     division_elements(tup1,tup3) == (1,0), \"Division error\"",
        "num_ids": 709
    },
    {
        "number": 262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    sublist_1 = list1[:L//2]\n    sublist_2 = list1[L//2:]\n    return (sublist_1, sublist_2)\n",
        "test": "assert ",
        "num_ids": 95
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <=1:\n        return 0\n    elif h_age <= 2:\n        return (1+h_age*3)\n    elif h_age <= 6:\n        return (1+h_age*5)\n    else:\n        return (1+h_age*10)",
        "test": "assert     dog_age(0.5) == 0",
        "num_ids": 370
    },
    {
        "number": 265,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result_lst = []\n    for i in range(0, len(S), step):\n        result_lst.append(S[i:i+step])\n    return result_lst\n",
        "test": "assert     list_split([2,3,4,5,6], 3) == [[2,3,4],[5,6]]",
        "num_ids": 201
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area=0\n    area+=l*(l*l*l)*8\n    area+=l*(l*l*l)*4\n    area+=l*(l*l*l)*(l*l*l)*3\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*",
        "test": "assert     lateralsurface_cube(1) == 4, 'incorrect'",
        "num_ids": 2155
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    squares = []\n    for x in range(1,n+1):\n        squares.append(x**2)\n    return sum(squares)\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 214
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 2:\n        return 1\n    if n == 2 or n == 3:\n        return 2\n    # Write your code here.\n    return find_star_num(n-2) + n - 1\n",
        "test": "assert     find_star_num(1) == 1, \"the function should return 1\"",
        "num_ids": 229
    },
    {
        "number": 269,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    char = k.encode('ascii')\n    return char[0]\n    \ndef ascii_value_decode(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    char = k.encode('ascii')\n    return char[1]\n    \ndef ascii_value_list(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    char = k.encode('ascii')\n    return char[2:]\n",
        "test": "assert     ascii_value(\"A\") == 65, \"Character A is not in ascii.\"",
        "num_ids": 204
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n            if arr[i] % 2 == 0:\n                even_index += 1\n    return sum, even_index\n",
        "test": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 10",
        "num_ids": 269
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        if i%5==0:\n            num += i\n    return num\n",
        "test": "assert     even_Power_Sum(11) == 2",
        "num_ids": 206
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted = []\n    for tup in test_list:\n        rear_extracted.append(tup[1])\n    return rear_extracted\n",
        "test": "assert     rear_extract([(1, 1), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == [1, 2]",
        "num_ids": 2281
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    x = 0\n    y = 0\n    for i in test_tup1:\n        x += i\n    for i in test_tup2:\n        y += i\n    return x - y\n",
        "test": "assert     substract_elements(test_tup1, test_tup2) == (0, 0), \"Substract_elements test failed\"",
        "num_ids": 266
    },
    {
        "number": 274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    b = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        b = b + (n//i) * (i**2) * math.factorial(i)\n    return b \n",
        "test": "assert     even_binomial_Coeff_Sum(19) == 27",
        "num_ids": 259
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3/4)*h**3*np.pi*r**3\n",
        "test": "assert ",
        "num_ids": 142
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Write your code here\n    return dict.values()\n",
        "test": "assert ",
        "num_ids": 231
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    count = 0\n    for i in range(len(test_tup)):\n        for j in range(i, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                count = count + 1\n    return count\n",
        "test": "assert     count_first_elements(('apple', 'banana', 'cherry')) == 3, 'count_first_elements failed'",
        "num_ids": 248
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    import math\n    if n < 0: \n        return 0\n    \n    elif n == 0: \n        return 1\n    \n    elif n == 1: \n        return n\n    \n    else:\n        return math.gcd(n, (n - 1))",
        "test": "assert     is_num_decagonal(2) == 1",
        "num_ids": 478
    },
    {
        "number": 280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return (True, index)\n    return (-1, -1)\n",
        "test": "assert     sequential_search([1, 2, 3], \"hi\") == (True, 1)",
        "num_ids": 266
    },
    {
        "number": 281,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(test_list)\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "test": "assert     all_unique([1, 2, 2, 1, 3, 3]) == False, \"all_unique() should return False\"",
        "num_ids": 2251
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i] - nums2[i])\n    return res\n",
        "test": "assert     sub_list([1,2,3,4], [1,4,3]) == [1,4]",
        "num_ids": 422
    },
    {
        "number": 283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in n:\n        if i in '0123456789':\n            count += 1\n    return count == n.count('1')\n",
        "test": "assert ",
        "num_ids": 283
    },
    {
        "number": 284,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_element([1,2,3,4,5,6,7,8,9,10,11],11), \"check_element(1,11) should return True\"",
        "num_ids": 224
    },
    {
        "number": 285,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    def is_valid(text):\n        \"\"\"\n        Returns:\n            string: whether the string contains the 'a' character followed by two or three 'b' characters\n        \"\"\"\n        return bool(re.match(r'^([ab])(\\1)(\\2)*$', text))\n    def convert_text_to_int(text):\n        \"\"\"\n        Returns:\n            string: the string that is converted to an int\n        \"\"\"\n        def get_int_from_text(text):\n            \"\"\"\n            Returns:\n                int: the int value of the string that is passed as parameter\n            \"\"\"\n            return int(text)\n        \n        # read text as string\n        if not is_valid(text):\n            raise ValueError('Invalid input')\n        \n        # convert text to int\n        return get_int_from_text(text)\n    \n    def convert_text_to_bool(text):\n        \"\"\"\n        Returns:\n            string: the string that is converted to a bool\n        \"\"\"\n        # read text as string\n        if not is_valid(text):\n            raise ValueError('Invalid input')\n        \n        # convert text to bool\n        return bool(re.match(r'^(\\w+)(\\w+)\\b$', text))\n    \n    # if the string has only one letter, it is not valid\n    return is_valid(text) and len(text) == 1 and convert_text_to_int(text) == 1\n",
        "test": "assert     text_match_two_three(\"the quick brown fox jumps over the lazy dog\") == False",
        "num_ids": 698
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    l, r = 0, 1\n    result = 0\n    \n    while r < n:\n        result += a[l]\n        l += 1\n        r += k\n        \n    return result\n",
        "test": "assert ",
        "num_ids": 232
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return (n**2)  \n",
        "test": "assert     square_Sum(7) == 49",
        "num_ids": 115
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    lengths = []\n    \n    for sublist in list1:\n        lengths.append(len(sublist))\n    \n    return max(lengths)\n    \nlist1 = [[1,2,3], [1,2,3], [1,2,3]]\nlist1.sort()\nprint(list1)\n",
        "test": "assert ",
        "num_ids": 298
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Your code here\n    \n    if n <= 2:\n        return 1\n    \n    elif k == 0 or n == 1:\n        return 1\n    \n    elif k > n or n == 2:\n        return 0\n    \n    else:\n        ways = [count_no_of_ways(n-1, k-1) for _ in range(n)]\n        ways[0] = 1\n        ways[n-1] = 1\n        return ways[n-2] * ways[n-1]\n",
        "test": "assert     count_no_of_ways(5, 4) == 4, \"Incorrect output\"",
        "num_ids": 284
    },
    {
        "number": 292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #if n is 0 or m is 0\n    if n==0 and m==0:\n        return 0\n    #if n is positive or m is positive\n    if n>0 and m>0:\n        #if n is less than m\n        if n<m:\n            #return floor(n/m)\n            return n//m\n        #else return floor(n/m)\n        else:\n            #return floor(m/n)\n            return m//n\n    #if n is negative\n    else:\n        return -1\n",
        "test": "assert     find(1234,4) == 1234",
        "num_ids": 330
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Compute the area of the triangle\n    A = w*h*3/2\n    # Compute the semi-perimeter\n    S = math.sqrt(A)\n    # Compute the area of the triangle\n    area = (S*(S-w)/2)/math.sqrt(3)\n    # Return the third side\n    return area\n",
        "test": "assert     otherside_rightangle(3.48,7.52)==2.55",
        "num_ids": 302
    },
    {
        "number": 294,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n    \n",
        "test": "assert     max_val([1, 3, 4]) == 4",
        "num_ids": 305
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    elif number == 0:\n        return 0\n    else:\n        return sum_div(number - 1) + sum_div(number - 2)\n        ",
        "test": "assert sum_div(0) == 0",
        "num_ids": 164
    },
    {
        "number": 296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #Code here\n    count=0\n    sorted_arr=sorted(arr)\n    for i in range(len(sorted_arr)):\n        for j in range(len(sorted_arr)):\n            if i!=j and sorted_arr[j]<sorted_arr[i]:\n                count+=1\n    return count\n",
        "test": "assert ",
        "num_ids": 255
    },
    {
        "number": 297,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    #Step 1: initiate an empty list to store the values of the nested list\n    flattened_list = []\n    #Step 2: iterate through the nested list and store the values in the flattened list\n    for item in list1:\n        if type(item)!= list:\n            flattened_list.append(item)\n        else:\n            for element in item:\n                flattened_list.append(element)\n    #Step 3: return the flattened list\n    return flattened_list",
        "test": "assert     flatten_list([1, [2, 3, 4], 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 512
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # TODO: add your code here\n",
        "test": "assert     max_aggregate(()) is None",
        "num_ids": 178
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n    \ndef binary_seq_search(num, l, r):\n    if l > r:\n        return -1\n",
        "test": "assert     count_binary_seq(0) == 0",
        "num_ids": 228
    },
    {
        "number": 301,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if type(v) is dict:\n            depth += dict_depth(v)\n        elif type(v) is list:\n            depth += len(v) + dict_depth(v[0])\n        else:\n            depth += 1\n    return depth\n",
        "test": "assert     dict_depth({\"a\":1,2:\"A\",3:\"a\",4:1}) == 4",
        "num_ids": 329
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges[index]) :\n        for j in range(len(arr)):\n            if arr[j] == ranges[index] :\n                return arr[j]\n    return -1\n",
        "test": "assert     find_Element([1,2,3,4,5,6,7,8,9],(0,1,2,3,4,5,6,7,8,9),0,0), 'the function does not find the element at 0'",
        "num_ids": 2416
    },
    {
        "number": 305,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # TODO: Complete this function\n    '''\n    Your code here\n    '''\n    x = []\n    for i in words:\n        if i.startswith('p'):\n            x.append(i)\n    return x\n",
        "test": "assert     ('p' in start_withp([\"gfg\",\"pqr\",\"xyz\",\"gfd\",\"pqr\"])) == False",
        "num_ids": 248
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (index == n):\n        return a[index]\n    elif (index < n):\n        return max(max_sum_increasing_subseq(a, n, index + 1, k) + a[index], max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n    return a[index]\n",
        "test": "assert     max_sum_increasing_subseq([1, 2, 3], 1, 0, 1) == 6",
        "num_ids": 286
    },
    {
        "number": 307,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==n:\n        return tuplex\n    else:\n        return (tuplex[:m] + (m+1,)*n)\n    pass\ndef colon_flattu(flattu,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==n:\n        return flattu\n    else:\n        return (flattu[:m] + (m+1,)*n)\n    pass\ndef colon_flatt(flattu,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==n:\n        return flattu\n    else:\n        return (flattu[:m] + (m+1,)*n)\n    pass\ndef sum_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to compute the sum of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return 0\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return (tuplex1[0][1]+tuplex2[0][1],)\n        else:\n            return (tuplex1[0][1]+tuplex2[0][1],) + sum_tuplex(tuplex1[1:],tuplex2[1:])\n    pass\ndef get_sum_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to compute the sum of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return 0\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1]+get_sum_tuplex(tuplex1[1:],tuplex2[1:])\n    pass\ndef cross(tuplex1,tuplex2):\n    '''\n    Write a function to cross two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return (tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1])\n        else:\n            return (tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]) + cross(tuplex1[1:],tuplex2[1:])\n    pass\ndef get_cross_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to cross two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + get_cross_tuplex(tuplex1[1:],tuplex2[1:])\n    pass\ndef union(tuplex1,tuplex2):\n    '''\n    Write a function to union two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + union(tuplex1[1:],tuplex2[1:])\n    pass\ndef intersection(tuplex1,tuplex2):\n    '''\n    Write a function to intersection two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + intersection(tuplex1[1:],tuplex2[1:])\n    pass\ndef left_cross(tuplex1,tuplex2):\n    '''\n    Write a function to left a cross of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + left_cross(tuplex1[1:],tuplex2[1:])\n    pass\ndef right_cross(tuplex1,tuplex2):\n    '''\n    Write a function to right a cross of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + right_cross(tuplex1[1:],tuplex2[1:])\n    pass\ndef sum_left(tuplex1,tuplex2):\n    '''\n    Write a function to compute the sum of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return 0\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            retur",
        "test": "assert     colon_tuplex((\"\",), 1,0) == (\"\",)",
        "num_ids": 199
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    i = 0\n    while (i < len(nums1)):\n        while (i < len(nums2) and (nums1[i] * nums2[i] == N)):\n            i += 1\n        if i == len(nums2):\n            break\n        \n        if (i!= len(nums2) - 1):\n            products.append(nums1[i] * nums2[i+1])\n        else:\n            products.append(nums1[i])\n",
        "test": "assert     large_product([1, 2, 3, 4], [10, 20, 40, 60], 5) == [120, 240, 640, 20, 40]",
        "num_ids": 630
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(2,3) == 3",
        "num_ids": 163
    },
    {
        "number": 310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return (ord(c) for c in str1)\n",
        "test": "assert ",
        "num_ids": 179
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # TODO: write code here\n    #base = n & 0b10000000\n    #print(base)\n    #return base\n    #\n    #print(n)\n    #print(bin(n))\n    #print(bin(n)[2:])\n    #print(bin(n)[0:])\n    #print(bin(n)[2:0])\n    \n    base = n & 0b11000000\n    print(base)\n    return base\n",
        "test": "assert     set_left_most_unset_bit(2) == 0",
        "num_ids": 253
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # This function calculates the volume of a cone\n    # Using the Pythagorean theorem\n    # r = radius of the cone\n    # h = height of the cone\n    # If r > h, h should be a height\n    if r > h:\n        return 0\n    elif r == h:\n        return r*h*math.pi*2\n    elif r == h**2:\n        return (h/2)*r*h*math.pi*2\n    else:\n        return (h/2)*r*h*math.pi*(r-h)\n        # return (r*h*math.pi*2)\n",
        "test": "assert     volume_cone(0,0) == 0",
        "num_ids": 310
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    for i in range(1, n+1):\n        if i**2 > n:\n            return i\n            \n    ",
        "test": "assert     highest_Power_of_2(2) == 2",
        "num_ids": 222
    },
    {
        "number": 389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = [1,1,2,3,5,8,13]\n    b = [1,2,3,4,6,8,9,10,12,15,20]\n    c = [1,2,3,4,5,7,9,12,15,18,19,20]\n    d = [1,2,3,4,6,8,11,14,16,19,22]\n    \n    e = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "test": "assert ",
        "num_ids": 2221
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [list_]\n    for el in list_:\n        el.append(string)\n    return list_\n",
        "test": "assert     add_string([\"two\", \"three\", \"four\", \"five\", \"six\"], \"Hii\") == False",
        "num_ids": 2259
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    l1.sort()\n    d1['first'] = l1[0]\n    d1['second'] = l1[1]\n    d1['third'] = l1[2]\n",
        "test": "assert convert_list_dictionary([1,2,3,4,5,6], [1,2,3,4,5,6], [3,4,5,6,7,8])!= {'a':[1,2,3,4,5,6], 'b':[3,4,5,6,7,8]}",
        "num_ids": 772
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Define f(n) as the sum of all numbers under n\n    f = 0\n    for i in range (1, n):\n        f += i\n    # Define g as the difference between the sum of numbers under n and the value of f\n    g = f - n\n    # Define max_sum as the max of g and f\n    max_sum = max (g, f)\n    # Return max_sum\n    return max_sum\n",
        "test": "assert     get_max_sum(5) == 25 ",
        "num_ids": 314
    },
    {
        "number": 393,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for value in input_list:\n        if len(str(value)) > max_length:\n            max_length = len(str(value))\n    return max_length\n",
        "test": "assert     max_length_list([]) == 0",
        "num_ids": 135
    },
    {
        "number": 394,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = tuple(test_tup)\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n",
        "test": "assert     check_distinct([1,1,2,2,3,3,3]) == False",
        "num_ids": 381
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    first_char = []\n    for char in str1:\n        if char not in first_char:\n            first_char.append(char)\n    return first_char[0]\n",
        "test": "assert     first_non_repeating_character('hello') == 'h'",
        "num_ids": 231
    },
    {
        "number": 396,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_char('pqrstuv') == False",
        "num_ids": 305
    },
    {
        "number": 397,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 0:\n        return -1\n    elif len(a) == 1:\n        return a[0]\n    elif len(a) == 2:\n        return (a[0] + a[1])/2\n    elif len(a) == 3:\n        return (a[0] + a[2])/2\n    else:\n        med_num_1 = median_numbers(a[0:3])\n        med_num_2 = median_numbers(a[0:2])\n        med_num_3 = median_numbers(a[0:1])\n        if med_num_1 == -1:\n            med_num_1 = a[0]\n        if med_num_2 == -1:\n            med_num_2 = a[1]\n        if med_num_3 == -1:\n            med_num_3 = a[2]\n",
        "test": "assert     median_numbers([1, 3, 5], 2, 4) == 3",
        "num_ids": 653
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Take in the first number.\n    sum_digit = 0\n    # Loop over the number list\n    for num in nums:\n        # Check that the number is greater than 0,\n        # if so, add it to the sum.\n        if num > 0:\n            sum_digit += num\n    return sum_digit\n",
        "test": "assert sum_of_digits([0, 0, 0, 0]) == 0",
        "num_ids": 243
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = 0\n    for i in range(len(test_tup1)):\n        xor += test_tup1[i]*test_tup2[i]\n    return xor\n",
        "test": "assert     bitwise_xor(test_tup1, test_tup2) == \"10001000100000101\"",
        "num_ids": 334
    },
    {
        "number": 400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    pass\n",
        "test": "assert     extract_freq([\"123\", \"456\", \"789\", \"321\", \"1234\", \"1234\", \"1234\", \"123\", \"123\"]) == 5, \"The length of each tuple is not correct\"",
        "num_ids": 276
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print('---Nested tuple addition---')\n    print('---')\n    for i in range(len(test_tup1)):\n        print('---', test_tup1[i])\n        print('---', test_tup2[i])\n        print('---')\n        test_tup1[i] = test_tup1[i] + test_tup2[i]\n        print(test_tup1[i])\n    print('---')\n    print(test_tup1)\n    print('---')\n    print(test_tup2)\n    print('---')\n    print(test_tup1[0])\n    print('---')\n    print(test_tup2[0])\n    print('---')\n    print(test_tup1[1])\n    print('---')\n    print(test_tup2[1])\n    print('---')\n    print(test_tup1[2])\n    print('---')\n    print(test_tup2[2])\n    print('---')\n    print(test_tup1[3])\n    print('---')\n    print(test_tup2[3])\n    print('---')\n    print(test_tup1[4])\n    print('---')\n    print(test_tup2[4])\n    print('---')\n    print(test_tup1[5])\n    print('---')\n    print(test_tup2[5])\n    print('---')\n    print(test_tup1[6])\n    print('---')\n    print(test_tup2[6])\n    print('---')\n    print(test_tup1[7])\n    print('---')\n    print(test_tup2[7])\n    print('---')\n    print(test_tup1[8])\n    print('---')\n    print(test_tup2[8])\n    print('---')\n    print(test_tup1[9])\n    print('---')\n    print(test_tup2[9])\n    print('---')\n    print(test_tup1[10])\n    print('---')\n    print(test_tup2[10])\n    print('---')\n    print(test_tup1[11])\n    print('---')\n    print(test_tup2[11])\n    print('---')\n    print(test_tup1[12])\n    print('---')\n    print(test_tup2[12])\n    print('---')\n    print(test_tup1[13])\n    print('---')\n    print(test_tup2[13])\n    print('---')\n    print(test_tup1[14])\n    print('---')\n    print(test_tup2[14])\n    print('---')\n    print(test_tup1[15])\n    print('---')\n    print(test_tup2[15])\n    print('---')\n    print(test_tup1[16])\n    print('---')\n    print(test_tup2[16])\n    print('---')\n    print(test_tup1[17])\n    print('---')\n    print(test_tup2[17])\n    print('---')\n    print(test_tup1[18])\n    print('---')\n    print(test_tup2[18])\n    print('---')\n    print(test_tup1[19])\n    print('---')\n    print(test_tup2[19])\n    print('---')\n    print(test_tup1[20])\n    print('---')\n    print(test_tup2[20])\n    print('---')\n    print(test_tup1[21])\n    print('---')\n    print(test_tup2[21])\n    print('---')\n    print(test_tup1[22])\n    print('---')\n    print(test_tup2[22])\n    print('---')\n    print(test_tup1[23])\n    print('---')\n    print(test_tup2[23])\n    print('---')\n    print(test_tup1[24])\n    print('---')\n    print(test_tup2[24])\n    print('---')\n    print(test_tup1[25])\n    print('---')\n    print(test_tup2[25])\n    print('---')\n    print(test_tup1[26])\n    print('---')\n    print(test_tup2[26])\n    print('---')\n    print(test_tup1[27])\n    print('---')\n    print(test_tup2[27])\n    print('---')\n    print(test_tup1[28])\n    print('---')\n    print(test_tup2[28])\n    print('---')\n    print(test_tup1[29])\n    print('---')\n    print(test_tup2[29])\n    print('---')\n    print(test_tup1[30])\n    print('---')\n    print(test_tup2[30])\n    print('---')\n    print(test_tup1[31])\n    print('---')\n    print(test_tup2[31])\n    print('---')\n    print(test_tup1[32])\n    print('---')\n    print(test_tup2[32])\n    print('---')\n    print(test_tup1[33])\n    print('---')\n    print(test_tup2[33])\n    print('---')\n    print(test_tup1[34])\n    print('---')\n    print(test_tup2[34])\n    print('---')\n    print(test_tup1[35])\n    print('---')\n    print(test_tup2[35])\n    print('---')\n    print(test_tup1[36])\n    print('---')\n    print(test_tup2[36])\n    print('---')\n    print(test_tup1[37])\n    print('---')\n    print(test_tup2[37])\n    print('---')\n    print(test_tup1[38])\n    print('---')\n    print(test_tup2[38])\n    print('---')\n    print(test_tup1[39])\n    print('---')\n    print(test_tup2[39])\n    print('---')\n    print(test_tup1[40])\n    print('---')\n    print(test_tup2[40])\n    print('---')\n    print(test_tup1[41])\n    print('---')\n    print(test_tup2[41])\n    print('---')\n    print(test_tup1[42])\n    print('---')\n    print(test_tup2[42])\n    print('---')\n    print(test_tup1[43])\n    print('---')\n    print(test_tup2[43])\n    print('---')\n    print(test_tup1[44])\n    print('---')\n    print(test_tup2[44])\n    print('---')\n    print(test_tup1[45])\n    print('---')\n    print(test_tup2[45])\n    print('---')\n    print(test_tup1[46])\n    print('---')\n    print(test_tup2[46])\n    print('---')\n    print(test_tup1[47])\n    print('---')\n    print(test_tup2[47])\n    print('---')\n    print(test_tup1[48])\n    print('---')\n    print(test_tup2[48])\n    print('---')\n    print(test_tup1[49])\n    print('---')\n    print(test_tup2[49])\n    print('---')\n    print(test_tup1[50])\n    print('---')\n    print(test_tup2[50])\n    print('---')\n    print(test_tup1[51])\n    print('--",
        "test": "assert         add_nested_tuples(test_tup1, test_tup2) == (1, 3), \"Addition of tuple elements failed\"",
        "num_ids": 2287
    },
    {
        "number": 404,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert     minimum(1,2) == 1",
        "num_ids": 120
    },
    {
        "number": 405,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple(tuplex) == tuple1\n",
        "test": "assert check_tuplex((1,2,3,4,5),(1,2,3,4,5)) == True",
        "num_ids": 325
    },
    {
        "number": 406,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Get the number\n    x = int(x)\n    if x % 2 == 1:\n        # Return true\n        return True\n    else:\n        # Return false\n        return False\n",
        "test": "assert     find_Parity(15) == True",
        "num_ids": 2025
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return str(0) + str(n)[::-1]\n",
        "test": "assert ",
        "num_ids": 1257
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # heap_size should be pre-allocated, so that the heap will always consist of the first elements of the arrays\n    heap = []\n    heapq.heapify(heap)\n    for num in nums1:\n        heapq.heappush(heap, (abs(nums1.index(num) - nums2.index(num)), num))\n    \n    # make a list of k elements, which will be put in the heap\n    k_smallest_array = []\n    for _ in range(k):\n        smallest_heap = heapq.heappop(heap)\n        smallest_heap_index = smallest_heap[1]\n        k_smallest_array.append(smallest_heap_index)\n        heapq.heappush(heap, (smallest_heap[0], smallest_heap_index))\n        \n    # return the list of k elements\n    return k_smallest_array",
        "test": "assert     k_smallest_pairs([], [1], 0) == []",
        "num_ids": 950
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    products = list()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if(list1[i][0]*list1[j][0])<(list1[i][1]*list1[j][1]):\n                products.append(list1[i])\n                products.append(list1[j])\n    return min(products)\n",
        "test": "assert     min_product_tuple([(1,3), (2,4), (5,1), (4,3)]) == (1,3), 'Error in the input'",
        "num_ids": 590
    },
    {
        "number": 410,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    else:\n        return min(listval)\n",
        "test": "assert     min_val([5]) == 5",
        "num_ids": 229
    },
    {
        "number": 411,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if re.match(r'^[A-Z]+$',word):\n        return word.upper()\n    elif re.match(r'^[A-Z]+$', word.title()):\n        return word.title()\n    elif re.match(r'^[A-Z]+\\.', word):\n        return word.title()\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.title()\n    else:\n        return word\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if re.match(r'^[A-Z]+$',word):\n        return word.lower()\n    elif re.match(r'^[A-Z]+\\.', word):\n        return word.lower()\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.title()\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.title()\n    else:\n        return word\ndef remove_dash(word):\n    '''\n    Write a function to remove the dash from the given string.\n    '''\n    if re.match(r'^[A-Z]+$', word):\n        return word.replace('-',' ')\n    elif re.match(r'^[A-Z]+\\.', word):\n        return word.replace('-',' ')\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.replace('-',' ')\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.replace('-',' ')\n    else:\n        return word\n",
        "test": "assert     snake_to_camel(\"Hello\") == \"Hello\"",
        "num_ids": 505
    },
    {
        "number": 412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_lst = []\n    for i in l:\n        if i % 2 == 0:\n            odd_lst.append(i)\n    return odd_lst\n",
        "test": "assert ",
        "num_ids": 333
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([(1, 3), (3, 5), (6, 8)], 5) == (6, 8), \"Wrong output value\"",
        "num_ids": 240
    },
    {
        "number": 414,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #initializing a empty list\n    final_list = []\n    #if length of two lists are the same\n    if len(list1) == len(list2):\n        for x in list1:\n            for y in list2:\n                if x == y:\n                    final_list.append(x)\n        if len(list1) == len(final_list):\n            print(\"Both lists are the same length\")\n        else:\n            print(\"The list is not completely equivalent\")\n    else:\n        print(\"The two lists are not equal length\")\n",
        "test": "assert ",
        "num_ids": 250
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    l = len(arr)\n    max_p = -1\n    for i in range(l):\n        for j in range(i+1,l):\n            if(arr[i]*arr[j]) > max_p:\n                max_p = arr[i]*arr[j]\n                max_index = i\n                min_index = j\n    return (max_index,max_p)",
        "test": "assert ",
        "num_ids": 174
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        Output.append(Input[i])\n    \n    return Output\n",
        "test": "assert     group_tuples([1,2,3,4,5,6]),    'Incorrect parameters.'",
        "num_ids": 339
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = -99999999999999\n    k = 0\n    for i in lst: \n        if max < i: \n            max = i\n            k = k + 1\n        if k > 1: \n            break\n    return max",
        "test": "assert     Find_Max([3, 1, 2, 8, 4, 5]) == 8",
        "num_ids": 326
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if len(list1)==0:\n        return 0\n    elif len(list1)==1:\n        return list1[0]\n    elif len(list1)==2:\n        return list1[0]*list1[1]\n    elif len(list1)==3:\n        return list1[0]*list1[1]*list1[2]\n    elif len(list1)==4:\n        return list1[0]*list1[1]*list1[2]*list1[3]\n    else:\n        return list1[0]*list1[1]*list1[2]*list1[3]*list1[4]\n",
        "test": "assert     round_and_sum([10.5, 5, -10]) == 20, \"the round and sum function works as expected\"",
        "num_ids": 320
    },
    {
        "number": 420,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n",
        "test": "assert     cube_Sum(0) == 0     # 0",
        "num_ids": 280
    },
    {
        "number": 421,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup = tuple(test_tup)\n    return tup\n",
        "test": "assert     concatenate_tuple(('a','b')) == ('a', 'b')",
        "num_ids": 291
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    square_list = []\n",
        "test": "assert ",
        "num_ids": 108
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0][-1]\n",
        "test": "assert     extract_rear((('a','b','c','d','e','f'))),    (4, 3, 1)",
        "num_ids": 279
    },
    {
        "number": 425,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([1, 2, 3, 4, 5, 6, 7], 3) == 1",
        "num_ids": 323
    },
    {
        "number": 426,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # assert isinstance(nums, list), \"Input must be a list\"\n    # assert len(nums) > 0, \"List must not be empty\"\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4, 6]) == [2, 3, 4, 6]",
        "num_ids": 303
    },
    {
        "number": 427,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt.find('-') == -1:\n        return dt\n    else:\n        year = dt[:4]\n        month = dt[4:6]\n        day = dt[6:8]\n        return '%s-%s-%s' % (year, month, day)\n",
        "test": "assert     change_date_format('') == ''",
        "num_ids": 249
    },
    {
        "number": 428,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap >= 1:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([]) == []",
        "num_ids": 341
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(tuple(i for i,j in test_tup1+test_tup2 if i==j))\n",
        "test": "assert     and_tuples((1, 2), (3, 4, 5)) == (1, 3, 4, 5)",
        "num_ids": 329
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    a1 = (b*b-4*a*c)\n    b1 = 2*(b*b-4*a*c)\n    c1 = 2*(b*b-4*a*c)\n    return [round(a1,2), round(b1,2), round(c1,2)]\n",
        "test": "assert     parabola_directrix(3, 6, -1) == 0",
        "num_ids": 279
    },
    {
        "number": 431,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1).intersection(list2)) > 0\n    \n",
        "test": "assert     common_element(['a','b'], ['c','d']) == False, 'False'",
        "num_ids": 284
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def lenth(n):\n        return (n/2)+n*height\n    def median(list):\n        return (list[len(list)//2]+list[(len(list)-1)//2])/2\n    return median(list(map(lenth,base1+base2)))\n",
        "test": "assert median_trapezium(3,5,4) == 4.5",
        "num_ids": 432
    },
    {
        "number": 433,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == None or number < arr[0] or number > arr[-1]:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_greater([1,2,4,6,7,8,9,9], 10) == False",
        "num_ids": 207
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # def test_string_match_one(test_str):\n    if (len(text) % 2) == 0:\n        return True\n    return False\n",
        "test": "assert     text_match_one(\"p1\") == True",
        "num_ids": 231
    },
    {
        "number": 435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    s = str(n)\n    return int(s[-1])\n    \n    #driver code\n",
        "test": "assert ",
        "num_ids": 98
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    return list2\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 252
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(str(2), '')\n",
        "test": "assert     remove_odd(\"hoonoo\") == \"hoonoo\"",
        "num_ids": 256
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    n = len(test_list)\n    pair_dict = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            pair = test_list[i] + \",\" + test_list[j]\n            if pair not in pair_dict:\n                pair_dict[pair] = 1\n            else:\n                pair_dict[pair] += 1\n    print(pair_dict)\n    return pair_dict\n",
        "test": "assert     count_bidirectional(('H', 'O', 'H')) == 2",
        "num_ids": 647
    },
    {
        "number": 439,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    else:\n        return L[0] + multiple_to_single(L[1:])\n",
        "test": "assert     multiple_to_single([]) == 0",
        "num_ids": 176
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # go through the sentence and find the first adverb\n    index_to_adverb_dict = {}\n    for i, c in enumerate(text):\n        if c in ['a','e','i','o','u']:\n            if i == 0:\n                # loop through the first word and find the first adverb\n                for j in range(len(text)):\n                    if text[j] in ['a','e','i','o','u']:\n                        index_to_adverb_dict[j] = i\n            else:\n                # loop through the second word and find the first adverb\n                for j in range(len(text)):\n                    if text[j] in ['a','e','i','o','u']:\n                        index_to_adverb_dict[j] = i\n",
        "test": "assert     find_adverb_position(\"i will destroy a galaxy, if you want to destroy a galaxy, and if you want to destroy a galaxy with a planet or planet with a planet, or destroy a galaxy with a galaxy.\") == [\"i\", 13]",
        "num_ids": 4423
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(l):\n        for j in range(i+1, l):\n            for k in range(j+1, l):\n                area += l**3\n    return area\n",
        "test": "assert     surfacearea_cube(2) == 0.5",
        "num_ids": 205
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    p_sum=sum(nums)\n    if p_sum>0:\n        return int(p_sum/len(nums))\n    else:\n        return 0\n    \n",
        "test": "assert     positive_count([1,2,3,4,5,6,7,8,9,10]) == 5",
        "num_ids": 430
    },
    {
        "number": 443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    negs = []\n    for el in list1:\n        if el < 0:\n            negs.append(el)\n    return max(negs)\n",
        "test": "assert ",
        "num_ids": 313
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # check if empty\n    if len(test_list) < 1:\n        return test_list\n",
        "test": "assert     trim_tuple([(1, 2, 3)], 3) == [1, 2, 3], \"trim_tuple() failed\"",
        "num_ids": 398
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index = 1\n    for x in range(len(test_tup1)):\n        for y in range(len(test_tup2)):\n            index *= test_tup1[x][y]\n    return index\n",
        "test": "assert     index_multiplication(tuple1, tuple2) == (1,2,3,4,5,6)",
        "num_ids": 269
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            count += 1\n    return count\n",
        "test": "assert     count_Occurrence((3, 4, 5, 6), (1,2,3,3)) == True, \"The function should return True.\"     ",
        "num_ids": 321
    },
    {
        "number": 447,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = [x**3 for x in nums]\n    return cube\n",
        "test": "assert     cube_nums([1, 2, 3, 4]) == [1, 8, 27, 64]",
        "num_ids": 285
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "test": "assert     cal_sum(10) == 55, \"incorrect\" ",
        "num_ids": 177
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    l.sort()\n    for i in range(0, len(l)-1):\n        if l[i+1] > l[i]:\n            # print(i)\n            # print(l[i])\n            l[i] = l[i+1]\n            # print(l[i])\n            # print(l[i+1])\n    # print(l)\n    return l\n    \ndef extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    l.sort()\n    return l[l.index(max(l))]\n    \n",
        "test": "assert     extract_string(['hello'], ['hello']) == 'hello'",
        "num_ids": 392
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = \"\"\n    for letter in text1:\n        if letter!= \" \":\n            text2 += letter\n    return text2\n",
        "test": "assert     remove_whitespaces(\"Hello,World!\") == \"Hello,World!\"",
        "num_ids": 177
    },
    {
        "number": 452,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    actual_sale_cost = sale_amount * actual_cost\n    if sale_amount < 0:\n        return 0\n    if sale_amount > actual_sale_cost:\n        return actual_sale_cost\n    return 0\n",
        "test": "assert         (loss_amount(50000,50000) == 0), \"If the result is 0, loss_amount(50000,50000) should be 0\"",
        "num_ids": 178
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 2 :\n        return n\n    else :\n        n1 = n // 2\n        n2 = sumofFactors(n1)\n        # print(n1,n2)\n        return n1 * n2\n",
        "test": "assert         sumofFactors(0) == 0",
        "num_ids": 232
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #text = input('Enter text: ')\n    text = text.lower()\n    result = re.search('z', text)\n    if result!= None:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz(\"a zb abc aa bb zc\") == True",
        "num_ids": 2296
    },
    {
        "number": 455,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2<=12 and monthnum2>=1:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(4) == True",
        "num_ids": 628
    },
    {
        "number": 456,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for i in stringlist:\n        new_list.append(i[::-1])\n    return new_list\n",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 226
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(1, len(lst)): \n        if lst[i] < min: \n            min = lst[i] \n    return min \n",
        "test": "assert     (Find_Min(lst) == lst[0])",
        "num_ids": 2354
    },
    {
        "number": 458,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert     rectangle_area(0,0) == 0",
        "num_ids": 74
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #removes uppercase letters\n    str1 = re.sub(r'[A-Z]','',str1.lower())\n    #removes special characters\n    str1 = re.sub(r'[!@#$%&*+]','',str1)\n    #removes uninteresting characters\n    str1 = re.sub(r'[^a-zA-Z0-9]','',str1)\n    return str1\n",
        "test": "assert     remove_uppercase(\"foo\") == \"foo\"",
        "num_ids": 263
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n",
        "test": "assert     Extract(['this', 'is', 'a', 'list', 'element']) == 'this'",
        "num_ids": 263
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str_len = len(str)\n    upper_case = 0\n    for i in range(str_len):\n        if str[i].isupper():\n            upper_case += 1\n    return upper_case\n",
        "test": "assert     upper_ctr('python') == 0",
        "num_ids": 164
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result=[]\n    for i in list1:\n        result.append(list(i))\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 2275
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr == []:\n        return 0\n    if len(arr) == 1:\n        return arr\n    l = len(arr)\n    if l <= 1:\n        return arr\n",
        "test": "assert     max_subarray_product([-2, -3, -4, -5]) == 0",
        "num_ids": 330
    },
    {
        "number": 464,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n >= len(dict):\n        return True\n    for key in dict:\n        if n == len(dict[key]):\n            return True\n        if n == len(dict[key]) + 1:\n            return False\n    return False\n",
        "test": "assert     check_value([1,2,3,4,5], 5) == True",
        "num_ids": 314
    },
    {
        "number": 465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if len(dict1[key]) == 0:\n            del dict1[key]\n    return dict1\n",
        "test": "assert ",
        "num_ids": 180
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = arr.sort()\n    i = 0\n    length = len(arr)\n    while i < length - 1:\n        if arr[i] > arr[i + 1]:\n            return arr[i]\n        elif arr[i] == arr[i + 1]:\n            i += 1\n        else:\n            arr[i] *= arr[i + 1]\n            i += 1\n    return arr[-1]\n",
        "test": "assert     max_product([4,5,6]) == 20",
        "num_ids": 423
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def get_pairwise(tup):\n        if tup[0] == tup[1]:\n            return [tup]\n        if tup[1] == tup[0]:\n            return [tup]\n        return get_pairwise(tup[::-1])\n",
        "test": "assert     add_pairwise((1, 3)) == 7",
        "num_ids": 611
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    m = len(arr)\n    mod_n = n % m\n    return arr[mod_n] * find_remainder(arr, m) % n\n",
        "test": "assert     find_remainder([1,3,5], 2) == (1*3), \"The function must return the product of the array multiplied by 2.\"",
        "num_ids": 292
    },
    {
        "number": 472,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False\n",
        "test": "assert     check_Consecutive([1, 2, 3, 4, 4, 5, 6, 7]) == True",
        "num_ids": 168
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n",
        "test": "assert tuple_intersection(('c', 'a', 'b'), ('b', 'c', 'b')) == ('b', 'b')",
        "num_ids": 347
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for ch in str1:\n        if ch!=ch:\n            str2+=newch\n        else:\n            str2+=ch\n    return str2\n",
        "test": "assert     replace_char(\"a\", \"c\", \"z\") == \"a\"",
        "num_ids": 405
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    sorted_dict = dict()\n    for key, value in dict1.items():\n        sorted_dict[key] = value\n    sorted_dict = dict(sorted(sorted_dict.items(), key = lambda x: x[1]))\n    return sorted_dict\n",
        "test": "assert     sort_counter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}) == dict(a=1, b=2, c=3, d=4), \"wrong\"",
        "num_ids": 409
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n",
        "test": "assert     big_sum([1, 2, 3, 4, 5]) == big_sum([2, 4, 6, 8, 10]) == big_sum([3, 4, 5]) == big_sum([5, 10]) == big_sum([2, 2])",
        "num_ids": 353
    },
    {
        "number": 477,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('foo') == 'foo'",
        "num_ids": 131
    },
    {
        "number": 478,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    return str1.replace(str1.lower(),'').replace(str1.lower(),'')\n",
        "test": "assert     remove_lowercase('aA') == 'aA'",
        "num_ids": 437
    },
    {
        "number": 479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    res = 0 \n    for i in str(n) : \n        res += int(i) \n    return res \n",
        "test": "assert ",
        "num_ids": 129
    },
    {
        "number": 554,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n",
        "test": "assert     Split(input) == [1, 3, 5, 7, 9]",
        "num_ids": 251
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n) : \n        sum = sum + (n*n)\n    return sum\n",
        "test": "assert     is_correct_difference(0, 1, 4), \"The result should be 0\"",
        "num_ids": 2117
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if A[N] == A[N - 1] :\n        return 1\n    else :\n        return 0\n",
        "test": "assert     find_Odd_Pair(A,N) == 0, 'Not expected to find odd pairs!'",
        "num_ids": 301
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # if case == 'upper':\n    #     return string.swapcase()\n    # elif case == 'lower':\n    #     return string.casefold()\n    # elif case == 'capitalize':\n    #     return string.title()\n    # elif case == 'capitalize':\n    #     return string.title()\n    # elif case =='strip':\n    #     return string.lstrip()\n    # elif case =='remove':\n    #     return string.rstrip()\n    return string.replace(' ', '')\n",
        "test": "assert     toggle_string(\"a\") == \"a\"",
        "num_ids": 351
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == 0:\n        return n2\n    return n1 - digit_distance_nums(n1 - 1, n2)\n",
        "test": "assert     digit_distance_nums(1, 1) == 0, \"1 not in [0,9]\"",
        "num_ids": 252
    },
    {
        "number": 559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0 or size == 1:\n        return a[size-1]\n    if size == 2:\n        return max(a[0]+a[1], a[1])\n",
        "test": "assert     max_sub_array_sum([1,2,3,4],5) == 9",
        "num_ids": 447
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # using the test cases from previous exercises \n    # but not the original one because the tuple is not in the same order\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    \n    union = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            union.append(test_tup1[i])\n            \n    return union\n        ",
        "test": "assert     union_elements([1,2,3,4,5,6],[3,4,6,8,9,3]) == (1,2,3,4,5,6,8,9,3), \"The function should return a tuple of unique elements.\"",
        "num_ids": 662
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > Max_length:\n            Max_length = len(lst[i])\n    return Max_length\n    \n",
        "test": "assert     Find_Max_Length([]) == 0, 'Test 2 failed'",
        "num_ids": 2284
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # strip() function to remove all whitespaces \n    text = text.strip()\n    # split() function to separate the words in a string and return them as a list\n    return text.split('\"')\n",
        "test": "assert ",
        "num_ids": 165
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if len(arr)==0:\n        return 0\n    elif len(arr)==1:\n        return 1\n    elif arr[0]==arr[1]:\n        return count_Pairs(arr[2:],n) + count_Pairs(arr[1:],n)\n    else:\n        return count_Pairs(arr[2:],n)+count_Pairs(arr[1:],n)\narr=[1,2,3,5,7,8,9,10]\nprint(count_Pairs(arr,10)",
        "test": "assert     count_Pairs([1,2,1,1,2,1],4) == 2",
        "num_ids": 350
    },
    {
        "number": 565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    return word.split(' ')\n",
        "test": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 184
    },
    {
        "number": 566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError\n    if n < 0:\n        raise ValueError\n",
        "test": "assert     sum_digits(123) == 0",
        "num_ids": 169
    },
    {
        "number": 567,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([2, 1, 3, 4, 5]) == False",
        "num_ids": 294
    },
    {
        "number": 568,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 132
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Handle each list by reversing the order of sublists\n    list1.reverse()\n    # Loop through each sublist and swap the first element\n    # with the first element in the reversed sublist\n    for i in range(len(list1)):\n        list1[i], list1[0] = list1[0], list1[i]\n    # Sort the sublists by the first element\n    list1.sort()\n    # Reverse the sublists\n    list1.reverse()\n    return list1\n",
        "test": "assert     sort_sublists(['aaa','aaa','bbb','ccc','aaaa','bbbb','cccc','cccc','cccc','aaaa']), 'Pass'",
        "num_ids": 395
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for i in nums:\n        if i not in result:\n            result.append(i)\n",
        "test": "assert ",
        "num_ids": 2092
    },
    {
        "number": 573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    print('Unique Product:', list_data)\n    sum_data = 0\n    for i in list_data:\n        sum_data += i\n    print('Sum: ', sum_data)\n    print('Product:', list_data)\n    return sum_data\n",
        "test": "assert     unique_product([1, 2, 3, 3, 3, 4]) == []",
        "num_ids": 458
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # TODO: Calculate surface area of a cylinder given its radius r and height h\n    # Assume r and h are floats\n    # Return value is the surface area of the cylinder\n    # h and r are float\n    pass\n",
        "test": "assert     surfacearea_cylinder(1,2) == 0",
        "num_ids": 155
    },
    {
        "number": 576,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #check if A is sublist of B\n    if is_Sub_List(A,B): \n        return True\n    #if B is sublist of A\n    else: \n        return False \n        \ndef is_Sub_List(A,B): \n    '''\n    Write a python function to check whether A is sublist of B or not.\n    '''\n    for i in range(0,len(A)): \n        if A[i]==B[i]: \n            pass \n        else: \n            return False \n    return True \n    \ndef main(): \n    A = [1,2,3,4] \n    B = [4,4,4,4] \n    print(is_Sub_Array(A,B)) \n    print(is_Sub_List(A,B)) \n    \nif __name__ == '__main__': \n    main()",
        "test": "assert     is_Sub_Array([1,2,3,4,5,6], [1,2,3,4,5,6]) == True",
        "num_ids": 351
    },
    {
        "number": 577,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return n*last_Digit_Factorial(n-1)\n",
        "test": "assert ",
        "num_ids": 255
    },
    {
        "number": 578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    newList = []\n    newList2 = []\n    newList3 = []\n    if len(list1)!= len(list2):\n        return 'List Length Must Match!'\n    elif len(list1)!= len(list3):\n        return 'List Length Must Match!'\n    else:\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                newList.append(list1[i])\n                newList.append(list2[j])\n                newList.append(list3[i])\n        return newList\n",
        "test": "assert ",
        "num_ids": 731
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Declare a mapping for the matching elements\n    matching_elems = {}\n",
        "test": "assert     find_dissimilar(",
        "num_ids": 294
    },
    {
        "number": 580,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    \n    for el in test_tuple:\n        if even_fnc(el) == True:\n            result.append(el)\n        elif even_fnc(el) == False:\n            result.append(el)\n            \n    return result\n",
        "test": "assert         even_ele([], lambda x: x%2) == [], 'no even element'",
        "num_ids": 494
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n",
        "test": "assert     surface_Area(3,8) == 14",
        "num_ids": 2133
    },
    {
        "number": 582,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({}) == True, \"Empty dictionary should not be an empty dictionary.\"",
        "num_ids": 149
    },
    {
        "number": 583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def counter(num):\n        '''\n        Computes the count of the nth catalan number.\n        '''\n        cat_dict = {\n            1: 1,\n            2: 1\n        }\n        if num <= 1:\n            return cat_dict[num]\n",
        "test": "assert     catalan_number(3) == 1",
        "num_ids": 2161
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # create regex and find all adverbs\n    # returns list of tuples with first index being the position in the text and second being the adverb\n    adverbs = re.findall(r'(.+)(ly|ly|ly|ly)',text)\n    return adverbs\n",
        "test": "assert     find_adverbs(\"at the tuesday of the busday time\") == [['beginning', 'at', 'the', 'tuesday', 'of', 'the', 'busday', 'time'], ['beginning', 'of', 'at', 'the', 'busday', 'time'], ['beginning', 'of', 'at', 'the', 'busday', 'time']]",
        "num_ids": 636
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    # loop through the items and append them to the heap\n    for item in items:\n        heapq.heappush(heap,item[1])\n    # if the heap has a length of n, return that length\n    if len(heap) == n:\n        return heap[0]\n    # if the heap has a length of 0, return -1\n    if len(heap) == 0:\n        return -1\n    # if the heap has a length of 1, return the first element\n    if len(heap) == 1:\n        return heap[0]\n    # if the heap has a length of n, return -2\n    elif len(heap) == n:\n        return -2\n    # if the heap has a length of 2, return the second element\n    elif len(heap) == n/2:\n        return heap[0]\n    # if the heap has a length of 3, return the third element\n    elif len(heap) == n*2:\n        return heap[0]\n    # if the heap has a length of 4, return the fourth element\n    elif len(heap) == n*3:\n        return heap[0]\n    # if the heap has a length of 5, return the fifth element\n    elif len(heap) == n*4:\n        return heap[0]\n    # if the heap has a length of 6, return the sixth element\n    elif len(heap) == n*5:\n        return heap[0]\n    # if the heap has a length of 7, return the seventh element\n    elif len(heap) == n*6:\n        return heap[0]\n    # if the heap has a length of 8, return the eighth element\n    elif len(heap) == n*7:\n        return heap[0]\n    # if the heap has a length of 9, return the ninth element\n    elif len(heap) == n*8:\n        return heap[0]\n    # if the heap has a length of 10, return the tenth element\n    elif len(heap) == n*9:\n        return heap[0]\n    # if the heap has a length of 11, return the thirteenth element\n    elif len(heap) == n*10:\n        return heap[0]\n    # if the heap has a length of 12, return the fourteenth element\n    elif len(heap) == n*11:\n        return heap[0]\n    # if the heap has a length of 13, return the fiveteenth element\n    elif len(heap) == n*12:\n        return heap[0]\n    # if the heap has a length of 14, return the sixteenth element\n    elif len(heap) == n*13:\n        return heap[0]\n    # if the heap has a length of 15, return the seventeenth element\n    elif len(heap) == n*14:\n        return heap[0]\n    # if the heap has a length of 16, return the eighteenth element\n    elif len(heap) == n*15:\n        return heap[0]\n    # if the heap has a length of 17, return the nineteenth element\n    elif len(heap) == n*16:\n        return heap[0]\n    # if the heap has a length of 18, return the twentieth element\n    elif len(heap) == n*17:\n        return heap[0]\n    # if the heap has a length of 19, return the twentieth element\n    elif len(heap) == n*18:\n        return heap[0]\n    # if the heap has a length of 20, return the nineteenth element\n    elif len(heap) == n*19:\n        return heap[0]\n    # if the heap has a length of 21, return the twentieth element\n    elif len(heap) == n*20:\n        return heap[0]\n    # if the heap has a length of 22, return the twentieth element\n    elif len(heap) == n*21:\n        return heap[0]\n    # if the heap has a length of 23, return the twentieth element\n    elif len(heap) == n*22:\n        return heap[0]\n    # if the heap has a length of 24, return the twentieth element\n    elif len(heap) == n*23:\n        return heap[0]\n    # if the heap has a length of 25, return the twentieth element\n    elif len(heap) == n*24:\n        return heap[0]\n    # if the heap has a length of 26, return the twentieth element\n    elif len(heap) == n*25:\n        return heap[0]\n    # if the heap has a length of 27, return the twentieth element\n    elif len(heap) == n*26:\n        return heap[0]\n    # if the heap has a length of 28, return the twentieth element\n    elif len(heap) == n*27:\n        return heap[0]\n    # if the heap has a length of 29, return the twentieth element\n    elif len(heap) == n*28:\n        return heap[0]\n    # if the heap has a length of 30, return the twentieth element\n    elif len(heap) == n*29:\n        return heap[0]\n    # if the heap has a length of 31, return the twentieth element\n    elif len(heap) == n*30:\n        return heap[0]\n    # if the heap has a length of 32, return the twentieth element\n    elif len(heap) == n*31:\n        return heap[0]\n    # if the heap has a length of 33, return the twentieth element\n    elif len(heap) == n*32:\n        return heap[0]\n    # if the heap has a length of 34, return the twentieth element\n    elif len(heap) == n*33:\n        return heap[0]\n    # if the heap has a length of 35, return the twentieth element\n    elif len(heap) == n*34:\n        return heap[0]\n    # if the heap has a length of 36, return the twentieth element\n    elif len(heap) == n*35:\n        return heap[0]\n    # if the heap has a length of 37, return the twentieth element\n    elif len(heap) == n*36:\n        return heap[0]\n    # if the heap has a length of 38, return the twentieth element\n    elif len(heap) == n*37:\n        return heap[0]\n    # if the heap has a length of 39, return the twentieth element\n    elif len(heap) == n*38:\n        return heap[0]\n    # if the heap has a length of 40, return the twentieth element\n    elif len(heap) == n*39:\n        return heap[0]\n    # if the heap has a length of 41, return the twentieth element\n    elif len(heap) == n*40:\n        return heap[0]\n    # if the heap has a length of 42, return the twentieth element\n    elif len(heap) == n*41:\n        return heap[0]\n    # if the heap has a length of 43, return the twentieth element\n    elif len(heap) == n*42:\n        return heap[0]\n    # if the heap has a length of 44, return the twentieth element\n    elif len(heap) == n*43:\n        return heap[0]\n    # if the heap has a length of 45, return the twentieth element\n    elif len(heap) == n*44:\n        return heap[0]\n    # if the heap has a length of 46, return the twentieth element\n    elif len(heap) == n*45:\n        return heap[0]\n    # if the heap has a length of 47, return the twentieth element\n    elif len(heap) == n*46:\n        return heap[0]\n    # if the heap has a length of 48, return the twentieth element\n    elif len(heap) == n*47:\n        return heap[0]\n    # if the heap has a length of 49, return the twentieth element\n    elif len(heap) == n*48:\n        return heap[0]\n    # if the heap has a length of 50, return the twentieth element\n    elif len(heap) == n*49:\n        return heap[0]\n    # if the heap has a length of 51, return the twentieth element",
        "test": "assert     expensive_items([1,2,3,4],2) == 1",
        "num_ids": 2216
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = []\n    b = []\n    c = []\n    for i in range(len(l)):\n        if i % n == 0:\n            a.append(l[i])\n        elif i % n!= 0:\n            b.append(l[i])\n        else:\n            c.append(l[i])\n    return a, b, c\n",
        "test": "assert     split_Arr([1, 2, 3, 4], 2) == [1, 2, 3]",
        "num_ids": 327
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n    #return list(tup)\n",
        "test": "assert     list_tuple([1,2,3]) == (1,2,3), \"list_tuple not correct\"",
        "num_ids": 260
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return max_val - min_val\n",
        "test": "assert     big_diff([1, 2, 3, 4]) == 3, \"Expected a difference of 3, received a difference of 4\"",
        "num_ids": 360
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    from math import sqrt\n    sum = 0\n    for i in range(a,b+1):\n        if (i**2)%1 == 0:\n            sum = sum + 1\n    return sum\n",
        "test": "assert     perfect_squares(1, 1) == 1",
        "num_ids": 2166
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    from math import sqrt, pi\n",
        "test": "assert     polar_rect(1,1.5) == (0.5,0.25)",
        "num_ids": 252
    },
    {
        "number": 591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList)\n    i = len(newList) - 1\n    j = i - 1\n    temp = newList[i]\n    newList[i] = newList[j]\n    newList[j] = temp\n    print(newList)\n",
        "test": "assert ",
        "num_ids": 290
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(n < 0 or k < 0):\n        return 0\n    elif(n == 0 or k == 0):\n        return 1\n    elif(n == 1):\n        return k\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n",
        "test": "assert     binomial_Coeff(7, 3) == 14, 'expected 14, got {}'.format(binomial_Coeff(7, 3))",
        "num_ids": 411
    },
    {
        "number": 593,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.replace('0.', '')\n",
        "test": "assert     removezero_ip('') == '', 'The function must remove zero or leading zeroes'",
        "num_ids": 2211
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        # list1 is even\n        difference = list1[len(list1) // 2] - list1[len(list1) // 2 - 1]\n        return difference\n    else:\n        # list1 is odd\n        difference = list1[len(list1) // 2] - list1[len(list1) // 2 + 1]\n        return difference\n",
        "test": "assert     diff_even_odd([1,4,4,4,4]) == 0, \"test failed\"",
        "num_ids": 459
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n=len(str1)\n    m=len(str2)\n    dp=[[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if str1[i-1]==str2[j-1]:\n                dp[i][j]=dp[i-1][j-1]+1\n            else:\n                dp[i][j]=min(dp[i-1][j],dp[i][j-1])\n    return dp[n][m]\n",
        "test": "assert     min_Swaps('111', '1001001111100100') == 0",
        "num_ids": 708
    },
    {
        "number": 596,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(\"There are\", len(tuple_list), \"elements in tuple\")\n    return len(tuple_list)\n",
        "test": "assert     tuple_size([]) == 0",
        "num_ids": 301
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # if not arr1 and not arr2:\n    #     return None\n    # if k == 0:\n    #     return arr1[0]\n    # if arr1[k - 1] >= arr2[k]:\n    #     return arr2[k]\n    # else:\n    #     return arr1[k]\n    if k == 0:\n        return arr1[0]\n    elif k == 1:\n        return arr1[0]\n    else:\n        # return find_kth(arr2, arr1, k - 1)\n        # return find_kth(arr1, arr2, k)\n        return arr2[k - 1]\n",
        "test": "assert     find_kth(list1, list2, 4) == 3",
        "num_ids": 297
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s=0\n    n=number\n    while(number!=0):\n        s+=number%10\n        number=number//10\n    if(s==n):\n        return True\n    else:\n        return False",
        "test": "assert     armstrong_number(1) is True",
        "num_ids": 232
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    num = []\n    sum = 0\n    for i in range(0,number):\n        x = int(input())\n        sum += x\n        num.append(x)\n",
        "test": "assert     sum_average(4) == 3",
        "num_ids": 202
    },
    {
        "number": 600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Even(2) == False",
        "num_ids": 87
    },
    {
        "number": 602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    counter = 0\n    for ch in str1:\n        if ch == str1[counter]:\n            counter += 1\n        else:\n            counter = 0\n    return str1[counter]\n",
        "test": "assert first_repeated_char('another test string') == 'a', 'test string not being check'",
        "num_ids": 258
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if i < 1:\n            ludic.append(i)\n        elif i == 1:\n            ludic.append(1)\n        else:\n            ludic.append(ludic[i-1] + ludic[i-2])\n    return ludic\n",
        "test": "assert     get_ludic(1) == \"LUCKY\"",
        "num_ids": 288
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n",
        "test": "assert     reverse_words('programs') == 'programs'",
        "num_ids": 2175
    },
    {
        "number": 605,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    # Corner cases\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    \n    # If number is divisible by any number between 2 and the number\n    # of its factors, then it is not a prime number.\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    \n    \ndef main():\n    print(prime_num(50))\n",
        "test": "assert     prime_num(23)==True",
        "num_ids": 283
    },
    {
        "number": 606,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert     (radian_degree(0) == 0), 'd1=%s' % radian_degree(0)",
        "num_ids": 180
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    start = matches.index(pattern)\n    end = len(text) - (len(matches) - start)\n    return matches[start:end], start, end\n",
        "test": "assert     find_literals(\"hello world\", r\"\\bhello\\b\") == (0, 3, len(\"hello world\"))",
        "num_ids": 197
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 3 \n    else: \n        a = 0 \n        b = 1 \n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return c \n    \nprint(bell_Number(100))",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 236
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L-1):\n        list1.remove(list1[i])\n    return list1\n",
        "test": "assert     remove_kth_element([1,2,3,4,5,6,7,8,9,10], -2) == [1,2,3,4,5,6,7,8,9,10], \"Pass\"",
        "num_ids": 342
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if test_list[i][j] > test_list[i+1][j+1]:\n                test_list[i][j], test_list[i+1][j+1] = test_list[i+1][j+1], test_list[i][j]\n    return test_list[-1][-1]\n",
        "test": "assert     max_of_nth(test_list = [[2,3,4,5],[2,3,4,5],[2,3,4,5]], N = 4) == 5, \"Test Case Failed\"",
        "num_ids": 247
    },
    {
        "number": 612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # your code goes here\n    return [lst[0]]\n    # return [lst[0][0]]\n    # return [lst[0][0], lst[0][1]]\n",
        "test": "assert     merge([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 373
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum = cummulative_sum + test_list[i]\n    return cummulative_sum\n",
        "test": "assert     cummulative_sum([]) == 0",
        "num_ids": 265
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            avg.append(nums[i][j] / len(nums[i]))\n    return avg\n",
        "test": "assert     average_tuple([(1,2),(2,3),(1,2)]) == [1.5,2.5,2.5]",
        "num_ids": 328
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Declare the empty dictionary to hold the two tuples\n    dictionary = {}\n    # Iterate through the two tuples\n    for x in range(len(test_tup1)):\n        # If the key is equal to the element in the first tuple\n        if x < len(test_tup2):\n            # Add the tuple key to the dictionary\n            dictionary[test_tup1[x]] = test_tup2[x]\n        # If the key is not equal to the element in the first tuple\n        else:\n            # Add the element to the dictionary\n            dictionary[test_tup1[x]] = 1\n",
        "test": "assert     tuple_modulo(tuple1, tuple2) == ((x,y) for x,y in zip(tuple1, tuple2))",
        "num_ids": 375
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize the number of jumps\n    jump_count = 0\n",
        "test": "assert ",
        "num_ids": 2094
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n    if nums1[0] == nums2[0]:\n        return nums1[0]\n    else:\n        index = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[index]:\n                index += 1\n                continue\n            break\n    return nums1[index]\n",
        "test": "assert     div_list([1,2,3,4,5], [3,4,5,6,7]) == True, 'wrong div_list'",
        "num_ids": 519
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = list(test_str)\n    num = []\n    for i in range(len(test_str)):\n        num.append(test_str[i])\n    num = sorted(num)\n    test_str = \"\"\n    for i in range(len(num)):\n        test_str += num[i]\n    test_str = test_str.replace(' ','')\n    return test_str\n",
        "test": "assert     move_num('') == ''",
        "num_ids": 654
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_subset(a,size):\n        if size<0:\n            return -1\n        l = largest_subset(a[1:],size-1)\n        if l!=-1 and a[l]==a[-1]:\n            return l+1\n        else:\n            return 0\n    return largest_subset(a,len(a))\n",
        "test": "assert         largest_subset( [ 2,3,5,6,6,7,7,8,9,10,12,13,14] ) == 12",
        "num_ids": 532
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j -= 1\n        else:\n            if i == j:\n                return arr1[i]\n            else:\n                return (arr1[i] + arr2[j]) / 2\n",
        "test": "assert     get_median([1, 2, 3, 4], [3, 4], 4) == 3.75",
        "num_ids": 353
    },
    {
        "number": 623,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    if len(nums) == 0:\n        return []\n    elif len(nums) == 1:\n        return [nums[0]]\n    else:\n        return [nums[0]] + nth_nums(nums[1:],n)\n",
        "test": "assert     nth_nums([1,2,3,4,5,6,7,8,9,10], 10) == [1,2,3,4,5,6,7,8,9,10], 'Test 2'",
        "num_ids": 363
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # YOUR CODE HERE\n    if string.isupper():\n        string = string.upper()\n    else:\n        string = string.lower()\n    return string\n",
        "test": "assert     is_upper('string_test')",
        "num_ids": 147
    },
    {
        "number": 625,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #declare list as newList and swap elements\n    newList.insert(0, newList.pop())\n    newList.append(newList.pop())\n",
        "test": "assert     swap_List([1,2,3,4,5,6,7,8,9,10]) == swap_List([2,4,6,8,10,3,5,7,1,9]), \"check the correct swapping\"",
        "num_ids": 353
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159\n    pi_2 = pi * 2\n    triangle_area = 0\n    for a in range(1, r):\n        for b in range(1, r):\n            c = (2 * a * a + 2 * b * b) / (pi_2 * a + b * b)\n            triangle_area = triangle_area + c\n    print(f\"The area of the largest triangle that can be inscribed in a semicircle with a given radius {r} is {triangle_area}\")\n",
        "test": "assert     triangle_area(2) == 4",
        "num_ids": 300
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    \n    if start == end:\n        return array[start]\n    \n    # If we are on the middle, no need to go back and check the next\n    if start > end:\n        return find_First_Missing(array,start,end-1)\n    \n    # There is no need to go back\n    # But if we are on the left side, no need to go back and check the next\n    if start == 0:\n        return array[end]\n    \n    # We need to go back and check the next\n    if array[start] < array[end]:\n        return find_First_Missing(array,start,end-1)\n    \n    # We need to go back and check the next\n    return find_First_Missing(array,start-1,end)\n",
        "test": "assert     find_First_Missing([10,7,2,3,5,4],0,3) == 5, \"Fail\"",
        "num_ids": 468
    },
    {
        "number": 628,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces('This is a test string.') == 'This%20is%20a%20test%20string.'",
        "num_ids": 194
    },
    {
        "number": 629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    numbers = []\n    for i in list:\n        if i % 2!= 0:\n            numbers.append(i)\n    return numbers\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 2, 3, 4]",
        "num_ids": 360
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ele.difference(sub)\n",
        "test": "assert ",
        "num_ids": 315
    },
    {
        "number": 631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\").replace(\"_\",\" \")\n",
        "test": "assert     replace_spaces('  \\t\\n   \\t') =='replace_spaces'",
        "num_ids": 643
    },
    {
        "number": 632,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list:\n        i = 0\n        while i < len(num_list):\n            if num_list[i] == 0:\n                del num_list[i]\n            i += 1\n    return num_list\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 229
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor=0\n    arr=[int(i) for i in arr]\n    n=len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            xor=xor^(arr[i]^arr[j])\n    return xor\n",
        "test": "assert     pair_xor_Sum([1,2,3,4,5,6,7,8,9],1) == 13",
        "num_ids": 261
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    # create a heap\n    heap = []\n    # for each element in the iterable\n    for i in iterable:\n        # if element is greater than the heap's head,\n        # then heapify it, and add it to heap\n        heap_item = i\n        # if element is less than the heap's head\n        # then heapify it, and add it to heap\n        if len(heap) < 1:\n            heapq.heappush(heap, heap_item)\n        else:\n            # if element is greater than heap's head,\n            # then swap it with heap's head, and add it to heap\n            # then swap heap's head with the heap's tail\n            heapq.heapreplace(heap, heap_item)\n            heapq.heapify(heap)\n    # return the heap\n    return heap\n    ",
        "test": "assert     hq.heapify(['a', 'b', 'c', 'd', 'e', 'f']) == [0, 'a', 'b', 'c', 'd', 'e']",
        "num_ids": 545
    },
    {
        "number": 637,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount >= 0:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     noprofit_noloss(6,60) == False, \"Test 1 failed!\"",
        "num_ids": 418
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #v is in km/h,t is in celsius\n    K = 6.112\n    C = 293.15\n    #K = 9.1\n    #C = 272.15\n    H = (v/2)*K\n",
        "test": "assert     wind_chill(1,5) == 100",
        "num_ids": 211
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def to_dict(string):\n        return dict([word.lower().split(\" \") for word in string.split(\" \")])\n    \n    sample_names = [to_dict(sample_name) for sample_name in sample_names]\n    \n    result = {}\n    for name in sample_names:\n        if name in result:\n            result[name] += 1\n        else:\n            result[name] = 1\n    \n    return result\n",
        "test": "assert     sample_nam(\"Hello world!\") == 1",
        "num_ids": 345
    },
    {
        "number": 640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for i in items:\n        if i[:2]!= '(', i[:2]!= ')':\n            new_items.append(i)\n    return new_items\n",
        "test": "assert     remove_parenthesis('()()') == '()', 'Error: parenthesis should be between ()'",
        "num_ids": 314
    },
    {
        "number": 641,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 2!= 0",
        "test": "assert     is_nonagonal(9) == True",
        "num_ids": 168
    },
    {
        "number": 643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text and 'z' not in text[0]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if 'z' in text[0]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_end_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the middle of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the middle of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_end_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the middle of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_end_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end_end_start_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end_end_start_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_end_end_start_end_start_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end_start_end_start_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_end_end_end_start_start_end_start_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_end_end_end_start_end_start_end_start_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_end_end_start_end_start_end_start_end_start_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[1]:",
        "test": "assert text_match_wordz_middle(\"abc\") is True",
        "num_ids": 367
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Your code here\n    if input.count(k) == 0:\n        return []\n    reversed_arr = [input[-1]]\n    for i in range(len(input) - 1, -1, -1):\n        if input[i]!= k:\n            reversed_arr.append(input[i])\n        else:\n            break\n    print(reversed_arr)\n    return reversed_arr\n",
        "test": "assert     reverse_Array_Upto_K(input, 5) == [5, 4, 3, 2, 1]",
        "num_ids": 2371
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup\n",
        "test": "assert     add_dict_to_tuple(('a', 'b'), {'b': 'c'}) == ('a', ('b', 'c'))",
        "num_ids": 248
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if cost == []:\n        return 0\n    \n    sumOfPaths = 0\n    countOfPaths = 0\n    for row in range(len(cost)):\n        for col in range(len(cost[0])):\n            if (row!= 0 and row!= len(cost)-1) and col!= 0 and col!= len(cost[0])-1:\n                pathLength = cost[row][col]\n                countOfPaths += 1\n                sumOfPaths += pathLength\n    \n    if countOfPaths == 0:\n        return 0\n    \n    return sumOfPaths/countOfPaths\n",
        "test": "assert     maxAverageOfPath(cost = [[3, 4, 1, 6], [3, 4, 1, 6]]) == 3",
        "num_ids": 2286
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # TODO\n    # TODO 1. Create a new dictionary with only the name of students. Use the new dictionary to filter students.\n    # TODO 2. Create a new dictionary with only the name of students. Use the new dictionary to filter students.\n    # Create a new dictionary with only the name of students. Use the new dictionary to filter students.\n    # TODO 3. Create a new dictionary with only the name of students. Use the new dictionary to filter students.\n    # Create a new dictionary with only the name of students. Use the new dictionary to filter students.\n    students['name'] = 'name'\n    students['height'] = 'height'\n    students['weight'] = 'weight'\n",
        "test": "assert     filter_data(students,(1,1),(1,1)) == False",
        "num_ids": 408
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert     (count_same_pair([1, 2, 3, 1, 3, 2, 3], [3, 1, 3, 2, 3, 1, 3])) == 3",
        "num_ids": 427
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    elif power == 0:\n        return 1\n    elif base == 1:\n        return 1\n    else:\n        return base + power_base_sum(base-1, power)\n",
        "test": "assert     power_base_sum(2, 10) == 3, \"base = 2, power = 10 is incorrect\"",
        "num_ids": 355
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'\\s(?P<value>\\w+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation1(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation2(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation3(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation4(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation5(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation6(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation7(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation8(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation9(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation10(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation11(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation12(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation13(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation14(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation15(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation16(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" o",
        "test": "assert     extract_quotation('''",
        "num_ids": 269
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1, t_2, *t_3 = test_tup\n",
        "test": "assert     multiply_elements(tuple_1) == tuple_1 * tuple_1",
        "num_ids": 258
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for x in range(len(lst1)):\n        sum += lst1[x] + lst2[x]\n    return sum\n",
        "test": "assert     sum_list([1,2,3,4,5,6,7,8,9], [6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 372
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums]\n    grouped_by_idx = groupby(sorted(nums), lambda x: x[0])\n    for group in grouped_by_idx:\n        group_nums = [item[0] for item in group]\n        if len(set(group_nums)) < len(group_nums):\n            new_group = []\n            for group_num in group_nums:\n                if group_num not in new_group:\n                    new_group.append(group_num)\n            grouped_by_idx[group_nums] = new_group\n    \n    nums = list(set.intersection(*grouped_by_idx.values()))\n    return nums\n",
        "test": "assert     consecutive_duplicates([1,2,3,4,5,1,2,3,4,5,6,7,8,9,5,6,5,5,4,4]) == [1,2,3,4,5,5,5,6,7,8,9,9,9,5,6,6,6,7,7,8,8]",
        "num_ids": 592
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * r * h \n    return area\n",
        "test": "assert     (lateralsurface_cone(r=1,h=1.5) == 1.5), 'The function returns an error'",
        "num_ids": 1372
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'(?<![a-z])[^\\-\\:\\:\\<\\>\\?']*[.?!,;:)([a-z])([^\\-\\:\\<\\>\\?']+[\\s\\)]*\\d+|[.?!,;:)([a-z])([^\\-\\:\\<\\>\\?']+[\\s\\)]*\\d+)'\n    return re.sub(pattern, r':\\1', text)\n",
        "test": "assert     replace_specialchar('one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen'.split())=='4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19'",
        "num_ids": 3594
    },
    {
        "number": 733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    elif len(A) == 1:\n        if A[0] == x:\n            return 0\n        else:\n            return -1\n    else:\n        if A[0] == x:\n            return 0\n        elif A[1] < x:\n            return 1 + find_first_occurrence(A[1:], x)\n        else:\n            return 1 + find_first_occurrence(A[:1], x)\n",
        "test": "assert     find_first_occurrence(A, 5) == 1",
        "num_ids": 672
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod_list = []\n    \n    def func(arr, index, sum_list, prod_list):\n        # if there is only one element\n        if len(arr) == 1:\n            return sum_list[index]\n        # if there are at least 2 elements\n        if index < len(arr) - 1:\n            # start from index + 1\n            for i in range(index, len(arr)):\n                sum_list[index] += arr[i]\n                # increment the sum by arr[i]\n                prod_list.append(arr[i])\n                # if sum_list[i] is the same as the current sum\n                if sum_list[i] == sum_list[index]:\n                    # if the current sum is equal to the last sum\n                    if i < len(arr) - 2:\n                        sum_list[i + 1] = func(arr, i + 1, sum_list, prod_list)\n                else:\n                    break\n            return sum_list[i + 1]\n        # if index is the last element\n        else:\n            return sum_list[index]\n        \n    return func(arr, 0, [], prod_list)\n",
        "test": "assert     sum_Of_Subarray_Prod(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 15, \"Incorrect sum of Subarray prod\"",
        "num_ids": 585
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print('\\n\\n\\tThe number is', bin(n)[2:])\n    if n & 1 == 1:\n        print('First bit set')\n    else:\n        print('Last bit set')\n    \n    return None\n",
        "test": "assert     set_middle_bits(8) == 0",
        "num_ids": 2277
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert     left_insertion([],0) == 0",
        "num_ids": 748
    },
    {
        "number": 737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_regex = '[' + vowels[0] + ']*'\n    return re.match(vowel_regex, string)\ndef check_int(number):\n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    return re.match(r'^\\d+$', str(number))\ndef string_list_to_int_list(list):\n    '''\n    Write a function that takes a list and returns a list of integers.\n    '''\n    result = []\n    for x in list:\n        result.append(int(x))\n    return result\ndef check_all_int(number):\n    '''\n    Write a function to check whether all the given number is an integer or not using regex.\n    '''\n    return re.match(r'^\\d+$', str(number))\ndef check_vowel_and_consonant(vowel, consonant):\n    '''\n    Write a function to check whether a given vowel and consonant is a vowel or not using regex.\n    '''\n    return re.match(vowel, consonant)\ndef check_consonant_string(consonant):\n    '''\n    Write a function that takes a given consonant string and returns a given consonant.\n    '''\n    return re.match(r'^' + consonant + r'$', consonant)\ndef check_vowel_and_consonant_punctuation(vowel, consonant):\n    '''\n    Write a function to check whether a given vowel and consonant is a vowel or not using regex.\n    '''\n    return re.match(vowel + consonant + r'\\s+', consonant)\ndef check_consonant_and_vowel_punctuation(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel)\ndef check_consonant_and_vowel_punctuation_2(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_3(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_4(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_5(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_6(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_7(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_8(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_9(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_10(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_11(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_12(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_13(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_14(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_15(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_16(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_17(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_18(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+'",
        "test": "assert     check_str('Nana tara') == False, \"String is incorrect\"",
        "num_ids": 160
    },
    {
        "number": 738,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 0",
        "num_ids": 155
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    res = -1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            res = i\n            break\n    return res\n",
        "test": "assert ",
        "num_ids": 265
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_out = {}\n    for key,value in enumerate(test_tup):\n        dict_out[value] = key\n    return dict_out\n",
        "test": "assert     tuple_to_dict(('1',2,3,'4')) == {1:2,2:3,'4':4}",
        "num_ids": 477
    },
    {
        "number": 741,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_list = list(s)\n    for c in char_list :\n        if char_list.count(c)!= 1 :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('abc') == True, \"All characters in the string are same\"",
        "num_ids": 183
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side * math.sqrt(3)\n",
        "test": "assert     area_tetrahedron(0) == 0",
        "num_ids": 271
    },
    {
        "number": 743,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new = []\n    for i in list:\n        new.append(i)\n    if m==0:\n        return new\n    elif m==1:\n        return new[::-1]\n    else:\n        for i in range(m):\n            new.append(new[-1])\n        new.reverse()\n        return new\n",
        "test": "assert     rotate_right([1,2,3,4], 1) == [4,3,2,1], \"RotateRight function's output is incorrect!\"",
        "num_ids": 304
    },
    {
        "number": 744,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    try:\n        test_tup[1]\n    except IndexError:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_none(('some', 'tuple')) == True, 'Wrong. tuple: {}, expected: tuple.'",
        "num_ids": 224
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    l = []\n    for x in range(startnum, endnum + 1):\n        if x%10==0:\n            l.append(x)\n    return l\n",
        "test": "assert     divisible_by_digits(123, 456) == False",
        "num_ids": 399
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # your code goes here\n    if (r > 360 or a > 360):\n        return None\n    if (r == 360):\n        return (math.pi * (a*a - 1))\n    if (r == a):\n        return 2 * math.pi * a\n    else:\n        return (math.pi * (a*a - 1) * math.sqrt(r**2 + a**2))\n",
        "test": "assert     sector_area(1,0) == 0",
        "num_ids": 1984
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if (len(X) < 3 or len(Y) < 3 or len(Z) < 3):\n        return \"Cannot find common subsequence\"\n    if len(X) > len(Y) or len(X) > len(Z):\n        return \"Cannot find common subsequence\"\n    \n    lcs = [0] * (len(Z) + 1)\n    lcs[0] = 0\n    \n    for i in range(len(Z)):\n        for j in range(len(X)):\n            if X[j] == Z[i]:\n                lcs[i + 1] = max(lcs[i + 1], lcs[i] + 1)\n                \n    if lcs[len(Z) - 1]!= 0:\n        return lcs[len(Z) - 1]\n    else:\n        return -1\n    \n",
        "test": "assert     lcs_of_three(\"abcd\",\"cdfg\",\"fgb\") == \"abf\"",
        "num_ids": 545
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # This code snippet is starting from Assignment 3.\n    # --- Variables ---\n    # *str1: A string of words\n    # *new_str: A string of words, with spaces between words\n    # *add_space: A boolean, which determines whether to add spaces between words.\n    # --- Output ---\n    # *This function returns the modified string with spaces between words.\n    #\n    str1 = str1.split()\n    new_str = \" \".join(str1)\n    if add_space:\n        new_str = new_str.replace(' ','')\n    return new_str\n",
        "test": "assert     capital_words_spaces('   ') =='  '",
        "num_ids": 443
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort()\n    return nums_str\n",
        "test": "assert     sort_numeric_strings([1,2,3]) == [1,2,3]",
        "num_ids": 419
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if len(test_list)!= len(test_tup):\n        raise ValueError(\"tuple sizes don't match\")\n    else:\n        test_list.extend(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([3, 4, 5], (6, 7, 8)) == [3, 4, 5, 6, 7, 8]",
        "num_ids": 327
    },
    {
        "number": 751,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > (len(arr) // 2):\n        return True\n    elif arr[i] >= arr[(i + 1) // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i + 1) // 2)\n",
        "test": "assert     check_min_heap_helper([], 1) == True",
        "num_ids": 297
    },
    {
        "number": 752,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    l = 1\n    r = n\n    while(l < r): \n        if (l % 2 == 0): \n            l = l + 1\n        else: \n            r = r - 1\n    return r",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 2091
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    K = sorted(K)\n    list = []\n    for i in test_list:\n        list.append(i[:])\n    list.sort()\n    for i in range(len(list)):\n        for j in range(i+1,len(list)):\n            if list[i][:K[j]] == list[j][:K[i]]:\n                return (list[i][:K[j]] + \",\" + list[j][:K[i]] + \",\" + str(list[i][K[j]]+1) + \",\" + str(list[j][K[i]]+1))\n",
        "test": "assert     min_k([(1,2),(3,4),(5,6),(7,8),(8,9),(9,10)], 2) == (1,2)",
        "num_ids": 488
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [i for i in range(len(l1)) if l1[i] in l2 and l1[i] in l3 and l2[l1.index(l1[i])] in l3 and l3[l2.index(l2[l1.index(l1[i])])] in l1]\n",
        "test": "assert     extract_index_list([1, 2, 3, 5, 7, 8, 10], [6, 9], [7, 8, 9]) == []",
        "num_ids": 456
    },
    {
        "number": 755,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second_smallest = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i] < numbers[len(numbers)-1]:\n            second_smallest = numbers[i]\n    return second_smallest\n",
        "test": "assert     second_smallest([5, 6, 9, 7, 1, 2, 3]) == 2",
        "num_ids": 232
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_matches = re.findall(r'a(\\w+)\\b', text)\n    text_matches = text_matches + re.findall(r'a(\\w+)', text)\n    text_matches = text_matches + re.findall(r'a(b\\w+)', text)\n    text_matches = text_matches + re.findall(r'(\\ba\\w+)(b\\w+)', text)\n    text_matches = text_matches + re.findall(r'(\\b(a\\w+b\\w+\\w+)b\\w+\\w+)', text)\n    return text_matches\n",
        "test": "assert ",
        "num_ids": 399
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # count = 0\n    # for i in test_list:\n    #     if i[::-1] == i:\n    #         count += 1\n    # return count\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs([]) == 0",
        "num_ids": 512
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = dict()\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n",
        "test": "assert unique_sublists([]) == {}, \"duplicate lists should be empty\"",
        "num_ids": 313
    },
    {
        "number": 759,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import math\n    if type(num)!= str:\n        return False\n    if num == '':\n        return False\n    for i in range(0, len(num), 2):\n        if num[i] == '.' or num[i] == 'e':\n            num = num[0:i]\n            break\n    if len(num) % 2!= 0:\n        return False\n    for i in range(len(num)):\n        if num[i] == '0' or num[i] == '1':\n            continue\n        else:\n            break\n    num = int(num)\n    num_1 = num // (10 ** (len(num) - len(str(num))))\n    num_2 = num % (10 ** (len(num) - len(str(num))))\n    num_1_1 = num_1 // (10 ** (len(str(num_1_1)) - len(str(num_1))))\n    num_2_1 = num_2 % (10 ** (len(str(num_2_1)) - len(str(num_2))))\n    num_1_2 = num_1_1 // (10 ** (len(str(num_1_2)) - len(str(num_1_1))))\n    num_2_2 = num_2_1 % (10 ** (len(str(num_2_2)) - len(str(num_2_1))))\n    return math.gcd(num_1, num_2) == 1 and math.gcd(num_1_1, num_2_2) == 1\n",
        "test": "assert is_decimal('3.14159') == False",
        "num_ids": 533
    },
    {
        "number": 760,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Your code here\n    return len(set(arr)) == 1\n",
        "test": "assert     unique_Element([1, 2, 3, 4, 5, 6]) == False",
        "num_ids": 260
    },
    {
        "number": 762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum=int(monthnum3)\n    if(monthnum<1 or monthnum>12):\n        return False\n    else:\n        if(monthnum%4==0 and monthnum%100!=0 or monthnum%400==0):\n            return True\n        else:\n            return False\n    \ndef generate_random_number(start_number,end_number):\n    '''\n    Write a function to generate a random integer between start_number and end_number.\n    '''\n    random_number=random.randint(start_number,end_number)\n    return random_number\n",
        "test": "assert ",
        "num_ids": 1274
    },
    {
        "number": 763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    c=0\n    for i in range(0,n): \n        for j in range(i+1,n): \n            d=abs(arr[i]-arr[j]) \n            c=c+d\n    return c\n",
        "test": "assert ",
        "num_ids": 239
    },
    {
        "number": 764,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # We can't use string.isdigit() because the function returns True for string\n    # that contains a digit (if any).\n    def digits_ctr(str):\n        count = 0\n        for char in str:\n            if char.isdigit():\n                count += 1\n        return count\n    return digits_ctr(str)\n",
        "test": "assert     number_ctr(str = '000') == 3",
        "num_ids": 228
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    assert n >= 1, 'n must be greater than 1'\n    if n == 1: return 1\n    elif n == 2: return 2\n    else: return n * (n + 1) / 2\n",
        "test": "assert     is_polite(3)",
        "num_ids": 196
    },
    {
        "number": 766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    l2 = []\n    for i in range(len(l1)-1):\n        for j in range(i+1, len(l1)):\n            if l1[i]!= l1[j]:\n                l2.append((l1[i], l1[j]))\n    return l2\n",
        "test": "assert     pair_wise([1, 4, 6, 7, 8]) == [], \"The function failed\"",
        "num_ids": 376
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if(sum == arr[i] + arr[j]):\n                count = count + 1\n    return count\n",
        "test": "assert     get_pairs_count([1,2,3,4,5,6,7,8,9,10],4) == 1",
        "num_ids": 307
    },
    {
        "number": 769,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    i=0\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            return li1[i]-li2[i]\n    return li1[i]\n",
        "test": "assert     Diff([8,9,10,7], [3,5,6,4]) == [3,5,6]",
        "num_ids": 257
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    a = 0\n    for i in range(n) :\n        a += (1/4) * (1 + 4*(i%2))\n    print(a)\n    return a\nprint(odd_num_sum(25))\n",
        "test": "assert ",
        "num_ids": 193
    },
    {
        "number": 771,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_bracket = ['(', '[', '{']\n    closed_bracket = [')', ']', '}']\n    stack = []\n    for c in exp:\n        if c in open_bracket:\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                current_open_bracket = stack.pop()\n                if current_open_bracket == closed_bracket[open_bracket.index(current_open_bracket)]:\n                    continue\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert check_expression([1]) == 0",
        "num_ids": 564
    },
    {
        "number": 772,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_string = \"\"\n    for i in test_str:\n        if len(i)!= K:\n            new_string += i\n    return new_string\n",
        "test": "assert     remove_length(\"\", 1) == \"\"",
        "num_ids": 490
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Search for a pattern\n    pattern = re.compile(pattern,re.IGNORECASE)\n    return pattern.findall(text)\n",
        "test": "assert     occurance_substring('abcd', 'def') == None",
        "num_ids": 517
    },
    {
        "number": 775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = 0\n    for i in range(len(nums)):\n        if (nums[i] % 2)!= 0:\n            odd += 1\n    return odd\n",
        "test": "assert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,3,5,7,9]",
        "num_ids": 248
    },
    {
        "number": 776,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    # remove any vowels\n    test_str = test_str.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '').lower()\n    \n    # convert each character to lowercase\n    test_str = test_str.lower()\n    \n    # initialize array to store count\n    vowels = []\n    \n    # iterate through the string to add each char to the list of vowels\n    for char in test_str:\n        if char in 'aeiou':\n            vowels.append(char)\n    \n    # return count of vowels\n    return len(vowels)\n",
        "test": "assert     count_vowels(\"aA\") == 1",
        "num_ids": 310
    },
    {
        "number": 777,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    total = 0\n    for i in arr:\n        if i!= total:\n            total = total + i\n    return total\n",
        "test": "assert     find_sum([]) == 0",
        "num_ids": 168
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(zip(*[iter(list1)] * len(list1)))\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 508
    },
    {
        "number": 779,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = {}\n    for i in list1:\n        if i not in unique_list:\n            unique_list[i] = 0\n        else:\n            unique_list[i] += 1\n    return unique_list\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 332
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # print(test_list)\n    # print(test_list[0][1])\n    # print(test_list)\n    \n    list_of_list = []\n    final_list = []\n    for i in test_list:\n        list_of_list.append(i[1])\n    \n    # print(list_of_list)\n    for x in list_of_list:\n        # print(x)\n        final_list.append(list(combinations(x,2)))\n    # print(final_list)\n    return final_list\n",
        "test": "assert         find_combinations([]) == []",
        "num_ids": 758
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    if n==2 : \n        return 2\n    d = 0 \n    q = n//2\n    while q>0 : \n        r = q \n        q = q -1 \n        while r>0: \n            if (r%2)==1: \n                d += 1 \n            r = r//2\n        if d == 2: \n            return d\n        d = 0 \n    return 0\n",
        "test": "assert     count_divisors(2) == 2",
        "num_ids": 331
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_odd_length_subarrays = 0\n    if len(arr) % 2!= 0:\n        return -1\n    for i in range(len(arr)):\n        sum_of_odd_length_subarrays += arr[i]\n    return sum_of_odd_length_subarrays\n",
        "test": "assert     odd_length_sum([]) == 0,'should be 0'",
        "num_ids": 356
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    (max_r, max_g, max_b) = (255, 255, 255)\n    (min_r, min_g, min_b) = (0, 0, 0)\n    for i in range(0, 3):\n        if r >= max_r:\n            r = max_r\n        if r <= min_r:\n            r = min_r\n        if g >= max_g:\n            g = max_g\n        if g <= min_g:\n            g = min_g\n        if b >= max_b:\n            b = max_b\n        if b <= min_b:\n            b = min_b\n        (h, s, v) = colorsys.rgb_to_hsv(r, g, b)\n        if v > 1:\n            v = 1\n        else:\n            v = 0\n        r = int(round(r * 255))\n        g = int(round(g * 255))\n        b = int(round(b * 255))\n        cv2.putText(img, \"{},{},{}\".format(r, g, b), (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1, cv2.LINE_AA)\n    return img\n",
        "test": "assert     rgb_to_hsv(120, 200, 100) == (118, 60, 255)",
        "num_ids": 583
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Your code here\n    \n    mul = 1\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            mul *= list1[i]\n        else:\n            mul *= list1[i]\n    return mul\n",
        "test": "assert     mul_even_odd([1]) == 1",
        "num_ids": 308
    },
    {
        "number": 785,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for i in range(len(test_str)):\n        int_tuple += (int(test_str[i]),)\n    return int_tuple\n",
        "test": "assert     tuple_str_int((1, 2, 3, 4)) == (1, 2, 3, 4)",
        "num_ids": 293
    },
    {
        "number": 786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        i = 0\n    if i == len(a):\n        i = len(a) - 1\n    return i\n",
        "test": "assert ",
        "num_ids": 263
    },
    {
        "number": 787,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # If the string is empty, it will return False.\n    if text == \"\":\n        return False\n    # If the string is not empty, it will return True\n    return re.search(r'^[a-zA-Z]+a', text)!= None or re.search(r'^[A-Za-z]+a', text)!= None or re.search(r'^[A-Za-z]+b', text)!= None or re.search(r'^[A-Za-z]+b', text)!= None\n",
        "test": "assert     text_match_three('AabB') == True, 'true'",
        "num_ids": 2355
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple_str = str(new_tuple)\n    return new_tuple_str\n",
        "test": "assert     new_tuple(['a', 'b'], ['d', 'e']) == ('a', 'd'), 'new_tuple fail'",
        "num_ids": 284
    },
    {
        "number": 790,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in nums:\n        if i%2 == 0:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 166
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tuple = []\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            new_tuple.append(test_tup[i])\n        elif type(test_tup[i]) == list:\n            new_tuple.append(tuple(test_tup[i]))\n        else:\n            new_tuple.append(test_tup[i])\n    return new_tuple\n",
        "test": "assert     remove_nested((1,2,3)) == [1,2,3]",
        "num_ids": 430
    },
    {
        "number": 792,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "test": "assert     count_list([]) == 0",
        "num_ids": 152
    },
    {
        "number": 793,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Your code here\n    if len(arr)<1:\n        return -1\n    else:\n        return arr[len(arr)-1]\n    \ndef middle(arr,x):\n    '''\n    Write a python function to find the middle element of a sorted array.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return -1\n    else:\n        return (len(arr)-1)/2\n    \ndef first(arr,x):\n    '''\n    Write a python function to find the first element of a sorted array.\n    '''\n    # Your code here\n    if len(arr)<1:\n        return -1\n    else:\n        return arr[0]\n    \ndef last_first_middle(arr,x):\n    '''\n    Write a python function to find the last and first element of a sorted array.\n    '''\n    # Your code here\n    if len(arr)<1:\n        return -1\n    else:\n        return (arr[-1],arr[0])\n    \ndef count(arr,x):\n    '''\n    Write a python function to count the number of elements that are present in a sorted array.\n    '''\n    # Your code here\n    if len(arr)<1:\n        return 0\n    else:\n        return (arr[0]!= arr[1])\n    \ndef insert(arr,x):\n    '''\n    Write a python function to insert an element in a sorted array.\n    '''\n    # Your code here\n    if len(arr)<1:\n        arr.append(x)\n        return arr\n    else:\n        arr[len(arr)-1] = x\n        return arr\n    \ndef remove(arr,x):\n    '''\n    Write a python function to remove an element from a sorted array.\n    '''\n    # Your code here\n    if len(arr)<1:\n        return -1\n    else:\n        idx = arr[len(arr)-1]\n        arr[len(arr)-1] = arr[0]\n        arr.pop()\n        return idx\n    \ndef search(arr,x):\n    '''\n    Write a python function to search an element in a sorted array.\n    '''\n    # Your code here\n    if len(arr)<1:\n        return -1\n    else:\n        if arr[0] == x:\n            return arr[0]\n        elif arr[0] < x:\n            arr[0] = arr[0] + 1\n            arr.append(arr[0])\n            return arr\n        else:\n            arr[0] = arr[0] - 1\n            arr.insert(0,arr[0])\n            return arr[0]\n    \ndef bubble_sort(arr,x):\n    '''\n    Write a python function to sort an array in ascending order.\n    '''\n    # Your code here\n    for i in range(len(arr)):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr\n    \ndef partition(arr,x):\n    '''\n    Write a python function to partition an array in a sorted array.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    idx = arr[0]\n    arr[0] = arr[len(arr)-1]\n    arr[len(arr)-1] = idx\n    arr.pop(len(arr)-1)\n    \n    # Your code here\n    i = 0\n    for i in range(0,len(arr)):\n        if arr[i]<=x:\n            arr[i],arr[i+1] = arr[i+1],arr[i]\n        elif arr[i]>x:\n            arr[i],arr[i+1] = arr[i+1],arr[i]\n    return arr\n    \ndef quick_sort(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sort algorithm.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    else:\n        idx = arr[0]\n        arr[0] = arr[len(arr)-1]\n        arr[len(arr)-1] = idx\n        arr = quick_sort(arr,x)\n        return arr\n    \ndef quick_sort2(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sort algorithm.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 0\n        arr[0] = arr[len(arr)-1]\n        arr[len(arr)-1] = pivot\n        arr = quick_sort2(arr,x)\n        arr[0] = pivot\n        arr = quick_sort2(arr,x)\n        return arr\n    \ndef quick_sort3(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sort algorithm.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 0\n        arr[0] = arr[len(arr)-1]\n        arr[len(arr)-1] = pivot\n        arr = quick_sort3(arr,x)\n        arr[0] = pivot\n        arr = quick_sort3(arr,x)\n        return arr\n    \ndef quick_sort4(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sort algorithm.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 0\n        arr[0] = arr[len(arr)-1]\n        arr[len(arr)-1] = pivot\n        arr = quick_sort4(arr,x)\n        arr[0] = pivot\n        arr = quick_sort4(arr,x)\n        return arr\n    \ndef quick_sort5(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sort algorithm.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    else:\n        pivot = arr[0]\n        left = [i for i in arr[1:] if i<=pivot]\n        right = [i for i in arr[1:] if i>pivot]\n        arr[0] = pivot\n        arr = quick_sort5(arr,x)\n        arr[0] = pivot\n        arr = quick_sort5(arr,x)\n        arr[0] = pivot\n        arr = quick_sort5(arr,x)\n        return arr\n    \ndef quick_sort6(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sort algorithm.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 0\n        arr[0] = arr[len(arr)-1]\n        arr[len(arr)-1] = pivot\n        arr = quick_sort6(arr,x)\n        arr[0] = pivot\n        arr = quick_sort6(arr,x)\n        return arr\n    \ndef quick_sort7(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sort algorithm.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 0\n        arr[0] = arr[len(arr)-1]\n        arr[len(arr)-1] = pivot\n        arr = quick_sort7(arr,x)\n        arr[0] = pivot\n        arr = quick_sort7(arr,x)\n        return arr\n    \ndef quick_sort8(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sor",
        "test": "assert     last(arr, 1) == 1, 'wrong result'",
        "num_ids": 169
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #print(text)\n    if re.search(\"\\w+a\\w+\\b\", text) == None:\n        #print(re.search(\"\\w+a\\w+\\b\", text))\n        return\n    text = text.replace(\"\\n\",\" \")\n    text = text.replace(\"\\t\",\" \")\n    #print(text)\n    text_list = text.split(\" \")\n    #print(text_list)\n    list = []\n    for i in text_list:\n        if len(i) > 0:\n            #print(i)\n            list.append(i)\n    if len(list) > 0:\n        #print(\"longer \" + str(list))\n        list.sort(key = len, reverse = True)\n        #print(list)\n        #print(list[0])\n        if list[0].endswith(\"b\"):\n            #print(\"start\")\n            list[0] = list[0][:-1]\n            #print(list[0])\n        if list[-1].endswith(\"b\"):\n            #print(\"end\")\n            list[-1] = list[-1][:-1]\n            #print(list[-1])\n        if list[0] == \"a\":\n            #print(\"a\")\n            list[0] = \"A\"\n        if list[-1] == \"a\":\n            #print(\"A\")\n            list[-1] = \"A\"\n        #print(list)\n        list_string =''.join(list)\n        #print(list_string)\n        if list_string == \"\":\n            #print(list_string)\n            return\n        #print(list_string)\n        #print(list)\n        return list_string\n    else:\n        #print(text_list)\n        return\ndef count_word_occur(text, word):\n    '''\n    Count the occurrences of a word.\n    '''\n    if word in text:\n        #print(\"in\")\n        return text.count(word)\n    else:\n        return 0\ndef text_contains(text, word):\n    '''\n    Look at all text lines within a text file.\n    '''\n    #print(text)\n    if word in text:\n        #print(\"in\")\n        return True\n    else:\n        return False\ndef text_has_all_words(text, word):\n    '''\n    Check if the text contains all the words.\n    '''\n    if len(word) > 0:\n        #print(word)\n        if word in text:\n            #print(\"in\")\n            return True\n        else:\n            #print(\"not in\")\n            return False\n    else:\n        #print(\"in\")\n        return False\n",
        "test": "assert     text_starta_endb('this is a string with a test\\n') == \"this is a string with a test\"",
        "num_ids": 2256
    },
    {
        "number": 796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for key in dict:\n        sum+=dict[key]\n    return sum\n",
        "test": "assert     return_sum({\"a\":5, \"b\":2, \"c\":3, \"d\":1, \"e\":4, \"f\":8}) == 14, \"The function should return 14\"",
        "num_ids": 194
    },
    {
        "number": 797,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if n <= 1: \n        return n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum = sum + i\n    return sum\n",
        "test": "assert     sum_odd(0) == 0",
        "num_ids": 238
    },
    {
        "number": 798,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for element in arr:\n        total = total + element\n    return total\n",
        "test": "assert     _sum([]) == 0",
        "num_ids": 166
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # answer = n ^ d\n    answer = (n ^ d) << 1\n    print(n)\n    print(answer)\n    return answer\n",
        "test": "assert     left_rotate(1,1) == 0",
        "num_ids": 161
    },
    {
        "number": 800,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text\n",
        "test": "assert     remove_all_spaces(\"\") == \"\"",
        "num_ids": 187
    },
    {
        "number": 801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # count the number of equal numbers\n    result=0\n    for i in range(len(x)):\n        for j in range(len(y)):\n            for k in range(len(z)):\n                if x[i]==y[j]==z[k]:\n                    result+=1\n    return result",
        "test": "assert     test_three_equal(4, 5, 6) == 1",
        "num_ids": 159
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def count_rotations(arr, n):\n        count = 0\n        for i in range(n):\n            count += arr[i]\n        return count\n    return count_rotations(arr, len(arr))\n",
        "test": "assert     count_rotation(arr) == 3, \"Count of rotation is not correct\"",
        "num_ids": 289
    },
    {
        "number": 803,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if n == 1:\n    #     return True\n    # elif n == 0:\n    #     return False\n    # elif n < 0:\n    #     return False\n    \n    mod = 10**9+7\n    if n<0 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_perfect_square(1) == True",
        "num_ids": 1682
    },
    {
        "number": 804,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)==0:\n        return False\n    return True if arr[0]%2==0 else False\n",
        "test": "assert     is_product_even([1, 1, 5, 8, 13, 8, 1, 6, 2, 5]) == False",
        "num_ids": 330
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for el in lists:\n        if sum(el) > max(max_list):\n            max_list = el\n    return max_list\n    \ndef max_sum_array(arr):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for el in arr:\n        if sum(el) > max(max_list):\n            max_list = el\n    return max_list\n    ",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 221
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    pass\n",
        "test": "assert     max_run_uppercase('B') == 'B'",
        "num_ids": 121
    },
    {
        "number": 807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    even = [x for x in nums if x % 2 == 0]\n    if len(even) > 0:\n        print(even[0])\n    else:\n        print('No odd numbers in the list')\n",
        "test": "assert     first_odd(nums=[1,2,3,4,5,6,7,8,9]) == 6, \"Check first_odd\"",
        "num_ids": 238
    },
    {
        "number": 808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Step 1: Check if the tuple is contained in the K\n    if any(len(t)!= K for t in test_tup):\n        return False\n    # Step 2: Check if the tuple contains all the elements within the range of 2^(K-1)\n    for k in range(K):\n        t = [t for t in test_tup if t[k] == k]\n        if len(t)!= K:\n            return False\n    return True\n",
        "test": "assert     check_K(tuple, \"abc\")",
        "num_ids": 353
    },
    {
        "number": 809,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return False\n    for index in range(len(test_tup2)):\n        if test_tup1[index] < test_tup2[index]:\n            return False\n    return True\n",
        "test": "assert     check_smaller((1,2,3),(4,5,6)) == False",
        "num_ids": 366
    }
]