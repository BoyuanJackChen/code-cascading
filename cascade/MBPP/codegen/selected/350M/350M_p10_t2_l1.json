[
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Get the first element\n    first_element = test_tup1[0]\n    # Get the second element\n    second_element = test_tup2[0]\n    # Compare it\n    if first_element == second_element:\n        return second_element\n    # Find the first element\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                return test_tup1[i]\n",
        "test": "assert     similar_elements([1,1,2,2,3,3,3], [2,3,3,4,4,5,5]) == True",
        "num_ids": 1314
    },
    {
        "number": 3,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert     is_not_prime(5) == True",
        "num_ids": 880
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n-1,-1,-1):\n        if nums[i] > hq.heappop(nums):\n            return i\n    return -1\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to return the n smallest elements from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n-1,0,-1):\n        if nums[i] < hq.heappop(nums):\n            return i\n    return -1\ndef heap_queue_min(nums,n):\n    '''\n    Write a function to return the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n-1,-1,-1):\n        if nums[i] > hq.heappop(nums):\n            return i\n    return -1\ndef heap_queue_max(nums,n):\n    '''\n    Write a function to return the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n-1,-1,-1):\n        if nums[i] < hq.heappop(nums):\n            return i\n    return -1\ndef heap_queue_delete(nums,n):\n    '''\n    Write a function to return the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums[n-1] > nums[n]:\n        nums[n-1] = hq.heappop(nums)\n    else:\n        nums[n-1] = nums[n]\n    for i in range(n-2,-1,-1):\n        if nums[i] > nums[n-1]:\n            nums[i] = hq.heappop(nums)\n    return nums\ndef heap_queue_print(nums,n):\n    '''\n    Write a function to print the list of numbers in ascending order, in an infinite loop, using a priority queue.\n    '''\n    for i in range(n):\n        print(nums[i], end ='')\n    print('\\n')\ndef heap_queue_min(nums,n):\n    '''\n    Write a function to return the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    for i in range(n-1,-1,-1):\n        if nums[i] < nums[n-1]:\n            nums[i] = nums[n-1]\n        nums[n-1] = nums[i]\n    nums[n-1] = nums[n]\n    return nums\ndef heap_queue_max(nums,n):\n    '''\n    Write a function to return the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    for i in range(n-1,-1,-1):\n        if nums[i] < nums[n-1]:\n            nums[i] = nums[n-1]\n        nums[n-1] = nums[i]\n    nums[n-1] = nums[n]\n    return nums\ndef heap_queue_merge(nums,n):\n    '''\n    Write a function to merge the n largest integers from a given list of numbers.\n    '''\n    for i in range(n-1):\n        nums[i] = nums[i] + nums[i+1]\n    nums[n-1] = nums[n]\n    return nums\ndef heap_queue_pop_min(nums,n):\n    '''\n    Write a function to return the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    for i in range(n-1,-1,-1):\n        nums[i] = nums[i] + nums[n-1-i]\n    nums[n-1] = nums[n]\n    return nums\ndef heap_queue_pop_max(nums,n):\n    '''\n    Write a function to return the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    for i in range(n-1,-1,-1):\n        nums[i] = nums[i] + nums[n-1-i]\n    nums[n-1] = nums[n]\n    return nums\ndef heap_queue_push(nums,n):\n    '''\n    Write a function to push the n largest integers from a given list of numbers, in ascending order.\n    '''\n    nums[n] = nums[0]\n    for i in range(n-1,-1,-1):\n        nums[i] = nums[i+1]\n    nums[0] = nums[n]\n    return nums\ndef heap_queue_pop(nums,n):\n    '''\n    Write a function to pop the n largest integers from a given list of numbers, in descending order.\n    '''\n    nums[0] = nums[n]\n    for i in range(n-1,-1,-1):\n        nums[i] = nums[i+1]\n    nums[n] = nums[n]\n    return nums\ndef heap_queue_pop_min(nums,n):\n    '''\n    Write a function to return the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    nums[0] = nums[0] + nums[1]\n    for i in range(n-1,-1,-1):\n        nums[i] = nums[i+1]\n    nums[0] = nums[n]\n    return nums\ndef heap_queue_pop_max(nums,n):\n    '''\n    Write a function to return the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums[0] = nums[0] + nums[1]\n    for i in range(n-1,-1,-1):\n        nums[i] = nums[i+1]\n    nums[0] = nums[n]\n    return nums\ndef heap_queue_sort(nums,n):\n    '''\n    Write a function to sort the n largest integers from a given list of numbers.\n    '''\n    for i in range(n-1,0,-1):\n        for j in range(0,i):\n            if nums[j] < nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\ndef heap_queue_print_heap(nums,n):\n    '''\n    Write a function to print the n largest integers from a given list of numbers, in descending order, using a priority queue.\n    '''\n    for i in range(n-1,-1,-1):\n        print(nums[i], end ='')\n    print('\\n')\ndef heap_queue_sift_down(nums,n):\n    '''\n    Write a function to sift down the n largest integers from a given list of numbers, in descending order, using a priority queue.\n    '''\n    for i in range(n-1,-1,-1):\n        if nums[i] > nums[n-1-i]:\n            nums[n-1-i],nums[i] = nums[i],nums[n-1-i]\n    for i in range(n-1,0,-1):\n        nums[i],nums[0] = nums[0],nums[i]\n    return nums\ndef heap_queue_sift_up(nums,n):\n    '''\n    Write a function to sift up the n largest integers from a given list of numbers, in ascending order, using a priority queue.\n    '''\n    for i in range(n-1,-1,-1):\n        if nu",
        "test": "assert ",
        "num_ids": 1263
    },
    {
        "number": 6,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x==0):\n        return False\n    elif (x>0):\n        if (x%2==0):\n            return False\n    else:\n        if (x%2!=0):\n            return False\n    return True\n",
        "test": "assert     is_Power_Of_Two(1) == True, \"check for power of one\"",
        "num_ids": 892
    },
    {
        "number": 7,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[A-Za-z0-9\\s+\\.]+'\n    longest = \"\"\n    for word in re.finditer(pattern, text):\n        if len(word.group()) >= 4:\n            longest = word.group()\n    return longest\n",
        "test": "assert     find_char_long('abcdefg')",
        "num_ids": 3251
    },
    {
        "number": 8,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # YOUR CODE HERE\n    res = []\n    for num in nums:\n        res.append(num**2)\n    return res\n",
        "test": "assert     square_nums([]) == []",
        "num_ids": 772
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #Find the minimum rotations\n    rotations = 0\n    for i in range(len(str)-1):\n        if str[i]==str[i+1]:\n            rotations += 1\n    #Write a loop that checks if the string is rotated\n    #for i in range(len(str)-1):\n    #    if str[i]==str[i+1]:\n    #        rotations += 1\n    return rotations\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     find_Rotations(\"abc\") == 0",
        "num_ids": 2872
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)<=1: \n        return s\n    elif ch in s: \n        return s[:s.find(ch)]+s[s.find(ch)+1:]\n    else: \n        return s\n    \n    \n    \n    \n",
        "test": "assert     remove_Occ(\"Life\",\"l\")",
        "num_ids": 1164
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    temp_matrix = M\n    temp_matrix.sort(key=lambda x:x[0])\n    return temp_matrix\n",
        "test": "assert     sort_matrix([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]) == [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]",
        "num_ids": 3823
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h)\n    return volume\n",
        "test": "assert     find_Volume(0,1,2) == 0",
        "num_ids": 824
    },
    {
        "number": 16,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    if text.count('_')>0:\n        return False\n    elif text.count('_')==0:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_lowercase_underscore('abc') == True",
        "num_ids": 1165
    },
    {
        "number": 17,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*a\n",
        "test": "assert     square_perimeter(0) == 0",
        "num_ids": 469
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char not in string[:len(string)//2]]\n",
        "test": "assert     str_to_list(\"abracadabra\")!= [\"a\", \"b\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]",
        "num_ids": 2918
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = []\n    for num in arraynums:\n        if num in duplicate:\n            return True\n        else:\n            duplicate.append(num)\n    return False\n",
        "test": "assert     test_duplicate([1,1,2,3,1]) == True",
        "num_ids": 1070
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True\n",
        "test": "assert     is_woodall(0), 'is_woodall(0) should be False'",
        "num_ids": 456
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    elif num < 0:\n        return False\n    else:\n        return rev(num // 2) or num < 0\n",
        "test": "assert     rev(0) == 1",
        "num_ids": 2719
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_nums = []\n    for x in arr :\n        max_nums.append(x)\n    max_num = 0\n    for i in range(len(max_nums)) :\n        if max_num < max_nums[i] : \n            max_num = max_nums[i]\n    return max_num\n    \n",
        "test": "assert     find_Max_Num([]) == 0",
        "num_ids": 802
    },
    {
        "number": 58,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return True\n    elif x < y:\n        return False\n    else:\n        return True\n",
        "test": "assert     opposite_Signs(2, -2) == True",
        "num_ids": 786
    },
    {
        "number": 59,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    sqrt_n = n**0.5 \n    for i in range(2,int(sqrt_n)+1): \n        if n%i==0: \n            return False\n            break\n    return True\n",
        "test": "assert     is_octagonal(1), '1 is not an octagonal number'",
        "num_ids": 2978
    },
    {
        "number": 61,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dic = defaultdict(int)\n    if len(s) == 0:\n        return 0\n    for i in range(len(s)):\n        dic[s[i]] = dic.get(s[i], 0) + 1\n    \n    return dic[s[0]]\n    \n",
        "test": "assert     count_Substrings('') == 0",
        "num_ids": 1090
    },
    {
        "number": 62,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "test": "assert     smallest_num([3,5,1,2]),'multiple smallest numbers'",
        "num_ids": 642
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = 0\n    for index, value in enumerate(test_list):\n        difference = value - test_list[(index+1)%len(test_list)]\n        if difference > maximum:\n            maximum = difference\n    return maximum\n",
        "test": "assert     max_difference([]) == 0, 'passed'",
        "num_ids": 1172
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if not isinstance(subjectmarks, list):\n        raise TypeError(\"subjectmarks must be a list\")\n    subjectmarks.sort(key = lambda x: x[1])\n    return subjectmarks\n",
        "test": "assert     subject_marks([(1, 'A'), (3, 'B'), (5, 'C')]) == [(1, 'A'), (3, 'B'), (5, 'C')], \"Incorrect result\"",
        "num_ids": 1397
    },
    {
        "number": 65,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for d in data_list:\n        total += d\n    return total\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 1157
    },
    {
        "number": 66,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    c = 0\n    for i in list:\n        if i>0:\n            c+=1\n    print('the total of positive numbers in the list is : ',c)\n    return c\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 855
    },
    {
        "number": 67,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    s = list(set(range(1, n+1)))\n    return int(len(s)**(1/2))\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 796
    },
    {
        "number": 68,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check the length\n    if len(A) <= 1:\n        return True\n    else:\n        # check for negative and positive \n        if A[0] > A[-1]:\n            return True\n        else:\n            # positive = in ascending order\n            # negative = in descending order\n            # positive_index = 0\n            # negative_index = len(A) - 1\n            # while positive_index <= negative_index:\n            #     if A[positive_index] < A[negative_index]:\n            #         return True\n            #     elif A[positive_index] > A[negative_index]:\n            #         return False\n            #     else:\n            #         positive_index += 1\n            #         negative_index -= 1\n            #     else:\n            #         return False\n            # else:\n            #     return True\n            #\n            # return False\n            return True if A[0] <= A[1] else False\n",
        "test": "assert     is_Monotonic([]) == True",
        "num_ids": 1631
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if l.count(i) > 0:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1, 2, 3, 4], []) == False",
        "num_ids": 1325
    },
    {
        "number": 70,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_1 = tuple(Input)\n    print(f\"tuple_1: {tuple_1}\")\n    tuple_2 = tuple(Input)\n    print(f\"tuple_2: {tuple_2}\")\n    #tuple_1 = tuple(map(tuple, Input))\n    #tuple_2 = tuple(map(tuple, Input))\n    #tuple_3 = tuple(map(tuple, Input))\n    tuple_1_length = len(tuple_1)\n    tuple_2_length = len(tuple_2)\n    \n    if tuple_1_length == tuple_2_length:\n        print(f\"The given tuple has a equal length\")\n        return True\n    else:\n        print(f\"The given tuple has a different length\")\n        return False\n",
        "test": "assert     find_equal_tuple(())",
        "num_ids": 1137
    },
    {
        "number": 71,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n",
        "test": "assert     comb_sort([9,8,7,6,5,4,3,2,1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1288
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    return dif_Square(n-1) or dif_Square(n-2)\n",
        "test": "assert dif_Square(0) == 0",
        "num_ids": 989
    },
    {
        "number": 74,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(patterns)):\n        for j in range(0, len(colors)):\n            if patterns[i] == colors[j]:\n                if j == 0 or patterns[i-1] == colors[j-1] or patterns[i-1] == colors[j+1]:\n                    return True\n    return False\n",
        "test": "assert     is_samepatterns([[0,1,2], [1,2,3]], [[0,0],[0,0],[1,1],[1,2],[2,1],[2,2]]) == False, \"is_samepatterns\"",
        "num_ids": 1569
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    all_tuples = []\n    for tuple in test_list:\n        for index in range(0, len(tuple), 2):\n            if tuple[index] % K == 0:\n                all_tuples.append(tuple)\n    return all_tuples\n",
        "test": "assert     find_tuples([(1,2),(3,4),(1,3),(3,5),(1,2)], 3), \"Incorrect syntax\"",
        "num_ids": 1575
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "test": "assert     is_Diff(13) is False, \"The function is_Diff should return False\"",
        "num_ids": 566
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    odd=False\n    for i in range(len(s)): \n        if s[i] == s[i-1]: \n            continue\n        else: \n            odd = True \n    return odd\n",
        "test": "assert     word_len('s') == 0, 'Expected to be 0'",
        "num_ids": 774
    },
    {
        "number": 80,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += int(i**0.5)\n    return s\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 2773
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r * r\n",
        "test": "assert     volume_sphere(0) == 0",
        "num_ids": 538
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    mod_char_dict = {}\n    # create a map for the characters\n    for i in range(len(strr)):\n        char = strr[i]\n        mod_char_dict[char] = i\n    # create a list with the characters as keys\n    char_list = list(mod_char_dict.keys())\n    char_list.sort()\n    # find the character with the highest ASCII value and return it\n    return char_list[len(char_list) // 2]\n",
        "test": "assert         (get_Char(\"rdd\") == 'r')",
        "num_ids": 3325
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = n//2\n    b = n%2\n    if b == 0:\n        return n\n    elif b == 1:\n        return a+1\n    else:\n        return a+1+sequence(n//2)\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 2705
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4.0 * math.pi * math.pow(r, 3)\n",
        "test": "assert         surfacearea_sphere(0) == 0",
        "num_ids": 430
    },
    {
        "number": 86,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(n+1)//2\n",
        "test": "assert     centered_hexagonal_number(0) == 0",
        "num_ids": 814
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n",
        "test": "assert     merge_dictionaries_three({'a':1, 'b':2, 'c':3}, {'a':1, 'b':2, 'c':3}, {'a':1, 'b':2, 'c':3}) == {'a':1, 'b':2, 'c':3}",
        "num_ids": 1321
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "test": "assert     freq_count([])=={}",
        "num_ids": 953
    },
    {
        "number": 89,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = 0\n    while closest < N:\n        closest = min(N, closest + 1)\n        if closest == N:\n            return closest\n        elif closest < N:\n            closest = N\n        else:\n            closest = N - 1\n    return closest\n",
        "test": "assert     closest_num(1) == 1",
        "num_ids": 861
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    string = str()\n    for i in list1:\n        string += i +''\n    return len(string)\n",
        "test": "assert     len_log(list1=[]) == 0",
        "num_ids": 2578
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return True\n    for i in range(0, len(str1)):\n        if str1[i:i + len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "test": "assert     find_substring('abc', 'abc') == True",
        "num_ids": 1117
    },
    {
        "number": 92,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return True \n    else: \n        return False\n",
        "test": "assert     is_undulating(4) == False, \"is_undulating should return False\"",
        "num_ids": 570
    },
    {
        "number": 93,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return pow(a,b)\n",
        "test": "assert     power(1, 3) == 1",
        "num_ids": 477
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return test_list[0][1]\n",
        "test": "assert     index_minimum([(1,2),(2,3),(3,1)]) == 2",
        "num_ids": 915
    },
    {
        "number": 95,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < smallest_length:\n            smallest_length = lst[i]\n    return smallest_length\n",
        "test": "assert     'Find_Min_Length' == 'Find_Min_Length'",
        "num_ids": 981
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        num = n\n        i = 2\n        while num % i!= 0:\n            i += 1\n        return i\n",
        "test": "assert     divisor(n=2)",
        "num_ids": 635
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counter = {}\n",
        "test": "assert     frequency_lists( [[1,2,3,4],[5,6,7,8]], [[3,2,3,2,3]]) is True ",
        "num_ids": 1395
    },
    {
        "number": 98,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Write your code here\n    result = 1\n    for number in numbers:\n        result = result * number\n    return result\n",
        "test": "assert     isinstance(multiply_num([2,3,4]), int), \"multiply_num should return an int\"",
        "num_ids": 901
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if(n == 0):\n        return \"0\"\n    elif(n < 0):\n        binary = str(abs(n))\n        return decimal_to_binary(int(binary, 2))\n    else:\n        return str(n)\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 787
    },
    {
        "number": 100,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = 1\n    while num > 1:\n        if num % n == 0:\n            return num // n\n        n += 1\n        num //= n\n    return num\n",
        "test": "assert     next_smallest_palindrome(3) == 3",
        "num_ids": 1178
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n    \ndef kth_element_test(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n < k:\n        return None\n    return arr[k - 1]\n    ",
        "test": "assert     kth_element([2, 4, 5, 8, 10], 2) == 5",
        "num_ids": 941
    },
    {
        "number": 102,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n",
        "test": "assert     snake_to_camel(\"String\") == \"String\"",
        "num_ids": 703
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m > n:\n        return 0\n    \n    if (n == 1 or m == 1):\n        return n\n",
        "test": "assert     eulerian_num(1, 1) == 1",
        "num_ids": 1401
    },
    {
        "number": 104,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output = []\n    for list in input_list:\n        for item in list:\n            output.append(item)\n    return output\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 1385
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x == True:\n            count += 1\n    return count\n",
        "test": "assert     count([]) == 0, 'count() is a zero element function.'",
        "num_ids": 660
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup.append(item)\n    return test_tup\n",
        "test": "assert         add_lists([], ()) == ()",
        "num_ids": 939
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i,j,k = 0,0,0\n",
        "test": "assert     merge_sorted_list([1,2,3], [1,2,3,5,6], [1,3,5]) == [1,1,1,2,2,2,3,3,3,5,6]",
        "num_ids": 2893
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd = 0\n    temp = 0\n    while(n>0):\n        temp = int(s[n])\n        if temp % 2 == 1:\n            odd += 1\n            n -= 1\n        else:\n            temp = 0\n            n -= 1\n    return odd \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    even = 0\n    temp = 0\n    while(n>0):\n        temp = int(s[n])\n        if temp % 2 == 0:\n            even += 1\n            n -= 1\n        else:\n            temp = 0\n            n -= 1\n    return even\n",
        "test": "assert     odd_Equivalent('10', 1) == 0",
        "num_ids": 1088
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for nestedlist1 in nestedlist:\n        for nestedlist2 in nestedlist1:\n            common.add(nestedlist2)\n    return list(common)\n",
        "test": "assert     common_in_nested_lists([[1,2,3],[4,5,6]]) == [1,2,3,4,5,6]",
        "num_ids": 1231
    },
    {
        "number": 113,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(\"1\") == 1",
        "num_ids": 475
    },
    {
        "number": 115,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for value in list1:\n        if type(value) is dict:\n            if len(value) > 0:\n                return False\n        else:\n            return False\n    return True\n",
        "test": "assert     empty_dit([]) == True, \"empty_dit should return True.\"",
        "num_ids": 665
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(int(x) for x in nums)\n",
        "test": "assert     tuple_to_int([]) == 0",
        "num_ids": 826
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for row in test_list:\n        for item in row:\n            float_list.append(float(item))\n    return float_list\n",
        "test": "assert     list_to_float([]) == []",
        "num_ids": 1686
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = string.split(' ')\n    return l\n",
        "test": "assert     string_to_list(\"I am a string\"), True",
        "num_ids": 472
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    seen = set()\n    for i, num in enumerate(arr):\n        if num in seen:\n            return num\n        seen.add(num)\n",
        "test": "assert     search('bab'), \"bab is not present in the array\"",
        "num_ids": 1007
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    max_p_t = 0\n    for i in range(len(list1)):\n        if list1[i] > max_p_t:\n            max_p_t = list1[i]\n    return max_p_t\n",
        "test": "assert     max_product_tuple([1, 2, 3, 4, 5]) == 5, 'Test is wrong!'",
        "num_ids": 1249
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = [i for i in range(1, limit + 1) if i % 2 == 0]\n    amicable_numbers_sum = sum(amicable_numbers)\n    return amicable_numbers_sum\n",
        "test": "assert     amicable_numbers_sum(2) == 2",
        "num_ids": 957
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real*a.imag - a.real*b.imag\n    return angle\n",
        "test": "assert     angle_complex(1,0) == 0",
        "num_ids": 1109
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    i = 0\n    temp = 0\n    while i < n:\n        if string[i] == \"0\":\n            temp += 1\n            i += 1\n        else:\n            i += 1\n    return temp\n",
        "test": "assert     find_length('0b10') == 2, \"find_length(0b10) should return 2\"",
        "num_ids": 1140
    },
    {
        "number": 126,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # First, print the two numbers, one at a time \n    a = a \n    b = b \n    # Init empty list, for summation of common divisors \n    c = [] \n    # Build a loop to calculate all common divisors \n    # of a and b \n    # If there are more common divisors, keep adding them until there are no common divisors \n    #\n    # Time complexity: O(n+m) where n is the number of divisors and m is the number of numbers in the array \n    # Space Complexity: O(n+m) \n    for i in range(1, a+1): \n        if a % i == 0 and b % i == 0: \n            c.append(i) \n    # print(c) \n    # print(c[-1]) \n    # Find the common divisors \n    # for a and b, return that \n    # check if the sum of a and b is a common divisor \n    #\n    # Time complexity: O(n) where n is the number of divisors and n is the number of numbers in the array \n    # Space Complexity: O(1)\n    for i in c: \n        a = a - i \n        b = b + i \n    return a+b\n",
        "test": "assert     sum(1,2) == 3",
        "num_ids": 1127
    },
    {
        "number": 127,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(0, 0) == 0",
        "num_ids": 560
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    wordlist = [\n        'aardvark', 'baboon', 'camelot', 'canine', 'cello', 'kite','scorpion','snake','speedboat'\n        ]\n    count = {}\n    for word in wordlist:\n        count[word] = count.get(word, 0) + 1\n    def long_words(n, wordlist):\n        '''\n        Write a function that returns the words that are longer than n characters.\n        '''\n        for word in wordlist:\n            if len(word) > n:\n                return word\n        return None\n    \n    return long_words(n, count.keys())\n",
        "test": "assert     long_words(8, [\"cat\", \"cats\", \"catsdog\", \"dogs\", \"dog\", \"puppy\"])",
        "num_ids": 966
    },
    {
        "number": 129,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # your code goes here\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] == 0:\n                return False\n    return True\n",
        "test": "assert     magic_square_test([[1, 2, 3, 4, 0, 0, 0, 0, 0], [5, 6, 7, 8, 0, 0, 0, 0, 0], [9, 10, 11, 12, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]) is False, \"Magic square test failed!\"",
        "num_ids": 1703
    },
    {
        "number": 130,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    n = len(nums)\n    \n    # Find the max occurence of items\n    item_occurrence = dict()\n    for i in range(n):\n        if nums[i] not in item_occurrence:\n            item_occurrence[nums[i]] = 1\n        else:\n            item_occurrence[nums[i]] += 1\n        \n    # Find the max occurence of items with the given keys\n    max_occurrence = 0\n    max_occurrence_key = 0\n    for key, value in item_occurrence.items():\n        if value > max_occurrence:\n            max_occurrence = value\n            max_occurrence_key = key\n    \n    # Return the key of the max occurrence\n    return max_occurrence_key\n    \ndef find_max_freq(nums):\n    '''\n    Given a list of numbers, find the most frequent item in it.\n    '''\n    \n    n = len(nums)\n    \n    # Find the max occurence of items\n    max_occurrence = dict()\n    for i in range(n):\n        if nums[i] not in max_occurrence:\n            max_occurrence[nums[i]] = 1\n        else:\n            max_occurrence[nums[i]] += 1\n    \n    # Find the max occurrence of items with the given keys\n    max_occurrence = sorted(max_occurrence.items(), key = lambda item: item[1])\n    max_occurrence = max_occurrence[-1]\n    \n    # Return the item with the highest frequency\n    return max_occurrence[0]\n",
        "test": "assert     max_occurrences([3,3,2,1,1,2,3]) == 3",
        "num_ids": 3111
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # TODO: write your code here\n    vowels = 'aeiou'\n    vowels_count = 0\n    for char in str1:\n        if char in vowels:\n            vowels_count += 1\n    # Note: if you do not use reverse_vowels, it will make the output too long\n    if vowels_count == 0:\n        return str1\n    else:\n        first_vowel = vowels[vowels_count % len(vowels)]\n        # Note: the string has already been checked for vowels\n        return str1.replace(first_vowel, '')\n",
        "test": "assert     reverse_vowels('a') == 'a'",
        "num_ids": 1031
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = '('\n    for item in tup1:\n        result += '('\n        result += str(item)\n        result += ','\n        result += ')'\n    return result\n",
        "test": "assert     tup_string((1, 2, 3, 'a', 'b')) == '123a2b'",
        "num_ids": 770
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num_list = []\n    sum_negativenum = 0\n    for num in nums:\n        if num > 0:\n            num_list.append(num)\n    \n    for i in num_list:\n        if i < 0:\n            sum_negativenum += i\n    \n    return sum_negativenum\n",
        "test": "assert     sum_negativenum([]) == 0, \"The function should be working\"",
        "num_ids": 707
    },
    {
        "number": 135,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * hexagonal_num(n-1)\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 2937
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    # array of zeroes\n    zeroes = 0\n    # array of non-zeroes\n    non_zeroes = 0\n    # count of non-zeroes in array\n    non_zeroes_count = 0\n    # count of zeroes in array\n    zeroes_count = 0\n    # find the length of the array\n    for i in range(0,n):\n        # if the array is zeroes\n        if nums[i] == 0:\n            # count the zeroes in array\n            zeroes_count += 1\n            # if the zeroes in array are non-zeroes\n            if nums[i] == 1:\n                # if there are 0s in the array\n                if zeroes_count == n - 1:\n                    # check if the array is non-zero\n                    if nums[i]!= 1:\n                        # return the ratio of non-zeroes\n                        return non_zeroes_count / zeroes_count\n                    # return the ratio of zeroes\n                    return zeroes_count / n\n                # if there are 0s in the array\n                else:\n                    # return the ratio of zeroes\n                    return zeroes_count / non_zeroes_count\n            # if the array is non-zero\n            else:\n                # find the count of non-zeroes\n                non_zeroes_count += 1\n                # check if the array is non-zero\n                if nums[i] == 1:\n                    # return the non-zeroes\n                    return non_zeroes_count / non_zeroes_count\n        # if the array is non-zeroes\n        else:\n            # check if the array is non-zeroes\n            if nums[i] == 1:\n                # if there are zeroes in the array\n                if zeroes_count == n - 1:\n                    # check if the array is non-zero\n                    if nums[i] == 0:\n                        # return the non-zeroes\n                        return non_zeroes_count / non_zeroes_count\n                    # return the non-zeroes\n                    return non_zeroes_count / zeroes_count\n                # if there are zeroes in the array\n                else:\n                    # return the non-zeroes\n                    return non_zeroes_count / non_zeroes_count\n            # if the array is zeroes\n            else:\n                # check if the array is non-zeroes\n                if nums[i] == 0:\n                    # return the non-zeroes\n                    return non_zeroes_count / non_zeroes_count\n    # if all the numbers are zeroes\n    return 0\n",
        "test": "assert     zero_count([0,1,1,0,1,0]) == 1",
        "num_ids": 3446
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_of_power_2 = 0\n    while n:\n        if n & 1 == 1:\n            sum_of_power_2 += 1\n        n >>= 1\n    if sum_of_power_2!= 0:\n        return True\n    return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(2) == True",
        "num_ids": 1000
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * r * r\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 684
    },
    {
        "number": 140,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    final_list = []\n    for element in test_list:\n        if type(element) is list:\n            for i in element:\n                final_list.append(i)\n        else:\n            final_list.append(element)\n    return final_list\n",
        "test": "assert     extract_singly('') == [], \"Extract_singly should return empty list\"",
        "num_ids": 1117
    },
    {
        "number": 141,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(1, n):\n        j = i\n        while j > 0 and nums[j-1] > nums[j]:\n            nums[j-1], nums[j] = nums[j], nums[j-1]\n            j -= 1\n    return nums\n",
        "test": "assert         pancake_sort([]) == []",
        "num_ids": 3518
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # the number of items that are identical in the same position of three lists\n    if len(list1) == len(list2) == len(list3):\n        if list1[0] == list2[0] == list3[0]:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n",
        "test": "assert     count_samepair(['aa', 'a', 'a'],['b', 'b', 'b'],['a','a','b']) == 0, 'incorrect!'",
        "num_ids": 1642
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # list = []\n    # for i in range(0, len(Input)):\n    #     for j in range(0, len(Input[i])):\n    #         if Input[i][j] == \".\":\n    #             list.append(Input[i][j+1:])\n    # return len(list)\n    \n    return len(list(set(Input)))\n",
        "test": "assert     find_lists([]) == 0",
        "num_ids": 741
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # Initializing the maximum difference \n    max_diff = 0\n    \n    # Iterating through the array \n    for i in range(0, len(arr)): \n        # Taking the absolute value \n        abs_diff = abs(arr[i] - arr[i]) \n        \n        # Initializing the current \n        # maximum difference \n        current_diff = abs_diff \n        \n        # Iterating through the array \n        for j in range(i + 1, len(arr)): \n            # Taking the absolute value \n            abs_diff = abs(arr[i] - arr[j]) \n            \n            # Adding the current difference \n            # to the maximum difference \n            current_diff = current_diff + abs_diff \n            \n            # If maximum difference is less \n            # than the current maximum difference \n            # take current difference \n            if current_diff > max_diff: \n                max_diff = current_diff \n            \n    return max_diff\n",
        "test": "assert     max_Abs_Diff([]) == 0",
        "num_ids": 1489
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b and b!= 0:\n        return a, b\n    \n    # if a is the smallest integer then return all integers from 2 to n\n    # else return the integers that don't satisfy the condition and the smallest one\n    if n == 2 and a!= 0:\n        return a, b\n",
        "test": "assert     find_solution(2, 3, 6) == None",
        "num_ids": 3474
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    i = 0\n    while i < len(list1):\n        list1.pop(i)\n        i += 1\n    return list1\n    ",
        "test": "assert     remove_elements([], []) == []",
        "num_ids": 3018
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + (n-2) + (n-4)\n",
        "test": "assert     sum_series(1) == 1",
        "num_ids": 487
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 4/3*(l*s**2)\n",
        "test": "assert     isinstance(area_polygon(2.0, 1), float)",
        "num_ids": 746
    },
    {
        "number": 164,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            sum += i\n    return (sum == n)\n",
        "test": "assert     div_sum(3) == 0",
        "num_ids": 814
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len(str1.lower().replace(' ', '').replace('.', '').replace(',', '').replace(';', '').replace('-', '').replace('!', '').replace('?', '').replace(' ', '').replace('(', '').replace(')', '').replace(':', '').replace(' ', '').replace('&', '').replace('.', '').replace('\"', '').replace(\"'\", ''))\n",
        "test": "assert     count_char_position(\"a\") == 1",
        "num_ids": 2742
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for i in range(0, len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if A[i] == A[j] and A[i] & 1 == 0:\n                even_pair += 1\n    return even_pair\n    \ndef find_odd_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    odd_pair = 0\n    for i in range(0, len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if A[i] == A[j] and A[i] & 1!= 0:\n                odd_pair += 1\n    return odd_pair\n",
        "test": "assert     find_even_pair([]) == 0",
        "num_ids": 2669
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2: \n        return n\n    else: \n        return n % 2 + 1\n",
        "test": "assert     next_power_of_2(1) == 1",
        "num_ids": 744
    },
    {
        "number": 168,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # count the occurrence of a number\n    return a.count(x)\n",
        "test": "assert     frequency(['a','a','a','b'],['a','b','a','b'])==0",
        "num_ids": 819
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if m <= n:\n        for i in list1[m:n]:\n            sum = sum + i\n    return sum\n",
        "test": "assert     sum_range_list([1, 2, 3], 0, 3) == 6",
        "num_ids": 1082
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    result = math.sqrt(5)*a\n    return result\ndef square_pentagon(a):\n    '''\n    Write a function that calculates the square of a regular pentagon.\n    '''\n    result = math.sqrt(6)*a\n    return result\ndef rectangle_pentagon(a):\n    '''\n    Write a function that calculates the rectangle of a regular pentagon.\n    '''\n    result = math.sqrt(7)*a\n    return result\ndef parallelogram_pentagon(a):\n    '''\n    Write a function that calculates the parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(8)*a\n    return result\ndef rectangle_parallelogram(a):\n    '''\n    Write a function that calculates the rectangle parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(9)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(10)*a\n    return result\ndef circle_pentagon(a):\n    '''\n    Write a function that calculates the circle of a regular pentagon.\n    '''\n    result = math.sqrt(11)*a\n    return result\ndef circle_parallelogram(a):\n    '''\n    Write a function that calculates the circle parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(12)*a\n    return result\ndef circle_parallelogram(a):\n    '''\n    Write a function that calculates the circle parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(13)*a\n    return result\ndef rectangle_circle(a):\n    '''\n    Write a function that calculates the rectangle of a regular pentagon.\n    '''\n    result = math.sqrt(14)*a\n    return result\ndef rectangle_parallelogram(a):\n    '''\n    Write a function that calculates the rectangle parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(15)*a\n    return result\ndef parallelogram_circle(a):\n    '''\n    Write a function that calculates the parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(16)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(17)*a\n    return result\ndef circle_circle(a):\n    '''\n    Write a function that calculates the circle of a regular pentagon.\n    '''\n    result = math.sqrt(18)*a\n    return result\ndef circle_parallelogram(a):\n    '''\n    Write a function that calculates the circle parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(19)*a\n    return result\ndef parallelogram_circle(a):\n    '''\n    Write a function that calculates the parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(20)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(21)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(22)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(23)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(24)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(25)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(26)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(27)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(28)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(29)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(30)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(31)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(32)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(33)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(34)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(35)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(36)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(37)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(38)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(39)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(40)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(41)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(42)*",
        "test": "assert     perimeter_pentagon(12) == 16",
        "num_ids": 630
    },
    {
        "number": 172,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance(\"scoob\") == 0",
        "num_ids": 654
    },
    {
        "number": 222,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = list(test_tuple)\n    test_list.sort()\n    if len(test_tuple) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_type([1, 2, 3, 1]) == False",
        "num_ids": 3402
    },
    {
        "number": 223,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    if arr[n] == x:\n        return True\n    for i in range(n):\n        if arr[n] == arr[i] and i!= n - 1:\n            continue\n        elif arr[i] == arr[n]:\n            return False\n    return is_majority(arr, n - 1, x)\n",
        "test": "assert     is_majority([1,1,1], 2, 1) == True",
        "num_ids": 1619
    },
    {
        "number": 224,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(1,n):\n        if (n & i) == 1:\n            count += 1\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0, \"check the correctness\"",
        "num_ids": 795
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if(str==''):\n        return ''\n    if(str[0]=='.'):\n        str=str[1:]\n    if(str[-1]=='.'):\n        str=str[:-1]\n    return str\n",
        "test": "assert     odd_values_string(\"abc\") == \"abc\"",
        "num_ids": 773
    },
    {
        "number": 227,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c: \n        return a \n    elif b>a and b>c: \n        return b \n    else: \n        return c \n",
        "test": "assert     min_of_three(1,2,3) == 3, \"function should return 3\"",
        "num_ids": 896
    },
    {
        "number": 228,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & (l ^ (n >> n))) == 0) and (n & (r ^ (n >> n))) == (n & ((n >> n) ^ r ^ (n >> n)))\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(3,6,7) == False, \"Expected False as the output, got True\"",
        "num_ids": 1576
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > 0:\n        return re_arrange_array_helper(arr, n)\n    else:\n        return None\n",
        "test": "assert ",
        "num_ids": 2839
    },
    {
        "number": 230,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if(char==' '):\n        return(str1.replace(' ','*'))\n    else:\n        return(str1.replace('*',' '))\n",
        "test": "assert     replace_blank(\"abc\", 'd') == \"abc\"",
        "num_ids": 2679
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # initialize an empty list\n    res = []\n    \n    # sort the list\n    list1.sort(reverse=True)\n    \n    # loop through the list and add each item\n    for i in range(n):\n        res.append(list1[i])\n    return res\n    \ndef dfs(graph,n,visited,queue):\n    '''\n    Write a function that takes in a graph as a dictionary and an integer n and returns the degree of a node.\n    '''\n    \n    # if the node is not in the list then return 0\n    if n not in graph:\n        return 0\n    \n    # if the node is in the list then return the size of the list minus 1\n    elif n in visited:\n        return len(visited)-1\n    \n    # add it to the visited list and push it back into the queue\n    else:\n        visited.append(n)\n        queue.append(n)\n        for key, value in graph.items():\n            if n in key:\n                value.append(dfs(graph,n,visited,queue))\n    return len(queue)\n",
        "test": "assert ",
        "num_ids": 772
    },
    {
        "number": 233,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    x_a= (r/2)**2 - (h/2)**2\n    x_b= (r/2)**2 - (h/2)**2\n    x_c= (r/2)**2 - (h/2)**2\n    return abs(x_a) + abs(x_b) + abs(x_c)\n",
        "test": "assert     lateralsuface_cylinder(0,0) == 0.0, 'Error: The function lateralsuface_cylinder returns a wrong value.'",
        "num_ids": 3471
    },
    {
        "number": 234,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l * l * l\n",
        "test": "assert     volume_cube(0) == 0",
        "num_ids": 423
    },
    {
        "number": 235,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n &= (n & 1) << 1\n    n |= (n & 0x1) << 1\n    return n \n",
        "test": "assert     even_bit_set_number(2) == False",
        "num_ids": 867
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for element in test_list:\n        if element in d:\n            d[element] += 1\n        else:\n            d[element] = 1\n    return d\n",
        "test": "assert     check_occurences([(1,1), (1,2), (1,3), (1,4)]) == {(1, 1): 1, (1, 2): 1, (1, 3): 1, (1, 4): 1}",
        "num_ids": 4796
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    cnt = 0\n    for i in range(len(str)-1):\n        if str[i:i+2] == str[i+1:i+3]:\n            cnt += 1\n    return cnt\n",
        "test": "assert     number_of_substrings(\"ABA\") == 0",
        "num_ids": 2917
    },
    {
        "number": 239,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return sum(range(m, n)) \n",
        "test": "assert     get_total_number_of_sequences(1, 2) == 1, \"should be 1\"",
        "num_ids": 870
    },
    {
        "number": 240,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)==0 or len(list2)==0:\n        return list2\n    else:\n        for i in range(len(list2)):\n            list1[i] = list2[i]\n        return list1\n",
        "test": "assert     replace_list([1,2,3,4,5],[5,4,3,2,1]) == [5,4,3,2,1], \"test_replace_list_2 failed\"",
        "num_ids": 3301
    },
    {
        "number": 242,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return(len(str1))\n",
        "test": "assert     count_charac(\"\") == 0",
        "num_ids": 650
    },
    {
        "number": 244,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1,N):\n        if (N%i==0):\n            if(N==i**2):\n                return i\n    return N\n",
        "test": "assert     next_Perfect_Square(1) == 1",
        "num_ids": 1172
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def is_bitonic(arr, l, m):\n        \"\"\"\n        Brute Force algorithm for finding the bitonic subsequence of arr\n        \"\"\"\n        if l == m:\n            return True\n        elif arr[l] < arr[m]:\n            return is_bitonic(arr, l + 1, m) or is_bitonic(arr, l + 1, m - 1)\n        else:\n            return is_bitonic(arr, l, m - 1)\n    return max(arr) - min(arr) if is_bitonic(arr, 0, len(arr) - 1) else -1\n",
        "test": "assert     max_sum([1, 1, 1, 1, 2, 1, 1]) == 1",
        "num_ids": 1443
    },
    {
        "number": 246,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sqr = 0\n    for x in range(1,number):\n        if number % x == 0:\n            sqr += 1\n    return sqr\n",
        "test": "assert     (babylonian_squareroot(0) == 0)",
        "num_ids": 764
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1: \n        return len(str)\n    lps = [1]*len(str)\n    lps[0], lps[1] = 0, 0\n    for i in range(2, len(str)): \n        lps[i] = max(lps[i-1], lps[i-2] + 1) \n    return max(lps)\n",
        "test": "assert     lps(\"ADOBECODEBANC\"), \"Invalid string\"",
        "num_ids": 1529
    },
    {
        "number": 248,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)",
        "test": "assert     harmonic_sum(0) == 0",
        "num_ids": 531
    },
    {
        "number": 249,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect = []\n    array_list = list(set(array_nums1).intersection(set(array_nums2)))\n    for i in array_list:\n        if array_nums1.count(i)>array_nums2.count(i):\n            intersect.append(i)\n    return intersect\n",
        "test": "assert     intersection_array([3, 4], [1, 2]) == []",
        "num_ids": 3374
    },
    {
        "number": 250,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n",
        "test": "assert     count_X((1, 2, 3), 3) == 1",
        "num_ids": 667
    },
    {
        "number": 251,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i=0\n    j=0\n    while i<len(list):\n        while j<len(list):\n            if list[i]==element:\n                list.insert(i,element)\n                break\n            else:\n                j=j+1\n        i=i+1\n    return list\n",
        "test": "assert     insert_element([1, 2, 3], 4) == [1, 2, 3]",
        "num_ids": 982
    },
    {
        "number": 252,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return (cmath.polar(numbers))\n",
        "test": "assert     convert(1+2j)",
        "num_ids": 3811
    },
    {
        "number": 253,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n",
        "test": "assert     count_integer([]) == 0, \"count_integer should return zero if the list is empty!\"",
        "num_ids": 628
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, n + 1):\n        for j in combinations_with_replacement(l, i):\n            result.append(j)\n    return result\n",
        "test": "assert     (combinations_colors([1, 2, 3], 0) == [])",
        "num_ids": 1295
    },
    {
        "number": 256,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Your code here\n    # use a dictionary to keep track of the prime numbers\n    prime_dic = {}\n    for i in range(2, n+1):\n        # check if the value is prime or not\n        if i in prime_dic:\n            continue\n        # if the value is not prime, check the next value in the list\n        else:\n            # for each value in the list, check if the next value is prime or not\n            # if it is, add the number to the dictionary, otherwise, ignore the value\n            if i % 2 == 0:\n                prime_dic[i] = 0\n            else:\n                prime_dic[i] = 1\n                \n    # output the number of prime numbers\n    # print the number of prime numbers\n    return len(prime_dic)\n",
        "test": "assert         count_Primes_nums(1) == 0",
        "num_ids": 1145
    },
    {
        "number": 257,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a=int(a)\n    b=int(b)\n    return (b,a)\n",
        "test": "assert     swap_numbers(4,4) == (4,4)",
        "num_ids": 1509
    },
    {
        "number": 259,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    return max(tup1, tup2)\n",
        "test": "assert         maximize_elements(('apple', 'orange'), ('apples', 'oranges')) == ('apples', 'oranges')",
        "num_ids": 1388
    },
    {
        "number": 260,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        for i in range(3,n,1):\n            if (n%i == 0):\n                return 0\n    return n\n",
        "test": "assert         newman_prime(1) == 1",
        "num_ids": 1103
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def divide_elements(test_tup):\n        # First, get the number of elements\n        test_num_elements = len(test_tup)\n        # Get the list of elements to divide by\n        list_of_elements = []\n        for i in range(0, test_num_elements):\n            list_of_elements.append(test_tup[i][0])\n        # Make the division\n        result = list_of_elements[0] / list_of_elements[1]\n        return result\n    # Return the result of the division\n    return divide_elements\n",
        "test": "assert     division_elements(tuple2, tuple1) == ('0', '1')",
        "num_ids": 1444
    },
    {
        "number": 262,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # remove duplicates\n    list1 = [x for x in list1 if x not in list1[:len(list1)//2]]\n    return list1, list1[:len(list1)//2]\n",
        "test": "assert     split_two_parts([], 0) == ([], [])",
        "num_ids": 1089
    },
    {
        "number": 264,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 2:\n        return h_age\n    else:\n        return (h_age - 2) * 7\n",
        "test": "assert dog_age(1)",
        "num_ids": 2586
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "test": "assert     list_split([], 0) == []",
        "num_ids": 3961
    },
    {
        "number": 266,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l_surface = (l**3) - l**2\n    return l_surface\n",
        "test": "assert     lateralsurface_cube(0)==0",
        "num_ids": 730
    },
    {
        "number": 267,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Your code here\n    return n ** 2\n    \n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 547
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    import math\n    def is_prime(n):\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    star_num = 1\n    for i in range(n-1):\n        star_num *= 2\n        if is_prime(star_num):\n            break\n    return star_num\n",
        "test": "assert     find_star_num(3) == 2",
        "num_ids": 4660
    },
    {
        "number": 269,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert         ascii_value(\"A\") == ord('A')",
        "num_ids": 671
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = 0\n    even_sum = 0\n    while even_index < len(arr):\n        if arr[even_index] % 2 == 0:\n            even_sum += arr[even_index]\n        else:\n            even_sum += even_sum\n            even_index += 1\n    return even_sum\n",
        "test": "assert     sum_even_and_even_index([]) == 0",
        "num_ids": 995
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n < 2: \n        return n * even_Power_Sum(n-1) \n    if n % 2 == 0: \n        return even_Power_Sum(n-1) + even_Power_Sum(n-2) \n    else: \n        return even_Power_Sum(n-1) + even_Power_Sum(n-2) + even_Power_Sum(n-3) \n",
        "test": "assert     even_Power_Sum(0) == 0",
        "num_ids": 705
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # TODO: Write your code here\n    rear = []\n    for i in test_list:\n        rear.append(i[0])\n    return rear\n    \n    \ntest_list = [(1, 2), (4, 6), (3, 4), (2, 8), (5, 3), (1, 2)]\nprint(rear_extract(test_list))",
        "test": "assert     rear_extract([('a', 'b'), ('d', 'c')]) == ['a', 'd']",
        "num_ids": 1174
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # write your code here\n    a=tuple(test_tup1)\n    b=tuple(test_tup2)\n    result=[]\n    for i in range(0, len(a)):\n        result.append(a[i]-b[i])\n    return result\n",
        "test": "assert     substract_elements((1,2,3,4), (5,6,7,8)) == (1,0,0,0)",
        "num_ids": 1245
    },
    {
        "number": 274,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return (even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2))\n    else:\n        return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n",
        "test": "assert     even_binomial_Coeff_Sum( 0 ) == 0",
        "num_ids": 3026
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h\n",
        "test": "assert         volume_cylinder(0, 0) == 0",
        "num_ids": 948
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.items() if v >= n}\n",
        "test": "assert     dict_filter({'A':1, 'B':2, 'C':3, 'D':4, 'E':5}, 1) == {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}",
        "num_ids": 982
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count\n",
        "test": "assert         count_first_elements(()) == 0",
        "num_ids": 951
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec = n+1\n    while dec%2!= 0:\n        dec = dec/2\n    return dec\n",
        "test": "assert     is_num_decagonal(1), \"Incorrect n!\"",
        "num_ids": 2714
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1 # position of the element in the array\n    for i,v in enumerate(dlist):\n        if v == item:\n            pos = i\n            break # finds the index of the element in the array\n    return (pos!= -1, pos) # returns the boolean and the index position of the element if the element was found\n",
        "test": "assert     sequential_search([5,6,7,8,9], 5), \"Element 5 is not found.\"",
        "num_ids": 2870
    },
    {
        "number": 281,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    uniq = set(test_list)\n    return len(uniq) == len(set(test_list))\n    #return len(uniq) == len(set(test_list))\n",
        "test": "assert     all_unique([1,2,3,4,5]), \"List contains duplicate value\"",
        "num_ids": 3329
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return nums1 - nums2\n",
        "test": "assert ",
        "num_ids": 1212
    },
    {
        "number": 283,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if not isinstance(n, int): \n        return False\n    if n < 10 or n > 36: \n        return False\n    for i in str(n):\n        if not i.isdigit(): \n            return False\n        if not (int(i) >= 0 and int(i) <= 9): \n            return False\n    return True\n",
        "test": "assert     validate(5) == False",
        "num_ids": 830
    },
    {
        "number": 284,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #check for empty lists\n    if(len(list) == 0):\n        return True\n    for item in list:\n        if(item == element):\n            return True\n    return False\n",
        "test": "assert         check_element(['1','2','3'],4) == False",
        "num_ids": 772
    },
    {
        "number": 285,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return not re.match(r'(a){1,3}b', text)\n",
        "test": "assert     \"aabbccccbaaaab\" == \"aabbccccbaaaab\"",
        "num_ids": 1110
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # write your code here\n    if n < k:\n        return 0\n    if n == k:\n        return a[n]\n    \n    a[n] = max(a[n], a[n - k] + a[n])\n    \n    return max_sub_array_sum_repeated(a, n + 1, k)\n    \n    \ndef sum_array(a, n):\n    '''\n    Write a function that finds the sum of all the elements in the array.\n    '''\n    # write your code here\n    if n == 0:\n        return 0\n    return a[0] + sum_array(a, n - 1)\n        \ndef max_sub_array_sum_repeated_algorithm(a, n):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # write your code here\n    if n < 1:\n        return 0\n    if n == 1:\n        return a[n]\n    \n    # first we need to find the sum of the left subarray\n    sum_left = a[0]\n    for i in range(1, n):\n        sum_left += a[i]\n    # print(sum_left)\n    # print(sum_left)\n    \n    # now we need to find the sum of the right subarray\n    sum_right = 0\n    for i in range(n - 1, -1, -1):\n        sum_right += a[i]\n    # print(sum_right)\n    # print(sum_right)\n    \n    # now we need to find the largest sum of the sub arrays\n    a[0] = sum_left\n    # print(a)\n    \n    return max(a[0], max_sub_array_sum_repeated_algorithm(a, n - 1), max_sub_array_sum_repeated_algorithm(a, n - 2))\n    ",
        "test": "assert     max_sub_array_sum_repeated([], 0, 2) == 0, \"incorrect\"",
        "num_ids": 1093
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += (i * i)\n    return result\n",
        "test": "assert     square_Sum(1) == 0",
        "num_ids": 478
    },
    {
        "number": 290,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    length = 0\n    if len(list1)!= 0:\n        length = len(list1[0])\n    else:\n        length = 0\n    for l in list1:\n        if len(l) > length:\n            length = len(l)\n    for i in list1:\n        if len(i) == length:\n            max_length = length\n    return max_length\n",
        "test": "assert     max_length([[]]) == 0",
        "num_ids": 1076
    },
    {
        "number": 291,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    else: \n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)\n",
        "test": "assert     count_no_of_ways(1, 1) == 1, 'the function should return 1'",
        "num_ids": 3634
    },
    {
        "number": 292,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return round(n/m)\n",
        "test": "assert     find(5, 10) == 0",
        "num_ids": 2496
    },
    {
        "number": 293,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #Define the formula for the side of a right angled triangle.\n    return h / 2\n",
        "test": "assert     otherside_rightangle(1,0) == 0.0",
        "num_ids": 1541
    },
    {
        "number": 294,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    return max(listval)\n    ",
        "test": "assert     max_val([1, 2, 3]) == 3",
        "num_ids": 603
    },
    {
        "number": 295,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    elif number % 2 == 0:\n        return number\n    else:\n        return number // 2 + sum_div(number - 2)\n",
        "test": "assert     sum_div(0) == 0, \"sum_div failed\"",
        "num_ids": 888
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(0, n-1):\n        if arr[i] > arr[i+1]:\n            inv_count+=1\n    return inv_count\n",
        "test": "assert     get_Inv_Count([1,2,3,5,4,6,7,8,9,5,4,7,8]) == 3, 'Incorrect count'",
        "num_ids": 1041
    },
    {
        "number": 297,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) is list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 3119
    },
    {
        "number": 299,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for tup in stdata:\n        tup_agg = tup[1]\n        if(tup_agg > max_agg):\n            max_agg = tup_agg\n    return max_agg\n",
        "test": "assert     max_aggregate([(1, 2), (2, 1), (2, 3), (3, 2)]) == 3",
        "num_ids": 1056
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = int(n)\n    #base case\n    if n == 0:\n        return 0\n    # iterate\n    else:\n        count = 0\n        # iterate\n        for i in range(n):\n            # take first n bits\n            first = bin(i)[2:]\n            # iterate\n            for j in range(i, n, 1):\n                # take last n bits\n                last = bin(j)[2:]\n                # iterate\n                if first == last:\n                    count += 1\n        # return count\n        return count\n",
        "test": "assert     count_binary_seq(0) == 0, 'Error'",
        "num_ids": 894
    },
    {
        "number": 301,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if type(d[key]) == dict:\n            depth += dict_depth(d[key])\n        else:\n            depth += 1\n    return depth\n",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 970
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                break\n            #If it is, then it is the element we need.\n            elif i+1 == len(ranges):\n                return arr[i]\n            #Else it must be the first element.\n            else:\n                return arr[i+1]\n    #If not found, return None.\n    return None\n    \ndef check_Element(arr,ranges,rotations,index) : \n    '''\n    Write a python function to check if the element in given range is in given array.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                return arr[i]\n            #Else it must be the first element.\n            else:\n                return arr[i+1]\n    #If not found, return None.\n    return None\n    \ndef find_max_index(arr,ranges) :\n    '''\n    Write a python function to find the maximum index in given array.\n    '''\n    return (len(ranges) - 1) * (len(ranges) - 1) // 2\n    \ndef remove_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to remove an element from the given array, after number of rotations.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                break\n            #If it is, then it is the element we need.\n            elif i+1 == len(ranges):\n                arr[i] = arr[i]\n                return\n            #Else it must be the first element.\n            else:\n                arr[i+1] = arr[i]\n                return\n    #If not found, return None.\n    return None\n    \ndef rotate_Array(arr,rotations) :\n    '''\n    Write a python function to rotate the given array.\n    '''\n    return arr[rotations] + arr[0:rotations] + arr[rotations + 1:]\n    \ndef get_Rotations(ranges) :\n    '''\n    Write a python function to get the number of rotations from given ranges.\n    '''\n    return len(ranges)\n    \ndef check_Overlap(arr,ranges) :\n    '''\n    Write a python function to check if the overlap of the given array and ranges is true.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= arr[i] <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                return True\n            #Else it must be the first element.\n            else:\n                return False\n    #If not found, return False.\n    return False\n    \ndef remove_Overlap(arr,ranges) :\n    '''\n    Write a python function to remove the overlap of the given array and ranges.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= arr[i] <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                arr[i] = arr[i]\n                return\n            #Else it must be the first element.\n            else:\n                arr[i+1] = arr[i]\n                return\n    #If not found, return None.\n    return None\n    \ndef count_Elements(arr) :\n    '''\n    Write a python function to count the number of elements in the given array.\n    '''\n    return arr.count(1)\n    \ndef remove_Elements(arr,ranges) :\n    '''\n    Write a python function to remove the given elements from the given array.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= arr[i] <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                arr[i] = arr[i]\n                return\n            #Else it must be the first element.\n            else:\n                arr[i+1] = arr[i]\n                return\n    #If not found, return None.\n    return None\n    \ndef get_Length(arr) :\n    '''\n    Write a python function to get the length of the given array.\n    '''\n    return len(arr)\n    \ndef calculate_Max_Element(arr,ranges) :\n    '''\n    Write a python function to find the maximum element in the given array.\n    '''\n    return max(arr)\n    \ndef check_Max_Element(arr,ranges) :\n    '''\n    Write a python function to check if the maximum element is in the given array.\n    '''\n    return arr.count(max(arr)) == 1\n    \ndef select_Max(arr,ranges) :\n    '''\n    Write a python function to select the maximum element from the given array.\n    '''\n    return max(arr)\n    \ndef get_Max_Index(arr,ranges) :\n    '''\n    Write a python function to get the maximum element index.\n    '''\n    return find_Max_Index(arr,ranges)\n    \ndef find_Min(arr,ranges) :\n    '''\n    Write a python function to find the minimum element in the given array.\n    '''\n    return min(arr)\n    \ndef check_Min(arr,ranges) :\n    '''\n    Write a python function to check if the minimum element is in the given array.\n    '''\n    return arr.count(min(arr)) == 1\n    \ndef remove_Min(arr,ranges) :\n    '''\n    Write a python function to remove the minimum element from the given array.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= arr[i] <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                arr[i] = arr[i]\n                return\n            #Else it must be the first element.\n            else:\n                arr[i+1] = arr[i]\n                return\n    #If not found, return None.\n    return None\n    \ndef remove_Min(arr,ranges) :\n    '''\n    Write a python function to remove the minimum element from the given array.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= arr[i] <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                arr[i] = arr[i]\n                return\n            #Else it must be the first element.\n            else:\n                arr[i+1] = arr[i]\n                return\n    #If not found, return None.\n    return None\n    \ndef find_Ranges(arr,ranges) :\n    '''\n    Write a python function to find the ranges of the given array.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= arr[i] <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                return ranges\n            #Else it must be the first element.\n            els",
        "test": "assert         find_Element([-2,0,3,1,2], [(0,1),(1,2),(2,3)],3,1) == 0",
        "num_ids": 1583
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0] == 'p':\n            result.append(word)\n    return result\n",
        "test": "assert     start_withp([]) == [], 'empty list'",
        "num_ids": 867
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(n == 0 or index == 0):\n        return 0\n    if(a[index] > a[index-1]):\n        return max_sum_increasing_subseq(a, n-1, index-1, k)\n    return a[index] + max_sum_increasing_subseq(a, n-1, index, k-1)\n",
        "test": "assert     max_sum_increasing_subseq([0], 1, 0, 0) == 0",
        "num_ids": 1360
    },
    {
        "number": 307,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)<=n:\n        return tuplex\n    else:\n        return get_colon_tuplex(tuplex[:n],m,tuplex[n:])\n",
        "test": "assert     colon_tuplex((1,2,3),3,4) == (1,2,3), \"Error in colon_tuplex\"",
        "num_ids": 1243
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    i = 0\n    for x in range(0, len(nums1)):\n        for y in range(0, len(nums2)):\n            if (nums1[x] * nums2[y]) > (N-x-y):\n                i = x\n                result.append((i, (nums1[x] * nums2[y]) - (N-x-y)))\n                break\n    return result\n",
        "test": "assert     large_product([], [], 5) == []",
        "num_ids": 1291
    },
    {
        "number": 309,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    ",
        "test": "assert     maximum(2,3) == 3, \"maximum test\"",
        "num_ids": 516
    },
    {
        "number": 310,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple('') == ()",
        "num_ids": 2929
    },
    {
        "number": 311,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < n & 0xffff:\n        n = n | 0xffff\n    elif n & 0xffff == 0xffff:\n        n = n | 0xffff\n    return n\n",
        "test": "assert     set_left_most_unset_bit(0) == 0",
        "num_ids": 2597
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    m = 2 * math.pi * r * h\n    return m\n",
        "test": "assert     volume_cone(0,0) == 0",
        "num_ids": 615
    },
    {
        "number": 388,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0\n    for i in range(1,n+1):\n        if i < 1 or n % i!= 0:\n            break\n        else:\n            max_power += 1\n    if max_power == 0:\n        return n\n    else:\n        return n%(max_power+1)\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 2585
    },
    {
        "number": 389,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = 1\n    if n == 1 or n == 0:\n        return n\n    else:\n        while a <= n:\n            if n % a == 0:\n                return n // a\n            else:\n                a += 1\n        return None\n",
        "test": "assert     find_lucas(1) == 1",
        "num_ids": 880
    },
    {
        "number": 390,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if not string:\n        return list_\n    for element in list_:\n        list_[list_.index(element)] = str(string).replace('{','').replace('}','')\n    return list_\n",
        "test": "assert     add_string([], \"a\") == []",
        "num_ids": 3046
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i, item in enumerate(l1):\n        d[i] = item\n    for i, item in enumerate(l2):\n        d[i] = item\n    for i, item in enumerate(l3):\n        d[i] = item\n    return d\n",
        "test": "assert     convert_list_dictionary([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15])!= {'a': {'b': [6, 7, 8, 9, 10], 'c': {'d': [11, 12, 13, 14, 15]}}, 'd': {'e': [], 'f': [], 'g': []}}",
        "num_ids": 2302
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    res = 0\n    for i in range(1, n):\n        res = max(res, (f(i) + f(i/2)) + f(i/3))\n    return res\n",
        "test": "assert     get_max_sum (0) == 0",
        "num_ids": 988
    },
    {
        "number": 393,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for number in input_list:\n        if len(str(number)) > max_len:\n            max_len = len(str(number))\n    return max_len\n",
        "test": "assert         max_length_list([]) == 0",
        "num_ids": 870
    },
    {
        "number": 394,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    num_list = []\n    for i in test_tup:\n        if i not in num_list:\n            num_list.append(i)\n    if len(num_list) == len(test_tup):\n        return True\n    return False\n",
        "test": "assert     check_distinct((2,2,2,2,2,2)) == False",
        "num_ids": 867
    },
    {
        "number": 395,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Your code here\n    count=0\n    for i in str1:\n        if i not in str1[count:]:\n            count+=1\n    return str1[count]",
        "test": "assert     first_non_repeating_character('a') == 'a', 'incorrect first non-repeating character'",
        "num_ids": 1030
    },
    {
        "number": 396,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\n",
        "test": "assert check_char('a')",
        "num_ids": 537
    },
    {
        "number": 397,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Take the median of three numbers\n    m1 = (a+b+c)//3\n    m2 = (a+b)//2\n    m3 = (a+c)//2\n    if (m1 == m2):\n        return m1\n    if (m2 == m3):\n        return m2\n    else:\n        return m3\n",
        "test": "assert     median_numbers(1,1,1) == 1",
        "num_ids": 1357
    },
    {
        "number": 398,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 635
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = 0\n    y = 0\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            x += 1\n        elif test_tup1[i] < test_tup2[i]:\n            y += 1\n        else:\n            x = x + y\n    return x\n    # Write your code here.\n    pass\n",
        "test": "assert     bitwise_xor((True, True), (True, False)) == True, \"test 1 failed\"",
        "num_ids": 2424
    },
    {
        "number": 400,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_numbers = dict()\n    for num in test_list:\n        unique_numbers[num] = test_list.count(num)\n    return len(unique_numbers)\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 1091
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return test_tup1 + test_tup2\n",
        "test": "assert     add_nested_tuples((), (1,2,3,4)) == (1,2,3,4)",
        "num_ids": 6915
    },
    {
        "number": 404,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    while True:\n        try:\n            minimum = a if a < b else b\n            print(minimum)\n        except Exception:\n            print(\"No values\")\n            print(\"\\n Try again\")\n        else:\n            break\n    return minimum\n",
        "test": "assert     minimum(1,2) == 1",
        "num_ids": 2655
    },
    {
        "number": 405,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return element\n    return False\n",
        "test": "assert not check_tuplex(('a','b','c'),('d','e','f'))",
        "num_ids": 598
    },
    {
        "number": 406,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2) == 1: \n        return True \n    else: \n        return False \n",
        "test": "assert     find_Parity(0) == 0",
        "num_ids": 536
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    result = \"\"\n    while n!= 0:\n        result += str(n % 10)\n        n = n // 10\n    return int(result)\n    \ndef is_palindrome(n):\n    '''\n    Check if the number is palindrome.\n    '''\n    if n == rearrange_bigger(n):\n        return True\n    else:\n        return False\n",
        "test": "assert     rearrange_bigger(123) == 321",
        "num_ids": 896
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    size_first_array = len(nums1)\n    size_second_array = len(nums2)\n    if k < 0: return 'Error : k must be > 0'\n    if size_first_array < size_second_array:\n        return 'Error : first array should be greater than second array'\n    else:\n        if k == 0:\n            return sorted(zip(nums1,nums2))\n        else:\n            pairs = []\n            heapq.heapify(pairs)\n            for i in range(size_first_array):\n                first = nums1[i]\n                second = nums2[i]\n                index = i\n                while index < size_first_array and nums1[index] == first and nums2[index] == second:\n                    index += 1\n                if index == size_first_array:\n                    break\n                if index < size_first_array:\n                    heapq.heappush(pairs, (nums1[index], first, second))\n                else:\n                    heapq.heappush(pairs, (first, second, nums2[index]))\n            res = []\n            for i in range(k):\n                res.append((heapq.heappop(pairs)[2], heapq.heappop(pairs)[1], heapq.heappop(pairs)[0]))\n            return res\n",
        "test": "assert     k_smallest_pairs([], [], 0) == []",
        "num_ids": 2325
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #Calculate the min product\n    min_product = 9999999\n    min_product = 0\n    \n    #loop through each pair\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            #calculate the min product\n            min_product = min(list1[i][0]*list1[j][0],min_product)\n            \n            #Check if min product is less than or equal to min product\n            if(min_product <= min_product):\n                min_product = list1[i][0]*list1[j][0]\n            \n    return min_product\n",
        "test": "assert     min_product_tuple([(1,2),(3,4),(5,6),(7,8)]), (7, 8)",
        "num_ids": 1553
    },
    {
        "number": 410,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # step 1: find the minimum element in the list.\n    min = listval[0]\n    # loop over the list elements\n    for i in listval:\n        # if the value of the element is smaller than the minimum value\n        if i < min:\n            min = i\n    return min\n",
        "test": "assert     min_val([1,2,3,4]) == 1, \"Failed to find the minimum value\"",
        "num_ids": 639
    },
    {
        "number": 411,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n",
        "test": "assert     snake_to_camel('Four'), 'Four'",
        "num_ids": 1120
    },
    {
        "number": 412,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 835
    },
    {
        "number": 413,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n",
        "test": "assert     extract_nth_element([(1, 2, 3), (4, 5, 6)], 1) == (4, 5, 6),     'passed'",
        "num_ids": 1088
    },
    {
        "number": 414,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([0,2,3,4,5,6,7,8,9,0], [0,3,4,7,10,0,5,6,9,0])",
        "num_ids": 1313
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_n = max(arr)\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[j] == max_n and i!= j:\n                return max(arr[j], arr[i])\n",
        "test": "assert     max_Product([2,3,4,6,1,2,3,4,5,6])==max_Product([2,3,4,6,1,2,3,4,5,6]), \"Expected 2, but got {}\".format(max_Product([2,3,4,6,1,2,3,4,5,6]))",
        "num_ids": 922
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # result = []\n    # for i in range(len(Input)):\n    #     if Input[i] not in result:\n    #         result.append(Input[i])\n    \n    # return result\n    return list(set(Input))\n",
        "test": "assert     group_tuples([]) == [], \"Empty list is not correct\"",
        "num_ids": 1046
    },
    {
        "number": 418,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst)\n",
        "test": "assert     Find_Max([1, 2, 4, 9, 9, 9, 9, 9]) == 9",
        "num_ids": 880
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for number in list1:\n        sum += number\n    print(round(sum, 2))\n",
        "test": "assert ",
        "num_ids": 3248
    },
    {
        "number": 420,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n ** 3\n",
        "test": "assert     cube_Sum(0) == 0",
        "num_ids": 589
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Declare a tuple to be returned\n    concatenated_tuple = ()\n    for i in test_tup:\n        concatenated_tuple += i\n    return concatenated_tuple\n",
        "test": "assert     concatenate_tuple([(1, 2, 3)]) == (1, 2, 3), \"Expected '(' to be 1, 2, 3, got: %s\" % concatenate_tuple([(1, 2, 3)])",
        "num_ids": 934
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum/n\n",
        "test": "assert     find_Average_Of_Cube(1) == 0.0",
        "num_ids": 899
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = tuple(map(lambda x: x[-1], test_tuple))\n    return new_tuple\n",
        "test": "assert     extract_rear([]) == ()",
        "num_ids": 2938
    },
    {
        "number": 425,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list1.sort() # insert into the end of the list \n    if x not in list1:\n        return 0\n    else:\n        for i in range(0,len(list1)):\n            if list1[i] == x:\n                return 1 + count_element_in_list(list1[i+1:], x)\n    \ndef check_if_solution_exists(lst):\n    '''\n    Write a function to check if a list has solution or not.\n    '''\n    for i in lst:\n        if i!= solution:\n            return False\n    return True\n",
        "test": "assert     count_element_in_list(['a', 'b', 'c'], 'e') == 0, \"Expected 0\"",
        "num_ids": 942
    },
    {
        "number": 426,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # result = []\n    # for num in nums:\n    #     if num % 2 == 1:\n    #         result.append(num)\n    # return result\n    return [num for num in nums if num % 2 == 1]\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 798
    },
    {
        "number": 427,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_date = dt[0:10] + dt[11:19] + dt[20:26]\n    return new_date\n",
        "test": "assert     change_date_format(\"2013-04-12\")==\"2013-04-12\"",
        "num_ids": 1448
    },
    {
        "number": 428,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for i in range(len(my_list)):\n        for j in range(i, len(my_list)):\n            for k in range(j, len(my_list)):\n                if my_list[k] < my_list[j] and my_list[k] < my_list[i]:\n                    my_list[k], my_list[j] = my_list[j], my_list[k]\n    return my_list\n",
        "test": "assert     shell_sort([]) == []",
        "num_ids": 1666
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # If there are only tuples, write nothing\n    if len(test_tup1) == 1:\n        return test_tup1[0]\n    # Otherwise, iterate through the tuple\n    elif len(test_tup1) == 2:\n        return test_tup1[0] * test_tup1[1]\n    else:\n        return None\n",
        "test": "assert     and_tuples((1, 2), (1, 2, 3)) == (1, 2, 3)",
        "num_ids": 947
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 1\n    while (x < a + 1):\n        y = 1\n        while (y < b + 1):\n            z = a * x * y + c\n            if (z == x):\n                break\n            y = y + 1\n        if (y == b + 1):\n            return x\n        x = x + 1\n",
        "test": "assert     parabola_directrix(2, 4, 3) == True",
        "num_ids": 3052
    },
    {
        "number": 431,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #Common elements \n    l1 = list(list1)\n    l2 = list(list2)\n    c = len(l1)\n    for i in l1:\n        if i in l2:\n            c = c - 1\n    return c >= 0\n",
        "test": "assert     common_element([1,2,3,4], [1,4,6,3]) == True, 'common_element'",
        "num_ids": 1488
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2+height/2\n",
        "test": "assert     median_trapezium(1,2,3) == 3.0, \"incorrect result\"",
        "num_ids": 1209
    },
    {
        "number": 433,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) > number:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_greater([1], 1) == False, 'check_greater function is not correct'",
        "num_ids": 927
    },
    {
        "number": 434,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('[aA]', text)\n",
        "test": "assert     text_match_one('aaabaaabbb')",
        "num_ids": 2567
    },
    {
        "number": 435,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "test": "assert     last_Digit(5) == 5",
        "num_ids": 452
    },
    {
        "number": 436,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #your code here\n    #raise NotImplementedError\n    return list1\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 824
    },
    {
        "number": 437,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('o','p')\n",
        "test": "assert     remove_odd(\"\") == \"\", \"Empty string\"",
        "num_ids": 892
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for element in test_list:\n        if isinstance(element, tuple):\n            if len(element) == 2:\n                bidirectional_count += 1\n            else:\n                continue\n        else:\n            continue\n    return bidirectional_count\n",
        "test": "assert     count_bidirectional([]) == 0",
        "num_ids": 1458
    },
    {
        "number": 439,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "test": "assert     multiple_to_single([]) == 0",
        "num_ids": 771
    },
    {
        "number": 440,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find adverb\n    return re.search(\"[a-z]+\", text).span()\n",
        "test": "assert     find_adverb_position('The quick brown fox jumps over the lazy dog')!= ('The quick brown fox',None)",
        "num_ids": 7586
    },
    {
        "number": 441,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # TODO: Finish this function\n    return 0\n",
        "test": "assert     surfacearea_cube(0) == 0",
        "num_ids": 694
    },
    {
        "number": 442,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return nums.count(1)\n",
        "test": "assert         positive_count([1,2,3,4,5]) == 1.0, \"Test failed\"",
        "num_ids": 1037
    },
    {
        "number": 443,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list=[]\n    for i in list1:\n        if i<0:\n            neg_list.append(i)\n    return max(neg_list)\ndef calculate_ratio(list1): \n    '''\n    Write a python function to calculate the ratio of the given list.\n    '''\n    ratio=[]\n    for i in list1:\n        ratio.append(i*1.0/len(list1))\n    return ratio",
        "test": "assert     largest_neg([-2, 2, -1]) == -1",
        "num_ids": 835
    },
    {
        "number": 444,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    output_tuple = []\n    for item in test_list:\n        if len(item) < K:\n            item = item + (0,)\n        output_tuple.append(item)\n    return output_tuple\n",
        "test": "assert     trim_tuple([], 1) == []",
        "num_ids": 1046
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = (1,2,3,4,5,6,7,8,9,10)\n    test_tup2 = (11,12,13,14,15,16,17,18,19,20)\n    index_tup = tuple(tup[i] * tup[i] for i in range(len(tup)))\n    return index_tup\n",
        "test": "assert     index_multiplication((1,2,3,4,5), (10,20,30,40,50,100)) == (50, 20, 10, 5, 4, 100)",
        "num_ids": 1102
    },
    {
        "number": 446,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count=0\n    for i in lst:\n        count+=tup.count(i)\n    return count \n    \ndef BagOfWords(tup):\n    '''\n    Write a python function to count the frequency of words in a tuple.\n    '''\n    count=0\n    for i in tup:\n        count+=tup.count(i)\n    return count\n",
        "test": "assert     count_Occurrence([1, 2, 3, 4], [3, 2, 5]) == 2",
        "num_ids": 3175
    },
    {
        "number": 447,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes=[]\n    for i in range(len(nums)):\n        cubes.append(nums[i]*nums[i]*nums[i])\n    return cubes\n",
        "test": "assert     cube_nums([1, 2, 3, 4, 5, 6]) == [1, 8, 27, 64, 125, 216]",
        "num_ids": 835
    },
    {
        "number": 448,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n + cal_sum(n - 1)\n",
        "test": "assert     cal_sum(0) == 0",
        "num_ids": 638
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for x in l:\n        if len(x) == len(str):\n            return x\n",
        "test": "assert     extract_string('asd', ['asd']) == 'asd', \"The extracted string should be 'asd'\"",
        "num_ids": 981
    },
    {
        "number": 451,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'^\\s+|\\s+$', '', text1)\n",
        "test": "assert     remove_whitespaces(\"abcdef\") == \"abcdef\"",
        "num_ids": 2562
    },
    {
        "number": 452,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 110,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n    \ndef assign_sale_to_customer(customer,sales):\n    '''\n    Write a function that assigns sale number to a customer.\n    '''\n    index = customer-1\n    while sales[index] < sales[index+1]:\n        sales[index], sales[index+1] = sales[index+1], sales[index]\n        index +=1\n",
        "test": "assert     loss_amount(200,500)==0",
        "num_ids": 453
    },
    {
        "number": 453,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 1 :\n        return 0\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    elif n%2 == 0 :\n        return sumofFactors(n//2) + (n//2)\n    else :\n        return n + sumofFactors(n//2)\ndef prob(n,k):\n    '''\n    Write a python function to find the probability of k\n    '''\n    if n == 1 or k == 1:\n        return 1\n    elif n == 2 :\n        return math.log2(1/k)\n    elif n % 2 == 0:\n        return prob(n//2,k)\n    else :\n        return prob(n,k*k)\ndef isprime(n):\n    '''\n    Determine if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_x(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_y(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_z(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_z_y(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_z_x(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_y_x(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_y_z(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_x_y(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_z_y_x(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_z_x_y(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_x_y_z(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_y_x_z(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_x_y_z_y(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return Tru",
        "test": "assert     sumofFactors(1) == 1, \"The sum of factors is 1\"",
        "num_ids": 890
    },
    {
        "number": 454,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = 'Z'\n    if (text == wordz):\n        return 1\n    else:\n        return 0\n",
        "test": "assert     'the' == 'the'",
        "num_ids": 920
    },
    {
        "number": 455,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 >= 1 and monthnum2 <= 12):\n        return True\n    else:\n        return False\n",
        "test": "assert not    check_monthnumb_number(20)",
        "num_ids": 3085
    },
    {
        "number": 456,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return stringlist\n    else:\n        temp = stringlist[0]\n        for i in range(1, len(stringlist)):\n            temp = stringlist[i] + temp\n        stringlist[0] = temp\n        return stringlist\n",
        "test": "assert         reverse_string_list([]) == []",
        "num_ids": 3111
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i)\n    for i in range(0,len(lst)):\n        for j in range(i,len(lst)):\n            if lst[i]<lst[j]:\n                lst1[i],lst1[j]=lst[j],lst[i]\n    return lst1\n",
        "test": "assert     (Find_Min([]) == []), \"Find_Min() should return an empty list\"",
        "num_ids": 1118
    },
    {
        "number": 458,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l>=b:\n        return l*b\n    return 0\n",
        "test": "assert     rectangle_area(0,0) == 0",
        "num_ids": 402
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.replace(' ','')\n",
        "test": "assert     remove_uppercase('') == ''",
        "num_ids": 751
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n",
        "test": "assert     Extract([\"test\",\"me\",\"tables\",\"test\",\"me\"]) == \"test\"",
        "num_ids": 838
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for i in str:\n        if i.isupper():\n            upper_count += 1\n    return upper_count\n",
        "test": "assert     upper_ctr(\"Hello!\") == 1",
        "num_ids": 586
    },
    {
        "number": 462,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb = []\n    for el in list1:\n        comb.append(el)\n    return comb\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 3211
    },
    {
        "number": 463,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_subarray_product = -math.inf\n    # Your code here\n    for i in range(0, len(arr)):\n        curr = arr[i]\n        for j in range(i + 1, len(arr)):\n            subarr = arr[i:j + 1]\n            curr_product = max(subarr)\n            # note that we need to go over the whole array,\n            # not just the subarray itself\n            if (curr_product == max_subarray_product):\n                break\n            max_subarray_product = curr_product if max_subarray_product == -math.inf else max(curr_product, max_subarray_product)\n    return max_subarray_product\n",
        "test": "assert     max_subarray_product([1, 2, 3, -4, 5]) == 5",
        "num_ids": 1987
    },
    {
        "number": 464,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)==n:\n        return True\n    else:\n        return False\n",
        "test": "assert check_value({1:1}, 1)==True",
        "num_ids": 847
    },
    {
        "number": 465,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # your code goes here\n    return dict1\n    # Your code goes here\n",
        "test": "assert         drop_empty({}) == {}",
        "num_ids": 985
    },
    {
        "number": 468,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    answer = 1\n    for i in range(len(arr)):\n        for j in range(i):\n            answer = max(answer, arr[j] * arr[i])\n    return answer\n",
        "test": "assert         max_product([1]) == 1",
        "num_ids": 1653
    },
    {
        "number": 470,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup_1 = test_tup\n    for tup_2 in test_tup:\n        tup_2.extend(tup_1)\n    return tuple(tup_1)\n",
        "test": "assert     add_pairwise(()) == ()",
        "num_ids": 926
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 1\n    for i in range(len(arr)):\n        remainder = (remainder * arr[i]) % n\n    return remainder\n",
        "test": "assert     find_remainder([3, 5], 4) == 3, \"test 1 failed\"",
        "num_ids": 821
    },
    {
        "number": 472,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #get the number of elements\n    elem = len(l)\n    #calculate the index of the first occurrence\n    i = 0\n    while i < elem-1:\n        if l[i] == l[i+1]:\n            i = i+1\n        else:\n            i = i+1\n    if i == elem-1:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_Consecutive([1, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == True, 'List is not Contiguous'",
        "num_ids": 853
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersect.append(test_list1[i])\n    return intersect\n",
        "test": "assert     tuple_intersection([1, 2, 3], [1, 3, 2]) == [1, 2, 3], \"wrong tuple intersection test\"",
        "num_ids": 1697
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for i in str1:\n        if ord(i)>=ord(ch) and ord(i)<=ord(newch):\n            str2+=i\n        else:\n            str2+=newch\n    return str2\n    ",
        "test": "assert     replace_char('xyz', 'x', 'z') == 'xyz'",
        "num_ids": 1733
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # your code goes here\n    \n    return sorted(dict1.items(),key=lambda x:x[1])\n",
        "test": "assert     sort_counter({'a': 'a', 'b': 'b'}), 'b'",
        "num_ids": 1128
    },
    {
        "number": 476,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort(reverse=True)\n    return sum(nums)\n",
        "test": "assert     big_sum([0, 0, 0, 0]) == 0, \"the value should be 0\"",
        "num_ids": 1139
    },
    {
        "number": 477,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('1') == '1'",
        "num_ids": 437
    },
    {
        "number": 478,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(' ','')\n",
        "test": "assert     remove_lowercase('') == ''",
        "num_ids": 2548
    },
    {
        "number": 479,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n <= 0:\n        raise ValueError('Input must be positive')\n    if n >= 10:\n        return n // 10\n    return n % 10\n",
        "test": "assert first_Digit(1) == 1",
        "num_ids": 2549
    },
    {
        "number": 554,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    i = 1\n    while i < len(list):\n        if list[i] % 2 == 0:\n            return list[i:]\n        i += 1\n    return list\n",
        "test": "assert     Split([]) == []",
        "num_ids": 753
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    for i in range(1,n+1) :\n        sum = i * (i + 1)\n        sum = sum - i\n        print(sum)\n    return sum\n    \nsum = difference(6)\nprint(sum)",
        "test": "assert     difference(1) == 1",
        "num_ids": 746
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N == 1 : \n        return 0\n    if (N % 2 == 0) : \n        return 0\n    else : \n        odd_pairs = 0\n        for i in range(1,N//2+1) : \n            if (A[i] & 1)!= A[i-1] : \n                odd_pairs += 1\n        return odd_pairs\n",
        "test": "assert     find_Odd_Pair(A=[1,2,3,4,5,6,7,8,9],N=6) == 0",
        "num_ids": 1266
    },
    {
        "number": 557,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.upper()\n        elif char.islower():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n",
        "test": "assert     toggle_string(\"\") == \"\"",
        "num_ids": 1016
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = 0\n    d2 = 0\n    for i in range(n1):\n        d1 += n1 % 10\n        n1 //= 10\n    for j in range(n2):\n        d2 += n2 % 10\n        n2 //= 10\n    return d1 - d2\n",
        "test": "assert     digit_distance_nums(7, 7) == 0",
        "num_ids": 766
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n",
        "test": "assert     max_sub_array_sum([], 1) == 0",
        "num_ids": 1191
    },
    {
        "number": 560,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1)\n    union.update(test_tup2)\n    return sorted(union)\n",
        "test": "assert     union_elements([1,2,3], [4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 1414
    },
    {
        "number": 562,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in lst:\n        l = len(i)\n        if l > max_length:\n            max_length = l\n    return max_length\n",
        "test": "assert     Find_Max_Length(['babab']), 'expected error: string length should be 2'",
        "num_ids": 3552
    },
    {
        "number": 563,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"', \"\")\n    text = text.replace(\"'\", \"\")\n    return text\n",
        "test": "assert     extract_values('a') == ('a')",
        "num_ids": 1243
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    counter = 0\n    for i in arr:\n        for j in arr:\n            if(i!= j):\n                if(i == j):\n                    counter += 1\n    return counter\n",
        "test": "assert     count_Pairs([1,2,3,4,5,6],0)==0",
        "num_ids": 776
    },
    {
        "number": 565,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    chars = []\n    for char in word: \n        chars.append(char)\n    return chars\n",
        "test": "assert     split(\"ABAB\") == [\"A\", \"B\", \"A\", \"B\"]",
        "num_ids": 2493
    },
    {
        "number": 566,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum = sum + n % 10\n        n = n // 10\n    return sum\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 708
    },
    {
        "number": 567,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted = True\n    for i in range(0, len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            sorted = False\n    return sorted\n",
        "test": "assert issort_list([1,3,4,4,4,4,3,1,2]) == False",
        "num_ids": 859
    },
    {
        "number": 568,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 502
    },
    {
        "number": 569,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def recur(sublist, sl, sl_len):\n        if sl_len == 1:\n            return sublist\n        else:\n            if len(sublist) == 1:\n                return sublist\n            else:\n                if sl[0] > sublist[0]:\n                    return recur(sublist[1:], sl[1:], sl_len - 1)\n                else:\n                    return recur(sublist[1:], sl, sl_len - 1)\n    return recur(list1, list1, len(list1) - 1)\n",
        "test": "assert     sort_sublists([[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]]) == sorted([[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]])",
        "num_ids": 1995
    },
    {
        "number": 572,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # To store each element\n    num_list = list()\n    for elem in nums:\n        num_list.append(elem)\n    # set of unique number of elements\n    dup_num = set()\n    # loop through the list\n    for elem in num_list:\n        # if the element is duplicate\n        if elem in dup_num:\n            # remove duplicate elements\n            dup_num.remove(elem)\n            # add the element to the new set\n            num_list.remove(elem)\n    return num_list\n",
        "test": "assert     two_unique_nums([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "num_ids": 1114
    },
    {
        "number": 573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if not list_data:\n        return 0\n    elif len(list_data) == 1:\n        return list_data[0]\n",
        "test": "assert     is_unique_product([2, 2, 2, 2]) == False",
        "num_ids": 3117
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r1 = int(r)\n    h1 = int(h)\n    s1 = ((3.14159*r1**2)*h1**2)\n    return s1\n",
        "test": "assert     surfacearea_cylinder(0.5,1) == 0.0",
        "num_ids": 537
    },
    {
        "number": 576,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return(A == B[0:len(B)]) or (len(A) == 0 or B[0]!= A[0])\n",
        "test": "assert     is_Sub_Array([1,2,3,4,5,6],[1,2,3,4,5,6])",
        "num_ids": 968
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    x=n\n    while x!= 0:\n        n = x % 10\n        x = x // 10\n    return n\n",
        "test": "assert     last_Digit_Factorial(1) == 1, \"Should return 1\"",
        "num_ids": 641
    },
    {
        "number": 578,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # TO DO: complete this function\n    return(list1+list2+list3)\n",
        "test": "assert     (interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9])",
        "num_ids": 1615
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    l1, l2 = len(test_tup1), len(test_tup2)\n    diss_list = []\n    for i in range(l1):\n        if test_tup1[i]!= test_tup2[i]:\n            diss_list.append(test_tup1[i])\n    return diss_list\n",
        "test": "assert     find_dissimilar(('a','c'),('a','b')) == ['c']",
        "num_ids": 1440
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) == 2: \n        even_fnc(test_tuple) \n    else: \n        if test_tuple[0] == test_tuple[1]:\n            even_fnc(test_tuple[:-1]) \n        else: \n            even_fnc(test_tuple[1:]) \n",
        "test": "assert     even_ele(((1,2,3,4),(6,7),(3,4)),lambda x: x[1][1][2]) == ((2,3,4),6,7)",
        "num_ids": 1454
    },
    {
        "number": 581,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n    pass\n",
        "test": "assert     surface_Area(b=0,s=0) == 0",
        "num_ids": 703
    },
    {
        "number": 582,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 is None:\n        return True\n    return False\n",
        "test": "assert     my_dict({\"my_key\":\"my_value\"}) is False",
        "num_ids": 509
    },
    {
        "number": 583,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    ans = 1\n    i = 2\n    j = 1\n    while i < num:\n        ans += j\n        i += 1\n        j += 1\n    return ans\n",
        "test": "assert         catalan_number(1) == 1",
        "num_ids": 2685
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for i in range(len(text)):\n        if (text[i:i+1] == \"ly\"):\n            adverbs.append(i)\n    return adverbs\n",
        "test": "assert     find_adverbs('l\u00f8s') == []",
        "num_ids": 3626
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap,item)\n        elif item < heap[0]:\n            heapq.heapreplace(heap,item)\n    return heap\n",
        "test": "assert     expensive_items(['a', 'b', 'c', 'd'],3) == ['a', 'b', 'c']",
        "num_ids": 3361
    },
    {
        "number": 586,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "test": "assert     split_Arr([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],3) == ['a','b','c','d','e','f','g']",
        "num_ids": 722
    },
    {
        "number": 587,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    newtuple = ()\n    for x in listx:\n        newtuple += (x, )\n    return newtuple\n",
        "test": "assert     list_tuple([1,2,3,4,5]) == (1,2,3,4,5), 'wrong result'",
        "num_ids": 729
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    from operator import itemgetter\n    nums_sort = sorted(nums)\n    min_num = min(nums_sort)\n    max_num = max(nums_sort)\n    dif_num = nums_sort[-1]-nums_sort[0]\n    diff = (min_num - max_num) / dif_num\n    return diff\n",
        "test": "assert     big_diff([-1, 0, 0, 0, 1]), \"Passed a negative value as a list.\"",
        "num_ids": 989
    },
    {
        "number": 589,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    c = 0\n    if b > a:\n        c = b\n        b = a\n    # If we want to use inbuilt sqrt function\n    while(c**2 < b**2):\n        c = c + 1\n        if c**2 == b**2:\n            return c\n    # If we want to use sqrt function\n    # return a+b//2\n    return a+b//2\n",
        "test": "assert     perfect_squares(1, 0) == 1",
        "num_ids": 1101
    },
    {
        "number": 590,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x < 0:\n        x = x * math.cos(math.pi / 2)\n    else:\n        x = x * math.cos(math.pi - math.pi/2)\n    if y < 0:\n        y = y * math.sin(math.pi / 2)\n    else:\n        y = y * math.sin(math.pi - math.pi/2)\n    return(x,y)\n",
        "test": "assert         polar_rect(0,0) == (0,0)",
        "num_ids": 2965
    },
    {
        "number": 591,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.sort() \n    newList = newList[0:len(newList)-1] + newList[len(newList)-1:]\n    return newList\n",
        "test": "assert     swap_List([]) == []",
        "num_ids": 862
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        raise Exception('n must be non-negative')\n    else:\n        return binomial_Coeff(n - 1,k)*n\n",
        "test": "assert     binomial_Coeff(0,0) == 1, \"The sum of the binomial coefficients should be 1\"",
        "num_ids": 2816
    },
    {
        "number": 593,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    new_ip = []\n    new_ip.append(ip[0])\n    new_ip.append(ip[1])\n    new_ip.append(ip[2])\n    new_ip.append(ip[3])\n    return '.'.join(new_ip)\n",
        "test": "assert         removezero_ip(ip='0.0.0.0') == '0.0.0.0'",
        "num_ids": 1024
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        print(\"List is divisible by 2\")\n        return list1[0]\n    else:\n        print(\"List is not divisible by 2\")\n        return \"List is not divisible by 2\"\n",
        "test": "assert     diff_even_odd([2, 3, 5, 7]) == 2, \"Somethings wrong\"",
        "num_ids": 1264
    },
    {
        "number": 595,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # your code here\n    if str1==str2:\n        return 0\n    else:\n        return 1\n",
        "test": "assert     min_Swaps(\"11001\", \"11001\") == 0, \"should be 0\"",
        "num_ids": 3493
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n",
        "test": "assert     tuple_size([]) == 0",
        "num_ids": 2590
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Function to get kth element from two sorted arrays.\n    def get_kth(arr1, arr2, k):\n        count = 0\n        for i in range(k):\n            if arr1[i] < arr2[count]:\n                count += 1\n        return arr1[i]\n    \n    # Function to get kth element from two sorted arrays.\n    def get_kth_2(arr1, arr2, k):\n        count = 0\n        for i in range(len(arr1)):\n            if arr1[i] < arr2[count]:\n                count += 1\n        return arr1[count]\n        \n    # Function to get kth element from two sorted arrays.\n    def get_kth_3(arr1, arr2, k):\n        l = k\n        for i in range(k):\n            if arr1[i] > arr2[i]:\n                l -= 1\n        return arr1[l]\n    \n    # Function to get kth element from two sorted arrays.\n    def get_kth_4(arr1, arr2, k):\n        l = k\n        for i in range(k):\n            if arr1[i] > arr2[i]:\n                l -= 1\n            if arr1[l] > arr2[l]:\n                l -= 1\n        return arr1[l]\n        \n    # Function to get kth element from two sorted arrays.\n    def get_kth_5(arr1, arr2, k):\n        if k == 1:\n            return get_kth_2(arr1, arr2, k)\n        else:\n            return get_kth_3(arr1, arr2, k)\n        \n    # Function to get kth element from two sorted arrays.\n    def get_kth_6(arr1, arr2, k):\n        l = k\n        for i in range(k):\n            if arr1[i] > arr2[i]:\n                l -= 1\n        return arr1[l]\n        \n    # Function to get kth element from two sorted arrays.\n    def get_kth_7(arr1, arr2, k):\n        l = k\n        for i in range(k):\n            if arr1[i] < arr2[i]:\n                l -= 1\n            if arr1[l] > arr2[l]:\n                l -= 1\n        return arr1[l]\n    \n    if arr1 == arr2:\n        return arr1[k]\n    else:\n        if k == len(arr1):\n            return get_kth(arr1, arr2, k)\n        else:\n            return get_kth_2(arr1, arr2, k)\n        \n    ",
        "test": "assert     find_kth(['1','4','7','9'],['4','7','8','9'],4),'incorrect'",
        "num_ids": 2011
    },
    {
        "number": 598,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    arr = []\n    s = ''\n    num = number\n    while num > 0:\n        arr.append(num % 10)\n        num = num // 10\n    for i in range(len(arr)):\n        s = str(arr[i]) + s\n    if len(s) == len(set(s)):\n        return True\n    else:\n        return False\n",
        "test": "assert     armstrong_number(7) == True",
        "num_ids": 916
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    return sum/number\n",
        "test": "assert     sum_average(1) == 1",
        "num_ids": 754
    },
    {
        "number": 600,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "test": "assert     is_Even(0)",
        "num_ids": 530
    },
    {
        "number": 602,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code goes here\n    if len(str1) == 0:\n        return None\n    if str1[0] == str1[-1]:\n        return str1[0]\n    else:\n        return str1[0]\n",
        "test": "assert first_repeated_char(\"aab\") == 'a'",
        "num_ids": 1044
    },
    {
        "number": 603,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n+1):\n        ludic.append(i)\n        if i%10==9:\n            ludic.append(i)\n    return ludic\n",
        "test": "assert     get_ludic(6) == [1,2,3,4,5,6]",
        "num_ids": 955
    },
    {
        "number": 604,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    split_words = s.split(' ')\n    list_words = []\n    for word in split_words:\n        list_words.append(word[::-1])\n    return''.join(list_words)\n",
        "test": "assert     reverse_words('') == ''",
        "num_ids": 2727
    },
    {
        "number": 605,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    num_list = list(str(num))\n    if num == 2:\n        return True\n    if num == 3:\n        return False\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(num ** 0.5) + 1, 6):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n    return True\n",
        "test": "assert not prime_num(56)",
        "num_ids": 992
    },
    {
        "number": 606,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree % 360\n    degree_rad = math.radians(degree)\n    return degree_rad\n",
        "test": "assert     radian_degree(0) == 0",
        "num_ids": 563
    },
    {
        "number": 607,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Find the end index of the pattern\n    i = pattern.find('.')\n    # If the pattern is not found anywhere, return the whole text\n    if i == -1:\n        return text, 0, len(text)\n    # Otherwise, find the start index of the pattern\n    else:\n        # Find the start index of the pattern\n        i = pattern.find('{', i+1)\n        # Find the end index of the pattern\n        j = pattern.find('}', i+1)\n        # Return the matching substring, its start index and its end index\n        return text[i:j+1], i, j+1\n",
        "test": "assert     re.search(\"\\$\", \"\") == None",
        "num_ids": 1023
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Write your code here\n    # return nth_bell_number\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        return bell_Number(n-1)+bell_Number(n-2)\n",
        "test": "assert     bell_Number(4) == 3",
        "num_ids": 790
    },
    {
        "number": 610,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L is None:\n        return None\n    elif L == []:\n        return []\n    else:\n        return list1[:L] + list1[L+1:]\n",
        "test": "assert     remove_kth_element([1,2,3,4,5], 2), 'test fails'",
        "num_ids": 1133
    },
    {
        "number": 611,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_nth = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_of_nth:\n            max_of_nth = row[N]\n    return max_of_nth\n",
        "test": "assert     max_of_nth([[1,2,3],[4,5,6]], 2) == 6",
        "num_ids": 3200
    },
    {
        "number": 612,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_of_lists = []\n    for i in range(len(lst)):\n        temp_lst = []\n        for j in range(len(lst[i])):\n            temp_lst.append(lst[i][j])\n        lst_of_lists.append(temp_lst)\n    return lst_of_lists\n",
        "test": "assert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]",
        "num_ids": 1468
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum = cumulative_sum + item\n    return cumulative_sum\n",
        "test": "assert     cummulative_sum([]) == 0, \"test_1 is incorrect\"",
        "num_ids": 699
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums_tuple = []\n    for i in nums:\n        nums_tuple.append(tuple(i))\n",
        "test": "assert     average_tuple((1,2,3,4,5,6)) == [2,3.5,4.5]",
        "num_ids": 4015
    },
    {
        "number": 616,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tuple = tuple((x % y) for x, y in zip(test_tup1, test_tup2))\n    return modulo_tuple\n",
        "test": "assert     tuple_modulo((3,3,3), (3,3,3)) == (0, 0, 0)",
        "num_ids": 1258
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    for i in range(steps):\n        count += (i+1) % 2\n    if steps % 2 == 0:\n        return count % d\n    else:\n        return count % (d+1)\n",
        "test": "assert     min_Jumps(0, 3) == 0",
        "num_ids": 3537
    },
    {
        "number": 618,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list=[]\n    for i in range(0,len(nums1)):\n        if nums1[i] in nums2:\n            new_list.append(nums1[i])\n    return new_list\n",
        "test": "assert     div_list([], []) == [], \"Test 2\"",
        "num_ids": 1834
    },
    {
        "number": 619,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = list(test_str)\n    for i in range(len(num_list)):\n        num_list[i] = str(num_list[i])\n    return ''.join(num_list)\n    \n",
        "test": "assert     move_num('10001') == '10001'",
        "num_ids": 1190
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                break\n        else:\n            max_subset = max(max_subset, len(a[i:j+1]))\n    return max_subset\n",
        "test": "assert     largest_subset([]) == 0",
        "num_ids": 1187
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # sort the lists\n    arr1.sort()\n    arr2.sort()\n",
        "test": "assert     get_median([], [], 5) == None, \"test failed\"",
        "num_ids": 1169
    },
    {
        "number": 623,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    out = [1]*n\n    \n    if len(nums)==1:\n        return out\n    \n    while n > 0:\n        if n%2:\n            out[-1] = out[-1]*nums[-1]\n        \n        n = n//2\n    \n    return out\n",
        "test": "assert     nth_nums([0, 1, 2, 3, 4], 2) == [1, 4], \"test failed\"",
        "num_ids": 775
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n",
        "test": "assert     is_upper(\"HELLO\") == True, \"test failed\"",
        "num_ids": 517
    },
    {
        "number": 625,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # remove all the duplicates \n    newList.sort()\n    return newList\n    \ndef number_of_days(time): \n    '''\n    Write a python function to count the number of days the given time has elapsed.\n    '''\n    # convert the time into a float \n    time = float(time) \n    # store the number of days \n    days = time/86400 \n    # store the number of weeks \n    weeks = days/7\n    # store the number of months \n    months = weeks/12\n    # return the number of days \n    return months\n",
        "test": "assert swap_List([]) == []",
        "num_ids": 863
    },
    {
        "number": 626,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0:\n        return 0\n    elif r == 1:\n        return 1\n    elif r == 2:\n        return 2\n    else:\n        side_1 = (r - 2)**2\n        side_2 = 2 * (r - 2)\n        side_3 = (r - 3)**2\n        max_side = max(side_1, side_2, side_3)\n        return side_1 + side_2 + side_3 - max_side\n",
        "test": "assert     triangle_area(0) == 0",
        "num_ids": 726
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) -1\n",
        "test": "assert     find_First_Missing([],start=0) == None",
        "num_ids": 1322
    },
    {
        "number": 628,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # replace spaces in string with %20\n    string = string.replace(' ', '%20')\n    # return string\n    return string\n",
        "test": "assert     replace_spaces(\"This is a test.\\n\") == 'This%20is%20a%20test.\\n'",
        "num_ids": 635
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list\n",
        "test": "assert     Split([]) == []",
        "num_ids": 1100
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ele[0]+sub[0], ele[1]+sub[1], ele[0]-sub[0], ele[1]-sub[1]\n    ",
        "test": "assert     adjac((0,1), (0,0,0))",
        "num_ids": 1264
    },
    {
        "number": 631,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for i in text:\n        if i!='':\n            result += i\n        else:\n            result += '_'\n    return result\n",
        "test": "assert     replace_spaces(\"\") == \"\"",
        "num_ids": 1093
    },
    {
        "number": 632,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            return num_list.pop()\n    return num_list\n    \ndef count_zeros(num_list):\n    '''\n    Write a python function to count the number of zeros in the given list.\n    '''\n    num_zeros = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_zeros += 1\n    return num_zeros\n    \ndef reverse(num_list):\n    '''\n    Write a python function to reverse the order of the elements in a given list.\n    '''\n    num_list = num_list[::-1]\n    return num_list\n",
        "test": "assert         move_zero([1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1],'move_zero is incorrect'",
        "num_ids": 870
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n-1) : \n        result += (arr[i] ^ arr[i+1])\n    return result \n",
        "test": "assert pair_xor_Sum([1,2,3,4,5], 0) == 0, \"Pair_xor_Sum(2,0) should be equal to 0\"",
        "num_ids": 1127
    },
    {
        "number": 635,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # TODO: Write your code here\n    # Your code here\n    return iterable\n",
        "test": "assert     hq is not None",
        "num_ids": 1348
    },
    {
        "number": 637,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False\n",
        "test": "assert     noprofit_noloss(0,1) == False, \"Fail : no profit\"",
        "num_ids": 874
    },
    {
        "number": 638,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = v * math.cos(t * math.pi/ 100)\n    return math.log((v + w)/(v * math.cos(t * math.pi/ 100)))\n",
        "test": "assert     wind_chill(5.0,25.0), \"value 5.0 doesn't match expected value 25.0\"",
        "num_ids": 1180
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name.lower().startswith('a'):\n            count+=1\n    return count\n",
        "test": "assert     sample_nam([]) == 0, 'Error: Sample_nam is incorrect'",
        "num_ids": 5444
    },
    {
        "number": 640,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for i in range(len(items)):\n        if items[i] == '(':\n            new_items.append('(')\n        else:\n            new_items.append(items[i])\n    return new_items\n",
        "test": "assert     remove_parenthesis(\"(())()\"), 'The function is not correct'",
        "num_ids": 3094
    },
    {
        "number": 641,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n+1) % 2 == 1\n",
        "test": "assert     is_nonagonal(2)",
        "num_ids": 732
    },
    {
        "number": 643,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(\"z\")\n    if pattern.search(text):\n        return False\n    else:\n        return True\n    \ndef text_match_wordz_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    pattern = re.compile(\"z\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz_middle(\"zab\") == False",
        "num_ids": 3016
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(0, len(input) - 1): \n        output.append(input[i]) \n    output[-1] = input[-1] \n    input[:] = input[::-1] \n    return output\n",
        "test": "assert     reverse_Array_Upto_K(",
        "num_ids": 1114
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if type(test_dict)!= dict:\n        raise TypeError('test_dict must be a dictionary.')\n    test_tup = (test_tup[0], test_tup[1], test_dict)\n    return test_tup\n",
        "test": "assert     (add_dict_to_tuple((\"a\", \"b\"), {\"c\": \"d\"})!= (\"a\", \"b\", \"d\"))",
        "num_ids": 1276
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    maxAverage = 0\n    currTotal = 0\n    for i in range(N):\n        for j in range(N):\n            currTotal += cost[i][j]\n            if currTotal > maxAverage:\n                maxAverage = currTotal\n    return maxAverage/N\n",
        "test": "assert     maxAverageOfPath([[3, 4, 8],[7, 6, 5]]) == 10",
        "num_ids": 1771
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    #print(students)\n    #print(h)\n    #print(w)\n    for name,(height,weight) in students.items():\n        if (weight >= w and height >= h):\n            #print(name,weight,h)\n            filtered_students.append([name,weight,h])\n    #print(filtered_students)\n    return filtered_students\n",
        "test": "assert     filter_data({'jeff':(75,95),'james':(65,75)},(75,95),(75,95)) == True",
        "num_ids": 1645
    },
    {
        "number": 723,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # if both lists are empty\n    if len(nums1)!= len(nums2):\n        return 0\n    \n    # iterate through both lists\n    ans = 0\n    i = 0\n    j = 0\n    \n    while i < len(nums1) and j < len(nums2):\n        # find if the values are the same\n        if nums1[i] == nums2[j]:\n            # increment the ans and add 1\n            ans += 1\n            i += 1\n            j += 1\n            \n        # if not the same\n        else:\n            # if the i's aren't the same as the j's, it is not a pair\n            if i!= j:\n                i += 1\n                j += 1\n                continue\n                \n            # if the i's are the same\n            else:\n                # if both lists are empty, then it is a single pair\n                if i == 0:\n                    ans += 1\n                    i += 1\n                    continue\n                # if the i's are not the same\n                else:\n                    # if the i's are the same, we are adding 1 to i\n                    if i == nums1[i-1]:\n                        i += 1\n                        continue\n                    # if the i's are not the same, it is a pair\n                    else:\n                        # we will add 1 to the answer\n                        ans += 1\n                        # add the pair to the list\n                        nums1[i-1] = nums1[i-1]\n                        # and subtract 1 from both lists\n                        nums1.pop(i-1)\n                        nums2.pop(j)\n                        # and add 1 to the answer\n                        ans += 1\n                        # add the pair to the list\n                        nums1.append(1)\n                        nums2.append(1)\n                        # and subtract 1 from both lists\n                        nums1.pop(i-1)\n                        nums2.pop(j)\n                        break\n                \n    return ans\n",
        "test": "assert     count_same_pair([1,1], [1,1]) == 2",
        "num_ids": 1770
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base) if i.isdigit()])\n",
        "test": "assert     power_base_sum(3, 1) == 3, \"base is 3, power is 1\"",
        "num_ids": 761
    },
    {
        "number": 725,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"\u2018\", \"\", text1)\n    text = re.sub(\"\u2019\", \"\", text)\n    text = re.sub(\"\u201c\", \"\", text)\n    text = re.sub(\"\u201d\", \"\", text)\n    text = re.sub(\"\u2018\", \"\", text)\n    text = re.sub(\"\u00b4\", \"\", text)\n    return text\n",
        "test": "assert     extract_quotation('polo a meu') == 'polo a meu'",
        "num_ids": 5088
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    print(\"START\")\n    result = ()\n    print(\"TEST: \", test_tup)\n    for t in test_tup:\n        if isinstance(t, int):\n            result = result + (t,)\n        elif isinstance(t, tuple):\n            result = result + (t,)\n        else:\n            result = result + (t)\n    print(\"RESULT: \", result)\n    return result\n",
        "test": "assert     multiply_elements((1,2,3,4,5,6)) == (1,2,5,10,15,18)",
        "num_ids": 1139
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    a_sums = 0\n    b_sums = 0\n",
        "test": "assert ",
        "num_ids": 2701
    },
    {
        "number": 730,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(dict.fromkeys(nums))\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 1116
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348148767212972098026245510307559140895705078125\n    return 2*h*r*math.cos(2*math.pi/h)*(1+math.cos(2*pi/r))\n",
        "test": "assert     lateralsurface_cone(1,1) == 4.0",
        "num_ids": 5164
    },
    {
        "number": 732,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    text=text.replace(\" \",\"_\")\n    text=text.replace(\".\",\"_\")\n    text=text.replace(\",\",\"_\")\n    text=text.replace(\"_\",\" \")\n    text=text.replace(\".\",\"_\")\n    text=text.replace(\":\",\"_\")\n    text=text.replace(\" \",\"_\")\n    text=text.replace(\"'\",\"_\")\n    text=text.replace(\"_\",\" \")\n    text=text.replace(\"(\",\"_\")\n    text=text.replace(\")\",\"_\")\n    text=text.replace(\"[\",\"_\")\n    text=text.replace(\"]\",\"_\")\n    text=text.replace(\"_\",\" \")\n    return text\n",
        "test": "assert     replace_specialchar('') == '', 'Empty input string is not allowed'",
        "num_ids": 10990
    },
    {
        "number": 733,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Your code here\n    n = len(A)\n    i = 0\n    while i < n and A[i]!= x:\n        i += 1\n    return i\n",
        "test": "assert     find_first_occurrence([1,2,3,4,5,6,7,8,9,10], 8) == 7, \"Unexpected first occurrence.\"",
        "num_ids": 3087
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Function to find sum of products of all possible sublists\n    def sum_of_products(sublist):\n        # Initialize sums\n        sum_of_all_sublist_products = 0\n        # Iterate over each possible sublist\n        for i in range(len(sublist)):\n            # Sum of products of all possible sublists\n            sum_of_all_sublist_products += sublist[i] * (i + 1)\n        return sum_of_all_sublist_products\n        \n    # Traverse all sublists and find sum\n    def find_sum_of_all_sublist_products(arr):\n        # Initialize sums\n        sum_of_all_sublist_products = 0\n        # Iterate over all sublists\n        for i in range(len(arr)):\n            # Sum of products of all possible sublists\n            sum_of_all_sublist_products += arr[i] * (i + 1)\n        return sum_of_all_sublist_products\n        \n    # Sum of products of all possible sublists\n    sum_of_all_sublist_products = find_sum_of_all_sublist_products(arr)\n        \n    # Call sum_of_products function\n    sum_of_products = sum_of_all_sublist_products % 10\n        \n    # Function to find final sum\n    def find_final_sum(arr):\n        # Initialize sums\n        sum_of_all_sublist_products = 0\n        # Iterate over all sublists\n        for i in range(len(arr)):\n            # Sum of products of all possible sublists\n            sum_of_all_sublist_products += arr[i] * (i + 1)\n        return sum_of_all_sublist_products\n        \n    # Call sum_of_products function\n    final_sum = find_final_sum(arr)\n        \n    # Function to find final product\n    def find_final_product(arr):\n        # Initialize sums\n        sum_of_all_sublist_products = 0\n        # Iterate over all sublists\n        for i in range(len(arr)):\n            # Sum of products of all possible sublists\n            sum_of_all_sublist_products += arr[i] * (i + 1)\n        return sum_of_all_sublist_products\n        \n    # Call final_sum function\n    final_product = find_final_product(arr)\n        \n    # Call final_sum function\n    final_sum = final_sum % 10\n        \n    # Return final sum\n    return final_sum\n",
        "test": "assert     sum_Of_Subarray_Prod([1, 1, 2, 3, 3, 4, 4, 4, 5]) == 5",
        "num_ids": 3408
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & ~n -1\n",
        "test": "assert set_middle_bits(1)",
        "num_ids": 2829
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(0, len(a)):\n        if a[i] < x:\n            a[i] = x\n            return i\n    for i in range(0, len(a)):\n        if a[i] > x:\n            if i + 1 >= len(a):\n                a.append(x)\n                return len(a) - 1\n            else:\n                if a[i+1] > x:\n                    a.insert(i + 1, x)\n                    return i + 1\n                else:\n                    a.append(x)\n                    return i\n    return -1\n",
        "test": "assert     left_insertion(list(range(1000)),3) == 0",
        "num_ids": 1097
    },
    {
        "number": 737,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string.lower()):\n        return True\n    else:\n        return False\n",
        "test": "assert not     check_str('Wow'), 'String contains an o or i'",
        "num_ids": 428
    },
    {
        "number": 738,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + geometric_sum(n - 1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 642
    },
    {
        "number": 739,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    digits = []\n    for i in range(n+1): \n        digits.append(i)\n    digits.sort()\n    index = digits[-1]\n    return index\n",
        "test": "assert     find_Index(0) == 0",
        "num_ids": 5030
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    return {t[0] : t[1] for t in test_tup}\n",
        "test": "assert     (tuple_to_dict([]) == {}), \"Empty dict\"",
        "num_ids": 1502
    },
    {
        "number": 741,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #characters = ['a', 'b', 'c', 'd']\n    characters = list(s)\n    count = 0\n    for char in characters :\n        if char == characters[count] :\n            count+=1\n        else :\n            count = 0\n    if count == len(characters):\n        return True\n    else :\n        return False",
        "test": "assert     all_Characters_Same('X')",
        "num_ids": 823
    },
    {
        "number": 742,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    n = side\n    area = n * (n - 1) *.5\n    return area\n",
        "test": "assert     area_tetrahedron(0) == 0",
        "num_ids": 3007
    },
    {
        "number": 743,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = []\n    for i in range(len(list)):\n        temp.append(list[len(list)-i-1])\n    return temp\n",
        "test": "assert     rotate_right([1,2,3], 3) == [3,2,1]",
        "num_ids": 1340
    },
    {
        "number": 744,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n        return False\n    return True\n",
        "test": "assert     check_none((1,2,3)) == False, \"Check_none failed\"",
        "num_ids": 587
    },
    {
        "number": 745,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if endnum-startnum == 0:\n        return 1\n    elif startnum%10 == endnum%10:\n        return divisible_by_digits(startnum, endnum/10) + divisible_by_digits(startnum/10, endnum%10)\n    else:\n        return 0\n",
        "test": "assert     divisible_by_digits(1, 1) == 1",
        "num_ids": 932
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a=a*math.pi/180\n    if a > 360:\n        return None\n    elif a <0:\n        a = 360-a\n        if a > 180:\n            return None\n    return r*math.sin(a)*math.sin(a/180*math.pi)\n",
        "test": "assert     sector_area(0,0) == 0, \"Invalid sector area.\"",
        "num_ids": 2992
    },
    {
        "number": 747,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if not X or not Y or not Z:\n        return None\n    if len(X) < len(Y) or len(Y) < len(Z):\n        return None\n    \n    X_len = len(X)\n    Y_len = len(Y)\n    Z_len = len(Z)\n    \n    if X_len < Y_len or Y_len < Z_len:\n        return None\n    \n    if X_len == Y_len:\n        return max(X, Y, Z)\n    \n    if X_len == Z_len:\n        return max(X, Z, Y)\n    \n    if X_len < Y_len:\n        return lcs_of_three(Y, Z, X)\n    \n    return lcs_of_three(X, Z, Y)\n    \ndef string_compare(str1, str2):\n    '''\n    Write a function to compare two strings, if they contain same characters, return True. If they have different characters, return False.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    if len(str1) == len(str2):\n        return True\n    \n    for index in range(len(str1)):\n        if str1[index]!= str2[index]:\n            return False\n    return True\n",
        "test": "assert     lcs_of_three('abc','abc','a'), \"This case should not be possible.\"",
        "num_ids": 2964
    },
    {
        "number": 748,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace('-','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\t','')\n    return str1\n",
        "test": "assert     capital_words_spaces('') == ''",
        "num_ids": 1312
    },
    {
        "number": 749,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    list_copy = nums_str.copy()\n    nums_str.sort()\n    print(nums_str)\n    for i in range(len(list_copy)):\n        for j in range(len(list_copy)-1):\n            if list_copy[j] > list_copy[j+1]:\n                list_copy[j],list_copy[j+1] = list_copy[j+1],list_copy[j]\n    print(nums_str)\n    return nums_str\n",
        "test": "assert     sort_numeric_strings([]) == []",
        "num_ids": 1636
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    temp_list = []\n    for i in range(len(test_list)):\n        temp_list.append(test_list[i])\n        \n    temp_list.append(test_tup)\n    test_list.clear()\n    test_list.extend(temp_list)\n    \n    return test_list\n",
        "test": "assert add_tuple([(1,2,3),(3,1,2)], (3,1,2)) == (3,2,1), \"Fail to add tuple to list\"",
        "num_ids": 1149
    },
    {
        "number": 751,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) and arr[i] > arr[-1]:\n        return False\n    return True\n",
        "test": "assert     check_min_heap_helper([1], 0) == True",
        "num_ids": 857
    },
    {
        "number": 752,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return int(n)\n    \ndef jacobsthal_den(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    return int(n)**2\n    \ndef jacobsthal_roots(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    return abs(int(n))\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 4772
    },
    {
        "number": 753,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    i = 0\n    k = []\n    while i < len(test_list):\n        k.append(test_list[i])\n        i = i + 1\n    k.sort()\n    return k[:K]\n",
        "test": "assert     min_k([1,2,3,4,5,6,7,8,9,10], 2), \"Wrong Output\"",
        "num_ids": 1288
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    l1_set = set(l1)\n    l2_set = set(l2)\n    l3_set = set(l3)\n    for index in l1_set:\n        if index in l2_set and index in l3_set:\n            index_list.append(index)\n    return index_list\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 1629
    },
    {
        "number": 755,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers)\n",
        "test": "assert     second_smallest([2, 2, 2]) == 2, \"should be 2\"",
        "num_ids": 735
    },
    {
        "number": 756,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_lower = text.lower()\n    pattern = \"a(b)*\"\n    if re.search(pattern, text_lower):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one('ab') == True",
        "num_ids": 3012
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # Edge cases\n    if len(test_list) < 2:\n        return 0\n    elif len(test_list) == 2:\n        return 1\n    elif len(test_list) == 3:\n        return 1\n    \n    count = 0\n    for i in range(0, len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            count = count + 1\n    return count\n",
        "test": "assert     count_reverse_pairs([]) == 0",
        "num_ids": 1712
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 1243
    },
    {
        "number": 759,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_decimal('a')==False",
        "num_ids": 835
    },
    {
        "number": 760,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    from collections import Counter\n    if len(arr)==0:\n        return False\n    elif len(arr)==1:\n        return arr[0] == arr[0]\n    else:\n        return True if Counter(arr).get(arr[0])==1 else False\n    #If you have 4 numbers in your list of data, it will be true if there is only 1 distinct element in your list and false if there is more than one distinct element.\n",
        "test": "assert     unique_Element([3,3,2,2]) == False, \"The function is incorrect!\"",
        "num_ids": 1050
    },
    {
        "number": 762,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_monthnumber_number(12) == True",
        "num_ids": 3099
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = abs(arr[0] - arr[1])\n    i = 0\n    j = 1\n    while i < n-1 and j < n-1:\n        if arr[i] + arr[j] < min_diff:\n            min_diff = arr[i] + arr[j]\n        if arr[i] + arr[j] > min_diff:\n            j += 1\n        else:\n            i += 1\n    if i == n-1:\n        return arr[i]\n    else:\n        return arr[i] - arr[j-1]\ndef find_max_diff(arr, n): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array. \n    '''\n    max_diff = arr[0] - arr[1]\n    i = 0\n    j = 1\n    while i < n-1 and j < n-1:\n        if arr[i] + arr[j] > max_diff:\n            max_diff = arr[i] + arr[j]\n        if arr[i] + arr[j] < max_diff:\n            j += 1\n        else:\n            i += 1\n    if i == n-1:\n        return arr[i]\n    else:\n        return arr[i] - arr[j-1]\n",
        "test": "assert     find_min_diff([1, 2, 3, 4, 5, 6], 3) == -1",
        "num_ids": 1517
    },
    {
        "number": 764,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr(\"Hello\") == 0",
        "num_ids": 569
    },
    {
        "number": 765,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    divisor = 1\n    while(divisor*divisor <= n):\n        if n%divisor == 0:\n            return True\n        divisor += 1\n",
        "test": "assert     is_polite(1) == True",
        "num_ids": 860
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    s1 = []\n    for x in range(len(l1)-1):\n        s1.append((l1[x],l1[x+1]))\n    return s1\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 3258
    },
    {
        "number": 767,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    a = 0\n    if sum in arr:\n        a += 1\n        for i in range(len(arr)):\n            if sum == arr[i]:\n                a += 1\n        return a\n    else:\n        return 0\n",
        "test": "assert     get_pairs_count([], 1000) == 0",
        "num_ids": 2888
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return len(li1)-len(li2)\n",
        "test": "assert     Diff([1,2,3,4,5], [2,3,4,5,6])==0,\"Error\"",
        "num_ids": 1118
    },
    {
        "number": 770,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n<=1 :\n        return 0\n    \n    else : \n        return n*(n+1)/2\n",
        "test": "assert odd_num_sum(0) == 0",
        "num_ids": 2582
    },
    {
        "number": 771,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    visited = set()\n    answer = True\n    for i in exp:\n        if i == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return answer\n        elif i == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return answer\n        elif i == '*':\n            if stack and stack[-1] == '*':\n                stack.pop()\n            else:\n                return answer\n        elif i == '+':\n            if stack and stack[-1] == '+':\n                stack.pop()\n            else:\n                return answer\n        elif i == '<':\n            if stack and stack[-1] == '<':\n                stack.pop()\n            else:\n                return answer\n        elif i == '>':\n            if stack and stack[-1] == '>':\n                stack.pop()\n            else:\n                return answer\n        elif i == '.':\n            if stack and stack[-1] == '.':\n                stack.pop()\n            else:\n                return answer\n        else:\n            return answer\n        visited.add(i)\n    if len(stack) > 0:\n        return answer\n    return answer\n",
        "test": "assert     check_expression('') == True",
        "num_ids": 1679
    },
    {
        "number": 772,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) <= K:\n        return ''\n    k = K - len(test_str)\n    i = 0\n    result = ''\n    while i < len(test_str):\n        if len(test_str[i:i+k])!= k:\n            result += test_str[i]\n            i += 1\n        else:\n            result += test_str[i]\n            i += 1\n    return result\n",
        "test": "assert     remove_length(\"abcdefgh\", 3) == \"abcdefgh\"",
        "num_ids": 3386
    },
    {
        "number": 773,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    sub = re.findall(pattern, text)\n    for i in range(len(sub)):\n        if sub[i][0] in pattern:\n            if i < len(sub)-1:\n                if sub[i][0] == sub[i+1][0]:\n                    return i\n    return None\n    \ndef find_all_substring(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return a list of the results.\n    '''\n    sub = re.findall(pattern, text)\n    sub = [i for i in sub if i!= None]\n    return sub\n",
        "test": "assert     occurance_substring('abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') == None",
        "num_ids": 1300
    },
    {
        "number": 775,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return [x for x in nums if x % 2!= 0]\n",
        "test": "assert     odd_position([])==[]",
        "num_ids": 717
    },
    {
        "number": 776,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].isupper() and test_str[i+1].isupper():\n            count += 1\n    return count\n",
        "test": "assert     count_vowels('') == 0, 'Should be 0'",
        "num_ids": 1011
    },
    {
        "number": 777,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "test": "assert     find_sum([]) == 0, 'Empty array given'",
        "num_ids": 608
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for i, elem in enumerate(list1):\n        if elem not in result:\n            result.append(elem)\n            if i > 0 and elem == result[i-1]:\n                result.append(result[i-1])\n            if i < len(list1) - 1:\n                result.append(result[i+1])\n    return result\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 6006
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if len(list1) == 0:\n        return {}\n    else:\n        n = len(list1)\n        return {list1[i][0]:len(list1[i]) for i in range(0,n)}\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 4916
    },
    {
        "number": 780,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # your code here\n    comb_list = []\n    for i in range(len(test_list)):\n        if test_list[i] not in comb_list:\n            comb_list.append(test_list[i])\n    return comb_list\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 1572
    },
    {
        "number": 781,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i=2\n    while i<math.floor(math.sqrt(n))+1:\n        if (n%i==0):\n            if (n/i==i):\n                return False\n            else:\n                return True\n        i=i+1\n    else:\n        return True\n",
        "test": "assert     count_divisors(11) == True",
        "num_ids": 1169
    },
    {
        "number": 782,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for index in range(len(arr)):\n        if index%2 == 0:\n            odd_sum += arr[index]\n    return odd_sum\n",
        "test": "assert     odd_length_sum([]) == 0",
        "num_ids": 831
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r < 0:\n        r = 0\n    elif r > 255:\n        r = 255\n    if g < 0:\n        g = 0\n    elif g > 255:\n        g = 255\n    if b < 0:\n        b = 0\n    elif b > 255:\n        b = 255\n    h = 0\n    if r * 0.299 + g * 0.587 + b * 0.114 > 255:\n        h = 255\n    elif r * 0.299 + g * 0.587 + b * 0.114 < 0:\n        h = 0\n    s = 0\n    if r * 0.587 + g * 0.114 > 255:\n        s = 255\n    elif r * 0.587 + g * 0.114 < 0:\n        s = 0\n    v = 0\n    if r * 0.299 + g * 0.587 < 0:\n        v = 0\n    elif r * 0.299 + g * 0.587 + b * 0.114 > 255:\n        v = 255\n    elif r * 0.299 + g * 0.587 + b * 0.114 > 0:\n        v = 255\n    h = h % 180\n    if h > 360:\n        h = h % 360\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0,0,0)",
        "num_ids": 1761
    },
    {
        "number": 784,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum_even = 0\n    sum_odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            sum_even += i\n        else:\n            sum_odd += i\n    return sum_even * sum_odd\n",
        "test": "assert         mul_even_odd([1,2,3,4]) == 24, \"mul_even_odd() function fail\"",
        "num_ids": 2623
    },
    {
        "number": 785,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(\",\"))\n",
        "test": "assert     tuple_str_int('1,2,3') == (1, 2, 3)",
        "num_ids": 3052
    },
    {
        "number": 786,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    \n    # base case\n    if not a:\n        return 0\n    # TODO: return index of last element which is smaller than the new value \n    if x < a[0]:\n        return bisect_left(a, x)\n    # TODO: find index of the element which is smaller than the new value and\n    # find the first position of it so we can insert it before the element which is\n    # smaller than the new value\n    else:\n        if a[-1] > x:\n            i = bisect_right(a, x)\n            return i\n        else:\n            return bisect_right(a, x) + 1\n",
        "test": "assert     right_insertion(0,1) == 0",
        "num_ids": 1102
    },
    {
        "number": 787,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'([a-zA-Z\\n]+)b?'\n    matches = re.findall(pattern, text)\n    if matches == []:\n        return False\n    else:\n        return True\n",
        "test": "assert     'Hello world' == 'Hello world'",
        "num_ids": 6899
    },
    {
        "number": 788,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n",
        "test": "assert     new_tuple(['a', 'b', 'c', 'd'], 'abc') == ('a', 'b', 'c', 'd')",
        "num_ids": 1497
    },
    {
        "number": 790,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert     even_position([])",
        "num_ids": 605
    },
    {
        "number": 791,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    try:\n        if type(test_tup)!= tuple:\n            raise TypeError\n        tup = test_tup\n        tup = tuple(filter(lambda x: x!='', tup))\n        return tup\n    except TypeError:\n        raise TypeError('The given tuple is not valid')\n    except:\n        raise TypeError('An error has occured')\n",
        "test": "assert     remove_nested((1, (2, 3, 4), 5))!= ((1, 2, 3, 5), 4, 5)",
        "num_ids": 1030
    },
    {
        "number": 792,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "test": "assert     count_list([]) == 0",
        "num_ids": 699
    },
    {
        "number": 793,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # assume sorted\n    # len(arr)\n    # if x not in arr:\n    #     return -1\n    # else:\n    #     return arr.index(x)\n    if not arr:\n        return -1\n    if arr[-1] < arr[-2]:\n        return len(arr)\n    else:\n        return arr[-2]\n",
        "test": "assert     last([3,1,2], 3) == 1",
        "num_ids": 859
    },
    {
        "number": 794,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Write your code here.\n    # input: str text\n    # output: the matched string\n    if re.search(\"a\\b\",text):\n        return(re.search(\"a\\b\",text).group(0))\n    else:\n        return(text)\n",
        "test": "assert     re.search(r'([a-zA-Z]{2,})\\b','sdfs')",
        "num_ids": 3675
    },
    {
        "number": 796,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    if len(dict.keys()) == 0:\n        return 0\n    \n    else:\n        return sum(dict.values())\n",
        "test": "assert     return_sum({1:2, 3:4, 5:6}) == 12, \"Success\"",
        "num_ids": 797
    },
    {
        "number": 797,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd=0\n    for i in range(n+1):\n        if i%2==0:\n            sum_odd+=i\n    return sum_odd\n",
        "test": "assert     sum_odd(0) == 0",
        "num_ids": 748
    },
    {
        "number": 798,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "test": "assert     sum([1, 2, 3, 4]) == 10",
        "num_ids": 566
    },
    {
        "number": 799,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = bin(n)[2:].zfill(d)\n    return int(n,2)\n",
        "test": "assert     (left_rotate(0,0) == 0)",
        "num_ids": 1581
    },
    {
        "number": 800,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile(\"\\s\")\n    return pattern.sub(\" \", text)\n",
        "test": "assert     remove_all_spaces(\"\") == \"\"",
        "num_ids": 695
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #print(x,y,z)\n    c=0\n    if x==y:\n        c+=1\n    elif y==z:\n        c+=1\n    elif x==z:\n        c+=1\n    return c\n",
        "test": "assert     test_three_equal(2,3,5) == 0",
        "num_ids": 1109
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    num_rotations = 0\n    while (len(arr) - 1 > 0):\n        num_rotations += 1\n        if arr[len(arr) - 1] < arr[len(arr) - 2]:\n            arr[len(arr) - 1], arr[len(arr) - 2] = arr[len(arr) - 2], arr[len(arr) - 1]\n        else:\n            arr[len(arr) - 1], arr[len(arr) - 2] = arr[len(arr) - 2], arr[len(arr) - 1]\n        del arr[len(arr) - 2]\n    return num_rotations",
        "test": "assert     count_rotation([3,1,5,2]) == 3",
        "num_ids": 1179
    },
    {
        "number": 803,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the given number is perfect square\n    if n % 2 == 0 :\n        # check if n is even\n        if n == 1 :\n            return True\n        # Check if n is odd\n        elif n % 2 == 1 :\n            return False\n    # Check if the number is perfect square\n    else :\n        # check if n is even\n        if n == 1 :\n            return False\n        # Check if n is odd\n        elif n % 2 == 1 :\n            return False\n    # n is perfect square\n    return True\n",
        "test": "assert     is_perfect_square(27) == False",
        "num_ids": 932
    },
    {
        "number": 804,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    n = len(arr) \n    if n % 2 == 0: \n        return True\n    else: \n        return False\n    \n",
        "test": "assert     is_product_even([]) == True, \"is_product_even() test failed\"",
        "num_ids": 981
    },
    {
        "number": 805,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for x in lists:\n        for y in x:\n            if y > max_sum:\n                max_sum = y\n                max_list = x\n    return max_list\n",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 1403
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(sorted(test_str.count(u) for u in set(test_str)))\n",
        "test": "assert     max_run_uppercase('TEST'),'max_run_uppercase failed: should return \"TEST\"!'",
        "num_ids": 1440
    },
    {
        "number": 807,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    nums = sorted(nums)\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            return nums[i]\n    return False\n",
        "test": "assert     first_odd([1,2,3]) == 2",
        "num_ids": 766
    },
    {
        "number": 808,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_K(['one', 'two', 'three'], 3), 'Three is not a tuple'",
        "num_ids": 941
    },
    {
        "number": 809,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for elem in test_tup2:\n        if elem < test_tup1[0]:\n            return False\n    return True\n",
        "test": "assert     check_smaller([2,3,4], [2,3,1,4]) == False",
        "num_ids": 946
    }
]