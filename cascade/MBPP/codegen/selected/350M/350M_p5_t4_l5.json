[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass",
        "test": "assert     similar_elements(('b','a'), ('a','b')) == True",
        "num_ids": 2491
    },
    {
        "number": 3,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_not_prime(0) is False",
        "num_ids": 497
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    for i in range(n,0,-1):\n        heapq.heappop(heap)\n    return [j[1] for j in heap]\n",
        "test": "assert     heap_queue_largest([2,3,4,5,6,7,8,9],0) == []",
        "num_ids": 807
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    return x % 2 == 0\n",
        "test": "assert     is_Power_Of_Two(1) == False",
        "num_ids": 389
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile('[a-zA-Z]+')\n    long_words = []\n    text = pattern.findall(text)\n    for word in text:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert     find_char_long('Hello world')",
        "num_ids": 666
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n",
        "test": "assert     square_nums([]) == []",
        "num_ids": 2503
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #def binary_search(a, l, r, n):\n    rotations = 0\n    i = 0\n    n = len(str)\n    while (i < n):\n        j = i + 1\n        if (i < n - 1):\n            if (str[j] == str[i]):\n                j = j + 1\n            else:\n                if (str[j - 1] == str[i]):\n                    j = j - 1\n                else:\n                    rotations = rotations + 1\n                    if (j > i):\n                        j = j + 1\n                    else:\n                        j = j + 1\n        i = i + 1\n    return rotations\n",
        "test": "assert ",
        "num_ids": 366
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # if len(s)==0: return ''\n    # if len(s)==1: return ''\n    if len(s)==0: return s[:1]\n    if len(s)==1: return s[1:]\n",
        "test": "assert     remove_Occ(\"\", \"\") == \"\"",
        "num_ids": 447
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s=0\n    for i in M:\n        s+=i\n    for i in range(s):\n        for j in range(s):\n            if j<i:\n                print(end=\" \")\n            else:\n                print(end=\" \")\n        print()\n        \ndef maxsum_matrix(M):\n    '''\n    Write a function to find the maximum sum of a given matrix.\n    '''\n    s=0\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            s+=M[i][j]\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if j<i:\n                print(end=\" \")\n            else:\n                print(end=\" \")\n        print()\n    print(\"the maximum sum is \" + str(s))\n",
        "test": "assert     sort_matrix([[2, 3, 4, 5], [7, 8, 9, 10], [6, 7, 8, 9], [1, 2, 3, 4]]) == [[2, 3, 4, 5], [1, 2, 3, 4], [6, 7, 8, 9], [9, 8, 7, 6]]",
        "num_ids": 1373
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * h)\n",
        "test": "assert     find_Volume(0,1,0) == 0",
        "num_ids": 676
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not re.search(r'\\w', text):\n        return False\n    for i in range(len(text)):\n        if not re.search(r'\\w', text[i]):\n            return False\n    return True\n",
        "test": "assert     text_lowercase_underscore(\"The quick brown fox jumps over the lazy tiger\") == False",
        "num_ids": 2438
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square_area = 4*a\n    return square_area\n    \n",
        "test": "assert     square_perimeter(6) == 24",
        "num_ids": 149
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = []\n    for i in range(len(string)):\n        if string[i] not in l:\n            l.append(string[i])\n    return l\n",
        "test": "assert     str_to_list(\"\") == []",
        "num_ids": 605
    },
    {
        "number": 19,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    for i in range(len(array)):\n        if array.count(array[i]) > 1:\n            print('found a duplicate in the input array')\n            return True\n    return False\n",
        "test": "assert     test_duplicate([1, 2, 3, 1]) == True, 'test_duplicate failed'",
        "num_ids": 611
    },
    {
        "number": 20,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n",
        "test": "assert     is_woodall(3) == False",
        "num_ids": 301
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = num * 2\n    while rev_num >= 1:\n        if rev_num % 2 == 0:\n            rev_num /= 2\n        else:\n            rev_num -= 1\n    return rev_num\n",
        "test": "assert     rev(0) == 0",
        "num_ids": 438
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_num = 0\n    for i in arr :\n        if i > Max_num :\n            Max_num = i\n    return Max_num\n",
        "test": "assert     find_Max_Num([3,3,3,3,3,3,3,3]) == 3, 'Third test failed'",
        "num_ids": 920
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return True\n    else: \n        return False\n",
        "test": "assert     opposite_Signs(2,1) == 1",
        "num_ids": 348
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**3 % 10 == 1\n",
        "test": "assert     is_octagonal(0) == False, \"The first ten digits are not 0.\"",
        "num_ids": 433
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    count_to_sub = 0\n    \n    for i in range(0, len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1].isdigit() and int(s[i:j+1]) == int(s[i:j+1]):\n                count_to_sub = count_to_sub + 1\n            else:\n                break\n        \n    return count_to_sub\n",
        "test": "assert     count_Substrings(\"\") == 0",
        "num_ids": 666
    },
    {
        "number": 62,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    #print(xs)\n    lst = []\n    for num in xs:\n        lst.append(num)\n    return lst[0]\n",
        "test": "assert     smallest_num([1, 2, 3]) == 1",
        "num_ids": 472
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    lst = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            lst.append((test_list[i], test_list[j]))\n    return max(lst)\n",
        "test": "assert     max_difference([0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == (19, 20)",
        "num_ids": 1044
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n",
        "test": "assert     subject_marks([(1, 3), (2, 4), (3, 5)]) == [(1, 3), (2, 4), (3, 5)]",
        "num_ids": 625
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for x in data_list:\n        sum += x\n    return sum\n    ",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 404
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([0, 0, 0, 0, 0, 0]) == 0",
        "num_ids": 343
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    def count(n, memo = {}):\n        if n in memo:\n            return memo[n]\n        \n        if n == 0:\n            return 1\n        \n        if n == 1:\n            return 1\n        \n        if n == 2:\n            return 2\n        \n        ans = count(n - 1, memo) + count(n - 2, memo)\n        \n        memo[n] = ans\n        \n        return ans\n    \n    return count(n)\n",
        "test": "assert         bell_number(5) == 8, 'The function bell_number has an incorrect result'",
        "num_ids": 581
    },
    {
        "number": 68,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is monotonic or not\n    if len(A) <= 1:\n        return True\n    # for all indexes except the last one\n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([]) == True",
        "num_ids": 818
    },
    {
        "number": 69,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    def recursive(l, s):\n        if len(s) == 0:\n            return True\n        if len(l) == 0:\n            return False\n        if s[0] == l[0]:\n            return recursive(l[1:], s[1:])\n        return recursive(l[1:], s)\n        \n    return recursive(l, s)",
        "test": "assert     is_sublist([1,2,3,4,5], [5,4,3,2,1,0]) == False",
        "num_ids": 676
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 1:\n        return Input[0] == Input[0]\n    else:\n        for i in range(len(Input) - 1):\n            if Input[i]!= Input[i + 1]:\n                return False\n    return True\n",
        "test": "assert     find_equal_tuple(()) == True",
        "num_ids": 837
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Setting the length of the array\n    length = len(nums)\n    # Setting the first element as the smallest\n    first = nums[0]\n    # Setting the rest of the elements as the largest\n    rest = nums[length-1]\n",
        "test": "assert ",
        "num_ids": 600
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return False\n    elif n == 1: \n        return True \n    elif n == 2: \n        return False \n    else: \n        return False \n",
        "test": "assert     dif_Square(0) == 0",
        "num_ids": 409
    },
    {
        "number": 74,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        for pattern in patterns:\n            if color!= pattern:\n                return False\n    return True\n",
        "test": "assert     is_samepatterns([],[]) == True, 'Checking wrong pattern'",
        "num_ids": 2809
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for test_item in test_list:\n        if not(test_item[0] % K) and test_item[1] % K:\n            return True\n    return False\n",
        "test": "assert     find_tuples([(1,2),(3,4)],3) == True",
        "num_ids": 2627
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    result = 0\n    while n >= 11: \n        result = result + 1\n        n = n // 10\n    return result % 2 == 1\n",
        "test": "assert     is_Diff(2) == False ",
        "num_ids": 253
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    if len(words) % 2 == 1:\n        return False\n    else:\n        return True\n",
        "test": "assert word_len(\"dear\") == 0, \"word_len(string) is wrong\"",
        "num_ids": 299
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n): \n        if (n - i) in (n - 1, n - 2): \n            return n - i \n    \n    \n    return 1",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 344
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\ndef volume_cylinder(l,r):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume = (l * r) ** 2\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    volume = (side ** 2) * 4\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = width * height\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\ndef volume_cylinder(l,r):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume = l * r\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = width * height\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\ndef volume_cylinder(l,r):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume = (l * r) ** 2\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_triangle(side):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    volume = (4/3) * math.pi * side ** 3\n    return volume\ndef volume_pentagon(side):\n    '''\n    Write a function to calculate the volume of a pentagon.\n    '''\n    volume = side ** 4\n    return volume\ndef volume_heptagon(side):\n    '''\n    Write a function to calculate the volume of a heptagon.\n    '''\n    volume = side ** 5\n    return volume\ndef volume_octagon(side):\n    '''\n    Write a function to calculate the volume of a octagon.\n    '''\n    volume = side ** 6\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = math.pi * (radius ** 2)\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = width * height\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = width * height\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = width * height\n    return volume\ndef volume_pentagon(side):\n    '''\n    Write a function to calculate the volume of a pentagon.\n    '''\n    volume = side ** 4\n    return volume\ndef volume_heptagon(side):\n    '''\n    Write a function to calculate the volume of a heptagon.\n    '''\n    volume = side ** 5\n    return volume\ndef volume_octagon(side):\n    '''\n    Write a function to calculate the volume of a octagon.\n    '''\n    volume = side ** 6\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_heptagon(side):\n    '''\n    Write a function to calculate the volume of a heptagon.\n    '''\n    volume = math.pi * side ** 2\n    return volume\ndef volume_heptagon(side):\n    '''\n    Write a function to calculate the volume of a heptagon.\n    '''\n    volume = side ** 3\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = width * height\n    return volume\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_triangle(side):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    volume = side ** 3\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = width * height\n    return volume\ndef volume_pentagon(side):\n    '''\n    Write a function to calculate the volume of a pentagon.\n    '''\n    volume = side ** 4\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_pentagon(side):\n    '''\n    Write a function to calculate the volume of a pentagon.\n    '''\n    volume = side ** 3\n    return volume\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_pentagon(side):\n    '''\n    Write a function to calculate the volume of a pentagon.\n    '''\n    volume = side ** 4\n    return volume\ndef volume_heptagon(side):\n    '''\n    Write a function to calculate the volume of a heptagon.\n    '''\n    volume = side ** 5\n    return volume\ndef volume_heptagon(side):\n    '",
        "test": "assert     volume_sphere(6) == 6 * 6 * 3.141592654",
        "num_ids": 275
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.upper()\n    list_of_Char = []\n    for i in range(len(strr)):\n        strr[i] = chr(ord(strr[i]) % 26 + 97)\n    for i in range(len(strr)):\n        list_of_Char.append(strr[i])\n    return list_of_Char\n",
        "test": "assert     get_Char('012345') == '8'",
        "num_ids": 698
    },
    {
        "number": 84,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    elif n == 4: \n        return 3\n    elif n == 5: \n        return 4\n    elif n == 6: \n        return 5\n    elif n == 7: \n        return 6\n    elif n == 8: \n        return 7\n    elif n == 9: \n        return 8\n    elif n == 10: \n        return 9\n    else: \n        return n + sequence(n-1)\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 2493
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return round(3.14*r*r,2)\n    \ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return round(3.14*r*r,2)\n",
        "test": "assert     surfacearea_sphere(0) == 0",
        "num_ids": 236
    },
    {
        "number": 86,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = n%6\n    if h==0:\n        h=3\n        n//=3\n    else:\n        h=h-1\n    return n\n",
        "test": "assert     centered_hexagonal_number(0) == 0",
        "num_ids": 401
    },
    {
        "number": 87,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n",
        "test": "assert     merge_dictionaries_three({'a':1, 'b':2, 'c':3}, {'a':1, 'b':2, 'c':3}, {'a':1, 'b':2, 'c':3}) == {'a':1, 'b':2, 'c':3}",
        "num_ids": 988
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 2782
    },
    {
        "number": 89,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    start, end = 1, N\n    closest = float('inf')\n    while start <= end:\n        mid = (start + end) // 2\n        if mid < N:\n            start = mid+1\n        elif mid > N:\n            end = mid-1\n        else:\n            closest = mid\n            break\n    return closest\n",
        "test": "assert     closest_num(1) == 1",
        "num_ids": 2546
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(\"Start writing the function\")\n    print(\"LENGTH OF LONGEST WORDS: \", max(list1, key = len))\n    print(\"\\n\")\n",
        "test": "assert     len_log([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == 4",
        "num_ids": 278
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if (sub_str in str1):\n        return True\n    else:\n        return False\n",
        "test": "assert     find_substring(\"This is a string\", \"This\") == 1",
        "num_ids": 784
    },
    {
        "number": 92,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return is_undulating(n - 1)\n    else:\n        return is_undulating(n // 2)\n",
        "test": "assert     is_undulating(0) == True",
        "num_ids": 418
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert     power(1, 3) == 1",
        "num_ids": 248
    },
    {
        "number": 94,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_second = test_list[0][1]\n    for i in test_list:\n        if smallest_second > i[1]:\n            smallest_second = i[1]\n    return smallest_second\n",
        "test": "assert     index_minimum([(1,3),(1,2),(2,2),(1,3),(1,2),(2,2)]), 1",
        "num_ids": 726
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    elif len(lst) == 2:\n        return min(lst[0], lst[1])\n    else:\n        mid = len(lst)//2\n        left = Find_Min_Length(lst[:mid])\n        right = Find_Min_Length(lst[mid:])\n        return min(left, right)\n",
        "test": "assert     Find_Min_Length([]) == 0, \"The list should be empty\"",
        "num_ids": 569
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            divs+= 1\n    return divs\n",
        "test": "assert     divisor(5) == 2",
        "num_ids": 373
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for x in list1:\n        for y in x:\n            if y in d:\n                d[y] += 1\n            else:\n                d[y] = 1\n    return d\n",
        "test": "assert     frequency_lists([[5,2,4,1], [1,5,1,2], [1,3,2,2], [1,2,5,1], [1,1,3,2], [4,3,1,1]]) == {",
        "num_ids": 560
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n    \n",
        "test": "assert     multiply_num([1,2,3]) == 6",
        "num_ids": 317
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n))[2:]\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 503
    },
    {
        "number": 100,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    end = len(str(num)) - 1\n    if num <= 0:\n        return 1\n    elif num < 0 or end < 0:\n        return num\n    \n    mid = (end + num // 2) - 1\n    mid = mid % 2\n    if mid == 0:\n        return num\n    if num == 1:\n        return num\n    if mid == 1:\n        return num\n    if num % 10 == 1:\n        return num * 10\n    if num % 10 == 2:\n        return num * 10 + 1\n",
        "test": "assert     next_smallest_palindrome(1) == 1",
        "num_ids": 646
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k == n:\n        return arr[n-1]\n    k = k % n\n    return arr[k]\n",
        "test": "assert     kth_element(arr=[1,2,3,4,5], k=5) == 5, \"kth_element\"",
        "num_ids": 857
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # turn to lowercase\n    word = word.lower()\n    # split up words\n    lst = word.split('_')\n    # capitalize first letter of each word\n    for i in range(0, len(lst)):\n        lst[i] = lst[i].capitalize()\n    # return new string\n    return ''.join(lst)\n",
        "test": "assert     snake_to_camel(\"a\") == \"A\"",
        "num_ids": 2561
    },
    {
        "number": 103,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # If m has exactly 2 distinct primes, then return the\n    # number of primes it has.\n    if m == 2:\n        return 1\n    \n    # A is the smallest prime to n.\n    A = 1\n    \n    # d is the largest prime that has n distinct primes.\n    d = min(n - 1, m)\n    \n    # Find the number of primes n that, when divided by m, have n\n    # distinct primes.\n    for i in range(1, m + 1):\n        \n        # Find primes in n that are smaller than i.\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                break\n        else:\n            # If primes have been found, the number of primes\n            # it has is the number of primes that have at least\n            # one prime that divides i.\n            # \n            # m has a factor of 2.\n            if i % 2 == 0:\n                A += 1\n            else:\n                break\n    \n    # If A is the Eulerian number, then it is the Eulerian\n    # number.\n    return A\n",
        "test": "assert     eulerian_num(n = 10, m = 0) == 1",
        "num_ids": 839
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # just in case of sorting a list with a string\n    if type(input_list) is not list:\n        raise TypeError('input_list must be a list')\n    if type(input_list) is not list:\n        raise TypeError('input_list must be a list of lists')\n    # create a new list with sorted sublists\n    new_list = []\n    for sublist in input_list:\n        new_list.append(sublist)\n    # sort the sublists\n    new_list.sort()\n    # return the new sorted list\n    return new_list\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 2264
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x == True:\n            count = count + 1\n    return count\n",
        "test": "assert     count([]) == 0, \"Count should return 0\"",
        "num_ids": 692
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # We want to iterate through each of the tuples in order and add the elements\n    # to our test_list.\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    return test_list\n",
        "test": "assert     add_lists([1,2,3],[(1,2,3)]), 'Wrong return'",
        "num_ids": 616
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            sorted_list.append(num1[i])\n            i=i+1\n        else:\n            sorted_list.append(num2[j])\n            j=j+1\n    while i<len(num1):\n        sorted_list.append(num1[i])\n        i=i+1\n    while j<len(num2):\n        sorted_list.append(num2[j])\n        j=j+1\n    return sorted_list\ndef mergesort(l):\n    if len(l)<=1:\n        return l\n    mid = len(l)//2\n    left = mergesort(l[:mid])\n    right = mergesort(l[mid:])\n    return merge_sorted_list(left,right,l)\ndef merge_2_lists(num1,num2,num3):\n    '''\n    Write a function that merges two sorted lists into a single sorted list.\n    '''\n    sorted_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            sorted_list.append(num1[i])\n            i=i+1\n        else:\n            sorted_list.append(num2[j])\n            j=j+1\n    while i<len(num1):\n        sorted_list.append(num1[i])\n        i=i+1\n    while j<len(num2):\n        sorted_list.append(num2[j])\n        j=j+1\n    return sorted_list\n",
        "test": "assert     merge_sorted_list([0,1,1,2], [2,3,4], [2,3,4]) == [0,1,1,2,2,3,4]",
        "num_ids": 1463
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return odd_Equivalent(s, n-1) + odd_Equivalent(s, n-2)\n",
        "test": "assert     odd_Equivalent(1, 1) == 1",
        "num_ids": 4394
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def list_unique_elements(list_of_lists):\n        '''\n        Return True if all the elements in the lists are unique, else False.\n        '''\n        for l in list_of_lists:\n            if len(l) < 2:\n                continue\n            if l[0] == l[-1]:\n                continue\n            if l[0] not in l:\n                return False\n        return True\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1,len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements\n",
        "test": "assert     common_in_nested_lists([[1,3], [2,3], [1]]) == []",
        "num_ids": 1327
    },
    {
        "number": 113,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert         check_integer(\"3\")",
        "num_ids": 2339
    },
    {
        "number": 115,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            if j==\"\":\n                return True\n    return False\ndef check_vowels(list1):\n    '''\n    Write a function to check whether all characters in a string are vowels or not.\n    '''\n    for i in list1:\n        for j in i:\n            if j not in 'aeiouAEIOU':\n                return False\n    return True\ndef duplicate_check(list1):\n    '''\n    Write a function to check whether the elements of a list are duplicate or not.\n    '''\n    if len(list1)%2==0:\n        for i in range(0,len(list1),2):\n            if list1[i]==list1[i+1]:\n                return True\n    return False\ndef list_to_str(list1):\n    '''\n    Write a function that takes a list of numbers and returns a string of those numbers.\n    '''\n    return''.join(str(i) for i in list1)\ndef is_palindrome(number):\n    '''\n    Write a function to check whether a number is palindrome or not.\n    '''\n    num=str(number)\n    return num[::-1]==num[::-1]\ndef palindrome_test(str1):\n    '''\n    Write a function that takes a string and return true if it is a palindrome or false if not.\n    '''\n    return str1==str(list_to_str(reversed(str_to_list(str1))))\ndef positive_test(list1):\n    '''\n    Write a function that takes a list and return whether all elements of the list are positive or not.\n    '''\n    for i in list1:\n        if i<0:\n            return False\n    return True\ndef list_to_str(list1):\n    '''\n    Write a function that takes a list of numbers and returns a string of those numbers.\n    '''\n    return''.join(str(i) for i in list1)\ndef list_to_str2(list1):\n    '''\n    Write a function that takes a list of numbers and returns a string of those numbers.\n    '''\n    return''.join(str(i) for i in list1)\ndef string_to_int(s):\n    '''\n    Write a function that takes a string of numbers and returns a list of numbers.\n    '''\n    return [int(i) for i in s.split() if i.isdigit()]\ndef list_to_int(list1):\n    '''\n    Write a function that takes a list of numbers and returns a list of integers.\n    '''\n    return [int(i) for i in list1 if i.isdigit()]\ndef list_to_list(l):\n    '''\n    Write a function that takes a list of numbers and returns a list of numbers.\n    '''\n    return [int(i) for i in l if i.isdigit()]\ndef list_to_string(l):\n    '''\n    Write a function that takes a list of numbers and returns a list of strings.\n    '''\n    return [str(i) for i in l if i.isdigit()]\ndef check_user_input(user_input):\n    '''\n    Write a function that takes a user input and return whether it is a palindrome or not.\n    '''\n    #string_to_int(user_input)\n    #list_to_int(user_input)\n    if user_input==\"q\":\n        return False\n    if is_palindrome(user_input):\n        return True\n    return user_input==\"n\"\ndef list_to_string(l):\n    return \" \".join(str(i) for i in l)\ndef int_to_str(x):\n    return [str(i) for i in x]\ndef string_to_str(s):\n    return''.join(i for i in s)\ndef is_palindrome(s):\n    '''\n    Write a function that takes a string and return whether the string is a palindrome or not.\n    '''\n    return s==s[::-1]\ndef palindrome_test(s):\n    '''\n    Write a function that takes a string and return whether it is a palindrome or not.\n    '''\n    #return list_to_str2(s)\n    return s==s[::-1]",
        "test": "assert     empty_dit(['a']) == 0",
        "num_ids": 225
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    # N is the number of elements in the tuple\n    if len(nums) == 0:\n        return 0\n    # Check if all elements are positive\n    if all(e >= 0 for e in nums):\n        # Initialize an empty string to store the result\n        result = ''\n        # Start at 0 as we already have the first positive element\n        for i in range(0, len(nums)):\n            # Add the element to the result\n            result += str(nums[i])\n        # Return the result\n        return int(result)\n    else:\n        raise ValueError('All elements in nums should be positive')\n",
        "test": "assert     tuple_to_int([0]) == 0",
        "num_ids": 727
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    temp_list = []\n    for item in test_list:\n        temp_list.append(float(item))\n    return temp_list\n",
        "test": "assert     list_to_float([]) == []",
        "num_ids": 872
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    lst = string.split(\" \")\n    return lst\n",
        "test": "assert     string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 2467
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = (start + end)//2\n        if arr[mid] == arr[mid - 1]:\n            count += 1\n            start = mid + 1\n        else:\n            end = mid - 1\n    return count\n",
        "test": "assert     search('aabbc') == 0",
        "num_ids": 516
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if not list1:\n        return None\n    if len(list1)==1:\n        return list1[0][0]\n    tuple1 = list1[0]\n    for tuple2 in list1[1:]:\n        if tuple1[0]>tuple2[0] and tuple2[0]>0:\n            tuple1 = tuple2\n    return max([tuple1[0]*tuple1[1], tuple2[0]*tuple2[1]])\n",
        "test": "assert max_product_tuple([(1, 2), (1, 2)]) == 2",
        "num_ids": 604
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n    amicable_numbers_sum_iter = 0\n    numbers = range(1, limit + 1)\n    for n in numbers:\n        if n not in amicable_numbers:\n            amicable_numbers.append(n)\n            amicable_numbers_sum += n\n        elif n == amicable_numbers_sum_iter:\n            amicable_numbers_sum += amicable_numbers_sum_iter\n            amicable_numbers_sum_iter = 0\n        elif amicable_numbers_sum_iter!= 0:\n            amicable_numbers_sum_iter += amicable_numbers_sum_iter\n            amicable_numbers_sum_iter = 0\n    return amicable_numbers_sum\n",
        "test": "assert     amicable_numbers_sum(1) == 1",
        "num_ids": 910
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == b:\n        return 0\n    \n    angle = cmath.phase(a) + cmath.phase(b)\n    return angle\n",
        "test": "assert     angle_complex(1,1)==0",
        "num_ids": 688
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_zeroes = 0\n    count_ones = 0\n    start = 0\n    end = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zeroes += 1\n        if string[i] == '1':\n            count_ones += 1\n        \n        if i == 0 or string[i-1] == '1':\n            start = i\n        if i == len(string)-1 or string[i+1] == '1':\n            end = i\n    \n    if count_zeroes > count_ones:\n        return (count_zeroes - count_ones)\n    elif count_zeroes < count_ones:\n        return count_ones - count_zeroes\n    else:\n        return (count_zeroes - count_ones) + (count_ones - count_zeroes)\n    \ndef is_palindrome(string):\n    '''\n    Given a string, check to see if it is a palindrome.\n    '''\n    string = list(string)\n    length = len(string)\n    \n    if length <= 1:\n        return True\n    \n    for i in range(length//2):\n        if string[i]!= string[length-i-1]:\n            return False\n    \n    return True\n",
        "test": "assert     find_length('aaaaaaaaaa') == 0, \"found a length of 0\"",
        "num_ids": 417
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # write your code here\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif a<b:\n        return 1\n    else:\n        return sum(a,b-a)\n",
        "test": "assert     sum(2,3) == 1",
        "num_ids": 403
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"x and y must be ints\")\n    return x * y\n",
        "test": "assert     multiply_int(2, 3) == 6",
        "num_ids": 576
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    word_l = []\n    for i in range(n):\n        word = str[i]\n        word_l.append(word)\n        for j in range(len(word)):\n            if word[j] not in words:\n                words.append(word[j])\n    return len(words)\n",
        "test": "assert long_words(10, [\"a\", \"p\", \"mp\", \"m\", \"p\", \"mpp\", \"m\", \"a\", \"p\", \"m\", \"a\", \"a\", \"p\", \"m\"]) == 3",
        "num_ids": 454
    },
    {
        "number": 129,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return len(my_matrix) == len(my_matrix[0])\n",
        "test": "assert     magic_square_test([[0,0,0],[0,0,0]]) == False",
        "num_ids": 1294
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    def get_occurrences(nums, value):\n        occurrence = defaultdict(int)\n        for num in nums:\n            occurrence[num] += 1\n        return occurrence\n    \n    max_occurrence = None\n    for num in nums:\n        occurrence = get_occurrences(nums, num)\n        if max_occurrence is None or max_occurrence[num] > occurrence[num]:\n            max_occurrence = occurrence\n    return max_occurrence[num]\n",
        "test": "assert     max_occurrences([1,2,2,3,3,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10]) == 3,'max_occurrences() should return 3'",
        "num_ids": 2881
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1[::-1]\n",
        "test": "assert     reverse_vowels(\"kayak\") == \"kayak\", \"test failed\"",
        "num_ids": 654
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s1 = '('\n    s2 = ')'\n    for item in tup1:\n        s1 += '('\n        s2 += ')'\n        s1 += str(item)\n        s2 += str(item)\n    s1 += s2\n    return s1\n",
        "test": "assert     tup_string(tuple()) == \"()\"",
        "num_ids": 346
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return nums[0] + sum_negativenum(nums[1:])\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 549
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    cnt = 0\n    for i in range(n, 0, -1):\n        if i % 2 == 0:\n            cnt += i\n        else:\n            cnt -= i\n    return cnt\n",
        "test": "assert     hexagonal_num(2) == 1",
        "num_ids": 599
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n",
        "test": "assert     zero_count([1]) == 0",
        "num_ids": 2489
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pow = 2\n    sum = 0\n    while pow <= n:\n        sum = sum + pow\n        pow = pow + pow\n    if n == sum:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(36) == False",
        "num_ids": 489
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    # calculate the circumference\n    return math.pi * 2 * r\n",
        "test": "assert         circle_circumference(r = 3) == 4.0",
        "num_ids": 170
    },
    {
        "number": 140,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n    for element in test_list:\n        if type(element) is list:\n            for element2 in element:\n                num_list.append(element2)\n        else:\n            num_list.append(element)\n    return num_list\n",
        "test": "assert     extract_singly([]) == []",
        "num_ids": 2825
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # sort the list with bubble sort\n    n = len(nums)\n    for i in range(n-1):\n        # if element is bigger than the first element of the list\n        if nums[i] > nums[i+1]:\n            # swap the two elements\n            nums[i],nums[i+1] = nums[i+1],nums[i]\n            # swap left half of the list\n            p = i\n            for j in range(i,n):\n                # if it is the last element, it is already sorted\n                if j == n-1:\n                    # If it is the last element, remove the last element\n                    if nums[j] < nums[n-1]:\n                        # Swap the last element with the first element\n                        nums[p],nums[j] = nums[j],nums[p]\n                # If it is not the last element, swap the two elements\n                else:\n                    # swap the two elements\n                    nums[j],nums[p] = nums[p],nums[j]\n    # Return the sorted list\n    return nums\n",
        "test": "assert     f\"The input array is {[2, 4, 1, 5, 3, 6, 7, 9]}\" == \"The input array is [2, 4, 1, 5, 3, 6, 7, 9]\"",
        "num_ids": 861
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            c+=1\n    return c\ndef count_differentpair(list1,list2):\n    '''\n    Write a function to count number items that are different in the same position of three given lists.\n    '''\n    c=0\n    for i in range(0,len(list1)):\n        if list1[i]!=list2[i]:\n            c+=1\n    return c\ndef count_all_t(list1,list2):\n    '''\n    Write a function to count number of distinct items in three given lists.\n    '''\n    c=0\n    for i in range(0,len(list1)):\n        if list1[i] not in list2:\n            c+=1\n    return c\ndef count_consecutive(list1,list2):\n    '''\n    Write a function to count number of items in consecutive lists.\n    '''\n    c=0\n    for i in range(1,len(list1)):\n        if list1[i-1]!=list1[i]:\n            c+=1\n    for i in range(0,len(list2)):\n        if list2[i-1]!=list2[i]:\n            c+=1\n    return c\ndef main():\n    '''\n    main function which takes user input and calls other functions in array_c.py file.\n    '''\n    user_input=input(\"Enter a list : \")\n    user_input_split=user_input.split(\",\")\n    l1,l2,l3=array_c.split_lists(user_input_split)\n    #print(l1)\n    print(count_all_t(l1,l2))\n    print(count_differentpair(l2,l3))\n    print(count_samepair(l1,l3))\n    print(count_differentpair(l3,l1))\n    print(count_samepair(l3,l1))\n    print(count_differentpair(l3,l1))\n    print(count_all_t(l1,l3))\n    print(count_differentpair(l1,l3))\n    print(count_differentpair(l3,l1))\n",
        "test": "assert     count_samepair(['a','a','a','a'],['a','a','b','b'],['a','a','a','a']) == 2",
        "num_ids": 762
    },
    {
        "number": 143,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    L = 0\n    for x in range(len(Input)):\n        if type(Input[x]) == tuple:\n            L += 1\n    return L\n",
        "test": "assert     find_lists((1, 2, 3, 5, 4)) == 0",
        "num_ids": 799
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff=arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i]-arr[i-1])>max_abs_diff:\n            max_abs_diff=arr[i]\n    return max_abs_diff\n",
        "test": "assert     max_Abs_Diff([-5, 2, 0, 4, 9, 0]) == 9",
        "num_ids": 745
    },
    {
        "number": 160,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b:\n        return (a, b)\n    if b == n:\n        return None\n    if a > n:\n        return None\n    if a < n:\n        return None\n    if n % 2 == 0:\n        return None\n    \n    x = n / 2\n    y = n - x\n    \n    if a * a + b * b == n:\n        return (a, b)\n    elif a * a + b * b > n:\n        return None\n    elif a * a + b * b < n:\n        return None\n    elif a * a + b * b == n:\n        if x % 2!= 0:\n            return None\n        else:\n            if a * x + b * x == n:\n                return (a, b)\n            elif a * x + b * x > n:\n                return None\n            elif a * x + b * x < n:\n                return None\n            elif a * x + b * x == n:\n                return None\n        \n    if a * a == n:\n        if a == b:\n            return (a, b)\n        else:\n            if b % 2!= 0:\n                return None\n            else:\n                return None\n    if a * a == n:\n        if a == b:\n            return (a, b)\n        else:\n            if b % 2!= 0:\n                return None\n            else:\n                return None\n    if a * a > n:\n        if b % 2!= 0:\n            return None\n        else:\n            return None\n    if a * a < n:\n        return None\n    if a * a == n:\n        if b % 2!= 0:\n            return None\n        else:\n            return None\n    \n    \ndef find_x_y(a, b, n):\n    '''\n    Return the tuple that satisfies ax + by = n as a tuple.\n    '''\n    if find_solution(a, b, n):\n        return (a, b)\n    elif find_solution(n, b, n):\n        return (n, n)\n    elif find_solution(a, a, b):\n        return (a, a)\n    elif find_solution(a, n, b):\n        return (a, n)\n    elif find_solution(n, a, n):\n        return (n, n)\n    elif find_solution(a, b, a):\n        return (a, a)\n    elif find_solution(b, n, n):\n        return (b, n)\n    elif find_solution(a, a, b):\n        return (a, b)\n    elif find_solution(a, n, b):\n        return (a, n)\n    \n",
        "test": "assert     find_solution(1, 2, 5) == None",
        "num_ids": 638
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_remove = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                list_remove.append(list2[j])\n                break\n            else:\n                continue\n        if len(list_remove) == 0:\n            return list1\n        else:\n            list_remove.clear()\n            continue\n    return list1\n",
        "test": "assert     remove_elements([], []) == []",
        "num_ids": 743
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # base case\n    if n==0:\n        return 0\n    return n-2*sum_series(n-2)\n",
        "test": "assert     sum_series(2) == 2",
        "num_ids": 382
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s * 2\n    i = 1\n    while i <= l:\n        a += s * i\n        i += 1\n    return a\n",
        "test": "assert     area_polygon(4, 1) == 12",
        "num_ids": 385
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Return True if the sum of the divisors is the same\n    # Return False if the sum of the divisors is not the same\n    sum = 0\n    for i in range(1,n+1): \n        sum += i \n    if sum == n: \n        return True\n    else: \n        return False\n",
        "test": "assert     div_sum(1) == 1",
        "num_ids": 520
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    result = {}\n    for letter in str1:\n        if letter not in result:\n            result[letter] = 0\n        result[letter] += 1\n    return len(result)\n",
        "test": "assert     count_char_position('Hi') == 2",
        "num_ids": 676
    },
    {
        "number": 166,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    return 0\n",
        "test": "assert     find_even_pair([]) == 0",
        "num_ids": 477
    },
    {
        "number": 167,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return next_power_of_2(n - 1) + 1\n",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 442
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    # your code here\n    a = [int(i) for i in a]\n    d = {num: 0 for num in a}\n    d = dict(sorted(d.items(), key=lambda item: item[1]))\n    return len([num for num in d if d[num] > 0])\n",
        "test": "assert     frequency(5,7) == 2",
        "num_ids": 332
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for index in range(m, n):\n        sum += list1[index]\n    return sum\n",
        "test": "assert     sum_range_list(0, 4, 4) == 0",
        "num_ids": 730
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = (a**2 + 4*a*a + 2)**0.5\n    print(\"The perimeter of the pentagon is: \", p)\n",
        "test": "assert     perimeter_pentagon(5) == 45",
        "num_ids": 2266
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] =='s':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance('x') == 0, 'count_occurance function should return 0'",
        "num_ids": 590
    },
    {
        "number": 222,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # pass\n    \n    try:\n        tuple_tuple = tuple(test_tuple)\n    except TypeError:\n        return False\n    except ValueError:\n        return False\n    return True\n",
        "test": "assert not    check_type((\"a\", \"b\")) == \"c\"",
        "num_ids": 686
    },
    {
        "number": 223,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[n-1] > x:\n        return is_majority(arr[:n], n-1, x)\n    else:\n        return True\n",
        "test": "assert     is_majority(['a','b','a','c'], 3, 'a'), \"is_majority returns True\"",
        "num_ids": 1010
    },
    {
        "number": 224,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n_bin = bin(n)\n    set_bits = []\n    for digit in n_bin[2:]:\n        set_bits.append(digit)\n    set_bits.reverse()\n    \n    return len(set_bits)\n",
        "test": "assert     count_Set_Bits(300), '300'",
        "num_ids": 650
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index_values = [index for index, char in enumerate(str) if index % 2 == 1]\n    str = ''.join(str)\n    return str.translate(str.maketrans('','','''\\u03c0-\\u03c9'\n    \\u03c0-\\u03c7'''))\n    \n",
        "test": "assert     odd_values_string(\"LEEEEE\") == \"LEEEEE\"",
        "num_ids": 584
    },
    {
        "number": 227,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        else:\n            return c\n    elif b>a:\n        if b>c:\n            return b\n        else:\n            return c\n    else:\n        if c>a:\n            return c\n        else:\n            return a\n",
        "test": "assert     min_of_three(3,4,5) == 5",
        "num_ids": 487
    },
    {
        "number": 228,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<=n<=r:\n        return True\n    elif n>=l and n<=r:\n        if (n%2)==0:\n            return all_Bits_Set_In_The_Given_Range(n,l,r-1)\n        else:\n            return all_Bits_Set_In_The_Given_Range(n+1,l,r-1)\n    else:\n        return False\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(3,1,1) == 0, \"the given range should be (3,1,1)\"",
        "num_ids": 1012
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    num_sorted_elements = 0\n    for i in range(0, n):\n        if (arr[i] < 0):\n            arr[i] = arr[i] * -1\n            num_sorted_elements += 1\n    arr_rearranged = []\n    for i in range(0, n):\n        if (arr[i] < 0):\n            arr_rearranged.append(0)\n        else:\n            arr_rearranged.append(arr[i])\n    for i in range(n, num_sorted_elements):\n        arr_rearranged.append(0)\n    return arr_rearranged\n",
        "test": "assert     re_arrange_array([-5, 3, -1, 0, 0], 5) == [0, -1, 3, -5, 0], \"re_arrange_array failed\"",
        "num_ids": 808
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1==None:\n        return None\n    \n    str1=str1.replace(char,'')\n    return str1\n",
        "test": "assert     replace_blank('','') == ''",
        "num_ids": 398
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) <= n:\n        return list1\n    else:\n        return larg_nnum(list1,n-1)\n        \n    \ndef rem_odd(list1):\n    '''\n    Write a function that takes in a list and a number and returns a list with all items from the list except items with index n-2.\n    '''\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            list1.remove(list1[i])\n    return list1\n        \ndef extend(list1,index):\n    '''\n    Write a function that takes in a list and a number and returns a new list with all items from the list except the item with index index.\n    '''\n    for i in range(index):\n        if i!= index:\n            list1.append(list1[i])\n        else:\n            list1.extend(list1[i])\n    return list1\n        \ndef move_siftdown(list1,index,list2):\n    '''\n    Write a function that takes in a list and a number and returns a new list with all items from the list except the item with index index and their predecessor.\n    '''\n    for i in range(index):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n            list2.remove(list1[i])\n        else:\n            list1.append(list1[i])\n            list2.append(list1[i])\n    return list1,list2\n",
        "test": "assert ",
        "num_ids": 420
    },
    {
        "number": 233,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h)/3\n",
        "test": "assert     lateralsuface_cylinder(0,0) == 0",
        "num_ids": 750
    },
    {
        "number": 234,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n",
        "test": "assert volume_cube(0) == 0.0",
        "num_ids": 345
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    for i in range(0,n):\n        if (i%2 == 0):\n            count = count + 1\n    if (count > 0):\n        return 1\n    else:\n        return 0\n",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 529
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n",
        "test": "assert ",
        "num_ids": 1149
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    for i in range(len(str)-1):\n        if str[i:i+2] == str[i+1:i+3]:\n            count += 1\n    return count\n",
        "test": "assert     number_of_substrings('abcabcde') == 0",
        "num_ids": 593
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequence = 0\n    for i in range(m, n+1):\n        total_sequence += i * i\n    return total_sequence\n",
        "test": "assert     get_total_number_of_sequences(1,1) == 1",
        "num_ids": 752
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    newlist = []\n    for index in list1:\n        if index in list2:\n            newlist.append(index)\n            list2.remove(index)\n    print(newlist)\n    return newlist\n",
        "test": "assert     replace_list([], []) == [], \"The lists are not the same\"",
        "num_ids": 2540
    },
    {
        "number": 242,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if len(str1) < 1:\n        return 0\n    elif len(str1) == 1:\n        return 1\n    elif len(str1) == 2:\n        return 1 + count_charac(str1[0])\n    else:\n        return (count_charac(str1[0]) + count_charac(str1[1:len(str1)]))\n",
        "test": "assert     count_charac('a') == 1",
        "num_ids": 549
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # I/P: intN = largest number to be checked\n    # Output: intP\n    # Logic:\n    # - If the input is less than or equal to 1, return 0\n    # - If the input is greater than 1, return the smallest power of 2\n    # - Else, find the next perfect square\n    # Example:\n    # Input: N = 12\n    # Output: 32\n    # Explanation:\n    # 32 = sqrt(32)\n    # 32^2 = sqrt(32)\n    # 32^2 = 3\n    # 32^3 = 9\n    # 32^4 = 16\n    # 32^5 = 25\n    # 32^6 = 36\n    # 32^7 = 49\n    # 32^8 = 64\n    # 32^9 = 81\n    # 32^10 = 123\n    if N < 1:\n        return 0\n    elif N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        i = 3\n        while (i * i <= N):\n            if N % i == 0:\n                j = N // i\n                while (j * j <= N):\n                    if N % j == 0:\n                        k = N // j\n                        while (k * k <= N):\n                            if N % k == 0:\n                                l = N // k\n                                while (l * l <= N):\n                                    if N % l == 0:\n                                        m = N // l\n                                        return max(m, i * i, j * j, k * k, l * l, n * n)\n                                    else:\n                                        return m + 1\n                                    break\n                                break\n                            else:\n                                break\n                    else:\n                        break\n                    k = k + 1\n            j = j + 1\n            i = i + 1\n        return 0\n",
        "test": "assert ",
        "num_ids": 1381
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize max_sum to 0\n    max_sum = 0\n",
        "test": "assert ",
        "num_ids": 484
    },
    {
        "number": 246,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = number\n    while square_root > 1:\n        if square_root % 2 == 0:\n            square_root = square_root / 2\n        else:\n            square_root = (square_root * 3) + 1\n    return square_root\n",
        "test": "assert     babylonian_squareroot(4) == 1.0",
        "num_ids": 1507
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)<2:\n        return len(str)\n    else:\n        lps=[]\n        for i in range(0,len(str)):\n            print(i)\n            if str[i]!=str[i+1]:\n                lps.append(str[i])\n                lps.append(str[i+1])\n            else:\n                lps.append(str[i])\n        print(lps)\n        lps.sort()\n        return len(lps)\n",
        "test": "assert ",
        "num_ids": 1118
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = n*(n+1)/2\n    return harmonic_sum\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 283
    },
    {
        "number": 249,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    new_array_nums1=[]\n    new_array_nums2=[]\n    new_array_nums1.extend(array_nums1)\n    new_array_nums1.extend(array_nums2)\n    for i in range(len(new_array_nums1)):\n        if new_array_nums1[i] in new_array_nums2:\n            new_array_nums2.remove(new_array_nums1[i])\n    return new_array_nums2\n",
        "test": "assert     intersection_array([1,3,5,7], [3,5,7,9]) == []",
        "num_ids": 849
    },
    {
        "number": 250,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X([3,2,1,3,2,3],5)==0, 'incorrect count_X()'",
        "num_ids": 555
    },
    {
        "number": 251,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Step 1: Get the length of the list.\n    length = len(list)\n    # Step 2: Loop through the list, and insert the element at the proper position.\n    for i in range(0,length):\n        if element < list[i]:\n            list[i] = element\n            break\n    # Step 3: Return the updated list.\n    return list\n",
        "test": "assert     insert_element([], \"hello\") == []",
        "num_ids": 2658
    },
    {
        "number": 252,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    '''\n    Input\n    a: The complex number that you want to convert.\n    \n    Output\n    The polar coordinates of the complex number.\n    '''\n    c=complex(numbers)    \n    deg = c.real**2 + c.imag**2\n    rad=math.sqrt(deg)\n    polar=c.real*c.real + c.imag*c.imag\n    return polar,rad\n",
        "test": "assert     convert(1)==convert(-1)",
        "num_ids": 699
    },
    {
        "number": 253,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n",
        "test": "assert     count_integer([]) == 0, \"The function should return 0, because there is nothing in the list.\"",
        "num_ids": 472
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 1:\n        return list(combinations(l, 1))\n    else:\n        combs = []\n        for i in range(l):\n            for j in combinations_with_replacement(l, n-1):\n                combs.append((i, j))\n        return combs\n",
        "test": "assert ",
        "num_ids": 1104
    },
    {
        "number": 256,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    c = 0\n    for i in range(2, n + 1):\n        if (n % i) == 0:\n            c += 1\n    return c\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 847
    },
    {
        "number": 257,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Your code here\n    return b,a\n",
        "test": "assert     swap_numbers(4,7) == (7, 4)",
        "num_ids": 328
    },
    {
        "number": 259,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n",
        "test": "assert     maximize_elements((5, 7, 11, 19, 23), (7, 11, 8, 15, 26)) == (7, 11, 8, 15, 26)",
        "num_ids": 2981
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Base case\n    if n == 1 or n == 0:\n        return 1\n    # if n is divisible by 2\n    if n % 2 == 0:\n        # n is odd\n        return n + newman_prime(n//2)\n",
        "test": "assert     newman_prime(n=2) == 3",
        "num_ids": 645
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1_int = int(test_tup1[0])\n    test_tup2_int = int(test_tup2[0])\n    return test_tup1_int / test_tup2_int\n    \ndef main():\n    '''\n    User interface function\n    '''\n    test_tup1 = [1, 2, 3]\n    test_tup2 = [4, 5, 6]\n    print(division_elements(test_tup1, test_tup2))\n    \nif __name__ == \"__main__\":\n    main(",
        "test": "assert     division_elements(((2,4),(3,3)),(8,6)) == ((2,0), (1,1))",
        "num_ids": 804
    },
    {
        "number": 262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create an empty list to append the first part of the list\n    list1_split_L = []\n    \n    # Iterate through the given list\n    for i in list1:\n        # If length of the first part is less than the length of the second part\n        if len(i) < L:\n            # Add the first part to the list\n            list1_split_L.append(i)\n        # If the length of the first part is greater than the length of the second part\n        elif len(i) > L:\n            # Add the second part of the list to the list\n            list1_split_L.append(i[:L])\n            # Add the second part of the list to the list\n            list1_split_L.append(i[L:])\n            # Replace the length of the second part with the length of the first part\n            list1[len(i)-L] = i[L:]\n        # If the length of the first part is less than the length of the second part\n        elif len(i) < L:\n            # Add the first part to the list\n            list1_split_L.append(i[:L])\n            # Add the first part of the list to the list\n            list1_split_L.append(i[L:])\n            # Replace the length of the first part with the length of the second part\n            list1[len(i)-L] = i[L:]\n    # Return the result\n    return list1_split_L\n    \n    \ndef clean_list(list_to_clean, cleaner_list):\n    '''\n    Write a function that takes in a list and a cleaner list (to clean the data in the list) and returns a list that has only the contents of the cleaner list.\n    '''\n    # Create an empty list to append the contents of the cleaner list\n    clean_list_result = []\n    \n    # Iterate through each list item in the list\n    for i in list_to_clean:\n        # If the list item is not in the cleaner list\n        if i not in cleaner_list:\n            # Append the list item to the empty list\n            clean_list_result.append(i)\n    # Return the list\n    return clean_list_result\n    \n    \ndef main():\n    # Create a list of string values\n    values = [\n        \"Vladimir\",\n        \"Tobias\",\n        \"Kris\",\n        \"Adam\"\n    ]\n    # Split the value string into a list\n    values_split = values.split(' ')\n    # Split the value string into a list of tuples\n    values_split_tuple = values_split.split(',')\n    # Create a new list with the first value\n    new_list = values_split_tuple[0]\n    # Remove the first value from the list\n    new_list.pop(0)\n    # Create a list with the second value\n    new_list_2 = values_split_tuple[1]\n    # Remove the second value from the list\n    new_list_2.pop(1)\n    # Split the first value into a list of tuples\n    new_list_2_tuple = new_list_2.split(',')\n    # Append the values from the first value to the new list\n    new_list_2_tuple.extend(values_split_tuple[2:])\n    # Create a new list with the list of tuples\n    new_list_2_tuple = new_list_2_tuple[1:-1]\n    # Create a dictionary from the list of tuples\n    new_dict = dict(new_list_2_tuple)\n    # Create a tuple with the first value\n    new_tuple = new_dict['Vlad']\n    # Create a new list with the second value\n    new_new_tuple = new_tuple.split(',')\n    # Append the values from the second value to the new list\n    new_new_tuple.extend(values_split_tuple[3:])\n    # Create a dictionary with the new values\n    new_dict_2 = dict(new_new_tuple)\n    # Check if the dictionary contains the new list\n    # If not, raise an error\n    if new_dict == new_dict_2:\n        raise Exception(\"Invalid list\")\n    # Print the new list with new values\n    print(new_list)\n    # Print the new list with new values\n    print(new_new_tuple)\n    # Call the split_two_parts function to split the list into two parts\n    list_one, list_two = split_two_parts(values, 2)\n    # Check the result\n    print(list_one)\n    print(list_two)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    ",
        "test": "assert ",
        "num_ids": 1933
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 2:\n        return h_age * 12\n    else:\n        return h_age * 10\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 582
    },
    {
        "number": 265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i + step])\n",
        "test": "assert ",
        "num_ids": 468
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     lateralsurface_cube(0) == 0",
        "num_ids": 2456
    },
    {
        "number": 267,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # return a value from n * n\n    return n * n\n",
        "test": "assert     square_Sum(1) == 1",
        "num_ids": 438
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    num = 0\n    \n    for i in range(1, n + 1): \n        \n        if i * 3 + 2 == n: \n            num = i \n    return num\n",
        "test": "assert     find_star_num(6) == 0",
        "num_ids": 2339
    },
    {
        "number": 269,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return(ord(k))\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 309
    },
    {
        "number": 270,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for even in arr:\n        if even % 2 == 0:\n            even_sum += even\n    return even_sum\n    \ndef sum_odd_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    odd_sum = 0\n    for odd in range(len(arr)):\n        if (odd % 2) == 1:\n            odd_sum += arr[odd]\n    return odd_sum\n    \ndef sum_even_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers and odd numbers at even positions of a list.\n    '''\n    even_odd_sum = 0\n    for even in range(len(arr)):\n        if even % 2 == 0:\n            even_odd_sum += arr[even]\n    return sum_even_and_even_index(arr) + sum_odd_and_odd_index(arr)\n    \ndef selectionSort(arr):  \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n",
        "test": "assert     sum_even_and_even_index([]) == 0",
        "num_ids": 615
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([1 if i % 5 == 0 else i for i in range(n)])\n",
        "test": "assert     even_Power_Sum(1) == 1",
        "num_ids": 459
    },
    {
        "number": 272,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted = []\n    for element in test_list:\n        rear_extracted.append(element[1])\n    return rear_extracted\n",
        "test": "assert     rear_extract([(3, 5), (7, 2), (4, 3)]), \"The return should be [7, 2, 5]\"",
        "num_ids": 830
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n",
        "test": "assert     substract_elements(test_tup1, test_tup2) == (5, 2, 4), \"subtract_elements() is wrong\"",
        "num_ids": 2564
    },
    {
        "number": 274,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n % 2 == 0: \n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2)\n    else:\n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2) + 2\n        \ndef even_binomial_Coeff_Sum_V2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n % 2 == 0: \n        return even_binomial_Coeff_Sum_V2(n - 1) + even_binomial_Coeff_Sum_V2(n - 2)\n    else:\n        return even_binomial_Coeff_Sum_V2(n - 1) + even_binomial_Coeff_Sum_V2(n - 2) + 2\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 541
    },
    {
        "number": 276,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # YOUR CODE HERE\n    return 0.0\n",
        "test": "assert     volume_cylinder(2,3)!= 24.0",
        "num_ids": 297
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.copy()\n",
        "test": "assert     dict_filter({1:1,2:2},3) == {1:1,2:2}",
        "num_ids": 401
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # initialize count to zero\n    count = 0\n    # iterate through the tuple, starting at index 0\n    for i in range(len(test_tup) - 1):\n        # if the current element is the tuple element, increment count\n        if test_tup[i] == test_tup[i + 1]:\n            # if this is the first element, increment count\n            if i == 0:\n                count += 1\n            # otherwise, increment count\n            else:\n                count += 1\n    return count\n",
        "test": "assert     count_first_elements([]) == 0, 'empty tuple'",
        "num_ids": 605
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_list = []\n    dec_list = []\n    i = 0\n    while i < n:\n        if(n%2==0):\n            num_list.append(int(n/2))\n        else:\n            num_list.append(int(n/2)-1)\n        n = n/2\n        i = i+1\n    i = 0\n    while i < len(num_list):\n        if(i == len(num_list)-1):\n            dec_list.append(num_list[i])\n        else:\n            dec_list.append(num_list[i]+num_list[i+1])\n        i = i+1\n    return dec_list\n",
        "test": "assert     is_num_decagonal(6) == 5",
        "num_ids": 843
    },
    {
        "number": 280,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n    return (False, -1)\n",
        "test": "assert     sequential_search([1,2,3,4,5,6,7,8,9,10], 0) == (False, -1)",
        "num_ids": 787
    },
    {
        "number": 281,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    set_list = set(test_list)\n    set_list = list(set_list)\n    if len(set_list)!= len(set(set_list)):\n        return False\n    return True\n",
        "test": "assert     all_unique([]) == True, 'false'",
        "num_ids": 589
    },
    {
        "number": 282,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # start writing your code here\n    return [x for x in nums1 if x not in nums2]\n    pass\n",
        "test": "assert     sub_list([1, 2, 3, 4], [5, 6, 7, 8]) == [1, 2, 3, 4], \"test fails\"",
        "num_ids": 909
    },
    {
        "number": 283,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        raise TypeError(\"Error: n must be an int\")\n    elif n < 0 or n % 10 > 7 or n == 0: \n        raise ValueError(\"Error: n must be a number between 0 and 9\")\n    elif n == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     validate(1) == True",
        "num_ids": 470
    },
    {
        "number": 284,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check each item in list\n    for i in range(len(list)):\n        if list[i] == element:\n            return False\n    return True\n",
        "test": "assert     check_element([0, 1, 2, 3, 4, 5], 1) == False",
        "num_ids": 502
    },
    {
        "number": 285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match_pattern = r'(\\b[aA]\\b)'\n    return re.search(match_pattern, text)\n",
        "test": "assert     text_match_two_three('abcba') == False",
        "num_ids": 514
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    n = len(a) \n    sum_a = 0\n    a_s = 0\n    max_sum = 0\n    if n == 1:\n        return max_sum\n    for i in range(0, n-k+1):\n        sum_a += a[i]\n    for i in range(0, n):\n        sum_a += a[i]\n        if sum_a > max_sum:\n            max_sum = sum_a\n    # print(max_sum)\n    for i in range(0,n-k):\n        sum_a -= a[i]\n        sum_a += a[i+k]\n        if sum_a > max_sum:\n            max_sum = sum_a\n    # print(max_sum)\n    for i in range(0,n-k):\n        sum_a -= a[i+k]\n        sum_a += a[i]\n        if sum_a > max_sum:\n            max_sum = sum_a\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated(a = [1,2,3,4,5,4,7,6,5,8,9,10], n = 3, k = 1) == 11",
        "num_ids": 1507
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    return (n ** 2)\n",
        "test": "assert     square_Sum(3) == 9",
        "num_ids": 232
    },
    {
        "number": 290,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n    return max_length\n",
        "test": "assert     max_length([]) == 0",
        "num_ids": 555
    },
    {
        "number": 291,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 2: \n        return 1\n",
        "test": "assert     count_no_of_ways(2, 1) == 1, \"count_no_of_ways method failed to return 1\"",
        "num_ids": 2720
    },
    {
        "number": 292,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n > m: # if n is greater than m\n        a = n\n        b = m\n        while a > 0:\n            a = a // 10\n            b = b // 10\n        return b\n    else:\n        return n\n",
        "test": "assert     find(0.5,0.5) == 0.5",
        "num_ids": 728
    },
    {
        "number": 293,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    w_sides = w/2\n    h_sides = h/2\n    if w_sides < h_sides:\n        return w_sides\n    return h_sides\n",
        "test": "assert     otherside_rightangle(12,6) == 3",
        "num_ids": 2075
    },
    {
        "number": 294,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n",
        "test": "assert     max_val([1, 2, 3, 4]) == 4, \"Test failed\"",
        "num_ids": 457
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number%i==0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "test": "assert         sum_div(3) == 1",
        "num_ids": 420
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            inv += 1\n            arr[i + 1], arr[i] = arr[i], arr[i + 1]\n    return inv\n",
        "test": "assert     get_Inv_Count([1,1,3,3,3,3,2,1,4]) == 2",
        "num_ids": 393
    },
    {
        "number": 297,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 1:\n        return list1\n    else:\n        flattened_list = []\n        for item in list1:\n            if type(item) is list:\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n",
        "test": "assert         flatten_list([1, 2, [3, 4, [5, 6], 7] ]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 776
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    l = len(stdata)\n    # to be solved, we need to calculate the maximum aggregated value (a) \n    for i in range(l):\n        #print(i)\n        for j in range(i):\n            #print(j)\n            #print(stdata[i][j])\n            a = stdata[i][j]\n            b = stdata[j][i]\n            #print(a,b)\n            if a > b:\n                stdata[i][j] = a\n            else:\n                stdata[j][i] = b\n    print(stdata)\n    return max(stdata, key=len)\ndef find_key_indices(list_of_tuples):\n    '''\n    To find the indexes of the tuples in the list of tuples.\n    '''\n    keys = []\n    for i in range(len(list_of_tuples)):\n        #print(i)\n        for j in range(len(list_of_tuples)):\n            #print(j)\n            if list_of_tuples[i] == list_of_tuples[j]:\n                #print(i,j)\n                keys.append(i)\n                keys.append(j)\n    print(keys)\n    return keys\n",
        "test": "assert     max_aggregate([('a',3,'l'),('b',2,'l'),('c',1,'l'),('d',1,'l'),('e',2,'l')])==('c',1,'l')",
        "num_ids": 556
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_0 = 0\n    max_1 = 0\n    \n    # find max of both first n bits\n    for i in range(n):\n        max_0 = max(max_0, n - i)\n        count_0 += n - i - 1\n    # find max of last n bits\n    for i in range(n):\n        max_1 = max(max_1, n - i)\n        count_1 += i\n        \n    # compare max of first n bits with max of last n bits\n    # for i in range(n):\n    #     if max_0 == 0 or count_0 == 0:\n    #         continue\n    #     else:\n    #         count_0 -= 1\n    #         count_0 += 1\n    #         if max_1 == 0 or count_1 == 0:\n    #             continue\n    #         else:\n    #             count_1 -= 1\n    #             count_1 += 1\n        \n    # return max_0 + max_1 - 2 * count_0 - count_1\n    return max_0 + max_1 - count_0 - count_1\n",
        "test": "assert     count_binary_seq(0) == 0",
        "num_ids": 1091
    },
    {
        "number": 301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1\n    elif isinstance(d, str):\n        return 0\n    else:\n        return -1",
        "test": "assert     dict_depth({1: 2, 2: 4, 3: 7, 4: 11}) == 0, 'wrong'",
        "num_ids": 737
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #If element is found at beginning of input array, return true\n    if arr[ranges[0]] == index :\n        return True\n    elif arr[ranges[1]] == index :\n        return True\n    elif arr[ranges[0]] < index :\n        return find_Element(arr,ranges,rotations,index)\n    elif arr[ranges[0]] > index :\n        return find_Element(arr,ranges,rotations,index)\n    else :\n        return False\n    \ndef count_ranges(arr,ranges) :\n    '''\n    Write a python function to count element ranges.\n    '''\n    count = 0\n    for i in range(len(ranges)) :\n        if find_Element(arr,ranges,i,arr[ranges[i]]) :\n            count += 1\n    return count\n",
        "test": "assert     find_Element([1,2,3,4], [0,1,2,3], 1, 1) == 1",
        "num_ids": 1503
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^[a-z]*p')\n    if pattern.match(words[0]):\n        word1 = words[0]\n        word2 = words[1]\n    else:\n        word1 = words[0].lower()\n        word2 = words[1].lower()\n    return word1, word2\n",
        "test": "assert     start_withp(['hello', 'world', 'p', 'e', 't']) == ('hello', 'world')",
        "num_ids": 796
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(index == n):\n        return a[k-1]\n    if(k >= len(a)):\n        return 0\n    if(a[k] > a[index]):\n        a[index] = a[k]\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), a[k] + max_sum_increasing_subseq(a, n, index, k + 1))\n",
        "test": "assert     max_sum_increasing_subseq([], 4, 0, 0) == 0, \"False\"",
        "num_ids": 1181
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = [0]*m\n    for j in range(n):\n        new_tuplex[j] = tuplex[j][m-1]\n    return new_tuplex\n",
        "test": "assert     (colon_tuplex(('a','b'),5,6) == 'a:b:5:6')",
        "num_ids": 1027
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #dictionary of products\n    products={}\n    \n    #define an empty dictionary\n    for n in range(N):\n        products[n+1]=[]\n        \n    #loop through given lists\n    for i in range(N):\n        for j in range(N):\n            if i!=j:\n                #add the product of i and j to products dictionary\n                products[i+1].append(nums1[i]*nums2[j])\n    #return the largest product\n    return max(products.values())",
        "test": "assert ",
        "num_ids": 1251
    },
    {
        "number": 309,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(5,7) == 7",
        "num_ids": 322
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('') == ()",
        "num_ids": 599
    },
    {
        "number": 311,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    l = bin(n).replace('0b', '')\n    l = list(l)\n    # print(l)\n    if l[-1] == '0':\n        l.pop()\n    # print(l)\n    # print(len(l))\n    return int('0b'+''.join(l), 2)\n",
        "test": "assert     set_left_most_unset_bit(1) == 1",
        "num_ids": 906
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (4 * math.pi * r**3) * h**3\n    return volume\n",
        "test": "assert     volume_cone(0,0) == 0",
        "num_ids": 429
    },
    {
        "number": 388,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    num = n; \n    if n < 2: \n        return num \n    else: \n        return highest_Power_of_2(n - 1) \n",
        "test": "assert     highest_Power_of_2(0) == 0",
        "num_ids": 520
    },
    {
        "number": 389,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [None]*(n+1) \n    lucas[0] = 0\n    lucas[1] = 1\n    for i in range(2, n+1): \n        lucas[i] = lucas[i-1] + lucas[i-2] \n    return lucas[n]\n",
        "test": "assert     find_lucas(2) == 1",
        "num_ids": 501
    },
    {
        "number": 390,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string = string.replace('\\\\n','')\n    string = string.replace('\\\\t','')\n    list_.extend(string.split())\n    return list_\n",
        "test": "assert     add_string(['a', 'b', 'c'], 'abc') == ['a', 'b', 'c', 'abc']",
        "num_ids": 2056
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    converted_list = {}\n    i = 0\n    while i < len(l1):\n        # print(l1[i])\n        # print(l2[i])\n        converted_list[i] = l2[i]\n        # print(l3[i])\n        i = i + 1\n        # print(i)\n    # print(l3)\n    return converted_list\n    \n    \n    \n    \n    # for i in l1:\n    #     l2 = {}\n    #     for j in i:\n    #         l2[j] = l2.get(j, 0) + 1\n    #     l3 = {}\n    #     l3[i] = l2\n    #     converted_list[i] = l3\n    # return converted_list\n",
        "test": "assert     convert_list_dictionary([1,2,3], [4,5,6,7], [8,9,10]) == {\"name\":\"Jack\", \"age\":25, \"salary\":15000}",
        "num_ids": 1552
    },
    {
        "number": 392,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 7\n    \n    return get_max_sum (n/2) + get_max_sum (n/3) + get_max_sum (n/4) + get_max_sum (n/5)",
        "test": "assert     get_max_sum(0) == 0.0",
        "num_ids": 536
    },
    {
        "number": 393,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # your code goes here\n    max_len = 0\n    for i in input_list:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n    return max_len\n",
        "test": "assert     max_length_list([]) == 0",
        "num_ids": 425
    },
    {
        "number": 394,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup[0]!= test_tup[1]:\n        return False\n    return True\n",
        "test": "assert     check_distinct((1,2,3,1,3)) == False",
        "num_ids": 667
    },
    {
        "number": 395,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #str1 is a string\n    #returns the first non-repeating character in str1\n    for char in str1:\n        if char!= char.lower():\n            return char\n    return char\n",
        "test": "assert     first_non_repeating_character(\"aabbaccccddddd\") == 'd', \"First non repeating character is 'd'\"",
        "num_ids": 902
    },
    {
        "number": 396,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string, re.I):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_char('A') == True",
        "num_ids": 313
    },
    {
        "number": 397,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n",
        "test": "assert     median_numbers(1,2,3) == 1",
        "num_ids": 671
    },
    {
        "number": 398,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s += int(str(num)[-1])\n    return s\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 681
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_test = 0\n    for i in range(len(test_tup1)):\n        xor_test = xor_test ^ test_tup1[i]\n    for i in range(len(test_tup2)):\n        xor_test = xor_test ^ test_tup2[i]\n    return xor_test\n",
        "test": "assert     bitwise_xor((1,2,3,4,5), (1,3,2,4,5)) == False",
        "num_ids": 1035
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return len(unique_list)\n",
        "test": "assert     extract_freq([1, 2, 1, 2, 1, 2]) == 2",
        "num_ids": 2467
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i, (a, b) in enumerate(zip(test_tup1, test_tup2)):\n        if isinstance(a, tuple) and isinstance(b, tuple):\n            test_tup1[i] = (a[0] + b[0], a[1] + b[1])\n        else:\n            test_tup1[i] = a + b\n    return test_tup1\n",
        "test": "assert     add_nested_tuples((1,2,3), (4,5,6,7,8)) == (1,2,3,4,5,6,7,8)",
        "num_ids": 2727
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a>b:\n        return a\n    if b>a:\n        return b\n    if a==b:\n        return a\n    if b==a:\n        return a\n",
        "test": "assert     minimum(2,2) == 2",
        "num_ids": 358
    },
    {
        "number": 405,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        tuplex.index(tuple1)\n        return True\n    except ValueError:\n        return False\n    except:\n        return False\n",
        "test": "assert     check_tuplex((\"V\", \"E\", \"S\", \"M\", \"B\", \"T\", \"A\"), (\"G\", \"S\", \"M\", \"B\", \"T\", \"A\")) == False",
        "num_ids": 623
    },
    {
        "number": 406,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2):\n        return True\n    return False\n",
        "test": "assert     find_Parity(3) == True",
        "num_ids": 332
    },
    {
        "number": 407,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(str(n)) == 1:\n        return n\n    else:\n        return n%10 + rearrange_bigger(int(n/10))*10\n",
        "test": "assert     rearrange_bigger(1) == 1",
        "num_ids": 647
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sorts the elements of the array in ascending order\n",
        "test": "assert     k_smallest_pairs([2, 4, 5], [1, 2, 3, 5], 1) == 2",
        "num_ids": 966
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        for i in range(0,len(list1)):\n            for j in range(0,len(list1)):\n                if list1[i][1] < list1[j][1]:\n                    list1[i],list1[j] = list1[j],list1[i]\n    return min(list1)\n",
        "test": "assert     min_product_tuple([(1,2), (2,3), (3,4), (4,5), (5,6)]) == (1,2), \"Test case failed.\"",
        "num_ids": 4464
    },
    {
        "number": 410,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n",
        "test": "assert     min_val([3,6,4,7,0,9]) == 0, \"Min_val(List) test failed\"",
        "num_ids": 624
    },
    {
        "number": 411,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([a-z])(_)', r'\\1_\\2', word).title()\n    \ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r'([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([a-z])(_)', r'\\1_\\2', word).lower()\n    \ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z])(_)', r'\\1_\\2', word).title()\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([a-z])(_)', r'\\1_\\2', word).lower()\n    \ndef lower_to_uppercase(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.title()\n    \ndef uppercase_to_lower(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef uppercase_to_lower_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.title()\n    \ndef lower_to_uppercase_string(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.title()\n    \ndef lower_to_uppercase_string(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef uppercase_to_lower_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef lower_to_uppercase_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.lower()\n    \ndef uppercase_to_lower_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()",
        "test": "assert     snake_to_camel(\"*\") == \"*\"",
        "num_ids": 836
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [el for el in l if el % 2!= 0]\n    \ndef replace_string(l, string):\n    '''\n    Write a python function to replace a particular string with another string.\n    '''\n    return l\n    \ndef print_odd(l):\n    '''\n    Write a python function to print out all odd numbers in a given list.\n    '''\n    return l\n    \ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    return [el for el in l if el % 2 == 0]\n    \ndef replace_string(l, string):\n    '''\n    Write a python function to replace a particular string with another string.\n    '''\n    return l\n    \ndef print_even(l):\n    '''\n    Write a python function to print out all even numbers in a given list.\n    '''\n    return l\n    \ndef get_nth_element(l, n):\n    '''\n    Write a python function to get the nth element of a given list.\n    '''\n    return l[n]\n    \ndef reverse_string(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return l[::-1]\n    \ndef remove_duplicates(l):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return [el for el in l if el not in l[:l.index(el)]]\n    \ndef convert_to_int(l):\n    '''\n    Write a python function to convert a given list to a single int.\n    '''\n    return sum(l)\n    \ndef create_vowels(l):\n    '''\n    Write a python function to convert a given list to a single int.\n    '''\n    return [el for el in l if el.lower() in 'aeiou']\n    \ndef get_unique_letters(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return list(set(el for el in l))\n    \ndef convert_to_string(l):\n    '''\n    Write a python function to convert a given list to a single string.\n    '''\n    return ''.join(map(str,l))\n    \ndef get_num_unique_letters(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return len(set(el for el in l))\n    \ndef get_unique_numbers(l):\n    '''\n    Write a python function to get all the unique numbers in a given list.\n    '''\n    return sum(map(int,set(el for el in l)))\n    \ndef reverse_string_numbers(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return [int(el) for el in l[::-1]]\n    \ndef get_nth_repeating_numbers(l, n):\n    '''\n    Write a python function to get the nth repeating numbers in a given list.\n    '''\n    return l[l.index(l[n])+1:]\n    \ndef get_nth_digit(l, n):\n    '''\n    Write a python function to get the nth digit in a given list.\n    '''\n    return l[n]\n    \ndef is_palindrome(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_2(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_3(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef get_nth_letter(l, n):\n    '''\n    Write a python function to get the nth letter in a given list.\n    '''\n    return l[n]\n    \ndef get_num_unique_letters_2(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return sum(map(int,l))\n    \ndef reverse_string_numbers_2(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return [int(el) for el in l[::-1]]\n    \ndef remove_duplicates_2(l):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return [el for el in l if el not in l[:l.index(el)]]\n    \ndef get_nth_letter_2(l, n):\n    '''\n    Write a python function to get the nth letter in a given list.\n    '''\n    return l[n]\n    \ndef reverse_string_numbers_2(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return [int(el) for el in l[::-1]]\n    \ndef remove_duplicates_3(l):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return [el for el in l if el not in l[:l.index(el)]]\n    \ndef get_nth_letter_3(l, n):\n    '''\n    Write a python function to get the nth letter in a given list.\n    '''\n    return l[n]\n    \ndef get_num_unique_letters_3(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return sum(map(int,l))\n    \ndef is_palindrome_3(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_4(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_5(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef reverse_string_numbers_4(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return [int(el) for el in l[::-1]]\n    \ndef remove_duplicates_4(l):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return [el for el in l if el not in l[:l.index(el)]]\n    \ndef get_nth_letter_4(l, n):\n    '''\n    Write a python function to get the nth letter in a given list.\n    '''\n    return l[n]\n    \ndef get_num_unique_letters_4(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return sum(map(int,l))\n    \ndef is_palindrome_5(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_6(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_7(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef reverse_string_numbers_5(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    retur",
        "test": "assert     remove_odd([]) == [], \"Expected an empty list\"",
        "num_ids": 891
    },
    {
        "number": 413,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([1, 2, 3, 4], 0) == 1",
        "num_ids": 698
    },
    {
        "number": 414,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([1,2,3,4,5], [6,7,8,9,10]) == False, \"the sequence is not overlapping\"",
        "num_ids": 953
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    low = 0\n    high = len(arr)-1\n    n = len(arr)\n    p = (arr[low]*arr[high])\n    if (n==1):\n        return (arr[low]*arr[high])\n",
        "test": "assert ",
        "num_ids": 605
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    sorted_tuples = sorted(Input, key=lambda x: x[0])\n    res = []\n    for x in sorted_tuples:\n        if x not in res:\n            res.append(x)\n    return res\n",
        "test": "assert     group_tuples([]) == []",
        "num_ids": 800
    },
    {
        "number": 418,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    len_lst = len(lst)\n    if len_lst==0: \n        return \"The list is empty!\"\n    elif len_lst==1: \n        return lst[0] \n    else: \n        for i in range(len_lst-1): \n            if lst[i] > lst[i+1]: \n                temp = lst[i+1] \n                lst[i+1] = lst[i] \n                lst[i] = temp \n    return max(lst)\n    \n",
        "test": "assert     (Find_Max([5,4,3,2,1]) == 5), \"min_length\"",
        "num_ids": 485
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum = sum + num\n    return sum\n",
        "test": "assert     round_and_sum([0.2,0.6,0.3]) == 6.9",
        "num_ids": 412
    },
    {
        "number": 420,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c = 0\n    for i in range(n, 0, -2):\n        c += i**3\n    return c\n",
        "test": "assert     cube_Sum(0) == 0",
        "num_ids": 360
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) > 0:\n        return ''.join([str(elem) for elem in test_tup])\n    else:\n        return '()'\n",
        "test": "assert     concatenate_tuple(test_tup) == (1, 2, 3, 4, 5, 'z', 'e', 'g')",
        "num_ids": 2566
    },
    {
        "number": 422,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n+find_Average_Of_Cube(n-1))\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 477
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[0])\n",
        "test": "assert     extract_rear([(1, 'a'), (2, 'b'), (3, 'c')]) == (1, 'a')",
        "num_ids": 567
    },
    {
        "number": 425,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    result = 0\n    for i in range(len(list1)): \n        if list1[i] == x: \n            result += 1\n    return result\n",
        "test": "assert     count_element_in_list(['abc','def','g','j'], 'z') == 0",
        "num_ids": 609
    },
    {
        "number": 426,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    nums_set = set(nums)\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5], '[1, 2, 3, 4, 5]'",
        "num_ids": 645
    },
    {
        "number": 427,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt=dt.replace('-','_')\n    new_dt=new_dt.replace('-','_')\n    new_dt=new_dt.replace('_','-')\n    new_dt=new_dt.replace('.','-')\n    return new_dt\n",
        "test": "assert     change_date_format(\"12-12-12\") == \"12-12-12\"",
        "num_ids": 1027
    },
    {
        "number": 428,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    while size > 1:\n        #print(size)\n        for i in range(0, size-1):\n            j = i\n            while j >= 0 and my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n                j -= 1\n        #print(my_list)\n        size = size - 1\n    #print(my_list)\n    return my_list\n",
        "test": "assert     shell_sort([]) == [],'shell_sort should return an empty array'",
        "num_ids": 967
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return [test_tup1, test_tup2]\n",
        "test": "assert     and_tuples(",
        "num_ids": 541
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print(a,b,c)\n    return a*(b**2) + c*b\n",
        "test": "assert     parabola_directrix(0, 0, 1) == 0",
        "num_ids": 4487
    },
    {
        "number": 431,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = 0\n    \n    for element in list1:\n        if element in list2:\n            common+=1\n        else:\n            return False\n        \n    if common == len(list2):\n        return True\n    else:\n        return False\n",
        "test": "assert     common_element([1, 1], [1, 2]) == True",
        "num_ids": 1022
    },
    {
        "number": 432,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height=int(height)\n    if height>=0:\n        if base1>base2:\n            height=height+1\n            base=base2\n        else:\n            height=height+1\n            base=base1\n    if height<0:\n        height=0\n        base=base1\n    return(base)\n",
        "test": "assert     median_trapezium(1,1,3) == 1, \"fail to find 1\"",
        "num_ids": 1328
    },
    {
        "number": 433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 212
    },
    {
        "number": 434,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Retrieves the minimum number of characters that should be in the string and the maximum number of characters that can be in the string.\n    minimum_count = min(len(text), len(text.replace(' ', '').replace('&', '').replace('\"', '').replace(',', '')))\n    # Builds the string.\n    string = ''\n    for i in range(minimum_count):\n        string += text[i]\n    # Returns the string.\n    return string\n",
        "test": "assert     text_match_one(\"Testing is a word.\")",
        "num_ids": 5023
    },
    {
        "number": 435,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    sum = 0\n    while n > 0 :\n        digit = n % 10\n        sum = sum * 10 + digit\n        n = n // 10\n    return sum\n",
        "test": "assert     last_Digit(10) == 1",
        "num_ids": 343
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1_neg = []\n    for num in list1:\n        list1_neg.append(-num)\n    return list1_neg\n",
        "test": "assert neg_nos([]) == [], \"Failed\"",
        "num_ids": 377
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('o', '')\n    \ndef print_list(alist):\n    '''\n    Write a function to print a list.\n    '''\n    return alist\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 2415
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for pair in test_list:\n        if pair[0] > pair[1]:\n            count += 1\n    return count\n",
        "test": "assert     count_bidirectional([\"hello\", \"world\"]) == 2",
        "num_ids": 712
    },
    {
        "number": 439,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    return sum(L)\n",
        "test": "assert     multiple_to_single([]) == 0, \"incorrect result\"",
        "num_ids": 293
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    results = {}\n    words = text.split(' ')\n    for word in words:\n        if word in ADVERBS.keys():\n            adverb = ADVERBS[word]\n            adverb_position = ADVERBS[adverb].get('adverb_position', None)\n            if adverb_position:\n                results[word] = adverb_position\n    return results\n",
        "test": "assert     (find_adverb_position('Are you playing cricket in the summer?')==3)",
        "num_ids": 2474
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    S=0\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                S += l[i][j][k]*l[i][j][k]\n    return S\n",
        "test": "assert     surfacearea_cube(5) == 30, \"Failed\"",
        "num_ids": 450
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)\n",
        "test": "assert     positive_count([-2, -3, -1, -4, -5, 5]) == 0",
        "num_ids": 605
    },
    {
        "number": 443,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    if (list1[len(list1)-1]) < 0:\n        return list1[len(list1)-1]\n    else:\n        return -1\n    \ndef largest_pos(list1):\n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    list1.sort()\n    if (list1[len(list1)-1]) > 0:\n        return list1[len(list1)-1]\n    else:\n        return -1\n",
        "test": "assert     largest_neg([-1, -2, 3, -4]) == -1, 'Not all negatives are positive'",
        "num_ids": 839
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    res = []\n    for item in test_list:\n        if len(item) == K:\n            res.append(item[:-K])\n        else:\n            res.append(item)\n    return res\n",
        "test": "assert     trim_tuple([1, 2, 3], 2) == (1, 3)",
        "num_ids": 593
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # declare variables\n    first_element = test_tup1[0]\n    second_element = test_tup2[1]\n    product = 0\n    \n    # if both the element in tup1 are same\n    if (first_element in test_tup1) and (second_element in test_tup1):\n        product = test_tup1[0] * test_tup2[1]\n    # if either the element is in the tup1, but not the second element\n    elif (first_element in test_tup1) and (second_element not in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and not the second element\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = second_element * test_tup2[1]\n    # if either the element is in the tup1, but not the second element\n    elif (first_element not in test_tup1) and (second_element not in test_tup2):\n        product = second_element * test_tup1[1]\n    # if the element is not in the tup1, and the second element is same as the first element\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element not in test_tup1):\n        product = second_element * test_tup1[1]\n    # if both the element are in the tup1, but not the second element\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = test_tup2[0] * second_element\n    # if the element is not in the tup1, and the second element is in the tup1\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = second_element * test_tup1[1]\n    # if both the element are in the tup1, but not the second element\n    elif (first_element in test_tup1) and (second_element not in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is in the tup1, and the second element is not in the tup1\n    elif (first_element in test_tup1) and (second_element in test_tup2):\n        product = second_element * test_tup2[1]\n    # if the element is not in the tup1, and the second element is in the tup1\n    elif (first_element in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is same as the first element\n    elif (first_element in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element in test_tup1) and (second_element not in test_tup2):\n        product = second_element * test_tup1[1]\n    # if the element is not in the tup1, and the second element is in the tup1\n    elif (first_element in test_tup1) and (second_element in test_tup2):\n        product = test_tup2[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is in the tup1\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = second_element * test_tup1[1]\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element not in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element not in test_tup2):\n        product = second_element * test_tup1[1]\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element not in test_tup2):\n        product = second_element * test_tup1[1]\n    # if both the element are in the tup1, but not the second element\n    elif (first_element in test_tup1) and (second_element not in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element in test_tup1) and (second_element in test_tup2):\n        product = second_element * test_tup1[1]\n    # if the element is not in the tup1, and the second element is in the tup1\n    elif (first_element in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if both the element are in the tup1, but not the second element\n    elif (first_element in test_tup1) and (second_element not in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element in test_tup1) and (second_element not in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element not in test_tup2):\n        product = second_element * test_tup1[1]\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if both the element are in the tup1, but not the second element\n    elif (first_element not in test_tup1) and (second_element not in test_tup2):\n        product = second_element * test_tup1[1]\n    # if the element is not in the tup1, but the second element is not in the tup",
        "test": "assert ",
        "num_ids": 4343
    },
    {
        "number": 446,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n",
        "test": "assert     count_Occurrence([1, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 7], [1, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 7]) == 0, \"check error in function count_Occurrence()\"",
        "num_ids": 987
    },
    {
        "number": 447,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num*num*num)\n    return cube_nums\n    \n    \ndef solution(nums):\n    '''\n    solution(nums)\n    \n    Given a list of numbers, return the number of cubes that appear.\n    '''\n    cubes = cube_nums(nums)\n    result = sum(cubes)\n    return result\n    ",
        "test": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 682
    },
    {
        "number": 448,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum\n",
        "test": "assert     cal_sum(1) == 1",
        "num_ids": 312
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    string = \"\"\n    for index in l:\n        string += index\n    \n    return string.strip()\n",
        "test": "assert     extract_string([\"hello\"], [\"hello\"]) == \"hello\"",
        "num_ids": 617
    },
    {
        "number": 451,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = text1.replace(' ', '').replace('\\n', '')\n    return new_text\n",
        "test": "assert     remove_whitespaces(\"\") == \"\"",
        "num_ids": 2583
    },
    {
        "number": 452,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \n    #OR\n    #loss = actual_cost - sale_amount\n    #return 0 if actual_cost < sale_amount else loss\n",
        "test": "assert     loss_amount(75,60) == 0",
        "num_ids": 354
    },
    {
        "number": 453,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n % 2 == 0 : \n        return n \n    else : \n        return n + sumofFactors(n // 2)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    numerator = 0\n    denominator = 1\n    if n == 0 : \n        return 0\n    elif n % 2 == 0 : \n        return 1\n    else : \n        numerator = 1\n        while numerator < math.sqrt(n) : \n            numerator = numerator + 1\n            denominator = n // denominator\n    return numerator * denominator\n",
        "test": "assert     sumofFactors(0) == 0",
        "num_ids": 534
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return text.find('z')>-1\n",
        "test": "assert     text_match_wordz(\"HELLO WORLD\") == False, \"ERROR\"",
        "num_ids": 540
    },
    {
        "number": 455,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        if monthnum2==2:\n            if(int(monthnum2)<=12):\n                check=True\n            else:\n                check=False\n        else:\n            check=True\n    except ValueError:\n        check=False\n    return check\n",
        "test": "assert     check_monthnumb_number(1)",
        "num_ids": 564
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    lst = []\n    lst = stringlist\n    \n    for i in lst:\n        print(i)\n        lst.remove(i)\n        lst.insert(0,i)\n        print(lst)\n        \n    return lst",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 634
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n    return min \ndef Compare(lst1, lst2): \n    '''\n    Write a python function to compare two lists of integers.\n    '''\n    for i in range(0, len(lst1)):\n        if lst1[i] == lst2[i]:\n            continue\n        else:\n            return 'Not Equal'\n    return 'Equal'\ndef Output(lst): \n    '''\n    Write a python function to print the list.\n    '''\n    for i in range(0, len(lst)):\n        print(lst[i], end =\" \")\n    print()\n    ",
        "test": "assert     Find_Min([2, 3, 1, 1, 1, 1, 1, 3, 3, 3]) == 1",
        "num_ids": 2570
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(0, 0) == 0, \"rectangle_area(0, 0) is incorrect\"",
        "num_ids": 316
    },
    {
        "number": 459,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1 == '':\n        return ''\n    else:\n        split1 = str1.split(' ')\n        for item in split1:\n            if len(item) > 1:\n                for i in range(len(item)):\n                    if item[i].isupper():\n                        item = item[:i] + item[i].lower() + item[i + 1:]\n        return''.join(split1)\n",
        "test": "assert     remove_uppercase(\"String\") == \"String\"",
        "num_ids": 688
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst: \n        print(i[0])\n",
        "test": "assert     Extract([[1,2,3,4], [5,6,7,8], [9,10,11,12], [10,11,12,13]]) == None",
        "num_ids": 728
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([c for c in str if c.isupper()])\n",
        "test": "assert     upper_ctr('Abdallah'), 'Abdallah'",
        "num_ids": 323
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    a_set = set(list1)\n    a = []\n    for x in a_set:\n        a.extend([x] * len(list1))\n    return a\n",
        "test": "assert     combinations_list([1,3,5,7,8,9]) == [(1,3,5,7,8,9)]",
        "num_ids": 859
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    len_a = len(arr)\n    max_product = 1\n    for i in range(0, len_a - 1):\n        for j in range(i, len_a):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n            elif product == max_product:\n                if arr[i] > arr[j]:\n                    if i == 0 or arr[i]!= arr[i - 1] or j == 0:\n                        max_product = product\n    return max_product\n",
        "test": "assert     max_subarray_product([2]) == 1, \"Max subarrays must be 2\"",
        "num_ids": 654
    },
    {
        "number": 464,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for key, value in dict.items():\n        if key not in values:\n            values.append(key)\n    \n    if all(x == y for x,y in zip(values,n)):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_value({\"a\": \"A\", \"b\": \"B\", \"c\": \"C\"}, \"a\") == True",
        "num_ids": 481
    },
    {
        "number": 465,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1:\n        if dict1[item] == '':\n            dict1.pop(item)\n            \n    return dict1\n    \ndef sort_dict(d):\n    '''\n    Write a function to sort a given dictionary by key.\n    '''\n    d.sort(key=lambda k: d.get(k))\n    \n    return d\n",
        "test": "assert     drop_empty({\"a\":1, \"b\":2}) == {'a':1, 'b':2}",
        "num_ids": 514
    },
    {
        "number": 468,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # declaring a global variable to get the result\n    result = 1\n    # starting from every number\n    for i in range(len(arr)):\n        result = result * arr[i]\n    return result\n",
        "test": "assert     max_product([1]) == 1",
        "num_ids": 542
    },
    {
        "number": 470,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if not len(test_tup):\n        return\n    if not all(isinstance(tup, tuple) for tup in test_tup):\n        print('Invalid data')\n        return\n    if len(test_tup) == 1:\n        print('Invalid data')\n        return\n    if not all(isinstance(tup, tuple) for tup in test_tup):\n        print('Invalid data')\n        return\n    if len(test_tup) <= 1:\n        print('Invalid data')\n        return\n    total = 0\n    for i, tup in enumerate(test_tup):\n        total += (tup[0] + tup[1])\n    return total\n",
        "test": "assert add_pairwise((1,2))!= (3,4)",
        "num_ids": 1009
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # init\n    m = 1\n    for i in range(n):\n        m = (m * arr[i]) % n\n    return m\n",
        "test": "assert     find_remainder([2, 2, 1, 1, 1, 1, 1, 1], 7) == 4",
        "num_ids": 652
    },
    {
        "number": 472,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        if i > 1:\n            if l[i-1] == l[i] and l[i] == l[i+1]:\n                return True\n    return False\n    \n    \n    \ndef check_Consecutive2(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        if i > 1:\n            if l[i-1] == l[i] and l[i] == l[i+1]:\n                return True\n    return False\n    \ndef test_check_Consecutive(l):\n    if check_Consecutive(l) == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n    \n    \ndef test_check_Consecutive2(l):\n    if check_Consecutive2(l) == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \ndef main():\n    l = [1, 3, 5, 6, 10, 12, 14, 16, 20, 100, 200, 300]\n    test_check_Consecutive(l)\n    test_check_Consecutive2(l)\n",
        "test": "assert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False, 'test-condition is incorrect'",
        "num_ids": 1111
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_tuple1 = tuple(test_list1)\n    test_tuple2 = tuple(test_list2)\n    for i in range(0, len(test_list1)):\n        if test_tuple1[i]!= test_tuple2[i]:\n            return test_list1[i]\n    return test_list1[i]\n",
        "test": "assert     tuple_intersection(('a', 'b'), ('b', 'c')) == 'a'",
        "num_ids": 787
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str=str1.replace(ch,newch)\n    return new_str\n",
        "test": "assert     replace_char(\"qwertz\", \"J\", \"m\") == \"qwertzzJm\"",
        "num_ids": 541
    },
    {
        "number": 475,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Fill in the fill_value function\n    # Fill in the sorted function\n    return Counter(dict1)\n",
        "test": "assert     sort_counter({'a': 2, 'b': 5, 'c': 7}) == {'b': 5, 'a': 2, 'c': 7}",
        "num_ids": 1000
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize answer, largest\n    answer = 0\n    # initialize the pointers to the first and last of the array\n    first = 0\n    last = len(nums) - 1\n    # calculate the answer\n    while first <= last:\n        # find the largest value\n        if nums[first] <= nums[last]:\n            answer = nums[first]\n            first += 1\n        else:\n            answer = nums[last]\n            last -= 1\n        # store the answer\n        if first < last:\n            answer = max(answer, nums[first] + nums[last])\n            first += 1\n            last -= 1\n    return answer\n",
        "test": "assert     big_sum([]) == 0",
        "num_ids": 657
    },
    {
        "number": 477,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = ''\n    for character in string:\n        if character.isupper():\n            new_string += character.lower()\n        else:\n            new_string += character\n    return new_string\n",
        "test": "assert     is_lower('asdf') == 'asdf', \"correct pass\"",
        "num_ids": 355
    },
    {
        "number": 478,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters in a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation)).lower()\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.digits)).lower()\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation)).lower()\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.digits)).lower()\n",
        "test": "assert     remove_lowercase('{}') == '{}'",
        "num_ids": 4517
    },
    {
        "number": 479,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = int(n)\n    return n % 10\n",
        "test": "assert     first_Digit(5) == 5",
        "num_ids": 321
    },
    {
        "number": 554,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [int(x) for x in list if x % 2!= 0]\n",
        "test": "assert     Split([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1]",
        "num_ids": 342
    },
    {
        "number": 555,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    return abs(sum((i**3) for i in range(1,n))-sum(i**3 for i in range(1,n)))\n",
        "test": "assert     difference(3) == 0",
        "num_ids": 2479
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pairs = 0\n    for i in range(0,N) :\n        for j in range(i,N) :\n            if (A[i]^A[j])%2 == 1 :\n                odd_pairs = odd_pairs + 1\n    return odd_pairs\n",
        "test": "assert     find_Odd_Pair(A,N) == 0, \"Test is not correct\"",
        "num_ids": 451
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # empty string\n    if not string:\n        return \"\"\n    \n    # keep a pointer\n    stack = []\n    \n    # move string and append to string\n    for char in string:\n        stack.append(char)\n        \n    # append the string to string\n    result = \"\".join(stack)\n    \n    # if it's empty\n    if not result:\n        result = string\n    \n    # if the stack is empty\n    if not stack:\n        result = \"\".join(stack)\n        \n    return result\n    \n    \n    ",
        "test": "assert     toggle_string('Hello, World!') == 'Hello, World!', 'Should be Hello, World!'",
        "num_ids": 2680
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(map(int, str(abs(n1 - n2))))\n",
        "test": "assert     digit_distance_nums(23,43) == 2",
        "num_ids": 468
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0 or size < 0:\n        return 0\n    if size == 1:\n        return a[0]\n    max_so_far = 0\n    max_ending_here = -1\n    for i in range(0,size):\n        if max_ending_here < a[i]:\n            max_ending_here = max_ending_here + a[i]\n        else:\n            continue\n    for i in range(size,size-1,-1):\n        if max_ending_here < a[i]:\n            max_ending_here = max_ending_here + a[i]\n        else:\n            continue\n    return max_ending_here\n",
        "test": "assert     max_sub_array_sum(a=[], size=0) == 0",
        "num_ids": 659
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    # write your code here\n    i = 0\n    j = 0\n    while i < len(test_tup1):\n        if test_tup1[i] > test_tup2[i]:\n            j = j + 1\n            i = i + 1\n        else:\n            i = i + 1\n    result = (test_tup1[:j] + test_tup2[:j] + test_tup1[j:] + test_tup2[j:])\n    return result\n    \n",
        "test": "assert union_elements((1, 2, 3, 4, 5), (6, 7, 8, 9, 10)) == union_elements((1, 2, 3, 4, 5), (6, 7, 8, 9, 10))",
        "num_ids": 1095
    },
    {
        "number": 562,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    c = 0\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n        c += 1\n        \n    return c\n",
        "test": "assert     Find_Max_Length([]) == 0",
        "num_ids": 3965
    },
    {
        "number": 563,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    for k in range(len(text)):\n        if text[k] == '\"':\n            if k+1 < len(text):\n                if text[k+1] == '\"':\n                    continue\n                else:\n                    return text[k+1:]\n        elif text[k] == '\"':\n            if k+1 < len(text):\n                if text[k+1] == '\"':\n                    continue\n                else:\n                    return text[k+1:]\n    return text\n",
        "test": "assert     extract_values(\"In this string\") == \"In this string\"",
        "num_ids": 2570
    },
    {
        "number": 564,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Write your code here.\n    arr.sort()\n    if len(arr)<3:\n        return 0\n    i=0\n    j=0\n    count=0\n    while j<len(arr)-1:\n        if arr[i]>arr[j] and arr[j]!=arr[i+1]:\n            count+=1\n            i+=1\n        j+=1\n    return count\n    \n    \n",
        "test": "assert     count_Pairs([1,2,3],3) == 0, \"The function should return 0 if the list of integers is empty\" ",
        "num_ids": 2801
    },
    {
        "number": 565,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\ndef sort_alphabet(word): \n    '''\n    Write a python function to sort a string alphabetically.\n    '''\n    word_list = split(word)\n    word_list.sort()\n    return ''.join(word_list)\ndef sort_alphabet_with_spaces(word): \n    '''\n    Write a python function to sort a string alphabetically.\n    '''\n    word_list = split(word)\n    word_list.sort(key = sort_alphabet)\n    return ''.join(word_list)",
        "test": "assert     split('') == []",
        "num_ids": 376
    },
    {
        "number": 566,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    #can use math.log2(n) instead\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 477
    },
    {
        "number": 567,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([3,1,0,2,4,5,6,7]) is False, \"list is not sorted\"",
        "num_ids": 684
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dict1 = []\n    for i in range(length):\n        dict1.append({})\n    return dict1\n    \n    \ndef insert(list, k, v):\n    '''\n    Write a function that will insert a key-value pair into the dictionary.\n    The dictionary should have a key of the key-value pair and it should have a value of the value-key pair.\n    '''\n    if k not in list:\n        list.append(k)\n    list[list.index(k)][v] = v\n    \n    \ndef get(list, k):\n    '''\n    Write a function that will return the value of a key-value pair.\n    '''\n    if k in list:\n        return list[list.index(k)]\n    else:\n        return None\n    \n",
        "test": "assert         empty_list(1)",
        "num_ids": 327
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_list(list1):\n        return sorted(list1, key = str.casefold)\n    return sort_list(list1)\n    \ndef list_join(list1, list2):\n    '''\n    Write a function to join a list of strings into a single string.\n    '''\n    return ', '.join(list1) +'' + ', '.join(list2)\n    \ndef list_count(list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [list.count(word) for word in list]\n    \ndef list_index(list, word):\n    '''\n    Write a function to return the position of a given word in a given list.\n    '''\n    return list.index(word)\n    \ndef word_count(list):\n    '''\n    Write a function to count the number of occurrences of a word from a given list of words.\n    '''\n    return len(list)\n    \ndef list_reverse(list):\n    '''\n    Write a function to reverse a list of strings.\n    '''\n    return [list[i] for i in range(len(list) - 1, -1, -1)]\n    \ndef list_split(string):\n    '''\n    Write a function to split a given string into two lists of words.\n    '''\n    return [word for word in string.split()]\n    \ndef index(index, list):\n    '''\n    Write a function to return the index of a given word in a given list.\n    '''\n    return list.index(index)\n    \ndef string_join(string):\n    '''\n    Write a function to join a list of strings into a single string.\n    '''\n    return ''.join(string)\n    \ndef string_split(string):\n    '''\n    Write a function to split a given string into a list of strings.\n    '''\n    return [string[i : i + len(string)] for i in range(0, len(string), len(string) - i)]\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return string[::-1]\n    \ndef replace_letters(string, list):\n    '''\n    Write a function to replace the letters in a given string with another given list.\n    '''\n    return ''.join([letter if letter in list else '_' for letter in string])\n    \ndef count_words(list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return len([word for word in list if word.lower() in list])\n    \ndef delete_letter(string, list):\n    '''\n    Write a function to delete a single letter from a given string.\n    '''\n    return string.replace(list[0], list[1], 1)\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_prime(num):\n    '''\n    Write a function to check if a given number is prime.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef prime_generator(num):\n    '''\n    Write a function to generate a prime number between the given range.\n    '''\n    while True:\n        yield num\n        num += 1\n        \ndef is_fibonacci(number):\n    '''\n    Write a function to check if a given number is a Fibonacci number.\n    '''\n    if number < 1 or number > 5:\n        return False\n    if number == 0:\n        return True\n    if number == 1:\n        return False\n    if number == 2:\n        return True\n    if number == 3:\n        return False\n    if number == 4:\n        return True\n    return is_fibonacci(number - 1) and is_fibonacci(number - 2)\n    \ndef fibonacci_generator(number):\n    '''\n    Write a function to generate a Fibonacci number between the given range.\n    '''\n    if number < 1 or number > 5:\n        return None\n    return fibonacci_generator(number - 1) + fibonacci_generator(number - 2)\n    \ndef factorial(number):\n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if number <= 1:\n        return 1\n    else:\n        return number * factorial(number - 1)\n    \ndef fibonacci_count(number):\n    '''\n    Write a function to calculate the number of Fibonacci numbers less than or equal to a given number.\n    '''\n    return factorial(number - 1) // factorial(number - 2)\n    \ndef word_frequency(word, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [list.count(word) for word in list]\n    \ndef word_frequency_list(word, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [list.count(word) for word in list if word.lower() in list]\n    \ndef letter_frequency(string, list):\n    '''\n    Write a function to count the number of times a given letter appears in a given list of words.\n    '''\n    return [string.count(letter) for letter in list]\n    \ndef letter_frequency_list(string, list):\n    '''\n    Write a function to count the number of times a given letter appears in a given list of words.\n    '''\n    return [string.count(letter) for letter in list if letter.lower() in list]\n    \ndef word_frequency_and_letter_frequency(string, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [string.count(word) for word in list if word.lower() in list]\n    \ndef word_frequency_and_letter_frequency_list(string, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [string.count(word) for word in list if word.lower() in list]\n    \ndef lexicographical_sort(string):\n    '''\n    Write a function to sort a given string.\n    '''\n    return sorted(string)\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_list(list):\n    '''\n    Write a function to check if a given list is a palindrome.\n    '''\n    return [list[i] for i in range(len(list) - 1, -1, -1)]\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return string[::-1]\n    \ndef list_count_equal_to_letters(string, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return len([word for word in string if word.lower() in list])\n    \ndef list_index_equal_to_letters(string, list):\n    '''\n    Write a function to return the position of a given word in a given list.\n    '''\n    return list.index(string)\n    \ndef index_and_count(index, string):\n    '''\n    Write a function to return the index of a given word in a given list.\n    '''\n    return index + string.index(index)\n    \ndef word_count_equal_to_letters(string, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return len([word for word in string if word.lower() in list])\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 939
    },
    {
        "number": 572,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_copy = []\n    for num in nums:\n        if num not in nums_copy:\n            nums_copy.append(num)\n    return nums_copy\n",
        "test": "assert     two_unique_nums([]) == []",
        "num_ids": 2711
    },
    {
        "number": 573,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    return sum(unique_numbers)\n",
        "test": "assert     unique_product([1,2,3,4,5]) == 15",
        "num_ids": 2675
    },
    {
        "number": 574,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return(4/3)*np.pi*r**3\n",
        "test": "assert     surfacearea_cylinder(0,0) == 0.0",
        "num_ids": 338
    },
    {
        "number": 576,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (len(A)!= len(B)): \n        return False\n    if (B==[]) or (B==None): \n        return True\n    for i in range(len(A)): \n        if (A[i]!=B[i]): \n            return False\n    return True\n",
        "test": "assert     is_Sub_Array([0, 1, 2, 3], [0, 1, 2, 3]) == True",
        "num_ids": 555
    },
    {
        "number": 577,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print (\"Invalid input\")\n    else:\n        x = n\n        a = 1\n        b = 1\n        while x > 0:\n            a = a * x % 10\n            x = x // 10\n        return a\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 322
    },
    {
        "number": 578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l1=len(list1)\n    l2=len(list2)\n    l3=len(list3)\n    i=l1\n    while i<l2+l3:\n        list1[i]=list1[i-l1]\n        list2[i]=list2[i-l2]\n        list3[i]=list3[i-l3]\n        i=i+1\n    return list1+list2+list3\n",
        "test": "assert     (interleave_lists(['a','b','c','d','e'],['a','b','d','e','c'],['d','e','c','a','b']) == ['a','d','e','c','b','a'])",
        "num_ids": 1201
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            count = count + 1\n    if count == len(test_tup1):\n        return None\n    elif count == 0:\n        return None\n    else:\n        return test_tup1[:count]\n",
        "test": "assert     find_dissimilar([1,3,4,3], [1,3,4,4]) == [1,3,4]",
        "num_ids": 969
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    tuple_list = test_tuple\n    if tuple_list!= \"\":\n        if tuple_list[0] == '()' and tuple_list[-1] == '(':\n            del tuple_list[0:2]\n        elif tuple_list[0] == '()' and tuple_list[-1] == '()':\n            del tuple_list[-1]\n        elif tuple_list[0] == '(':\n            del tuple_list[0:1]\n        elif tuple_list[0] == '()':\n            del tuple_list[0]\n        else:\n            pass\n        odd_ele(tuple_list, even_fnc)\n    return tuple_list\n    \n",
        "test": "assert     even_ele(['a', 'b', 'c'], lambda x, y: x[3] + y[2]) == 'c'",
        "num_ids": 2896
    },
    {
        "number": 581,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = b * s\n    return s\n",
        "test": "assert     surface_Area(0,0)==0",
        "num_ids": 443
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({})",
        "num_ids": 2254
    },
    {
        "number": 583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 2193
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #Finds the adverb ending with ly\n    ly = re.findall(\"ly\", text)\n    adverbs = []\n    #Finds the adverbs ending with ly\n    adverbs.append(ly[0][len(ly[0])-1])\n    adverbs.append(ly[1])\n    adverbs.append(ly[2])\n    #Finds the adverbs ending with ly\n    adverbs.append(ly[3][len(ly[3])-1])\n    adverbs.append(ly[4])\n    adverbs.append(ly[5])\n    adverbs.append(ly[6])\n    adverbs.append(ly[7])\n    adverbs.append(ly[8])\n    adverbs.append(ly[9])\n    adverbs.append(ly[10])\n    adverbs.append(ly[11])\n    #Finds the adverbs ending with ly\n    adverbs.append(ly[12][len(ly[12])-1])\n    adverbs.append(ly[13])\n    adverbs.append(ly[14])\n    adverbs.append(ly[15])\n    adverbs.append(ly[16])\n    adverbs.append(ly[17])\n    adverbs.append(ly[18])\n    adverbs.append(ly[19])\n    adverbs.append(ly[20])\n    adverbs.append(ly[21])\n    adverbs.append(ly[22])\n    adverbs.append(ly[23])\n    adverbs.append(ly[24])\n    adverbs.append(ly[25])\n    adverbs.append(ly[26])\n    adverbs.append(ly[27])\n    adverbs.append(ly[28])\n    adverbs.append(ly[29])\n    adverbs.append(ly[30])\n    adverbs.append(ly[31])\n    adverbs.append(ly[32])\n    adverbs.append(ly[33])\n    adverbs.append(ly[34])\n    adverbs.append(ly[35])\n    adverbs.append(ly[36])\n    adverbs.append(ly[37])\n    adverbs.append(ly[38])\n    adverbs.append(ly[39])\n    adverbs.append(ly[40])\n    adverbs.append(ly[41])\n    adverbs.append(ly[42])\n    adverbs.append(ly[43])\n    adverbs.append(ly[44])\n    adverbs.append(ly[45])\n    adverbs.append(ly[46])\n    adverbs.append(ly[47])\n    adverbs.append(ly[48])\n    adverbs.append(ly[49])\n    adverbs.append(ly[50])\n    adverbs.append(ly[51])\n    adverbs.append(ly[52])\n    adverbs.append(ly[53])\n    adverbs.append(ly[54])\n    adverbs.append(ly[55])\n    adverbs.append(ly[56])\n    adverbs.append(ly[57])\n    adverbs.append(ly[58])\n    adverbs.append(ly[59])\n    adverbs.append(ly[60])\n    adverbs.append(ly[61])\n    adverbs.append(ly[62])\n    adverbs.append(ly[63])\n    adverbs.append(ly[64])\n    adverbs.append(ly[65])\n    adverbs.append(ly[66])\n    adverbs.append(ly[67])\n    adverbs.append(ly[68])\n    adverbs.append(ly[69])\n    adverbs.append(ly[70])\n    adverbs.append(ly[71])\n    adverbs.append(ly[72])\n    adverbs.append(ly[73])\n    adverbs.append(ly[74])\n    adverbs.append(ly[75])\n    adverbs.append(ly[76])\n    adverbs.append(ly[77])\n    adverbs.append(ly[78])\n    adverbs.append(ly[79])\n    adverbs.append(ly[80])\n    adverbs.append(ly[81])\n    adverbs.append(ly[82])\n    adverbs.append(ly[83])\n    adverbs.append(ly[84])\n    adverbs.append(ly[85])\n    adverbs.append(ly[86])\n    adverbs.append(ly[87])\n    adverbs.append(ly[88])\n    adverbs.append(ly[89])\n    adverbs.append(ly[90])\n    adverbs.append(ly[91])\n    adverbs.append(ly[92])\n    adverbs.append(ly[93])\n    adverbs.append(ly[94])\n    adverbs.append(ly[95])\n    adverbs.append(ly[96])\n    adverbs.append(ly[97])\n    adverbs.append(ly[98])\n    adverbs.append(ly[99])\n    adverbs.append(ly[100])\n    adverbs.append(ly[101])\n    adverbs.append(ly[102])\n    adverbs.append(ly[103])\n    adverbs.append(ly[104])\n    adverbs.append(ly[105])\n    adverbs.append(ly[106])\n    adverbs.append(ly[107])\n    adverbs.append(ly[108])\n    adverbs.append(ly[109])\n    adverbs.append(ly[110])\n    adverbs.append(ly[111])\n    adverbs.append(ly[112])\n    adverbs.append(ly[113])\n    adverbs.append(ly[114])\n    adverbs.append(ly[115])\n    adverbs.append(ly[116])\n    adverbs.append(ly[117])\n    adverbs.append(ly[118])\n    adverbs.append(ly[119])\n    adverbs.append(ly[120])\n    adverbs.append(ly[121])\n    adverbs.append(ly[122])\n    adverbs.append(ly[123])\n    adverbs.append(ly[124])\n    adverbs.append(ly[125])\n    adverbs.append(ly[126])\n    adverbs.append(ly[127])\n    adverbs.append(ly[128])\n    adverbs.append(ly[129])\n    adverbs.append(ly[130])\n    adverbs.append(ly[131])\n    adverbs.append(ly[132])\n    adverbs.append(ly[133])\n    adverbs.append(ly[134])\n    adverbs.append(ly[135])\n    adverbs.append(ly[136])\n    adverbs.append(ly[137])\n    adverbs.append(ly[138])\n    adverbs.append(ly[139])\n    adverbs.append(ly[140])\n    adverbs.append(ly[141])\n    adverbs.append(ly[142])\n    adverbs.append(ly[143])\n    adverbs.append(ly[144])\n    adverbs.append(ly[145])\n    adverbs.append(ly[146])\n    adverbs.append(ly[147])\n    adverbs.append(ly[148])\n    adverbs.append(ly[149])\n    adverbs.append(ly[150])\n    adverbs.append(ly[151])\n    adverbs.append(ly[152])\n    adverbs.append(ly[153])\n    adverbs.append(ly[154])\n    adverbs.append(ly[155])\n    adverbs.append(ly[156])\n    adverbs.append(ly[157])\n    adverbs.append(ly[158])\n    adverbs.append(ly[159])\n    adverbs.append(ly[160])\n    adverbs.append(ly[161])\n    adverbs.append(ly[162])\n    adverbs.append(ly[163])\n    adverbs.append(ly[164])\n    adverbs.append(ly[165])\n    adverbs.append(ly[166])\n    adverbs.append(ly[167])\n    adverbs.append(ly[168])\n    adverbs.append(ly[169])\n    adverbs.append(ly[170])\n    adverbs.append(ly[171])\n    adverbs.append(ly[172])\n    adverbs.append(ly[173])\n    a",
        "test": "assert     find_adverbs('ly is this way, lys.') == ('ly', 4)",
        "num_ids": 8541
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items)==0:\n        return []\n    heap = []\n    heapq.heapify(heap)\n    result=[]\n    for item in items:\n        heapq.heappush(heap,-item)\n        heapq.heappush(heap,-item)\n    while heap:\n        x = heapq.heappop(heap)\n        if x not in result:\n            result.append(x)\n    return result[:n]\n",
        "test": "assert     expensive_items([1,2,3,4,5],5) == [5,4,3,2,1], 'the function is incorrect!'",
        "num_ids": 877
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:]+l[:n]\n",
        "test": "assert     split_Arr(['1', '2', '3'], 3) == ['1', '2', '3']",
        "num_ids": 612
    },
    {
        "number": 587,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n    #return list(listx)\n",
        "test": "assert     list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 502
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize empty list to store the list of numbers\n    ls = []\n    # iterate through the list to get the max value and min value\n    for i in range(len(nums)):\n        # add the max value to the ls list\n        ls.append(nums[i][0])\n        # add the min value to the ls list\n        ls.append(nums[i][1])\n    # initialize the difference as 0\n    diff = 0\n    # iterate through the list to find the difference\n    for i in range(len(nums)):\n        # find the difference between max and min value in the list\n        diff = abs(ls[i] - ls[i + 1])\n        # add the difference to the list\n        diff = diff + 1\n    # return the difference\n    return diff\n",
        "test": "assert     big_diff([]) == 0",
        "num_ids": 976
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a==b:\n        return b\n    if a==0:\n        return 0\n    if b==0:\n        return 0\n    if a**2+b**2==a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return b**2+a**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n",
        "test": "assert     perfect_squares(10, 10) == 10, \"Error\"",
        "num_ids": 2513
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    p1 = cmath.phase(x)\n    p2 = cmath.phase(y)\n    phi = cmath.phase(x)\n    phi = cmath.phase(y)\n    r1 = cmath.polar_to_rect(p1)\n    r2 = cmath.polar_to_rect(p2)\n    x1 = r1.real\n    x2 = r2.real\n    y1 = r1.imag\n    y2 = r2.imag\n    x = x1 + 1j*x2\n    y = y1 + 1j*y2\n    return x,y\n",
        "test": "assert ",
        "num_ids": 546
    },
    {
        "number": 591,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[::-1]\n    return newList\n    \ndef bubble_sort(newList):\n    '''\n    Write a python function to sort the elements in a list in ascending order.\n    '''\n    for i in range(len(newList)):\n        for j in range(0,len(newList)-i-1):\n            if newList[j] > newList[j+1]:\n                temp = newList[j]\n                newList[j] = newList[j+1]\n                newList[j+1] = temp\n    return newList\n",
        "test": "assert     swap_List([]) == []",
        "num_ids": 601
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = 1\n    for i in range(1,k+1):\n        a = a * (n-i)\n    return a\n",
        "test": "assert binomial_Coeff(1,0) == 1",
        "num_ids": 423
    },
    {
        "number": 593,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if '0.' in ip:\n        ip = ip.replace('0.', '')\n    return ip\n",
        "test": "assert     removezero_ip('123') == '123'",
        "num_ids": 2534
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = list1[0] - list1[1]\n    if len(list1) == 2:\n        if list1[0] == list1[1]:\n            return list1[0] - diff\n    if diff % 2 == 0:\n        return diff\n    else:\n        return list1[1] - diff\n",
        "test": "assert     diff_even_odd([3, 2, 1]), 'The function should return [3, 2, 1] '",
        "num_ids": 758
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 4589
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list[i])):\n            sys.stdout.write(str(tuple_list[i][j]) + \"\\t\")\n        sys.stdout.write(\"\\n\")\n    return sum(tuple_list)\n",
        "test": "assert     tuple_size([]) == 0",
        "num_ids": 491
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Sorting the array.\n    arr1.sort()\n    arr2.sort()\n",
        "test": "assert     find_kth(arr1, arr2, 12) == 3 and     find_kth(arr1, arr2, 13) == 2 and     find_kth(arr1, arr2, 14) == 1 and     find_kth(arr1, arr2, 15) == 0, 'find_kth'     is not correct",
        "num_ids": 843
    },
    {
        "number": 598,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Write your code here\n    \n    is_armstrong = False\n    try:\n        number = int(number)\n    except ValueError:\n        is_armstrong = False\n        \n    if len(str(number)) == 1:\n        is_armstrong = True\n    else:\n        is_armstrong = False\n        \n    return is_armstrong\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     armstrong_number(0), 'is not armstrong number'",
        "num_ids": 2479
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(0, number+1):\n        sum += i\n    average = sum / number\n    return average\n    \n",
        "test": "assert     sum_average(3) == 2",
        "num_ids": 412
    },
    {
        "number": 600,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #if n is even \n    if n % 2 == 0 :\n        #check if n is odd\n        if n == 2 or n == 4 or n == 6 or n == 8 :\n            return True\n        else :\n            return False\n    #if n is not even\n    else :\n        return False\n",
        "test": "assert     is_Even(2)",
        "num_ids": 293
    },
    {
        "number": 602,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if i == str1[count]:\n            count = count + 1\n            if count == 1:\n                return str1[count - 1]\n        count = 0\n    return 'Not found'\n",
        "test": "assert     first_repeated_char('abacdg') == 'a','should be a'",
        "num_ids": 602
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucky_list = []\n    for i in range(1,n):\n        if i%10 == 0:\n            lucky_list.append(i)\n    return lucky_list\n",
        "test": "assert     get_ludic(25) == [25, 26, 27, 28, 29, 30, 31, 32, 33]",
        "num_ids": 752
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reverse_words_list = []\n    # Write your code here\n    # user input\n    if len(s) == 1:\n        return s\n    elif len(s) > 1:\n        # the reversed words\n        for i in range(len(s) - 1):\n            reverse_words_list.append(s[i])\n            reverse_words_list.append(s[i+1])\n        # return the reversed string\n        return''.join(reverse_words_list)\n    else:\n        raise ValueError\n",
        "test": "assert     reverse_words('The quick brown fox jumps over the lazy dog') == 'jhuuhgfzjkqm'",
        "num_ids": 554
    },
    {
        "number": 605,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    # if it is not prime number return False.\n    if num > 1:\n        # if it is divisible by any number from 2 to 5, return False\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 3 to 9, return False\n        for i in range(3, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 10 to 99, return False\n        for i in range(10, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 100 to 999, return False\n        for i in range(100, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 1000 to 9999, return True\n        for i in range(1000, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 10000 to 9999, return True\n        for i in range(10000, num):\n            if (num % i) == 0:\n                return False\n        # return True\n        return True\n    # return False\n    return False\n",
        "test": "assert     prime_num(3)",
        "num_ids": 752
    },
    {
        "number": 606,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "test": "assert     radian_degree(0) == 0",
        "num_ids": 550
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    index = 0\n    index_pattern = 0\n    end_index = 0\n",
        "test": "assert     (find_literals(\"hello\", \"a\"), 1, 1), \"find_literals works correctly\"",
        "num_ids": 898
    },
    {
        "number": 608,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 9\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n    \n    \ndef find_nth_bell(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    if n == 0:\n        return 9\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 1\n    else:\n        return find_nth_bell(n-1) + find_nth_bell(n-2)\n",
        "test": "assert     bell_Number(2) == 2",
        "num_ids": 280
    },
    {
        "number": 610,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #Defining index variables\n    i = 0\n    #Iterating through each element\n    for item in list1:\n        #Incrementing index variable\n        i = i + 1\n        #Adding k'th element to list\n        if i < L:\n            list1[i] = list1[i-1]\n    return list1\n",
        "test": "assert     remove_kth_element([1, 3, 6], 0) == [1, 3, 6]",
        "num_ids": 897
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # write your code here\n    return test_list[0][N]\n",
        "test": "assert     max_of_nth([[3,7,9],[3,6,6],[5,3,1]], 0) == 3     # 0 element",
        "num_ids": 747
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    s = []\n    for i in lst:\n        if type(i)!= list:\n            raise ValueError(\"Given list must be of type list.\")\n        s += i\n    return s\n    ",
        "test": "assert     merge([[1,2,3],[4,5,6]])==[1,2,3,4,5,6], 'Expected the list containing 2 lists as values'",
        "num_ids": 803
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative = []\n    for item in test_list:\n        for x in range(len(item)):\n            cummulative.append(item[x])\n    return sum(cummulative)\n",
        "test": "assert     cummulative_sum([]) == 0",
        "num_ids": 524
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        if type(nums[i]) == tuple:\n            for j in range(len(nums[i])):\n                avg_list.append(nums[i][j])\n        else:\n            avg_list.append(nums[i])\n    \n    return avg_list\n",
        "test": "assert     average_tuple(()) == []",
        "num_ids": 943
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1\n",
        "test": "assert tuple_modulo(('a','b'), ('x','y')) == ('x', 'y')",
        "num_ids": 849
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #jumps = 0\n    #for step in steps:\n    #    if step == d:\n    #        return jumps\n    #    jumps += steps.count(step)\n    #return jumps\n    return 0\n",
        "test": "assert     min_Jumps(3,0) == 0",
        "num_ids": 1008
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return nums1/nums2\n",
        "test": "assert ",
        "num_ids": 472
    },
    {
        "number": 619,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Declare empty string\n    string_to_move = ''\n    for letter in test_str:\n        if letter.isdigit() == False:\n            string_to_move = string_to_move + letter\n    # Iterate through string\n    for letter in string_to_move:\n        test_str = test_str.replace(letter, letter.zfill(4))\n    return test_str\n",
        "test": "assert     move_num(\"\") == \"\", 'It should print an empty string'",
        "num_ids": 668
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n < 2:\n        return 0\n    curr = [1] * n\n    for i in range(2, n):\n        curr[i] = curr[i-1] + 1\n        for j in range(i-1, -1, -1):\n            if a[j] % curr[i-1] == 0:\n                curr[i] = 1\n    return curr[n-1]\n",
        "test": "assert     largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21] #Test case with [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]",
        "num_ids": 1128
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    if (n == 0):\n        return None\n    if (n == 1):\n        return arr1[0]\n    if (n == 2):\n        return arr1[0] + arr2[0]\n",
        "test": "assert     get_median([1, 3, 4], [1, 2, 3], 1) == 1.0",
        "num_ids": 762
    },
    {
        "number": 623,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    return [pow(nums[i],n) for i in range(len(nums))]\n",
        "test": "assert     nth_nums([1,2,3,4,5,6,7], 2) == [1, 4, 9, 16, 25, 36, 49]",
        "num_ids": 535
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n",
        "test": "assert     is_upper('GE') == True",
        "num_ids": 328
    },
    {
        "number": 625,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    # take the length of the list\n    l = len(newList)\n    \n    # if the length of the list is odd then we have to swap the first and last element\n    if l % 2 == 1:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        \n    # if the length of the list is even then we have to swap the first and last element\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        \n    # return the list\n    return newList\n",
        "test": "assert swap_List([3, 4, 5]), \"should be [5, 4, 3]\"",
        "num_ids": 662
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        area_1 = r * r\n        area_2 = r * 2 * math.pi\n        area_3 = (r * r * r) + 2 * r * math.pi\n        area_4 = (r * r * r * r) - 2 * r * math.pi\n        if (area_1 < area_2) and (area_2 < area_3) and (area_3 < area_4):\n            return True\n        return False\n    if (r < 0) :\n        return False\n    if (r == 0) :\n        return 0\n    if (r == 0.5) :\n        return 1\n    if (r == 1) :\n        return 0.5\n    if (r < 1) :\n        return False\n    if (area(r) == True) :\n        return area(r)\n",
        "test": "assert     triangle_area(3.14) == 1",
        "num_ids": 1016
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n",
        "test": "assert ",
        "num_ids": 2636
    },
    {
        "number": 628,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string=string.replace(' ', '%20')\n    return string\n",
        "test": "assert     replace_spaces('foo baz') == 'foo%20baz'",
        "num_ids": 551
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in list: \n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n",
        "test": "assert     Split([2,4,6,8,10]) == [2, 4, 6, 8, 10], \"The Split function is incorrect\"",
        "num_ids": 2494
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Set up a return variable, allocated to a list.\n    adjacents = []\n",
        "test": "assert     adjac((0, 0), [1, 2, 3, 4]) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)]",
        "num_ids": 451
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_without_spaces = text.replace(' ', '_')\n    text_without_spaces = text_without_spaces.replace('\\n', '_')\n    text_without_spaces = text_without_spaces.replace('\\t', '_')\n    return text_without_spaces\n    \ndef replace_spaces_with_punctuation(text):\n    '''\n    Write a function that takes in a string of text and replaces the space characters with punctuation.\n    '''\n    text_without_spaces = text.replace(' ', '_')\n    text_without_spaces = text_without_spaces.replace('\\n', '_')\n    text_without_spaces = text_without_spaces.replace('\\t', '_')\n    text_without_spaces = text_without_spaces.replace('!', '_')\n    text_without_spaces = text_without_spaces.replace('-', '_')\n    text_without_spaces = text_without_spaces.replace('.', '_')\n    return text_without_spaces\n    \ndef split_sentence_by_newline(text):\n    '''\n    Write a function that takes in a string of text and splits it into separate sentences.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('_','')\n    return text.split(' ')\n    \ndef split_sentence_by_newline_and_spaces(text):\n    '''\n    Write a function that takes in a string of text and splits it into separate sentences.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('_','')\n    return text.split(' ')\n    \ndef remove_stopwords(text):\n    '''\n    Write a function that takes in a string of text and removes stopwords from it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('_','')\n    return text.split(' ')\n    \ndef extract_words_from_text(text):\n    '''\n    Write a function that takes in a string of text and returns a list of words from it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return text.split()\n    \ndef get_number_of_words(text):\n    '''\n    Write a function that takes in a string of text and returns the number of words in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split())\n    \ndef get_percentage_of_words(text, num):\n    '''\n    Write a function that takes in a string of text and the number of words in it, and returns the percentage of the words.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return (len(text.split()) / num) * 100\n    \ndef count_number_of_total_words(text, num):\n    '''\n    Write a function that takes in a string of text and the number of total words in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split()) / num\n    \ndef count_number_of_words(text, num):\n    '''\n    Write a function that takes in a string of text and the number of words in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split())\n    \ndef count_number_of_symbols(text, num):\n    '''\n    Write a function that takes in a string of text and the number of symbols in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split())\n    \ndef count_number_of_numbers(text, num):\n    '''\n    Write a function that takes in a string of text and the number of numbers in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split())\n    \ndef count_number_of_whitespaces(text):\n    '''\n    Write a function that takes in a string of text and returns the number of whitespaces in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replac",
        "test": "assert     replace_spaces('') == ''",
        "num_ids": 642
    },
    {
        "number": 632,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_array = []\n    for i in num_list:\n        if i!= 0:\n            zero_array.append(i)\n    zero_array.reverse()\n    return zero_array\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 2637
    },
    {
        "number": 633,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    Sum = 0\n    for i in range(0, n - 1) : \n        Sum = Sum ^ arr[i] ^ arr[i+1] \n    return Sum \n",
        "test": "assert     pair_xor_Sum([],0) == 0",
        "num_ids": 688
    },
    {
        "number": 635,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and arr[l][0] < arr[i][0]:\n            largest = l\n        if r < n and arr[r][0] < arr[largest][0]:\n            largest = r\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            _heapify(arr, n, largest)\n    n = len(iterable)\n    # Build minheap.\n    for i in range(n, -1, -1):\n        _heapify(iterable, n, i)\n    # Copy heap, sort, and return.\n    for i in range(n-1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        _heapify(iterable, i, 0)\n    return iterable\n",
        "test": "assert     heap_sort([]) == []",
        "num_ids": 906
    },
    {
        "number": 637,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost >= sale_amount\n",
        "test": "assert     noprofit_noloss(10000,10000) == True",
        "num_ids": 523
    },
    {
        "number": 638,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 3.74\n    r = 1013.25\n    \n    x = (v*t)/k\n    z = x-r\n    if z>0:\n        c = z/(r-k)\n    else:\n        c = 0\n    return round(math.log(c+1.0,10),1)\n",
        "test": "assert     wind_chill(1.0,1.0) == 0.0",
        "num_ids": 2498
    },
    {
        "number": 639,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name.lower()[0] == 'a')\n",
        "test": "assert     sample_nam(['Jane', 'Sally']) == 0, \"sample_nam failed\"",
        "num_ids": 2665
    },
    {
        "number": 640,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    s = ''\n    for x in items:\n        if x!= '(' and x!= ')' and x!= '{' and x!= '}' and x!= '[' and x!= ']':\n            s += x\n    return s\n",
        "test": "assert     remove_parenthesis('') == ''",
        "num_ids": 2731
    },
    {
        "number": 641,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    x=1\n    for i in range(1, n+1):\n        if (i % (n+1) == 0):\n            x = x * i\n    return x\n",
        "test": "assert     is_nonagonal(1), \"The function is_nonagonal should be undefined for non-numeric values of n.\"",
        "num_ids": 565
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text[0]=='z'):\n        return True\n    else:\n        return False\n",
        "test": "assert         text_match_wordz_middle(\"jim is the quick brown fox jumped over the lazy dog\") == False",
        "num_ids": 584
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # if the array is empty or empty, return nothing\n    if input == None or len(input) == 0:\n        return []\n    \n    # check if the array is sorted\n    if is_sorted(input):\n        # if the array is sorted return nothing\n        return input\n    \n    # if the array is not sorted then reverse the array. \n    else:\n        # reverse the elements of the array upto the given position \n        # by swapping the first and last elements\n        output = [input[0]] + reverse_Array_Upto_K(input[1:],k)\n        # return reversed result\n        return output\n    \ndef is_sorted(input):\n    '''\n    Write a python function to check whether an array is sorted.\n    '''\n    # if the array is unsorted or sorted return false\n    if len(input) < 2:\n        return True\n    \n    # if the array has only one element\n    if len(input) <= 1:\n        # return false\n        return False\n    \n    # get the first element\n    first_element = input[0]\n    \n    # if the first element of the array is larger than the next element\n    if first_element > input[1]:\n        # if the array has more than one element\n        return False\n    \n    # if the first element of the array is the same as the next element\n    if first_element == input[1]:\n        # return false\n        return False\n    \n    # if the first element of the array is smaller than the next element\n    return is_sorted(input[1:])\n    \n    \ndef main():\n    # read the array elements\n    arr = [int(x) for x in input().strip().split()]\n    \n    # get the length of the array\n    n = len(arr)\n    \n    # reverse the array\n    arr = reverse_Array_Upto_K(arr, n)\n    \n    # output the result\n    print(*arr)\n",
        "test": "assert     reverse_Array_Upto_K([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1053
    },
    {
        "number": 720,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        if key in test_tup:\n            test_tup[key].append(test_dict[key])\n        else:\n            test_tup[key] = test_dict[key]\n    return test_tup\n",
        "test": "assert     add_dict_to_tuple(('a', 'b'), {}) == ('a', 'b')",
        "num_ids": 765
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0:\n        return 0\n    \n    visited = [[0 for i in range(N)] for j in range(N)]\n    answer = 0\n",
        "test": "assert ",
        "num_ids": 644
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students:\n        if (student[1][0] >= h and student[1][1] >= w):\n            filtered_students.append(student)\n    return filtered_students\n",
        "test": "assert     filter_data({}, 0.0, 0.0) == []",
        "num_ids": 830
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n",
        "test": "assert     count_same_pair([1,2,3,4,1,2,3], [3,3]) == 4, \"Counting a pair is incorrect\"",
        "num_ids": 951
    },
    {
        "number": 724,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base * power\n",
        "test": "assert         power_base_sum(9, 5) == sum(range(1, 10)), \"The correct answer is 9\"",
        "num_ids": 405
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pat = re.compile(r\"(?<=[.?!])'(.+)'(?:[^']*)'\", re.DOTALL)\n    quotation_list = quotation_pat.findall(text1)\n    #print(quotation_list)\n    for quotation in quotation_list:\n        print(quotation)\n        if quotation[2]=='\\n':\n            text2 = text1.replace(quotation[0],'')\n        else:\n            text2 = text1.replace(quotation[0],' '+quotation[2]+quotation[3])\n        text1 = text2\n    return text1",
        "test": "assert     extract_quotation('\"I\\'m Tom\"\\n\"I\\'m Tom\"\\n\"I\\'m Tom\"\\n\"I\\'m Tom\"\\n\"I\\'m Tom\"\\n\"I\\'m Tom\"\\n\"I\\'m Tom\"\\n\"I\\'m Tom\"\\n\"I\\'m Tom\"\\n\"I\\'m Tom\"\\n\"I\\'m Tom\"\\n\"I\\'m Tom\"\\n\"I\\'m Tom\"\\n\"I\\'m Tom\"\\n\"I\\'m Tom\"') == ['I\\'m Tom', 'I\\'m Tom', 'I\\'m Tom', 'I\\'m Tom', 'I\\'m Tom', 'I\\'m Tom', 'I\\'m Tom', 'I\\'m Tom', 'I\\'m Tom', 'I\\'m Tom', 'I\\'m Tom', 'I\\'m Tom']",
        "num_ids": 1353
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    \n    return tuple(test_tup[i] * test_tup[i+1] for i in range(N-1))\n",
        "test": "assert     multiply_elements([1,6,9]) == (144,720)",
        "num_ids": 766
    },
    {
        "number": 728,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for i in range(len(lst1)):\n        sum = sum + lst1[i] + lst2[i]\n    return sum\n",
        "test": "assert     sum_list([], []) == 0",
        "num_ids": 913
    },
    {
        "number": 730,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        if nums[i] in nums_set:\n            nums_set.remove(nums[i])\n    return nums\n",
        "test": "assert     consecutive_duplicates([1,1,1,1,1]) == [1,1,1,1,1], \"not the same\"",
        "num_ids": 2812
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0.5 * math.pi * r * h\n    return s\n",
        "test": "assert     lateralsurface_cone(0.0,0.5) == 0",
        "num_ids": 809
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # E.g. \"A: B: C: D\" becomes \"A:2:3:4:5:6:7\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A: B: C: D\" becomes \"A:2:3:4:5:6:7\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A: B: C: D\" becomes \"A:2:3:4:5:6\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A: B: C: D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=",
        "test": "assert     replace_specialchar('     ') =='   '",
        "num_ids": 6465
    },
    {
        "number": 733,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def is_numeric(str):\n        try:\n            float(str)\n        except ValueError:\n            return False\n        else:\n            return True\n    \n    def find_first_occurrence_naive(A, x):\n        if len(A) == 0:\n            return -1\n        if A[0] == x:\n            return 0\n        i = 1\n        while i < len(A):\n            if A[i] <= x:\n                i += 1\n            else:\n                break\n        return i - 1\n    \n    if not is_numeric(A[0]):\n        return -1\n    \n    i = 0\n    j = 0\n    while i < len(A) and j < len(A):\n        if A[i] < x:\n            i += 1\n        elif A[i] >= x:\n            j += 1\n    \n    return i - 1 if j!= len(A) else len(A) - 1\n",
        "test": "assert     find_first_occurrence([0, 0, 1], 3) == 2",
        "num_ids": 861
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    from collections import Counter\n    counter = Counter(arr)\n    sum = 0\n    for i in range(len(arr)):\n        if counter[arr[i]]!= 0:\n            sum += arr[i]*counter[arr[i]]\n            counter[arr[i]] -= 1\n    return sum\n",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 785
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n % 2 == 0:\n        n = n//2\n        n = n - 1\n    else:\n        n = n - 1\n        n = n + 1\n    return n\n",
        "test": "assert     set_middle_bits(3) == 3",
        "num_ids": 4303
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return -1\n    else:\n        return index-1\n",
        "test": "assert     left_insertion(a=[1,3,8,10,15,17], x=13) == 3",
        "num_ids": 719
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.search(regex, string)\n    return bool(result)\n",
        "test": "assert     check_str(\"hi\") == False",
        "num_ids": 446
    },
    {
        "number": 738,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (n * geometric_sum(n-1))\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 356
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    print(f'index of the {n} smallest triangular number is {n}')\n    \n    # A simple heuristic is to use this value as the pivot point. \n    pivot = (n//2)+1\n    \n    # The only comparison we have is with the reference array, so we can use the \"==\" operator\n    for i in range(pivot,n+1):\n        if i == pivot:\n            return 1\n        elif i % pivot == 0:\n            return 2\n        else:\n            return 3\n    \n    # If we reach here, it means that there are two pivots. \n    return -1\n    \ndef find_Index_2(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # A simple heuristic is to use this value as the pivot point. \n    pivot = n//2\n    \n    # The only comparison we have is with the reference array, so we can use the \"==\" operator\n    for i in range(n,1,-1):\n        if i == pivot:\n            return 1\n        elif i % pivot == 0:\n            return 2\n        else:\n            return 3\n    \n    # If we reach here, it means that there are two pivots. \n    return -1\n    \ndef gcd(x,y):\n    '''\n    A Python function to find the GCD of two integers.\n    '''\n    if x == y:\n        return x\n",
        "test": "assert     find_Index(10) == 1",
        "num_ids": 782
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_tup = {}\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            result_tup[test_tup[i]] = test_tup[i+1]\n        else:\n            result_tup[test_tup[i]] = test_tup[i+1]\n            result_tup[test_tup[i]] = test_tup[i]\n    return result_tup\n",
        "test": "assert     tuple_to_dict(tuple_to_dict(tuple())) == {}",
        "num_ids": 818
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = list(s)\n    return all(l[i] == l[i+1] for i in range(len(l)-1))\n",
        "test": "assert     all_Characters_Same('aab') == False",
        "num_ids": 413
    },
    {
        "number": 742,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    area = 4 * side**2\n    return area\n",
        "test": "assert     area_tetrahedron(0) == 0",
        "num_ids": 2397
    },
    {
        "number": 743,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if n < m:\n        n = m\n    # make list of len(list) elements\n    result = []\n    for i in range(n):\n        result.append(list[i])\n    # looping till n elements\n    for i in range(n):\n        for j in range(n-i-1):\n            result[j], result[j+1] = result[j+1], result[j]\n    # returning result\n    return result\n",
        "test": "assert     rotate_right([1,2,3,4,5], 2) == [5,4,3,2,1], \"Wrong output\"",
        "num_ids": 778
    },
    {
        "number": 744,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] is None:\n            print('None value in tuple: ', i)\n            return True\n    return False\n",
        "test": "assert     check_none((None, ))",
        "num_ids": 466
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # define a function that will return True if the number passed in is within the range of the given range, False otherwise\n    def divisible_by_range(num, low, high):\n        return True if num % low == 0 and num % high == 0 else False\n    \n    # loop through the given range from low to high (inclusive)\n    for num in range(startnum, endnum):\n        # check if each digit from the range is divisible by every digit\n        if divisible_by_range(num, 10, 9):\n            # if so, check if the number is divisible by every digit it contains\n            if divisible_by_range(num, 10, 1):\n                # return the number only if it is divisible by every digit it contains\n                return num\n    \n    # the number doesn't appear to be divisible by every digit\n    return \"This isn't divisible by every digit it contains\"\n",
        "test": "assert ",
        "num_ids": 575
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a >= 180) and (a <= 360):\n        if ((a >= 360/3) and (r > 3)) or ((a >= 360/2) and (r > 2)) or ((a >= 360/1.5) and (r > 1.5)):\n            return 0\n        else:\n            return None\n    elif (a <= 180) and (a > 90):\n        if ((a <= 90/3) and (r > 3)) or ((a <= 90/2) and (r > 2)) or ((a <= 90/1.5) and (r > 1.5)):\n            return 0\n        else:\n            return None\n    else:\n        return None\n",
        "test": "assert     sector_area(1,360) == None",
        "num_ids": 501
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    if m > n:\n        X, Y, Z = Y, X, Z\n    if m == 1:\n        return Z\n    if n == 1:\n        return Z\n",
        "test": "assert ",
        "num_ids": 2630
    },
    {
        "number": 748,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = str1.replace(\" \",\"-\")\n    str3 = str2.replace(\"-\",\" \")\n    return str3\n",
        "test": "assert     capital_words_spaces(\"123456789\") == \"123456789\"",
        "num_ids": 4576
    },
    {
        "number": 749,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # All sorts are based on ASCII values, so we'll just need to sort the values\n    nums_str.sort(key = str)\n    return nums_str\n",
        "test": "assert     sort_numeric_strings([]) == [], \"Empty list is not allowed\"",
        "num_ids": 567
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n",
        "test": "assert     add_tuple([1, 2, 3], \"test\") == \"Incorrect add_tuple\", \"Incorrect add_tuple\"",
        "num_ids": 461
    },
    {
        "number": 751,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) - 1:\n        return True\n    if arr[i] < arr[i // 2] and arr[i] < arr[(i * 2) + 1] and check_min_heap_helper(arr, (i * 2) + 1) and check_min_heap_helper(arr, (i * 2)):\n        return True\n    if arr[i] < arr[i // 2] and arr[i] < arr[(i * 2) + 2] and check_min_heap_helper(arr, (i * 2) + 2) and check_min_heap_helper(arr, (i * 2) + 2):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_min_heap_helper([], 0) == True",
        "num_ids": 2554
    },
    {
        "number": 752,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    fac = []\n    fac.append(2)\n    if n == 1:\n        return 1\n    for i in range(2, n + 1):\n        fac.append(i * fac[i - 1])\n    return fac[n]\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 2210
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    import math\n    from collections import defaultdict\n    return sorted(map(lambda x: x[:K], test_list), key = lambda x: x[K], reverse = True)[:K]\n",
        "test": "assert ",
        "num_ids": 716
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l3_index = [i for i, item in enumerate(l3) if item == l2[0]]\n    l1_index = [i for i, item in enumerate(l1) if item == l1[0]]\n    l2_index = [i for i, item in enumerate(l2) if item == l2[0]]\n    l3_index.sort()\n    l1_index.sort()\n    l2_index.sort()\n    return [l1_index[i] for i in l3_index], [l2_index[i] for i in l3_index], [l3_index[i] for i in l1_index]\n",
        "test": "assert     extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]),'should return [1, 2] and [3, 4]'",
        "num_ids": 1343
    },
    {
        "number": 755,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # --- your code here ---\n    lst = numbers[:]\n    lst.sort()\n    return lst[1]\n",
        "test": "assert second_smallest([2,2,3,3]) == 2, \"Test 2 failed.\"",
        "num_ids": 2592
    },
    {
        "number": 756,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace('\\n','')\n    regex = r'a\\w+\\s'\n    match_one = re.findall(regex,text)\n    return match_one\n",
        "test": "assert text_match_zero_one(\"\") == []",
        "num_ids": 2898
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    i = 0\n    while i < len(test_list):\n        j = len(test_list) - 1\n        while j >= i:\n            if test_list[j]!= test_list[i]:\n                break\n            j -= 1\n        if j!= i:\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert     count_reverse_pairs([]) == 0",
        "num_ids": 961
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i == j:\n                dict[list1[i]] = dict.get(list1[i], 0) + 1\n    return dict\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 905
    },
    {
        "number": 759,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == '':\n        return True\n    if num[0] == '-' and num[1:].isdigit():\n        return False\n    if len(num) == 0 or (num[0] not in ('+', '-')) or (num[-1] not in ('0', '.', ',')):\n        return False\n    return True\n",
        "test": "assert     is_decimal('-123456789') == False",
        "num_ids": 860
    },
    {
        "number": 760,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #Your code here\n    if len(arr) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     unique_Element(arr = [1,2,2,3,4,4,5,5]) == False",
        "num_ids": 2377
    },
    {
        "number": 762,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_monthnumber_number(2) == True",
        "num_ids": 711
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    left = 0\n    right = n - 1\n    arr_min = arr[left] + arr[right]\n    while left < right:\n        if arr_min > arr[left] + arr[right]:\n            arr_min = arr[left] + arr[right]\n        if arr_min < arr[left]:\n            left += 1\n        if arr_min > arr[right]:\n            right -= 1\n    return arr_min\n",
        "test": "assert     find_min_diff([0],0) == 0",
        "num_ids": 886
    },
    {
        "number": 764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n",
        "test": "assert     number_ctr('5') == 2",
        "num_ids": 393
    },
    {
        "number": 765,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    if n == 1: \n        return True\n    if n % 2 == 0: \n        return False\n    return (is_polite(n//2) and (n % 2 == 1)) or is_polite(n//2 + 1) \n    \n",
        "test": "assert     is_polite(1) == True",
        "num_ids": 493
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    def get_pairs(s):\n        '''\n        A helper function to find all pairs of consecutive items in a given list.\n        '''\n        l1.sort()\n        n = len(l1)\n        return [(l1[i], l1[i+1]) for i in range(n-1)]\n    l2 = get_pairs(l1)\n    return l2\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 807
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    counter = 0\n    for i in arr:\n        if (sum - i) in arr:\n            counter = counter + 1\n    return counter\n",
        "test": "assert get_pairs_count([2, 4, 5, 1], 7) == 2",
        "num_ids": 781
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in range(len(li1)):\n        diff.append(li1[i]-li2[i])\n    return diff\n",
        "test": "assert     Diff([], []) == []",
        "num_ids": 647
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) : \n        sum += pow(2, i)\n    return sum\n",
        "test": "assert     odd_num_sum(1) == 1",
        "num_ids": 2427
    },
    {
        "number": 771,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    operands = exp.split('(')\n    left_operand = operands.pop(0)\n    right_operand = operands.pop(0)\n    while len(operands) > 0:\n        operator = operands.pop(0)\n        right_operand = operator + right_operand + ')'\n        left_operand = operator + left_operand + ')'\n        if operator!= '(':\n            return False\n    return True\n",
        "test": "assert     check_expression('(()())') == 0",
        "num_ids": 588
    },
    {
        "number": 772,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_list = list(test_str.lower())\n    for i in range(len(word_list)):\n        for j in range(i + 1, len(word_list)):\n            if len(word_list[i]) + len(word_list[j]) == K:\n                word_list[i] = ''\n                word_list[j] = ''\n    return \"\".join(word_list)\n",
        "test": "assert     remove_length('kitten', 6) == 'kitten'",
        "num_ids": 2477
    },
    {
        "number": 773,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    # Create regular expression\n    regex = re.compile(pattern)\n    \n    # Scan the text string for the pattern\n    m = regex.search(text)\n    \n    # If there is a match\n    if m:\n        \n        # Scan the whole text for the pattern\n        begin = text[0:m.start()]\n        end = text[m.end():len(text)]\n        \n        # Return the list of match\n        return begin, end\n    \n    # If there is no match\n    else:\n        return None\n",
        "test": "assert     occurance_substring('abcd', 'abcde') == None",
        "num_ids": 2496
    },
    {
        "number": 775,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            return False\n    return True\n",
        "test": "assert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False",
        "num_ids": 2370
    },
    {
        "number": 776,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.lower() in \"aeiou\":\n            count += 1\n    return count\n",
        "test": "assert     count_vowels(\"abbcc\") == 1, \"count_vowels' function works\"",
        "num_ids": 697
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    sum = 0\n    for x in arr:\n        if x not in arr:\n            sum += x\n    \n    return sum\n",
        "test": "assert     find_sum([6, 2, -3, 5, 8, 1, 2, 1]) == 0, \"find_sum() failed\"",
        "num_ids": 418
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    #initialize the list for pack\n    pack = []\n    \n    #check for duplicate\n    if len(list1) % 2 == 0:\n        #check the first and last elements in the list to determine the correct index\n        first = list1[0]\n        last = list1[-1]\n        #if the first element is the same as the last element, then no need to do anything\n        if first == last:\n            return list1\n        else:\n            #if the first element has a duplicate, then have a list of previous and the next elements in the list\n            #starting from the previous element\n            if first in list1:\n                index = list1.index(first)\n                list1 = list1[index+1:]\n                list1 = list1 + [list1[0]]\n            #if the last element has a duplicate, then have a list of the previous and the next elements in the list\n            #starting from the next element\n            elif last in list1:\n                index = list1.index(last)\n                list1 = list1[index+1:]\n                list1 = list1 + [list1[-1]]\n                \n    else:\n        #if the last element has a duplicate, then have a list of previous and the next elements in the list\n        #starting from the previous element\n        if last in list1:\n            index = list1.index(last)\n            list1 = list1[:index]\n            list1 = list1 + [list1[-1]]\n            \n        #if the first element has a duplicate, then have a list of the previous and the next elements in the list\n        #starting from the next element\n        elif first in list1:\n            index = list1.index(first)\n            list1 = list1[index+1:]\n            list1 = list1 + [list1[0]]\n            \n    #if no duplicate element found, the list is already a perfect one\n    if len(list1) % 2 == 0:\n        list1.sort()\n        pack = list1\n        \n    #else, the list is a partitioning of the elements\n    else:\n        list1.sort()\n        for k in range(len(list1)):\n            if k % 2 == 0:\n                #add this element to the pack\n                pack.append(list1[k])\n            else:\n                #if this element has a duplicate, then add it to the pack\n                if list1[k] in list1:\n                    pack.append(list1[k])\n                #if this element does not have a duplicate, then add it to the pack\n                else:\n                    pack.append(list1[k-1])\n        pack.append(list1[-1])\n    return pack\n    \ndef group_consecutive_duplicates(list1):\n    '''\n    Write a function to group consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    #initialize the list for group\n    group = []\n    \n    #check for duplicate\n    if len(list1) % 2 == 0:\n        #check the first and last elements in the list to determine the correct index\n        first = list1[0]\n        last = list1[-1]\n        #if the first element is the same as the last element, then no need to do anything\n        if first == last:\n            return list1\n        else:\n            #if the first element has a duplicate, then have a list of previous and the next elements in the list\n            #starting from the previous element\n            if first in list1:\n                index = list1.index(first)\n                list1 = list1[index+1:]\n                list1 = list1 + [list1[0]]\n            #if the last element has a duplicate, then have a list of the previous and the next elements in the list\n            #starting from the next element\n            elif last in list1:\n                index = list1.index(last)\n                list1 = list1[:index]\n                list1 = list1 + [list1[-1]]\n                \n    else:\n        #if the last element has a duplicate, then have a list of the previous and the next elements in the list\n        #starting from the next element\n        if last in list1:\n            index = list1.index(last)\n            list1 = list1[:index]\n            list1 = list1 + [list1[-1]]\n            \n        #if the first element has a duplicate, then have a list of the previous and the next elements in the list\n        #starting from the previous element\n        if first in list1:\n            index = list1.index(first)\n            list1 = list1[index+1:]\n            list1 = list1 + [list1[0]]\n            \n    #if no duplicate element found, the list is already a perfect one\n    if len(list1) % 2 == 0:\n        list1.sort()\n        group = list1\n        \n    #else, the list is a partitioning of the elements\n    else:\n        list1.sort()\n        for k in range(len(list1)):\n            if k % 2 == 0:\n                #add this element to the group\n                group.append(list1[k])\n            else:\n                #if this element has a duplicate, then add it to the group\n                if list1[k] in list1:\n                    group.append(list1[k])\n                #if this element does not have a duplicate, then add it to the group\n                else:\n                    group.append(list1[k-1])\n        group.append(list1[-1])\n    return group\n    \ndef find_consecutive_duplicates(list1):\n    '''\n    Write a function to find consecutive duplicates of a given list elements.\n    '''\n    \n    #initialize the list for find\n    duplicates = []\n    \n    #check for duplicate\n    if len(list1) % 2 == 0:\n        #check the first and last elements in the list to determine the correct index\n        first = list1[0]\n        last = list1[-1]\n        #if the first element is the same as the last element, then no need to do anything\n        if first == last:\n            return list1\n        else:\n            #if the first element has a duplicate, then have a list of previous and the next elements in the list\n            #starting from the previous element\n            if first in list1:\n                index = list1.index(first)\n                list1 = list1[index+1:]\n                list1 = list1 + [list1[0]]\n            #if the last element has a duplicate, then have a list of the previous and the next elements in the list\n            #starting from the next element\n            elif last in list1:\n                index = list1.index(last)\n                list1 = list1[:index]\n                list1 = list1 + [list1[-1]]\n                \n    else:\n        #if the last element has a duplicate, then have a list of the previous and the next elements in the list\n        #starting from the next element\n        if last in list1:\n            index = list1.index(last)\n            list1 = list1[index+1:]\n            list1 = list1 + [list1[0]]\n            \n    #if no duplicate element found, the list is already a perfect one\n    if len(list1) % 2 == 0:\n        list1.sort()\n        for k in range(len(list1)):\n            if k % 2 == 0:\n                #add this element to duplicates\n                duplicates.append(list1[k])\n            else:\n                #if this element has a duplicate, then add it to duplicates\n                if list1[k] in list1:\n                    duplicates.append(list1[k])\n                #if this element does not have a duplicate, then add it to duplicates\n                else:\n                    duplicates.append(list1[k-1])\n        duplicates.append(list1[-1])\n    #else, the list is a partitioning of the elements\n    else:\n        list1.sort()\n        for k in range(len(list1)):\n            if k % 2 == 0:\n                #add this element to duplicates\n                duplicates.append(list1[k])\n            else:\n                #if this element has a duplicate, then add it to duplicates\n                if list1[k] in list1:\n                    duplicates.append",
        "test": "assert ",
        "num_ids": 5161
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #Remove duplicates\n    list1 = list(set(list1))\n    #Loop through lists\n    for i in range(0,len(list1)):\n        list1[i] = tuple(list1[i])\n    #Loop through the lists\n    for k in range(0,len(list1)):\n        list1[k] = list(list1[k])\n    #Return the dictionary\n    return dict(list1)\n",
        "test": "assert     unique_sublists([]) == {}, 'The test returns an error'",
        "num_ids": 784
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuple_list = []\n    print(test_list)\n    for i in test_list:\n        print(i)\n        if i.count(i[0]) == len(i):\n            for j in combinations(i,len(i)):\n                tuple_list.append(j)\n    print(tuple_list)\n    return tuple_list\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 3141
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    if n % 2 == 0 :\n        print(\"Given number is an even number\")\n        return True\n    else :\n        print(\"Given number is an odd number\")\n        return False\n    \ndef square(n) :\n    '''\n    Write a python function to square a number n.\n    '''\n    return n*n\n    \ndef factorial(n) :\n    '''\n    Write a python function to compute the factorial of a number n.\n    '''\n    \n    if n == 0 :\n        return 1\n    if n == 1 :\n        return 1\n    else :\n        return n*factorial(n-1)\n    \ndef is_prime(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n < 2 or n % 2 == 0 :\n        return False\n    if n == 2 :\n        return True\n    if n > 2 :\n        for i in range(3,int(math.sqrt(n))+1,2) :\n            if n % i == 0 :\n                return False\n        return True\n        \ndef check_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    \n    if n == 1 :\n        return False\n    \n    if n == 2 :\n        return True\n    \n    if n > 2 :\n        for i in range(3,int(math.sqrt(n))+1,2) :\n            if n % i == 0 :\n                return False\n        return True\n        \ndef is_prime_recursive(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n < 2 or n % 2 == 0 :\n        return False\n    if n == 2 :\n        return True\n    if n > 2 :\n        for i in range(3,int(math.sqrt(n))+1,2) :\n            if n % i == 0 :\n                return False\n        return True\n    \n    \ndef is_prime_recursive_recursive(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n < 2 or n % 2 == 0 :\n        return False\n    if n == 2 :\n        return True\n    if n > 2 :\n        for i in range(3,int(math.sqrt(n))+1,2) :\n            if n % i == 0 :\n                return False\n        return True\n    \ndef count_primes_recursive(n) :\n    '''\n    Write a python function to count the number of primes up to and including\n    n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    if n < 2 :\n        return 0\n    if n == 2 :\n        return 1\n    if n > 2 :\n        for i in range(3,int(math.sqrt(n))+1,2) :\n            if n % i == 0 :\n                return count_primes_recursive(n//i) + 1\n        return count_primes_recursive(n)\n",
        "test": "assert     count_divisors(1) == 0",
        "num_ids": 563
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n%2 == 1:\n        return arr[n//2] + arr[n//2 - 1]\n    else:\n        return sum(arr[:n//2]) + sum(arr[n//2+1:])\n",
        "test": "assert     odd_length_sum([]) == 0, '1'",
        "num_ids": 585
    },
    {
        "number": 783,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # r = float(r)\n    # g = float(g)\n    # b = float(b)\n    #  h = float((r+g+b)/3)\n    #  s = float(1 - abs((h-255)/(255-0)))\n    #  v = float(s)\n    #  return hsv(h,s,v)\n    #   h = 0.8*r + 0.2*g + 0.1*b\n    #   s = max(s,0)\n    #   v = max(v,0)\n    #   h = min(h,1)\n    #   s = min(s,1)\n    #   v = min(v,1)\n    #   r = max(r,0)\n    #   g = max(g,0)\n    #   b = max(b,0)\n    #   h = max(h,0)\n    #   s = max(s,0)\n    #   v = max(v,0)\n    #   return hsv(h,s,v)\n    return (r,g,b)\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0,0,0)",
        "num_ids": 1608
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i%2 == 0:\n            product = product*i\n        else:\n            product = product*i\n    return product",
        "test": "assert     mul_even_odd([1, 1, 1, 1, 1, 1]) == 1, \"mul_even_odd should return 1\"",
        "num_ids": 613
    },
    {
        "number": 785,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not test_str:\n        return []\n    else:\n        return tuple(map(int, test_str))\n",
        "test": "assert     tuple_str_int(('1', '2', '3')) == (1, 2, 3)",
        "num_ids": 583
    },
    {
        "number": 786,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # TODO: Calculate the insertion point for x\n    # TODO: Use bisect to locate the right insertion point\n    # TODO: Return the insertion point\n    x = bisect.bisect_right(a, x)\n    return x - 1\n",
        "test": "assert     right_insertion(a=[2, 1, 3, 4], x=3) == 2",
        "num_ids": 1005
    },
    {
        "number": 787,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r'\\A\\w{3}\\w+', text) # search only for alphanumeric characters\n    return result.group(0) # return the match object\n",
        "test": "assert         text_match_three(\"Hello\") == \"Hello\"",
        "num_ids": 544
    },
    {
        "number": 788,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n",
        "test": "assert         new_tuple(['a', 'b'], 'ab') == ('a', 'b')",
        "num_ids": 645
    },
    {
        "number": 790,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_list = list(filter(lambda x: x % 2 == 0, nums))\n    return even_list\n",
        "test": "assert     even_position([]) == []",
        "num_ids": 331
    },
    {
        "number": 791,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(tuple(x for x in test_tup if x is not None))\n    else:\n        raise TypeError(\"remove_nested() takes a tuple as an argument.\")\n",
        "test": "assert     remove_nested(('1', 2, 3, 4)) == ('1', 2, 3, 4), 'The function remove_nested should return the correct value for tuple.'",
        "num_ids": 862
    },
    {
        "number": 792,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_len = len(input_list)\n    count = 0\n    for i in input_list:\n        count += 1\n    return count\n",
        "test": "assert     count_list([]) == 0",
        "num_ids": 619
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        return 0\n    if x==arr[n-1]:\n        return n-1\n    if x>arr[n-1]:\n        return 0\n    if arr[0]<x<arr[n-1]:\n        return n-1\n    if arr[0]>x>arr[n-1]:\n        return 0\n    mid = int(n/2)\n    if arr[mid]<x:\n        return n-1\n    if arr[mid]>x:\n        return mid\n    if arr[0]<x<arr[mid]:\n        return 0\n    if arr[mid]>x>arr[0]:\n        return mid\n    if arr[mid]<x<arr[n-1]:\n        return mid\n    if arr[mid]>x>arr[n-1]:\n        return mid\n    if arr[0]>x:\n        return 0\n    if arr[mid]>x:\n        return mid\n    if arr[n-1]<x<arr[0]:\n        return 0\n    if arr[n-1]>x<arr[mid]:\n        return mid\n    if arr[n-1]<x>arr[0]:\n        return 0\n    if arr[n-1]<x<arr[mid]:\n        return mid\n    if arr[0]>x:\n        return mid\n    if arr[mid]>x:\n        return mid\n    if arr[mid]<x:\n        return 0\n    return mid\n",
        "test": "assert     last([1,2,3,4,5],2) == 4",
        "num_ids": 690
    },
    {
        "number": 794,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search('a[^b]*b[^b]*b', text)\n    if result:\n        return result.group(0)\n    return text\n",
        "test": "assert     text_starta_endb('Wandles on Noodle, the new sadness of plants') == 'Wandles on Noodle, the new sadness of plants'",
        "num_ids": 4568
    },
    {
        "number": 796,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total=0\n    for item in dict:\n        total+=dict[item]\n    return total\n",
        "test": "assert     return_sum({\"one\": 1, \"two\": 2, \"three\": 3}) == 6",
        "num_ids": 567
    },
    {
        "number": 797,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + sum_odd(n-1)\n",
        "test": "assert     sum_odd(1) == 1",
        "num_ids": 453
    },
    {
        "number": 798,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total = total + i\n    return total\n",
        "test": "assert     _sum([]) == 0, '_sum'",
        "num_ids": 2952
    },
    {
        "number": 799,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=n>>d\n    if (n&1):\n        n=n+1\n    return n\n",
        "test": "assert     left_rotate(0,7) == 0",
        "num_ids": 597
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # YOUR CODE HERE\n    #print(text)\n    text = text.replace(\" \",\"\")\n    text = text.replace(\"\\n\",\"\")\n    text = text.replace(\"\\t\",\"\")\n    text = text.replace(\"\\r\",\"\")\n    text = text.replace(\"\\v\",\"\")\n    return text\ndef remove_string(text, sub_string):\n    '''\n    Write a function to remove a substring from a string.\n    '''\n    # YOUR CODE HERE\n    #print(text)\n    text = text.replace(sub_string,'')\n    return text\n",
        "test": "assert     (remove_all_spaces(\"\") == \"\")",
        "num_ids": 2268
    },
    {
        "number": 801,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a = x * y\n    b = x * z\n    c = y * z\n    print(a, b, c)\n    if a == b == c:\n        return True\n    else:\n        return False\n",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 895
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    res = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            res += 1\n    return res\n    \n",
        "test": "assert     count_rotation(arr) == (1,0,0,0,0,0,0)",
        "num_ids": 416
    },
    {
        "number": 803,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = int(str(n))\n    if s == s and (n % 2 == 0 or n % 3 == 0):\n        return True\n    else:\n        return False\n",
        "test": "assert         is_perfect_square(0) == True, \"is_perfect_square function is correct\"",
        "num_ids": 2461
    },
    {
        "number": 804,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)): \n        if arr[i] % 2 == 0:\n            return True\n    return False\n",
        "test": "assert     is_product_even([2,3,4]) == True, \"check_product_even() FAILED\"",
        "num_ids": 469
    },
    {
        "number": 805,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for item in lists:\n        for val in item:\n            if val > 0:\n                max_sum.append(val)\n    return max_sum\n",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 612
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_upper = 0\n    if test_str == \"\":\n        return 0\n    else:\n        for i in range(len(test_str)):\n            if test_str[i].isupper():\n                if max_upper < len(test_str[i]):\n                    max_upper = len(test_str[i])\n        return max_upper\n",
        "test": "assert     max_run_uppercase('') == 0",
        "num_ids": 849
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return None\n",
        "test": "assert     first_odd([]) == None, \"Error - First element of the list should be empty.\"",
        "num_ids": 594
    },
    {
        "number": 808,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    print(\"Testing {}\".format(test_tup))\n    print(\"---\")\n    if len(test_tup) == K:\n        print(\"This is a good test\")\n    else:\n        print(\"Not a good test\")\n        return False\n    \n    print(\"---\")\n    print(\"Testing {}\".format(test_tup))\n    print(\"---\")\n    if test_tup[0] == K:\n        print(\"This is a good test\")\n    else:\n        print(\"Not a good test\")\n        return False\n    \n    return True\n",
        "test": "assert check_K([1,2,3,4,5,6], 4) == False",
        "num_ids": 681
    },
    {
        "number": 809,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n",
        "test": "assert     check_smaller([(1, 2), (1, 4), (1, 5)], [(1, 2), (1, 4), (1, 5)]) == True",
        "num_ids": 768
    }
]