[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    a = list(test_tup1)\n    b = list(test_tup2)\n    result = []\n    for i in a:\n        for j in b:\n            if i == j:\n                result.append(i)\n    return result\n",
        "test": "assert     similar_elements([1,2,3], [1,2]) == [1,2]",
        "num_ids": 738
    },
    {
        "number": 3,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not any(i%2==0 for i in range(2,int(math.sqrt(n))+1))\n",
        "test": "assert     is_not_prime(1)",
        "num_ids": 381
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    heap = []\n    for i in range(n-1,-1,-1):\n        heapq.heappush(heap,[sorted_list[i]])\n    return heap\ndef heap_queue_largest_2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return []\n    h = []\n    for i in range(n):\n        heapq.heappush(h,nums[i])\n    for i in range(n):\n        heapq.heappush(h,-hq.heappop(h))\n    return h\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    heap = []\n    for i in range(n-1,-1,-1):\n        heapq.heappush(heap,[sorted_list[i]])\n    return heap\ndef heap_queue_smallest_2(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if not nums:\n        return []\n    h = []\n    for i in range(n):\n        heapq.heappush(h,[nums[i]])\n    for i in range(n):\n        heapq.heappush(h,-heapq.heappop(h))\n    return h\ndef heap_sort_desc(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_asc(nums):\n    '''\n    Write a function to sort a given array of numbers, using the largest to smallest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=False)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort(nums):\n    '''\n    Write a function to sort a given array of numbers, using the largest to smallest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_2(nums):\n    '''\n    Write a function to sort a given array of numbers, using the largest to smallest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_3(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_4(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_5(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_6(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_7(nums):\n    '''\n    Write a function to sort a given array of numbers, using the largest to smallest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_8(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_9(nums):\n    '''\n    Write a function to sort a given array of numbers, using the largest to smallest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_10(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_11(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_12(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_13(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_14(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_15(nums):\n    '''\n    Write a function to sort a given array o",
        "test": "assert     heap_queue_largest([-2,-3,-1,2,4,8,9,9],1) == [-2,-1,2,3,4,5,8,9]",
        "num_ids": 548
    },
    {
        "number": 6,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 2**32:\n        return False\n    else:\n        if x % 2 == 0:\n            return False\n        else:\n            return True",
        "test": "assert     is_Power_Of_Two (5) == False, \"Using a power of two can't be true\"",
        "num_ids": 315
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = []\n    for word in text:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert     find_char_long('''",
        "num_ids": 2342
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for number in nums:\n        squares.append(number**2)\n    return squares\n",
        "test": "assert square_nums([]) == []",
        "num_ids": 412
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)-1):\n        if str[i+1] == str[i]:\n            rotations += 1\n        else:\n            break\n    return rotations\n",
        "test": "assert     find_Rotations(\"aabb\") == 1, \"Input must be valid\"",
        "num_ids": 496
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    if(ch in s[0]):\n        s.remove(s[0])\n        s.remove(ch)\n    else:\n        pass\n    return \"\".join(s)\n",
        "test": "assert     remove_Occ('a','c') == 'a'",
        "num_ids": 548
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    if n == 0:\n        return \n    sum_rows = sum(M[i][j] for i in range(n) for j in range(i+1, n))\n    M = sorted(M, key = lambda row: sum(row))\n    return M\n    \ndef main():\n    # Check that the input is valid.\n    if not (is_valid_input(a, b) or is_valid_input(a, c)):\n        return False\n    if not (is_valid_input(b, c) or is_valid_input(a, b)):\n        return False\n",
        "test": "assert     sort_matrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == [[1, 2, 3], [2, 3, 1], [3, 1, 2]]",
        "num_ids": 923
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = 0\n    for i in range (l,b):\n        for j in range (h,i-1, -1):\n            v += h/3*(1 - math.pow(math.sin(math.radians(j)),2))\n    return v\n",
        "test": "assert     find_Volume(0,0,0) == 0",
        "num_ids": 450
    },
    {
        "number": 16,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r\"[a-z0-9]\", text)) and bool(re.search(r\"[_+]\", text)) and bool(re.search(r\"[0-9]\", text))\n",
        "test": "assert     text_lowercase_underscore(\"Abcdefghijklmnopqrstuvwxyz\") == False, \"failure: 'abcdefghijklmnopqrstuvwxyz' should not be true\"",
        "num_ids": 607
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "test": "assert     square_perimeter(6) == 24, \"square_perimeter(6) should be 24\"",
        "num_ids": 288
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    l = list()\n    l_l = list()\n    for i in range(len(string)):\n        if string[i] in l_l:\n            l.append(string[i])\n            l_l.remove(string[i])\n            if not l_l:\n                l.append('0')\n        else:\n            l.append(string[i])\n    return l\n",
        "test": "assert     str_to_list('this is a string') == ['t', 'h', 'i','s', 't', 'a', 'r', 'i', 'e','', 'h', 'e','','', 'r','','', 'h', 'i','','','', 'r','','', 'a','', 'r','','','s','', 'h', 'a','','','', 'i','', 'e','','', 'a','','','','', 't','','', 'e','','','', 'i','','','','', 'a','','','', 'r','','','','','','', 'a','','','', 'a','','', 'a','', 'a','','','','']",
        "num_ids": 603
    },
    {
        "number": 19,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # pass the list into a dictionary\n    dictionary = {}\n    for i in arraynums:\n        if i in dictionary:\n            return True\n        else:\n            dictionary[i] = 1\n    return False\n",
        "test": "assert     test_duplicate([1, 1, 2, 3, 3]) == True",
        "num_ids": 409
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x = int(x)\n    return x%5 == 0\n",
        "test": "assert     is_woodall(3)==False, \"not woodball\"",
        "num_ids": 316
    },
    {
        "number": 56,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_list = list(str(num))\n    rev_list = []\n    for i in range(len(num_list)):\n        if num_list[i] > num_list[i + 1]:\n            rev_list.append(num_list[i])\n    return rev_list\n",
        "test": "assert rev(1) == 1",
        "num_ids": 387
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m = int(''.join(map(str,arr)))\n    for i in range(2,m+1):\n        if m%i == 0 : return m\n    return 0\n",
        "test": "assert     find_Max_Num([4, 3]), \"4 and 3 only\"",
        "num_ids": 516
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y:\n        return True\n    elif y>x:\n        return False\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(1,3) == False",
        "num_ids": 411
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 0\n    while (n-i >=1):\n        if (n % 2 == 0):\n            return n // i\n        i += 1\n    return 0\n",
        "test": "assert     is_octagonal(0) == 0",
        "num_ids": 2698
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substring_list=[]\n    if len(s)==0:\n        return 0\n    if len(s)==1:\n        return 1\n    if s[0]==s[1]:\n        substring_list.append(s[0])\n        substring_list.append(1)\n        return len(substring_list)\n",
        "test": "assert     count_Substrings(\"\") == 0",
        "num_ids": 465
    },
    {
        "number": 62,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return xs[0] if len(xs) > 1 else float('inf')\n",
        "test": "assert     smallest_num([1, 2, 3]) == 1",
        "num_ids": 372
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    l = len(test_list)\n    if l < 1:\n        return None\n    elif l == 1:\n        return test_list[0] - test_list[1]\n    else:\n        min_diff = test_list[0] - test_list[1]\n        min_index = 0\n        for i in range(1, l):\n            if test_list[i] - test_list[i-1] > min_diff:\n                min_diff = test_list[i] - test_list[i-1]\n                min_index = i\n        return min_diff\n",
        "test": "assert     max_difference([4, 2, 1]) == 2, \"incorrect return type\"",
        "num_ids": 1047
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sort_by_second_value(tup):\n        return tup[1]\n    return sorted(subjectmarks, key=sort_by_second_value)\n    \ndef calculate_average_marks(marks):\n    '''\n    Write a function to calculate the average marks of a list of tuples using the sum of the marks.\n    '''\n    return sum(marks)\n",
        "test": "assert     subject_marks([('A', 9.0), ('B', 1.0), ('C', 5.0)]) == [('B', 1.0), ('C', 5.0), ('A', 9.0)]",
        "num_ids": 383
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data_list = [1,2,3,4,5]\n    temp_data_list = []\n    for i in data_list:\n        if i == 1:\n            temp_data_list.append(1)\n        elif i == 2:\n            temp_data_list.append(2)\n        else:\n            temp_data_list.append(i)\n    return sum(temp_data_list)\n",
        "test": "assert ",
        "num_ids": 2527
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum=0\n    for i in list:\n        if i>0:\n            sum+=1\n    return sum\n",
        "test": "assert     pos_count([0, 0, 0, 0]) == 0",
        "num_ids": 378
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=2: return 1\n    if n == 2: return 1\n    if n==3: return 2\n    if n==4: return 4\n    if n == 5: return 8\n    if n == 6: return 16\n    if n == 7: return 32\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 514
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # length of array\n    n = len(A)\n    # find the minimum and maximum element\n    m = A[0]\n    m_max = 0\n    for i in range(n):\n        if A[i] > m:\n            m = A[i]\n            m_max = m\n        elif A[i] < m:\n            m = A[i]\n            m_max = m\n    # if m_max is greater than m_max of all the elements,\n    # then there is a monotonic array\n    return m >= m_max\n",
        "test": "assert     is_Monotonic([1,2,3,4,5]) == True",
        "num_ids": 620
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    list1 = []\n    count = 0\n    for i in l:\n        list1.append(i)\n    for i in s:\n        if i not in list1:\n            count += 1\n    return count == len(l)\n",
        "test": "assert         is_sublist([1,2,3,4], [4]) == False",
        "num_ids": 524
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    input_list = []\n    \n    # for loop to iterate through the tuples and append the values\n    for i in range(0,len(Input)):\n        input_list.append(Input[i])\n    \n    # check for duplicate tuples\n    # if duplicate tuples are present, return False\n    # if there are no duplicate tuples, return true\n    if len(set(input_list))!= len(input_list):\n        return False\n    else:\n        return True\n",
        "test": "assert     find_equal_tuple([(1, 2), (1, 2), (1, 2)]) == False",
        "num_ids": 575
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "test": "assert         comb_sort([]) == []",
        "num_ids": 2924
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        return dif_Square(n-1) and dif_Square(n-2)\n",
        "test": "assert     dif_Square(5) == False, \"Square dif with square \"",
        "num_ids": 550
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) < 1:\n        return True\n    else:\n        return all(patterns[i] == colors[i] for i in range(len(colors)))\n",
        "test": "assert         is_samepatterns([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "num_ids": 627
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tup in test_list:\n        for i in range(1, len(tup), 2):\n            if tup[i] % K!= 0:\n                break\n            else:\n                if i < len(tup):\n                    if tup[i+1] % K!= 0:\n                        tup.append(tup[i+1])\n    return test_list\n",
        "test": "assert     find_tuples([], 10) == []",
        "num_ids": 731
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 0:\n        return False\n    elif n % 10 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Diff(7) == False",
        "num_ids": 2241
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Declaring variables\n    word = s.split()\n    l = len(word)\n    \n    # Condition to check if length is odd\n    if(l % 2!= 0):\n        print(\"Please enter a valid word!\")\n        return 0\n    \n    # Print all words\n    if(l == 1):\n        print(\"Enter valid word!\")\n        return 0\n",
        "test": "assert ",
        "num_ids": 480
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            return i\n    return 0\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 2416
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    c = 3.1416 * pow(r, 2)\n    volume = c * pow(r, 3)\n    return volume\n",
        "test": "assert ",
        "num_ids": 187
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = []\n    for i in strr:\n        if i.isalpha():\n            char_list.append(ord(i) % ord('a'))\n        else:\n            char_list.append(i)\n    return char_list\n",
        "test": "assert     get_Char('X') == 'x'",
        "num_ids": 353
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    else:\n        a = n\n        while n > 1:\n            n -= 1\n            a = a * 3 + 1\n        return a\n",
        "test": "assert     sequence(0) == 0",
        "num_ids": 464
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 3.14*r*r\n",
        "test": "assert     surfacearea_sphere(0.0)==0.0",
        "num_ids": 214
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n ** (1 / 2))\n",
        "test": "assert     centered_hexagonal_number(0) == 0",
        "num_ids": 324
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = dict1.copy()\n    for key in dict2:\n        d[key] = dict2[key]\n    for key in dict3:\n        d[key] = dict3[key]\n    return d\ndef merge_dictionaries(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = dict1.copy()\n    for key in dict2:\n        d[key] = dict2[key]\n    for key in dict3:\n        d[key] = dict3[key]\n    return d\ndef get_dist(x):\n    '''\n    Write a function to return the distance between two nodes.\n    '''\n    return x.get(\"x\")\ndef compare_two_dicts(dict1, dict2,keys_to_check,val_to_check):\n    '''\n    Write a function to compare two dictionaries, keeping only the values\n    that are equal to the desired value.\n    '''\n    return [k for k in dict1.keys() if dict1[k]==dict2[k] and dict2[k]!=None and val_to_check!=dict1[k] ]\ndef compare_two_dicts_dict(dict1, dict2,keys_to_check,val_to_check):\n    '''\n    Write a function to compare two dictionaries, keeping only the values\n    that are equal to the desired value.\n    '''\n    return [k for k in dict1.keys() if dict1[k]==dict2[k] and dict2[k]!=None and dict1[k]==val_to_check ]\ndef compare_two_dicts_copy(dict1, dict2,keys_to_check,val_to_check):\n    '''\n    Write a function to compare two dictionaries, keeping only the values\n    that are equal to the desired value.\n    '''\n    return [k for k in dict1.keys() if dict1[k]==dict2[k] and dict2[k]!=None and dict1[k]==val_to_check ]\ndef compare_two_dicts_copy_dict(dict1, dict2,keys_to_check,val_to_check):\n    '''\n    Write a function to compare two dictionaries, keeping only the values\n    that are equal to the desired value.\n    '''\n    return [k for k in dict1.keys() if dict1[k]==dict2[k] and dict2[k]!=None and dict1[k]==val_to_check ]\ndef calculate_dist_2_dicts(dict1,dict2,val_to_check):\n    '''\n    Write a function to calculate the distance between two dictionaries,\n    keeping only the values that are equal to the desired value.\n    '''\n    dist=get_dist(dict1)\n    if dict1[val_to_check]==dict2[val_to_check]:\n        dist+=get_dist(dict1[val_to_check])\n        del dict1[val_to_check]\n    else:\n        print(\"error\")\n    return dist\ndef check_dicts_equal(dict1,dict2):\n    '''\n    Write a function to check if the two dictionaries are equal.\n    '''\n    for key in dict1:\n        if dict1[key]!= dict2[key]:\n            print(f\"{key} has been modified\")\n    return True\ndef print_nodes_level_sort(dict):\n    '''\n    Write a function that prints all nodes in a dictionary in a hierarchical order.\n    '''\n    for key in dict:\n        print(key,dict[key])\ndef print_nodes_level_sort_dict(dict):\n    '''\n    Write a function that prints all nodes in a dictionary in a hierarchical order.\n    '''\n    for key in dict:\n        print(key,dict[key])\ndef print_all_nodes_level_sort(dict):\n    '''\n    Write a function that prints all nodes in a dictionary in a hierarchical order.\n    '''\n    for key in dict:\n        print(key,dict[key])\n",
        "test": "assert         merge_dictionaries_three({'one':1, 'two':2, 'three':3},{'one':1, 'two':2, 'three':3}, {'one':1, 'two':2, 'three':3}) == {'one':1, 'two':2, 'three':3}",
        "num_ids": 916
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    freq_dict = {}\n    for word in list1:\n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n    return freq_dict\n",
        "test": "assert     freq_count([1,2,3,2,3,1]) == {1:3, 3:2}",
        "num_ids": 560
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return max(map(int, str(N)))\n",
        "test": "assert     closest_num(2) == 2 and closest_num(3) == 3",
        "num_ids": 375
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count = 0\n    for i in list1:\n        count += len(i)\n    return count\n",
        "test": "assert     len_log([]) == 0",
        "num_ids": 360
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #print(sub_str)\n    #print(str1)\n    sub_str = str1.split(\" \")\n    #print(sub_str)\n    for i in sub_str:\n        if i in sub_str:\n            return True\n    return False\n",
        "test": "assert     find_substring('abcd', ['a', 'b']) == True",
        "num_ids": 552
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Your code here\n    if n < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_undulating(9) == False, \"9 is incorrect\"",
        "num_ids": 300
    },
    {
        "number": 93,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert power(3,2) == 9",
        "num_ids": 187
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    a=[]\n    for i in test_list:\n        a.append(i[0])\n    a.sort()\n    print(a[0])\n    return a[0]\n",
        "test": "assert     index_minimum([(1,2),(1,2),(1,2)]) == 1, 'index_minimum failed'",
        "num_ids": 448
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst)\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if min == lst[i]:\n                return i\n    return min\n    \ndef Length_Sort(lst):\n    '''\n    Write a python function that sorts a list of lists.\n    '''\n    lst.sort(key=Length_Sort_Key)\n    return lst\n    \ndef Length_Sort_Key(x):\n    '''\n    Write a python function that sorts a list of lists.\n    '''\n    return len(x)\n    \ndef Sum_Num_List(lst):\n    '''\n    Write a python function to sum a list of numbers and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_Faster(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_Faster_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_2_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_2_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_3_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_3_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4_2_4(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4_2_5(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_2_4(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_2_5(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_3(lst):\n    ''",
        "test": "assert     Find_Min_Length([]) == 0",
        "num_ids": 2553
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    s = 0\n    while n > 1:\n        if n%2 == 0:\n            s += 1\n            n = n // 2\n        else:\n            n = n // 2\n    return s\n",
        "test": "assert     divisor(1) == 0",
        "num_ids": 337
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # Step 1: Create a dictionary to hold the frequency of each element in the list\n    #  (e.g., {\"Jan\": 2, \"Feb\": 2, \"Mar\": 2, \"May\": 2,..., \"Jul\": 2})\n    frequency_dict = {}\n    # Step 2: Loop through each element in the list and add it to the dictionary\n    for element in list1:\n        element = element.strip(\"[\").strip(\"]\").replace(\"'\", \"\")\n        if element not in frequency_dict.keys():\n            frequency_dict[element] = 1\n        else:\n            frequency_dict[element] += 1\n    \n    # Step 3: Return the dictionary\n    return frequency_dict\n",
        "test": "assert 'a' in frequency_lists([1,2,3])",
        "num_ids": 709
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def multiple_num(numbers):\n        result = 1\n        for num in numbers:\n            result = num * result\n        return result\n    return multiple_num(numbers)\n",
        "test": "assert ",
        "num_ids": 336
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = ''\n    while n!= 0: \n        n, res = divmod(n, 2) \n        if res == 0: \n            res = '0'\n    return res \n",
        "test": "assert         decimal_to_binary(3.14) == '0b1010'",
        "num_ids": 571
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n",
        "test": "assert     next_smallest_palindrome(0) == 0",
        "num_ids": 478
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert     kth_element([1, 2, 3, 4], 2) == 2",
        "num_ids": 612
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([c.capitalize() for c in word.split('_')])\n",
        "test": "assert     snake_to_camel('Hello') == 'Hello'",
        "num_ids": 458
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base Case:\n    if m < 1:\n        return 0\n    # Base Case:\n    if n <= m:\n        return 1\n    # If number is even:\n    if n % 2 == 0:\n        # Eulerian number:\n        a = 0\n        b = 1\n        for i in range(n//2):\n            a += 2*b\n            b += 2*b\n            if n - i > 0:\n                a += 1\n        # Recursive case:\n        return (a%m) + eulerian_num(n-1, m)\n    # If number is odd:\n    else:\n        # Eulerian number:\n        a = 0\n        b = 1\n        for i in range(n//2):\n            a += 1*b\n            b += 1*b\n            if n - i > 0:\n                a += 2*b\n        # Recursive case:\n        return (a%m) + eulerian_num(n-1, m)\n",
        "test": "assert     eulerian_num(1,1) == 1",
        "num_ids": 990
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    temp_list = []\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if len(str(input_list[i][j])) > 1:\n                temp_list.append(str(input_list[i][j]))\n            else:\n                temp_list.append(str(input_list[i][j]))\n    return temp_list\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 576
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "test": "assert     count([]) == 0",
        "num_ids": 2351
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tup)\n    test_tup.append(tup)\n    return test_list, test_tup\n",
        "test": "assert ",
        "num_ids": 583
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return num1+num2+num3\n",
        "test": "assert     merge_sorted_list([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "num_ids": 1219
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        temp=s[i]\n        if(temp=='1'):\n            count+=1\n        else:\n            count+=1\n            temp='0'\n    if(count%2==0):\n        return count\n    else:\n        return n-count\n",
        "test": "assert     odd_Equivalent(0, 0) == 0",
        "num_ids": 491
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list=[]\n    for element in nestedlist:\n        if len(element)>1:\n            common=set(element) & set(nestedlist)\n            common_list.append(common)\n        else:\n            common_list.append(element)\n    return common_list\n",
        "test": "assert     common_in_nested_lists([1,3,[1,2],5,[1,2]],",
        "num_ids": 616
    },
    {
        "number": 113,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "test": "assert     check_integer(\"01\")",
        "num_ids": 239
    },
    {
        "number": 115,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # if all the dictionaries are empty\n    if len(list1)==0:\n        return True\n    else:\n        # if any of the dictionaries are not empty\n        for x in range(len(list1)):\n            # if any of the values are not an empty string\n            if list1[x].keys()=={}:\n                # if the values are not empty\n                if list1[x].values()==[]:\n                    # if the keys are not empty\n                    if list1[x].items()==[]:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n            else:\n                # if the values are not empty\n                if list1[x].values()==[]:\n                    # if the keys are not empty\n                    if list1[x].keys()=={}:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n                else:\n                    # if the keys are not empty\n                    if list1[x].items()=={}:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n            # if the dictionary is not empty\n            if list1[x].keys()=={}:\n                # if the values are empty\n                if list1[x].values()==[]:\n                    # if the keys are empty\n                    if list1[x].items()==[]:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n            else:\n                # if the values are empty\n                if list1[x].items()==[]:\n                    # if the keys are empty\n                    if list1[x].keys()=={}:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n        # if all the dictionaries are empty\n        return True\n",
        "test": "assert     empty_dit([]) == True",
        "num_ids": 669
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    import sys\n    output = []\n    for num in nums:\n        output.append(int(num))\n    return int(''.join(map(str, output)))\n",
        "test": "assert     tuple_to_int((1, 2, 3, 4, 5, 6, 7)) == 21",
        "num_ids": 405
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) == list:\n                for k in range(len(test_list[i][j])):\n                    test_list[i][j][k] = float(test_list[i][j][k])\n    return test_list\n",
        "test": "assert     list_to_float([2.0, 1.0, 3.0]) == 3.0",
        "num_ids": 619
    },
    {
        "number": 118,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    strings = string.split()\n    return strings\n",
        "test": "assert     string_to_list(\"This is a test string\") == [\"This\", \"is\", \"a\", \"test\", \"string\"]",
        "num_ids": 403
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    seen = {}\n    for i,x in enumerate(arr):\n        if x in seen:\n            return x\n        if i == len(arr) - 1:\n            return -1\n        seen[x] = i\n    return -1\n",
        "test": "assert     search(arr = [3,1,3,2,2,3,1,3,4,5]) == 3",
        "num_ids": 2588
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1]*list1[j][1]\n            if(product > max_product):\n                max_product = product\n    return max_product\n",
        "test": "assert     max_product_tuple([]) == 0",
        "num_ids": 907
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    if limit < 0:\n        return None\n    amicable_numbers_sum = []\n    amicable_numbers = []\n    i = 1\n    while i <= limit:\n        if i == 1:\n            pass\n        elif i % 2 == 0:\n            amicable_numbers.append(i)\n        else:\n            n1 = i * i\n            n2 = i * i + 1\n            n3 = i * i + 2\n            if n1 == n2 == n3:\n                amicable_numbers.append(i)\n            elif n1 == n2 or n3 == n1:\n                amicable_numbers.append(n1)\n            else:\n                amicable_numbers.append(n1 + n2 + n3)\n        i += 1\n    return sum(amicable_numbers)\n",
        "test": "assert         amicable_numbers_sum(2) == 2",
        "num_ids": 824
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print('Angle of a complex number:', cmath.angle(a,b))\n",
        "test": "assert     angle_complex(1.0,2.0) == 180.0",
        "num_ids": 551
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # For the given string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    diff = 0\n    sub_string = \"\"\n    for char in string:\n        if char == 0:\n            diff += 1\n        else:\n            sub_string += char\n    \n    # Find the maximum difference, and return it.\n    return len(sub_string) - diff\n        \n    \n    \n    \n    # This method can handle both 0 and 1s as a sub-string.\n    # You could do this method in O(1) in the time complexity of this method, but the number of 0s and 1s\n    # is not that large.\n    \n    # O(n) time complexity, where n is the length of the string.\n    # O(1) space complexity.\n    \n    # Use a dictionary to store all the possible 0s and 1s.\n    # Store the maximum difference in a dictionary, and the corresponding character.\n    # That is, dictionary[char] = max(0-d, 1-d)\n    # For example, if the string is \"1101\", then the maximum difference is 1 - 10 = 1, and so\n    # the character \"1\" is the max difference in the string.\n    #\n    # O(n) time complexity, where n is the length of the string.\n    # O(1) space complexity.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # O(n) time complexity, where n is the length of the string.\n    # O(1) space complexity.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # O(n) time complexity, where n is the length of the string.\n    # O(1) space complexity.\n",
        "test": "assert find_length(\"10\") == 2",
        "num_ids": 1525
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def factors(n): \n        count = 0 \n        while n%2 == 0: \n            count += 1\n            n = n/2\n        return count\n    \n    if a>b: \n        a,b = b,a \n    if a==b: return a \n    for i in range(a,b): \n        if factors(i) == 1: \n            return i \n",
        "test": "assert ",
        "num_ids": 1018
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        raise ZeroDivisionError('Cannot divide by zero.')\n    else:\n        return x * y\n",
        "test": "assert     multiply_int(0, 1) == 0",
        "num_ids": 279
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    '''\n    This method will check for each word within the given list\n    '''\n    \n    #Code here\n    str = str.split(' ')\n    for i in range(len(str)):\n        if len(str[i]) > n:\n            str[i] = str[i][0:n]\n    return str\n",
        "test": "assert     long_words(1, ['aaaaaa','bbbbbb','ccccc','eeeee','fffffff']) == ['eeeee', 'fffffff']",
        "num_ids": 576
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    num_rows = len(my_matrix)\n    num_cols = len(my_matrix[0])\n    for r in range(num_rows):\n        for c in range(num_cols):\n            if r == num_rows//2:\n                if c == num_cols//2:\n                    if my_matrix[r][c] == '1':\n                        return False\n            if c == num_cols//2:\n                if r == num_rows//2:\n                    if my_matrix[r][c] == '1':\n                        return False\n    return True\n",
        "test": "assert     magic_square_test([[1,1,1],[1,0,0],[0,0,0]]) == True, \"test_case 1 failed\"",
        "num_ids": 648
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    item_freq = defaultdict(int)\n    for num in nums:\n        item_freq[num] += 1\n    \n    max_freq = -1\n    for num in item_freq:\n        if item_freq[num] > max_freq:\n            max_freq = item_freq[num]\n            max_freq_index = num\n    \n    return max_freq_index\n",
        "test": "assert     max_occurrences([2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2]) == 2",
        "num_ids": 594
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # Hint: You can use the function.reverse() and.translate() methods to reverse a string.\n    # Hint: You can use list() to convert a string into a list.\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    reverse_str = \"\"\n    for c in str1:\n        if c in vowels:\n            c = vowels.index(c)\n            reverse_str = reverse_str + vowels[c]\n        else:\n            reverse_str = reverse_str + c\n    return reverse_str\n",
        "test": "assert     reverse_vowels(\"kayak\") == \"kayak\"",
        "num_ids": 540
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + \",\".join(tup1) + \")\"\n    \n",
        "test": "assert     tup_string(('E', 'R', 'E', 'A', 'I')) == '((E,R,E,A,I)', 'Invalid input'",
        "num_ids": 396
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Your code here\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n",
        "test": "assert     sum_negativenum([-1,0,1,-2]) == -2,'should be -2'",
        "num_ids": 415
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n==1):\n        return 1\n    elif (n==3):\n        return 3\n    elif (n==5):\n        return 5\n    elif (n==7):\n        return 7\n    elif (n==9):\n        return 9\n    else:\n        return n * n\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 537
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(0, len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count / len(nums)\n",
        "test": "assert     zero_count([1,0,0,1,0,0,1,0,0]) == 0.0",
        "num_ids": 2467
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0 or n == 1: \n        return True\n    else: \n        if n & n-1 == 0: \n            return False\n        else: \n            return is_Sum_Of_Powers_Of_Two(n & n-1)\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(8) == False",
        "num_ids": 462
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 211
    },
    {
        "number": 140,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n    for element in test_list:\n        if type(element) == list:\n            num_list += extract_singly(element)\n        elif type(element) == set:\n            num_list += element\n        else:\n            num_list.append(element)\n    return num_list\n",
        "test": "assert     extract_singly(['hello','world','coding','code']), \"Should be ['hello', 'world', 'coding', 'code']\"",
        "num_ids": 609
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    gap = length - 1\n    count = 1\n    while count <= gap:\n        while count <= length and nums[count] > nums[count - 1]:\n            count += 1\n        nums[count - 1], nums[gap] = nums[gap], nums[count - 1]\n        gap -= 1\n        count = 1\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 459
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    if len(list1)==0 or len(list2)==0 or len(list3)==0:\n        return 0\n    \n    same_list = []\n    \n    for i in list1:\n        for j in list2:\n            if i == j:\n                same_list.append(i)\n    \n    return len(same_list)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert count_samepair([1,2,3],[2,3,4], [1,2,3,4]), \"lists must not contain duplicates\"",
        "num_ids": 2625
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    cnt = 0\n    for i in Input:\n        if type(i) is list:\n            cnt += 1\n    return cnt\ndef find_lists_2(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    cnt = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is list:\n            cnt += 1\n    return cnt\ndef find_lists_3(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    cnt = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            cnt += 1\n    return cnt\ndef check_2(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            if len(Input[i]) == 0:\n                return -1\n            else:\n                if type(Input[i][0]) is int:\n                    if Input[i][0] == 0:\n                        return -1\n                    else:\n                        return 1\n                else:\n                    return 0\ndef check_3(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            if len(Input[i]) == 0:\n                return -1\n            else:\n                if type(Input[i][0]) is int:\n                    if Input[i][0] == 0:\n                        return -1\n                    else:\n                        return 1\n                else:\n                    return 0\ndef check_4(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    if type(Input) is tuple:\n        if len(Input) == 1:\n            return -1\n        else:\n            for i in range(len(Input)):\n                if type(Input[i]) is tuple:\n                    if len(Input[i]) == 0:\n                        return -1\n                    else:\n                        if type(Input[i][0]) is int:\n                            if Input[i][0] == 0:\n                                return -1\n                            else:\n                                return 1\n                        else:\n                            return 0\ndef check_5(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            if len(Input[i]) == 0:\n                return -1\n            else:\n                if type(Input[i][0]) is int:\n                    if Input[i][0] == 0:\n                        return -1\n                    else:\n                        return 1\n                else:\n                    return 0\ndef check_6(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    if type(Input) is tuple:\n        if len(Input) == 1:\n            return -1\n        else:\n            for i in range(len(Input)):\n                if type(Input[i]) is tuple:\n                    if len(Input[i]) == 0:\n                        return -1\n                    else:\n                        if type(Input[i][0]) is int:\n                            if Input[i][0] == 0:\n                                return -1\n                            else:\n                                return 1\n                        else:\n                            return 0\n",
        "test": "assert     find_lists([]) == 0",
        "num_ids": 385
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = abs(arr[0]-arr[1])\n    for i in range(1, len(arr)):\n        cur_abs_diff = abs(arr[i] - arr[i-1])\n        max_abs_diff = max(cur_abs_diff, max_abs_diff)\n    return max_abs_diff\n",
        "test": "assert     max_Abs_Diff([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0",
        "num_ids": 592
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == n:\n        return (a[0], a[1])\n    else:\n        for i in range(a[0], a[1]+1):\n            for j in range(a[1], a[1]+1):\n                if i + j == n:\n                    return (i, j)\n                elif not(i + j > n):\n                    continue\n                else:\n                    return find_solution(i, j, n)\n",
        "test": "assert     find_solution([1,2], 3, 5) == None",
        "num_ids": 703
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list1:\n        list2.remove(x)\n    return list2\n",
        "test": "assert     remove_elements([0,1,2,3,4,5,6,7,8,9], [1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 554
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum += (i*(i+1))//2\n    return sum\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 289
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*(s-l)**2)/2\n",
        "test": "assert         area_polygon(0,0) == 0",
        "num_ids": 486
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n % 2 == 0:\n        return div_sum(n//2)\n    else:\n        return div_sum(n-1)\n    #elif n % 2!= 0:\n        #return div_sum(n//2)\n",
        "test": "assert     div_sum(1) == 1",
        "num_ids": 559
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #create an empty dictionary to store the character counts in. \n    dict = {}\n    #iterate through the string and look at the position of each character in the string\n    for i in str1: \n        if i.isalpha(): \n            if i not in dict: \n                dict[i] = 0 \n            dict[i] += 1 \n    #count the total of characters in dictionary. \n    return len(dict)\n",
        "test": "assert     count_char_position('') == 0",
        "num_ids": 493
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    if (len(A) % 2 == 0):\n        for i in range(0, len(A) // 2):\n            if A[i] ^ A[i + 1] == 0:\n                count += 1\n    return count\n",
        "test": "assert     find_even_pair([1, 2, 3]) == 0",
        "num_ids": 487
    },
    {
        "number": 167,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # code to solve above problem\n    if n == 1:\n        return 2\n    elif n <= 2:\n        return 1\n    else:\n        return n * next_power_of_2(n-1)\n",
        "test": "assert     next_power_of_2(0) == 1",
        "num_ids": 320
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n",
        "test": "assert ",
        "num_ids": 248
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    if n == 0:\n        return 0\n    if m == 0:\n        return 0\n    for i in range(n):\n        total += list1[i]\n    return total\n",
        "test": "assert     sum_range_list([1, 2, 3, 4], 1, 5) == 11, \"Test 2 failed\"",
        "num_ids": 452
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if type(a) == int or type(a) == float:\n        return 0\n    if type(a)!= list:\n        raise TypeError('A must be a list of floats or ints')\n    if len(a) < 2 or len(a) > 6:\n        raise TypeError('A must be a list of length at least 2 and at most 6')\n",
        "test": "assert     perimeter_pentagon(0.0) == 0.0",
        "num_ids": 428
    },
    {
        "number": 172,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    #string = str(input(\"Enter the string : \"))\n    string = s\n    for i in range(len(string)):\n        if string[i] =='s' or string[i] == 'S':\n            count += 1\n    print(\"The number of occurence of string's' in the given string : \", count)\n    print(\"The number of occurence of string 'S' in the given string : \", count)\n    print(\"The number of occurence of string'std' in the given string : \", count)\n    print(\"The number of occurence of string'std' in the given string : \", count)\n    return count\n",
        "test": "assert     count_occurance('aaa') == 0",
        "num_ids": 529
    },
    {
        "number": 222,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == type(i):\n            return True\n    return False\n",
        "test": "assert     check_type([1, 2, 3, \"a\", [4, 5, 6]]) == True, \"Wrong data type in check_type\"",
        "num_ids": 681
    },
    {
        "number": 223,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        count += arr[i]\n        if (count >= x):\n            return True\n    return False\n",
        "test": "assert     is_majority([1,2,3,4,5,6], 2, 6) == False",
        "num_ids": 618
    },
    {
        "number": 224,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # code goes here\n    n = n%2\n    count_n = 0\n    while n>0:\n        n = n//2\n        if n%2==1:\n            count_n+=1\n    return count_n\n",
        "test": "assert     count_Set_Bits(32) == 0",
        "num_ids": 356
    },
    {
        "number": 226,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace(\"Odd\",\" \").replace(\"even\",\" \").replace(\"even\",\" \").replace(\"even\",\" \").replace(\"odd\",\" \")\n",
        "test": "assert     odd_values_string('') == ''",
        "num_ids": 316
    },
    {
        "number": 227,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c: \n        return a \n    elif b<c<a: \n        return b \n    else: \n        return c \n",
        "test": "assert     min_of_three(1,2,3) == 1",
        "num_ids": 416
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l==r:\n        return True\n    elif l==0 or r==0:\n        return False\n    else:\n        return all_Bits_Set_In_The_Given_Range(n,l-1,r) or all_Bits_Set_In_The_Given_Range(n,l,r-1)\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(3,0,255) == False, \"bit set In The Given Range\"",
        "num_ids": 622
    },
    {
        "number": 229,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] *= -1\n    return arr\n",
        "test": "assert         re_arrange_array([1, 2, 3, 4], 3) == [1, 2, 3, 4], 'The function does not match the given output!'",
        "num_ids": 2315
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',''.join(char))\n",
        "test": "assert     replace_blank('w','b') == 'w'",
        "num_ids": 489
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n == 0:\n        return []\n    if len(list1) == 0:\n        return []\n    heapq.heapify(list1)\n    for i in range(n):\n        heapq.heappop(list1)\n    return list1\n",
        "test": "assert ",
        "num_ids": 2447
    },
    {
        "number": 233,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    x = r*math.cos(h)\n    y = r*math.sin(h)\n    return (x**2+y**2)**(1/2)\n",
        "test": "assert     lateralsuface_cylinder(0,2) == 0",
        "num_ids": 411
    },
    {
        "number": 234,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n",
        "test": "assert         volume_cube(1) == 1",
        "num_ids": 217
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    ans = 0\n    for i in range(0, n):\n        if (i % 2 == 0):\n            ans += 2**i\n    return ans\n",
        "test": "assert     even_bit_set_number(1) == 1",
        "num_ids": 365
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict_of_occurences = dict()\n    for item in test_list:\n        if dict_of_occurences.get(item[0]) == None:\n            dict_of_occurences[item[0]] = 1\n        else:\n            dict_of_occurences[item[0]] += 1\n    return dict_of_occurences\n",
        "test": "assert     check_occurences([(1, 1), (2, 2), (1, 2), (1, 3), (2, 4), (3, 6), (4, 4), (1, 2)]) == {(2, 4): 4}",
        "num_ids": 816
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    s = str.replace(\" \", \"\")\n    return len(set(s))\n",
        "test": "assert number_of_substrings(\"abcc\") == 3",
        "num_ids": 907
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    counter = 0\n    for i in range(0,m-1):\n        if n > (i+1):\n            counter += 1\n        else:\n            counter += 1\n            n = n - (i+1)\n    if m == 1:\n        return counter\n    else:\n        return counter + 1\n        \n",
        "test": "assert     get_total_number_of_sequences(3,4) == 3",
        "num_ids": 618
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if(len(list1)<len(list2)):\n        list2.extend(list1)\n    else:\n        list1.extend(list2)\n    return list1",
        "test": "assert     replace_list([1,2,3],[4,5,6]) == [1,2,3,4,5,6], \"test case 2\"",
        "num_ids": 2551
    },
    {
        "number": 242,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for char in str1:\n        if char.isalpha():\n            char_count += 1\n    return char_count\n",
        "test": "assert     count_charac('') == 0, \"String is empty\"",
        "num_ids": 457
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = math.sqrt(N)\n    if N == 1: \n        return sqrtN\n    if N == 2:\n        return 2*sqrtN\n    if N % 2 == 0:\n        return (N+1)**2\n",
        "test": "assert next_Perfect_Square(1) == 1",
        "num_ids": 344
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def bitonic_sequence(arr,m):\n        \n        l, r = 0, 1; count = 0\n        \n        while l < m and r < m:\n            if arr[l] <= arr[r]:\n                count += 1\n                l += 1\n            else:\n                count = max(count, 1)\n                r += 1\n        \n        return count\n    \n    return bitonic_sequence(arr, len(arr))\n",
        "test": "assert     max_sum([]) == 0",
        "num_ids": 525
    },
    {
        "number": 246,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return (number**0.5)**(1/2)\n    \ndef main():\n    '''\n    The main function, which uses the turtle module for creating turtles.\n    '''\n    # create a new turtle\n    turtle = turtle_module.Turtle()\n    turtle.speed('fastest')\n    \n    # create a new turtle and draw the figure\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.circle(50)\n    turtle.end_poly()\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.circle(50)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forwar",
        "test": "assert     babylonian_squareroot(0) == 0.0",
        "num_ids": 4719
    },
    {
        "number": 247,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    t = {\n        'r':'p',\n        'p':'a',\n        'b':'n',\n        'n':'o',\n        'a':'t',\n        'n':'n',\n        't':'u',\n        'u':'w',\n        'r':'l',\n        'l':'d',\n        'd':'o'\n    }\n    dp = [[0 for x in range(len(str)+1)] for y in range(len(str)+1)]\n    for i in range(1,len(str)+1):\n        for j in range(1,i+1):\n            if str[i-j] == str[i-1]:\n                dp[i][j] = dp[i-j][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j-1],dp[i-1][j])\n    return dp[-1][-1]\n",
        "test": "assert     lps(\"bb\") == 2, \"Test lps\"",
        "num_ids": 1154
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n + 1) // 2\n",
        "test": "assert     harmonic_sum(100) == 0.0625",
        "num_ids": 219
    },
    {
        "number": 249,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    i,j = 0,0\n    while i<len(array_nums1) and j<len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i+=1\n            j+=1\n        elif array_nums1[i] < array_nums2[j]:\n            i+=1\n        else:\n            j+=1\n    return intersection\n",
        "test": "assert     intersection_array([1, 2, 3], [2, 3, 3]) == [2, 3]",
        "num_ids": 468
    },
    {
        "number": 250,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for e in tup:\n        if e == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X(('a', 'b', 'c'), 'x') == 0",
        "num_ids": 410
    },
    {
        "number": 251,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in list:\n        list.insert(list.index(i),element)\n    return list\n",
        "test": "assert     insert_element([],'')==[]",
        "num_ids": 1160
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    if isinstance(numbers, complex):\n        complex_numbers.append(numbers)\n    else:\n        for i in numbers:\n            if isinstance(i, complex):\n                complex_numbers.append(i.conjugate())\n            else:\n                complex_numbers.append(i)\n    return complex_numbers\n    \ndef solve(complex_numbers):\n    '''\n    Write a python function to find the complex number that is closest to zero.\n    '''\n    diffs = []\n    if isinstance(complex_numbers, list):\n        complex_numbers = convert(complex_numbers)\n    for i in complex_numbers:\n        complex_numbers[complex_numbers.index(i)] = complex(0,0)\n    for i in range(len(complex_numbers)-1):\n        diffs.append((complex_numbers[i+1] - complex_numbers[i])/complex_numbers[i])\n    diffs.append((complex_numbers[-1] - complex_numbers[-2])/complex_numbers[-1])\n    return complex_numbers[diffs.index(min(diffs))]\n    \ndef solve_final(complex_numbers):\n    '''\n    Write a python function to find the complex number that is closest to zero.\n    '''\n    return complex(0,0)\n    \ndef print_complex(complex_numbers):\n    '''\n    Write a python function to print the complex number.\n    '''\n    for i in complex_numbers:\n        print(i)\n    \ndef expo(x):\n    '''\n    Write a python function to compute the real part and imaginary part of a complex number.\n    '''\n    real = (complex(0,0)).conjugate()\n    imag = 0\n    for i in x:\n        try:\n            real = real*(complex(i))\n            imag += i\n        except TypeError:\n            return real,i\n    return real,imag\n",
        "test": "assert     convert(1.0) == (0, 1.0)",
        "num_ids": 2636
    },
    {
        "number": 253,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for item in list1:\n        if type(item) == int:\n            counter = counter + 1\n    return counter\n",
        "test": "assert     count_integer([1, 2, 3]) == 3",
        "num_ids": 297
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # return [list(it) for it in combinations_with_replacement(l, n)]\n    return combinations_with_replacement(l, n)\n",
        "test": "assert     combinations_colors([1,2,3], 3) == [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)",
        "num_ids": 2001
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # print('This is a test for your solution')\n    # print('This is a test for your solution')\n    # print('This is a test for your solution')\n    # print('This is a test for your solution')\n    count = 0\n    for i in range(2, n+1):\n        isPrime = True\n        if(i%2==0):\n            if(i==1):\n                continue\n            for j in range(2, i):\n                if(i%j==0):\n                    isPrime = False\n                    break\n            if(isPrime):\n                count+=1\n    return count\n",
        "test": "assert     count_Primes_nums(2) == 1",
        "num_ids": 422
    },
    {
        "number": 257,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "test": "assert     swap_numbers(2,3) == (3,2)",
        "num_ids": 229
    },
    {
        "number": 259,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)>len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    elif len(test_tup1)<len(test_tup2):\n        test_tup2, test_tup1 = test_tup1, test_tup2\n    return max(test_tup1, test_tup2)\n",
        "test": "assert         maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 560
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #base case\n    if (n == 1): return 1\n    elif (n == 2): return 2\n    elif (n == 3): return 3\n",
        "test": "assert     newman_prime(1) == 1 ",
        "num_ids": 403
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return [x / y for x, y in zip(test_tup1, test_tup2)]\n",
        "test": "assert     division_elements(('1','2'),('4','5')) == 'C', \"Test for division_elements failed\"",
        "num_ids": 1046
    },
    {
        "number": 262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    assert len(list1) > L, 'L must be greater than the length of the first part of the list.'\n    assert type(list1) is list, 'The list parameter must be a list.'\n    assert type(L) is int, 'The length parameter must be an integer.'\n    assert L >= 0, 'The length parameter must be positive.'\n    assert type(list1) is list, 'The list parameter must be a list.'\n    assert type(L) is int, 'The length parameter must be an integer.'\n    assert L > 0, 'The length parameter must be greater than 0.'\n",
        "test": "assert ",
        "num_ids": 745
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 4:\n        age = 'YYYY-YYYY'\n    elif h_age >=4 and h_age <7:\n        age = 'YYYY-MAY'\n    elif h_age >=7 and h_age <13:\n        age = 'MAY-YYYY'\n    elif h_age >=13 and h_age <17:\n        age = 'MAY-WED'\n    elif h_age >=17 and h_age <22:\n        age = 'WED-YYYY'\n    elif h_age >=22 and h_age <25:\n        age = 'WED-MAY'\n    elif h_age >=25 and h_age <28:\n        age = 'WED-WEE'\n    elif h_age >=28 and h_age <32:\n        age = 'FRI-YYYY'\n    elif h_age >=32 and h_age <38:\n        age = 'FRI-MAY'\n    elif h_age >=38 and h_age <45:\n        age = 'FRI-WED'\n    elif h_age >=45 and h_age <48:\n        age = 'FRI-THU'\n    elif h_age >=48 and h_age <54:\n        age = 'FRI-FRI'\n    elif h_age >=54 and h_age <59:\n        age = 'FRI-SAT'\n    elif h_age >=59 and h_age <65:\n        age = 'FRI-SUN'\n    elif h_age >=65:\n        age = 'SAT-YYYY'\n    else:\n        age = 'error'\n    return age",
        "test": "assert     dog_age(1) == 1",
        "num_ids": 865
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    if step == 0:\n        L = S\n    else:\n        for x in range(0,len(S), step):\n            L.append(S[x:x+step])\n    return L\n",
        "test": "assert     list_split([1,2,3], 1) == [[1], [2], [3]]",
        "num_ids": 2954
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # your code goes here\n    return 0\n",
        "test": "assert     lateralsurface_cube(0) == 0.0",
        "num_ids": 2163
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(0, n+1):\n        s += i ** 2\n    return s\n",
        "test": "assert ",
        "num_ids": 246
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1:\n        raise ValueError('number of stars must be positive')\n    elif n == 1:\n        return 1\n    else:\n        star_num = 0\n        while n % 2 == 0:\n            star_num = star_num + 1\n            n = n/2\n        return star_num + 1\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 2333
    },
    {
        "number": 269,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == ord('a')",
        "num_ids": 308
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    #Your code here\n    #Hint: use an if or else statement to find the sum.\n    even_sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n",
        "test": "assert     sum_even_and_even_index([]) == 0",
        "num_ids": 437
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 0: \n        return 0\n    else:\n        result = 0\n        for x in range(1, n + 1):\n            result = result + (x ** 5)\n        return result\n",
        "test": "assert     even_Power_Sum(5) == 50",
        "num_ids": 455
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for x in test_list:\n        rear_list.append(x[-1])\n    return rear_list\n",
        "test": "assert ",
        "num_ids": 2168
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # test_tup1 = (1, 2, 3, 4, 5, 6)\n    # test_tup2 = (1, 2, 3, 4)\n    # result = []\n    # for i in test_tup1:\n    #     result.append(i - test_tup2[test_tup1.index(i)])\n    # print(result)\n    # print(len(result))\n    # print(test_tup1)\n    # print(test_tup2)\n    # print(len(result))\n    # print(test_tup1)\n    # print(test_tup2)\n",
        "test": "assert     substract_elements((1, 2), (1, 3)) == (2, 1)",
        "num_ids": 536
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # calculate the binomial coefficients using the built in math module.\n    coeff_sum = math.comb(n, 2) # n^2\n    return coeff_sum\n",
        "test": "assert         even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 471
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*h\n",
        "test": "assert     volume_cylinder(r=1,h=1) == 1",
        "num_ids": 205
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict:\n        if dict[i] >= n:\n            new_dict[i] = dict[i]\n    return new_dict\n",
        "test": "assert     dict_filter({'col1': 1, 'col2': 3, 'col3': 4, 'col4': 5}, 10) == {'col1': 1, 'col2': 3, 'col3': 4, 'col4': 5}",
        "num_ids": 607
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_element = test_tup[0]\n    count = 0\n    for el in test_tup:\n        if el < first_element:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements((1,2,3)) == 0",
        "num_ids": 509
    },
    {
        "number": 279,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    elif n % 2 == 0:\n        return n//2\n    else:\n        return (n-1)//2\n",
        "test": "assert     is_num_decagonal(0) == 0",
        "num_ids": 2722
    },
    {
        "number": 280,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n        else:\n            return (False, -1)\n    \ndef binary_search(arr, item):\n    '''\n    Write a function that takes an array and an item and returns its index position in the array. If the item is not present in the array, return -1.\n    '''\n    start_index = 0\n    end_index = len(arr)-1\n    while start_index <= end_index:\n        mid_index = start_index + (end_index - start_index) // 2\n        if arr[mid_index] == item:\n            return mid_index\n        elif arr[mid_index] < item:\n            start_index = mid_index + 1\n        else:\n            end_index = mid_index - 1\n    return -1\n    ",
        "test": "assert     sequential_search([1, 2, 3, 4, 5], 2) == (False, -1)",
        "num_ids": 538
    },
    {
        "number": 281,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = list(set(test_list))\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False\n",
        "test": "assert     all_unique([3,3,3,3]) == False",
        "num_ids": 473
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n",
        "test": "assert     sub_list([1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 80",
        "num_ids": 2632
    },
    {
        "number": 283,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) == 1: \n        return True\n    else: \n        for i in str(n): \n            if not (i.isdigit()): \n                return False \n            if not (int(i) <= n): \n                return False\n        return True\n",
        "test": "assert     validate(8)     == True",
        "num_ids": 414
    },
    {
        "number": 284,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for index,item in enumerate(list):\n        if(item == element):\n            return False\n        else:\n            if(index == len(list)-1):\n                return False\n            else:\n                return True\n    return True\n",
        "test": "assert     check_element([1, 2, 3, 4, 5], 3) == True, \"Test failed\"",
        "num_ids": 469
    },
    {
        "number": 285,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.count('a')+text.count('b')==len(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three(\"aaaabaaa\")",
        "num_ids": 389
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Python3 implementation\n    \n    # Create an array to store the sub-array sums\n    sub_array_sum_array = [0] * n\n    \n    # Initialize result array\n    result = 0\n    \n    # Loop through all elements and create a sub-array sum for each repetition\n    for i in range(1, n):\n        sub_array_sum = 0\n        for j in range(i, n):\n            sub_array_sum += a[j]\n            if sub_array_sum >= k:\n                result = max(result, sub_array_sum_array[j] + sub_array_sum)\n                sub_array_sum_array[j] = 0\n    \n    # Return the final result\n    return result\n",
        "test": "assert     max_sub_array_sum_repeated([1,2,3,4,5,6,7], 3, 2) == 5",
        "num_ids": 571
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n**2\n",
        "test": "assert     square_Sum(4) == 16",
        "num_ids": 222
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "test": "assert     max_length([]) == 0 ",
        "num_ids": 416
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n < 2): \n        return 1\n    \n    # base case \n    if n == 2: \n        return 2 \n    \n    # first case \n    if (n == 3): \n        return 4 \n",
        "test": "assert     count_no_of_ways(1, 2) == 1",
        "num_ids": 424
    },
    {
        "number": 292,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < 0 or m < 0:\n        return \"Invalid Input\"\n    if n == 0:\n        return 0\n    if m == 0:\n        return 1\n    i = 1\n    while i < n+1:\n        if i == n:\n            return i\n        if i % m == 0:\n            return i\n        i += 1\n",
        "test": "assert     find(8,6) == 6",
        "num_ids": 388
    },
    {
        "number": 293,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return -1*(w+h)/3\n",
        "test": "assert     otherside_rightangle(0,0) == 0",
        "num_ids": 690
    },
    {
        "number": 294,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[-1]\n",
        "test": "assert     max_val([1,2,3]) == 3",
        "num_ids": 346
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n",
        "test": "assert     sum_div(999) == 3",
        "num_ids": 2344
    },
    {
        "number": 296,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    d = {}\n    for i in range(n): \n        if arr[i] in d: \n            d[arr[i]] += 1 \n        else: \n            d[arr[i]] = 1 \n    s = 0\n    for k, v in d.items(): \n        if v % 2 == 1: \n            s += (v - 1) \n    return s\n",
        "test": "assert     get_Inv_Count([2,1,2,4,2,3,1]) == 2",
        "num_ids": 484
    },
    {
        "number": 297,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in list1:\n        if type(i) == list:\n            new_list += flatten_list(i)\n        else:\n            new_list.append(i)\n    return new_list\n    ",
        "test": "assert     flatten_list([1, [2, [4, [[3, [6, 7, 8]]], 9], 10], 11])!= [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]",
        "num_ids": 2588
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    num_of_two = len(stdata)\n    if num_of_two == 0:\n        return 0\n",
        "test": "assert     max_aggregate(()) == 0",
        "num_ids": 4871
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Declare variables\n    ans = 0\n    m = 10**8\n    \n    # find sum of first n bits\n    for i in range(n):\n        if i < n-1:\n            ans += m\n        if n % 2 == 0:\n            ans += m//2\n            m = m//2\n        else:\n            m = m//2+1\n            \n    # return answer\n    return ans",
        "test": "assert     count_binary_seq(0) == 0",
        "num_ids": 598
    },
    {
        "number": 301,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i in d.keys():\n        depth += 1\n    return depth\n",
        "test": "assert     dict_depth({\"a\":{\"c\":1}}) == 1",
        "num_ids": 623
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for rot in range(0,rotations) :\n        for j in range(0,len(arr)-1) :\n            if arr[j] == arr[j+1] :\n                index = index -1\n                break\n    if index >= len(arr)-2 :\n        print(\"The value is not present at the index\")\n        return -1\n    elif index >= len(arr)-1 :\n        print(\"The value is not present at the index\")\n        return -1\n    else :\n        return arr[index]\n    \ndef find_Range(arr,rotations,index) :  \n    '''\n    Write a python function to find all values in a given list after number of rotations.\n    '''\n    for rot in range(0,rotations) :\n        for i in range(index,index+3) :\n            arr[i] = arr[i+1]\n    return arr\n",
        "test": "assert     find_Element([0,1,2,3,4], [0,2,4,5,6], 3,2), \"The function does not return a valid element.\"",
        "num_ids": 496
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    length = len(words)\n    for word in words:\n        if word.startswith(('p', 'P')):\n            return word[1:], word[:2]\n    return None, None\n",
        "test": "assert     start_withp([ \"a\", \"p\", \"a\", \"p\", \"p\", \"a\", \"p\", \"p\" ]) == ['a', 'p', 'p', 'p']",
        "num_ids": 385
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    kth = n - 1 - index\n    if a[n - 1] >= a[index]:\n        return a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    else:\n        return a[k]\n    \ndef max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return a[k]\n    if k > index:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1)) + a[k]\n    else:\n        return a[k]\n    \ndef max_sum_increasing_subseq2(a, n, index, k):\n    if index == n:\n        return a[k]\n    if k > index:\n        return max(max_sum_increasing_subseq2(a, n, index + 1, k), max_sum_increasing_subseq2(a, n, index + 1, k + 1)) + a[k]\n    else:\n        return a[k]\n    \ndef max_sum_increasing_subseq3(a, n, index, k):\n    if index == n:\n        return a[k]\n    if k > index:\n        return max(max_sum_increasing_subseq3(a, n, index + 1, k), max_sum_increasing_subseq3(a, n, index + 1, k + 1), max_sum_increasing_subseq3(a, n, index + 1, k + 2)) + a[k]\n    else:\n        return a[k]\n    \ndef max_sum_increasing_subseq4(a, n, index, k):\n    if index == n:\n        return a[k]\n    if k > index:\n        return max(max_sum_increasing_subseq4(a, n, index + 1, k), max_sum_increasing_subseq4(a, n, index + 1, k + 1), max_sum_increasing_subseq4(a, n, index + 1, k + 2), max_sum_increasing_subseq4(a, n, index + 1, k + 3)) + a[k]\n    else:\n        return a[k]\n    \ndef max_sum_increasing_subseq5(a, n, index, k):\n    if index == n:\n        return a[k]\n    if k > index:\n        return max(max_sum_increasing_subseq5(a, n, index + 1, k), max_sum_increasing_subseq5(a, n, index + 1, k + 1), max_sum_increasing_subseq5(a, n, index + 1, k + 2), max_sum_increasing_subseq5(a, n, index + 1, k + 3), max_sum_increasing_subseq5(a, n, index + 1, k + 4), max_sum_increasing_subseq5(a, n, index + 1, k + 5)) + a[k]\n    else:\n        return a[k]\n        \ndef max_sum_increasing_subseq6(a, n, index, k):\n    if index == n:\n        return a[k]\n    if k > index:\n        return max(max_sum_increasing_subseq6(a, n, index + 1, k), max_sum_increasing_subseq6(a, n, index + 1, k + 1), max_sum_increasing_subseq6(a, n, index + 1, k + 2), max_sum_increasing_subseq6(a, n, index + 1, k + 3), max_sum_increasing_subseq6(a, n, index + 1, k + 4), max_sum_increasing_subseq6(a, n, index + 1, k + 5), max_sum_increasing_subseq6(a, n, index + 1, k + 6)) + a[k]\n    else:\n        return a[k]\n",
        "test": "assert max_sum_increasing_subseq([0,1,2,3,4,5], 3, 0, 2) == 5",
        "num_ids": 1651
    },
    {
        "number": 307,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i][0]=='F':\n            if i==0:\n                tuplex[i][0]=n\n            elif i==1:\n                tuplex[i][0]=m\n            elif i==2:\n                tuplex[i][0]=m+n\n        elif tuplex[i][0]=='L':\n            if i==0:\n                tuplex[i][0]=m\n            elif i==1:\n                tuplex[i][0]=n+m\n            elif i==2:\n                tuplex[i][0]=m+n+n\n    \n    return tuplex\n",
        "test": "assert         colon_tuplex((\"red\",\"blue\"),3,\"red\") == ('red','blue')",
        "num_ids": 677
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Your code here\n",
        "test": "assert     large_product(3, [2, 3, 4, 5], 4) == [2, 4, 6, 3], \"the first input is incorrect\"",
        "num_ids": 1064
    },
    {
        "number": 309,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    return b\n",
        "test": "assert     maximum(10,20) == 20",
        "num_ids": 188
    },
    {
        "number": 310,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    try:\n        return tuple(str1)\n    except:\n        return str1\n",
        "test": "assert     string_to_tuple('abd') == ('a', 'b', 'd')",
        "num_ids": 542
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n > 0:\n        n = n & 0x7F    # convert to a negative number\n        n |= (1 << 7)    # set the bit 7\n        return n \n    else:\n        n |= (1 << 7)    # set the bit 7\n        return n \n",
        "test": "assert     set_left_most_unset_bit(17) == True",
        "num_ids": 535
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r**3 * math.pi * h**3 * (2/3) * (math.tan(math.radians(45)))\n",
        "test": "assert volume_cone(5,2) == 5.0",
        "num_ids": 312
    },
    {
        "number": 388,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    if n < 1:\n        return 0\n    else:\n        return highest_Power_of_2(n - 1)\n",
        "test": "assert ",
        "num_ids": 315
    },
    {
        "number": 389,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return find_lucas(n-1)+find_lucas(n-2)\n        \nlucas = find_lucas(10)\nprint(lucas)",
        "test": "assert     find_lucas(1) == 1",
        "num_ids": 624
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n",
        "test": "assert     add_string([2, 3, 4, 5], \"abc\") == [2, 3, 4, 5]",
        "num_ids": 444
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict()\n    d2 = dict()\n    d3 = dict()\n    for i in l1:\n        d1.update(i)\n    for i in l2:\n        d2.update(i)\n    for i in l3:\n        d3.update(i)\n    return (d1, d2, d3)\n",
        "test": "assert     convert_list_dictionary([1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 697
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # formula for the maximum possible sum\n    # n is the number of squares\n    # f(n) is the sum of the squares\n    # return f(n)\n    n = int(n)\n    f = n * (n+1) / 2\n    return max(f, n * (n+1) / 2, n * (n+3) / 6)\n",
        "test": "assert     get_max_sum(0) == 0",
        "num_ids": 2390
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list)\n    for elem in input_list:\n        if len(elem) > max_len:\n            max_len = len(elem)\n    return max_len\n    \ndef min_length_list(input_list):\n    '''\n    Write a function to find the list with minimum length.\n    '''\n    min_len = len(input_list)\n    for elem in input_list:\n        if len(elem) < min_len:\n            min_len = len(elem)\n    return min_len\n    \ndef count_words(input_list):\n    '''\n    Write a function that counts the number of words in a list.\n    '''\n    count = 0\n    for elem in input_list:\n        if isinstance(elem, str):\n            count += 1\n    return count\n",
        "test": "assert     max_length_list([]) == 0",
        "num_ids": 394
    },
    {
        "number": 394,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique = []\n    for i in test_tup:\n        if i not in unique:\n            unique.append(i)\n    if len(unique) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_distinct((1, 1, 2, 3, 4, 4)) == False, \"This test should fail. (check_distinct)\"",
        "num_ids": 417
    },
    {
        "number": 395,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    counts = {}\n    for char in str1:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    for char in str1:\n        if char in counts:\n            counts[char] -= 1\n        if counts[char] == 0:\n            return char\n    return \"null\"\n",
        "test": "assert     first_non_repeating_character('H') == 'H'",
        "num_ids": 536
    },
    {
        "number": 396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (len(string) == 0):\n        return True\n    elif (re.search(regex, string)):\n        return True\n    elif (re.search(regex, string[:-1])):\n        return True\n    else:\n        return False\n",
        "test": "assert ",
        "num_ids": 255
    },
    {
        "number": 397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b and a > c:\n        a = a - c\n    if b > a and b > c:\n        b = b - c\n    return (a+b+c)/3\n",
        "test": "assert     median_numbers([2, 2, 3], 2, 3) == 1",
        "num_ids": 564
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i % 10\n    return sum\n    \n    \n    #Sum of digits of each number of a given list    ",
        "test": "assert     sum_of_digits([5,6,7,8,9,0]), \"Should be 10\"",
        "num_ids": 282
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Number of tuples must be equal!\"\n    assert all(type(tup1) == type(tup2) for tup1, tup2 in zip(test_tup1, test_tup2)), \"Each tuple must be of the same type!\"\n    assert all(len(tup1) == len(tup2) for tup1, tup2 in zip(test_tup1, test_tup2)), \"Each tuple must be of the same length!\"\n    assert all(type(tup1[i]) == type(tup2[i]) for tup1, tup2 in zip(test_tup1, test_tup2)), \"Each tuple must be of the same type!\"\n    assert all(len(tup1) == len(tup2[i]) for tup1, tup2 in zip(test_tup1, test_tup2)), \"Each tuple must be of the same length!\"\n",
        "test": "assert     bitwise_xor(test_tup2, test_tup1) == False",
        "num_ids": 697
    },
    {
        "number": 400,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for item in test_list:\n        if isinstance(item, list):\n            for elem in item:\n                if isinstance(elem, list):\n                    freq += len(elem)\n        else:\n            if isinstance(item, list):\n                freq += len(item)\n    return freq\n",
        "test": "assert extract_freq([\"welcome\", \"first\", \"second\", \"third\"]) == 0",
        "num_ids": 490
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #print(test_tup1)\n    #print(test_tup2)\n    return test_tup1 + test_tup2\n",
        "test": "assert     add_nested_tuples(test_tup1, test_tup2) == (5,7,8)",
        "num_ids": 602
    },
    {
        "number": 404,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum=a\n    if (b<a):\n        minimum=b\n    else:\n        minimum=a\n    return minimum\n",
        "test": "assert minimum(10,10) == 10",
        "num_ids": 177
    },
    {
        "number": 405,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        tuplex.index(tuple1)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_tuplex((1, 2, 3, 4, 5), (1,2,3,6,7)) == False",
        "num_ids": 324
    },
    {
        "number": 406,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # comment out this line if you don't want it\n    # return(x%2!= 0)\n    return x%2 == 0",
        "test": "assert     find_Parity(42) == True",
        "num_ids": 246
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if (n < 10) and (n >= 0):\n        return n\n",
        "test": "assert     rearrange_bigger(3) == 3",
        "num_ids": 324
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #  sort the numbers with increasing order\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    \n    if k <= 1:\n        return 0\n    elif k == 2:\n        return 2\n    else:\n        for i in range(k):\n            if (i >= nums1.index(nums2[i])):\n                return i\n",
        "test": "assert     k_smallest_pairs([\"1\",\"1\",\"1\"],[\"1\",\"2\",\"3\"], 2) == 2",
        "num_ids": 865
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = list1[0][1]*list1[1][1]\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            prod = list1[i][1]*list1[j][1]\n            if prod < min_prod:\n                min_prod = prod\n    return min_prod\n",
        "test": "assert ",
        "num_ids": 2965
    },
    {
        "number": 410,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for i in listval:\n        min=i\n        min=min\n        return min\n",
        "test": "assert     min_val([1,2,3,4]) == 1",
        "num_ids": 520
    },
    {
        "number": 411,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_word += word[i].lower()\n        elif word[i] =='':\n            camel_word += '_'\n        elif word[i] == '-':\n            camel_word += '_-'\n        else:\n            camel_word += word[i]\n    return camel_word\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    snake_word = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            snake_word += word[i].lower()\n        elif word[i] =='':\n            snake_word += '_'\n        elif word[i] == '-':\n            snake_word += '-'\n        else:\n            snake_word += word[i]\n    return snake_word\ndef snake_to_snake_or_camel(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    snake_word = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            snake_word += word[i].lower()\n        elif word[i] =='':\n            snake_word += '_'\n        elif word[i] == '-':\n            snake_word += '-'\n        else:\n            snake_word += word[i]\n    return snake_to_camel(snake_word)\n",
        "test": "assert     snake_to_camel('foo') == 'foo'",
        "num_ids": 585
    },
    {
        "number": 412,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 416
    },
    {
        "number": 413,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n",
        "test": "assert     extract_nth_element([('a', 1), ('a', 2), ('a', 3), ('b', 4), ('c', 5)], 4) == ('c', 5)",
        "num_ids": 409
    },
    {
        "number": 414,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] == list1[j] and j>i:\n                return True\n    return False\n",
        "test": "assert     overlapping([1,2,3], [4,5,6])==False,    \"Test Case Failed\"",
        "num_ids": 518
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]\n    for num in arr:\n        if num > max_product:\n            max_product = num\n",
        "test": "assert ",
        "num_ids": 413
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    d = dict() \n    for i in Input: \n        d[i[0]] = d.get(i[0], 0) + 1\n    for k, v in d.items(): \n        if v == 1: \n            return k \n",
        "test": "assert     group_tuples([(1,2),(2,3),(3,4)]) == True, 'Error : Fail'",
        "num_ids": 465
    },
    {
        "number": 418,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort()\n    if len(lst)>1:\n        if lst[0] == lst[1]:\n            return lst[0]\n        return Find_Max(lst[1:])\n    else:\n        return lst[0]\n        \ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort()\n    if len(lst)>1:\n        if lst[0] == lst[1]:\n            return lst[0]\n        return Find_Min(lst[1:])\n    else:\n        return lst[0]\n",
        "test": "assert     Find_Max([0,1,2,3,4,5]) == 5, \"The function Find_Max should return 5.\"",
        "num_ids": 2519
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total = total + x\n    print(total)\n    return total\n",
        "test": "assert     round_and_sum([1, 2, 3]) == 6, \"wrong\"",
        "num_ids": 594
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return ((n*(n+1))//2)**3\n",
        "test": "assert     cube_Sum(1) == 1",
        "num_ids": 2313
    },
    {
        "number": 421,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    s = []\n    for elt in test_tup:\n        if isinstance(elt, tuple):\n            for item in elt:\n                s.append(item)\n        else:\n            s.append(elt)\n    return tuple(s)\n",
        "test": "assert     concatenate_tuple([1,2,3]) == (1,2,3)",
        "num_ids": 559
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total = total + i\n    avg = total/n\n    return avg\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 2395
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # TODO: Replace this by your own code\n    #return test_tuple[-1][:1]\n    return test_tuple[-1][::-1]\n",
        "test": "assert     extract_rear((('a', 'b', 'c'), 'd', 'e')) == 'e', 'Error'",
        "num_ids": 578
    },
    {
        "number": 425,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if (list1[i] == x):\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([1, 2, 3, 4], 2) == 1",
        "num_ids": 2286
    },
    {
        "number": 426,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    # Runtime: 36 ms (36.07%)\n    # Memory Usage: 13.9 MB (25.41%)\n    \n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
        "test": "assert     filter_oddnumbers([1,2,3,4,5]), \"The function should return an empty array\"",
        "num_ids": 549
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    '''\n    # 1:1 : d1 = \n    1. Date 1. 01.\n    1. Date 1. 1.\n    1. Date 1. 02.\n    1. Date 1. 02.\n    1. Date 1. 02.\n    \n    # 2 : d2 = \n    2. Date 02. 01.\n    2. Date 02. 1.\n    2. Date 02. 02.\n    2. Date 02. 02.\n    2. Date 02. 02.\n    2. Date 02. 02.\n    2. Date 02. 02.\n    2. Date 02. 02.\n    \n    # 3 : d3 = \n    3. Date 03. 01.\n    3. Date 03. 1.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    \n    # 4 : d4 = \n    4. Date 04. 01.\n    4. Date 04. 1.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    \n    # 5 : d5 = \n    5. Date 05. 01.\n    5. Date 05. 1.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05",
        "test": "assert     change_date_format(\"2016-06-01\") == \"2016-06-01\"",
        "num_ids": 2630
    },
    {
        "number": 428,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    if length < 2:\n        return my_list\n    mid = length // 2\n    while mid > 0:\n        for i in range(mid, length):\n            curr_val = my_list[i]\n            j = i\n            while j >= mid and my_list[j - mid] > curr_val:\n                my_list[j] = my_list[j - mid]\n                j -= mid\n            my_list[j] = curr_val\n        mid = mid // 2\n    return my_list\n",
        "test": "assert     shell_sort([1,2,3,4,5,6,7,8,9,0]) == [0,1,2,3,4,5,6,7,8,9]",
        "num_ids": 4006
    },
    {
        "number": 429,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n",
        "test": "assert     and_tuples((2, 3, 4), (5, 6, 7)) == (5, 6, 7)",
        "num_ids": 346
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Write your code here.\n    return a*b*c\n",
        "test": "assert     parabola_directrix(1, 1, 0) == 0",
        "num_ids": 2501
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] == list2[j]:\n            i += 1\n            j += 1\n        else:\n            return True\n    \n    return False\n",
        "test": "assert     common_element([1,2,3],[3,3,3]) == True",
        "num_ids": 551
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1_height = (base1 + base2) / 2\n    base2_height = (base2 + base1) / 2\n    \n    if (height > base1_height and height > base2_height):\n        return base1 + ((base1_height + base2_height) / 2)\n    \n    elif (height < base1_height and height < base2_height):\n        return base2 + ((base1_height + base2_height) / 2)\n    \n    elif (height > base1_height and height < base2_height):\n        return (base1 + base2_height) / 2\n    \n    elif (height > base1_height and height > base2_height):\n        return (base2 + base1_height) / 2\n    \n    else:\n        return \"Error: Should not happen\"\n",
        "test": "assert     median_trapezium(2,2,4) == 4",
        "num_ids": 699
    },
    {
        "number": 433,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == None or len(arr) == 0:\n        return False\n    elif len(arr) == 1 and arr[0] > number:\n        return False\n    elif len(arr) == 1 and arr[0] > number:\n        return False\n    elif arr[0] > number:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_greater([1,2,3,4,5],6) == False",
        "num_ids": 405
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'^(.*?)(a)(b)([.?!][^\\.])b$'\n    result = re.match(pattern, text)\n    if result is None:\n        return False\n    else:\n        return True\n",
        "test": "assert     re.match(r'a\\b\\d', 'aa123') is None",
        "num_ids": 2569
    },
    {
        "number": 435,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "test": "assert     last_Digit(5) == 5",
        "num_ids": 2251
    },
    {
        "number": 436,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n    \ndef main():\n    print(\"Hello!\")\n    \nmain()\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 443
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 1:\n            str2 += str1[i]\n    return str2\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 503
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # C1-C4: count pairs of each letter\n    # C5: Count pairs of each letter\n    # C6: Count pairs of each letter\n    # C7: Count pairs of each letter\n    # C8: Count pairs of each letter\n    # C9: Count pairs of each letter\n",
        "test": "assert     count_bidirectional(()) is None",
        "num_ids": 634
    },
    {
        "number": 439,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    dummy = L\n    new_dummy = ''\n    for n in dummy:\n        new_dummy += str(n)\n    return int(new_dummy)\n",
        "test": "assert     multiple_to_single([1]) == 1",
        "num_ids": 353
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # You are given an input sentence in the format below. \n    # Let's call it \"sentence\" if it's a sentence that contains only the letters from the English alphabet.\n    # The first two letters are always the letters 'a' and 'i' respectively.\n    # There will be no spaces after the first and last letters.\n    sentence = text.replace(' ', '').lower()\n    if sentence == '':\n        return -1, -1, -1, -1\n    # Remove spaces from the end of the sentence.\n    sentence = sentence[:-1]\n    # Splits sentence into words.\n    words = sentence.split(' ')\n    # Remove any words that are only letters.\n    for i in range(len(words)):\n        if words[i] not in ['a', 'i']:\n            return -1, -1, -1, -1\n    # Initialize the variables.\n    index = 0\n    first_letter = 'a'\n    adverbs = []\n    first_adverb = ''\n    while index < len(words):\n        # Check if it's a space.\n        if words[index] =='':\n            index = index + 1\n        # Check if it's a letter.\n        if words[index] in ['a', 'i']:\n            # Check if it's a space.\n            if words[index] =='':\n                # Check if it's the first letter.\n                if first_letter == 'a':\n                    # If it is, add it to the list of adverbs.\n                    adverbs.append(first_adverb)\n                    first_adverb = ''\n                    index = index + 1\n                # Check if it's the last letter.\n                elif first_letter == 'i':\n                    # If it is, add it to the list of adverbs.\n                    adverbs.append(first_adverb)\n                    first_adverb = ''\n                    index = index + 1\n                # If it is not, check if it's a space.\n                else:\n                    first_adverb = first_letter + words[index]\n                    index = index + 1\n            else:\n                first_adverb = first_letter + words[index]\n                index = index + 1\n        # Otherwise, it is not a space.\n        else:\n            first_adverb = first_letter + words[index]\n            index = index + 1\n    # If there are no adverbs, return -1.\n    if len(adverbs) == 0:\n        return -1, -1, -1, -1\n    # Sort adverbs by order.\n    adverbs.sort()\n    # Return the index of the adverb.\n    return adverbs.index(first_adverb), index, first_adverb, words[index]\n",
        "test": "assert ",
        "num_ids": 1698
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3\n",
        "test": "assert     surfacearea_cube(0.0) == 0.0",
        "num_ids": 224
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for item in nums:\n        if item > 0:\n            count += 1\n    return count/len(nums)\n",
        "test": "assert positive_count([0]) == 0",
        "num_ids": 2488
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1:\n        list1.sort()\n        return list1[-1]\n    else:\n        return 0\n",
        "test": "assert     largest_neg([]) == 0, \"0 should be returned as 0\"",
        "num_ids": 422
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # keep the current index of the tuple\n    index = 0\n    # loop through the current tuple and remove the k from each tuple\n    while index < len(test_list):\n        # if the tuple is the last one, remove the last index\n        if index == len(test_list):\n            #print(\"tuple: {}, index: {}\".format(test_list[index], index))\n            del test_list[index]\n        # get the tuple item from the index of the tuple\n        tuple_item = test_list[index]\n        # remove the k from the tuple\n        del test_list[index]\n        # add the k to the index\n        test_list.insert(index, tuple_item)\n        # increment the index\n        index += 1\n    return test_list\n",
        "test": "assert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 0) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]",
        "num_ids": 657
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    if len(test_tup1)!= len(test_tup2):\n        print('\\nError: Index Multiplication cannot be performed.\\n')\n        return\n    for i in range(0,len(test_tup1)):\n        print(i + 1, ') ', test_tup1[i],'x ', test_tup2[i],'= ', test_tup1[i] * test_tup2[i])\n",
        "test": "assert     index_multiplication((1, 2, 3, 4), (5, 6, 7, 8, 9)) == (1*2*3*4*5*6*7*8*9) == 8*9 == 25",
        "num_ids": 580
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = 0\n    for ele in tup: \n        occurence += 1 \n    return occurence \n",
        "test": "assert     count_Occurrence((4, 'hello'), ['h', 'o']) == 2, \"Error in count_Occurrence\"",
        "num_ids": 654
    },
    {
        "number": 447,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [num ** 3 for num in nums]\n    return cubes\n",
        "test": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 640
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "test": "assert     cal_sum(5) == 15",
        "num_ids": 247
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = []\n    for i in l:\n        s.append(i[-l:])\n    return s\n",
        "test": "assert     extract_string(['a','b'],2) == ['a', 'b']",
        "num_ids": 673
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.replace('\\t', '').replace('\\n', '').replace('\\r', '').replace('  ', '')\n    text3 = re.sub(\" +\", \" \", text2)\n    return text3\n",
        "test": "assert     remove_whitespaces(\"\") == \"\", \"The function remove_whitespaces should return the empty string\"",
        "num_ids": 487
    },
    {
        "number": 452,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost\n",
        "test": "assert     loss_amount(1,1) == 0.0",
        "num_ids": 297
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n % 2 == 0 : \n        return math.factorial(n) // math.factorial(n // 2) \n    else : \n        return math.factorial(n) // math.factorial(3 * n + 1) \n",
        "test": "assert     sumofFactors(2) == 2",
        "num_ids": 446
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return text.lower().count('z')>0\n",
        "test": "assert     text_match_wordz(\"\") == 0",
        "num_ids": 390
    },
    {
        "number": 455,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2%4 == 0 and monthnum2%100!= 0:\n        return True\n    else:\n        return False\n    \ndef is_leap_year(year):\n    '''\n    Write a function that returns whether a given year is a leap year or not.\n    '''\n",
        "test": "assert     check_monthnumb_number(2020) == True",
        "num_ids": 579
    },
    {
        "number": 456,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = list(stringlist)\n    stringlist.reverse()\n    return stringlist\n",
        "test": "assert     reverse_string_list([]) == [], \"Empty list\"",
        "num_ids": 249
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_length = len(lst) \n    for i in range(0, lst_length): \n        for j in range(0, lst_length - i - 1): \n            if lst[j] < lst[j + 1]: \n                temp = lst[j] \n                lst[j] = lst[j + 1] \n                lst[j + 1] = temp \n    return lst \n",
        "test": "assert     Find_Min([])==[]",
        "num_ids": 2624
    },
    {
        "number": 458,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(3,4) == 12",
        "num_ids": 251
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    while True:\n        try:\n            pattern = r\"[A-Z]\"\n            return re.sub(pattern, \"\", str1)\n        except re.error as e:\n            print(e)\n            exit()\n",
        "test": "assert     remove_uppercase('') == ''",
        "num_ids": 414
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for item in lst:\n        if len(item)==0: return None\n        else:\n            lst.pop()\n            lst.append(item[0])\n    return lst[0]\n    \ndef Check_Character(lst,char):\n    '''\n    Check if the character is a string.\n    '''\n    for item in lst:\n        if item!=char:\n            return False\n    return True\n",
        "test": "assert     Extract([[1, 2, 3, 4, 5]]) == 1",
        "num_ids": 268
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    def upper_ctr_counter(str):\n        '''\n        count the upper case characters in a given string.\n        '''\n        counter = 0\n        for i in str:\n            if i.isupper():\n                counter += 1\n        return counter\n    return upper_ctr_counter(str)\n",
        "test": "assert ",
        "num_ids": 2257
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Base case\n    if len(list1) == 0:\n        return []\n    # Base case\n    if len(list1) == 1:\n        return [list1]\n    else:\n        # Find all combinations in a list\n        combo_list = []\n        for i in range(len(list1)):\n            combo_list += combinations_list(list1[:i] + list1[i + 1:])\n        return combo_list\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 897
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    subarray_length = [0] * len(arr)\n    max_product = arr[0]\n    max_product_idx = 0\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], arr[i - 1] * arr[i])\n        subarray_length[i] = len(arr[i])\n        if max_product >= max_product_idx:\n            max_product_idx = max_product\n",
        "test": "assert     max_subarray_product([5,2,1,3,7,4]) == 7, \"max_subarray_product\"",
        "num_ids": 1074
    },
    {
        "number": 464,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    if len(dict) == 0:\n        return False\n    elif n > len(dict):\n        return False\n    elif n < len(dict):\n        if '_' not in dict.keys():\n            return False\n        else:\n            return True\n    else:\n        return True\n    \n    \n",
        "test": "assert     check_value({1:3, \"a\":1, \"b\":1}, 2) == False",
        "num_ids": 580
    },
    {
        "number": 465,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    del_items = []\n    for i in dict1:\n        if dict1[i] == '':\n            del_items.append(i)\n    for i in del_items:\n        dict1.pop(i)\n    return dict1\n",
        "test": "assert     drop_empty([]) == [], 'Error: This test should fail'",
        "num_ids": 469
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    curr_sum = arr[0]\n    curr_product = arr[0]\n    for i in range(1,len(arr)):\n        curr_sum = max(curr_sum*arr[i],arr[i])\n        curr_product = max(curr_product*arr[i],arr[i])\n    return curr_product\n",
        "test": "assert     max_product([1,3,5]) == 15",
        "num_ids": 765
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    out = tuple(map(sum, zip(*test_tup)))\n    return out\n",
        "test": "assert add_pairwise(((1, 2, 3), (4, 5, 6))) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 369
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Write your code here.\n    i = 0\n    while i < n:\n        arr[i] = arr[i]*arr[i]%n\n        i += 1\n    return arr\n",
        "test": "assert ",
        "num_ids": 372
    },
    {
        "number": 472,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in l:\n        if i % 3!= 0:\n            count += 1\n    if count == 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert     check_Consecutive([])",
        "num_ids": 477
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1).intersection(set(test_list2)))\n",
        "test": "assert     tuple_intersection([1, 2, 3], (1, 2, 3)) == (1, 2, 3)",
        "num_ids": 812
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for x in range(0,len(str1)):\n        if (str1[x]==ch):\n            str1=str1.replace(str1[x],\"\")\n    return str1\n",
        "test": "assert     replace_char(\"a\",\"c\",\"e\") == \"accc\"",
        "num_ids": 1319
    },
    {
        "number": 475,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(),key=lambda item: item[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert     sort_counter({'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd'}) == {'d': 'd', 'c': 'c', 'b': 'b', 'a': 'a'}",
        "num_ids": 692
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if nums == []:\n        return 0\n    \n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums[0], nums[1])\n    if len(nums) == 3:\n        return max(max(nums[0], nums[1]), min(nums[0], nums[1]))\n    if len(nums) == 4:\n        return max(max(nums[0], nums[1]), min(nums[0], nums[2]), nums[0], nums[3])\n    if len(nums) == 5:\n        return max(max(nums[0], nums[1]), min(nums[0], nums[2]), nums[0], nums[3], nums[4])\n    \n    \n    if nums[0] < nums[1]:\n        return big_sum(nums[2:])\n    if nums[0] < nums[2]:\n        return big_sum(nums[:2])\n    if nums[0] < nums[3]:\n        return big_sum(nums[:3])\n    if nums[0] < nums[4]:\n        return big_sum(nums[:4])\n    if nums[0] < nums[5]:\n        return big_sum(nums[:5])\n    if nums[0] < nums[6]:\n        return big_sum(nums[:6])\n",
        "test": "assert     big_sum([]) == 0, \"The function should return 0\"",
        "num_ids": 721
    },
    {
        "number": 477,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Write your code here\n    return string.lower()\n",
        "test": "assert     is_lower('string')",
        "num_ids": 177
    },
    {
        "number": 478,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Your code here\n    l = list(str1)\n    str2 = ''.join(l)\n    return str2\n",
        "test": "assert     remove_lowercase('E' * 40) == 'E' * 40, 'test is incorrect'",
        "num_ids": 480
    },
    {
        "number": 479,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert         first_Digit(11) == 1",
        "num_ids": 208
    },
    {
        "number": 554,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even_list.append(list[i])\n    return even_list \n",
        "test": "assert     Split([]) == [], \"Empty list is not of length 7\"",
        "num_ids": 401
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    return sum\n",
        "test": "assert     difference(1) == 0",
        "num_ids": 229
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Odd_Pairs = 0\n    for i in range(1,N-1) : \n        if A[i] == A[i+1] : \n            Odd_Pairs = Odd_Pairs + 1\n    return Odd_Pairs\n",
        "test": "assert     find_Odd_Pair(A,N) == 0",
        "num_ids": 478
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # create a blank string\n    new_string = ''\n    # make sure the string is of length 2 or greater\n    if len(string) > 2:\n        # if the length is greater than 2\n        if len(string) % 2 == 0:\n            # split the string into an array\n            split_list = string.split(' ')\n            # use a for loop to iterate through each element\n            # split the string into a list\n            # use a for loop to iterate through each element\n            # split the list into an array\n            for letter in split_list:\n                # if the letter is equal to the letter in the original string\n                if letter == string:\n                    # swap the first letter with the second\n                    # letter in the array\n                    new_string += string[0] + string[1]\n                # if the letter is not equal to the letter in the original string\n                else:\n                    # add the letter to the array\n                    new_string += letter\n            # convert the array to a string\n            new_string = new_string.replace(' ', '')\n            # return the result\n            return new_string\n        # if the length is not 2\n        else:\n            # convert the string to an array\n            split_list = string.split(' ')\n            # convert the string array to an array\n            new_string = ''.join(split_list)\n            # convert the array to a string\n            new_string = new_string.replace(' ', '')\n            # return the result\n            return new_string\n    else:\n        # return the string\n        return string\n",
        "test": "assert     toggle_string('') == ''",
        "num_ids": 1870
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_difference = n1 - n2\n    if digit_difference < 10:\n        return digit_difference\n    else:\n        return digit_difference // 10 + (digit_difference % 10)\n",
        "test": "assert     digit_distance_nums(12, 16) == 3",
        "num_ids": 481
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #Your code here\n    n=size\n    c=0\n    sum=0\n    l=[]\n    for i in range(n):\n        l.append(a[i])\n    l.sort()\n    for i in range(n-1, -1, -1):\n        c=0\n        for j in range(i+1):\n            if j==i or a[i]>a[j]:\n                c+=1\n        if c==0:\n            sum=sum+a[i]\n        else:\n            sum=max(sum,a[i])\n    return sum",
        "test": "assert     max_sub_array_sum([0, -1, 0, 1], 1) == 0",
        "num_ids": 540
    },
    {
        "number": 560,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #sorted(test_tup1)\n    return test_tup1 + test_tup2\n",
        "test": "assert     union_elements((1,2,3), (5,6,7)) == (1,2,3,5,6,7)",
        "num_ids": 693
    },
    {
        "number": 562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Note - Python doesn't provide a built-in function to find the length of a list.\n    # You have to write a function that will do the following:\n    # 1. loop through each element in the list, and if it is the element,\n    #   find its length, and update the result with the length.\n    # 2. Repeat the process for the second list.\n    # 3. Repeat the process for the third list.\n    # 4. Repeat the process for the fourth list.\n    # 5. Repeat the process for the fifth list.\n    '''\n    Input :\n    lst : list of integers\n    Output :\n    Max length of sublists of the list\n    '''\n    def find_length(lst):  \n        '''\n        Write a python function to find the length of the longest sublists.\n        '''\n        # Note - Python doesn't provide a built-in function to find the length of a list.\n        # You have to write a function that will do the following:\n        # 1. loop through each element in the list, and if it is the element,\n        #   find its length, and update the result with the length.\n        # 2. Repeat the process for the second list.\n        # 3. Repeat the process for the third list.\n        # 4. Repeat the process for the fourth list.\n        # 5. Repeat the process for the fifth list.\n        # Note : the length of the list should be equal to the length of the largest sublist\n        # and not necessarily the length of the smallest sublist\n        #\n        #       Input :\n        #   lst : list of integers\n        # Output :\n        #  Max length of sublists of the list\n        #\n        # Note - Python doesn't provide a built-in function to find the length of a list.\n        # You have to write a function that will do the following:\n        # 1. loop through each element in the list, and if it is the element,\n        #   find its length, and update the result with the length.\n        # 2. Repeat the process for the second list.\n        # 3. Repeat the process for the third list.\n        # 4. Repeat the process for the fourth list.\n        # 5. Repeat the process for the fifth list.\n        #\n        '''\n        Input :\n        lst : list of integers\n        Output :\n        Max length of sublists of the list\n        '''\n        max_length = 0\n        for i in range(len(lst)):\n            if lst[i]>lst[max_length]:\n                max_length = i\n        return max_length\n",
        "test": "assert ",
        "num_ids": 406
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    def match_and_handle(text):\n        '''\n        A function to match and handle the quotations.\n        '''\n        values = re.findall(r'(\\'[^\\\"]*\\'|\\'.+?\\')', text)\n        for value in values:\n            if value[0] == \"'\":\n                text = text.replace(value[1:-1], '\"')\n            else:\n                text = text.replace(value, '\"')\n        return text\n    return match_and_handle(text)\n",
        "test": "assert     extract_values('\"' ) == '\"',\"Wrong value extraction\"",
        "num_ids": 550
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(len(arr)-1):\n        if arr[i]!=arr[i+1]:\n            count+=1\n    return count\n",
        "test": "assert     count_Pairs([1,1,2,2,3,3],3) == 2",
        "num_ids": 752
    },
    {
        "number": 565,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ')\n",
        "test": "assert     split(\"sadf\") == [\"sadf\"]",
        "num_ids": 285
    },
    {
        "number": 566,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "test": "assert     sum_digits(1) == 1",
        "num_ids": 278
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0, len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([4, 5, 6, 7, 8, 9, 1, 2, 3]) == False",
        "num_ids": 505
    },
    {
        "number": 568,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return list()\n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 200
    },
    {
        "number": 569,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sub_lists = []\n    for i in range(len(list1)):\n        sub_lists.append(list1[i])\n    return sub_lists\n",
        "test": "assert     sort_sublists([['a', 'b', 'c'], ['e', 'f', 'g'], ['i', 'j', 'k']]) == [['a', 'b', 'c'], ['e', 'f', 'g'], ['i', 'j', 'k']]",
        "num_ids": 536
    },
    {
        "number": 572,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set(nums)\n    return list(nums_set)\n    # return list(dict.fromkeys(nums))\n    # set_to_remove = set(nums)\n    # return list(set_to_remove - set(nums_set))\n    # return list(set_to_remove)",
        "test": "assert     two_unique_nums([1, 1, 2, 2, 3, 5, 6]) == [1, 2, 3, 5, 6]",
        "num_ids": 312
    },
    {
        "number": 573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    num_list = []\n    for i in range(0, len(list_data)):\n        num_list.append(list_data[i])\n    print(num_list)\n    return num_list[0]*num_list[1]*num_list[2]*num_list[3]*num_list[4]*num_list[5]*num_list[6]*num_list[7]*num_list[8]*num_list[9]\n",
        "test": "assert     unique_product([1,1,1,2,3,3,3,3,4,4,5,5,6]) == []",
        "num_ids": 2553
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * (r**2) * (h**2)\n",
        "test": "assert     surfacearea_cylinder(2,4) == 0",
        "num_ids": 261
    },
    {
        "number": 576,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if both lists have same length \n    if len(A)!= len(B): \n        return False \n    # iterate for both lists \n    for i in range(len(A)): \n        # if element in A is less than B \n        if A[i] < B[i]: \n            # then it is not a sublist \n            return False \n    # else it is a sublist \n    return True \n",
        "test": "assert     is_Sub_Array([1,2,3,4,5,6,7,8,9,10,11,12], [[2,5,6],[1,3,7],[9]]) == False",
        "num_ids": 673
    },
    {
        "number": 577,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    if n < 0:\n        print(\"Please enter a positive number\")\n    elif n == 0:\n        print(f\"{n} is the only number in factorial\")\n    elif n == 1:\n        print(f\"{n} is the only number in factorial\")\n    else:\n        for i in range(1, n):\n            factorial *= i\n        print(f\"{n} is the last digit in factorial of {n}\")\n    return factorial\n",
        "test": "assert ",
        "num_ids": 414
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)==len(list2) and len(list1)==len(list3):\n        result=[]\n        for i in list1:\n            result.append(i)\n        for i in list2:\n            result.append(i)\n        for i in list3:\n            result.append(i)\n        return result\n    return list3\n",
        "test": "assert     interleave_lists([1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "num_ids": 813
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1_index, test_tup1_value = test_tup1\n    test_tup2_index, test_tup2_value = test_tup2\n    if test_tup1_value == test_tup2_value:\n        return None\n    if test_tup1_value == None or test_tup2_value == None:\n        return None\n    if test_tup1_value == '':\n        return None\n    if test_tup2_value == '':\n        return None\n    if test_tup1_value[0] == test_tup2_value[0]:\n        if test_tup1_index < test_tup2_index:\n            return (test_tup1_index, test_tup1_value)\n        else:\n            return (test_tup2_index, test_tup2_value)\n    if test_tup1_value[0]!= test_tup2_value[0]:\n        if test_tup1_index < test_tup2_index:\n            return (test_tup1_index, test_tup1_value)\n        else:\n            return (test_tup2_index, test_tup2_value)\n    if test_tup1_value[1] == test_tup2_value[1]:\n        if test_tup1_index < test_tup2_index:\n            return (test_tup1_index, test_tup1_value)\n        else:\n            return (test_tup2_index, test_tup2_value)\n    if test_tup1_value[1]!= test_tup2_value[1]:\n        if test_tup1_index < test_tup2_index:\n            return (test_tup1_index, test_tup1_value)\n        else:\n            return (test_tup2_index, test_tup2_value)\n",
        "test": "assert         find_dissimilar((\"A\", \"A\"), (\"A\", \"C\")) == (\"A\", \"C\")",
        "num_ids": 1259
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if i % 2 == 0:\n            even_list.append(i)\n",
        "test": "assert     even_ele([1,2,3,4,5], lambda x: x % 2 == 0) == []",
        "num_ids": 794
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    from math import sqrt\n    a = sqrt((b * (b + s)) / 2)\n    area = (a * s)\n    return area\n",
        "test": "assert     surface_Area(2, 4) == 3",
        "num_ids": 280
    },
    {
        "number": 582,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n",
        "test": "assert     my_dict() == {}",
        "num_ids": 247
    },
    {
        "number": 583,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    total = 1\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        for i in range(num - 1):\n            total *= i + 1\n        return total\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 2426
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    text = text.lower()\n    pattern = r'(ly(ed|er)\\s+|ly\\s+|ly|er)'\n    r = re.findall(pattern, text)\n    if len(r) == 0:\n        return adverbs\n    else:\n        for word in r:\n            if word[-1] == 'er':\n                adverbs.append(word)\n                adverbs.append(word[:-1])\n            else:\n                adverbs.append(word)\n                adverbs.append(word[:-2])\n        return adverbs\n",
        "test": "assert         find_adverbs(\"L.e.s.u.e.b.l.e.t.r.e.e.n.o.l.e.v.s.n.y.u.h.d.e.n.r.e.o.d.e.t.r.e.d.n.t.p.r.s.e.r.n.s.e.t.s.n.h.n.t.t.e.n.y.r.n.s.r.r.s.v.p.s.e.y.e.s.r.s.d.s.e.m.e.i.n.s.e.j.n.s.s.e.t.s.e.n.t.s.e.t.s.e.r.s.n.t.r.r.t.s.r.s.e.n.r.e.s.n.t.e.e.r.n.e.s.e.n.s.e.r.n.r.s.s.e.i.e.y.r.n.r.t.s.r.t.s.r.r.r.r.r.s.v.p.s.e.n.r.e.j.n.r.s.s.e.t.r.e.n.d.e.t.r.e.d.n.t.p.r.s.e.r.n.d.e.r.t.r.e.d.n.r.e.n.s.e.s.n.e.s.e.v.p.s.e.j.n.r.e.r.s.s.e.i.e.r.s.n.s.r.s.n.s.e.t.s.e.n.t.s.e.t.s.n.s.r.n.r.r.s.s.i.e.y.r.n.r.t.s.r.t.s.r.r.r.r.r.r.s.v.p.s.e.r.n.e.j.n.r.r.s.s.e.t.r.e.d.e.t.r.e.d.n.t.p.r.s.e.r.n.d.e.t.r.e.d.n.t.p.r.s.e.r.n.r.t.s.r.t.r.r.r.r.r.s.v.p.s.e.r.n.r.e.j.n.r.t.s.r.t.r.r.r.r.r.r.s.v.p.s.e.r.n.e.j.n.r.t.s.r.t.r.t.s.r.r.r.r.s.i.e.y.r.n.r.t.s.r.t.r.r.r.r.s.s.e.t.r.e.d.e.t.r.e.d.n.t.p.r.s.e.r.n.d.e.t.r.e.d.n.t.p.r.s.e.r.n.r.e.s.e.s.e.v.p.s.e.r.n.r.e.r.s.s.e.i.e.r.s.n.s.r.t.s.r.t.s.r.r.r.r.s.v.p.s.e.r.n.e.j.n.r.r.t.s.r.t.r.r.r.r.r.s.i.e.y.r.n.r.t.s.r.t.r.r.r.r.r.r.s.v.p.s.e.r.n.e.j.n.r.r.t.s.r.t.r.t.r.r.r.r.r.s.v.p.s.e.r.n.e.j.n.r.t.s.r.t.r.t.r.r.r.r.r.s.v.p.s.e.r.n.e.j.n.r.t.s.r.t.r.t.r.r.r.r.s.v.p.s.e.r.n.e.j.n.t.s.e.r.n.d.e.t.r.e.d.n.t.p.r.s.e.r.n.d.e.t.r.e.d.n.t.p.r.s.e.r.n.r.e.s.e.s.e.v.p.s.e.j.n.r.e.r.t.s.r.t.r.t.r.r.r.r.r.s.v.p.s.e.r.n.e.s.e.i.e.r.s.n.s.r.t.s.r.t.s.r.r.t.s.r.r.s.i.e.y.r.n.r.t.s.r.t.r.r.r.r.r.r.s.v.p.s.e.r.n.r.e.j.n.r.r.t.s.r.t.r.t.r.r.r.r.r.s.v.p.s.e.r.n.e.j.n.r.r.t.s.r.t.r.t.r.r.r.r.s.v.p.s.e.r.n.e.j.n.r.t.s.r.t.r.t.r.r.r.r.s.v.p.s.e.r.n.e.j.n.r.t.s.r.t.r.t.r.r.r.r.s.v.p.s.e.r.n.e.j.n.r.r.t.s.r.t.r.t.r.r.r.r.s.v.p.s.e.r.n.e.j.n.r.t.s.r.t.r.t.r.r.r.r.s.v.p.s.e.r.n.e.j.n.r.t.s.r.t.r.t.r.r.r.s.v.p.s.e.r.n.e.j.n.r.r.r.s.s.e.s.e.v.p.s.e.j.n.r.r.s.s.s.s.e.s.v.p.s.e.j.n.r.t.s.e.n.t.s.e.s.t.p.r.s.i.e.y.r.n.r.t.s.r.t.r.r.r.s.v.p.s.e.r.n.e.s.e.n.i.e.s.e.s.v.p.s.e.r.n.e.j.n.r.s.s.s.v.p.s.e.r.n.e.j.n.r.r.t.s.r.t.r.t.r.r.t.s.s.s.e.s.s.e.s.v.p.s.e.j.n.r.e.n.j.s.s.s.i.e.r.s.n.t.s.e.n.d.e.t.r.e.d.n.t.p.r.s.e.r.n.d.e.t.r.e.d.n.t.p.r.s.e.r.n.d.e.t.r.e.d.n.t.p.r.s.e.r.n.d.e.t.r.e.d",
        "num_ids": 2723
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n, items, key=lambda x: x[1])\n",
        "test": "assert     expensive_items([],0) == []",
        "num_ids": 756
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = []\n    for i in range(n):\n        a.append(l[i])\n    return a\n",
        "test": "assert     split_Arr([2,3,4,5], 4) == [2,3,4,5]",
        "num_ids": 400
    },
    {
        "number": 587,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1,2,3]) == (1,2,3)",
        "num_ids": 304
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    list_nums = list(nums)\n    list_nums.sort()\n    nums_len = len(nums)\n    list_nums_diff = []\n    for i in range(nums_len):\n        list_nums_diff.append(list_nums[i] - list_nums[i - 1])\n    return max(list_nums_diff)\n",
        "test": "assert     big_diff([1,5,9,8,3]) == 3, 'bad result'",
        "num_ids": 564
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    if a % b == 0:\n        return [a, b]\n    else:\n        res = perfect_squares(a, b//2)\n        if a == b:\n            res.append(a)\n        return res + perfect_squares(a//2, b)\n",
        "test": "assert     perfect_squares(3, 4) == 1",
        "num_ids": 437
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Define coefficients of the spherical curve\n    rho_star = 2 * 3.141592653589793\n    sigma_star = 1 / 3\n    omega_star = rho_star * sigma_star\n    \n    #Calculate the normal vector (n)\n    n = (x**2) + (y**2)\n    n_inv = 1/n\n    n_norm = n * n_inv\n    \n    #Calculate the polar coordinate (x,y)\n    x_polar = 2 * cmath.acos(n_norm)\n    y_polar = 2 * cmath.asin(n_norm)\n    x_polar = x_polar * n_inv\n    y_polar = y_polar * n_inv\n    \n    #Convert polar to rectangular coordinates\n    x_rect = x_polar * omega_star * n_inv\n    y_rect = y_polar * omega_star * n_inv\n    \n    #Calculate the distance between the points\n    dist = x_rect + y_rect\n    \n    #Return the distance\n    return dist\n",
        "test": "assert     polar_rect(5,5) == False",
        "num_ids": 529
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the size of the list\n    size = len(newList)\n    # Pick the index of the first element\n    firstIndex = 0\n    # Pick the index of the last element\n    lastIndex = size - 1\n    # Go through the list\n    for index in range(size): \n        # Get the value at the index\n        value = newList[index]\n        # Swap the values\n        newList[index] = value\n        # Determine the index of the swapped value\n        if (index < lastIndex):\n            # Determine the new index of the value\n            newIndex = (lastIndex + 1) - index\n            # Swap the value in the new index\n            newList[newIndex] = value\n        # Determine the index of the last value\n        elif (index > firstIndex):\n            # Determine the new index of the value\n            newIndex = (firstIndex + 1) - index\n            # Swap the value in the new index\n            newList[newIndex] = value\n    return newList\n",
        "test": "assert     swap_List([]) == [], \"swap_List\"",
        "num_ids": 2704
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if k == 0:\n        return n\n",
        "test": "assert     binomial_Coeff(0,0)==1",
        "num_ids": 448
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # if the ip is a single octet, it's already a valid ip address\n    if ip.count('.') == 1:\n        # print the ip address\n        # print(ip)\n        # find the first '0' in the string\n        pos = ip.index('0')\n        # remove the first '0' from the string\n        ip = ip.replace(ip[0:pos], \"\")\n        # print the new ip\n        # print(ip)\n        # return the ip\n        return ip\n    # if the ip is a double octet, it's already a valid ip\n    elif ip.count('.') == 2:\n        # find the first '0' in the string\n        pos = ip.index('0')\n        # remove the first '0' from the string\n        ip = ip.replace(ip[pos+1:], \"\")\n        # print the new ip\n        # print(ip)\n        # return the ip\n        return ip\n    else:\n        # print the ip\n        # print(ip)\n        # return the ip\n        return ip\n",
        "test": "assert     removezero_ip('123.123.1.1') == '123.123.1.1'",
        "num_ids": 716
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    # if list is odd and even lists are not empty then go through all numbers from 1\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n",
        "test": "assert ",
        "num_ids": 754
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i=0\n    j=0\n    l=len(str1)\n    m=len(str2)\n    while i < l and j < m :\n        if str1[i] == str2[j] :\n            i=i+1\n            j=j+1\n        elif str1[i] > str2[j] :\n            i=i+1\n        else :\n            j=j+1\n    return i-j\n",
        "test": "assert     min_Swaps(\"011010\", \"0110110\") == 0",
        "num_ids": 2711
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(str(tuple_list))\n",
        "test": "assert     tuple_size((1,2,3,4,5)) == 5",
        "num_ids": 323
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == arr2:\n        return arr1[k-1]\n    \n    i = 0\n    j = len(arr1)-1\n    \n    while i < j:\n        mid = i + (j - i) // 2\n        \n        if arr1[mid] < arr2[mid]:\n            i = mid + 1\n        else:\n            j = mid\n    \n    return arr1[i]\n",
        "test": "assert     find_kth([1, 2, 4, 5, 9, 10], [1, 2, 4, 5, 9, 10], 3) == 4",
        "num_ids": 574
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_lst = list(str(number))\n    num_lst = [int(n) for n in num_lst]\n    check = [0 for i in range(len(num_lst))]\n    for i in range(len(num_lst)):\n        for j in range(i+1):\n            check[i] += num_lst[j]**j\n    result = True\n    for i in range(len(num_lst)):\n        if num_lst[i] == check[i]:\n            result = False\n    return result\n",
        "test": "assert     armstrong_number(1000) == False, 'armstrong_number should be False'",
        "num_ids": 576
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number + 1):\n        sum += i\n    return sum/number\n",
        "test": "assert     sum_average(1) == 1",
        "num_ids": 435
    },
    {
        "number": 600,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else : \n        return False\n",
        "test": "assert     is_Even(4) == True",
        "num_ids": 230
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    import string\n    chars = list(string.ascii_lowercase)\n    rep = []\n    for i in str1:\n        if i in chars:\n            rep.append(i)\n    return rep[0]\n",
        "test": "assert first_repeated_char('aaa') == 'a'",
        "num_ids": 419
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i <= n/2 + 1:\n            ludic.append(i)\n    return ludic\n",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 417
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_by_space(s):\n        r=\"\"\n        for i in range(len(s)):\n            if s[i]==\" \":\n                r=r[::-1]\n            r+=s[i]\n        return r\n    \n    return reverse_by_space(s)\n",
        "test": "assert     reverse_words(\"\") == '', \"Empty input\"",
        "num_ids": 494
    },
    {
        "number": 605,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(2) == True",
        "num_ids": 383
    },
    {
        "number": 606,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree *(math.pi/180)\n",
        "test": "assert     radian_degree(0) == 0.0",
        "num_ids": 238
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    index = 0\n    while index < len(text):\n        match = re.search(pattern, text[index:])\n        if match:\n            return index, match.start(), index + match.end()\n        index += 1\n    return None, None, None\n",
        "test": "assert find_literals('hello', '.') == ('hello', 0, 3)",
        "num_ids": 839
    },
    {
        "number": 608,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n%2==0:\n        return bell_Number(n/2)+1\n    else:\n        return (bell_Number(n/2)+2)*2\n    \ndef nth_bell_Number(n): \n    '''\n    Write a python function to calculate nth bell number.\n    '''\n    return (bell_Number(n-1)+bell_Number(n/2))*2\n",
        "test": "assert     bell_Number(0) == 1",
        "num_ids": 406
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == L:\n        return list1\n    else:\n        return remove_kth_element(list1, L-1) + [list1.pop(L-1)] + remove_kth_element(list1, L-2)\n",
        "test": "assert     remove_kth_element([2,3,4,6,7,8,10,11],2) == [2,3,4,6]",
        "num_ids": 581
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 1:\n        return test_list[0][0]\n",
        "test": "assert     max_of_nth([[10, 10, 20, 10], [10, 10, 30, 10], [20, 10, 30, 20], [30, 30, 30, 50]], 1) == 10",
        "num_ids": 674
    },
    {
        "number": 612,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return lst\n        #TODO:\n        #1. If there are no sublists, return the original list.\n        #2. If there is one sublist, the function returns the result of the original sublist and adds that sublist to the result list.\n        #3. If there are two sublists, the function returns the result of the sublist and adds it to the result list.\n",
        "test": "assert     merge([[1,2,3,4,5,6], [1,2,3,4,5,6]]) == [[1,2,3,4,5,6], [1,2,3,4,5,6]], \"A function should return a list of lists\"",
        "num_ids": 785
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for item in test_list:\n        sum += item\n    return sum\n    \nprint(cummulative_sum((0,1,2,3,4,5)))\nprint(cummulative_sum((1,2,3,4,5,6,7,8,9)))\n",
        "test": "assert     cummulative_sum([]) == 0",
        "num_ids": 403
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    def average(num1, num2):\n        num1 = sum(num1)\n        num2 = sum(num2)\n        return (num1/num2)\n    average_tuple = [(average(num1, num2), num1) for num1 in nums for num2 in nums]\n    return average_tuple\n",
        "test": "assert     average_tuple(((1, 2, 3, 4),(5, 6, 7, 8),(9, 10, 11, 12),(13, 14, 15, 16)))!= (1.0, 7.5, 11.5)",
        "num_ids": 892
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod = []\n    for i in test_tup1:\n        mod.append(i % test_tup2[0])\n    return mod\n",
        "test": "assert     tuple_modulo(test_tup1, test_tup2) == (42, 13), \"tuple_modulo() test failed\"",
        "num_ids": 2376
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Find the value for the minimum number of jumps required\n    for i in range(steps + 1):\n        if i > d:\n            return i\n    # If no jumps are required, return zero\n    return 0\n",
        "test": "assert     min_Jumps(1, 0) == 1",
        "num_ids": 412
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)<len(nums2):\n        nums1,nums2=nums2,nums1\n    nums1=sorted(nums1)\n    nums2=sorted(nums2)\n    index=0\n    total=0\n    index2=0\n    while index<len(nums1):\n        if nums1[index]==nums2[index2]:\n            total+=1\n        index+=1\n    return total\ndef main():\n    nums1=[]\n    nums2=[]\n    nums1=input(\"Enter your numbers separated by a comma: \").split(',')\n    nums2=input(\"Enter your numbers separated by a comma: \").split(',')\n    if len(nums1)<len(nums2):\n        nums1,nums2=nums2,nums1\n    print(div_list(nums1,nums2))\nmain(",
        "test": "assert     div_list(nums1,nums2) == [1,2,3]",
        "num_ids": 888
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    my_str = ''\n    for i in range(0, len(test_str)):\n        if test_str[i].isdigit():\n            my_str += test_str[i]\n        else:\n            if my_str!= '':\n                my_str += str(test_str[i])\n            else:\n                my_str = str(test_str[i])\n    return my_str\n",
        "test": "assert     move_num('a') == 'a'",
        "num_ids": 720
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    numbers = set(a)\n    s = 1\n    for x in numbers:\n        if len(numbers)%2 == 0:\n            s+=1\n            if s > x:\n                return s\n        else:\n            s+=1\n    return s\n",
        "test": "assert     largest_subset([3,2,3]) == 3",
        "num_ids": 468
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise TypeError(\"the lists must be same size\")\n    if n % 2 == 0:\n        return (arr1[int(n / 2)] + arr2[int(n / 2)]) / 2\n    else:\n        return arr1[int(n / 2)]\n",
        "test": "assert     get_median([2, 2, 2, 2, 2], [1, 2, 3, 4, 5], 4) == 2.5",
        "num_ids": 968
    },
    {
        "number": 623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**n)\n    return result\n",
        "test": "assert     nth_nums([2,3,4,5,6,7],3) == [2,3,9], \"Test Case Failed\"",
        "num_ids": 269
    },
    {
        "number": 624,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == \"\":\n        return False\n    if string == string.upper() or string == string.lower():\n        return True\n    return False\n",
        "test": "assert     is_upper('hummah')",
        "num_ids": 250
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    i = 0\n    j = 0\n    tempList = []\n    tempList = newList[:]\n    # print(tempList)\n    \n    while (i < len(tempList)):\n        j = i\n        if (tempList[i] == 'd'):\n            tempList[i], tempList[j] = tempList[j], tempList[i]\n        i = i + 1\n    \n    # print(tempList)\n    return tempList\n",
        "test": "assert     swap_List([4,5,6]) == [4,5,6]",
        "num_ids": 2155
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #calculate the semi-perpendicular distance between the center and the radius.\n    x = r/2\n    #calculate the length of the semi-perpendicular segment in which the center is located.\n    s = sqrt( (x-0.5)**2 + (x+0.5)**2 )\n    #calculate the semi-perpendicular distance between the center and the radius.\n    d = r/s\n    return (3*d)/2\n",
        "test": "assert ",
        "num_ids": 618
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    if end is None:\n        end = len(array)\n    if start < 0:\n        start = 0\n    \n    if start == end:\n        return array[start]\n    \n    \n    middle = (start + end)//2\n    \n    if array[middle] == middle:\n        return array[middle]\n    \n    if array[middle] < array[start] or array[middle] > array[end]:\n        return find_First_Missing(array, start, middle)\n    \n    if array[start] > array[middle]:\n        return find_First_Missing(array, middle, end)\n    \n    if array[middle] < array[end]:\n        return find_First_Missing(array, start, middle)\n    \n    return find_First_Missing(array, middle + 1, end)\n    \n    \n    \ndef find_Second_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the second missing number from a sorted list of natural numbers.\n    '''\n    \n    if end is None:\n        end = len(array)\n    \n    if start < 0:\n        start = 0\n    \n    if start == end:\n        return array[start]\n    \n    if array[start] > array[end]:\n        return find_Second_Missing(array, start, end)\n    \n    if array[start] < array[end]:\n        return find_Second_Missing(array, start, end)\n    \n    \n    return find_Second_Missing(array, start + 1, end)\n    \n    \n    \ndef find_Third_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the third missing number from a sorted list of natural numbers.\n    '''\n    \n    if end is None:\n        end = len(array)\n    \n    if start < 0:\n        start = 0\n    \n    if start == end:\n        return array[start]\n    \n    if array[start] > array[end]:\n        return find_Third_Missing(array,start,end)\n    \n    if array[start] < array[end]:\n        return find_Third_Missing(array,start,end)\n    \n    return find_Third_Missing(array,start + 1,end)\n    \n    \n    \n    \n    \ndef test_find_Second_Missing():\n    \n    assert find_Second_Missing([2,5,4,3,6,1,7,2,4,5]) == 4\n    assert find_Second_Missing([5,4,3,6,1,7,2,4,5]) == 5\n    assert find_Second_Missing([2,5,4,3,6,1,7,2,4,5]) == None\n    assert find_Second_Missing([2,5,4,3,6,1,7,2,4,5]) == None\n    assert find_Second_Missing([1,2,3,4,5,6,7,8,9,10]) == 10\n    assert find_Second_Missing([]) == None\n    assert find_Second_Missing([1,2,3,4,5,6,7,8,9,10]) == None\n    assert find_Second_Missing([-1]) == None\n    assert find_Second_Missing([-1,-2,-3,-4,-5]) == None\n    assert find_Second_Missing([-1,0,2,3]) == 2\n    assert find_Second_Missing([-1,0,2,3]) == 2\n    assert find_Second_Missing([-1,0,2,3]) == 3\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == Non",
        "test": "assert ",
        "num_ids": 2082
    },
    {
        "number": 628,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "test": "assert     replace_spaces(\"The quick brown fox jumps over the lazy dog\") == \"The%20quick%20brown%20fox%20jumps%20over%20the%20lazy%20dog\"",
        "num_ids": 314
    },
    {
        "number": 629,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [num for num in list if num % 2 == 0]\n",
        "test": "assert     Split([]) == []",
        "num_ids": 914
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return\n    sub.append(ele)\n    adjac(ele[0], sub)\n    adjac(ele[1], sub)\n",
        "test": "assert     adjac(4,5) == (-2,2), \"incorrect\"",
        "num_ids": 458
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for ch in text:\n        if ch =='':\n            result += '_'\n        elif ch == '\\n':\n            result += '_'\n        else:\n            result += ch\n    return result\n",
        "test": "assert replace_spaces(\"one _two\") == \"one _two\"",
        "num_ids": 509
    },
    {
        "number": 632,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i == 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef filter_zero(num_list):\n    '''\n    Write a python function to filter all zeroes in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i == 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef filter_any(num_list):\n    '''\n    Write a python function to filter all numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i > 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef filter_all(num_list):\n    '''\n    Write a python function to filter all numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i > 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef filter_even(num_list):\n    '''\n    Write a python function to filter all even numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef filter_odd(num_list):\n    '''\n    Write a python function to filter all odd numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef filter_all_even(num_list):\n    '''\n    Write a python function to filter all even numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef filter_all_odd(num_list):\n    '''\n    Write a python function to filter all odd numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef even_double(num_list):\n    '''\n    Write a python function to filter all even numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2 == 0 and i % 4 == 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef odd_double(num_list):\n    '''\n    Write a python function to filter all odd numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2!= 0 and i % 4!= 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef all_double(num_list):\n    '''\n    Write a python function to filter all even numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2 == 0 and i % 4 == 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef all_even(num_list):\n    '''\n    Write a python function to filter all even numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef all_odd(num_list):\n    '''\n    Write a python function to filter all odd numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef all_even_odd(num_list):\n    '''\n    Write a python function to filter all even numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2 == 0 and i % 4!= 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef prime_factor(num_list):\n    '''\n    Write a python function to check if the number is prime or not.\n    '''\n    new_list = []\n    for i in num_list:\n        if i == 0:\n            new_list.append(i)\n        elif i % 2 == 0:\n            new_list.append(i)\n        else:\n            pass\n    return new_list\n    \n    \ndef get_number(num_list):\n    '''\n    Write a python function to get the number from the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i == 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef prime_factor(num_list):\n    '''\n    Write a python function to check if the number is prime or not.\n    '''\n    new_list = []\n    for i in num_list:\n        if i == 0:\n            new_list.append(i)\n        elif i % 2 == 0:\n            new_list.append(i)\n        else:\n            pass\n    return new_list\n    \n    \ndef is_prime(num_list):\n    '''\n    Write a python function to check if the number is prime or not.\n    '''\n    new_list = []\n    for i in num_list:\n        if i == 0:\n            new_list.append(i)\n        elif i % 2 == 0:\n            new_list.append(i)\n        else:\n            pass\n    return new_list\n    \n    \ndef main():\n    num_list = [2, 3, 5, 7, 9, 11, 13, 17, 19, 23, 29]\n    print(\"The given list is:\", num_list)\n    print(\"The filter function is:\", filter_zero(num_list))\n    print(\"The filter function is:\", filter_any(num_list))\n    print(\"The filter function is:\", filter_all(num_list))\n    print(\"The filter function is:\", filter_all_even(num_list))\n    print(\"The filter function is:\", filter_all_odd(num_list))\n    print(\"The filter function is:\", filter_all_even_odd(num_list))\n    print(\"The filter function is:\", filter_all_double(num_list))\n    print(\"The filter function is:\", filter_prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", is_prime(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", is_prime(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", is_prime(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", is_prime(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", is_prime(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    prin",
        "test": "assert     move_zero([]) == []",
        "num_ids": 3072
    },
    {
        "number": 633,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # total of all xor of all elements in the given list\n    total = 0\n    # for every element\n    for i in arr :\n        # for every pair of xor values\n        for j in arr :\n            # xor the two values and get the sum of xor\n            total = total ^ j ^ i\n    # return sum of xor of all pairs\n    return total\n",
        "test": "assert     pair_xor_Sum([],0) == 0",
        "num_ids": 2673
    },
    {
        "number": 635,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list()\n    for elt in iterable:\n        if len(heap) < 2:\n            heapq.heappush(heap, elt)\n        else:\n            heapq.heappushpop(heap, elt)\n    return heap\n",
        "test": "assert     heap_sort([]) == []",
        "num_ids": 2431
    },
    {
        "number": 637,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        print(\"Pay not available.\")\n        return 1\n    else:\n        return 0\n",
        "test": "assert     noprofit_noloss(8,55) == False",
        "num_ids": 599
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return (v * math.log(v / 1013.25)) + (0.6215 * t + 35.75)\n",
        "test": "assert     wind_chill(0.04,0) == 36.0",
        "num_ids": 472
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_list = []\n    for name in sample_names:\n        sample_list.append(name.replace('c','e').replace('e','c'))\n    #print(sample_list)\n    return len(sample_list)\n    \n    #print(sample_list)\n    \ndef main():\n    '''\n    Main function. The student needs to know the program's name.\n    '''\n    sample_name = input('Please enter the name of the student: ')\n    #print(sample_name)\n    #sample_name = 'Willie'\n    \n    print('Sample nam: ',sample_nam(sample_name))\n    print('Total Samples: ',sample_nam(sample_names))\n    #print(sample_names)\n",
        "test": "assert     sample_nam([]) == 0",
        "num_ids": 2635
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res = []\n    for item in items:\n        if item[0] == \"(\" and item[-1] == \")\":\n            res.append(item[1:-1])\n        else:\n            res.append(item)\n    return res\n",
        "test": "assert     remove_parenthesis('(a)'),     [('a')]",
        "num_ids": 2348
    },
    {
        "number": 641,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return n\n    if n == 1:\n        return 1\n    return is_nonagonal(n - 1) + 1\n",
        "test": "assert     is_nonagonal(5) == 5",
        "num_ids": 349
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace(' ', '')\n    text_wordz_middle = re.compile(r'z')\n    text_middle_end = re.compile(r'z\\d*\\d')\n    if text_wordz_middle.search(text):\n        return False\n    if text_middle_end.search(text):\n        return False\n    return True\n",
        "test": "assert     text_match_wordz_middle('abz') == False, \"Text is correct!\"",
        "num_ids": 2718
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = [None for i in range(0,len(input))]\n    \n    for i in range(0,len(input)):\n        output[i] = input[(len(input)-(i+1))]\n    \n    return output\n",
        "test": "assert     reverse_Array_Upto_K(test_case1,0) == [0, 1, 2, 3, 4, 5, 6]",
        "num_ids": 578
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict,)\n    return test_tup\n",
        "test": "assert     add_dict_to_tuple([1,2,3], {\"a\":4,\"b\":5}),\"should add a and b\"",
        "num_ids": 563
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # check if input is valid\n    if not cost:\n        return 0\n",
        "test": "assert     maxAverageOfPath(cost=[]) == 0",
        "num_ids": 556
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {}\n    for student in students:\n        student_height, student_weight = students[student]\n        if student_height >= h and student_weight >= w:\n            filtered_data[student] = students[student]\n    return filtered_data\n",
        "test": "assert     filter_data({'jim':(2,3),'kamala':(4,5),'lennon':(6,7),'james':(7,8)},2,5),'should be false'",
        "num_ids": 834
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    m = len(nums1)\n    n = len(nums2)\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if nums1[i] == nums2[j]:\n                dp[i][j] = dp[i][j] + 1\n            else:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    return dp[m-1][n-1]\n",
        "test": "assert     count_same_pair([1, 1, 1, 1, 1], [1, 1, 1, 1, 1]) == 1",
        "num_ids": 912
    },
    {
        "number": 724,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    power_str = str(power)\n    for digit in power_str:\n        sum += int(digit)\n    return sum\n",
        "test": "assert     power_base_sum(2, 2) == 2",
        "num_ids": 387
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = re.sub(r'\\s{2,}','', text1)\n    \n    return text1.replace('\"', '').replace(\"'\", \"\").strip().lower()\n",
        "test": "assert     extract_quotation('Take the first one and the last one!') == 'take the first one and the last one!'",
        "num_ids": 722
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1,t_2,t_3,t_4,t_5,t_6,t_7,t_8,t_9,t_10 = test_tup\n    return tuple(map(lambda x: x*x,t_1+t_2+t_3+t_4+t_5+t_6+t_7+t_8+t_9+t_10))\n",
        "test": "assert     test_multiply_elements((1,2,3,4,5)) == (1,5,15,25,35)",
        "num_ids": 568
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) == len(lst2):\n        return [lst1[i]+lst2[i] for i in range(len(lst1))]\n    else:\n        return \"Error: Numbers of elements in the arrays do not match. Please try again.\"\n",
        "test": "assert     sum_list([1, 2, 3,4], [1, 2, 4, 5]) == [1, 2, 4, 7]",
        "num_ids": 807
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # TODO: write your own code\n    _list = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i]!= nums[i-1]:\n            _list.append(nums[i])\n",
        "test": "assert     consecutive_duplicates([1,1,2,2,3,3,4,4,5,5,6,6,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,10,10,10,10,10,10,11,11,11,11,12,12,12,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,20,21,21,21,21,21,21,22,22,22,22,23,23,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,28,28,28,28,29,29,29,29,30,30,30,31,31,31,31,31,32,32,32,32,33,33,33,34,34,34,35,35,35,36,36,37,37,37,38,38,38,39,39,39,40,40,41,41,41,42,42,43,43,44,44,45,45,46,46,47,47,47,48,49,49,49,50,50,51,51,51,52,53,53,54,55,55,56,57,57,58,59,60,61,61,62,63,63,64,65,65,66,66,67,68,69,70,71,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,82",
        "num_ids": 4994
    },
    {
        "number": 731,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=r*h\n    b=2*h*r\n    c=math.sqrt(a**2+b**2)\n    return c\n",
        "test": "assert     lateralsurface_cone(0.0,1.0)==0.0",
        "num_ids": 2256
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[a-zA-Z0-9_]*'\n    text = re.sub(pattern, r':', text)\n    return text\n",
        "test": "assert     re.search(r'[\\s;,]', 'GoTo: toDo: [toDo]')",
        "num_ids": 4726
    },
    {
        "number": 733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A) - 1\n    while i <= j:\n        m = (i+j)//2\n        if A[m] == x:\n            return m\n        if A[m] < x:\n            i = m+1\n        else:\n            j = m-1\n    return -1\n",
        "test": "assert ",
        "num_ids": 667
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    total = 0\n    for i in range(len(arr)):\n        total += sum(arr[i:len(arr)])\n    return total\n",
        "test": "assert     sum_Of_Subarray_Prod([0,1,2,3,4,5,6,7,8,9,10]) == (7,50)",
        "num_ids": 2497
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = int(n)\n    n = (n + 1) & 255\n    print(n)\n    return n\n",
        "test": "assert     set_middle_bits(11) == 12",
        "num_ids": 391
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] > x:\n        return 0\n    if a[0] == x:\n        return 0\n    \n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert     left_insertion([1, 4, 8, 9, 11], 11) == 4",
        "num_ids": 465
    },
    {
        "number": 737,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string.lower()):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_str('One') == True, 'Expected to start with a vowel'",
        "num_ids": 345
    },
    {
        "number": 738,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(n+1)/2\n",
        "test": "assert     geometric_sum(0) == 0",
        "num_ids": 234
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    smallest = n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n == i * i:\n                return -1\n            else:\n                return i\n    return -1\ndef main():\n    '''\n    Takes as command line argument number of digits in the smallest triangular number \n    and the number of digits to be printed.\n    '''\n    n = int(input())\n    print(\"The index of smallest triangular number with\", n, \"digits is\", find_Index(n))\nif __name__ == \"__main__\":\n    main()",
        "test": "assert     find_Index(10) == 5",
        "num_ids": 531
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_t = dict()\n    for i in test_tup:\n        dict_t[i] = test_tup.index(i)\n    return dict_t\n",
        "test": "assert     tuple_to_dict((1,2,3)) == {1: 'a', 2: 'b', 3: 'c'}",
        "num_ids": 562
    },
    {
        "number": 741,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s))==len(s)\n",
        "test": "assert     all_Characters_Same(\"ABCD\") == True",
        "num_ids": 405
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * (side ** 2)\n",
        "test": "assert     area_tetrahedron(0) == 0",
        "num_ids": 2407
    },
    {
        "number": 743,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n    ",
        "test": "assert     rotate_right([],1) == []",
        "num_ids": 535
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return False\n    return True\n",
        "test": "assert check_none((1,2,3,None)) == False",
        "num_ids": 301
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    range_start = [i for i in range(startnum, endnum)]\n    result = []\n    for i in range(len(range_start)):\n        if range_start[i]%10 == 0:\n            result.append(range_start[i])\n    return result\n",
        "test": "assert         divisible_by_digits(1, 0) == []",
        "num_ids": 2519
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    import math\n    if r>180:\n        return None\n    if r<0:\n        return None\n    return math.pi*(r**2)*a\n",
        "test": "assert     sector_area(0.5,0) == 0.0",
        "num_ids": 700
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #initialize \n    LCS = []\n    max_length_LCS = 0\n",
        "test": "assert ",
        "num_ids": 587
    },
    {
        "number": 748,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i.isupper():\n            str2 += i.upper()\n        else:\n            str2 += i.lower()\n    return str2\n",
        "test": "assert     capital_words_spaces('Abba_') == 'Abba_'",
        "num_ids": 2535
    },
    {
        "number": 749,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums = []\n    for element in nums_str:\n        sorted_nums.append(float(element))\n    return sorted_nums\n",
        "test": "assert     sort_numeric_strings([]) == [], f\"{sort_numeric_strings([])} - Expected: []\"",
        "num_ids": 777
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list = test_list + test_tup\n    return test_list\n",
        "test": "assert     add_tuple((1,2),(3,4)) == (1,2,3,4)",
        "num_ids": 489
    },
    {
        "number": 751,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i-1] < arr[i//2]:\n        return check_min_heap_helper(arr, i//2)\n    else:\n        return False\n",
        "test": "assert     check_min_heap_helper([-1, 2, 3, 1], 0) == True",
        "num_ids": 495
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0: return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 4\n    elif n == 4: \n        return 6\n    elif n == 5: \n        return 8\n    elif n == 6: \n        return 10\n    elif n == 7: \n        return 12\n    elif n == 8: \n        return 14\n    elif n == 9: \n        return 16\n    elif n == 10: \n        return 18\n    elif n == 11: \n        return 20\n    elif n == 12: \n        return 22\n    elif n == 13: \n        return 24\n    elif n == 14: \n        return 26\n    elif n == 15: \n        return 28\n    elif n == 16: \n        return 30\n    elif n == 17: \n        return 32\n    elif n == 18: \n        return 34\n    elif n == 19: \n        return 36\n    elif n == 20: \n        return 38\n    elif n == 21: \n        return 40\n    elif n == 22: \n        return 42\n    elif n == 23: \n        return 44\n    elif n == 24: \n        return 46\n    elif n == 25: \n        return 48\n    elif n == 26: \n        return 50\n    elif n == 27: \n        return 52\n    elif n == 28: \n        return 54\n    elif n == 29: \n        return 56\n    elif n == 30: \n        return 58\n    elif n == 31: \n        return 60\n    elif n == 32: \n        return 62\n    elif n == 33: \n        return 64\n    elif n == 34: \n        return 66\n    elif n == 35: \n        return 68\n    elif n == 36: \n        return 70\n    elif n == 37: \n        return 72\n    elif n == 38: \n        return 74\n    elif n == 39: \n        return 76\n    elif n == 40: \n        return 78\n    elif n == 41: \n        return 80\n    elif n == 42: \n        return 82\n    elif n == 43: \n        return 84\n    elif n == 44: \n        return 86\n    elif n == 45: \n        return 88\n    elif n == 46: \n        return 90\n    elif n == 47: \n        return 92\n    elif n == 48: \n        return 94\n    elif n == 49: \n        return 96\n    elif n == 50: \n        return 98\n    elif n == 51: \n        return 100\n    elif n == 52: \n        return 102\n    elif n == 53: \n        return 104\n    elif n == 54: \n        return 106\n    elif n == 55: \n        return 108\n    elif n == 56: \n        return 110\n    elif n == 57: \n        return 112\n    elif n == 58: \n        return 114\n    elif n == 59: \n        return 116\n    elif n == 60: \n        return 118\n    elif n == 61: \n        return 120\n    elif n == 62: \n        return 122\n    elif n == 63: \n        return 124\n    elif n == 64: \n        return 126\n    elif n == 65: \n        return 128\n    elif n == 66: \n        return 130\n    elif n == 67: \n        return 132\n    elif n == 68: \n        return 134\n    elif n == 69: \n        return 136\n    elif n == 70: \n        return 138\n    elif n == 71: \n        return 140\n    elif n == 72: \n        return 142\n    elif n == 73: \n        return 144\n    elif n == 74: \n        return 146\n    elif n == 75: \n        return 148\n    elif n == 76: \n        return 150\n    elif n == 77: \n        return 152\n    elif n == 78: \n        return 154\n    elif n == 79: \n        return 156\n    elif n == 80: \n        return 158\n    elif n == 81: \n        return 160\n    elif n == 82: \n        return 162\n    elif n == 83: \n        return 164\n    elif n == 84: \n        return 166\n    elif n == 85: \n        return 168\n    elif n == 86: \n        return 170\n    elif n == 87: \n        return 172\n    elif n == 88: \n        return 173\n    elif n == 89: \n        return 174\n    elif n == 90: \n        return 176\n    elif n == 91: \n        return 178\n    elif n == 92: \n        return 180\n    elif n == 93: \n        return 182\n    elif n == 94: \n        return 184\n    elif n == 95: \n        return 186\n    elif n == 96: \n        return 188\n    elif n == 97: \n        return 190\n    elif n == 98: \n        return 192\n    elif n == 99: \n        return 194\n    elif n == 100: \n        return 196\n    elif n == 101: \n        return 198\n    elif n == 102: \n        return 200\n    elif n == 103: \n        return 202\n    elif n == 104: \n        return 204\n    elif n == 105: \n        return 206\n    elif n == 106: \n        return 208\n    elif n == 107: \n        return 210\n    elif n == 108: \n        return 212\n    elif n == 109: \n        return 214\n    elif n == 110: \n        return 216\n    elif n == 111: \n        return 218\n    elif n == 112: \n        return 220\n    elif n == 113: \n        return 222\n    elif n == 114: \n        return 224\n    elif n == 115: \n        return 226\n    elif n == 116: \n        return 228\n    elif n == 117: \n        return 230\n    elif n == 118: \n        return 232\n    elif n == 119: \n        return 234\n    elif n == 120: \n        return 236\n    elif n == 121: \n        return 238\n    elif n == 122: \n        return 240\n    elif n == 123: \n        return 242\n    elif n == 124: \n        return 244\n    elif n == 125: \n        return 246\n    elif n == 126: \n        return 248\n    elif n == 127: \n        return 250\n    elif n == 128: \n        return 252\n    elif n == 129: \n        return 254\n    elif n == 130: \n        return 256\n    elif n == 131: \n        return 258\n    elif n == 132: \n        return 260\n    elif n == 133: \n        return 262\n    elif n == 134: \n        return 264\n    elif n == 135: \n        return 266\n    elif n == 136: \n        return 268\n    elif n == 137: \n        return 270\n    elif n == 138: \n        return 272\n    elif n == 139: \n        return 274\n    elif n == 140: \n        return 276\n    elif n == 141: \n        return 278\n    elif n == 142: \n        return 280\n    elif n == 143: \n        return 282\n    elif n == 144: \n        return 284\n    elif n == 145: \n        return 286\n    elif n == 146: \n        return 288\n    elif n == 147: \n        return 290\n    elif n == 148: \n        return 292\n    elif n == 149: \n        return 294\n    e",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 6224
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list)[-K:]\n",
        "test": "assert     min_k(test_list, 3) == (3, 1)",
        "num_ids": 819
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n                    index_list.append(j)\n                    index_list.append(k)\n    return index_list\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 1095
    },
    {
        "number": 755,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    second_smallest_num = numbers[1]\n    return second_smallest_num\n",
        "test": "assert     second_smallest([2,6,8]) == 6",
        "num_ids": 243
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r'(a)b'\n    regex2 = r'\\b(a|b)b'\n    if text.lower().count(regex) == 0 or text.lower().count(regex2) == 0:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     re.search('a', 'aaaaaaaaaaa')",
        "num_ids": 501
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    counter = {} # dictionary to store count of pairs\n    \n    for string in test_list:\n        key = string[::-1]\n        if key in counter:\n            counter[key] += 1\n        else:\n            counter[key] = 1\n    \n    return counter\n    \n    \n    ",
        "test": "assert ",
        "num_ids": 1161
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        if list1[i] not in d:\n            d[list1[i]] = 1\n        else:\n            d[list1[i]] += 1\n    return d\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 2444
    },
    {
        "number": 759,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    if num.strip().endswith('.'):\n        return False\n    return True\n",
        "test": "assert     is_decimal(\"200\") == True",
        "num_ids": 399
    },
    {
        "number": 760,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # Write your code here\n    for x in range(len(arr)):\n        if(arr[x]!= arr[x+1]):\n            return False\n    return True\n",
        "test": "assert     unique_Element([1,2,3,1,2,3]) == False",
        "num_ids": 2371
    },
    {
        "number": 762,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 <= 0 or monthnum3 > 12:\n        return False\n    elif monthnum3 < 10:\n        return True\n    else:\n        return (monthnum3%10) == 0\n",
        "test": "assert     check_monthnumber_number(1) == True",
        "num_ids": 2388
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 0:\n        return -1\n    \n    arr.sort()\n    result = arr[n-1] - arr[n-2]\n    \n    return result\n",
        "test": "assert     find_min_diff([2,1,3],3) == 1",
        "num_ids": 655
    },
    {
        "number": 764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # return the count of digits in the string\n    count = 0\n    for x in str:\n        if x.isdigit():\n            count += 1\n    return count\n    \ndef rotate(str):\n    '''\n    Write a python function to rotate a given string.\n    '''\n    # return a new string\n    result = \"\"\n    for i in range(len(str)-1, -1, -1):\n        result += str[i]\n    return result\n    \ndef reverse(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    # return the reversed string\n    result = \"\"\n    for i in range(len(str)-1, -1, -1):\n        result += str[i]\n    return result\n    \ndef main():\n    # test the rotate function\n    # assert(rotate(\"ABCD\") == \"ABCD\"), \"The function rotate() should return 'ABCD'!\"\n    # assert(rotate(\"XYZ\") == \"XYZYXZ\"), \"The function rotate() should return 'XYZYXZ'!\"\n    # assert(rotate(\"ABAB\") == \"ABABAB\"), \"The function rotate() should return 'ABAB'!\"\n    # assert(rotate(\"ABBABCCDD\") == \"ABBABCCDD\"), \"The function rotate() should return 'ABBABCCDD'!\"\n    # assert(rotate(\"KLMNOPQR\") == \"KLMNOPQR\"), \"The function rotate() should return 'KLMNOPQR'!\"\n    # assert(rotate(\"ZWXYZ\") == \"ZWXYZYZZWXYZZZWXYZZ\"), \"The function rotate() should return 'ZWXYZYZWXYZZZWXYZZ'!\"\n    # assert(rotate(\"XYXWYY\") == \"XYXWYYYXWYYYXWYYYXWYYYXWYYY\"), \"The function rotate() should return 'XYXWYYYXWYYYXWYYYXWYYYXWYYY'!\"\n    # assert(rotate(\"JKLHN\") == \"JKLHNKEKLHNKEKLHNKEKLHNKEKLHNKEKL\"), \"The function rotate() should return 'JKLHNKEKLHNKEKLHNKEKLHNKEKLHNKEKL'!\"\n    # assert(rotate(\"ABABCD\") == \"ABABCDAABABCDAABCDAABCDAABCDAABCDAABCDAABCD\"), \"The function rotate() should return 'ABABCDAABABCDAABCDAABCDAABCDAABCDAABCDAABCD'!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotat",
        "test": "assert     number_ctr(str='99101123') == 2, 'number_ctr should return 2'",
        "num_ids": 2135
    },
    {
        "number": 765,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n==3:\n        return False\n    else:\n        return True\n",
        "test": "assert     is_polite(2)",
        "num_ids": 2357
    },
    {
        "number": 766,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return list(zip(l1,l1[1:]))\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 524
    },
    {
        "number": 767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n    pass\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @param int sum\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @retur",
        "test": "assert     get_pairs_count([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917",
        "num_ids": 6304
    },
    {
        "number": 769,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    '''\n    Code:\n    Given two lists, find the difference between them.\n    i.e. list1[x] - list2[x] = list1[x] - list2[x]\n    '''\n    '''\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    '''\n    # For each element in the first list\n    # Assign the list to a new list\n    # For each element in the second list\n    # Add the element's value to the new list\n    # Return the new list\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    # Runtime: 100n\n    # Space: O(n)\n    def getDiff(li1,li2):\n        # Initialize new list\n        newList = []\n        # Loop through the lists\n        for x in range(0,len(li1)):\n            # Add the element's value to the new list\n            newList.append(li1[x] - li2[x])\n        # Return new list\n        return newList\n    # Return the list\n    return getDiff(li1,li2)\n",
        "test": "assert     Diff([],[])==[]",
        "num_ids": 696
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 or n == 1 :\n        return n\n    else : \n        return odd_num_sum(n-1) + odd_num_sum(n-2) + odd_num_sum(n-3) + odd_num_sum(n-4) + odd_num_sum(n-5)\n    \n",
        "test": "assert     odd_num_sum(1) == 1",
        "num_ids": 360
    },
    {
        "number": 771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    previous_opening_bracket = '('\n",
        "test": "assert     check_expression('a*b+3') == 'a*b+3'",
        "num_ids": 588
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_length = len(test_str)\n    \n    if str_length <= K:\n        return str(test_str)\n    \n    k_length = K/str_length\n    \n    result = []\n    for i in range(0,str_length):\n        if i%k_length==0:\n            result.append(test_str[i])\n            result.append(test_str[i+1])\n            \n    return \"\".join(result)\n",
        "test": "assert     remove_length('jkf', 4) == 'jkf'",
        "num_ids": 442
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if re.search(pattern,text):\n        return 1\n    else:\n        return None\n",
        "test": "assert ",
        "num_ids": 549
    },
    {
        "number": 775,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return True if(len(nums)%2==1) else False\n",
        "test": "assert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) is False",
        "num_ids": 364
    },
    {
        "number": 776,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    vowels = 0\n    for ch in test_str:\n        if 'a' <= ch <= 'z':\n            vowels += 1\n        elif 'A' <= ch <= 'Z':\n            vowels += 1\n        else:\n            pass\n    return vowels\n",
        "test": "assert     count_vowels(\"Aa\") == 2",
        "num_ids": 469
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in arr: \n        if i == i: \n            continue\n        else: \n            s += i \n    return s \nprint(find_sum([1, 2, 3, 4, 4, 5]))",
        "test": "assert     find_sum([2, 3, 3, 3]) == 0",
        "num_ids": 399
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def dups(l):\n        \"\"\"\n        compute the dups in a list\n        \"\"\"\n        dups = set()\n        for i in l:\n            if i not in dups:\n                dups.add(i)\n                yield i\n        return dups\n",
        "test": "assert     pack_consecutive_duplicates([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5]) == [1,2,3,4,5,5,5,5,5,5,5,5,5,5]",
        "num_ids": 2627
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for i in list1:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return counts\n",
        "test": "assert     unique_sublists(['a', 'b', 'a']) == {'a': 2, 'b': 1}",
        "num_ids": 741
    },
    {
        "number": 780,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            result.append(test_list[i] + test_list[j])\n    return result\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 2746
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i=2\n    while i*i<=n :\n        if n % i == 0 :\n            return False\n        i += 2\n    return True\n",
        "test": "assert     count_divisors(0) == 1",
        "num_ids": 338
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr)==1:\n        return arr[0]\n",
        "test": "assert     odd_length_sum([3,4,6,8,9]) == 30",
        "num_ids": 491
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_r = max(r, g, b)\n    min_r = min(r, g, b)\n    max_r = max_r - min_r\n    value = (max_r/255)/(max_r+min_r+1)\n    if value < 0.0:\n        value = 0.0\n    if value > 1.0:\n        value = 1.0\n    h = max_r\n    s = value\n    v = value\n    \n    return h,s,v\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0.0, 0.0, 0.0)",
        "num_ids": 1918
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # if list1[0]==list1[1]:\n    #     return list1[0]*list1[0]\n    # if list1[0]%2==0:\n    #     return list1[0]*list1[0]\n    # else:\n    #     return list1[0]*list1[0]*list1[1]\n    return list1[0]*list1[1]\n",
        "test": "assert ",
        "num_ids": 533
    },
    {
        "number": 785,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_int = tuple(map(int, test_str))\n    return tuple_int\n",
        "test": "assert tuple_str_int((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)",
        "num_ids": 494
    },
    {
        "number": 786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    p = bisect.bisect_left(a, x)\n    if p!= len(a):\n        return p + 1\n    else:\n        return len(a)\n",
        "test": "assert     right_insertion(a=[4, 5, 6, 1, 2, 8, 9], x=3) == [2, 3]",
        "num_ids": 447
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.sub(r'\\s', '', text.strip())\n    text = re.sub(r'^\\s', '', text.strip())\n    text = re.sub(r'\\s+$', '', text.strip())\n    text = re.sub(r'\\s+$', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'^\\s', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub",
        "test": "assert     text_match_three(\"The quick brown fox jumps over the lazy dog\") == 'The quick brown fox jumps over the lazy dog'",
        "num_ids": 3015
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # create new tuples\n    new_tuple = tuple(test_list)\n    # concatenate new tuples\n    return tuple(new_tuple + test_str)\n",
        "test": "assert     new_tuple('ab', ['a', 'b', 'c']) == ('a', ('b', 'c'))",
        "num_ids": 2526
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index, i in enumerate(nums):\n        if i % 2 == 0:\n            if index % 2 == 0:\n                return True\n    return False\n",
        "test": "assert     even_position([0,2,4,6,8,10]) == True",
        "num_ids": 369
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup_list = []\n    for i,tup in enumerate(test_tup):\n        if type(tup) is tuple:\n            tup_list.append(tup)\n        else:\n            tup_list.append(tup)\n    test_tup = tuple(tup_list)\n    return test_tup\n",
        "test": "assert     remove_nested((1,2,3,4)) == (1,2,3,4)",
        "num_ids": 625
    },
    {
        "number": 792,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output = 0\n    for lst in input_list:\n        output += len(lst)\n    return output\n",
        "test": "assert     count_list([]) == 0",
        "num_ids": 417
    },
    {
        "number": 793,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    count = 0\n    n = len(arr)\n",
        "test": "assert ",
        "num_ids": 437
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search(r'[a-zA-Z]\\s*\\b([A-Z][a-zA-Z]*)\\b', text)\n    if result!= None:\n        return result.group(1) +'' + result.group(2)\n    else:\n        return text\n",
        "test": "assert     text_starta_endb('hello') == 'hello'",
        "num_ids": 826
    },
    {
        "number": 796,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total\n",
        "test": "assert     return_sum({\"a\": 1, \"b\": 2}) == 3",
        "num_ids": 269
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n, n + 2):\n        if i % 2 == 0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_odd(0) == 0",
        "num_ids": 304
    },
    {
        "number": 798,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n",
        "test": "assert     _sum([]) == 0, \"No Sum\"",
        "num_ids": 276
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Your code here\n    if n >= (2**32):\n        return 0\n    n = (n+d)\n    return n\n",
        "test": "assert     left_rotate(0,1) == 1",
        "num_ids": 741
    },
    {
        "number": 800,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\" +\", \" \", text)\n",
        "test": "assert     remove_all_spaces(\"\") == \"\"",
        "num_ids": 273
    },
    {
        "number": 801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # You can write any python code you want to do\n    # TODO: write the code\n    pass",
        "test": "assert     test_three_equal(4,5,2) == 3",
        "num_ids": 4610
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    l = len(arr)\n    if l < 2:\n        return 0\n",
        "test": "assert     count_rotation(arr) == 4",
        "num_ids": 2662
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = str(n)\n    if s.isdigit():\n        if len(s)%2 == 0:\n            for i in range(len(s)//2):\n                if (int(s[i]) * int(s[i+1])) == int(s[i]):\n                    return False\n            return True\n    return False\n",
        "test": "assert     is_perfect_square(6) == False",
        "num_ids": 471
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # define a function that checks if the product of a list is even\n    # if it's even, the function should return True\n    # if the product is odd, the function should return False\n    # and the function should return the function\n    for i in arr:\n        if (i % 2!= 0):\n            return True\n        else:\n            return False\n",
        "test": "assert     is_product_even([2, 3, 4, 5, 6]) == False, \"is_product_even() test failed\"",
        "num_ids": 376
    },
    {
        "number": 805,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    largest_sum = []\n    for element in lists:\n        if not element in largest_sum:\n            largest_sum.append(element)\n    return largest_sum\n",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 729
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_uppercase = 0\n",
        "test": "assert     max_run_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 4",
        "num_ids": 324
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return sorted(nums)[1] if nums else 0\n",
        "test": "assert     first_odd([]) == 0",
        "num_ids": 304
    },
    {
        "number": 808,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    if type(test_tup)!= tuple:\n        return False\n    elif type(K)!= int:\n        return False\n    elif K <= 0:\n        return False\n    elif not all(i in test_tup for i in range(K+1)):\n        return False\n    elif len(set(test_tup))!= len(test_tup):\n        return False\n    else:\n        return True\n",
        "test": "assert     check_K(('A', 'B', 'C'), 2) == False",
        "num_ids": 563
    },
    {
        "number": 809,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return True\n    elif test_tup1[1] > test_tup2[1]:\n        return True\n    elif test_tup1[0] < test_tup2[0]:\n        return True\n    elif test_tup1[1] < test_tup2[1]:\n        return True\n    elif test_tup1[0] > test_tup2[1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_smaller((1, 2, 3, 4), (5, 6, 7, 8)) == True, 'First tuple must have at least one element, but second tuple has one element'",
        "num_ids": 749
    }
]