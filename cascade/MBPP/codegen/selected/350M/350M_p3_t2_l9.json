[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    num_elements_test1 = len(test_tup1)\n    num_elements_test2 = len(test_tup2)\n    for i in range(num_elements_test1):\n        for j in range(num_elements_test2):\n            if test_tup1[i] == test_tup2[j]:\n                return test_tup1[i]\n    return 'No elements match'\n",
        "test": "assert     similar_elements(('apple', 'orange'), ('apple', 'orange')) == 'apple'",
        "num_ids": 464
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_sqrt(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_inverse(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_sqrt_inverse(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_not_prime(2) == True",
        "num_ids": 235
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    n = len(nums)\n    if n==0:\n        return []\n    if n==1:\n        return nums\n    \n    heap = []\n    heapq.heapify(heap)\n    for num in nums:\n        heapq.heappush(heap,-num)\n    #k = 0\n    #for k in range(n-1,-1,-1):\n    #    heapq.heappop(heap)\n    heapq.heapify(heap)\n    return heap\n",
        "test": "assert     heap_queue_largest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920",
        "num_ids": 2290
    },
    {
        "number": 6,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    y = x % 2\n    return not y\n",
        "test": "assert     is_Power_Of_Two (2) == True",
        "num_ids": 164
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[a-zA-Z]{4,}'\n    match = re.findall(pattern, text)\n    return match\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[a-zA-Z0-9]{4,}'\n    match = re.findall(pattern, text)\n    return match\ndef find_words(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    match = re.findall(pattern, text)\n    return match\ndef find_last_char(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    match = re.findall(pattern, text)\n    return match\ndef find_url(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'https?://[a-zA-Z0-9\\-]+\\.?[a-zA-Z0-9]+\\.[a-z]{2,3}'\n    match = re.findall(pattern, text)\n    return match\ndef find_num_word(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[0-9]+'\n    match = re.findall(pattern, text)\n    return match\ndef find_other_char(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[^a-zA-Z]*'\n    match = re.findall(pattern, text)\n    return match\ndef remove_stop_char(text):\n    '''\n    Write a function to remove all characters at the end of a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef remove_start_char(text):\n    '''\n    Write a function to remove all characters at the start of a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef is_num_word(text):\n    '''\n    Write a function to remove all characters at the end of a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef is_other_char(text):\n    '''\n    Write a function to remove all characters at the start of a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef get_char(text):\n    '''\n    Write a function to extract all characters in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef get_word(text):\n    '''\n    Write a function to extract all words in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef get_last_char(text):\n    '''\n    Write a function to extract all words which are at least 4 characters long in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9]+'\n    match = re.findall(pattern, text)\n    return match\ndef remove_stop_char(text):\n    '''\n    Write a function to remove all characters at the end of a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef remove_start_char(text):\n    '''\n    Write a function to remove all characters at the start of a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef remove_num_word(text):\n    '''\n    Write a function to remove all words which are at least 4 characters long in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef remove_other_char(text):\n    '''\n    Write a function to remove all words which are at least 4 characters long in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef remove_url(text):\n    '''\n    Write a function to remove all words which are at least 4 characters long in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9]+'\n    match = re.findall(pattern, text)\n    return match\ndef remove_space_char(text):\n    '''\n    Write a function to remove all characters at the end of a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef is_word(text):\n    '''\n    Write a function to extract all words in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef is_other_char(text):\n    '''\n    Write a function to extract all words which are at least 4 characters long in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef get_length(text):\n    '''\n    Write a function to extract all words in a string which are at least 4 characters long in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef get_last_word(text):\n    '''\n    Write a function to extract all words in a string which are at least 4 characters long in a string which are not between a-z A-Z, 0-9 and/or!",
        "test": "assert     find_char_long('aabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdabacdcdaba",
        "num_ids": 2547
    },
    {
        "number": 8,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for number in nums:\n        squares.append(number**2)\n    return squares\n",
        "test": "assert     square_nums(nums) == [4,9]",
        "num_ids": 267
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = {}\n    for r in range(1, len(str)):\n        if str[r] not in rotations:\n            rotations[str[r]] = 0\n        rotations[str[r]] += 1\n    max_rotations = 0\n    for rotation in rotations:\n        if rotations[rotation] > max_rotations:\n            max_rotations = rotations[rotation]\n    return max_rotations\n",
        "test": "assert     find_Rotations(\"ASDFFF\") == 3 ",
        "num_ids": 267
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    pass # replace with your code\n    ",
        "test": "assert     remove_Occ(\"aH\", \"a\") == \"H\"",
        "num_ids": 276
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n=len(M)\n    M=sorted(M, key=lambda x:x[0])\n    M.sort(key=lambda x:x[1])\n    return M",
        "test": "assert ",
        "num_ids": 613
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = l + h\n    b = b + h\n    h = (b-l)/2\n    v = (b**2-l**2)**0.5\n    return v*h\n",
        "test": "assert     find_Volume(1,1,1) == 0, \"Test case 2 failed\"",
        "num_ids": 265
    },
    {
        "number": 16,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    print(text)\n    if text.count(' ')!= 0:\n        print(\"Input is not a string.\")\n        return False\n    else:\n        if not re.search(r'[a-z]+_[a-z]+', text):\n            print(\"Input is not a string.\")\n            return False\n        elif not re.search(r'[A-Z]+', text):\n            print(\"Input is not a string.\")\n            return False\n        elif not re.search(r'[A-Z]+_[A-Z]+', text):\n            print(\"Input is not a string.\")\n            return False\n        elif not re.search(r'[0-9]+', text):\n            print(\"Input is not a string.\")\n            return False\n        else:\n            return True\n    ",
        "test": "assert     text_lowercase_underscore('SILENE') == False, 'Text not correct'",
        "num_ids": 807
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a < 0:\n        return \"Please input a positive number!\"\n    \n    elif a == 0:\n        return 0\n    else:\n        return a**2 + square_perimeter(a-1)\n        \n",
        "test": "assert     square_perimeter(5) == 25",
        "num_ids": 274
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char in string[:len(string)]]\n",
        "test": "assert     str_to_list(\"The quick brown fox jumps over the lazy dog!\") == ['quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog!'], \"The correct string is\" + str_to_list(\"The quick brown fox jumps over the lazy dog!\") + \". That's the correct string\"",
        "num_ids": 309
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = []\n    for num in arraynums:\n        if num in duplicate:\n            return True\n        else:\n            duplicate.append(num)\n",
        "test": "assert     test_duplicate([1,1,2,3,1,2,3]) == True",
        "num_ids": 185
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True if x >= 0 and x <= 3 else False\n",
        "test": "assert     is_woodall(5) == False, \"5 is not woodball\"",
        "num_ids": 230
    },
    {
        "number": 56,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(num)\n    rev_num_reverse = rev_num * 2\n    rev_num_reverse = rev_num_reverse - rev_num\n    if rev_num_reverse > 0:\n        return rev_num_reverse\n    else:\n        return 0\nprint(rev(14))",
        "test": "assert rev(123) == -123",
        "num_ids": 2064
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)) : \n        if arr[i] > max_num : \n            max_num = arr[i]\n    return max_num\n",
        "test": "assert ",
        "num_ids": 151
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    a = x < y \n    b = x > y \n    return a or b\n",
        "test": "assert     (opposite_Signs(6,4) == True)",
        "num_ids": 176
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    if n < 1: \n        raise ValueError('n must be >= 1') \n    \n    return n * (n + 1) // 2",
        "test": "assert     is_octagonal(1)",
        "num_ids": 268
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    s = list(s)\n    for i in range(len(s)):\n        temp = \"\"\n        for j in range(len(s)):\n            temp += str(s[j])\n        if sum(map(int,temp))==s[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_Substrings('12345') == 0, \"The input string is incorrect.\"",
        "num_ids": 286
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # change the code to your solution\n    # comment for python 3\n    smallest_num = min(xs)\n    return smallest_num\n",
        "test": "assert     smallest_num(['1', '3', '8', '10']) == '1'",
        "num_ids": 188
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Create a tuple of all the available pairs\n    pairs = set(test_list)\n",
        "test": "assert     max_difference([2,4,6,8,10]) == 5",
        "num_ids": 287
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x:x[1])\n    return subjectmarks\n",
        "test": "assert     subject_marks(['CEO', 'CEO', 'CEO', 'Programmer']) == ['CEO', 'CEO', 'CEO', 'Programmer']",
        "num_ids": 324
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    for i in data_list:\n        recursive_list_sum(i)\n        i = i + 1\n    return data_list + data_list\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 229
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([1,2,3,4,5,6,7]) == 7",
        "num_ids": 203
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 235
    },
    {
        "number": 68,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([]) == True",
        "num_ids": 244
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i=0\n    j=0\n    while i < len(l):\n        if l[i] == s[j]:\n            i+=1\n            j+=1\n        else:\n            return False\n    return True\n",
        "test": "assert     is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 4]) == False",
        "num_ids": 256
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    \n    else:\n        return False\n",
        "test": "assert     find_equal_tuple([(1,2),(2,4),(3,1)]) == False",
        "num_ids": 281
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        for i in range(len(nums)):\n            for j in range(len(nums)-i-1):\n                if nums[j] > nums[j+1]:\n                    nums[j], nums[j+1] = nums[j+1], nums[j]\n        return nums\n",
        "test": "assert      comb_sort([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 2322
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0 or n == 1:\n        return n == 0\n    else:\n        return abs(n-((n**2)%1))%1",
        "test": "assert     dif_Square(9) == 0",
        "num_ids": 313
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all(pattern in colors for pattern in patterns)\n",
        "test": "assert     is_samepatterns(['r','g','b','c','o'], ['r','g','b','c','o']) == True,'red green blue cyan orange'",
        "num_ids": 367
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #Sort the given list of tuples according to the order of the elements in the list\n    sorted_tuples = sorted(test_list, key = lambda tup: tup[0])\n    #Check if the elements of the given list are all divisible by k\n    if all(ele % K == 0 for ele in sorted_tuples):\n        return sorted_tuples\n    #If no element of the list is divisible by k, return the list with only one element\n    else:\n        return [tup for tup in sorted_tuples if len(tup) == 1]\n    \n",
        "test": "assert     find_tuples([], 4) == []",
        "num_ids": 409
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(1, n + 1):\n        if i % 11 == 0:\n            return False\n    return True\n",
        "test": "assert     is_Diff(0)",
        "num_ids": 137
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Your code here\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     word_len('python') == 1",
        "num_ids": 178
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 2\n    c = 3\n    n_a = 4\n    n_b = 5\n    n_c = 6\n    n_d = 7\n    n_e = 8\n    n_f = 9\n    n_g = 10\n    n_h = 11\n    n_i = 12\n    n_j = 13\n    n_k = 14\n    n_l = 15\n    n_m = 16\n    n_n = 17\n    n_o = 18\n    n_p = 19\n    n_q = 20\n    n_r = 21\n    n_s = 22\n    n_t = 23\n    n_u = 24\n    n_v = 25\n    n_w = 26\n    n_x = 27\n    n_y = 28\n    n_z = 29\n    n = n - 1\n    if n <= 0:\n        return n\n    if n % 2 == 0:\n        return n_b\n    else:\n        return n_a\n",
        "test": "assert     tetrahedral_number(5) == 5",
        "num_ids": 2838
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #Your code goes here\n    volume = 3.14*(r*r)*(r**2)\n    return volume\n",
        "test": "assert     volume_sphere(0) == 0",
        "num_ids": 158
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = list(strr)\n    for i in range(len(char_list)):\n        char = ord(char_list[i])\n        char = char - ord('A')\n        char = char + ord('a')\n        char_list[i] = chr(char)\n    result = ''.join(char_list)\n    return result\n",
        "test": "assert ",
        "num_ids": 305
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 8\n    else:\n        pass\n",
        "test": "assert      sequence(1) == 1 ",
        "num_ids": 390
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    A = (4/3)*math.pi*(r**3)\n    return A\n",
        "test": "assert     surfacearea_sphere(0.0) == 0",
        "num_ids": 136
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    while i <= n:\n        x = n - (i - 1)\n        if x % 4 == 0:\n            return i\n        i += 1\n",
        "test": "assert     centered_hexagonal_number(16) == 16",
        "num_ids": 179
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if len(dict1) == 0:\n        return dict2\n    elif len(dict2) == 0:\n        return dict3\n    elif len(dict1) == 0 or len(dict2) == 0:\n        return dict1\n    elif dict1[0]['key'] > dict2[0]['key']:\n        return merge_dictionaries_three(dict1[1:],dict2[1:], dict3[1:])\n    else:\n        return merge_dictionaries_three(dict1[1:],dict2[1:],dict3[1:])\n",
        "test": "assert     merge_dictionaries_three({'a':1, 'b':2, 'c':3, 'd':4},",
        "num_ids": 797
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\ndef freq_sum(list2):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a dictionary.\n    '''\n    sum = collections.Counter(list2)\n    return sum\ndef print_freq(freq):\n    '''\n    Write a function that prints the frequency of elements in a dictionary.\n    '''\n    for key, val in freq.items():\n        print(f'{key}:\\t{val}')\ndef sorted_list(list1):\n    '''\n    Write a function that sorts a list and returns a new list sorted in ascending order.\n    '''\n    new_list = sorted(list1, reverse = True)\n    return new_list\ndef reverse_list(list1):\n    '''\n    Write a function that reverses a list in ascending order.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    return new_list\ndef longest_word(list1):\n    '''\n    Write a function that returns the longest word in a list of words.\n    '''\n    words = list1\n    print(len(words[0]))\n    return words[0]\ndef most_common_word(list2):\n    '''\n    Write a function that returns the most common word in a list of words.\n    '''\n    counts = collections.Counter(list2)\n    return counts.most_common(1)[0][0]\ndef most_common_word_longest(list1):\n    '''\n    Write a function that returns the word with the most common meaning.\n    '''\n    words = list1\n    for word in words:\n        print(f'{word}:\\t{most_common_word(word)}')\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 334
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    c = 0\n    smallest = float('inf')\n    for i in range(N+1):\n        c += abs(i-N)\n        if c < smallest:\n            smallest = c\n    return smallest\n",
        "test": "assert     closest_num(5) == 5",
        "num_ids": 289
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    i=0\n    while i < len(list1):\n        if len(list1[i])>len(list1[i+1]):\n            i=i+1\n        elif len(list1[i])>len(list1[i+1]):\n            i=i+1\n    return i\n",
        "test": "assert     len_log([]) == 0",
        "num_ids": 402
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1.lower()\n",
        "test": "assert     find_substring(\"bat\", \"s\") == 0, 'incorrect'",
        "num_ids": 186
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 2:\n        return False\n    elif n % 3!= 0 and n % 5!= 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     is_undulating(1) == False",
        "num_ids": 157
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n        \ndef main():\n    '''\n    Test your function by first printing your result on the screen. Then, use the function\n    power() to compute the result and then call the function again.\n    '''\n    print(power(2,3))\n    print(power(2,0))\n    \nmain()\n",
        "test": "assert     power(2, 2) == 4, 'Error: function \"power\" should return 4'",
        "num_ids": 102
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_second = sorted(test_list, key = itemgetter(1))\n    return min_second[0][0]\n",
        "test": "assert     index_minimum([(2, 3), (2, 3), (1, 3)]) == 2",
        "num_ids": 2220
    },
    {
        "number": 95,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = []\n    for i in lst:\n        if len(i) > len(min_length):\n            min_length = i\n    return min_length\n",
        "test": "assert     # Test code",
        "num_ids": 321
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "test": "assert     divisor(5) == 2",
        "num_ids": 224
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for element in list1:\n        if element not in frequency_dict:\n            frequency_dict[element] = 1\n        else:\n            frequency_dict[element] += 1\n    return frequency_dict\n",
        "test": "assert     frequency_lists(['a','b','c','d'])=={'a':2, 'b':2, 'c':2, 'd':1}",
        "num_ids": 330
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in range(len(numbers)):\n        result = result * numbers[i]\n    return result\n",
        "test": "assert         multiply_num([2,3,6,7,9]) == 36",
        "num_ids": 363
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 188
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 2\n    if num == 2:\n        return 3\n    if num == 3:\n        return 4\n",
        "test": "assert     next_smallest_palindrome(5) == 4",
        "num_ids": 292
    },
    {
        "number": 101,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return -1\n    else:\n        return arr[k-1]",
        "test": "assert     kth_element([1, 2, 3, 4, 5, 6], 5) == 5",
        "num_ids": 242
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:]\n",
        "test": "assert     snake_to_camel(\"aSnakeCase\") == \"ASnakeCase\"",
        "num_ids": 281
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num_list = [i for i in range(1, n + 1)]\n    loop_len = n - 1\n    max_num = -1\n    max_num_index = 0\n    for i in range(loop_len):\n        count = 0\n        for j in range(i, loop_len):\n            if num_list[j] == num_list[i]:\n                count += 1\n        if max_num < count:\n            max_num = count\n            max_num_index = i\n    return max_num\n",
        "test": "assert     eulerian_num(5, 4) == 1",
        "num_ids": 568
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list = sorted(input_list, key=lambda x: len(x[0]))\n    return input_list\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 402
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for value in lst:\n        if value == True:\n            count += 1\n    return count\n    # Your code here\n",
        "test": "assert ",
        "num_ids": 2163
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list[0]\n    test_tup = test_tup[0]\n",
        "test": "assert ",
        "num_ids": 203
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while num1!= []:\n        merged_list.append(num1.pop(0))\n    while num2!= []:\n        merged_list.append(num2.pop(0))\n    while num3!= []:\n        merged_list.append(num3.pop(0))\n    return merged_list\n",
        "test": "assert     merge_sorted_list([1,2,3,4], [5,6,7,8,9], [10,11,12,13]) == [1,2,3,4,5,6,7,8,9,10,11,12,13]",
        "num_ids": 1043
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    # 0th index will be 0, 1st index will be 1\n    for i in range(0, n, 2):\n        # odd index will be 1, even index will be 0\n        count += 1\n        # count increased by 1\n        \n    return count\n",
        "test": "assert     odd_Equivalent(\"10101010101\",2), \"check the function\"",
        "num_ids": 2278
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if isinstance(nestedlist,list):\n        common_list = []\n        for i in range(len(nestedlist)):\n            if isinstance(nestedlist[i],list):\n                common_list.append(nestedlist[i])\n            else:\n                common_list.append(nestedlist[i])\n        return common_list\n    else:\n        raise TypeError(\"Input must be of type list.\")\n",
        "test": "assert     common_in_nested_lists([1, [2, 4], 5], [[1, 2, 4], 5]) == [1, 2], \"List 2 has wrong elements\"",
        "num_ids": 569
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "test": "assert         check_integer('234') == True, 'Check for the correctness of check_integer'",
        "num_ids": 145
    },
    {
        "number": 115,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    # Initialize an empty list\n    list2 = []\n    \n    # Iterate through the list and check if the length is equal to zero\n    for element in list1:\n        if len(list1) == 0:\n            return True\n        \n        # Add the element to the empty list\n        list2.append(element)\n    \n    # Check whether the list is empty\n    if list2 == []:\n        return True\n    else:\n        return False\n    \n    \n    \ndef main():\n    '''\n    Create a nested list containing all the following numbers:\n    1 - 100\n    2 - 200\n    3 - 300\n    4 - 400\n    5 - 500\n    '''\n    \n    # Create a list with the following elements\n    numbers = [1, 100, 200, 300, 400, 500]\n    \n    # Check whether all elements in the list are empty\n    if empty_dit(numbers):\n        print(\"List is empty.\")\n    else:\n        print(\"List is not empty.\")\n    \n    \nif __name__ == \"__main__\":\n    main()\n",
        "test": "assert     empty_dit([]) == True",
        "num_ids": 236
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    #Initialise\n    num_sum = 0\n    \n    #Iterate through each element in the tuple\n    for num in nums:\n        \n        #Convert the element to an integer\n        num = int(num)\n        \n        #Add the element to the sum\n        num_sum += num\n        \n    #Return the sum\n    return num_sum\n    \n",
        "test": "assert     tuple_to_int([1, 2, 3, '4']) == 4",
        "num_ids": 261
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    def convert_list(l):\n        result = []\n        for el in l:\n            for el_2 in el:\n                result.append(float(el_2))\n        return result\n    return convert_list(test_list)\n",
        "test": "assert     list_to_float([[1.0, 2.0], [3.0, 4.0]]) == [1.0, 2.0, 3.0, 4.0]",
        "num_ids": 400
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('') == []",
        "num_ids": 127
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    start, end = 0, len(arr)-1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] == arr[mid + 1]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return arr[start]\n",
        "test": "assert     search([1, 2, 3, 1]) == 1",
        "num_ids": 200
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if list1==[]:\n        return 0\n    if len(list1)==1:\n        return 1\n    if len(list1)==2:\n        return list1[0]*list1[1]\n    mid_index=len(list1)//2\n    if mid_index==0:\n        mid=list1[mid_index]\n    else:\n        mid=list1[mid_index]\n    for i in range(mid_index,len(list1)):\n        if list1[i]<mid:\n            break\n        mid=list1[i]\n    if list1[mid_index]<list1[mid_index-1]:\n        mid_index=mid_index-1\n    list2=list1[mid_index+1:len(list1)]\n    return max(list1[mid_index],list2[mid_index])*max_product_tuple(list2)\n",
        "test": "assert     max_product_tuple([(1,2),(1,2),(1,2),(1,2),(1,2),(1,2)])==(1,2,2,2,2,2)",
        "num_ids": 2513
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    i = 1\n    while i * i <= limit:\n        if limit % i == 0:\n            amicable_numbers.append(i)\n            if i!= limit:\n                amicable_numbers.append(i * i)\n            i = i * i\n        i += 1\n",
        "test": "assert     amicable_numbers_sum(5) == 1",
        "num_ids": 289
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #check the type of a and b\n    if type(a)!= complex:\n        raise ValueError('a must be a complex number')\n    if type(b)!= complex:\n        raise ValueError('b must be a complex number')\n    #get the real and imaginary part of a and b\n    #real = a.real; imaginary = a.imag\n    real,imag = a.real,a.imag\n    #get the real part of b\n    #real = b.real; imaginary = b.imag\n    real,imag = b.real,b.imag\n    #get the angle in radians\n    angle = cmath.phase(complex(real,imag))\n    if math.isnan(angle):\n        return 0\n    #return the angle in degrees\n    return angle * 180/math.pi\n",
        "test": "assert     angle_complex(complex(0,0), 3j)    == 2.2",
        "num_ids": 309
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    print('@' * 50)\n    print(f'{string}' * 50)\n    print('@' * 50)\n    print('|', end='')\n    answer = 0\n    for i in range(len(string) - 1):\n        if string[i]!= string[i + 1]:\n            answer += 1\n        elif string[i] == string[i + 1]:\n            answer += 2\n    return answer\n",
        "test": "assert     find_length
        "num_ids": 2262
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a<b:\n        temp=b\n        b=a\n        a=temp\n    a=a//2\n    sum=0\n    while(a<b):\n        if a%2==1:\n            sum+=a\n        if b%2==1:\n            sum+=b\n        a+=1\n        b-=1\n    return sum\ndef subtract(a,b): \n    '''\n    Write a python function to find the difference of two numbers.\n    '''\n    a=a%10\n    b=b%10\n    return sum(a,b)-sum(a+b)\ndef mod_add(a,b):\n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    a=a%10\n    b=b%10\n    return sum(a,b)-sum(a+b)\ndef factorial(n): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef mod_factorial(n): \n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n%10*mod_factorial(n-1)\ndef factorial_multi(n): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial_multi(n-1)\ndef prime(n): \n    '''\n    Return a list of primes for the given number n.\n    '''\n    if n==1:\n        return [1]\n    if n==2:\n        return [2]\n    if n%2==0:\n        return [2]\n    if n==3:\n        return [3]\n    if n>3:\n        k=0\n        for i in range(2,n//2):\n            if n%i==0:\n                break\n            else:\n                k+=1\n        if k==2:\n            return [n]\n        else:\n            return [n,n+k]\ndef prime_multi(n): \n    '''\n    Return a list of primes for the given number n.\n    '''\n    if n==1:\n        return [1]\n    if n==2:\n        return [2]\n    if n%2==0:\n        return [2]\n    if n==3:\n        return [3]\n    if n>3:\n        k=0\n        for i in range(2,n//2):\n            if n%i==0:\n                break\n            else:\n                k+=1\n        if k==2:\n            return [n]\n        else:\n            return [n,n+k]",
        "test": "assert     sum(1,6) == 2",
        "num_ids": 305
    },
    {
        "number": 127,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(12, 34) == 12 * 34",
        "num_ids": 143
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    if n == 1:\n        return str.split()\n    else:\n        if str == \"\":\n            return []\n        \n        long_words = []\n        word = \"\"\n        for i in range(len(str)):\n            word += str[i]\n            \n            if len(word) > n:\n                long_words.append(word)\n                word = \"\"\n                \n        long_words.append(word)\n        return long_words\n",
        "test": "assert     long_words(20, ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']) == ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']",
        "num_ids": 496
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(0,len(my_matrix)):\n        for j in range(0,len(my_matrix[i])):\n            if my_matrix[i][j] > 0:\n                pass\n            else:\n                return False\n    return True\n",
        "test": "assert     magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == True, \"magic_square_test\"",
        "num_ids": 649
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_freq = max(frequency.values())\n    for num in frequency:\n        if frequency[num] == max_freq:\n            return num\n",
        "test": "assert     max_occurrences([1, 2, 3, 1, 1, 2, 3, 1, 2, 2, 3, 1, 2, 3, 2, 2, 3, 2, 2, 3, 1, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 1, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 1, 2, 2, 3, 2, 2, 2, 3, 1, 2, 2, 3, 2, 3, 1, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2",
        "num_ids": 2238
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    reversed_string = ''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i].lower() in ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'):\n            reversed_string += str1[i].lower()\n        else:\n            reversed_string += str1[i]\n    return reversed_string\n",
        "test": "assert     reverse_vowels('hello') == 'olleh'",
        "num_ids": 370
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string_tup = \"(\"\n    for item in tup1:\n        string_tup += str(item) + \",\"\n    string_tup = string_tup[:-1]\n    string_tup += \")\"\n    return string_tup\n",
        "test": "assert     tup_string((\"a\", \"b\", \"c\"))",
        "num_ids": 253
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    n=len(nums)\n    sum=0\n    neg=0\n    for i in range(n):\n        if nums[i]<0:\n            sum+=abs(nums[i])\n            neg+=1\n    return sum+neg\n",
        "test": "assert ",
        "num_ids": 246
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for x in range(n, 0, -1):\n            for y in range(1, (n+1)):\n                print(x, y)\n                if x + y == n:\n                    print(x, y, \"Found\")\n                    return x * y\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 221
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n",
        "test": "assert     zero_count([0,0,0,0,0,0,0,0,0,0]) == 0",
        "num_ids": 2215
    },
    {
        "number": 138,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    else:\n        if is_Sum_Of_Powers_Of_Two(n // 2):\n            return is_Sum_Of_Powers_Of_Two(n // 2)\n        else:\n            return is_Sum_Of_Powers_Of_Two(n - 2)\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(3) == True",
        "num_ids": 289
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * r * r\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 202
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for i in test_list:\n        for e in i:\n            result.add(e)\n    return result",
        "test": "assert     extract_singly(extract_singly([1, [2,3], [4,5]])) == [1, 2, 3, 4, 5]",
        "num_ids": 288
    },
    {
        "number": 141,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length):\n        m = i\n        while m > 0:\n            if nums[m] > nums[m - 1]:\n                nums[m], nums[m - 1] = nums[m - 1], nums[m]\n            m -= 1\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 2342
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                c+=1\n    return c\n",
        "test": "assert     count_samepair(['a','a','b'],['a','b'],['a','b','c'])==3, 'incorrect count'",
        "num_ids": 580
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    from collections import Counter \n    Counter(Input)\n    return len(Counter(Input).values())\n",
        "test": "assert     find_lists([]) == 0",
        "num_ids": 137
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = -1\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if abs(arr[i] - arr[j]) > maxDiff:\n                maxDiff = abs(arr[i] - arr[j])\n    return maxDiff\n",
        "test": "assert     max_Abs_Diff([1, 2, 3, 4, 5, 6, 8, 9, 10]) == 9",
        "num_ids": 2287
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Write your code here. Make sure to write test cases for a range of values\n    pass\n",
        "test": "assert     find_solution(1,2,3) == None",
        "num_ids": 297
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # write your code here\n    pass",
        "test": "assert     remove_elements([1,2,3,4,5], [2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 309
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Your code here\n    return sum([n - i for i in range(0, n // 2 + 1)])\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 132
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = s + l / 2\n    area = (l / 2) * tan(pi / s)\n    return area\n",
        "test": "assert     area_polygon(1,2) == 0, \"the area of regular polygon is not zero\"",
        "num_ids": 228
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a,b = n % 2,n // 2\n    return a * b == n\ndef list_sum(l): \n    '''\n    This function takes a list and returns the sum of all the numbers in the list.\n    '''\n    return sum(l)\n",
        "test": "assert     div_sum(7) == 1",
        "num_ids": 179
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # count = {}\n    # for char in str1:\n    #     if char in count:\n    #         count[char] += 1\n    #     else:\n    #         count[char] = 1\n    # return len(count)\n    \n    # count = [0, 0]\n    # for char in str1:\n    #     if char in count:\n    #         count[char] += 1\n    #     else:\n    #         count[char] = 1\n    # return count\n",
        "test": "assert count_char_position('abac') == 1",
        "num_ids": 229
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for x in A:\n        if x % 2 == 0:\n            even_pair += 1\n    return even_pair\n",
        "test": "assert     find_even_pair([]) == 0, \"Expected 0, but got %s\" % find_even_pair([])",
        "num_ids": 365
    },
    {
        "number": 167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return n * next_power_of_2(n - 1)",
        "test": "assert     next_power_of_2(232) == 2",
        "num_ids": 190
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # your code here\n    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count\n    #combination\n    ",
        "test": "assert ",
        "num_ids": 192
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n",
        "test": "assert     sum_range_list([1,2,3,4,5,6,7], 3, 8) == 11, \"test failed\"",
        "num_ids": 231
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = 0\n    k = 0\n    for i in range(0,4,1):\n        l = (a**2 * math.sin(math.radians(45-90*i)))\n        k = math.sqrt(l)\n        if k!= 0:\n            if k < l:\n                print(\"not a rectangle\")\n            else:\n                print(\"rectangle\")\n        else:\n            print(\"not a rectangle\")\n    print(l)\n    print(k)\n",
        "test": "assert     perimeter_pentagon(2) == math.sqrt(9)",
        "num_ids": 260
    },
    {
        "number": 172,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s =='std':\n        return 2\n    elif s =='std':\n        return 1\n    elif s == '':\n        return 0\n    else:\n        count = 0\n        for i in range(len(s)):\n            if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' or s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U':\n                count += 1\n        return count\n",
        "test": "assert     count_occurance(\"std\") == 2",
        "num_ids": 2218
    },
    {
        "number": 222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)!= len(set(test_tuple)):\n        return False\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[i+1]):\n            return False\n    return True\n",
        "test": "assert     check_type((4, 5, 6, 7, 8)) == True",
        "num_ids": 359
    },
    {
        "number": 223,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # If length of arr is 0, return False\n    if len(arr) == 0:\n        return False\n    \n    # Set the current value of x to be the largest element in arr\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > x:\n            x = arr[i]\n            \n    # Return false if x is the largest element in arr\n    if x == arr[0]:\n        return False\n    \n    # Set the smallest index of arr as the largest element in arr\n    smallestIndex = 0\n    for i in range(1, len(arr)):\n        if arr[i] < x:\n            smallestIndex = i\n            break\n    \n    # Set the largest value to be x\n    for j in range(0, smallestIndex):\n        arr[j] = x\n    \n    # Set the largest element to be the x\n    for k in range(0, smallestIndex):\n        arr[k] = arr[k+1]\n    \n    # Return the array\n    return True\n",
        "test": "assert     is_majority([2,3,4,4,5], 6, 2) == True",
        "num_ids": 501
    },
    {
        "number": 224,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    out_bits = 0\n    while n > 0:\n        n, rem = divmod(n, 2)\n        out_bits += rem\n    return out_bits\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 282
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string = str.lower()\n    return string.replace(' ', '')\n",
        "test": "assert     odd_values_string('') == ''",
        "num_ids": 241
    },
    {
        "number": 227,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        minimum=a\n    elif b>a and b>c:\n        minimum=b\n    else:\n        minimum=c\n    return minimum\n    \n",
        "test": "assert     min_of_three(3,2,4) == 4",
        "num_ids": 395
    },
    {
        "number": 228,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res=0\n    for i in range(n):\n        if (l&(1<<i))!=0:\n            res+=1\n    if res==n:\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(2, 2, 3) == False",
        "num_ids": 307
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[:n] + [-1] + arr[n:]\n",
        "test": "assert ",
        "num_ids": 292
    },
    {
        "number": 230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\" + char + \"\").replace(\"  \",\" \")",
        "test": "assert ",
        "num_ids": 123
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in list1:\n        if len(i) > n:\n            i = i[0:n]\n            res.append(i)\n    return res\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum5(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum6(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum7(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum8(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum9(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum10(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum11(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum12(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum13(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum14(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum15(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum16(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum17(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum18(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "test": "assert ",
        "num_ids": 418
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the semi-perpendicular distance between the cylinder and the centre of the face.\n    r1=np.sqrt(r[0]**2+r[1]**2)\n    r2=np.sqrt(r1**2+h**2)\n    # Calculate the angle between the two vectors.\n    a=(r[1]-r1)\n    b=(r[0]-r1)\n    c=np.arctan2(a,b)\n    # Find the length of the side of the cylinder.\n    s=r2\n    # Find the angle between the two vectors.\n    T=c\n    # Find the radius of the circle in front of the line through the centre of the cylinder.\n    r1=np.sqrt(s**2+r2**2)\n    # Calculate the area of the circle.\n    a=(2*np.pi*r1)**2\n    return a\n    \n    \n    \ndef main():\n    '''\n    Define the argument parsing function.\n    '''\n    # Parse command line arguments.\n    args = parse_arguments()\n    # Define the cone volume.\n    print(f'Generating cone volume of {args.radius} meters.')\n    r = cone_volume(args.radius)\n    # Define the upper and lower bounds of the plot.\n    print(f'Generating plot of upper and lower bounds of the cone volume.')\n    ub_vol, lb_vol = generate_bounds()\n    # Plot the cone volume.\n    plot_cone_volume(r,ub_vol,lb_vol)\n    # Define the approximate surface area of the cone.\n    print(f'Generating approximate surface area of the cone.')\n    # Call the cylindrical function to approximate the surface area.\n    print(f'Approximating surface area of the cone.')\n    approx_surface_area(r)\n    print('\\n')\n    # Define the angular velocity of the cone.\n    print(f'Generating angular velocity of the cone.')\n    # Call the cylindrical function to approximate the angular velocity.\n    print(f'Approximating angular velocity of the cone.')\n    approx_angular_velocity(r)\n    print('\\n')\n    # Define the triangular face area.\n    print(f'Generating triangular face area of the cone.')\n    # Call the cylindrical function to approximate the face area.\n    print(f'Approximating face area of the cone.')\n    approx_triangular_face_area(r)\n    print('\\n')\n    # Define the local surface area.\n    print(f'Generating local surface area of the cone.')\n    # Call the cylindrical function to approximate the surface area.\n    print(f'Approximating local surface area of the cone.')\n    approx_local_surface_area(r)\n    print('\\n')\n    # Define the local tangent and relative surface area.\n    print(f'Generating local tangent and relative surface area of the cone.')\n    # Call the cylindrical function to approximate the surface area.\n    print(f'Approximating local tangent and relative surface area of the cone.')\n    approx_local_tangent_and_relative_surface_area(r)\n    print('\\n')\n    # Define the local tangent and relative error of the surface area.\n    print(f'Generating local tangent and relative error of the surface area of the cone.')\n    # Call the cylindrical function to approximate the tangent error.\n    print(f'Approximating local tangent and relative error of the surface area of the cone.')\n    approx_local_tangent_and_relative_error(r)\n    print('\\n')\n    # Define the normal vector of the cone.\n    print(f'Generating normal vector of the cone.')\n    # Call the cylindrical function to approximate the normal vector.\n    print(f'Approximating normal vector of the cone.')\n    approx_normal_vector(r)\n    print('\\n')\n    # Define the line equation.\n    print(f'Generating line equation of the cone.')\n    # Call the cylindrical function to approximate the line equation.\n    print(f'Approximating line equation of the cone.')\n    approx_line_equation(r)\n    print('\\n')\n    # Define the tangent and relative error of the normal vector.\n    print(f'Generating tangent and relative error of the normal vector of the cone.')\n    # Call the cylindrical function to approximate the tangent error.\n    print(f'Approximating tangent and relative error of the normal vector of the cone.')\n    approx_tangent_and_relative_error(r)\n    print('\\n')\n    # Define the approximate normal vector.\n    print(f'Generating approximate normal vector of the cone.')\n    # Call the cylindrical function to approximate the normal vector.\n    print(f'Approximating approximate normal vector of the cone.')\n    approx_normal_vector(r)\n    print('\\n')\n    # Define the back of the circle.\n    print(f'Generating back of the circle.')\n    # Call the cylindrical function to approximate the back of the circle.\n    print(f'Approximating back of the circle.')\n    approx_back_of_circle(r)\n    print('\\n')\n    # Define the circumscribed circle.\n    print(f'Generating circumscribed circle of the cone.')\n    # Call the cylindrical function to approximate the circumscribed circle.\n    print(f'Approximating circumscribed circle of the cone.')\n    approx_circumscribed_circle(r)\n    print('\\n')\n    # Define the tangent and relative error of the circumscribed circle.\n    print(f'Generating tangent and relative error of the circumscribed circle of the cone.')\n    # Call the cylindrical function to approximate the tangent error.\n    print(f'Approximating tangent and relative error of the circumscribed circle of the cone.')\n    approx_circumscribed_tangent_and_relative_error(r)\n    print('\\n')\n    # Define the approximate normal vector.\n    print(f'Generating approximate normal vector of the cone.')\n    # Call the cylindrical function to approximate the normal vector.\n    print(f'Approximating approximate normal vector of the cone.')\n    approx_normal_vector(r)\n    print('\\n')\n    # Define the approximate tangent.\n    print(f'Generating approximate tangent of the cone.')\n    # Call the cylindrical function to approximate the tangent.\n    print(f'Approximating approximate tangent of the cone.')\n    approx_tangent_and_relative_error(r)\n    print('\\n')\n    # Define the approximate error of the tangent.\n    print(f'Generating approximate error of the cone.')\n    # Call the cylindrical function to approximate the error.\n    print(f'Approximating approximate error of the cone.')\n    approx_tangent_and_relative_error(r)\n    print('\\n')\n    # Define the approximate normal vector.\n    print(f'Generating approximate normal vector of the cone.')\n    # Call the cylindrical function to approximate the normal vector.\n    print(f'Approximating approximate normal vector of the cone.')\n    approx_normal_vector(r)\n    print('\\n')\n    # Define the approximate error of the normal vector.\n    print(f'Generating approximate error of the normal vector of the cone.')\n    # Call the cylindrical function to approximate the error.\n    print(f'Approximating approximate error of the normal vector of the cone.')\n    approx_normal_error(r)\n    print('\\n')\n    # Define the approximate error of the normal vector.\n    print(f'Generating approximate error of the normal vector of the cone.')\n    # Call the cylindrical function to approximate the error.\n    print(f'Approximating approximate error of the normal vector of the cone.')\n    approx_normal_error(r)\n    print('\\n')\n    # Define the approximate error of the back of the circle.\n    print(f'Generating approximate error of the back of the circle.')\n    # Call the cylindrical function t",
        "test": "assert     lateralsuface_cylinder(1,5) == 12",
        "num_ids": 1859
    },
    {
        "number": 234,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    a = l*l\n    print(a)\n    return a\n",
        "test": "assert     volume_cube(1) == 1, 'The function does not return the volume of a cube with side length 1'",
        "num_ids": 137
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = ''\n    while n!= 0:\n        if n % 2 == 0:\n            even_bits = even_bits + '0'\n        else:\n            even_bits = even_bits + '1'\n        n = n // 2\n    return even_bits\n",
        "test": "assert     even_bit_set_number(3) == 1",
        "num_ids": 233
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for element in test_list:\n        if element[0] in d:\n            d[element[0]] += 1\n        else:\n            d[element[0]] = 1\n    return d\n",
        "test": "assert     check_occurences([('a','a'), ('b','a')]) == {'a': 1, 'b': 1}",
        "num_ids": 413
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            count+=1\n    return count\n",
        "test": "assert     number_of_substrings('AaBBBAbBA') == 2",
        "num_ids": 281
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    seq = 1\n    while count < n: \n        seq = seq*2\n        count += 1\n        \n    while seq % m!= 0: \n        seq = seq*2\n        count += 1\n        \n    return count \n",
        "test": "assert ",
        "num_ids": 228
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list=list1\n    for item in list2:\n        new_list.append(item)\n    return new_list\n",
        "test": "assert     replace_list([1,2,3,4,5,6,7,8,9,10],[5,6,7,8,9,10,11,12,13,14]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14], \"replace_list test failed\"",
        "num_ids": 444
    },
    {
        "number": 242,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert ",
        "num_ids": 152
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # E is the error tard to start. \n    E = 1\n    # Get n as the logarithm of the\n    # sqrt of the number.\n    n = math.log(N, 2) \n    # While n is less than E. \n    while n * n < E: \n        # Get the next power of 2. \n        # e is the logarithm of the sqrt. \n        e = math.log(N, 2) \n        # Assign the next power of 2 as \n        # our new exponent. \n        e = e + 1\n        # If e is odd, we have to divide \n        # n by 2. \n        if e % 2 == 1: \n            n = n / 2 \n        else: \n            n = n * 3 + 1 \n    # if n is less than 1, return N. \n    if n < 1: \n        return N \n    # We return a perfect square. \n    N = n \n    return N \n",
        "test": "assert     next_Perfect_Square(2) == 1",
        "num_ids": 468
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Find the current min value of each bitonic subsequence\n    curr_min = min(arr[1:])\n",
        "test": "assert     max_sum([3,2,3,4,1,2,3,1,3]) == 16",
        "num_ids": 566
    },
    {
        "number": 246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #set the initial value of the solution\n    answer = 0\n",
        "test": "assert     (babylonian_squareroot(1) == 0)",
        "num_ids": 304
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    sub = \"\"\n    longest = 0\n    for i in range(len(str)):\n        if i == len(str)-1: \n            if str[i] == str[i+1]: \n                if len(sub) > len(longest): \n                    longest = len(sub)\n                continue\n            else: \n                if str[i] == str[i+1]: \n                    sub = str[i]\n                    continue\n                else: \n                    sub = str[i] + sub\n        else:\n            if str[i] == str[i+1]: \n                continue\n            else: \n                sub = str[i] + sub\n    return longest \n",
        "test": "assert     lps(\"a\") == 1, \"test failed\"",
        "num_ids": 728
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum\n    h_sum = n\n    while n > 1:\n        h_sum = h_sum + n % 10\n        n = n // 10\n    return h_sum\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 145
    },
    {
        "number": 249,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = []\n    for i in array_nums2:\n        if i in array_nums1:\n            res.append(i)\n    return res\n",
        "test": "assert     intersection_array([2, 3, 5], [2, 3, 6]) == [2, 3]",
        "num_ids": 328
    },
    {
        "number": 250,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #return sum(tup.count(x))\n    return tup.count(x)\n",
        "test": "assert     count_X((), 2) == 0",
        "num_ids": 235
    },
    {
        "number": 251,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list\n    ",
        "test": "assert     insert_element(['1','2','3','4','5'], '4') == ['1','2','3','4','5'], 'incorrect'",
        "num_ids": 264
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    # convert n+1 numbers to complex\n    n = len(numbers)\n    if n==1:\n        return numbers[0]\n    else:\n        c = cmath.sqrt(numbers[0])\n        r = convert(numbers[1:])\n        r = c + (r*cmath.sqrt(numbers[0]))\n        return r\n",
        "test": "assert     convert([1+0j, 2+0j]) == (1.0+0.0j, 2.0+0.0j), 'Returned value is incorrect'",
        "num_ids": 366
    },
    {
        "number": 253,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n",
        "test": "assert     count_integer([]) == 0, 'No arguments given'",
        "num_ids": 1641
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    s = []\n    if l == 1:\n        return [[l]]\n",
        "test": "assert     combinations_colors([1, 2, 3, 4, 5, 6], 4) == [[1, 2, 3, 4], [1, 3, 4, 5], [1, 4, 5, 6]]",
        "num_ids": 422
    },
    {
        "number": 256,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        return 0\n",
        "test": "assert     count_Primes_nums(1) == 1",
        "num_ids": 209
    },
    {
        "number": 257,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \ndef add_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns the sum of them.\n    '''\n    return a+b\n",
        "test": "assert     swap_numbers(2,1) == (1,2)",
        "num_ids": 159
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # your code here\n    if len(test_tup1) > len(test_tup2):\n        return (test_tup1[0], test_tup2[-1])\n    else:\n        return (test_tup2[0], test_tup1[-1])",
        "test": "assert     maximize_elements(test_tup1, test_tup2) == (0,1), 'You should maximize elements of tuple.'",
        "num_ids": 457
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_candidate = True\n    for i in range(2,n+1):\n        if n%i==0:\n            prime_candidate=False\n            break\n    if prime_candidate==True:\n        return True\n    else:\n        return False\n",
        "test": "assert     newman_prime(6) == False",
        "num_ids": 245
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = tuple([i/j for i,j in zip(test_tup1, test_tup2)])\n    return result\n",
        "test": "assert     division_elements((1,2), (2,3)) == (0.5)",
        "num_ids": 255
    },
    {
        "number": 262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L < 1:\n        return []\n    if L == 1:\n        return [list1], [list1]\n    index1, index2 = 0, 0\n    result = []\n    while len(list1) >= L:\n        if index1 < len(list1) and index2 < len(list1):\n            result.append(list1[index1:index2])\n            index1 += L\n            index2 += L\n        elif index1 < len(list1):\n            result.append(list1[index1:])\n            index1 += L\n        elif index2 < len(list1):\n            result.append(list1[index2:])\n            index2 += L\n        else:\n            return result, result\n    return result, result\n",
        "test": "assert     split_two_parts([1,2,3,4,5], 2) == [[1,2,3], [4,5]]",
        "num_ids": 511
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age<=2:\n        return 0\n    elif h_age<=4:\n        return 1\n    elif h_age<=6:\n        return 2\n    elif h_age<=8:\n        return 3\n    elif h_age<=10:\n        return 4\n    else:\n        return 5",
        "test": "assert     dog_age(18) == 5",
        "num_ids": 207
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # count the length of the list\n    n = len(S)\n    \n    # initialize an empty list\n    L = []\n    \n    # use a for loop to iterate n times\n    for i in range(0, n, step):\n        L.append(S[i:i+step])\n        \n    # return the list\n    return L\n    \n",
        "test": "assert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 10) == [[1, 2, 3, 4, 5, 6, 7, 8]]",
        "num_ids": 504
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = (2 * (l ** 2)) ** 0.5\n    return s\n",
        "test": "assert     lateralsurface_cube(0.0) == 0.0",
        "num_ids": 189
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 139
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1: return 1\n    if n==2: return 2\n    if n==3: return 4\n    if n==4: return 7\n    if n%3==0: return 3*(n//3)\n    if n%3==1: return 4*(n//3)\n    if n%3==2: return 7*(n//3)\n    return find_star_num(n-1)\n",
        "test": "assert     find_star_num(42) == 42",
        "num_ids": 261
    },
    {
        "number": 269,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    val = ord(k)\n    if val > 127:\n        return val\n    else:\n        return k\n",
        "test": "assert     ascii_value(\"A\") == ord('\u00e1')",
        "num_ids": 139
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert     sum_even_and_even_index([1,2,3,4]) == 6, \"test failed\"",
        "num_ids": 409
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 5\n    return sum\n",
        "test": "assert     even_Power_Sum(0) == 0, \"The function returns the correct result\"",
        "num_ids": 190
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for data in test_list:\n        rear.append(data[1])\n    return rear\n",
        "test": "assert     rear_extract([('apples', 'orange'), ('oranges', 'bananas')]) == ['orange', 'bananas']",
        "num_ids": 381
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1], test_tup1[2] - test_tup2[2], test_tup1[3] - test_tup2[3], test_tup1[4] - test_tup2[4]\n",
        "test": "assert     substract_elements(('a','b'), ('a','b')) == ('a','b')",
        "num_ids": 406
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2)\n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 1, \"Even_binomial_Coeff_Sum should be 1\"",
        "num_ids": 434
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r*h\n",
        "test": "assert ",
        "num_ids": 80
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    list_ = []\n    for i in dict.values():\n        if i > n:\n            list_.append(i)\n    print(list_)\n    return list_\n",
        "test": "assert ",
        "num_ids": 224
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # \n    elements_before_first_element = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] > test_tup[0]:\n            elements_before_first_element += 1\n    return elements_before_first_element\n",
        "test": "assert     count_first_elements(()) == 0",
        "num_ids": 250
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n):\n        if (n % i) == 0:\n            return i\n    return 0\n",
        "test": "assert     is_num_decagonal(1) == 0",
        "num_ids": 361
    },
    {
        "number": 280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    return next((i for i, item_position in enumerate(dlist) if item == item_position[0]), -1)\n",
        "test": "assert ",
        "num_ids": 173
    },
    {
        "number": 281,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "test": "assert     all_unique(['a','a','b', 'c']) == False, \"All elements should be unique\"",
        "num_ids": 315
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for num in nums1:\n        result.append(num)\n    for num in nums2:\n        result.append(num)\n    return result\n",
        "test": "assert     sub_list([2,3,4,5,6,7], [1,2,3,4,5]) == [3,4]",
        "num_ids": 455
    },
    {
        "number": 283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0:\n        return False\n    # n = n * 10\n    # print(f\"{n} is less than or equal to {n%10}\")\n    for i in range(10):\n        if n % 10 == i:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 278
    },
    {
        "number": 284,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n",
        "test": "assert     check_element([1,2,3,4,5],6)==True",
        "num_ids": 181
    },
    {
        "number": 285,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    text = text.replace('a', 'a')\n    text = text.replace('b', 'b')\n    text = text.replace('c', 'c')\n    pattern = re.compile(r'\\b[ab]\\b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('zzzzzzzzzzzzzzz') == False, 'We should not have a boolean to check if the string is valid or not'",
        "num_ids": 418
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n<=1: \n        return a[n]\n    else: \n        result = [0 for i in range(n+1)]\n        for i in range(1, n+1): \n            result[i] = result[i-1] + a[i]\n            #  if (i-k >= 0): \n        return max(result[k:]) \n",
        "test": "assert     max_sub_array_sum_repeated([0,1,2,3,4], 3, 0) == 10",
        "num_ids": 465
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_square = 0\n    for i in range(1, n):\n        sum_square += i ** 2\n    return sum_square\n    \ndef main():\n    '''\n    Write a python function that takes in a number and returns the sum of squares of all even natural numbers.\n    '''\n    print(square_Sum(6))\n    print(square_Sum(4))\n    print(square_Sum(9))\n",
        "test": "assert     square_Sum(3) == ",
        "num_ids": 161
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    max = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if len(str(list1[i][j])) > max:\n                max = len(str(list1[i][j]))\n    return max\n",
        "test": "assert     max_length([]) == 0, 'Empty list'",
        "num_ids": 386
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1 and k==1:\n        return 1\n    if k==1:\n        return 2**k\n    elif n<=1:\n        return 0\n    else:\n        return 2**(k-1) + count_no_of_ways(n-1, k)\n",
        "test": "assert     count_no_of_ways(6, 3) == 6",
        "num_ids": 326
    },
    {
        "number": 292,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    return math.floor(n/m)\n",
        "test": "assert     isinstance(find(1,1),int),'Cannot find the square root of the 1!'",
        "num_ids": 240
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return True\n    if abs(w-h)>10:\n        return False\n    else:\n        if w+h+w==h*h:\n            return True\n        else:\n            if w+h-2*w*math.sin(math.radians(45))>h:\n                return True\n            else:\n                if w+h+math.sin(math.radians(45))*w>h:\n                    return True\n                else:\n                    return False\n",
        "test": "assert     otherside_rightangle(0,2) == 0, 'the third side of a right angled triangle should be 0'",
        "num_ids": 2257
    },
    {
        "number": 294,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n",
        "test": "assert         max_val([3, 5, 1, -4, 6, -7, -2, 0]) == 6",
        "num_ids": 256
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    number = int(number)\n    #  if number is even, return its own divisors\n    if number % 2 == 0:\n        return sum_div(number//2)\n    # if number is odd, return all of its divisors\n    else:\n        #  first, we'll return the sum of the all of its even divisors\n        return sum_div(number//2) + (number%2)\n        #for every even number, we'll return the sum of the divisors of the number\n        #we'll return the sum of the divisors of the number, even and odd\n",
        "test": "assert sum_div(9) == 3",
        "num_ids": 248
    },
    {
        "number": 296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i = 0\n    j = 1\n    count = 0\n    arr.sort()\n    while (i < len(arr)):\n        if (arr[i] < arr[i-1]):\n            count += 1\n        i += 1\n    return count\n    # Write your code here\n",
        "test": "assert     get_Inv_Count([1, 2, 3]) == 2",
        "num_ids": 327
    },
    {
        "number": 297,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 179
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for st in stdata:\n        if max_aggregate < st[1]:\n            max_aggregate = st[1]\n",
        "test": "assert     max_aggregate([(1, 5), (5, 6), (6, 4), (4, 2), (2, 2), (2, 3), (3, 5), (4, 1), (1, 2), (1, 2), (1, 4), (1, 5), (1, 3), (2, 1), (2, 1), (2, 3), (3, 5), (3, 2), (3, 4), (3, 6), (3, 6), (3, 7), (3, 3), (4, 5), (5, 5), (5, 6), (5, 4), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 7), (6, 7), (5, 7), (4, 7), (1, 7)]) == max_aggregate([(1, 5), (5, 6), (6, 4), (4, 2), (2, 2), (2, 3), (3, 5), (4, 1), (1, 2), (1, 2), (1, 4), (1, 5), (1, 3), (2, 1), (2, 1), (2, 3), (3, 5), (3, 2), (3, 4), (3, 6), (3, 6), (3, 7), (3, 7), (3, 7), (4, 7), (5, 7), (5, 7), (5, 7), (6, 7), (6, 7), (6, 7), (5, 7), (4, 7), (1, 7)])",
        "num_ids": 599
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    p = 2**n-1\n    count = 0\n    for i in range(n):\n        count += (p & 1) * (p & 1)\n        p >>= 1\n    return count",
        "test": "assert     count_binary_seq(2) == 2",
        "num_ids": 212
    },
    {
        "number": 301,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d_depth = 0\n    for key, value in d.items():\n        d_depth += 1\n        if isinstance(value, dict):\n            d_depth += dict_depth(value)\n    return d_depth\n",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 255
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = int(rotations)\n    rotations = rotations % 360\n    index = int(index)\n    \n    \n    for i in range(rotations,rotations+rotations) : \n        index = i % 360\n        \n        for j in range(0,len(arr)) : \n            if (index == arr[j][0]) and (j!= index) : \n                return arr[j][1]\n            \n        \n    return -1\n    \ndef sort_List(arr,i) : \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    for j in range(len(arr)) : \n        for k in range(0,len(arr)) : \n            if (arr[j][0] == arr[k][0]) and (i == arr[k][0]) : \n                arr[k],arr[j] = arr[j],arr[k]\n    return arr\n",
        "test": "assert     find_Element([1, 2, 3, 4, 5], [2, 1, 3, 4, 5], 0, 0) == -1",
        "num_ids": 467
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #words = ['p']\n    p = ''\n    for word in words:\n        if word[0] == 'p':\n            p = word\n            break\n    return p\n",
        "test": "assert     start_withp([\"a\", \"s\", \"p\", \"y\", \"t\"]) == ['p', 'a', 't']",
        "num_ids": 233
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    prefix = [None]*(n+1)\n    prefix[index] = 0\n    for i in range(index+1, n+1):\n        if prefix[i-1] == None:\n            preprefix = prefix[i-1]\n        else:\n            preprefix = max(preprefix, prefix[i-1])\n        if i - preprefix + 1 >= k:\n            prefix[i] = preprefix + prefix[i-k]\n    return prefix[n]\n",
        "test": "assert     max_sum_increasing_subseq([-1], 0, 0, 0) == 0",
        "num_ids": 448
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #Create a dictionary to save the tuplex value\n    colon_dict = {}\n    #create a tuple to set the initial colon\n    tuplex = tuplex[:m]\n    #set the length of the tuplex\n    l = len(tuplex)\n    for i in range(0,l):\n        if i == l-1:\n            colon_dict[tuplex[i]] = tuplex[i]\n        else:\n            colon_dict[tuplex[i]] = tuplex[i+1]\n    #create a new list to put the colon\n    colon_list = []\n    #Create the colon list\n    for i in range(1,l):\n        colon_list.append(colon_dict[tuplex[i]])\n    #return the colon\n    return colon_list\n",
        "test": "assert ",
        "num_ids": 535
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def second_largest(nums1, nums2, N):\n        result = []\n        for i in range(N):\n            temp = []\n            for j in range(N):\n                temp.append(nums1[i] * nums2[j])\n            result.append(max(temp))\n        return result\n    result = []\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    for i in range(N):\n        if nums1[i]!= nums2[i]:\n            result.append(nums1[i])\n    for i in range(N-1, -1, -1):\n        if nums1[i]!= nums2[i]:\n            result.append(nums2[i])\n    result.reverse()\n    return result\n",
        "test": "assert     large_product([1,2,3,4,5], [2,4,6,8], 4), \"incorrect number of elements\"",
        "num_ids": 2618
    },
    {
        "number": 309,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a) == type(b):\n        return a if a>b else b\n    else:\n        print(\"Please enter numbers only\")\n",
        "test": "assert     maximum(5, 10) == 10",
        "num_ids": 124
    },
    {
        "number": 310,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.lower()\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('abcdefghijklmnopqrstuvwxyz') == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')",
        "num_ids": 2251
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n:\n        n &= (n-1)\n    else:\n        n = n-1\n    return n\n",
        "test": "assert     set_left_most_unset_bit(1) == 0",
        "num_ids": 334
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * (math.sin(math.radians(h)) / 2)\n    print('The volume is'+ str(v) +'lm2')\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = math.pi * (r ** 2) * (math.sin(math.radians(h)) / 2)\n    print('The volume is'+ str(v) +'lm2')\n    return v\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone and cylinder.\n    '''\n    v = math.pi * (r ** 2) * (math.sin(math.radians(h)) / 2)\n    print('The volume is'+ str(v) +'lm2')\n    return v\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    A = math.pi * r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_rectangle(r):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    A = r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_triangle(r):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    A = 3 * r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_circle_rec(r):\n    '''\n    Write a function to calculate the area of a circle and a rectangle.\n    '''\n    A = math.pi * (r ** 2)\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_circle_circ(r):\n    '''\n    Write a function to calculate the area of a circle and a rectangle.\n    '''\n    A = math.pi * (r ** 2)\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_circle_triangle(r):\n    '''\n    Write a function to calculate the area of a circle and a rectangle.\n    '''\n    A = 3 * r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_rectangle_rec(r):\n    '''\n    Write a function to calculate the area of a rectangle and a circle.\n    '''\n    A = r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_rectangle_circ(r):\n    '''\n    Write a function to calculate the area of a rectangle and a circle.\n    '''\n    A = math.pi * (r ** 2)\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_circle_circle(r):\n    '''\n    Write a function to calculate the area of a circle and a rectangle.\n    '''\n    A = (math.pi * (r ** 2))\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_circle_rectangle(r):\n    '''\n    Write a function to calculate the area of a circle and a rectangle.\n    '''\n    A = 3 * r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_rectangle_triangle(r):\n    '''\n    Write a function to calculate the area of a rectangle and a circle.\n    '''\n    A = r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    V = math.pi * (r ** 2)\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_rectangle(r):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    V = r ** 2\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_triangle(r):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    V = 3 * r ** 2\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_circle_rec(r):\n    '''\n    Write a function to find the volume of a circle and a rectangle.\n    '''\n    V = math.pi * (r ** 2)\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_circle_circ(r):\n    '''\n    Write a function to find the volume of a circle and a rectangle.\n    '''\n    V = math.pi * (r ** 2)\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_circle_triangle(r):\n    '''\n    Write a function to find the volume of a circle and a rectangle.\n    '''\n    V = r ** 2\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_rectangle_rec(r):\n    '''\n    Write a function to find the volume of a rectangle and a circle.\n    '''\n    V = math.pi * (r ** 2)\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_rectangle_circ(r):\n    '''\n    Write a function to find the volume of a rectangle and a circle.\n    '''\n    V = math.pi * (r ** 2)\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_circle_circle(r):\n    '''\n    Write a function to find the volume of a circle and a rectangle.\n    '''\n    V = r ** 2\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_circle_rectangle(r):\n    '''\n    Write a function to find the volume of a circle and a rectangle.\n    '''\n    V = math.pi * (r ** 2)\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_rectangle_triangle(r):\n    '''\n    Write a function to find the volume of a rectangle and a circle.\n    '''\n    V = r ** 2\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_circle_triangle(r):\n    '''\n    Write a function to find the volume of a circle and a rectangle.\n    '''\n    V = math.pi * (r ** 2)\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef area_rec(r):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    A = r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_rec_circ(r):\n    '''\n    Write a function to calculate the area of a rectangle and a circle.\n    '''\n    A = math.pi * (r ** 2)\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_circle_rec(r):\n    '''\n    Write a function to calculate the area of a circle and a rectangle.\n    '''\n    A = math.pi * (r ** 2)\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_circle_rec_circ(r):\n    '''\n    Write a function to calculate the area of a circle and a rectangle.\n    '''\n    A = math.pi * (r ** 2)\n    print('Th",
        "test": "assert     volume_cone(3,7) == 6.0",
        "num_ids": 127
    },
    {
        "number": 388,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2: \n        return n \n    else: \n        return highest_Power_of_2(n//2) \n    \n",
        "test": "assert     highest_Power_of_2(11) == 1",
        "num_ids": 274
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(8) == 21",
        "num_ids": 253
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = string.format(element)\n        list_.append(element)\n",
        "test": "assert add_string([1,2,3], 'abc') == [1,2,3, 'abc']",
        "num_ids": 321
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if l2 == []:\n        return l3\n    if len(l2)!= len(l3):\n        print('Error')\n        return -1\n    r1 = l1[0]\n    r2 = convert_list_dictionary(l1[1:], l2[0], l3[0])\n    return r1, r2\n",
        "test": "assert     convert_list_dictionary(l1, l2, l3) == {'one': {'two': 2, 'three': 3}}",
        "num_ids": 410
    },
    {
        "number": 392,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n + max(n, n+3)\n    elif n == 3:\n        return n + max(n, n+2)\n    else:\n        return n + max(n, n+4)\n",
        "test": "assert     get_max_sum(5) == 14",
        "num_ids": 242
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length\n",
        "test": "assert     max_length_list([]) == 0, 'Length of the list does not match'",
        "num_ids": 396
    },
    {
        "number": 394,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return not any([(test_tup[i] == test_tup[i-1]) for i in range(len(test_tup)-1)])\n",
        "test": "assert     check_distinct([2,2,2,3,3,3,3,4,4,4]) == False",
        "num_ids": 426
    },
    {
        "number": 395,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_list = []\n    for ch in str1:\n        if ch not in char_list:\n            char_list.append(ch)\n    return char_list[0]\n",
        "test": "assert     first_non_repeating_character('aabab') == 'a'",
        "num_ids": 279
    },
    {
        "number": 396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    else:\n        return True\n",
        "test": "assert ",
        "num_ids": 89
    },
    {
        "number": 397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a= sorted(a)\n    b= sorted(b)\n    c= sorted(c)\n    return (a[int(len(a)/2)]+b[int(len(b)/2)]+c[int(len(c)/2)])/3\n",
        "test": "assert     median_numbers(5,7,8) == 5.5, \"Median of three numbers is incorrect\"",
        "num_ids": 267
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # sum = 0\n    # for num in nums:\n    #     sum += num\n    # return sum\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 245
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Write your code here.\n    return (test_tup1[0]^test_tup2[0], test_tup1[1]^test_tup2[1])\n",
        "test": "assert     bitwise_xor((\"zero\", \"one\", \"two\"), (\"two\", \"one\")) == \"two one\"",
        "num_ids": 326
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for item in test_list:\n        if type(item) is dict:\n            freq += len(item.keys())\n    return freq\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 324
    },
    {
        "number": 401,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_tup1 = []\n    nested_tup2 = []\n    for i in test_tup1:\n        nested_tup1.append(i)\n    for i in test_tup2:\n        nested_tup2.append(i)\n    return tuple(nested_tup1) + tuple(nested_tup2)\n",
        "test": "assert     add_nested_tuples(('a','b'), ('c','d')) == ('a','b','c','d')",
        "num_ids": 372
    },
    {
        "number": 404,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n",
        "test": "assert     minimum(1,3)==1",
        "num_ids": 134
    },
    {
        "number": 405,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(tuplex,tuple):\n        return tuplex[0]==tuple1\n    else: \n        return tuplex==tuple1\n",
        "test": "assert     check_tuplex((1,2,3),(1,2,3)) == False",
        "num_ids": 347
    },
    {
        "number": 406,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True \n    else: \n        return False \n",
        "test": "assert     find_Parity(9) == False",
        "num_ids": 2147
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #This solution was inspired from\n    #https://stackoverflow.com/questions/42463868/in-python-how-to-sort-a-list-based-on-last-two-digit-position\n    return sum([int(n[i]) for i in range(len(n)) if i<len(n)-2])\n",
        "test": "assert ",
        "num_ids": 315
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] + nums2[j] == 0:\n                pairs.append((i,j))\n    \n    heapq.heapify(pairs)\n    \n    for i in range(k):\n        heapq.heappop(pairs)\n    \n    return len(pairs)\n",
        "test": "assert     k_smallest_pairs([1, 5, 7], [2, 4], 2) == [[1, 5], [2, 4]]",
        "num_ids": 654
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n",
        "test": "assert     min_product_tuple([(1,4),(2,1),(3,3),(4,2),(5,4),(6,1),(7,3),(8,2),(9,4),(10,2),(11,1),(12,1),(13,2),(14,1),(15,2),(16,4),(17,1),(18,3),(19,2),(20,1),(21,2),(22,4),(23,1),(24,1),(25,2),(26,4),(27,1),(28,3),(29,2),(30,1),(31,1),(32,2),(33,4),(34,1),(35,3),(36,2),(37,4),(38,1),(39,2),(40,1),(41,2),(42,4),(43,1),(44,3),(45,2),(46,1),(47,2),(48,4),(49,1),(50,3),(51,2),(52,1),(53,2),(54,4),(55,1),(56,3),(57,2),(58,1),(59,2),(60,4),(61,1),(62,3),(63,2),(64,1),(65,2),(66,4),(67,1),(68,3),(69,2),(70,1),(71,2),(72,4),(73,1),(74,3),(75,2),(76,1),(77,2),(78,4),(79,1),(80,3),(81,2),(82,1),(83,2),(84,4),(85,1),(86,3),(87,2),(88,1),(89,2),(90,4),(91,1),(92,3),(93,2),(94,1),(95,2),(96,4),(97,1),(98,3),(99,2),(100,1),(101,2),(102,4),(103,1),(104,3),(105,2),(106,1),(107,2),(108,4),(109,1),(110,2),(111,4),(112,1),(113,3),(114,2),(115,1),(116,2),(117,4),(118,1),(119,3),(120,2),(121,1),(122,2),(123,4),(124,1),(125,3),(126,2),(127,1),(128,2),(129,4),(130,1),(131,3),(132,2),(133,1),(134,2),(135,4),(136,1),(137,3),(138,2),(139,1),(140,2),(141,4),(142,1),(143,3),(144,2),(145,1),(146,2),(147,4),(148,1),(149,3),(150,2),(151,1),(152,2),(153,4),(154,1),(155,3),(156,2),(157,1),(158,2),(159,4),(160,1),(161,3),(162,2),(163,1),(164,2),(165,4),(166,1),(167,3),(168,2),(169,1),(170,2),(171,4),(172,1),(173,3),(174,2),(175,1),(176,2),(177,4),(178,1),(179,3),(180,2),(181,1),(182,2),(183,4),(184,1),(185,3),(186,2),(187,1),(188,2),(189,4),(190,1),(191,3),(192,2),(193,1),(194,2),(195,4),(196,1),(197,3),(198,2),(199,1),(200,2),(201,4),(202,1),(203,3),(204,2),(205,1),(206,2),(207,4),(208,1),(209,3),(210,2),(211,1),(212,2),(213,4),(214,1),(215,3),(216,2),(217,4),(218,1),(219,3),(220,2),(221,1),(222,2),(223,4),(224,1),(225,3),(226,2),(227,4),(228,1),(229,3),(230,2),(231,1),(232,2),(233,4),(234,1),(235,3),(236,2),(237,4),(238,1),(239,3),(240,2),(241,1),(242,2),(243,4),(244,1),(245,3),(246,2),(247,4),(248,1),(249,3),(250,2),(251,1),(252,2),(253,4),(254,1),(255,3),(256,2),(257,1),(258,2),(259,4),(260,1),(261,3),(262,2),(263,1),(264,2),(265,4),(266,1),(267,3),(268,2),(269,1),(270,2),(271,4),(272,1),(273,3),(274,2),(275,1),(276,2),(277,4),(278,1),(279,3),(280,2),(281,1),(282,2),(283,4),(284,1),(285,3),(286,2),(287,1),(288,2),(289,4),(290,1),(291,3),(292,2),(293,1),(294,2),(295,4),(296,1),(297,3),(298,2),(299,1),(300,2),(301,4),(302,1),(303,3),(304,2),(305,1),(306,2),(307,4),(308,1),(309,3),(310,2),(311,1),(312,2),(313,4),(314,1),(315,3),(316,2),(317,1),(318,2),(319,4),(320,1),(321,3),(322,2),(323,1),(324,2),(325,4),(326,1),(327,3),(328,2),(329,1),(330,2),(331,4),(332,1),(333,3),(334,2),(335,1),(336,2),(337,4),(338,1),(339,3),(340,2),(341,1),(342,2),(343,4),(344,1),(345,3),(346,2),(347,1),(348,2),(349,4),(350,1),(351,3),(352,2),(353,1),(354,2),(355,4),(356,1),(357,3),(358,2),(359,1),(360,2),(361,4),(362,1),(363,3),(364,2),(365,1),(366,2),(367,4),(368,1),(369,3),(370,2),(371,1),(372,2),(373,4),(374,1),(375,3),(376,2),(377,1),(378,2),(379,4),(380,1),(381,3),(382,2),(383,1),(384,2),(385,4),(386,1),(387,3),(388,2),(389,1),(390,2),(391,4),(392,1),(393,3),(394,2),(395,1),(396,2),",
        "num_ids": 2185
    },
    {
        "number": 410,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    n = len(listval)\n    if n == 0:\n        return 0\n    else:\n        return min(listval)\n",
        "test": "assert     min_val([2, 4, 1]) == 1",
        "num_ids": 220
    },
    {
        "number": 411,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'(?<!^)(?=[A-Z])[a-z]'\n    result = re.sub(pattern, '_', word)\n    return result\n",
        "test": "assert     snake_to_camel(\"TestCase\") == \"TestCase\"",
        "num_ids": 201
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    \n    for number in l:\n        if number%2!= 0:\n            odds.append(number)\n    \n    return odds\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 2221
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    n = int(n)\n    if n > len(list1):\n        raise ValueError('the number of elements cannot be more than the number of tuples')\n    if n > len(list1) - 1:\n        raise ValueError('the number of elements cannot be more than the number of tuples - 1')\n    return list1[n]\n",
        "test": "assert         extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == (4, 5, 6)",
        "num_ids": 372
    },
    {
        "number": 414,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list1 for x in list2)\n",
        "test": "assert     overlapping([1, 2, 3], [1, 2, 3, 4]) == True, \"Overlapping\"",
        "num_ids": 287
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_value = 0\n    for i in range(0,n):\n        for j in range(0,n):\n            if arr[i] * arr[j] > max_value:\n                max_value = arr[i] * arr[j]\n    print(max_value)\n",
        "test": "assert ",
        "num_ids": 301
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for i in Input:\n        if i:\n            return i\n    return None\n",
        "test": "assert ",
        "num_ids": 685
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(i) > max:\n            max = len(i)\n            idx = i\n    return idx\n",
        "test": "assert ",
        "num_ids": 192
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for item in list1:\n        total += item\n    return total * len(list1)\n",
        "test": "assert ",
        "num_ids": 266
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0 or n == 1: \n        return n \n    else: \n        return n * cube_Sum(n-1)",
        "test": "assert     cube_Sum(10) == 210",
        "num_ids": 138
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(test_tup)\n",
        "test": "assert     concatenate_tuple((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)",
        "num_ids": 256
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    return sum(cubes)/len(cubes)\n",
        "test": "assert     find_Average_Of_Cube(1) == 1.0",
        "num_ids": 232
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    r1 = 0\n    r2 = 0\n    r3 = 0\n    r4 = 0\n    r5 = 0\n    r6 = 0\n    r7 = 0\n    r8 = 0\n    r9 = 0\n    r10 = 0\n    r11 = 0\n    r12 = 0\n    r13 = 0\n    r14 = 0\n    r15 = 0\n    r16 = 0\n    r17 = 0\n    r18 = 0\n    r19 = 0\n    r20 = 0\n    r21 = 0\n    r22 = 0\n    r23 = 0\n    r24 = 0\n    r25 = 0\n    r26 = 0\n    r27 = 0\n    r28 = 0\n    r29 = 0\n    r30 = 0\n    r31 = 0\n    r32 = 0\n    r33 = 0\n    r34 = 0\n    r35 = 0\n    r36 = 0\n    r37 = 0\n    r38 = 0\n    r39 = 0\n    r40 = 0\n    r41 = 0\n    r42 = 0\n    r43 = 0\n    r44 = 0\n    r45 = 0\n    r46 = 0\n    r47 = 0\n    r48 = 0\n    r49 = 0\n    r50 = 0\n    r51 = 0\n    r52 = 0\n    r53 = 0\n    r54 = 0\n    r55 = 0\n    r56 = 0\n    r57 = 0\n    r58 = 0\n    r59 = 0\n    r60 = 0\n    r61 = 0\n    r62 = 0\n    r63 = 0\n    r64 = 0\n    r65 = 0\n    r66 = 0\n    r67 = 0\n    r68 = 0\n    r69 = 0\n    r70 = 0\n    r71 = 0\n    r72 = 0\n    r73 = 0\n    r74 = 0\n    r75 = 0\n    r76 = 0\n    r77 = 0\n    r78 = 0\n    r79 = 0\n    r80 = 0\n    r81 = 0\n    r82 = 0\n    r83 = 0\n    r84 = 0\n    r85 = 0\n    r86 = 0\n    r87 = 0\n    r88 = 0\n    r89 = 0\n    r90 = 0\n    r91 = 0\n    r92 = 0\n    r93 = 0\n    r94 = 0\n    r95 = 0\n    r96 = 0\n    r97 = 0\n    r98 = 0\n    r99 = 0\n    r100 = 0\n    r101 = 0\n    r102 = 0\n    r103 = 0\n    r104 = 0\n    r105 = 0\n    r106 = 0\n    r107 = 0\n    r108 = 0\n    r109 = 0\n    r110 = 0\n    r111 = 0\n    r112 = 0\n    r113 = 0\n    r114 = 0\n    r115 = 0\n    r116 = 0\n    r117 = 0\n    r118 = 0\n    r119 = 0\n    r120 = 0\n    r121 = 0\n    r122 = 0\n    r123 = 0\n    r124 = 0\n    r125 = 0\n    r126 = 0\n    r127 = 0\n    r128 = 0\n    r129 = 0\n    r130 = 0\n    r131 = 0\n    r132 = 0\n    r133 = 0\n    r134 = 0\n    r135 = 0\n    r136 = 0\n    r137 = 0\n    r138 = 0\n    r139 = 0\n    r140 = 0\n    r141 = 0\n    r142 = 0\n    r143 = 0\n    r144 = 0\n    r145 = 0\n    r146 = 0\n    r147 = 0\n    r148 = 0\n    r149 = 0\n    r150 = 0\n    r151 = 0\n    r152 = 0\n    r153 = 0\n    r154 = 0\n    r155 = 0\n    r156 = 0\n    r157 = 0\n    r158 = 0\n    r159 = 0\n    r160 = 0\n    r161 = 0\n    r162 = 0\n    r163 = 0\n    r164 = 0\n    r165 = 0\n    r166 = 0\n    r167 = 0\n    r168 = 0\n    r169 = 0\n    r170 = 0\n    r171 = 0\n    r172 = 0\n    r173 = 0\n    r174 = 0\n    r175 = 0\n    r176 = 0\n    r177 = 0\n    r178 = 0\n    r179 = 0\n    r180 = 0\n    r181 = 0\n    r182 = 0\n    r183 = 0\n    r184 = 0\n    r185 = 0\n    r186 = 0\n    r187 = 0\n    r188 = 0\n    r189 = 0\n    r190 = 0\n    r191 = 0\n    r192 = 0\n    r193 = 0\n    r194 = 0\n    r195 = 0\n    r196 = 0\n    r197 = 0\n    r198 = 0\n    r199 = 0\n    r200 = 0\n    r201 = 0\n    r202 = 0\n    r203 = 0\n    r204 = 0\n    r205 = 0\n    r206 = 0\n    r207 = 0\n    r208 = 0\n    r209 = 0\n    r210 = 0\n    r211 = 0\n    r212 = 0\n    r213 = 0\n    r214 = 0\n    r215 = 0\n    r216 = 0\n    r217 = 0\n    r218 = 0\n    r219 = 0\n    r220 = 0\n    r221 = 0\n    r222 = 0\n    r223 = 0\n    r224 = 0\n    r225 = 0\n    r226 = 0\n    r227 = 0\n    r228 = 0\n    r229 = 0\n    r230 = 0\n    r231 = 0\n    r232 = 0\n    r233 = 0\n    r234 = 0\n    r235 = 0\n    r236 = 0\n    r237 = 0\n    r238 = 0\n    r239 = 0\n    r240 = 0\n    r241 = 0\n    r242 = 0\n    r243 = 0\n    r244 = 0\n    r245 = 0\n    r246 = 0\n    r247 = 0\n    r248 = 0\n    r249 = 0\n    r250 = 0\n    r251 = 0\n    r252 = 0\n    r253 = 0\n    r254 = 0\n    r255 = 0\n    r256 = 0\n    r257 = 0\n    r258 = 0\n    r259 = 0\n    r260 = 0\n    r261 = 0\n    r262 = 0\n    r263 = 0\n    r264 = 0\n    r265 = 0\n    r266 = 0\n    r267 = 0\n    r268 = 0\n    r269 = 0\n    r270 = 0\n    r271 = 0\n    r272 = 0\n    r273 = 0\n    r274 = 0\n    r275 = 0\n    r276 = 0\n    r277 = 0\n    r278 = 0\n    r279 = 0\n    r280 = 0\n    r281 = 0\n    r282 = 0\n    r283 = 0\n    r284 = 0\n    r285 = 0\n    r286 = 0\n    r287 = 0\n    r288 = 0\n    r289 = 0\n    r290 = 0\n    r291 = 0\n    r292 = 0\n    r293 = 0\n    r294 = 0\n    r295 = 0\n    r296 = 0\n    r297 = 0\n    r298 = 0\n    r299 = 0\n    r300 = 0\n    r301 = 0\n    r302 = 0\n    r303 = 0\n    r304 = 0\n    r305 = 0\n    r306 = 0\n    r307 = 0\n    r308 = 0\n    r309 = 0\n    r310 = 0\n    r311 = 0\n    r312 = 0\n    r313 = 0\n    r314 = 0\n    r315 = 0\n    r316 = 0\n    r317 = 0\n    r318 = 0\n    r319 = 0\n    r320 = 0\n    r321 = 0\n    r322 = 0\n    r323 = 0\n    r324 = 0\n    r325 = 0\n    r326 = 0\n    r327 = 0\n    r328 = 0\n    r329 = 0\n    r330 = 0\n    r331 = 0\n    r332 = 0\n    r333 = 0\n    r334 = 0\n    r335 ",
        "test": "assert     extract_rear((2,4,3)) == 4",
        "num_ids": 2254
    },
    {
        "number": 425,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for item in list1:\n        if item == x:\n            counter += 1\n    return counter\n",
        "test": "assert     count_element_in_list([1, 2, 3, 4], 3) == 1, \"Test failed\"",
        "num_ids": 157
    },
    {
        "number": 426,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new = []\n    for n in nums:\n        if n % 2!= 0:\n            new.append(n)\n    return new\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 339
    },
    {
        "number": 427,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        d1 = dt.split('-')\n        dd = d1[2] + '-' + d1[1] + '-' + d1[0]\n        mm = d1[3][:2]\n        yyyy = d1[0] + '-' + d1[2] + '-' + d1[1] + '-' + d1[0]\n        return yyyy +'' + mm +'' + dd\n    except:\n        return dt\n",
        "test": "assert     change_date_format(\"2020-10-10\") == \"2020-10-10\"",
        "num_ids": 386
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n",
        "test": "assert ",
        "num_ids": 198
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1, test_tup2\n",
        "test": "assert     and_tuples((1,2), (3,4,5)) == (1,3,5)",
        "num_ids": 262
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a * b) * c\n",
        "test": "assert     parabola_directrix(0, 0, 0) == False, \"a, b, c must be integers\"",
        "num_ids": 214
    },
    {
        "number": 431,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    common_list = []\n    \n    for i in list1:\n        for j in list2:\n            if i == j:\n                common_list.append(i)\n    \n    return len(common_list) > 0\n    \nprint(common_element([1, 2, 3, 4, 5], [2, 3, 5, 5, 5]))\nprint(common_element([1, 2, 3, 4, 5], [2, 3, 5, 5, 5, 8]))",
        "test": "assert     common_element([\"apple\", \"banana\"], [\"apple\", \"cherry\"]) == True",
        "num_ids": 345
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1>base2:\n        if height<base1:\n            return 0\n        elif height<base2:\n            return base1+height\n        else:\n            return base2\n    elif base1<base2:\n        if height<base1:\n            return 0\n        elif height<base2:\n            return base1+height\n        else:\n            return base2\n    else:\n        return 0\n    \n    \n",
        "test": "assert     median_trapezium(7,3,8) == 3",
        "num_ids": 490
    },
    {
        "number": 433,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    if number in arr:\n        return True\n    else:\n        for i in arr:\n            if number > i:\n                count += 1\n        if count == len(arr):\n            return True\n        else:\n            return False\n",
        "test": "assert     check_greater([2, 1, 5, 10, 8], 3) == False, \"incorrect input\"",
        "num_ids": 252
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'[a-z]\\b'\n    text = text.lower()\n    return re.search(pattern, text) is not None\n",
        "test": "assert     text_match_one('abc'), 'not an example'",
        "num_ids": 213
    },
    {
        "number": 435,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    s = str(n)\n    if s[-1] == '0' :\n        return 0\n    else :\n        return int(s[-1])\n",
        "test": "assert     last_Digit(111) == 1",
        "num_ids": 212
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    res=[]\n    for i in list1:\n        if i<0:\n            res.append(i)\n    return res\n",
        "test": "assert         neg_nos([]) == []",
        "num_ids": 183
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    a=str1.split()\n    b=[]\n    c=[]\n    for i in a:\n        if int(i[-1])%2==0:\n            b.append(i)\n    for j in b:\n        c.append(j[1:-1])\n    return''.join(c)\n    \n",
        "test": "assert     remove_odd(\"\") == \"\", \"Test 1 failed\"",
        "num_ids": 280
    },
    {
        "number": 438,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if i[1] > i[0]:\n            count += 1\n    return count\n",
        "test": "assert     count_bidirectional([]) == 0",
        "num_ids": 330
    },
    {
        "number": 439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    i = 0\n    s = \"\"\n    for i in range(len(L)):\n        s += str(L[i])\n    return int(s)\n",
        "test": "assert ",
        "num_ids": 126
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    words = text.split()\n    adverbs = re.findall(r\"(\\w+) [+]\\w*\", text)\n    for word in words:\n        if word[0] == \"A\":\n            #adverb = word[2:]\n            #start = adverbs.index(adverb)\n            start = words.index(word)\n            return start, start+1\n        else:\n            #adverb = word[:-1]\n            #end = adverbs.index(adverb)\n            end = words.index(word)\n            return end, end+1\n    print(\"No adverbs\")\n",
        "test": "assert     find_adverb_position('s\u00fckfakat da\u015fat') == (0, 0)",
        "num_ids": 2424
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s=l*(4*l*(4-1)*l*(4-1)*l*(4-1))\n    return s\n",
        "test": "assert     surfacearea_cube(5) == 10",
        "num_ids": 194
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # we will use array module to make a simple calculation\n    n = len(nums)\n    # first time, we calculate the ratio of positive numbers\n    ratio = [1] * n\n    for i in range(1, n):\n        if nums[i] > 0:\n            ratio[i] = nums[i] / nums[i - 1]\n    # return the ratio\n    return ratio\n",
        "test": "assert     positive_count([-1,2,3,4,5,6,7,8,9])==4.0, \"sad\"",
        "num_ids": 2268
    },
    {
        "number": 443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    min = float(\"inf\")\n    for ele in list1:\n        if ele < 0 and ele > min:\n            min = ele\n    return min\n",
        "test": "assert     largest_neg([1, 2, -3, -4, 5]) == 5",
        "num_ids": 176
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trim_list = []\n    for i in test_list:\n        trim_list.append(i[:K])\n    return trim_list\n",
        "test": "assert     trim_tuple([1, 2, 3, 4, 5], 4) == (1, 2, 3)",
        "num_ids": 311
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    x = test_tup1[0]\n    y = test_tup1[1]\n    print(f\"The index of first element {x} is {index(x, test_tup2)}\")\n    print(f\"The index of second element {y} is {index(y, test_tup2)}\")\n",
        "test": "assert     index_multiplication((\"red\", \"blu\", \"brn\"), (\"g\", \"r\", \"l\")) == (\"r\", \"l\", \"g\")",
        "num_ids": 332
    },
    {
        "number": 446,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurrence = 0\n    for elem in lst:\n        occurrence += 1\n    return occurrence\n",
        "test": "assert     count_Occurrence([], []) == 0",
        "num_ids": 293
    },
    {
        "number": 447,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n",
        "test": "assert     cube_nums([0, 1, 2, 3, 4, 5]) == [0, 1, 8, 27, 64, 125]",
        "num_ids": 345
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result\n",
        "test": "assert     cal_sum(-2) == 0",
        "num_ids": 136
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return len(str)\n",
        "test": "assert         extract_string(['this', 'is', 'a','string', 'that', 'is', 'long'], 'that is a string') == \"is a string that is a long string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a string that is a strin",
        "num_ids": 2347
    },
    {
        "number": 451,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = ''\n    for i in range(len(text1)):\n        if text1[i].isspace():\n            new_text = new_text + text1[i]\n    return new_text\n",
        "test": "assert     remove_whitespaces('') == '', \"remove_whitespaces does not return ''\"",
        "num_ids": 1450
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost-sale_amount>0:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(100,100) == 0",
        "num_ids": 159
    },
    {
        "number": 453,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            sum += i\n    return sum\n",
        "test": "assert     sumofFactors(1) == 1",
        "num_ids": 345
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern_wordz = re.compile(r'z')\n    return pattern_wordz.search(text)!= None\n",
        "test": "assert     text_match_wordz(\"abracadabra\")==False",
        "num_ids": 177
    },
    {
        "number": 455,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12:\n        print('Error: month number cannot be larger than 12')\n        sys.exit()\n    if monthnum2 < 1 or monthnum2 > 12:\n        print('Error: month number cannot be smaller than 1 or larger than 12')\n        sys.exit()\n    if monthnum2 == 1 or monthnum2 == 2:\n        if monthnum2 == 1:\n            return 1\n        elif monthnum2 == 2:\n            return 0\n    if monthnum2 == 3 or monthnum2 == 4:\n        if monthnum2 == 3:\n            return 0\n        elif monthnum2 == 4:\n            return 1\n    if monthnum2 == 5 or monthnum2 == 6:\n        if monthnum2 == 5:\n            return 0\n        elif monthnum2 == 6:\n            return 1\n    if monthnum2 == 7 or monthnum2 == 8:\n        if monthnum2 == 7:\n            return 0\n        elif monthnum2 == 8:\n            return 1\n    if monthnum2 == 9 or monthnum2 == 10:\n        if monthnum2 == 9:\n            return 0\n        elif monthnum2 == 10:\n            return 1\n    if monthnum2 == 11 or monthnum2 == 12:\n        if monthnum2 == 11:\n            return 0\n        elif monthnum2 == 12:\n            return 1\n    else:\n        print('Error: month number does not contain 31 days')\n        sys.exit()\n",
        "test": "assert     check_monthnumb_number(12) == True",
        "num_ids": 617
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for i in range(len(stringlist)):\n        result.append(stringlist[i][::-1])\n    return result\n    \n",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 228
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = lst[0]\n    for i in range(1, len(lst)): \n        if lst[i] < min_length: \n            min_length = lst[i] \n    return min_length\n",
        "test": "assert ",
        "num_ids": 195
    },
    {
        "number": 458,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert     rectangle_area(0,0) == 0",
        "num_ids": 110
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_string = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            new_string += str1[i].lower()\n        else:\n            new_string += str1[i]\n    return new_string\n",
        "test": "assert ",
        "num_ids": 2181
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # code goes here\n    return lst[0]\n",
        "test": "assert     Extract([0,1,2,3,4,5,6,7,8,9,10]) == 0, 'the func is not correct'",
        "num_ids": 274
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr+=1\n    return ctr\ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.islower():\n            ctr+=1\n    return ctr\ndef count_digits(str):\n    '''\n    Write a python function to count the digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr\ndef count_symbols(str):\n    '''\n    Write a python function to count the symbols in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i == \" \":\n            ctr+=1\n        else:\n            ctr=0\n    return ctr\ndef remove_punctuation(str):\n    '''\n    Write a python function to remove all punctuation marks in a given string.\n    '''\n    str = str.translate(str.maketrans({' ': '_', '.': '_', ':': '_', '!': '_', '?': '_'}))\n    return str\ndef split_string(str,delim=',',qu=None):\n    '''\n    Write a python function to split a given string into a list of strings where the values in the list are separated by the given delimiter.\n    The optional parameter 'delim' specifies the delimiter to use. Default value is ','\n    The optional parameter 'qu' specifies the list of characters to be returned. Default value is None.\n    '''\n    str = str.split(delim)\n    if qu is not None:\n        if type(qu) is str:\n            return str[0] + str + str[1:]\n        else:\n            for i in qu:\n                str.append(i)\n            return str\n    return str\ndef find_first_and_last(str):\n    '''\n    Write a python function to count the number of occurrences of the first and last characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i == str[0] or i == str[-1]:\n            ctr+=1\n    return ctr\ndef combine_string(str1,str2):\n    '''\n    Write a python function to combine the two given strings.\n    '''\n    str1 = str1.split(',')\n    str2 = str2.split(',')\n    str1 = str1[1:]\n    str2 = str2[1:]\n    for i in range(len(str1)):\n        str1[i] = str1[i].strip()\n        str2[i] = str2[i].strip()\n    return str1 + str2\ndef reinsert_symbol(str):\n    '''\n    Write a python function to replace all occurrences of a given symbol with another symbol in a given string.\n    '''\n    str = str.replace('!', '_')\n    str = str.replace('?', '_')\n    str = str.replace('.', '_')\n    str = str.replace(' ', '_')\n    return str\ndef remove_punctuation_and_quotations(str):\n    '''\n    Write a python function to remove all punctuation marks from a given string.\n    '''\n    str = str.translate(str.maketrans({' ': '_', '.': '_', ':': '_', '!': '_', '?': '_'}))\n    return str\ndef count_words(str):\n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isalpha() and i not in [' ','.','?','!','_']:\n            ctr+=1\n    return ctr\ndef remove_stopwords(str):\n    '''\n    Write a python function to remove all stopwords from a given string.\n    '''\n    str = str.split()\n    for i in range(len(str)):\n        if str[i].isalpha() and i not in [' ','.','?','!','_']:\n            str.remove(str[i])\n    return \" \".join(str)\ndef find_first_and_last_words(str):\n    '''\n    Write a python function to find the number of occurrences of the first and last characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i == str[0] or i == str[-1]:\n            ctr+=1\n    return ctr\ndef count_words_lens(str):\n    '''\n    Write a python function to count the length of all words in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isalpha() and i not in [' ','.','?','!','_']:\n            ctr+=1\n    return ctr\ndef count_words_double_n_times(str):\n    '''\n    Write a python function to count the number of times each word occurs in a given string.\n    '''\n    ctr = 0\n    for i in str.split():\n        if i.isalpha():\n            ctr+=1\n    return ctr\ndef find_first_and_last_words_double(str):\n    '''\n    Write a python function to find the number of occurrences of the first and last characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i == str[0] or i == str[-1]:\n            ctr+=1\n    return ctr\ndef count_symbols_double_n_times(str):\n    '''\n    Write a python function to count the number of times each symbol occurs in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isalpha():\n            ctr+=1\n    return ctr\ndef count_double_n_times(str):\n    '''\n    Write a python function to count the number of double n times in a given string.\n    '''\n    ctr = 0\n    for i in str.split():\n        if i.isalpha() and i!='':\n            ctr+=1\n    return ctr\ndef remove_stopwords_double_n_times(str):\n    '''\n    Write a python function to remove all stopwords from a given string.\n    '''\n    str = str.split()\n    for i in range(len(str)):\n        if str[i].isalpha() and i not in [' ','.','?','!','_']:\n            str.remove(str[i])\n    return \" \".join(str)\ndef get_ngrams(str):\n    '''\n    Write a python function to count the number of n-grams in a given string.\n    '''\n    ngram_count = 0\n    for i in range(len(str) - 1):\n        if str[i] == str[i + 1]:\n            ngram_count+=1\n    return ngram_count\ndef remove_ngrams(str):\n    '''\n    Write a python function to remove all n-grams from a given string.\n    '''\n    str = str.split()\n    for i in range(len(str) - 1):\n        if str[i] == str[i + 1]:\n            str.remove(str[i])\n    return \" \".join(str)\ndef count_ngrams(str):\n    '''\n    Write a python function to count the number of n-grams in a given string.\n    '''\n    ngram_count = 0\n    for i in range(len(str) - 1):\n        if str[i] == str[i + 1]:\n            ngram_count+=1\n    return ngram_count\ndef get_n_grams(str):\n    '''\n    Write a python function to count the number of n-grams in a given string.\n    '''\n    ngram_count = 0\n    for i in range(len(str) - 1):\n        if str[i] == str[i + 1]:\n            ngram_count+=1\n    return ngram_count\ndef count_n_grams(str):\n    '''\n    Write a pytho",
        "test": "assert upper_ctr(\"MARKER\") == 0",
        "num_ids": 256
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) == 1:\n        result.append(list1)\n    else:\n        for i in range(1, len(list1)+1):\n            for j in combinations_list(list1[:i]):\n                result.append(j + list1[i:])\n    return result\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 519
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n",
        "test": "assert ",
        "num_ids": 190
    },
    {
        "number": 464,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if v == n:\n            return True\n    return False\n",
        "test": "assert     check_value(some_dict, {'a':'b'}) == {'a':'b'}",
        "num_ids": 278
    },
    {
        "number": 465,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1\n",
        "test": "assert     drop_empty({\"key1\":\"value1\", \"key2\":\"value2\"})",
        "num_ids": 192
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n",
        "test": "assert ",
        "num_ids": 197
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #If the sum is equal to the sum of the previous tuple then the addition of the two elements is trivial.\n    if len(test_tup) == 2:\n        print(test_tup[0] + test_tup[1])\n        return\n",
        "test": "assert     add_pairwise(('a','c')) == (\"a\", \"c\", \"b\")",
        "num_ids": 277
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    remainder = sum % n\n    return remainder\n",
        "test": "assert     find_remainder([1, 2, 3, 4], 4) == 2",
        "num_ids": 211
    },
    {
        "number": 472,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)<=1:\n        return False\n    count = 0\n    for i in range(len(l)):\n        if l[i] == l[i-1]:\n            count+=1\n        else:\n            if count >= 2:\n                return False\n            count = 0\n            \n    return True\n",
        "test": "assert     check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == True",
        "num_ids": 337
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1).intersection(set(test_list2)))\n",
        "test": "assert     tuple_intersection([1,2,3,4,5,6,7], [5,6,7,8,9,10]) == (5,6,7)",
        "num_ids": 636
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return (str1.replace(ch,newch))\n",
        "test": "assert     replace_char(\"This is a sentence.\\n\", \"a\", \"b\") == \"This is b\"",
        "num_ids": 283
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create an empty list for values\n    list1 = []\n    # loop through dictionary keys\n    for key, value in dict1.items():\n        # append the values to list\n        list1.append(value)\n    # sort the list\n    list1.sort()\n    # return the list\n    return list1\n",
        "test": "assert ",
        "num_ids": 412
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n",
        "test": "assert     big_sum([]) == 0",
        "num_ids": 237
    },
    {
        "number": 477,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case_str = string.lower()\n    return lower_case_str\n",
        "test": "assert     is_lower('testing')",
        "num_ids": 151
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.lower().replace(str1[0:5], \"\")\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_duplicates(str1):\n    '''\n    Write a function that returns a new string where all the characters that are not repeated are removed.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_words(str1):\n    '''\n    Write a function that removes all the words from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_chars(str1):\n    '''\n    Write a function that removes all the characters from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_space(str1):\n    '''\n    Write a function that removes all the spaces from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_numbers(str1):\n    '''\n    Write a function that removes all the numbers from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_exclamation(str1):\n    '''\n    Write a function that removes all the exclamation marks from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_dot(str1):\n    '''\n    Write a function that removes all the dots from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_slash(str1):\n    '''\n    Write a function that removes all the slashes from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_space_and_punctuation(str1):\n    '''\n    Write a function that removes all the spaces and punctuation from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_stopwords(str1):\n    '''\n    Write a function that removes all the stopwords from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_punctuation_and_stopwords(str1):\n    '''\n    Write a function that removes all the punctuation and stopwords from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_urls(str1):\n    '''\n    Write a function that removes all the URLs from a given string.\n    '''\n    #\n    # Example\n    # 'http://www.example.com' --> 'http://www.example.com'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_chars(str1):\n    '''\n    Write a function that removes all the special characters from a given string.\n    '''\n    #\n    # Example\n    # '",
        "test": "assert     remove_lowercase(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"",
        "num_ids": 329
    },
    {
        "number": 479,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # write your code here\n    return n % 10\n",
        "test": "assert     first_Digit(7) == 7",
        "num_ids": 170
    },
    {
        "number": 554,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Your code here\n    pass\n",
        "test": "assert ",
        "num_ids": 79
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    result = 0\n    for n in range(1, n+1) :\n        result += n**3\n    \n    return result\n",
        "test": "assert     difference(0) == 0",
        "num_ids": 168
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0\n    for i in range(N) :\n        if (A[i] ^ N - i) % 2!= 0 :\n            odd += 1\n    return odd\n",
        "test": "assert     find_Odd_Pair([0,1,0,0],0) == 0",
        "num_ids": 343
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('A') == 'a'",
        "num_ids": 175
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diffs = {}\n    for digit1, digit2 in zip(n1, n2):\n        if digit1 < 10:\n            digit1 = \"0\" + str(digit1)\n        if digit2 < 10:\n            digit2 = \"0\" + str(digit2)\n        diff = abs(digit1 - digit2)\n        diffs[digit1] = diff\n        diffs[digit2] = diff\n    return sum(diffs.values())\n",
        "test": "assert         digit_distance_nums(1, 2) == 1",
        "num_ids": 1101
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    for i in range(0, size):\n        sum += a[i]\n    return sum\n",
        "test": "assert     max_sub_array_sum([1, 2, 3, 4], 4) == 10",
        "num_ids": 199
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    # write your code here\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            test_tup1[i] = test_tup2[test_tup1[i]]\n        else:\n            test_tup1[i] = -1\n",
        "test": "assert     union_elements(('A','B'), ('A','C')) == ('A','C','A','B' )",
        "num_ids": 498
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    Max_Len = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            if(lst[i] > lst[j]):\n                j += 1\n                break\n            j += 1\n        if(j > Max_Len):\n            Max_Len = j\n    return Max_Len\n",
        "test": "assert     Find_Max_Length([1,2,3]) == 3",
        "num_ids": 313
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'([^\\s]+)[\\s]*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.",
        "test": "assert     extract_values('A quotes, \"are\" in the dictionary')=='A quotes, \"are\" in the dictionary'",
        "num_ids": 2335
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    return arr.count(min(arr))\n",
        "test": "assert     count_Pairs([5,7,6,1,3],5)==1",
        "num_ids": 239
    },
    {
        "number": 565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    s = word\n    return s.split(' ')",
        "test": "assert ",
        "num_ids": 88
    },
    {
        "number": 566,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        n = n // 10\n        sum += n % 10\n    return sum\n",
        "test": "assert     sum_digits(7) == 0",
        "num_ids": 195
    },
    {
        "number": 567,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted_list = sorted(list1)\n    if (list1 == sorted_list):\n        return True\n    else:\n        return False\n",
        "test": "assert issort_list([10, 2, 1, 8]) == False",
        "num_ids": 229
    },
    {
        "number": 568,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n",
        "test": "assert     not empty_list(0), 'Empty_list function should return none'",
        "num_ids": 129
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    final_sublists = []\n    for sublist in list1:\n        temp_sublist = sublist[:]\n        temp_sublist.sort()\n        final_sublists.append(temp_sublist)\n    return final_sublists\n",
        "test": "assert     sort_sublists([[\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"]]) == [[\"z\", \"x\", \"y\"], [\"x\", \"y\", \"z\"]]",
        "num_ids": 890
    },
    {
        "number": 572,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # remove duplicate numbers from a given list\n    # write a python function that will remove duplicate numbers from a given list of list \n    return [int(item) for item in set(nums)]\n",
        "test": "assert     two_unique_nums([1,1,1,2,2,3,3,3,3,4,4,4,5,5,5,6,6,7,7,8]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 400
    },
    {
        "number": 573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n",
        "test": "assert ",
        "num_ids": 269
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 0.5 * r * h\n",
        "test": "assert     surfacearea_cylinder(2,2) == 2",
        "num_ids": 135
    },
    {
        "number": 576,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)==0:\n        return True\n    if A[0]==B[0]:\n        return is_Sub_Array(A[1:],B[1:])\n    else:\n        return False\n",
        "test": "assert     is_Sub_Array([1,2,3], [4,5,6]) == False",
        "num_ids": 442
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0 or n == 1: \n        return n \n    return last_Digit_Factorial(n - 1) \n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 193
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    list1.sort()\n    list2.sort()\n    list3.sort()\n    return (list1+list2+list3)\n    \n",
        "test": "assert     interleave_lists([], [], []) == []",
        "num_ids": 505
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #create a list with the dissimilar elements\n    lst = []\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            lst.append(test_tup1[i])\n",
        "test": "assert     find_dissimilar(test_tup1, test_tup2) == [], \"Failed to find dissimilar elements in the given test tuple\"",
        "num_ids": 346
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def even_el(elem): \n        return elem if elem % 2 == 0 else elem*2\n    even_fnc(test_tuple, even_el)\n",
        "test": "assert     even_ele((1, 3, 5), lambda x: x[0]) == [(1, 3, 5)]",
        "num_ids": 396
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # square_b = int(input(\"Please enter the base edge of the square pyramid:\"))\n    # square_h = int(input(\"Please enter the height of the square pyramid:\"))\n    #\n    # # Calculate the area of the square pyramid\n    # area = 0\n    # for i in range(1, square_b):\n    #     area += (i * (square_h ** 2))\n    # print(f\"The area of the square pyramid is: {area}\")\n",
        "test": "assert     surface_Area(5,5) == 25",
        "num_ids": 384
    },
    {
        "number": 582,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    try:\n        return len(dict1) == 0\n    except:\n        return 'Error'\n",
        "test": "assert    my_dict({})",
        "num_ids": 139
    },
    {
        "number": 583,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_number = []\n    for i in range(1, num + 1):\n        catalan_number.append(1)\n        for j in range(1, i):\n            if (j % 2) == 0:\n                catalan_number[i - 1] *= (j // 2)\n            else:\n                catalan_number[i - 1] *= (j * 2)\n    return catalan_number[num - 1]\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 834
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r\"(ly|l|lys|ly|lyc|ly|lyc|ly|lys|lyc|ly|lyc|ly|lyc|ly|lyc|ly|lyc|lyc|ly|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|ly|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|ly",
        "test": "assert     find_adverbs('tupaTuPo') == 'tupaTuPo'",
        "num_ids": 4184
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(item[1],item[0]))\n    for i in range(n):\n        if len(heap)>0:\n            item = heapq.heappop(heap)\n            print(item[0], item[1])\n",
        "test": "assert     expensive_items([1, 2, 3, 1], 3) == [1, 2, 1]",
        "num_ids": 277
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return list(l[:n]) + list(l[n:])\n    \ndef insert_element(l, n, data):\n    '''\n    Write a python function to insert an element at the nth position.\n    '''\n    l.insert(n, data)\n    return l\n",
        "test": "assert     split_Arr(['A', 'B', 'C', 'D', 'E', 'F'], 4) == ['A', 'B', 'C', 'D', 'E', 'F']",
        "num_ids": 168
    },
    {
        "number": 587,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     (list_tuple([1, 2, 3, 4, 5])) == (1, 2, 3, 4, 5)",
        "num_ids": 173
    },
    {
        "number": 588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) <= 2:\n        return nums[0] - nums[1]\n",
        "test": "assert     big_diff(nums=[0, 2, 3, 5, 6, 7, 8, 9]) == [1, 1, 2, 3, 6, 4, 7, 5, 5]",
        "num_ids": 399
    },
    {
        "number": 589,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square_sum = 0\n    for i in range(a):\n        for j in range(b):\n            if i**2 + j**2 == a*b:\n                square_sum += 1\n    return square_sum\n",
        "test": "assert     perfect_squares(3, 4) == False",
        "num_ids": 190
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = y**2 - x**2\n    b = cmath.sqrt(a)\n    c = a * x\n    d = b * y\n",
        "test": "assert     polar_rect(1,1) == [1,1]",
        "num_ids": 2085
    },
    {
        "number": 591,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # define the variable to be passed to the function.\n    start_index = 0\n    end_index = len(newList) - 1\n    while start_index < end_index:\n        temp = newList[start_index]\n        newList[start_index] = newList[end_index]\n        newList[end_index] = temp\n        start_index += 1\n        end_index -= 1\n    return newList\n",
        "test": "assert     swap_List(['b', 'a']) == ['a', 'b']",
        "num_ids": 308
    },
    {
        "number": 592,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0:\n        return 1\n    else:\n        return binomial_Coeff(n-k,k-1) * n / (binomial_Coeff(n,k-1) * binomial_Coeff(n-k,k-1))\n",
        "test": "assert     binomial_Coeff(4, 2) == 1",
        "num_ids": 260
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0', '', ip)\n",
        "test": "assert     removezero_ip(removezero_ip('123.123.123.123')) == '123.123.123.123'",
        "num_ids": 402
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        diff = list1[::2] - list1[1::2]\n    else:\n        diff = list1[1::2] - list1[::2]\n    return diff\n",
        "test": "assert     diff_even_odd([4, 7, 8, 2, 4]) == 5, \"List [4, 7, 8, 2, 4] is not correct\"",
        "num_ids": 527
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return (1 + min(min(int(s, 2), len(str1)-1), min(int(s, 2), len(str2)-1)))\n",
        "test": "assert ",
        "num_ids": 325
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # if the size of a tuple is zero, it returns zero.\n    if len(tuple_list) == 0:\n        return 0\n",
        "test": "assert     tuple_size([0,1,2,3,4]) == 9",
        "num_ids": 280
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr1) or k > len(arr2):\n        return 'not found'\n",
        "test": "assert     find_kth(arr1, arr2, -1) == -1",
        "num_ids": 321
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = int(number)\n    d = 0\n    while num > 0:\n        d = d + 1\n        q = num % 10\n        num = num // 10\n    \n    if d == len(str(num)):\n        return True\n    else:\n        return False",
        "test": "assert     armstrong_number(7)==True",
        "num_ids": 212
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return(sum(x for x in range(number) if x%2==0) + sum(x for x in range(number) if x%2!=0))\n",
        "test": "assert     sum_average(5) == 10.0",
        "num_ids": 184
    },
    {
        "number": 600,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else : \n        return False\n",
        "test": "assert not is_Even(3)",
        "num_ids": 147
    },
    {
        "number": 602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to hold the characters and count the occurrence\n    char_dict = {}\n    char_dict[char] = 0\n    # loop through the string, if the char is present in the dictionary return its index\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n    # return the index of the first occurence of the char\n    for char in char_dict:\n        if char_dict[char] == 1:\n            return char_dict[char]\n    # if no characters are found return -1\n    return -1\n",
        "test": "assert     first_repeated_char(\"abracadabra\") == \"a\"",
        "num_ids": 454
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    res = []\n    for i in range(1, n + 1):\n        if i % 10 == 0:\n            res.append(i)\n        elif i % 3 == 0:\n            res.append(i)\n        else:\n            pass\n    return res\n",
        "test": "assert ",
        "num_ids": 216
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    new_s = \"\"\n    if s:\n        for i in s.split():\n            new_s += i[::-1] + \" \"\n    return new_s\n",
        "test": "assert     reverse_words(\"Alphabetical Order!\") == \"AOdert fOr LOH N w Or!\"",
        "num_ids": 219
    },
    {
        "number": 605,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num<2:\n        return False\n    if num==2:\n        return True\n    if num==3:\n        return True\n    \n    if num%2==0 or num%3==0:\n        return False\n    if num==5:\n        return True\n    \n    for i in range(2,num//2):\n        if num%i==0:\n            return False\n    return True\n",
        "test": "assert     prime_num(121) == False",
        "num_ids": 241
    },
    {
        "number": 606,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree *(math.pi/180)\n    return radian_degree\n",
        "test": "assert         radian_degree(0) == 0",
        "num_ids": 142
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = []\n",
        "test": "assert ",
        "num_ids": 247
    },
    {
        "number": 608,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # base cases\n    if n <= 1: \n        return n\n    # return the base cases \n    return n % 10 + bell_Number(n // 10)\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 237
    },
    {
        "number": 610,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[L:]\n",
        "test": "assert         remove_kth_element([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5], \"The function remove_kth_element returns incorrect output.\"",
        "num_ids": 317
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_N = test_list[0][N]\n    for x in test_list:\n        if x[N] > max_of_N:\n            max_of_N = x[N]\n    return max_of_N\n",
        "test": "assert     max_of_nth([[1,2,3,4],[5,6,7,8],[9,10,11,12]],3) == 12",
        "num_ids": 336
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    if len(lst) == 0:\n        return []\n    for i in range(len(lst)):\n        result.append(lst[i])\n    return result\ndef simple_sort(lst):\n    '''\n    Sort the given list of lists using bubble sort.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst)-i-1):\n            if lst[j][0] < lst[j+1][0]:\n                temp = lst[j]\n                lst[j] = lst[j+1]\n                lst[j+1] = temp\n    return lst\n",
        "test": "assert     merge([[3,4],[5,6]]) == [[3,4],[5,6]]",
        "num_ids": 404
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative = 0\n    for i in range(len(test_list)):\n        cummulative += test_list[i]\n    return cummulative\n",
        "test": "assert     cummulative_sum((1, 2, 3)) == 6, 'cummulative_sum(1, 2, 3) = 3'",
        "num_ids": 273
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            sum += nums[i][j]\n    return sum / len(nums)\n",
        "test": "assert ",
        "num_ids": 216
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n    print()\n    print(\"===Tuple Modulo:\")\n    print(test_tup1, end=' ')\n    print(test_tup2, end=' ')\n    print()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] % test_tup2[i] == 0:\n                print(\"Not Equal\")\n            else:\n                print(\"Equal\")\n    else:\n        print(\"Lengths are not equal\")\n",
        "test": "assert     tuple_modulo(test_tup1, test_tup2) == (7, 14), \"Tuple Modulo Test Failed\"",
        "num_ids": 515
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    N = len(steps)\n    visited = [[False for _ in range(N)] for _ in range(N)]\n",
        "test": "assert     min_Jumps(2,4) == 2",
        "num_ids": 279
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # find the number of elements in the first list\n    n1 = len(nums1)\n    # find the number of elements in the second list\n    n2 = len(nums2)\n    # create a 2d array\n    array = [[0 for x in range(n2)] for y in range(n1)]\n    for i in range(n1):\n        for j in range(n2):\n            array[i][j] = nums1[i] // nums2[j]\n    return array\n",
        "test": "assert     div_list([], []) == []",
        "num_ids": 448
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = test_str.split(\" \")\n    for i in range(len(result)):\n        result[i] = str(result[i])\n        result[i] = result[i][::-1]\n    return \" \".join(result)\n",
        "test": "assert     move_num(\"1\") == \"1\"",
        "num_ids": 363
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    l=[]\n    for i in range(1,len(a)):\n        for j in range(i,len(a)):\n            if a[i]%a[j]==0:\n                l.append((a[i],a[j]))\n                if len(l)>=len(set(l)):\n                    return(len(l))\n    return(len(l))\n",
        "test": "assert     largest_subset([1]) == [1]",
        "num_ids": 2177
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    if n % 2 == 0:\n        return (sorted_arr1[n//2] + sorted_arr2[n//2]) / 2\n    else:\n        return sorted_arr1[n//2]\n",
        "test": "assert     get_median([1,2,3,4], [2,3,4,5], 4) == 3.5, 'for demo'",
        "num_ids": 549
    },
    {
        "number": 623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    i=0\n    while i<len(nums):\n        j=i\n        while j<len(nums):\n            nums[i]**=nums[j]\n            j+=1\n        i+=1\n    return nums\n",
        "test": "assert ",
        "num_ids": 261
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_count = 0\n    for char in string:\n        if char.isupper():\n            upper_count += 1\n    if upper_count == string.count(' '):\n        return True\n    return False\n",
        "test": "assert     is_upper(\"foo\") == True",
        "num_ids": 177
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(\"The new list\")\n    print(newList)\n    print(\"***********************************************************\")\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n    print(\"***********************************************************\")\n    \n    return newList\n    \n    \n    \ndef remove_element(list, element):\n    '''\n    Write a python function that remove the element from a list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list.remove(element)\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef get_length(list):\n    '''\n    Write a python function to get the length of a list.\n    '''\n    print(\"The list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(len(list))\n    return len(list)\n    \n    \ndef reverse_string(list):\n    '''\n    Write a python function to reverse a string.\n    '''\n    print(\"The new string\")\n    print(list)\n    print(\"***********************************************************\")\n    list.reverse()\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef find_Index(list, element):\n    '''\n    Write a python function to find the index of a element in a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list.index(element))\n    return list.index(element)\n    \n    \ndef clear_list(list):\n    '''\n    Write a python function to clear a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list.clear()\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef insert_in_list(list, element, index):\n    '''\n    Write a python function to insert an element in a given list at a particular index.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list.insert(index, element)\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef delete_list(list):\n    '''\n    Write a python function to delete a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list.clear()\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef map_list(list):\n    '''\n    Write a python function to map a list to another list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    new_list = [element for element in list]\n    print(new_list)\n    print(\"***********************************************************\")\n    return new_list\n    \n    \ndef zip_list(list):\n    '''\n    Write a python function to zip a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list1 = list[0]\n    list2 = list[1]\n    list3 = list[2]\n    list4 = list[3]\n    list5 = list[4]\n    new_list = list1, list2, list3, list4, list5\n    print(new_list)\n    print(\"***********************************************************\")\n    return new_list\n    \n    \ndef find_length_list(list):\n    '''\n    Write a python function to find the length of a list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(len(list))\n    return len(list)\n    \n    \ndef reverse_search(list, target):\n    '''\n    Write a python function to search a given list for a given target.\n    '''\n    print(\"The list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(\"The element was found at the given index\")\n    print(list.index(target))\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef sort_list(list):\n    '''\n    Write a python function to sort a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list.sort()\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef all_moves(list):\n    '''\n    Write a python function to get all moves of a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef all_moves_in_path(list, starting_point):\n    '''\n    Write a python function to get all moves of a given list with a given starting point.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list.index(starting_point))\n    return list\n    \n    \ndef all_moves_in_path_random(list, starting_point):\n    '''\n    Write a python function to get all moves of a given list with a given starting point.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list_copy = list.copy()\n    print(list_copy)\n    print(list_copy.index(starting_point))\n    return list\n    \n    \ndef all_moves_in_path_random_random(list, starting_point):\n    '''\n    Write a python function to get all moves of a given list with a given starting point.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list_copy = list.copy()\n    print(list_copy)\n    list_copy.remove(starting_point)\n    print(list_copy)\n    return list\n    \n    \ndef make_move(list):\n    '''\n    Write a python function to make a move in a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list.remove(list[0])\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef print_list(list):\n    '''\n    Write a python function to print a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list[0])\n    return list\n    \n    \ndef print_list_2(list):\n    '''\n    Write a python function to print a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list[0])\n    return list\n    \n    \ndef print_list_3(list):\n    '''\n    Write a python function to print a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list[0])\n    return list\n    \n    \ndef print_list_4(list):\n    '''\n    Write a python function to print a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list[0])\n    return list\n    \n    \ndef print_list_5(list):\n    '''\n    Write a python function to print a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list[0])\n    return list\n    \n    \ndef print_list_6(list):\n    '''\n    Write a python function to print a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list[0])\n    print",
        "test": "assert     swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 292
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    l = r * (r - 1) / 2\n    area = (l * r) / 2\n    return area\n",
        "test": "assert     triangle_area(4) == 12, \"triangle_area() should return the area of the triangle\"",
        "num_ids": 208
    },
    {
        "number": 627,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start > end:\n        return None\n    mid = (start+end)//2\n    if array[mid]!= array[mid+1]:\n        return array[mid]\n    if mid == start:\n        return array[mid+1]\n    else:\n        return find_First_Missing(array,start,mid-1)\n",
        "test": "assert     find_First_Missing(array = [1,6,5,2,4,8,7,3,5,9,1,6,8]) == 7, \"test failed\"",
        "num_ids": 364
    },
    {
        "number": 628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    #Splitting string to list and separating spaces\n    string = string.split()\n    #Finding length of list, so that the whole string is replaced\n    n = len(string)\n    #print(string)\n    #print(n)\n    #print(string[1])\n    #print(string[0])\n    #print(string[1][0])\n    #print(string[0][0])\n    #Replace the spaces with %20\n    string = [string[0][0] % 20]\n    #print(string[0][0])\n    #print(string[0][0])\n    #Remove the first and the second element from the list\n    for i in range(n-1):\n        #print(string[i][0])\n        #print(string[i][1])\n        #print(string[i][0])\n        string[i] ='' + string[i][0] +'' + string[i][1]\n    #print(string[n-1][0])\n    #print(string[n-1][1])\n    #print(string[n-1][0])\n    #Print the new string\n    return''.join(string)\n    ",
        "test": "assert     replace_spaces('Hello, world!') == 'H%2B%20l%20e!'",
        "num_ids": 417
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in range(0, len(list), 2):\n        even_list.append(list[i])\n    return even_list\n",
        "test": "assert     Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 301
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #List to store the coordinates\n    coordinates = []\n    #Check if the given element is a coordinate pair\n    if ele in sub:\n        coordinates.append(ele)\n    #For every adjacent element\n    for i in ele:\n        #Check if the element is a coordinate pair\n        if i in sub:\n            coordinates.append(i)\n    #Return the coordinates\n    return coordinates\n",
        "test": "assert     adjac((1,0,1,1)) == [[1,0],[1,1],[1,1]]",
        "num_ids": 273
    },
    {
        "number": 631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    words = text.split()\n    words = [x.strip() for x in words]\n    words = [x.upper() for x in words]\n    words = [x.lower() for x in words]\n    return''.join(words)\n",
        "test": "assert     replace_spaces(\"This is a  _string_ \") == \"This_is_a_string_ \"",
        "num_ids": 296
    },
    {
        "number": 632,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) == 0:\n        return []\n    elif len(num_list) == 1:\n        return num_list\n    elif len(num_list) == 2:\n        return [num_list[0]] + num_list[1:]\n    else:\n        return [num_list[0]] + move_zero(num_list[1:])\n",
        "test": "assert     move_zero(['1','0','0','1','0','0']) == ['1','0','0','1','0','0'], \"wrong\"",
        "num_ids": 408
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(0,n-1):\n        if arr[i] == arr[i+1] and arr[i]!= 0:\n            x = x + arr[i]\n    return x\n",
        "test": "assert     pair_xor_Sum([],0) == 0",
        "num_ids": 235
    },
    {
        "number": 635,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = []\n    for element in iterable:\n        heapq.heappush(l, element)\n    return l\n",
        "test": "assert     'pass'=='pass'",
        "num_ids": 288
    },
    {
        "number": 637,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (actual_cost-sale_amount)<0:\n        return False\n    return True\n",
        "test": "assert     noprofit_noloss(1,1) == 1, \"The function doesn't pass the test\"",
        "num_ids": 223
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = v*(9.0/5.0 + 32.0/100.0)\n    return round(math.log((v/4.0), 1.0+c),2)\n",
        "test": "assert ",
        "num_ids": 453
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s=0\n    for i in sample_names:\n        if i.startswith('a'):\n            s+=len(i)\n    return s\n",
        "test": "assert     sample_nam([]) == 0",
        "num_ids": 237
    },
    {
        "number": 640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    list_items = list(items)\n    \n    for i in range(len(list_items)):\n        if list_items[i][0] == '(':\n            if list_items[i][-1] == ')':\n                list_items[i] = list_items[i][0:-1]\n        elif list_items[i][-1] == ')':\n            if list_items[i][0] == '(':\n                list_items[i] = list_items[i][0:1]\n        if list_items[i][0] == '*':\n            if list_items[i][-1] == '*':\n                list_items[i] = list_items[i][0:-1]\n        elif list_items[i][0] == '+':\n            if list_items[i][-1] == '*':\n                list_items[i] = list_items[i][0:1]\n        if list_items[i][0] == '-':\n            if list_items[i][-1] == '+':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '+':\n            if list_items[i][-1] == '-':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '-':\n            if list_items[i][-1] == '-':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '*':\n            if list_items[i][-1] == '-':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '+':\n            if list_items[i][-1] == '-':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '+':\n            if list_items[i][-1] == '*':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '*':\n            if list_items[i][-1] == '*':\n                list_items[i] = list_items[i][0:1]\n    return ''.join(list_items)\n",
        "test": "assert     remove_parenthesis(\"2 - 3\") == \"2 - (3)\"",
        "num_ids": 1039
    },
    {
        "number": 641,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 0\n    while (i<=n): \n        j = (n-i)\n        if (j%2==0): \n            return True\n        i += 1\n    return False\n",
        "test": "assert     is_nonagonal(1) == True",
        "num_ids": 226
    },
    {
        "number": 643,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    pattern = 'z'\n    for word in text.split():\n        if re.match('[a-zA-Z0-9]+', word):\n            pattern += 'z'\n            print('\\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0438 {}: {}\\n'.format(pattern, len(word)))\n            \n    # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n    if re.match(pattern, text):\n        #print('\\n\u0421\u0442\u0440\u043e\u043a\u0430 {} \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 {}\\n'.format(text, pattern))\n        return True\n    else:\n        #print('\\n\u0421\u0442\u0440\u043e\u043a\u0430 {} \u043d\u0435 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 {}\\n'.format(text, pattern))\n        return False\n",
        "test": "assert     text_match_wordz_middle('123') == False",
        "num_ids": 455
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # create a list to store the reversed elements\n    output = []\n",
        "test": "assert ",
        "num_ids": 316
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup\n",
        "test": "assert add_dict_to_tuple(\"foo\", {\"foo\":1}) == (\"foo\", 1)",
        "num_ids": 892
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Initialize the result variable.\n    result = 0\n    # For each path\n    for path in range(n):\n        # For each cell of the path\n        for cell in range(n):\n            # If this cell is visited in the path\n            if cost[path][cell] > 0:\n                # Add the total cost as the result\n                result += cost[path][cell]\n    # Return the result\n    return result/n\n",
        "test": "assert     maxAverageOfPath(costList) == 10",
        "num_ids": 823
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_to_check = students.items()\n    filtered_students = []\n    \n    for name, (height, weight) in students_to_check:\n        if height > h and weight > w:\n            filtered_students.append(name)\n        \n    return filtered_students\n",
        "test": "assert not    filter_data({\"Harry\":(70,50), \"Ron\":(70,50), \"Hermione\":(70,50)}, 30, 50), \"passed\"",
        "num_ids": 290
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    nums1.sort()\n    nums2.sort()\n    \n    i, j, c = 0, 0, 0\n    \n    # loop through each element in the lists\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            c += 1\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    return c\n",
        "test": "assert     count_same_pair([1,2,1,2,2,3], [1,2,3,1]) == 4",
        "num_ids": 478
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base > 0:\n        digit = base % 10\n        sum += digit\n        base = base // 10\n    return sum\n",
        "test": "assert power_base_sum(2,4) == 7, \"Should be 7\"",
        "num_ids": 207
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = str(text1)\n    quotation_chars = ['\u201c', '\u201d', '&']\n    for char in quotation_chars:\n        text = text.replace(char, \" \")\n    return text.split(\" \")\n",
        "test": "assert     extract_quotation(\"\"\"What is the price of an apple? ",
        "num_ids": 215
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = [x * (x+1) for x in test_tup]\n    return tuple(new_tup)\n",
        "test": "assert     multiply_elements((1, 2, 3, 4, 5)) == (2, 10)",
        "num_ids": 310
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1=list(set(lst1))\n    lst2=list(set(lst2))\n    return (sum(lst1)+sum(lst2))\n",
        "test": "assert     sum_list([1,2,3,4,5], [2,3,4,5,6]) == [1, 3, 6, 10, 15]",
        "num_ids": 321
    },
    {
        "number": 730,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    N = len(nums)\n    for i, x in enumerate(nums):\n        while i < N - 1 and nums[i]!= nums[i + 1]:\n            i += 1\n        res.append(x)\n    return res\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 723
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Simple Area calculation\n    return (r*h)\n",
        "test": "assert     lateralsurface_cone(5,1) == [1,2,3,4,5,5,5,5,5,5,5,5,5,5]",
        "num_ids": 339
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern, r':\\1', text)\n    \ndef replace_all_special_chars(text):\n    '''\n    Write a function that replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern, r':\\1', text)\n    \ndef replace_stopwords(text):\n    '''\n    Write a function to replace a list of stopwords with a single space.\n    '''\n    pattern = r'\\b(?u)n\\'t\\b'\n    return re.sub(pattern,'', text)\n    \ndef remove_punctuation(text):\n    '''\n    Write a function to remove a list of punctuation marks from a text.\n    '''\n    pattern = r'[^a-zA-Z]*\\.'\n    return re.sub(pattern, '', text)\n    \ndef remove_stopwords(text):\n    '''\n    Write a function to remove a list of stopwords from a text.\n    '''\n    pattern = r'(?u)\\b(?:[a-zA-Z]\\.)+\\b'\n    return re.sub(pattern,'', text)\n    \ndef remove_punctuation(text):\n    '''\n    Write a function to remove a list of punctuation marks from a text.\n    '''\n    pattern = r'(?u)\\b(?:[a-zA-Z]\\.)+\\b'\n    return re.sub(pattern, '', text)\n    \ndef remove_stopwords(text):\n    '''\n    Write a function to remove a list of stopwords from a text.\n    '''\n    pattern = r'(?u)\\b(?:[a-zA-Z]\\.)+\\b'\n    return re.sub(pattern,'', text)\n    \ndef remove_punctuation(text):\n    '''\n    Write a function to remove a list of punctuation marks from a text.\n    '''\n    pattern = r'(?u)\\b(?:[a-zA-Z]\\.)+\\b'\n    return re.sub(pattern,'', text)\n    \ndef normalize_text(text):\n    '''\n    Write a function to normalize case and whitespace.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern, r' \\1 ', text)\n    \ndef normalize_text_2(text):\n    '''\n    Write a function to normalize case and whitespace.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern, r' \\1 ', text)\n    \ndef lowercase_text(text):\n    '''\n    Write a function to lowercase the text.\n    '''\n    pattern = r'(?u)^[a-z]+\\s*'\n    return re.sub(pattern, '', text)\n    \ndef normalize_text_3(text):\n    '''\n    Write a function to normalize case and whitespace.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef normalize_text_4(text):\n    '''\n    Write a function to normalize case and whitespace.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef capitalize_first_word(text):\n    '''\n    Write a function to capitalize first word in a text.\n    '''\n    pattern = r'(?u)^(?:[A-Z]\\.)+'\n    return re.sub(pattern,'', text)\n    \ndef tokenize_text(text):\n    '''\n    Write a function that takes a string as an argument and returns a list of\n    tokens.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.split(pattern, text)\n    \ndef strip_non_alphanumeric(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is stripped of all non-alphanumeric characters.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern, '', text)\n    \ndef tokenize_text_2(text):\n    '''\n    Write a function that takes a string as an argument and returns a list of\n    tokens.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.split(pattern, text)\n    \ndef remove_punctuation_2(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is removed of punctuation.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef remove_punctuation_3(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is removed of punctuation.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef remove_punctuation_4(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is removed of punctuation.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef remove_stopwords_2(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is removed of stopwords.\n    '''\n    pattern = r'(?u)^(?:[A-Z]\\.)+'\n    return re.sub(pattern,'', text)\n    \ndef remove_stopwords_3(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is removed of stopwords.\n    '''\n    pattern = r'(?u)^(?:[A-Z]\\.)+'\n    return re.sub(pattern,'', text)\n    \ndef remove_stopwords_4(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is removed of stopwords.\n    '''\n    pattern = r'(?u)^(?:[A-Z]\\.)+'\n    return re.sub(pattern,'', text)\n    \ndef remove_stopwords_5(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is removed of stopwords.\n    '''\n    pattern = r'(?u)^(?:[A-Z]\\.)+'\n    return re.sub(pattern,'', text)\n    \ndef normalize_text_5(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is normalized to lowercase.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef lowercase_text_5(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is normalized to lowercase.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef normalize_text_6(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is normalized to lowercase.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef lowercase_text_6(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is normalized to lowercase",
        "test": "assert     replace_specialchar('hello world') == 'eHlvdloU'",
        "num_ids": 163
    },
    {
        "number": 733,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    index = 0\n    #looping through the array and checking the left boundary if there is a match\n    while index < len(A) and A[index] < x:\n        index += 1\n    #if the left boundary is found, it means that the value is found in the right boundary\n    if index < len(A):\n        return index\n    else:\n        return -1\n",
        "test": "assert     find_first_occurrence([1,2,1], 1) == 0, \"Number 1 is not in the array\"",
        "num_ids": 299
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    S = 0\n    temp = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            S += arr[i]\n            temp += arr[i]\n            temp *= arr[i]\n    return S\n",
        "test": "assert     sum_Of_Subarray_Prod( [1,3,4] ) == 8, \"Expected to find 8 but got 0\"",
        "num_ids": 326
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    b = n\n    \n    b = bin(b)[2:]\n    b = list(b)\n    b[-1] = '0'\n    \n    b = ''.join(b)\n    b = int(b, 2)\n    \n    if b!= 1:\n        b = bin(b)[2:]\n        b = list(b)\n        b[-1] = '1'\n        \n        b = ''.join(b)\n        b = int(b, 2)\n        \n        if b!= 0:\n            return False\n        else:\n            return True\n    else:\n        return False\n",
        "test": "assert     set_middle_bits(26) == 0b0011110000",
        "num_ids": 263
    },
    {
        "number": 736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    h = len(a)\n    i = bisect.bisect_left(a, x)\n    if a[i] == x:\n        return i\n    elif a[i] > x:\n        return h-1\n    else:\n        return i\n",
        "test": "assert     left_insertion([1, 2, 3, 5, 6, 7, 8, 9], 1) == True",
        "num_ids": 211
    },
    {
        "number": 737,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matcher = re.search(regex, string)\n    if matcher!= None:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_str('aeiouAEIOU') == True",
        "num_ids": 163
    },
    {
        "number": 738,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 166
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n",
        "test": "assert     find_Index(12) == 2, 'incorrect'",
        "num_ids": 199
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # make a dictionary out of the tuple\n    out = {}\n    # for each element in the tuple, \n    # check if it is in the dictionary, \n    # if so add the element to the dictionary\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) is tuple:\n            out[i] = tuple_to_dict(test_tup[i])\n        else:\n            out[i] = test_tup[i]\n    return out\n",
        "test": "assert     tuple_to_dict((1,2,3)) == {1:2,3:None}",
        "num_ids": 416
    },
    {
        "number": 741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s:\n        if i!='' and i!= '\\n' and i!= '\\r' and i!= '\\t' and i!='':\n            print(i)\n",
        "test": "assert ",
        "num_ids": 272
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return 0.5\n    elif side == 2:\n        return 0.25*math.sqrt(3)\n    elif side == 3:\n        return 0.75*math.sqrt(3)\n    elif side == 4:\n        return math.sqrt(3)\n    else:\n        return 0\n",
        "test": "assert     area_tetrahedron(0) == 0",
        "num_ids": 2297
    },
    {
        "number": 743,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m-1::-1]\n",
        "test": "assert     rotate_right(['a', 'b', 'c', 'd', 'e'], 2), \"Rotate right by 2 not needed\"",
        "num_ids": 408
    },
    {
        "number": 744,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert     check_none((1,2,3,4,5)) == False",
        "num_ids": 164
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = str(startnum)\n    endnum = str(endnum)\n    return [int(i) for i in startnum] + [int(i) for i in endnum]\n",
        "test": "assert     divisible_by_digits(1, 2) == [1, 2], 'Should be 1 and 2'",
        "num_ids": 287
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r < 0):\n        r = -r\n    if (a < 0):\n        a = -a\n    if (a > 360):\n        a = 360\n",
        "test": "assert     sector_area(r=8,a=30) == None",
        "num_ids": 410
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    m = len(Z)\n    if m == 0 or n == 0: \n        return \"\"\n    #  build the table for the LCS\n    #  first column : index of LHS\n    #  second column : index of RHS\n    #  third column : LHS LCS\n    #  fourth column : RHS LCS\n    #  initialize the lcs\n    lcs = [[0 for i in range(n + 1)] for i in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n    #  find the LCS for the first string\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if X[i - 1] == Z[j - 1]:\n                lcs[i][j] = 1 + lcs[i - 1][j - 1]\n            else:\n                lcs[i][j] = 0\n    #  find the LCS for the second string\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if Y[i - 1] == Z[j - 1]:\n                lcs[i][j] = 1 + lcs[i - 1][j - 1]\n            else:\n                lcs[i][j] = 0\n    #  find the LCS for the third string\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if X[i - 1] == Z[j - 1]:\n                lcs[i][j] = 1 + lcs[i - 1][j - 1]\n            else:\n                lcs[i][j] = 0\n    #  return the lcs\n    return lcs[-1][-1]",
        "test": "assert     lcs_of_three(\"xca\",\"xy\",\"xcb\") == 2",
        "num_ids": 735
    },
    {
        "number": 748,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word_list = str1.split()\n    capital_word_list = []\n    for word in word_list:\n        capital_word_list.append(word.capitalize())\n    return''.join(capital_word_list)\n",
        "test": "assert     capital_words_spaces('hello') == 'Hello'",
        "num_ids": 433
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_str = []\n    for i in range(0,len(nums_str)):\n        count = 0\n        for j in range(0, len(nums_str) - i):\n            if nums_str[j] > nums_str[j+1]:\n                temp = nums_str[j]\n                nums_str[j] = nums_str[j+1]\n                nums_str[j+1] = temp\n                count += 1\n        if count!= 0:\n            sorted_str.append(nums_str[i])\n            for k in range(i,len(nums_str)):\n                if nums_str[k] > nums_str[k+1]:\n                    temp = nums_str[k]\n                    nums_str[k] = nums_str[k+1]\n                    nums_str[k+1] = temp\n                    count += 1\n        if count == 0:\n            break\n    return sorted_str\n        \n",
        "test": "assert     sort_numeric_strings([]) == []",
        "num_ids": 561
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([], (4, 5, 6, 7)) == (4, 5, 6, 7)",
        "num_ids": 288
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] <= arr[2 * i] or arr[i] <= arr[2 * i + 1]:\n        return False\n    if not check_min_heap_helper(arr, 2 * i):\n        return False\n    return True\n",
        "test": "assert     check_min_heap_helper([1,2,3,4,5,6], 1) == False",
        "num_ids": 272
    },
    {
        "number": 752,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    num = [None] * n\n    num[0] = 1\n    for i in range(n):\n        num[i+1] = 1 + num[i]\n",
        "test": "assert     0!= 1 and 0!= 1 and 0!= 1 and 0!= 3 and 0!= 3 and 0!= 5 and 0!= 5 and 0!= 11 and 0!= 21 and 0!= 43 and 0!= 85 and 0!= 171 and 0!= 341",
        "num_ids": 400
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Print all tuples in test_list\n    # Print all tuples from test_list\n    # Print all tuples from sorted list\n    # Print all tuples from sorted list\n",
        "test": "assert     min_k
        "num_ids": 2256
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common = []\n    \n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    \n    index = 0\n    \n    while index < len(l1):\n        if l1[index] == l2[index] and l1[index] == l3[index]:\n            common.append(l1[index])\n        index = index + 1\n        \n    return common\n    \n    \ndef similar(l1, l2, l3):\n    '''\n    We say that a element is common for lists l1, l2, l3 if it appears in the same order as it is already sorted. \n    Write a function to find similar elements from three lists. The function should return a list.\n    '''\n    \n    common = []\n    \n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    \n    index = 0\n    \n    while index < len(l1):\n        if l1[index] == l2[index] and l1[index] == l3[index]:\n            common.append(l1[index])\n        index = index + 1\n        \n    return common\n        \n    \ndef remove_dups(l):\n    '''\n    We say that two elements are duplicated if they appear consecutively in the same list. Write a function to remove duplicates. The function should return a list.\n    '''\n    \n    occ_l = []\n    \n    for i in l:\n        if i not in occ_l:\n            occ_l.append(i)\n        \n    return occ_l\n    \n    \ndef remove_dups_2(l):\n    '''\n    We say that two elements are duplicated if they appear consecutively in the same list. Write a function to remove duplicates. The function should return a list.\n    '''\n    \n    occ_l = []\n    \n    for i in l:\n        if i not in occ_l:\n            occ_l.append(i)\n    \n    return occ_l\n    \n    \ndef remove_dups_3(l):\n    '''\n    We say that two elements are duplicated if they appear consecutively in the same list. Write a function to remove duplicates. The function should return a list.\n    '''\n    \n    occ_l = []\n    \n    for i in l:\n        if i not in occ_l:\n            occ_l.append(i)\n    \n    return occ_l\n    \n    \ndef most_common(l):\n    '''\n    We say that a element is common for lists l1, l2, l3 if it appears in the same order as it is already sorted. Write a function to find the most common element from three lists. The function should return a list.\n    '''\n    \n    occ_l = []\n    \n    l1 = sorted(l)\n    l2 = sorted(l)\n    l3 = sorted(l)\n    \n    index = 0\n    \n    while index < len(l1):\n        if l1[index] == l2[index] and l1[index] == l3[index]:\n            occ_l.append(l1[index])\n        index = index + 1\n        \n    return occ_l\n    \n    \ndef reverse(l):\n    '''\n    We say that the element at the index you are given to the list is reversed. Write a function to reverse the elements of a list. The function should return a list.\n    '''\n    \n    l1 = []\n    \n    for i in range(len(l)):\n        l1.append(l[i])\n    \n    return l1\n    \n    \ndef reverse_2(l):\n    '''\n    We say that the element at the index you are given to the list is reversed. Write a function to reverse the elements of a list. The function should return a list.\n    '''\n    \n    l1 = []\n    \n    for i in range(len(l)):\n        l1.append(l[i])\n    \n    return l1\n    \n    \ndef reverse_3(l):\n    '''\n    We say that the element at the index you are given to the list is reversed. Write a function to reverse the elements of a list. The function should return a list.\n    '''\n    \n    l1 = []\n    \n    for i in range(len(l)):\n        l1.append(l[i])\n    \n    return l1\n    \n    \ndef max_index(l):\n    '''\n    We say that the element at the index you are given to the list is the greatest element. Write a function to find the index of the greatest element in a list. The function should return a list.\n    '''\n    \n    l1 = []\n    \n    for i in range(len(l)):\n        l1.append(l[i])\n    \n    return max(l1)\n    \n    \ndef check_if_range(n):\n    '''\n    We say that n is a range in the form of a list, if n is a range in the form of an integer. \n    Write a function to check whether a range is a range or not. The function should return True if it is, and False otherwise.\n    '''\n    \n    if n == range(1,10):\n        return True\n    \n    else:\n        return False\n    \n    \ndef range_to_list(n):\n    '''\n    We say that n is a range in the form of a list, if n is a range in the form of an integer. \n    Write a function to convert a range of numbers to a list. The function should return a list of all numbers in the range.\n    '''\n    \n    l = []\n    \n    for i in range(n):\n        l.append(i)\n    \n    return l\n    \n    \ndef list_to_range(n):\n    '''\n    We say that n is a list in the form of a range, if n is a list in the form of an integer. \n    Write a function to convert a list of numbers to a range. The function should return a range of numbers.\n    '''\n    \n    l = []\n    \n    for i in n:\n        l.append(i)\n    \n    return l\n    \n    \ndef check_range(n):\n    '''\n    We say that n is a range in the form of a list, if n is a range in the form of an integer. \n    Write a function to check whether a range is a range or not. The function should return True if it is, and False otherwise.\n    '''\n    \n    if n == range(1,10):\n        return True\n    \n    else:\n        return False\n    \n    \ndef search(l, n):\n    '''\n    We say that l is a list in the form of a list, if l is a list in the form of an integer. \n    Write a function to search for a number in a list. The function should return the index of the number in the list. If l does not exist, return -1.\n    '''\n    \n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    \n    return -1\n    \n    \ndef search_2(l, n):\n    '''\n    We say that l is a list in the form of a list, if l is a list in the form of an integer. \n    Write a function to search for a number in a list. The function should return the index of the number in the list. If l does not exist, return -1.\n    '''\n    \n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    \n    return -1\n    \n    \ndef search_3(l, n):\n    '''\n    We say that l is a list in the form of a list, if l is a list in the form of an integer. \n    Write a function to search for a number in a list. The function should return the index of the number in the list. If l does not exist, return -1.\n    '''\n    \n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    \n    retur",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 492
    },
    {
        "number": 755,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_2 = numbers[0]\n    for num in numbers[1:]:\n        if smallest_2 < num:\n            smallest_2 = num\n    return smallest_2\n",
        "test": "assert     second_smallest([5, 4, 7, 2, 4, 2]) == 7",
        "num_ids": 206
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #find all a and b\n    a_b_regex = re.compile(r'(a|b)')\n    a_b_matches = a_b_regex.findall(text)\n",
        "test": "assert     text_match_zero_one('a b c d e f g h i j k l m n o p q r s t u v w x y z') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']",
        "num_ids": 2409
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Your code here\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(len(test_list)-1):\n            if test_list[j] == test_list[j+1]:\n                count += 1\n    return count\n    #-------------------practice------------------------------\n    # Your code here\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(len(test_list)-1):\n            if test_list[j] == test_list[j+1] and test_list[i] == test_list[i+1]:\n                count += 1\n    return count\n    #-------------------practice------------------------------\n",
        "test": "assert     count_reverse_pairs(['','bcd','abc','cd']) == 3",
        "num_ids": 427
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        t = list1[i]\n        for j in t:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 364
    },
    {
        "number": 759,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        return int(num)\n    except ValueError:\n        return False\n",
        "test": "assert     is_decimal(0.0123456789) == False",
        "num_ids": 2161
    },
    {
        "number": 760,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    if arr[-1]==arr[-2]:\n        return True\n    else:\n        return False\n",
        "test": "assert     unique_Element(arr=[1,2,3,2,1,4,5,6,1,1,2,4,5]) == False",
        "num_ids": 298
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(1) == True",
        "num_ids": 631
    },
    {
        "number": 763,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    current_min = arr[0] - arr[1]\n    count = 0\n    for i in range(1, n):\n        current_min = arr[i] - arr[i-1]\n        count += 1\n    return count \n",
        "test": "assert     find_min_diff([0,1,2,4,5],1) == 0",
        "num_ids": 445
    },
    {
        "number": 764,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr(\"ZZZZ\") == 0",
        "num_ids": 120
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n % 2 == 1:\n        return False\n    else:\n        return True\n",
        "test": "assert     is_polite(0) == True ",
        "num_ids": 246
    },
    {
        "number": 766,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    s = []\n    for i in range(len(l1)):\n        if l1[i] not in s:\n            s.append(l1[i])\n    return s\n",
        "test": "assert         pair_wise([]) == []",
        "num_ids": 307
    },
    {
        "number": 767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n",
        "test": "assert ",
        "num_ids": 194
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            li3.append(li1[i])\n    return li3\n",
        "test": "assert     Diff([1,2,3,4], [2,3,4,5]) == [1,2,3,4]",
        "num_ids": 246
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 0 : \n        return 0\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    if n == 2 :\n        return 1\n    if n == 3 :\n        return 2\n    if n == 4 :\n        return 3\n    if n == 5 :\n        return 4\n    if n == 6 :\n        return 5\n    if n == 7 :\n        return 6\n    if n == 8 :\n        return 7\n    if n == 9 :\n        return 8\n    if n == 10 :\n        return 9\n    if n == 11 :\n        return 10\n    if n == 12 :\n        return 11\n    if n == 13 :\n        return 12\n    if n == 14 :\n        return 13\n    if n == 15 :\n        return 14\n    if n == 16 :\n        return 15\n    if n == 17 :\n        return 16\n    if n == 18 :\n        return 17\n    if n == 19 :\n        return 18\n    if n == 20 :\n        return 19\n    if n == 21 :\n        return 20\n    if n == 22 :\n        return 21\n    if n == 23 :\n        return 22\n    if n == 24 :\n        return 23\n    if n == 25 :\n        return 24\n    if n == 26 :\n        return 25\n    if n == 27 :\n        return 26\n    if n == 28 :\n        return 27\n    if n == 29 :\n        return 28\n    if n == 30 :\n        return 29\n    if n == 31 :\n        return 30\n    if n == 32 :\n        return 31\n    if n == 33 :\n        return 32\n    if n == 34 :\n        return 33\n    if n == 35 :\n        return 34\n    if n == 36 :\n        return 35\n    if n == 37 :\n        return 36\n    if n == 38 :\n        return 37\n    if n == 39 :\n        return 38\n    if n == 40 :\n        return 39\n    if n == 41 :\n        return 40\n    if n == 42 :\n        return 41\n    if n == 43 :\n        return 42\n    if n == 44 :\n        return 43\n    if n == 45 :\n        return 44\n    if n == 46 :\n        return 45\n    if n == 47 :\n        return 46\n    if n == 48 :\n        return 47\n    if n == 49 :\n        return 48\n    if n == 50 :\n        return 49\n    if n == 51 :\n        return 50\n    if n == 52 :\n        return 51\n    if n == 53 :\n        return 52\n    if n == 54 :\n        return 53\n    if n == 55 :\n        return 54\n    if n == 56 :\n        return 55\n    if n == 57 :\n        return 56\n    if n == 58 :\n        return 57\n    if n == 59 :\n        return 58\n    if n == 60 :\n        return 59\n    if n == 61 :\n        return 60\n    if n == 62 :\n        return 61\n    if n == 63 :\n        return 62\n    if n == 64 :\n        return 63\n    if n == 65 :\n        return 64\n    if n == 66 :\n        return 65\n    if n == 67 :\n        return 66\n    if n == 68 :\n        return 67\n    if n == 69 :\n        return 68\n    if n == 70 :\n        return 69\n    if n == 71 :\n        return 70\n    if n == 72 :\n        return 71\n    if n == 73 :\n        return 72\n    if n == 74 :\n        return 73\n    if n == 75 :\n        return 74\n    if n == 76 :\n        return 75\n    if n == 77 :\n        return 76\n    if n == 78 :\n        return 77\n    if n == 79 :\n        return 78\n    if n == 80 :\n        return 79\n    if n == 81 :\n        return 80\n    if n == 82 :\n        return 81\n    if n == 83 :\n        return 82\n    if n == 84 :\n        return 83\n    if n == 85 :\n        return 84\n    if n == 86 :\n        return 85\n    if n == 87 :\n        return 86\n    if n == 88 :\n        return 87\n    if n == 89 :\n        return 88\n    if n == 90 :\n        return 89\n    if n == 91 :\n        return 90\n    if n == 92 :\n        return 91\n    if n == 93 :\n        return 92\n    if n == 94 :\n        return 93\n    if n == 95 :\n        return 94\n    if n == 96 :\n        return 95\n    if n == 97 :\n        return 96\n    if n == 98 :\n        return 97\n    if n == 99 :\n        return 98\n    if n == 100 :\n        return 99\n    if n == 101 :\n        return 100\n    if n == 102 :\n        return 101\n    if n == 103 :\n        return 102\n    if n == 104 :\n        return 103\n    if n == 105 :\n        return 104\n    if n == 106 :\n        return 105\n    if n == 107 :\n        return 106\n    if n == 108 :\n        return 107\n    if n == 109 :\n        return 108\n    if n == 110 :\n        return 109\n    if n == 111 :\n        return 110\n    if n == 112 :\n        return 111\n    if n == 113 :\n        return 112\n    if n == 114 :\n        return 113\n    if n == 115 :\n        return 114\n    if n == 116 :\n        return 115\n    if n == 117 :\n        return 116\n    if n == 118 :\n        return 117\n    if n == 119 :\n        return 118\n    if n == 120 :\n        return 119\n    if n == 121 :\n        return 120\n    if n == 122 :\n        return 121\n    if n == 123 :\n        return 122\n    if n == 124 :\n        return 123\n    if n == 125 :\n        return 124\n    if n == 126 :\n        return 125\n    if n == 127 :\n        return 126\n    if n == 128 :\n        return 127\n    if n == 129 :\n        return 128\n    if n == 130 :\n        return 129\n    if n == 131 :\n        return 130\n    if n == 132 :\n        return 131\n    if n == 133 :\n        return 132\n    if n == 134 :\n        return 133\n    if n == 135 :\n        return 134\n    if n == 136 :\n        return 135\n    if n == 137 :\n        return 136\n    if n == 138 :\n        return 137\n    if n == 139 :\n        return 138\n    if n == 140 :\n        return 139\n    if n == 141 :\n        return 140\n    if n == 142 :\n        return 141\n    if n == 143 :\n        return 142\n    if n == 144 :\n        return 143\n    if n == 145 :\n        return 144\n    if n == 146 :\n        return 145\n    if n == 147 :\n        return 146\n    if n == 148 :\n        return 147\n    if n == 149 :\n        return 148\n    if n == 150 :\n        return 149\n    if n == 151 :\n        return 150\n    if n == 152 :\n        return 151\n    if n == 153 :\n        return 152\n    if n == 154 :\n        return 153\n    if n == 155 :\n        return 154\n    if n == 156 :\n        return 155\n    if n == 157 :\n        return 156\n    if n == 158 :\n        return 157\n    if n == 159 :\n        return 158\n    if n == 160 :\n        return 159\n    if n == 161 :\n        return 160\n    if n == 162 :\n        return 161\n    if n == 163 :\n        return 162\n    if n == 164 :\n        return 163\n    if n == 165 :\n        return 164\n    if n == 166 :\n        return 165\n    if n == 167 :\n        return 166\n    if n == 168 :\n        return 167\n    if n == 169 :\n        return 168\n    if n == 170 :\n        return 169\n    if n == 171 :\n        return 170\n    if n == 172 :\n        return 171\n    if n == 173 :\n        return 172\n    if n == 174 :\n        return 173\n    if n == 175 :\n        return 174\n    if n == 176 :\n        return 175\n    if n == 177 :\n        return 176\n    if n == 178 :\n        return 177\n    if n == 179 :\n        return 178\n    if n == 180 :\n        return 179\n    if n == 18",
        "test": "assert     odd_num_sum(5) == 3",
        "num_ids": 2132
    },
    {
        "number": 771,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    open_brackets = ['(', '[', '{', ']']\n    closed_brackets = ['}', ']']\n    for character in exp:\n        if character in open_brackets:\n            stack.append(character)\n        elif character in closed_brackets:\n            if not stack or stack[-1]!= closed_brackets[0]:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert     check_expression('') == True",
        "num_ids": 477
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # To do\n    pass\n",
        "test": "assert     remove_length('12345', 4) == '321'",
        "num_ids": 267
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match == None:\n        return None\n    else:\n        return match.start(),match.end()\n",
        "test": "assert     occurance_substring(\"abc\", \"abc\" + \" \" + \"bc\") == 2",
        "num_ids": 363
    },
    {
        "number": 775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # nums = [2, 7, 9, 7, 2, 3, 8, 0, 3, 6]\n    nums = [2, 7, 9, 7, 2, 3, 8, 0, 3, 6]\n    odd_position = []\n    for i in range(0, len(nums)):\n        if nums[i] % 2!= 0:\n            odd_position.append(i)\n    return odd_position\n",
        "test": "assert ",
        "num_ids": 206
    },
    {
        "number": 776,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_list = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowel_count = 0\n    \n    for char in test_str:\n        if char in vowels_list:\n            vowel_count += 1\n    \n    return vowel_count\n",
        "test": "assert     count_vowels('hello') == 2",
        "num_ids": 318
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            sum += arr[i]\n    return sum \n",
        "test": "assert ",
        "num_ids": 127
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    p1 = []\n    p2 = []\n    for i in range(0, len(list1)-1):\n        if list1[i] == list1[i+1]:\n            p2.append(list1[i])\n        else:\n            if p1:\n                p1.append(list1[i])\n            else:\n                p1 = list1[i]\n    return p1, p2\n",
        "test": "assert     pack_consecutive_duplicates([1,2,1,2,2,3]) == [[1,1], [2,2], [1,1], [2,2], [1,1], [2,2]]",
        "num_ids": 588
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Your code here\n    l = []\n    for i in list1:\n        t = tuple(i)\n        l.append(t)\n    result = dict()\n    for i in l:\n        result[i] = l.count(i)\n    return result\n",
        "test": "assert     unique_sublists([(1,3,5),(3,6,4),(2,2,5,7),(1,3,5,6,7)]), 'First test failed'",
        "num_ids": 289
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, len(test_list)))\n",
        "test": "assert     find_combinations([(1,2)]) == [(1,2)]",
        "num_ids": 357
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 2 :\n        return True\n    if n % 2 == 0 :\n        return False\n    return count_divisors(n - 1)\n",
        "test": "assert     count_divisors(n=12) == 2",
        "num_ids": 224
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #logic\n",
        "test": "assert ",
        "num_ids": 276
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == 0.0 and g == 0.0 and b == 0.0:\n        return 0.0, 0.0, 0.0\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0,0,0), \"color-correction-error\"",
        "num_ids": 296
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if i%2 == 0:\n            result = result * i\n        else:\n            result = result / i\n    return result\n",
        "test": "assert     mul_even_odd([1,3,2]) == 3",
        "num_ids": 273
    },
    {
        "number": 785,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.split(\",\")\n    return tuple(map(int, tuple_str))\n",
        "test": "assert     tuple_str_int(\"12,23,45,67,89\") == (12, 23, 45, 67, 89)",
        "num_ids": 303
    },
    {
        "number": 786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    while x > a[n-1] and n > 0:\n        n = n-1\n        if n<0:\n            break\n        \n    if n<0:\n        return 0\n    else:\n        return n\n",
        "test": "assert     right_insertion(1, 2) == 1",
        "num_ids": 142
    },
    {
        "number": 787,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_reg_regex_list = re.findall('(\\A[a-zA-Z0-9_]*$)', text)\n    match_reg_regex_list_sorted = sorted(match_reg_regex_list)\n    if len(match_reg_regex_list) == 0:\n        return None\n    if len(match_reg_regex_list) > 1:\n        return None\n    if len(match_reg_regex_list) == 1:\n        return match_reg_regex_list[0]\n    else:\n        return match_reg_regex_list[0] +'' + match_reg_regex_list[1]\n        \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a an a followed by three 'b',\n    followed by an end 'b'.\n    '''\n    match_reg_regex_list = re.findall('(\\A[a-zA-Z0-9_]*$)', text)\n    match_reg_regex_list_sorted = sorted(match_reg_regex_list)\n    if len(match_reg_regex_list) == 0:\n        return None\n    if len(match_reg_regex_list) == 1:\n        return match_reg_regex_list[0]\n    elif len(match_reg_regex_list) > 1:\n        return None\n    elif len(match_reg_regex_list) == 2:\n        return match_reg_regex_list[0] +'' + match_reg_regex_list[1]\n    else:\n        return match_reg_regex_list[0] +'' + match_reg_regex_list[1] +'' + match_reg_regex_list[2]\n",
        "test": "assert     text_match_three('a')",
        "num_ids": 369
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_str = test_str.split(',')\n    return tuple(tuple_str[i:i+len(tuple_str)])\n",
        "test": "assert     new_tuple([1,2,3,4], [1,3,4,5]) == (1,3,4,5)",
        "num_ids": 386
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return any([n%2==0 for n in nums])\n",
        "test": "assert     even_position([1,2,3,4,5,6,7,8,9,10]) == True",
        "num_ids": 331
    },
    {
        "number": 791,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    temp = list(test_tup)\n    for i in range(len(temp)):\n        if type(temp[i]) is tuple:\n            temp[i] = remove_nested(temp[i])\n    return tuple(temp)\n    \ndef remove_duplicates(test_tup):\n    '''\n    Write a function to remove any duplicate tuples from the given tuple.\n    '''\n    temp = list(test_tup)\n    for i in range(len(temp)):\n        if type(temp[i]) is tuple:\n            temp[i] = tuple(sorted(set(temp[i])))\n    return tuple(temp)\n    \ndef remove_nested_duplicates(test_tup):\n    '''\n    Write a function to remove any duplicate tuples from the given tuple.\n    '''\n    temp = list(test_tup)\n    for i in range(len(temp)):\n        if type(temp[i]) is tuple:\n            for j in range(len(temp[i])):\n                if type(temp[i][j]) is tuple:\n                    for k in range(len(temp[i][j])):\n                        if type(temp[i][j][k]) is tuple:\n                            if temp[i][j][k] not in temp[i]:\n                                temp[i].remove(temp[i][j][k])\n    return tuple(temp)\n",
        "test": "assert     remove_nested((1,2,3,4,5)) == (1,2,3,4,5)",
        "num_ids": 328
    },
    {
        "number": 792,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    c=0\n    for i in input_list:\n        c+=len(i)\n    return c\n",
        "test": "assert     count_list([]) == 0, \"The count_list() function should return 0 for an empty list\"",
        "num_ids": 260
    },
    {
        "number": 793,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return end\n",
        "test": "assert     last([1,2,3,4,5,6,7,8,9,10],8) == 10",
        "num_ids": 294
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # replace the 'a' with 'b'\n    text = text.replace(\"a\",\"b\")\n    # make a regex for all the things that need to be enclosed in 'b'\n    regex = re.compile(r'(b){2}')\n    # find the match\n    match = regex.search(text)\n    # print(match)\n    # if there are matches, write the substring of the matched text\n    if match:\n        print(match.group())\n    # if not, give a warning\n    else:\n        print(\"Error: no b found!\")\n    print(\"----------------------------------------------------------\")\n",
        "test": "assert ",
        "num_ids": 2225
    },
    {
        "number": 796,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "test": "assert     return_sum({'a': 1, 'b': 2, 'd': 3}) == 6,'return_sum does not work!'",
        "num_ids": 169
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(l,r+1): \n        if i%2==0: \n            sum+=i \n    return sum \n",
        "test": "assert     sum_odd(15) == ",
        "num_ids": 173
    },
    {
        "number": 798,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([1,2,3,4,5,6,7,8,9,10]) == 55",
        "num_ids": 140
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    for i in range(n):\n        temp = n & (n - 1) # n =  2^31 -1\n        n >>= 1 # n =  2^32 -1\n        # The result will be  0b1001000000\n        n |= temp # n =  2^32 -1\n    for i in range(d):\n        n |= (n << 1)\n",
        "test": "assert     left_rotate(1,1) == 1",
        "num_ids": 2171
    },
    {
        "number": 800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\ndef remove_number_from_string(text):\n    '''\n    Write a function that removes any number from a string.\n    '''\n    return re.sub('\\d+', '', text)\ndef remove_period(text):\n    '''\n    Write a function that removes any period from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_percent(text):\n    '''\n    Write a function that removes any number from a string.\n    '''\n    return re.sub('\\%', '', text)\ndef remove_end_of_string2(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_number_from_string2(text):\n    '''\n    Write a function that removes any number from a string.\n    '''\n    return re.sub('\\d+', '', text)\ndef remove_percent2(text):\n    '''\n    Write a function that removes any number from a string.\n    '''\n    return re.sub('\\%', '', text)\ndef remove_period2(text):\n    '''\n    Write a function that removes any number from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string3(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string4(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string5(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string6(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string7(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string8(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string9(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string10(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string11(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string12(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string13(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string14(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string15(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string16(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string17(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string18(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string19(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string20(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string21(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string22(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string23(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string24(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string25(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string26(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string27(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string28(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string29(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string30(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string31(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string32(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string33(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string34(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string35(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string36(text):\n",
        "test": "assert     remove_all_spaces('  d\u00ec  d\u00ec') ==' d\u00ec  '",
        "num_ids": 152
    },
    {
        "number": 801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    s = 0\n    for i in range(x):\n        for j in range(y):\n            if x % i == 0 and y % j == 0:\n                s += 1\n    return s\n",
        "test": "assert     test_three_equal(4,3,1)==0",
        "num_ids": 241
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if arr[0] > arr[1]:\n        arr.sort()\n        return count_rotation(arr[2:]) + count_rotation(arr[:2])\n    if arr[0] < arr[1]:\n        arr.sort()\n        return count_rotation(arr[:2]) + count_rotation(arr[2:])\n    return 0\n",
        "test": "assert     count_rotation([1,3,2,4,5,6]) == 4",
        "num_ids": 422
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 : return True\n    if n == 1 : return False\n    if n == 2 : return True if n == n * n else False\n    if n % 2 == 0 : return False\n    if n == 3 : return True if (n * n + 1) % 10 == 0 else False\n    return is_perfect_square(n-1)\n    \n    \ndef count_down_triangle(n) :\n    '''\n    This function returns the triangle number of n.\n    '''\n    if n == 0 : return 0\n    if n == 1 : return 1\n    if n == 2 : return 1\n    if n == 3 : return 2\n    if n == 4 : return 3\n    if n == 5 : return 4\n    if n == 6 : return 5\n    if n == 7 : return 6\n    if n == 8 : return 7\n    if n == 9 : return 8\n    if n == 10 : return 9\n    if n == 11 : return 10\n    if n == 12 : return 11\n    if n == 13 : return 12\n    if n == 14 : return 13\n    if n == 15 : return 14\n    if n == 16 : return 15\n    if n == 17 : return 16\n    if n == 18 : return 17\n    if n == 19 : return 18\n    if n == 20 : return 19\n    if n == 21 : return 20\n    if n == 22 : return 21\n    if n == 23 : return 22\n    if n == 24 : return 23\n    if n == 25 : return 24\n    if n == 26 : return 25\n    if n == 27 : return 26\n    if n == 28 : return 27\n    if n == 29 : return 28\n    if n == 30 : return 29\n    if n == 31 : return 30\n    if n == 32 : return 31\n    if n == 33 : return 32\n    if n == 34 : return 33\n    if n == 35 : return 34\n    if n == 36 : return 35\n    if n == 37 : return 36\n    if n == 38 : return 37\n    if n == 39 : return 38\n    if n == 40 : return 39\n    if n == 41 : return 40\n    if n == 42 : return 41\n    if n == 43 : return 42\n    if n == 44 : return 43\n    if n == 45 : return 44\n    if n == 46 : return 45\n    if n == 47 : return 46\n    if n == 48 : return 47\n    if n == 49 : return 48\n    if n == 50 : return 49\n    if n == 51 : return 50\n    if n == 52 : return 51\n    if n == 53 : return 52\n    if n == 54 : return 53\n    if n == 55 : return 54\n    if n == 56 : return 55\n    if n == 57 : return 56\n    if n == 58 : return 57\n    if n == 59 : return 58\n    if n == 60 : return 59\n    if n == 61 : return 60\n    if n == 62 : return 61\n    if n == 63 : return 62\n    if n == 64 : return 63\n    if n == 65 : return 64\n    if n == 66 : return 65\n    if n == 67 : return 66\n    if n == 68 : return 67\n    if n == 69 : return 68\n    if n == 70 : return 69\n    if n == 71 : return 70\n    if n == 72 : return 71\n    if n == 73 : return 72\n    if n == 74 : return 73\n    if n == 75 : return 74\n    if n == 76 : return 75\n    if n == 77 : return 76\n    if n == 78 : return 77\n    if n == 79 : return 78\n    if n == 80 : return 79\n    if n == 81 : return 80\n    if n == 82 : return 81\n    if n == 83 : return 82\n    if n == 84 : return 83\n    if n == 85 : return 84\n    if n == 86 : return 85\n    if n == 87 : return 86\n    if n == 88 : return 87\n    if n == 89 : return 88\n    if n == 90 : return 89\n    if n == 91 : return 90\n    if n == 92 : return 91\n    if n == 93 : return 92\n    if n == 94 : return 93\n    if n == 95 : return 94\n    if n == 96 : return 95\n    if n == 97 : return 96\n    if n == 98 : return 97\n    if n == 99 : return 98\n    if n == 100 : return 99\n    if n == 101 : return 100\n    if n == 102 : return 101\n    if n == 103 : return 102\n    if n == 104 : return 103\n    if n == 105 : return 104\n    if n == 106 : return 105\n    if n == 107 : return 106\n    if n == 108 : return 107\n    if n == 109 : return 108\n    if n == 110 : return 109\n    if n == 111 : return 110\n    if n == 112 : return 111\n    if n == 113 : return 112\n    if n == 114 : return 113\n    if n == 115 : return 114\n    if n == 116 : return 115\n    if n == 117 : return 116\n    if n == 118 : return 117\n    if n == 119 : return 118\n    if n == 120 : return 119\n    if n == 121 : return 120\n    if n == 122 : return 121\n    if n == 123 : return 122\n    if n == 124 : return 123\n    if n == 125 : return 124\n    if n == 126 : return 125\n    if n == 127 : return 126\n    if n == 128 : return 127\n    if n == 129 : return 128\n    if n == 130 : return 129\n    if n == 131 : return 130\n    if n == 132 : return 131\n    if n == 133 : return 132\n    if n == 134 : return 133\n    if n == 135 : return 134\n    if n == 136 : return 135\n    if n == 137 : return 136\n    if n == 138 : return 137\n    if n == 139 : return 138\n    if n == 140 : return 139\n    if n == 141 : return 140\n    if n == 142 : return 141\n    if n == 143 : return 142\n    if n == 144 : return 143\n    if n == 145 : return 144\n    if n == 146 : return 145\n    if n == 147 : return 146\n    if n == 148 : return 147\n    if n == 149 : return 148\n    if n == 150 : return 149\n    if n == 151 : return 150\n    if n == 152 : return 151\n    if n == 153 : return 152\n    if n == 154 : return 153\n    if n == 155 : return 154\n    if n == 156 : return 155\n    if n == 157 : return 156\n    if n == 158 : return 157\n    if n == 159 : return 158\n    if n == 160 : return 159\n    if n == 161 : return 160\n    if n == 162 : return 161\n    if n == 163 : return 162\n    if n == 164 : return 163\n    if n == 165 : return 164\n    if n == 166 : return 165\n    if n == 167 : return 166\n    if n == 168 : return 167\n    if n == 169 : return 168\n    if n == 170 : return 169\n    if n == 171 : return 170\n    if n == 172 : return 171\n    if n == 173 : return 172\n    if n == 174 : return 173\n    if n == 175 : return 174\n    if n == 176 : return 175\n    if n == 177 : return 176\n    if n == 178 : return 177\n    if n == 179 : return 178\n    if n == 180 : return 179\n    if n == 181 : return 180\n    if n == 182 : return 181\n    if n == 183 : return 182\n    if n == 184 : return 183\n    if n == 185 : return 184\n    if n == 186 : return 185\n    if n == 187 : return 186\n    if n == 188 : return 187\n    if n == 189 : return 188\n    if n == 190 : return 189\n    if n == 191 : return 190\n    if n == 192 : return 191\n    if n == 193 : return 192\n    if n == 194 : return 193\n    if n == 195 : return 194\n    if n == 196 : return 195\n    if n == 197 : return 196\n    if n == 198 : return 197\n    if n == 199 : return 198\n    if n == 200 : return 199\n    if n == 201 : return 200\n    if n == 202 : return 201\n    if n == 203 : return 202\n    if n == 204 : return 203\n    if n == 205 : return 204\n    if n == 206 : return 205\n    i",
        "test": "assert     is_perfect_square(5) == False",
        "num_ids": 2040
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # creating a list to keep the product of numbers \n    even_list = []\n    # for looping through the numbers from 0 to size of array \n    for i in range(0, len(arr)):\n        # adding the product of each number in the array as the value \n        even_list.append(arr[i] * arr[i])\n        # if the product of the elements of the list is even then it won't be even\n        if len(even_list) % 2 == 0: \n            # if the list is even it will return false \n            return False\n    # if it returns false it won't return even list \n    return True\n",
        "test": "assert     is_product_even([3,2,1]) == False",
        "num_ids": 294
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    for i in range(len(lists)):\n        sum_of_elements = 0\n        for j in lists[i]:\n            sum_of_elements += j\n        if sum_of_elements > max(max_sum_list):\n            max_sum_list = lists[i]\n    return max_sum_list\n",
        "test": "assert     max_sum_list([1,2,3,4,5,6]) == [5,6], \"Should be [5,6]\"",
        "num_ids": 258
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def run(arr):\n        min = 0\n        max = 0\n        #print(arr)\n        for i in range(len(arr)):\n            if arr[i].isupper():\n                min += 1\n                #print(arr[i])\n            else:\n                max += 1\n                #print(arr[i])\n        #print(min,max)\n        return max - min\n    #print(test_str)\n    return run(test_str)\n",
        "test": "assert 'A' == 'B'",
        "num_ids": 245
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # find the first odd element\n    for i in range(0, len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return 'Not Found'\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]), '1,2,3,4,5'",
        "num_ids": 210
    },
    {
        "number": 808,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if type(test_tup)!= tuple:\n        print(\"Error: check_K: the given tuple has wrong type\")\n        return False\n    for x in test_tup:\n        if type(x)!= int:\n            print(\"Error: check_K: the given tuple contains wrong type\")\n            return False\n        if K < 1:\n            print(\"Error: check_K: K value should be >= 1\")\n            return False\n    if len(test_tup)!= len(K):\n        print(\"Error: check_K: the given tuple doesn't have right number of elements\")\n        return False\n    for i in range(len(K)):\n        if K[i] < 0:\n            print(\"Error: check_K: K value in the tuple should be >= 0\")\n            return False\n    return True\n    ",
        "test": "assert not check_K([1,2,3], 1)",
        "num_ids": 406
    },
    {
        "number": 809,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert         check_smaller([1, 2, 3, 5], [5, 3, 2, 1]) == False",
        "num_ids": 301
    }
]