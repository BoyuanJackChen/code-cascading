[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Write your code here\n    assert type(test_tup1) == list\n    assert type(test_tup2) == list\n    assert len(test_tup1) == len(test_tup2)\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1 & set2\n",
        "test": "assert     similar_elements([1,2,3,4,5], [1,3,5,6,7]) == [1, 3, 5, 6, 7]",
        "num_ids": 524
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    isPrime = True\n    for i in range(2, n):\n        if n % i == 0:\n            isPrime = False\n    return isPrime\n",
        "test": "assert     is_not_prime(2) == True",
        "num_ids": 219
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Your code here\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n        print(heap)\n    i = 0\n    for j in range(n):\n        # print(heapq.heappop(heap))\n        heapq.heapreplace(heap,nums[i])\n        print(heap)\n        i += 1\n        # heapq.heapify(heap)\n        # heapq.heappop(heap)\n        # print(heap)\n        # print(heap[0])\n    # print(heap[0])\n    return heap\n",
        "test": "assert heap_queue_largest([1,2,3,4,5,6,7], 5) == [1,2,3,4,5]",
        "num_ids": 511
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    print(\"is_Power_Of_Two(1,1,1)  ==>  \" + str(True))\n    print(\"is_Power_Of_Two(1,1,2)  ==>  \" + str(False))\n    return(True)\n",
        "test": "assert     is_Power_Of_Two (3) == True",
        "num_ids": 201
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # print(text)\n    words = re.findall(r'\\w+\\w+', text)\n    # print(words)\n    # words.append('anonymity')\n    # words.append('execution')\n    # words.append('function')\n    # words.append('language')\n    # words.append('programming')\n    # words.append('course')\n    # words.append('scientific')\n    # words.append('science')\n    # words.append('computing')\n    # words.append('language')\n    # words.append('indexing')\n    # words.append('scanning')\n    # words.append('documentation')\n    # words.append('method')\n    # words.append('method')\n    # words.append('programming')\n    # words.append('functions')\n    # words.append('computer')\n    # words.append('knowledge')\n    # words.append('machine')\n    # words.append('computer')\n    # words.append('machine')\n    # words.append('computer')\n    # words.append('machine')\n    # words.append('computer')\n    # words.append('machine')\n    # words.append('computer')\n    # words.append('machine')\n    # words.append('computer')\n    # words.append('machine')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n",
        "test": "assert     find_char_long(\"A screaming comes across the sky.\") == -3",
        "num_ids": 2282
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n",
        "test": "assert     square_nums([1, 2, 3]) == [1, 4, 9],'square_nums does not return correct values'",
        "num_ids": 203
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize minimum as -1\n    minimum_rotations = -1\n    rotations = 1\n    # Loop through string\n    for i in range(0,len(str)):\n        # Check the current character and rotation\n        if (str[i] == str[i].upper()):\n            rotations += 1\n        else:\n            # If the current character is not upper, then we have to get the rotation\n            # and increment the minimum_rotations\n            minimum_rotations = max(minimum_rotations, rotations)\n            rotations = 1\n        # If the current character is upper, we have to check if it's greater\n        # than the previous upper character\n        if (str[i] > str[i].upper()):\n            rotations += 1\n    # Return minimum_rotations\n    return minimum_rotations\n",
        "test": "assert     find_Rotations('abcdefgh') == 2,'should return 2'",
        "num_ids": 599
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l=len(s)\n    s1=s[:1]+s[l-1:]\n    return s1\n",
        "test": "assert     remove_Occ(\"Python\", \"o\") == \"t\"",
        "num_ids": 353
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = []\n    for i in range(len(M)):\n        sum = 0\n        for j in range(len(M[i])):\n            sum += M[i][j]\n        rows.append(sum)\n    return sorted(rows)\n    \n",
        "test": "assert ",
        "num_ids": 578
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    return math.pow(h,3) * math.pow(l,3)\n",
        "test": "assert ",
        "num_ids": 227
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[A-Za-z0-9_.]+', text)!= None\n",
        "test": "assert     text_lowercase_underscore(\"H_e_l_l_o\") == True",
        "num_ids": 255
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    s = 0\n    while a >= 1:\n        s += a\n        a -= 1\n    return s\n",
        "test": "assert     square_perimeter(1) == 1",
        "num_ids": 115
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [character for character in string if character in string]\n",
        "test": "assert     str_to_list('The quick brown fox jumps over the lazy dog.')!= 'fox,quick,brown,fox,jumps,over,the,lazy,dog'",
        "num_ids": 199
    },
    {
        "number": 19,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums.copy()\n    array.sort()\n    index = []\n    for i in range(len(array)):\n        if array[i] not in index:\n            index.append(array[i])\n    return len(index) >= 2\n",
        "test": "assert     test_duplicate([1,1,2]) == True",
        "num_ids": 212
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x == 5 or x == 2 or x == 4 or x == 1\n",
        "test": "assert     is_woodall(1) == True ",
        "num_ids": 182
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = rev*10 + num%10\n        num = num//10\n    return rev\n",
        "test": "assert         rev(5) == 5     #assertion true",
        "num_ids": 215
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxnum = 0\n    count = 0\n    for i in range(len(arr)) : \n        for j in range(i, len(arr)) : \n            if arr[j] > arr[i] : \n                arr[i], arr[j] = arr[j], arr[i] \n    for i in arr : \n        if i == maxnum : \n            count += 1\n    if count == 0 : \n        print(0) \n        return\n    else : \n        print(maxnum) \n        return \n",
        "test": "assert     find_Max_Num([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 10",
        "num_ids": 521
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return True\n    if x < y:\n        return True\n    return False\n",
        "test": "assert     opposite_Signs(3,-1)==1",
        "num_ids": 323
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    d = n//2\n    while d >= 1:\n        if (n % d) == 0:\n            return d\n        d -= 1\n    return 0\n",
        "test": "assert     is_octagonal(10), \"The first argument does not indicate an octagonal number\"",
        "num_ids": 2176
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = []\n    for i in range(len(s)):\n        temp = 0\n        for j in range(i, len(s)):\n            temp += int(s[j])\n            if temp > len(s):\n                break\n        else:\n            res.append(temp)\n    return res\n",
        "test": "assert     count_Substrings('baab') == 2",
        "num_ids": 266
    },
    {
        "number": 62,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num_list = list(xs)\n    num_list.sort()\n    n = len(num_list)\n    for i in range(n):\n        if num_list[i] == xs[i]:\n            return num_list[i]\n",
        "test": "assert     smallest_num([1]) == 1",
        "num_ids": 174
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Set the max_difference to 0\n    max_difference = 0\n    # Set the current_min to the first number in the tuple\n    current_min = test_list[0]\n    # Set the current_max to the last number in the tuple\n    current_max = test_list[len(test_list)-1]\n    # Set the loop to run till the max_difference is reached\n    while(current_min < current_max):\n        # Set the current_min to the value of the min index in the tuple\n        current_min = test_list[min(current_min, len(test_list)-1)]\n        # Set the current_max to the value of the max index in the tuple\n        current_max = test_list[max(current_max, 0)]\n        # Set the current_min to the value of the max index in the tuple\n        current_min = test_list[min(current_min, len(test_list)-1)]\n        # Set the max_difference to the max_difference + current_min - current_max\n        max_difference = max_difference + (current_max - current_min)\n    # Set the return value to the max_difference\n    return max_difference\n",
        "test": "assert     max_difference([(1,2),(2,3),(3,4),(4,5)]) == -1, \"Should be -1\"",
        "num_ids": 632
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup: tup[1])\n    return subjectmarks\n",
        "test": "assert     subject_marks([('A', 1), ('B', 2), ('C', 3), ('D', 4)]) == [('A', 1), ('B', 2), ('C', 3), ('D', 4)]",
        "num_ids": 262
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    final_list = []\n    \n    def recursive_sum(data):\n        '''\n        If the data is a list, it should be the last element in the data list,\n        if it's not, it should be the first element in the data list.\n        '''\n        if type(data) == list:\n            return sum(data) + recursive_sum(data[:-1])\n        else:\n            return data + recursive_sum(data[:-1])\n    \n    return recursive_sum(data_list)\n",
        "test": "assert recursive_list_sum([1, [1, 2, 3]]) == 3",
        "num_ids": 203
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for x in list:\n        if x > 0:\n            pos += 1\n    return pos\n",
        "test": "assert     pos_count([-1,0,1,2,3,-1,-1,0,-1,3,5,6,-1,-1,-1,8]) == 13, '''",
        "num_ids": 214
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return n\n    elif n == 2:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "test": "assert         bell_number(1) == 1",
        "num_ids": 248
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)):\n        if A[i]!= A[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([3, 2, 1, 0, 5, 4]) == False",
        "num_ids": 232
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i in l:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1,2,3,4], [6,7,8]) == False",
        "num_ids": 203
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = []\n",
        "test": "assert     find_equal_tuple([1,2,3,4,5,6]) == True",
        "num_ids": 170
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums) - 1 - i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "test": "assert     comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 473
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # if n==1:\n    #     return True\n    # if n==2:\n    #     return True\n    # if n%2==0:\n    #     return False\n    # # print(n//2)\n    # if n<=1:\n    #     return False\n    # x=n-1\n    # y=n-1\n    # if x==y:\n    #     return True\n    # for i in range(1,n):\n    #     if (n-i)==1:\n    #         return True\n    #     if n%2==0:\n    #         if i<n//2:\n    #             if n-i in (n//2,n//2+1):\n    #                 continue\n    #         else:\n    #             if n-i in (n//2,n-1):\n    #                 continue\n    #     if n%2==0:\n    #         if i<n//2:\n    #             if x<y:\n    #                 continue\n    #         else:\n    #             if y<x:\n    #                 continue\n    # return False\n    def Square(n): \n        # if n%2==0:\n        #     return False\n        # x=n//2\n        # y=n//2\n        # if x==y:\n        #     return True\n        # for i in range(1,n):\n        #     if (n-i)==1:\n        #         return True\n        #     if n%2==0:\n        #         if i<n//2:\n        #             if n-i in (n//2,n//2+1):\n        #                 continue\n        #         else:\n        #             if n-i in (n//2,n-1):\n        #                 continue\n        # return False\n        # for i in range(1,n):\n        #     if (n-i)==1:\n        #         return True\n        #     if n%2==0:\n        #         if i<n//2:\n        #             if x<y:\n        #                 continue\n        #         else:\n        #             if y<x:\n        #                 continue\n        # return False\n        if n%2==0:\n            return False\n        x=n//2\n        y=n//2\n        for i in range(1,n):\n            if (n-i)==1:\n                return True\n            if n%2==0:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n            if n%2==0:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n            if n%2==1:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n        return False\n    def Square_2(n):\n        # if n%2==0:\n        #     return False\n        # x=n//2\n        # y=n//2\n        # if x==y:\n        #     return True\n        # for i in range(1,n):\n        #     if (n-i)==1:\n        #         return True\n        #     if n%2==0:\n        #         if i<n//2:\n        #             if n-i in (n//2,n//2+1):\n        #                 continue\n        #         else:\n        #             if n-i in (n//2,n-1):\n        #                 continue\n        #     if n%2==0:\n        #         if i<n//2:\n        #             if x<y:\n        #                 continue\n        #         else:\n        #             if y<x:\n        #                 continue\n        # return False\n        if n%2==0:\n            return False\n        x=n//2\n        y=n//2\n        for i in range(1,n):\n            if (n-i)==1:\n                return True\n            if n%2==0:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n            if n%2==0:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n            if n%2==1:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n        return False\n    if n%2==0:\n        return False\n    x=n//2\n    y=n//2\n    for i in range(1,n):\n        if (n-i)==1:\n            return True\n        if n%2==0:\n            if i<n//2:\n                if x<y:\n                    continue\n            else:\n                if y<x:\n                    continue\n        if n%2==0:\n            if i<n//2:\n                if x<y:\n                    continue\n            else:\n                if y<x:\n                    continue\n    return False\n",
        "test": "assert     dif_Square(3) == 1",
        "num_ids": 1675
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    curr = 0\n    for pattern in patterns:\n        color = colors[curr]\n        next_color = colors[curr+1]\n        \n        if color in pattern and next_color not in pattern:\n            return False\n        \n        curr += 1\n        \n    return True\n        \n",
        "test": "assert     is_samepatterns([(0,0,0), (1,1,1), (2,2,2), (3,3,3), (4,4,4), (5,5,5), (6,6,6), (7,7,7), (8,8,8), (9,9,9), (10,10,10), (11,11,11), (12,12,12), (13,13,13), (14,14,14), (15,15,15), (16,16,16), (17,17,17), (18,18,18), (19,19,19), (20,20,20), (21,21,21), (22,22,22), (23,23,23), (24,24,24), (25,25,25), (26,26,26), (27,27,27), (28,28,28), (29,29,29), (30,30,30), (31,31,31), (32,32,32), (33,33,33), (34,34,34), (35,35,35), (36,36,36), (37,37,37), (38,38,38), (39,39,39), (40,40,40), (41,41,41), (42,42,42), (43,43,43), (44,44,44), (45,45,45), (46,46,46), (47,47,47), (48,48,48), (49,49,49), (50,50,50), (51,51,51), (52,52,52), (53,53,53), (54,54,54), (55,55,55), (56,56,56), (57,57,57), (58,58,58), (59,59,59), (60,60,60), (61,61,61), (62,62,62), (63,63,63), (64,64,64), (65,65,65), (66,66,66), (67,67,67), (68,68,68), (69,69,69), (70,70,70), (71,71,71), (72,72,72), (73,73,73), (74,74,74), (75,75,75), (76,76,76), (77,77,77), (78,78,78), (79,79,79), (80,80,80), (81,81,81), (82,82,82), (83,83,83), (84,84,84), (85,85,85), (86,86,86), (87,87,87), (88,88,88), (89,89,89), (90,90,90), (91,91,91), (92,92,92), (93,93,93), (94,94,94), (95,95,95), (96,96,96), (97,97,97), (98,98,98), (99,99,99), (100,100,100), (101,101,101), (102,102,102), (103,103,103), (104,104,104), (105,105,105), (106,106,106), (107,107,107), (108,108,108), (109,109,109), (110,110,110), (111,111,111), (112,112,112), (113,113,113), (114,114,114), (115,115,115), (116,116,116), (117,117,117), (118,118,118), (119,119,119), (120,120,120), (121,121,121), (122,122,122), (123,123,123), (124,124,124), (125,125,125), (126,126,126), (127,127,127), (128,128,128), (129,129,129), (130,130,130), (131,131,131), (132,132,132), (133,133,133), (134,134,134), (135,135,135), (136,136,136), (137,137,137), (138,138,138), (139,139,139), (140,140,140), (141,141,141), (142,142,142), (143,143,143), (144,144,144), (145,145,145), (146,146,146), (147,147,147), (148,148,148), (149,149,149), (150,150,150), (151,151,151), (152,152,152), (153,153,153), (154,154,154), (155,155,155), (156,156,156), (157,157,157), (158,158,158), (159,159,159), (160,160,160), (161,161,161), (162,162,162), (163,163,163), (164,164,164), (165,165,165), (166,166,166), (167,167,167), (168,168,168), (169,169,169), (170,170,170), (171,171,171), (172,172,172), (173,173,173), (174,174,174), (175,175,175), (176,176,176), (177,177,177), (178,178,178), (179,179,179), (180,180,180), (181,181,181), (182,182,182), (183,183,183), (184,184,184), (185,185,185), (186,186,186), (187,187,187), (188,188,188), (189,189,189), (190,190,190), (191,191,191), (192,192,192), (193,193,193), (194,194,194), (195,195,195), (196,196,196), (197,197,197), (198,198,198), (199,199,199), (200,200,200), (201,201,201), (202,202,202), (203,203,203), (204,204,204), (205,205,205), (206,206,206), (207,207,207), (208,208,208), (209,209,209), (210,210,210), (211,211,211), (212,212,212), (213,213,213), (214,214,214), (215,215,215), (216,216,216), (217,217,217), (218,218,218), (219,219,219), (220,220,220), (221,221,221), (222,222,222), (223,223,223), (224,224,224), (225,225,225), (226,226,226), (227,227,227), (228,228,228), (229,229,229), (230,230,230), (231,231,231), (232,232,232), (233,233,233), (234,234,234), (235,235,235), (236,236,236), (237,237,237), (238,238,238), (239,239,239), (240,240,240), (241,241,241), (242,242,242), (243,243,243), (244,244,244), (245,245,245), (246,246,246), (247,247,247), (248,248,248), (249,249,249), (250,250,250), (251,251,251), (252,252,252), (253,253,253), (254,254,254), (255,255,255), (256,256,256), (257,257,257), (258,258,258), (259,259,259), (260,260,260), (261,261,261), (262,262,262), (263,263,263), (264,264,264), (265,265,265), (266,266,266), (267,267,267), (268,268,268), (269,269,269), (270,270,270), (271,271,271), (272,272,272), (273,273,273), (274,274,274), (275,275,275), (276,276,276), (277,277,277), (278,278,278), (279,279,279), (280,280,280), (281,281,281), (282,282,282), (283",
        "num_ids": 4369
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list = list(test_list)\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list)):\n            if test_list[i][0] % test_list[j][0] == 0:\n                test_list[i][1] += 1\n",
        "test": "assert         find_tuples([(2,2), (3,3)], 3) == [(2,2), (3,3)]",
        "num_ids": 414
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True\n",
        "test": "assert     is_Diff(2) == True, '2 is not divisible by 11'",
        "num_ids": 150
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    # YOUR CODE HERE\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     word_len(\"word\") == 1",
        "num_ids": 150
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0: \n        raise ValueError(\"The input must be >= 0\") \n    else: \n        return n % (n + 1)\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 219
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * r * r * math.pi\n",
        "test": "assert     volume_sphere(0) == 0",
        "num_ids": 218
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    strr = strr.lower()\n    res = \"\"\n    for i in range(0, len(strr)):\n        if strr[i] >= \"a\" and strr[i] <= \"z\":\n            res += chr(ord(strr[i]) - ord(\"a\") + 1)\n        else:\n            res += strr[i]\n    return res\n",
        "test": "assert ",
        "num_ids": 874
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return sequence(n-1) + sequence(n-2)\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 275
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n",
        "test": "assert     surfacearea_sphere(0) == 0",
        "num_ids": 145
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    while (i <= n) and (i!= 2):\n        i = i * 3 + 1\n    return i\n",
        "test": "assert     centered_hexagonal_number(2) == 4",
        "num_ids": 499
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #dict_1 = dict1.copy()\n    #dict_2 = dict2.copy()\n    #dict_3 = dict3.copy()\n    #print(dict_1,dict_2,dict_3)\n    d = dict1.copy()\n    for k in dict1:\n        if k in dict2 and k in dict3:\n            if dict2[k] > dict3[k]:\n                d[k] = dict1[k]\n            else:\n                d[k] = dict2[k]\n        elif k in dict2:\n            d[k] = dict2[k]\n        else:\n            d[k] = dict3[k]\n    #print(d)\n    return d\n",
        "test": "assert     merge_dictionaries_three(dict2, dict3, dict1) == dict2",
        "num_ids": 523
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = collections.Counter(list1)\n    return my_dict\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 2222
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    if N % 2 == 0:\n        return closest_num(N-1)\n    else:\n        return closest_num(N-1) + 1\n",
        "test": "assert     closest_num(0) == 0",
        "num_ids": 133
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l = len(list1)\n    for i in range(0, l-1):\n        for j in range(i+1, l):\n            if len(list1[i]) > len(list1[j]):\n                l = l\n                print(l, list1[i], list1[j])\n    print(l)\n",
        "test": "assert     len_log(['Hell', 'HeLl', 'Bye', 'HEL']) == 5",
        "num_ids": 237
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return False\n    \n    if sub_str in str1:\n        return True\n    \n    if sub_str[-1] not in str1:\n        return False\n    \n    i = len(sub_str) - 1\n    j = 0\n    \n    while i >= 0:\n        if sub_str[i] not in str1:\n            if j < len(str1) - len(sub_str):\n                return False\n            i -= 1\n        else:\n            j += 1\n            if j > len(sub_str) - len(str1):\n                return False\n        \n    return True\n",
        "test": "assert     find_substring('abcd', 'abcd') == True",
        "num_ids": 327
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2 == 0: return True \n    else: return False \n",
        "test": "assert     is_undulating(120) == True",
        "num_ids": 150
    },
    {
        "number": 93,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert     power(3, 0) == 1, 'incorrect result'",
        "num_ids": 95
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key = itemgetter(1))\n    return sorted_list[0]\n",
        "test": "assert     index_minimum([('a', 1), ('a', 3), ('b', 4)]) == ('a', 3)",
        "num_ids": 1492
    },
    {
        "number": 95,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_list = lst[0]\n    smallest_list_index = 0\n    for item in lst:\n        if item < smallest_list:\n            smallest_list_index = lst.index(item)\n            smallest_list = item\n    return smallest_list_index + 1\n",
        "test": "assert     (Find_Min_Length([1, 2, 3, 4, 5]) == 1), \"The function should return 1, but return is : {}\".format(Find_Min_Length([1, 2, 3, 4, 5]))",
        "num_ids": 386
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "test": "assert         divisor(7) == 2",
        "num_ids": 258
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in range(0,len(list1)):\n        for x in list1[i]:\n            if x not in freq.keys():\n                freq[x] = 1\n            else:\n                freq[x] = freq[x] + 1\n    return freq\n",
        "test": "assert         frequency_lists([[1,2,1,2], [1,2,1,2], [1,2], [2,3]]) == {1:2, 2:2, 3:1}",
        "num_ids": 367
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 0\n    for num in numbers:\n        sum = sum + num\n    return sum\n",
        "test": "assert     multiply_num([3, 2, 1]) == 6",
        "num_ids": 266
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"\"\n    if n < 0: \n        n = n*(-1)\n    n = n//2\n    return decimal_to_binary(n) + decimal_to_binary(n+1)\n",
        "test": "assert     decimal_to_binary(-5) == '101'",
        "num_ids": 293
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    for i in range(2,num):\n        if num % i == 0:\n            return i\n    return num\n",
        "test": "assert     next_smallest_palindrome(1) == 1",
        "num_ids": 340
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    \n    # If arr is empty\n    if n == 0:\n        return -1\n    \n    # If k is greater than length of array\n    if k > n:\n        return -1\n    \n    # If k is less than 0 or greater than the length of array\n    if k <= 0:\n        return arr[-1]\n    \n    # Get the index of the kth element\n    return (arr[n-k-1] + 1)%n\n",
        "test": "assert     is_array(kth_element(arr, 6)) == False",
        "num_ids": 232
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n",
        "test": "assert     snake_to_camel(\"DOG\") == \"Dog\"",
        "num_ids": 174
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def S(n):\n        if n == 0: return 0\n        if n == 1: return 1\n        \n        return S(n - 1) + m - n\n        \n    # return the sum of the Eulerian numbers\n    return S(n)\n",
        "test": "assert     eulerian_num(2, 4) == 3",
        "num_ids": 374
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # your code goes here\n    input_list.sort(key=lambda x: x.split())\n    return input_list\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 249
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # start and end of loop\n    count = 0\n    # loop through the lst and check for True\n    for item in lst:\n        if item:\n            count = count+1\n    return count\n",
        "test": "assert     count([1,0,1,1,0,0,1]) == 4",
        "num_ids": 196
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_tup)!= 1:\n        test_list.append(test_tup[0])\n    else:\n        test_list.append(tuple(test_tup))\n",
        "test": "assert     add_lists([1, 2],('a',1)) == True",
        "num_ids": 2270
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(merged_list)\n    heapq.heappush(merged_list, num1)\n    heapq.heappush(merged_list, num2)\n    heapq.heappush(merged_list, num3)\n    print(merged_list)\n    return merged_list\n",
        "test": "assert ",
        "num_ids": 363
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    result = 0\n    for x in range(n):\n        result += int(s[x])\n    return result\n",
        "test": "assert     odd_Equivalent(\"1010\",3) == 5",
        "num_ids": 211
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    \n    if type(nestedlist) == list:\n        for item in nestedlist:\n            if type(item) == list:\n                common.extend(common_in_nested_lists(item))\n            else:\n                common.append(item)\n    elif type(nestedlist) == set:\n        for item in nestedlist:\n            if type(item) == set:\n                common.extend(common_in_nested_lists(item))\n            else:\n                common.append(item)\n    else:\n        print('Please provide a valid list of lists.')\n        raise TypeError\n    return common\n",
        "test": "assert     common_in_nested_lists([2,3,[4]]) == [2,3,4]",
        "num_ids": 524
    },
    {
        "number": 113,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(\"Test2\") == False",
        "num_ids": 136
    },
    {
        "number": 115,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # list1 is not empty\n    if len(list1) > 0:\n        # all elements in list1 are empty\n        for element in list1:\n            if len(element) > 0:\n                # all elements in list1 are empty\n                return False\n    return True\n    \ndef not_empty_dit(list1):\n    '''\n    Write a function to check whether a list contains any dictionary\n    '''\n    # list1 is empty\n    if len(list1) == 0:\n        return True\n    # list1 is not empty\n    for element in list1:\n        # each element in list1 is not empty\n        if len(element) > 0:\n            return False\n    # all elements in list1 are not empty\n    return True\n    \ndef similar(list1, list2):\n    '''\n    Write a function that returns whether two lists have the same length and \n    contain the same values.\n    '''\n    # compare elements in list1 and list2\n    # length and the number of elements in each list is same\n    if len(list1)!= len(list2):\n        return False\n    # if length of list1 and list2 are equal\n    # then all the elements in list1 are the same\n    elif len(list1) == len(list2):\n        # check every element in list1 and list2\n        for element in list1:\n            if element not in list2:\n                return False\n    return True\n    \ndef not_similar(list1, list2):\n    '''\n    Write a function that returns whether two lists have different lengths, \n    contain different values, and have different order.\n    '''\n    # length of list1 and list2 are not equal\n    # length of list1 and list2 should be equal\n    if len(list1)!= len(list2):\n        return False\n    # check whether all elements in list1 are equal\n    # and whether all elements in list2 are equal\n    elif len(list1) == len(list2):\n        # check whether every element in list1 and list2 are not equal\n        for element in list1:\n            if element not in list2:\n                return False\n    # all elements in list1 are not equal\n    # but elements in list2 are not equal\n    else:\n        # all elements in list1 and list2 are equal\n        return True\n    \ndef not_diff_list(list1, list2):\n    '''\n    Write a function that returns whether two lists have different lengths, \n    contain different values, and have different order.\n    '''\n    # length of list1 and list2 are not equal\n    # length of list1 and list2 should be equal\n    # and list2 should be not empty\n    if len(list1)!= len(list2):\n        return False\n    # check whether every element in list1 and list2 are not equal\n    # and length of list1 and list2 are equal\n    elif len(list1) == len(list2):\n        # check whether every element in list1 and list2 are not equal\n        for element in list1:\n            if element not in list2:\n                return False\n    # all elements in list1 and list2 are not equal\n    # and list1 and list2 are not empty\n    elif len(list1) == len(list2) and len(list1)!= 0:\n        return True\n    else:\n        # all elements in list1 and list2 are not equal\n        return False\n",
        "test": "assert     empty_dit([]) == True",
        "num_ids": 366
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "test": "assert tuple_to_int((1,2,3,4)) == 4",
        "num_ids": 172
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for x in test_list:\n        for y in x:\n            y = float(y)\n            y = str(y)\n            y = y.replace('.','')\n            y = y.replace(',','')\n            y = y.replace(' ','')\n            y = float(y)\n            test_list.remove(x)\n            test_list.append(y)\n    return test_list\n",
        "test": "assert     list_to_float(['a', 'bbb', 'ccc', 'dddd', 'eeee']) == ['a', 1.0, 2.0, 3.0, 4.0]",
        "num_ids": 526
    },
    {
        "number": 118,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list(\" \") == []",
        "num_ids": 102
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == None or len(arr) == 0:\n        return -1\n    \n    count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] == arr[count] and count!= i:\n            count = i\n    \n    return arr[count]\n",
        "test": "assert     search([1, 1, 2, 1]) == 1",
        "num_ids": 2245
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_p = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i < j and max_p < (list1[i] * list1[j]):\n                max_p = list1[i] * list1[j]\n    return max_p\n",
        "test": "assert     max_product_tuple([1,2,3]) == 6",
        "num_ids": 422
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for number in range(1, limit):\n        sum += int(str(number) + str(number)[::-1])\n        if sum > limit:\n            break\n    return sum\n",
        "test": "assert     amicable_numbers_sum(10) == 2",
        "num_ids": 411
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    import numpy as np\n    a = np.array(a)\n    b = np.array(b)\n    angle = np.angle(a)\n    return angle\ndef z_rotation(z):\n    '''\n    Write a function to rotate a complex number\n    '''\n    import numpy as np\n    from math import degrees,acos,asin,atan2,sqrt\n    import numpy as np\n    z = np.array(z)\n    angle_r = np.angle(z)\n    rot_angle = degrees(angle_r)\n    rot_x = degrees(acos(z[0]))\n    rot_y = degrees(asin(z[1]))\n    rot_z = degrees(atan2(z[2],z[0]))\n    return [rot_x, rot_y, rot_z, rot_angle]\n",
        "test": "assert     angle_complex(1,0) == 0",
        "num_ids": 261
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    diffs = []\n    for x in range(len(string)):\n        diffs.append(string.count(\"1\") - string.count(\"0\"))\n    return max(diffs)\n",
        "test": "assert     find_length('011') == 1",
        "num_ids": 2186
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    try:\n        if a==0:\n            return b\n        if b==0:\n            return a\n        c=a\n        d=b\n        while d!=0:\n            if d%c==0:\n                return c\n            c+=1\n            d//=c\n        return c\n    except:\n        return \"Error\"\n    pass\n",
        "test": "assert     sum(3,4) == 9",
        "num_ids": 219
    },
    {
        "number": 127,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if (x > 0) and (y > 0):\n        result = x * y\n        return result\n    else:\n        print(\"Invalid input\")\n",
        "test": "assert     multiply_int(1, 2) == 2",
        "num_ids": 150
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    count = 0\n    word = ''\n    for word in str:\n        if len(word) > n:\n            count += 1\n            word = word[:n]\n            if count == n:\n                print(word)\n",
        "test": "assert     long_words(2, ['cat', 'dog', 'cat', 'dog', 'dog', 'dog', 'cat', 'dog', 'cat', 'dog', 'dog']) == ['cat', 'dog']",
        "num_ids": 522
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    m = len(my_matrix)\n    n = len(my_matrix[0])\n",
        "test": "assert      magic_square_test( [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ) == False, \"magic_square_test\"",
        "num_ids": 315
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    maximum = max(freq.values())\n    for num in freq:\n        if freq[num] == maximum:\n            return num\n    return None\n",
        "test": "assert     max_occurrences([4,3,1,2,7,5,6,3,4,3]) == 3",
        "num_ids": 356
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    my_string = str1\n    my_vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    my_list = []\n    \n    for item in my_vowels:\n        if item in my_string.lower():\n            my_list.append(item)\n    \n    # Append any remaining vowels in the list to a string to reverse\n    for item in my_list:\n        if item not in my_string.lower():\n            my_string = my_string.replace(item, \"\")\n    \n    return my_string\n",
        "test": "assert     reverse_vowels('aaaaaa') == 'aab'",
        "num_ids": 379
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    res = \"\"\n    for i in tup1:\n        res += str(i)\n    return res\n    \n    \ndef tup_string2(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    res = \"\"\n    for i in range(len(tup1)):\n        res += str(tup1[i])\n        if i < len(tup1)-1:\n            res += \",\"\n    return res\n    \n",
        "test": "assert     tup_string((1,2,3)) == '123'",
        "num_ids": 197
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += -nums[i]\n    return total\n",
        "test": "assert     sum_negativenum([]) == 0, 'empty list'",
        "num_ids": 217
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i % 2 == 0):\n            sum = sum + (i + 1) * n\n        else:\n            sum = sum + i * n\n    return sum\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 226
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    count = 0\n    if type(nums) == type([0,1,2,3,4,5,6,7,8,9]):\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                zeros += 1\n            else:\n                count += 1\n    else:\n        for i in nums:\n            if i == 0:\n                zeros += 1\n            else:\n                count += 1\n    \n    if zeros == 0:\n        return 0\n    else:\n        return zeros/count\n",
        "test": "assert     zero_count([1, 0, 0, 0, 0, 0]) == 0.0",
        "num_ids": 387
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Write your code here\n    if (n == 0):\n        return True\n    if (n == 1):\n        return False\n    if (n%2!= 0):\n        return False\n    elif(n < 0):\n        return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(3) == False, \"False\"",
        "num_ids": 381
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * 3.14 * r * r\n    return c\n",
        "test": "assert     circle_circumference(4) == 6*math.pi, 'circle_circumference function is incorrect'",
        "num_ids": 147
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat = []\n    for item in test_list:\n        if type(item) == list:\n            flat.extend(item)\n        else:\n            flat.append(item)\n    return flat\n",
        "test": "assert     extract_singly([]) == []",
        "num_ids": 264
    },
    {
        "number": 141,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_num = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    for i in range(len(nums)-1,0,-1):\n        if nums[i] > max_num:\n            max_num = nums[i]\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 414
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count1=0\n    count2=0\n    count3=0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i==j==k:\n                    count1+=1\n                if i==k==j:\n                    count2+=1\n                if i==j==k:\n                    count3+=1\n    return count1,count2,count3\n",
        "test": "assert     count_samepair([1,2,3], [2,3,4], [1,2,3]), \"Incorrect answer\"",
        "num_ids": 389
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = 0\n    for i in range(len(Input)): \n        if (Input[i][1] == \"LIST\"): \n            n = n + 1\n    return n \n",
        "test": "assert     find_lists([1,1,2,3,3,3,4]) == 2, \"Expected 2, got {}\".format(2)",
        "num_ids": 361
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if(n == 1): \n        return arr[0] \n    else: \n        max_ = arr[0] \n        for i in range(1, n): \n            if (arr[i] - arr[i - 1] > max_): \n                max_ = arr[i] - arr[i - 1] \n        return max_ \n \n ",
        "test": "assert ",
        "num_ids": 361
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # YOUR CODE HERE\n    pass\n",
        "test": "assert     find_solution(1, 1, 3) == None",
        "num_ids": 424
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # write your code here\n    return [i for i in list1 if i not in list2]\n",
        "test": "assert     remove_elements([\"a\", \"b\", \"c\", \"d\"], [\"a\", \"c\"]) == [\"a\", \"c\"]",
        "num_ids": 287
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2) + sum_series(n-4)\n",
        "test": "assert     sum_series(8) == 30, \"incorrect result\"",
        "num_ids": 212
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # length\n    L = l[0]\n    # sides\n    S = 0\n    for i in range(len(s)):\n        S += s[i]\n    # print('L = ', L,'S = ', S)\n    return L*S\n",
        "test": "assert area_polygon(0, 0) == 0.0",
        "num_ids": 272
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #count the divisors in the number\n    divs = [x for x in range(1, n+1)]\n    # make all the divisors in the number\n    for div in divs:\n        if n % div == 0:\n            return True\n        else:\n            continue\n    return False\n    \n    \ndef is_prime(n):\n    '''\n    return True if n is prime else return false\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    for i in range(5,int(math.sqrt(n))+1,6):\n        if n%i==0:\n            return False\n    return True\n",
        "test": "assert     div_sum(3) == 1",
        "num_ids": 272
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    chars = set(str1)\n    count = 0\n    for c in chars:\n        position = str1.find(c)\n        count += position\n    return count\n",
        "test": "assert     count_char_position('abc') == 3",
        "num_ids": 318
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd = []\n    even = []\n",
        "test": "assert ",
        "num_ids": 135
    },
    {
        "number": 167,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 2: \n        return n \n    else:\n        return next_power_of_2(n//2) + 1\n",
        "test": "assert     next_power_of_2(2) == 2",
        "num_ids": 195
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #Your code here\n    return len(a[a==x])\n",
        "test": "assert     frequency(1, [1, 2, 2, 3, 1]) == 0",
        "num_ids": 141
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n",
        "test": "assert     sum_range_list([1,2,3,4], 0, 4) == 5",
        "num_ids": 297
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    side1 = math.sqrt(3) * a\n    side2 = math.sqrt(2) * a\n    side3 = math.sqrt(1) * a\n    side4 = math.sqrt(0.5) * a\n    side5 = math.sqrt(1) * a\n    side6 = math.sqrt(2) * a\n    side7 = math.sqrt(3) * a\n    side8 = math.sqrt(4) * a\n    side9 = math.sqrt(5) * a\n    side10 = math.sqrt(6) * a\n    side11 = math.sqrt(7) * a\n    side12 = math.sqrt(8) * a\n    side13 = math.sqrt(9) * a\n    side14 = math.sqrt(10) * a\n    side15 = math.sqrt(11) * a\n    side16 = math.sqrt(12) * a\n    side17 = math.sqrt(13) * a\n    side18 = math.sqrt(14) * a\n    side19 = math.sqrt(15) * a\n    side20 = math.sqrt(16) * a\n    side21 = math.sqrt(17) * a\n    side22 = math.sqrt(18) * a\n    side23 = math.sqrt(19) * a\n    side24 = math.sqrt(20) * a\n    side25 = math.sqrt(21) * a\n    side26 = math.sqrt(22) * a\n    side27 = math.sqrt(23) * a\n    side28 = math.sqrt(24) * a\n    side29 = math.sqrt(25) * a\n    side30 = math.sqrt(26) * a\n    side31 = math.sqrt(27) * a\n    side32 = math.sqrt(28) * a\n    side33 = math.sqrt(29) * a\n    side34 = math.sqrt(30) * a\n    side35 = math.sqrt(31) * a\n    side36 = math.sqrt(32) * a\n    side37 = math.sqrt(33) * a\n    side38 = math.sqrt(34) * a\n    side39 = math.sqrt(35) * a\n    side40 = math.sqrt(36) * a\n    side41 = math.sqrt(37) * a\n    side42 = math.sqrt(38) * a\n    side43 = math.sqrt(39) * a\n    side44 = math.sqrt(40) * a\n    side45 = math.sqrt(41) * a\n    side46 = math.sqrt(42) * a\n    side47 = math.sqrt(43) * a\n    side48 = math.sqrt(44) * a\n    side49 = math.sqrt(45) * a\n    side50 = math.sqrt(46) * a\n    side51 = math.sqrt(47) * a\n    side52 = math.sqrt(48) * a\n    side53 = math.sqrt(49) * a\n    side54 = math.sqrt(50) * a\n    side55 = math.sqrt(51) * a\n    side56 = math.sqrt(52) * a\n    side57 = math.sqrt(53) * a\n    side58 = math.sqrt(54) * a\n    side59 = math.sqrt(55) * a\n    side60 = math.sqrt(56) * a\n    side61 = math.sqrt(57) * a\n    side62 = math.sqrt(58) * a\n    side63 = math.sqrt(59) * a\n    side64 = math.sqrt(60) * a\n    side65 = math.sqrt(61) * a\n    side66 = math.sqrt(62) * a\n    side67 = math.sqrt(63) * a\n    side68 = math.sqrt(64) * a\n    side69 = math.sqrt(65) * a\n    side70 = math.sqrt(66) * a\n    side71 = math.sqrt(67) * a\n    side72 = math.sqrt(68) * a\n    side73 = math.sqrt(69) * a\n    side74 = math.sqrt(70) * a\n    side75 = math.sqrt(71) * a\n    side76 = math.sqrt(72) * a\n    side77 = math.sqrt(73) * a\n    side78 = math.sqrt(74) * a\n    side79 = math.sqrt(75) * a\n    side80 = math.sqrt(76) * a\n    side81 = math.sqrt(77) * a\n    side82 = math.sqrt(78) * a\n    side83 = math.sqrt(79) * a\n    side84 = math.sqrt(80) * a\n    side85 = math.sqrt(81) * a\n    side86 = math.sqrt(82) * a\n    side87 = math.sqrt(83) * a\n    side88 = math.sqrt(84) * a\n    side89 = math.sqrt(85) * a\n    side90 = math.sqrt(86) * a\n    side91 = math.sqrt(87) * a\n    side92 = math.sqrt(88) * a\n    side93 = math.sqrt(89) * a\n    side94 = math.sqrt(90) * a\n    side95 = math.sqrt(91) * a\n    side96 = math.sqrt(92) * a\n    side97 = math.sqrt(93) * a\n    side98 = math.sqrt(94) * a\n    side99 = math.sqrt(95) * a\n    side100 = math.sqrt(96) * a\n    side101 = math.sqrt(97) * a\n    side102 = math.sqrt(98) * a\n    side103 = math.sqrt(99) * a\n    side104 = math.sqrt(100) * a\n    side105 = math.sqrt(101) * a\n    side106 = math.sqrt(102) * a\n    side107 = math.sqrt(103) * a\n    side108 = math.sqrt(104) * a\n    side109 = math.sqrt(105) * a\n    side110 = math.sqrt(106) * a\n    side111 = math.sqrt(107) * a\n    side112 = math.sqrt(108) * a\n    side113 = math.sqrt(109) * a\n    side114 = math.sqrt(110) * a\n    side115 = math.sqrt(111) * a\n    side116 = math.sqrt(112) * a\n    side117 = math.sqrt(113) * a\n    side118 = math.sqrt(114) * a\n    side119 = math.sqrt(115) * a\n    side120 = math.sqrt(116) * a\n    side121 = math.sqrt(117) * a\n    side122 = math.sqrt(118) * a\n    side123 = math.sqrt(119) * a\n    side124 = math.sqrt(120) * a\n    side125 = math.sqrt(121) * a\n    side126 = math.sqrt(122) * a\n    side127 = math.sqrt(123) * a\n    side128 = math.sqrt(124) * a\n    side129 = math.sqrt(125) * a\n    side130 = math.sqrt(126) * a\n    side131 = math.sqrt(127) * a\n    side132 = math.sqrt(128) * a\n    side133 = math.sqrt(129) * a\n    side134 = math.sqrt(130) * a\n    side135 = math.sqrt(131) * a\n    side136 = math.sqrt(132) * a\n    side137 = math.sqrt(133) * a\n    side138 = math.sqrt(134) * a\n    side139 = math.sqrt(135) * a\n    side140 = math.sqrt(136) * a\n    side141 = math.sqrt(137) * a\n    side142 = math.sqrt(138) * a\n    side143 = math.sqrt(139) * a\n    side14",
        "test": "assert     perimeter_pentagon(7) == 11",
        "num_ids": 3731
    },
    {
        "number": 172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    c = s.count('std')\n    print(c)\n    return c\n",
        "test": "assert     count_occurance(\"stdasd\") == 3, \"std should be 3\"",
        "num_ids": 203
    },
    {
        "number": 222,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # define data type\n    data_type = ()\n    if len(test_tuple)!= 3:\n        raise TypeError(\"The tuple must have 3 elements\")\n",
        "test": "assert not check_type((1,2,3))",
        "num_ids": 255
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    i = 0\n    for j in range(n):\n        if arr[j] == x:\n            i = i + 1\n            if i == n/2:\n                return True\n            elif i > n/2:\n                return False\n    return False\n",
        "test": "assert     is_majority([2,1,1,2,3,3],3,[2]) == False",
        "num_ids": 327
    },
    {
        "number": 224,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # code goes here\n    if n <= 2: \n        return 0\n    res = 0\n    while n > 0: \n        res += n & 1\n        n >>= 1\n    return res \n",
        "test": "assert     count_Set_Bits(8) == 1",
        "num_ids": 256
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_string = ''.join(filter(lambda x: x%2!= 0, str))\n    return odd_string\n",
        "test": "assert     odd_values_string('13')=='12'",
        "num_ids": 184
    },
    {
        "number": 227,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n",
        "test": "assert     min_of_three(4,6,8) == 4, \"4 is not min of 3\"",
        "num_ids": 211
    },
    {
        "number": 228,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n >= l and n <= r:\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(12,5,12) == True",
        "num_ids": 430
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if type(arr) is not list:\n        return None\n    if len(arr) < 1:\n        return arr\n    if len(arr) > n:\n        return None\n    if arr[0] < 0:\n        arr = arr[::-1]\n    if arr[0] >= n:\n        arr = arr[::-1]\n    for i in range(len(arr) - n):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n    arr = arr[:n]\n    arr.extend(arr[-n:])\n    return arr\n",
        "test": "assert ",
        "num_ids": 537
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('\\n',' ')\n    str1=str1.replace('\\t',' ')\n    str1=str1.replace('\\r',' ')\n    return str1\n",
        "test": "assert     replace_blank('','') == '', 'Test case failed'",
        "num_ids": 217
    },
    {
        "number": 232,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    outlist = []\n    while list1:\n        outlist.append(list1[0])\n        list1.remove(list1[0])\n        if len(list1)>=n:\n            outlist.append(list1[0])\n            list1.remove(list1[0])\n            if len(list1)>=n:\n                outlist.append(list1[0])\n                list1.remove(list1[0])\n    return outlist\n",
        "test": "assert     larg_nnum([],3) == []",
        "num_ids": 234
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h)\n",
        "test": "assert     lateralsuface_cylinder(1,1) == 2",
        "num_ids": 127
    },
    {
        "number": 234,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l*l*l)\n    return volume\n",
        "test": "assert     volume_cube(0) == 0",
        "num_ids": 111
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    evens = 0\n    for x in range(n):\n        if x%2 == 0:\n            evens = evens + 2**x\n    return evens\ndef add_to_list(add_to_list,a,b):\n    '''\n    write a python function to add a number to a list\n    '''\n    add_to_list.append(a+b)\n    return add_to_list\ndef remove_list(remove_list,a,b):\n    '''\n    write a python function to remove a number from a list\n    '''\n    remove_list.remove(a+b)\n    return remove_list\ndef sum_of_list(list_number):\n    '''\n    Write a python function to get the sum of the even numbers of a given list.\n    '''\n    sum = 0\n    for x in range(len(list_number)):\n        if x%2 == 0:\n            sum = sum + list_number[x]\n    return sum\ndef test_even_bit_set_number(evens):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for x in range(evens):\n        print(x)\n        print(even_bit_set_number(x))\ndef test_add_to_list(a,b):\n    '''\n    Write a python function to add a number to a list\n    '''\n    for x in range(a+b):\n        print(x)\n        print(add_to_list(a,b))\ndef test_remove_list(a,b):\n    '''\n    Write a python function to remove a number from a list\n    '''\n    for x in range(a+b):\n        print(x)\n        print(remove_list(a,b))\ndef test_sum_of_list(a,b):\n    '''\n    Write a python function to get the sum of a list\n    '''\n    print(sum_of_list(a))\n    print(sum_of_list(b))\ntest_even_bit_set_number(even_bit_set_number(25))\ntest_add_to_list(3,4)\ntest_remove_list(3,4)\ntest_sum_of_list(3,4)",
        "test": "assert         even_bit_set_number(101) == 10, 'Check your code'",
        "num_ids": 299
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #make a dictionary of unique tuples\n    d = dict()\n    #use a for loop to go through each tuple\n    for i in test_list:\n        #loop through all the tuples and add to dictionary\n        d[i[0]] = d.get(i[0], 0) + 1\n        #if the dictionary is empty, set it to 1\n    return d \n",
        "test": "assert     check_occurences([(1, 2), (2, 3), (2, 3)]) == {(1, 2): 2, (2, 3): 2}",
        "num_ids": 2223
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    char_set = set(str)\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] not in char_set:\n            char_set.remove(str[i])\n            count += 1\n    return count\n    pass\n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 301
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int((m+n-2)*(m+n-2)/2)\n",
        "test": "assert     get_total_number_of_sequences(2,2) == 2",
        "num_ids": 366
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #case 1: use list comprehension\n    print(list(map(lambda i:i if i<list2[0] else i-list2[0],list1)))\n    #case 2: use iterative\n    list2=list2[::-1]\n    print(list(map(lambda i:list2[0]*i if i==list2[0] else list2[0]*i,list1)))\n",
        "test": "assert     replace_list([\"Foo\",\"Bar\",\"Baz\",\"Foo\"], [\"Foo\",\"Bar\",\"Baz\"]) == [\"Foo\",\"Bar\",\"Baz\",\"Foo\"]",
        "num_ids": 385
    },
    {
        "number": 242,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n    pass\n",
        "test": "assert     count_charac('Python') == 2, \"count_charac('Python') failed to return 2\"",
        "num_ids": 173
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    fact = math.factorial(N) \n    while (N!=1 and fact%N==0):\n        N=N//fact \n    if (N!=1):\n        return N**2\n    else:\n        return -1\nprint(next_Perfect_Square(200))",
        "test": "assert     next_Perfect_Square(100) == 109",
        "num_ids": 2185
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr: return 0\n    res, base = arr[0], arr[0]\n    for num in arr[1:]:\n        if num > base:\n            res += base\n            base = num\n        else:\n            res += num\n    return res\n",
        "test": "assert ",
        "num_ids": 390
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number ** 0.5\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 420
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str=='':\n        return 0\n    i=0\n    for j in range(0,len(str)):\n        for k in range(j,len(str)):\n            \n            if str[j]!=str[k]:\n                break\n            else:\n                i=j\n                break\n        else:\n            if j-i+1>len(str):\n                return len(str)\n            elif j-i+1==len(str):\n                return j-i\n            else:\n                i=j\n                break\n        \n    return i+1\n",
        "test": "assert     lps(\"aab\") == 3, \"aab\"",
        "num_ids": 417
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n * (n + 1) // 2) - (n * (n + 1) // 2) + 1\n",
        "test": "assert         harmonic_sum(1) == 1",
        "num_ids": 123
    },
    {
        "number": 249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    s1=set(array_nums1)\n    s2=set(array_nums2)\n    return len(s1.intersection(s2))\n    \n    \ndef solution(nums1,nums2):\n    '''\n    Given two lists of numbers, return an array sorted in increasing order by the second element in each.\n    '''\n    arr=[nums1[i]+nums2[i] for i in range(len(nums1))]\n    arr.sort()\n    return arr\n    \n",
        "test": "assert ",
        "num_ids": 414
    },
    {
        "number": 250,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X([1, 2, 2, 1, 1], 1) == 3, \"Test 1\"",
        "num_ids": 176
    },
    {
        "number": 251,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #loop through the list, removing the element, and adding it to the new position\n    new_position = []\n    for i in list:\n        if i==element:\n            new_position.append(i)\n        else:\n            new_position.append(i)\n    return new_position\n",
        "test": "assert     insert_element([1,2,3,4,5,6,7,8,3],0)==[1,2,3,4,5,6,7,8,3]",
        "num_ids": 357
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import numpy as np\n",
        "test": "assert     convert(-1+1j) == (-1,1)",
        "num_ids": 389
    },
    {
        "number": 253,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    # Let's check if the list is empty, if it is, return 0. If not, return the number of integers in the list.\n    if len(list1) == 0:\n        return 0\n    else:\n        # Let's check if the list contains only integers. If it is, return 1, if not, return the number of integers in the list.\n        # if the list contains only integers and the function returns 0, because the list is empty.\n        if all(isinstance(x, int) for x in list1):\n            return 1\n        else:\n            return 0\n",
        "test": "assert     count_integer([]) == 0, 'count_integer should return 0'",
        "num_ids": 378
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    else:\n        return combinations_colors(l, n - 1) + [tuple(l)]\n",
        "test": "assert     combinations_colors([], 0) == []",
        "num_ids": 563
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Determine if the number is divisible by 3\n    if n%3==0:\n        # If the number is divisible by 3, then the function should return 2 as it is divisible by 3\n        return 2\n    # Otherwise, the function should return 1\n    return 1\n",
        "test": "assert     count_Primes_nums(6) == 2",
        "num_ids": 346
    },
    {
        "number": 257,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "test": "assert     swap_numbers(1, 2) == (2, 1)",
        "num_ids": 148
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def elements(x):\n        '''\n        Return the maximum of all of the elements in the given tuple.\n        '''\n        return max(x)\n    return max(test_tup1)\n    \n    \n    \n    # Write your code here\n    pass\n",
        "test": "assert     maximize_elements((3, 3), (1, 1)) == (1, 1), 'incorrect'",
        "num_ids": 428
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    count=0\n    \n    #loop to calculate nth newman\u2013shanks\u2013williams prime numbers\n    while (n%2==0): \n        n=n//2\n        count+=1\n        \n    #loop to calculate nth newman\u2013shanks\u2013williams prime numbers\n    while (n%3==0): \n        n=n//3\n        count+=1\n    \n    #if number is divisible by 2 or 3, it will give us nth newman\u2013shanks\u2013williams prime number\n    if (n==2 or n==3):\n        prime=[2]\n        prime.extend([3,n])\n    else:\n        prime=[n]\n        prime.extend([(n+1)//2,3])\n    \n    #loop to return nth newman\u2013shanks\u2013williams prime numbers\n    for i in range(1, count+1):\n        new_prime=prime[i]\n        while (new_prime%2==0): \n            new_prime=new_prime//2\n        if (new_prime%3==0): \n            prime.append(new_prime)\n    \n    #return prime list\n    return prime\n    \nprint(newman_prime(24))\n",
        "test": "assert     newman_prime(1) == 1",
        "num_ids": 600
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Your code here\n",
        "test": "assert     division_elements(tup1, tup2) == (int, 0)",
        "num_ids": 2152
    },
    {
        "number": 262,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = []\n    for i in range(L):\n        a.append(list1[i])\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     split_two_parts([1,2,3,4,5,6,7,8,9], 1) == [1]",
        "num_ids": 2286
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Your code here\n    dog_age = 0\n    dog_age = h_age * 365\n    return dog_age\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 128
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    ls = []\n    for i in range(0, len(S), step):\n        if (i+1) >= len(S):\n            return ls\n        ls.append(S[i:i+step])\n    return ls\n",
        "test": "assert     list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]",
        "num_ids": 528
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Your code here\n    return 0\n",
        "test": "assert     lateralsurface_cube(1) == 0",
        "num_ids": 183
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**2\n    return sum\nprint(square_Sum(5))",
        "test": "assert ",
        "num_ids": 161
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n+1): \n        for j in range(i):\n            if (n % i == 0): \n                return i \n    return 0 \n",
        "test": "assert     find_star_num(0) == 0",
        "num_ids": 202
    },
    {
        "number": 269,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(k).encode(\"ascii\")\n",
        "test": "assert ",
        "num_ids": 144
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_num = 0\n    index = 0\n    while(index < len(arr)):\n        if(arr[index] % 2 == 0):\n            even_num += arr[index]\n            sum += even_num\n            index += 1\n        else:\n            index += 1\n    return sum\n",
        "test": "assert     sum_even_and_even_index([]) == 0",
        "num_ids": 2327
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n",
        "test": "assert ",
        "num_ids": 4061
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # TODO\n    # What happens when you try to extract the last item in a tuple:\n    # I will have it be the last element of the tuple, but the function will crash if it\n    # tries to extract the last element of a tuple, because the last element will be\n    # in the tuple itself.\n    # So, I will have to add a special case. The exception is when the last element\n    # is a non-tuple element. In this case, the tuple will be the last element, not a non-tuple element.\n    # So, it's the same as a tuple.\n    # So, in this case, the last element will be in the tuple itself.\n    # So, I'll add a special case here.\n    if len(test_list) == 0:\n        return []\n    elif len(test_list) == 1:\n        return [test_list[0][0]]\n    elif len(test_list) == 2:\n        return [test_list[0][0], test_list[1][0]]\n    elif len(test_list) == 3:\n        return [test_list[0][0], test_list[1][0], test_list[2][0]]\n    elif len(test_list) == 4:\n        return [test_list[0][0], test_list[1][0], test_list[2][0], test_list[3][0]]\n    elif len(test_list) == 5:\n        return [test_list[0][0], test_list[1][0], test_list[2][0], test_list[3][0], test_list[4][0]]\n    elif len(test_list) == 6:\n        return [test_list[0][0], test_list[1][0], test_list[2][0], test_list[3][0], test_list[4][0], test_list[5][0]]\n    else:\n        return [test_list[0][0], test_list[1][0], test_list[2][0], test_list[3][0], test_list[4][0], test_list[5][0], test_list[6][0]]\n",
        "test": "assert     rear_extract(test_list) == [3,4,5]",
        "num_ids": 758
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # write your code here\n    pass",
        "test": "assert     substract_elements(test_tup1, test_tup2) == (1, 0, 2)",
        "num_ids": 184
    },
    {
        "number": 274,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # base case: if n = 0\n    if n == 0: \n        return 0\n    # case when n = 1 \n    if n == 1: \n        return 1\n    # otherwise\n    else: \n        # base case\n        if n == 2: \n            return 2\n        # first case\n        elif n == 3: \n            return 4\n        # second case\n        elif n == 4: \n            return 8\n        # third case\n        elif n == 5: \n            return 16\n        # fourth case\n        elif n == 6: \n            return 32\n        # fifth case\n        elif n == 7: \n            return 64\n        # sixth case\n        elif n == 8: \n            return 128\n        # seventh case\n        elif n == 9: \n            return 256\n        # eighth case\n        elif n == 10: \n            return 512\n        # first case\n        else: \n            # base case\n            if n % 2 == 0: \n                return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n            # second case\n            else: \n                return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2) + even_binomial_Coeff_Sum(n-3) + even_binomial_Coeff_Sum(n-4) + even_binomial_Coeff_Sum(n-5) + even_binomial_Coeff_Sum(n-6) + even_binomial_Coeff_Sum(n-7) + even_binomial_Coeff_Sum(n-8) + even_binomial_Coeff_Sum(n-9) + even_binomial_Coeff_Sum(n-10)\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 882
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4/3 * pi * r**3 * h\n    return volume",
        "test": "assert     volume_cylinder(r=5,h=4) == 16",
        "num_ids": 175
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # A function to create a dictionary with the appropriate data types\n    def dict_new(dict):\n        for key in dict:\n            if isinstance(dict[key], int) or isinstance(dict[key], float):\n                dict[key] = dict[key]\n        return dict\n    # Create an empty dictionary and populate it with the values of the user input.\n    dict = dict.copy()\n    # Condition to remove values greater than n\n    if n < 1:\n        print(\"You need to enter a value greater than or equal to 1.\")\n    else:\n        # For each key in the dictionary\n        for key in dict:\n            # Condition to filter out entries with values less than n\n            if dict[key] > n:\n                # If the value is a string\n                if isinstance(dict[key], str) or isinstance(dict[key], int):\n                    # If the value is an int\n                    if isinstance(dict[key], int):\n                        # Put the value in the dictionary with the key as a string\n                        dict[key] = dict[key]\n                # If the value is a float\n                elif isinstance(dict[key], float):\n                    # Put the value in the dictionary with the key as a string\n                    dict[key] = dict[key]\n        # Return the dictionary\n        return dict_new(dict)\n",
        "test": "assert     dict_filter({\"A\":1,\"B\":2,\"C\":3},1) == {'A':1,\"B\":2,\"C\":3}",
        "num_ids": 589
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements([]) == 0, 'Test_2'",
        "num_ids": 308
    },
    {
        "number": 279,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n >= 0 and n <= n-1:\n        return n\n    else: \n        return -n\n",
        "test": "assert     is_num_decagonal(0) == 0, '0 is not a number.'",
        "num_ids": 290
    },
    {
        "number": 280,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert     sequential_search([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], 5) == (True, 0)",
        "num_ids": 250
    },
    {
        "number": 281,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # YOUR CODE HERE\n    if test_list == sorted(test_list):\n        return True\n    else:\n        return False\n    \n    #raise NotImplementedError\n",
        "test": "assert     all_unique([1,1,1,2,2,3,3,3,3,3]) == True, \"Each element in the list is unique\"",
        "num_ids": 318
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    a=0\n    b=0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            a+=nums1[i]\n            b+=nums2[j]\n    return a/b\n",
        "test": "assert     sub_list([1,2,3], [4,5,6]) == [1,2]",
        "num_ids": 409
    },
    {
        "number": 283,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if (n%10)%2:\n        return False\n    for i in range(10):\n        if (n%10)==i:\n            return False\n    return True\n",
        "test": "assert     validate(23) == False",
        "num_ids": 150
    },
    {
        "number": 284,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "test": "assert         check_element([1,2,3,4,5,6],10)==False # False",
        "num_ids": 239
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_a = text.lower()\n    text_a_regex = re.compile(r'(\\b(a){3,})|(\\b(b){3,})|(\\b(a){1,})|(\\b(b){1,})|(\\b(b){0,})|(\\b(a){0,})|(\\b(b){0,})|(\\b(a){0,})|(\\b(b){0,})|(\\b(a){0,})|(\\b(b){0,})|(\\b(a){0,})', re.IGNORECASE)\n    \n    return text_a_regex.search(text_a)!= None\n",
        "test": "assert     text_match_two_three('abcefg') == True",
        "num_ids": 387
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    k = min(k, n)\n    for i in range(k):\n        a[i] = a[i] + a[i+k]\n",
        "test": "assert     max_sub_array_sum_repeated(a = [2, 3, 4, 5], n = 5, k = 3) == 12",
        "num_ids": 277
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    squares=[]\n    for i in range(1,n+1):\n        if i%2==0:\n            squares.append(i**2)\n    print(squares)\n",
        "test": "assert     square_Sum(5) == 25",
        "num_ids": 152
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Write your code here\n    if not list1:\n        return 0\n    #Use a heap to store the length of the list\n    heap = []\n    for item in list1:\n        if len(item) > len(heap):\n            heap = item\n    return len(heap)\n",
        "test": "assert     max_length([]) == 0",
        "num_ids": 303
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == k: \n        print('here', n, 'out of', k, 'right now')\n        return 1\n    if n < k:\n        return 0\n",
        "test": "assert     count_no_of_ways(2,2) == 1",
        "num_ids": 702
    },
    {
        "number": 292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n%2 == 0:\n        return int(n/2)\n    else:\n        return int((n-1)/2)\n",
        "test": "assert ",
        "num_ids": 124
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # n = w*h\n    n = h\n    a = 2 * math.sqrt((3 * n) / (math.sqrt(1 + 4 * n)))\n    b = a * 2 / 3\n    c = h / 2\n    if (math.sqrt(1 + 4 * n) * math.sqrt(1 - 4 * n)):\n        return a + b - c\n    return None\n    \ndef otherside_rightangle2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # n = w*h\n    n = h\n    a = 2 * math.sqrt((3 * n) / (math.sqrt(1 + 4 * n)))\n    b = a * 2 / 3\n    c = h / 2\n    if (math.sqrt(1 - 4 * n) * math.sqrt(1 + 4 * n)):\n        return a + b + c\n    return None\n",
        "test": "assert     otherside_rightangle(1,1) == 1",
        "num_ids": 468
    },
    {
        "number": 294,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    maximum_value = listval[0]\n    \n    for element in listval:\n        if element > maximum_value:\n            maximum_value = element\n    \n    return maximum_value\n",
        "test": "assert     max_val([1, 3, 5, 4]) == 5",
        "num_ids": 279
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_nums = []\n    \n    # Iterate through all numbers from 1 to the sqrt of the number\n    for i in range(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            div_nums.append(i)\n",
        "test": "assert         sum_div(11) == 3",
        "num_ids": 2246
    },
    {
        "number": 296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # The function will calculate the number of inversions in an array\n    # i.e invert of the array is the number of inversions (left to right)\n    # i.e from the left to right of the array\n    # array = [1, 2, 3, 4, 6, 7]\n    # new_arr = [2, 4, 1, 3, 7, 6]\n    # count = 0\n    # for i in range(len(array)):\n    #     count += 1\n    #     if array[i] > array[i - 1]:\n    #         new_arr[i] = array[i]\n    #     else:\n    #         new_arr[i] = array[i - 1]\n",
        "test": "assert     get_Inv_Count([1,3,2,4,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 52",
        "num_ids": 379
    },
    {
        "number": 297,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for items in list1:\n        if isinstance(items, list):\n            flattened.extend(flatten_list(items))\n        else:\n            flattened.append(items)\n    return flattened\n",
        "test": "assert     flatten_list([['a', 'b'], ['c', 'd']]) == ['a', 'b', 'c', 'd']",
        "num_ids": 417
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if not stdata:\n        return stdata\n    \n    stdata.sort()\n    return max(stdata, key=lambda tup: tup[1])\n",
        "test": "assert     max_aggregate([(1, 1), (2, 2)]) == 1",
        "num_ids": 578
    },
    {
        "number": 300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Your code here\n    if n < 2:\n        return n + 1\n    else:\n        return count_binary_seq(n - 1) + count_binary_seq(n - 2)\n    \nprint(count_binary_seq(4)",
        "test": "assert     (count_binary_seq(6) == 0), \"error in function count_binary_seq\"",
        "num_ids": 331
    },
    {
        "number": 301,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    l = 0\n    for i in d.items():\n        l += 1\n    return l\n",
        "test": "assert     dict_depth({1: 2, 3: 4}) == 2, \"Test failed\"",
        "num_ids": 226
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index = -1\n    for i in range(0,len(ranges)) :\n        if (ranges[i][1] > index) :\n            index = ranges[i][1]\n    rotations = ranges[index][0]\n    return rotations\n",
        "test": "assert     find_Element([1,2,3,4,5], [3,4,5,3,2], [3,2,1,3,1], 2) == 5",
        "num_ids": 506
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\n",
        "test": "assert     start_withp(['one', 'two', 'three', 'four', 'five'])==['four', 'five']",
        "num_ids": 206
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if a[index][0] < k and (index == n or k == n): return a[index][0]\n    if a[index][0] < k: return a[index][0]\n    if index == n: return a[index][0]\n",
        "test": "assert     max_sum_increasing_subseq([5,7,6,4,3,1,2], 3, 0, 2) == 14",
        "num_ids": 469
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Get n number of elements\n    n = len(tuplex)\n    for i in range(n):\n        if tuplex[i][0] == m or tuplex[i][1] == n:\n            return tuplex[i]\n",
        "test": "assert     colon_tuplex(('a','b'),'a',('b','c')),    'Test failed'",
        "num_ids": 497
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    \n    # largest product in both lists\n    L = sum(nums1[0:N])\n    r = 0\n    \n    # loop to find the largest product\n    for i in range(N):\n        if L < nums1[i]:\n            r = i\n            break\n    \n    # largest product from nums2\n    for j in range(N,len(nums2)):\n        if L < nums2[j]:\n            r = j\n            break\n    \n    # return the product\n    return r\n",
        "test": "assert     large_product(nums1=[1, 2, 3, 4], nums2=[3, 2, 7, 4], N=3) == 3",
        "num_ids": 421
    },
    {
        "number": 309,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    #your code here\n    print(a)\n    print(b)\n    return a if (a > b) else b\n    #to solve this we have to define a max function so we know the max value is the largest value\n    #then you just know that the max value is the largest in the list.\n    #that's the maximum in the list\n",
        "test": "assert     maximum(3,2) == 3",
        "num_ids": 161
    },
    {
        "number": 310,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert     string_to_tuple('') == ()",
        "num_ids": 267
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = n >> (n - 1)\n    if x == 0:\n        return\n    n &= x - 1\n    return n\n",
        "test": "assert     set_left_most_unset_bit(1) == 0, 'You are in the wrong state'",
        "num_ids": 246
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h**3)/6\ndef temperature_cone(T,r):\n    '''\n    Write a function to find the temperature of a cone.\n    '''\n    return math.pi*(r**2)*(T**3)/6\n",
        "test": "assert     volume_cone(0,0) == 0",
        "num_ids": 2105
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 2\n    while (i <= n):\n        if (i == 2):\n            break\n        if (i % 2 == 0):\n            i += 1\n        else:\n            i = i + 2\n            print(i)\n    print(\"i is: \" + str(i))\n    return i\n",
        "test": "assert     highest_Power_of_2(10) == 2",
        "num_ids": 325
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 2:\n        return n\n    return n*(n+1)//2\ndef find_lucas_prime(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 1: \n        return n \n    if n % 2 == 0: \n        return find_lucas_prime(n//2) \n    else: \n        return (find_lucas_prime(n-1) + find_lucas_prime(n//2)) \n",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 235
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if len(list_) == 0:\n        raise ValueError(\"Empty list\")\n",
        "test": "assert add_string(['a','b','c'], 'abc') == ['a', 'b', 'c', 'abc']",
        "num_ids": 270
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                d.update({i:j})\n                \n    return d\n",
        "test": "assert     convert_list_dictionary([\"a\",\"b\",\"c\"], [\"a\",\"b\",\"c\"], \"a\") == { \"a\": [\"b\"], \"b\": [\"c\"] }",
        "num_ids": 505
    },
    {
        "number": 392,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #your code here\n    n_1 = n // 2\n    n_2 = n // 3\n    n_3 = n // 4\n    n_4 = n // 5\n    n_5 = n // 6\n    return max(max(max(n_1, n_2, n_3, n_4, n_5), n), n)\n    \n    \n    \n    \n",
        "test": "assert     get_max_sum(0) == 0",
        "num_ids": 408
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = input_list[0]\n    for i in range(1, len(input_list)):\n        if input_list[i] > maximum:\n            maximum = input_list[i]\n    return maximum\n",
        "test": "assert     max_length_list([1,2,3,4,5,6]) == 6",
        "num_ids": 219
    },
    {
        "number": 394,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = set(test_tup)\n    if len(tup)!= len(set(tup)):\n        return False\n    return True\n    \ndef check_duplicates(test_tup):\n    '''\n    Write a function to check if given tuple contains duplicates.\n    '''\n    for i in test_tup:\n        if i in test_tup:\n            return False\n    return True\n    \ndef check_tuple(test_tup):\n    '''\n    Write a function to check if given tuple contains a single duplicate.\n    '''\n    if len(test_tup) == 1:\n        return False\n    for i in range(1,len(test_tup)):\n        if test_tup[i] in test_tup[:i]:\n            return False\n    return True\n    \ndef check_order(test_tup):\n    '''\n    Write a function to check if given tuple contains the same order.\n    '''\n    if len(test_tup) < 2:\n        return False\n    for i in range(len(test_tup) - 1):\n        if test_tup[i]!= test_tup[i + 1]:\n            return False\n    return True\n    \ndef is_in_range(num):\n    '''\n    Write a function to check if a given number is within a range.\n    '''\n    if num <= 0 or num >= 10 ** 6:\n        return False\n    else:\n        return True\n    \ndef is_in_range(num):\n    '''\n    Write a function to check if a given number is within a range.\n    '''\n    if num <= 0 or num >= 10 ** 6:\n        return False\n    elif num >= 10 ** 6:\n        return True\n    else:\n        return True\n    \ndef make_test_tup():\n    '''\n    Write a function to create a tuple of one digit and one digit.\n    '''\n    for i in range(0,10):\n        tup = str(i) + str(i)\n        test_tup.append(tup)\n    \ndef prime_checker(num):\n    '''\n    Write a function to check if given number is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef check_prime(test_tup):\n    '''\n    Write a function to check if given tuple contains a prime number.\n    '''\n    num_list = []\n    num_list.append(test_tup[0])\n    for i in range(1,len(test_tup)):\n        if prime_checker(test_tup[i]) == True:\n            num_list.append(test_tup[i])\n            \n    if len(num_list) == 0:\n        return False\n    return True\n",
        "test": "assert         check_distinct(('a','b','c','d'))",
        "num_ids": 267
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    i = 0\n    char_array = []\n    for char in str1:\n        if char not in char_array:\n            char_array.append(char)\n        else:\n            i += 1\n    if i == 0:\n        return ''\n    else:\n        return char_array[0]\n",
        "test": "assert     first_non_repeating_character('abracadabra') == 'a'",
        "num_ids": 424
    },
    {
        "number": 396,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Your code here\n    if string[0:2] == 'a':\n        return True\n    else:\n        return False\n",
        "test": "assert not check_char('123')",
        "num_ids": 154
    },
    {
        "number": 397,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    import statistics\n    numbers = [a,b,c]\n    numbers.sort()\n    return numbers[len(numbers)//2]\n",
        "test": "assert     median_numbers(1,2,3) == 2",
        "num_ids": 326
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += num\n    return sum_of_digits\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 239
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # base case\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            for j in range(len(test_tup2)):\n                if test_tup1[i] == test_tup2[j]:\n                    test_tup1[i] = 0\n                else:\n                    test_tup1[i] = 1\n    else:\n        print('Error: the tuples don\\'t match in size')\n        return\n    return test_tup1\n    \ndef bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise AND operation across the given tuples.\n    '''\n    # base case\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == 1:\n                test_tup1[i] = 0\n            else:\n                test_tup1[i] = 1\n    else:\n        print('Error: the tuples don\\'t match in size')\n        return\n    return test_tup1\n    \ndef bitwise_or(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise OR operation across the given tuples.\n    '''\n    # base case\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == 1:\n                test_tup1[i] = 0\n            else:\n                test_tup1[i] = 1\n    else:\n        print('Error: the tuples don\\'t match in size')\n        return\n    return test_tup1\n    \ndef bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # base case\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == 1:\n                test_tup1[i] = 0\n            else:\n                test_tup1[i] = 1\n    else:\n        print('Error: the tuples don\\'t match in size')\n        return\n    return test_tup1\n",
        "test": "assert     bitwise_xor((1,2,3,4),(5,6,7,8)) == (1,4,6)",
        "num_ids": 415
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for tup in test_list:\n        freq_list.append(tup[1])\n    freq_list.sort()\n    return len(freq_list)\n",
        "test": "assert     extract_freq([]) == 0, \"It should be 0\"",
        "num_ids": 469
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    return test_tup1 + test_tup2\n",
        "test": "assert     add_nested_tuples(('a', 'b', 'c'), ('d', 'e', 'f')) == (",
        "num_ids": 301
    },
    {
        "number": 404,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return (a if a<b else b) if a<b else (a if a>b else b)\n",
        "test": "assert     minimum(0,0)==0",
        "num_ids": 205
    },
    {
        "number": 405,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] == tuple1[0]: \n        for t1 in range(len(tuple1)-1):\n            if tuplex[t1] == tuple1[t1+1]:\n                return True\n        return False\n    return False\n",
        "test": "assert     check_tuplex([1,2,3,4,5,6],(1,2,3,))==False",
        "num_ids": 241
    },
    {
        "number": 406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'The number is even'\n    else:\n        return 'The number is odd'\n",
        "test": "assert     find_Parity(6) == False    #6 is not odd",
        "num_ids": 2162
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str = str(n)\n    num = list(str)\n    index = int(len(str)/2)\n    for i in range(index):\n        num[i] = str[i] + str[len(str) - 1 - i]\n        num.insert(i, str[len(str) - 1 - i])\n    num.reverse()\n    return \"\".join(num)\n",
        "test": "assert     rearrange_bigger(9) == 6",
        "num_ids": 540
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # TO DO\n    \n    # Method 1\n    heap = [(num1, idx) for idx, num1 in enumerate(nums1)]\n    heapq.heapify(heap)\n    res = 0\n    while heap:\n        a, idx = heapq.heappop(heap)\n        b, idx = heapq.heappop(heap)\n        if a * b > k:\n            continue\n        res += 1\n        if idx + 1 < len(nums1) and a * nums1[idx + 1] > b * nums1[idx]:\n            heapq.heappush(heap, (a * nums1[idx + 1], idx + 1))\n    return res\n",
        "test": "assert     k_smallest_pairs([1,3,5,7,9,1,2,4,6,8,10,11,13],",
        "num_ids": 958
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = None\n    minimum_tuple = None\n    for lst in list1:\n        for i in lst:\n            if minimum is None:\n                minimum = i\n                minimum_tuple = (i,i)\n            elif minimum > i:\n                minimum = i\n                minimum_tuple = (i,i)\n    return minimum_tuple\n",
        "test": "assert     min_product_tuple([(1,2), (5,7), (7,9), (6,2), (3,1), (8,9), (9,10)]), (1,6)",
        "num_ids": 298
    },
    {
        "number": 410,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval:\n        min = listval[0]\n        for val in listval:\n            if val < min:\n                min = val\n        return min\n    else:\n        return None\n",
        "test": "assert     min_val([0,1,2,3,4,5,6,7,8,9]) == 0, \"incorrect result\"",
        "num_ids": 298
    },
    {
        "number": 411,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split()\n    return''.join(word[::-1])\n",
        "test": "assert     snake_to_camel('foo') == 'foo'",
        "num_ids": 240
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 252
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 0:\n        print(f'n must be non-negative')\n    elif n > len(list1)-1:\n        print(f'n must be less than the length of the list')\n    else:\n        return list1[n]\n",
        "test": "assert     extract_nth_element([(1, \"a\"), (2, \"b\"), (3, \"c\")], 4) == \"c\"",
        "num_ids": 290
    },
    {
        "number": 414,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1.count(list2[0])!=len(list1):\n        return False\n    elif list1.count(list2[-1])!=len(list1):\n        return False\n    elif list2[0] not in list1:\n        return False\n    elif list2[-1] not in list1:\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i]!=list2[i]:\n                return False\n        return True\n",
        "test": "assert     overlapping([1,2,3,4,5], [5,6,7,8,9]) == False",
        "num_ids": 288
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = 0\n    temp_arr = arr.copy()\n    # print(temp_arr)\n    for i in range(0, n):\n        for j in range(0, n):\n            if(temp_arr[j] * temp_arr[i] > max_product):\n                max_product = temp_arr[j] * temp_arr[i]\n                # print(max_product)\n    return max_product\n    ",
        "test": "assert ",
        "num_ids": 331
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # note that we are not interested in order\n    \n    # first, map each tuples into a list of their first element\n    list_of_tuples = list(map(tuple,Input))\n    \n    # remove duplicate tuples\n    list_of_tuples = list(set(list_of_tuples))\n    \n    # now sort them, return the first element\n    return list_of_tuples[0]\n    \ndef main():\n    # list of tuples\n    Input = [(1,2),(2,3),(3,4),(4,5)]\n    \n    # find the first element\n    print(\"The first element in the list is: \" + str(group_tuples(Input)))\n    \n    # map the tuples back to a list\n    # but now we only care about the first element\n    Output = list(map(tuple,Input))\n    \n    # now sort the tuples\n    Output.sort()\n    \n    # now print out the list\n    print(Output)\n",
        "test": "assert     group_tuples(['a','a','a','a','b','a','c','b']) == ['a']",
        "num_ids": 462
    },
    {
        "number": 418,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if not lst: \n        return 0\n    if len(lst) == 1: \n        return lst[0] \n    else: \n        return Find_Max(lst[1:]) \n",
        "test": "assert     Find_Max([5,6,8]) == 8, \"The function should return 8\"",
        "num_ids": 319
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += number\n    print(total_sum)\n    return total_sum\n",
        "test": "assert     round_and_sum([1,4,3,2,1]) == 7",
        "num_ids": 205
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0 \n    for i in range(n): \n        sum = sum + i**3 \n    print(sum) \n  \ncube_Sum(10) \n",
        "test": "assert ",
        "num_ids": 156
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str = ''\n    for t in test_tup:\n        str += str(t)\n    return str\n",
        "test": "assert     concatenate_tuple((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5, 5)",
        "num_ids": 242
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_list = []\n    for i in range(1, n+1):\n        cube_list.append(i*i*i)\n    sum_of_square_numbers = 0\n    for i in cube_list:\n        sum_of_square_numbers += i\n    return sum_of_square_numbers/float(n)\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 277
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    output_tuple = []\n    for test_item in test_tuple:\n        output_tuple.append(test_item[0])\n    return output_tuple\n",
        "test": "assert extract_rear(test_tuple_2) == [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "num_ids": 334
    },
    {
        "number": 425,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    index = []\n    for i in range(len(list1)):\n        if list1[i] == x:\n            index.append(i)\n    return len(index)\n",
        "test": "assert     count_element_in_list([], 5) == 0",
        "num_ids": 252
    },
    {
        "number": 426,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #FIRST\n    #Odd number\n    # RETURN TRUE IF ODD nums is in nums\n    return [num for num in nums if num % 2 == 1]\n",
        "test": "assert     filter_oddnumbers(nums=[1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 2257
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.match(r\"(\\d{2})-(\\d{2})-(\\d{4})\", dt)\n    if m:\n        mm,dd,yyyy = m.groups()\n        return yyyy + '-' + mm + '-' + dd\n    else:\n        raise ValueError('Enter a date of yyyy-mm-dd format!')\n",
        "test": "assert     change_date_format('2018-02-20') == '2018-02-20'",
        "num_ids": 267
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "test": "assert     shell_sort([5,7,7,3,5,4,4,6,5,4,1,5,5]) == [1,2,3,5,4,6,7,8,9,5,4,3,5,6]",
        "num_ids": 422
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # The elementwise and tuples\n    e_and_tuples = test_tup1 + test_tup2\n    # The elementwise tuples\n    e_and_tuples = tuple(e_and_tuples)\n    # print(e_and_tuples)\n    # print(type(e_and_tuples))\n",
        "test": "assert     and_tuples(test_tup1, test_tup2) == {'a': 1, 'b': 2}",
        "num_ids": 287
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((a*b)**2 + (c*b) - (a*c)**2)**(1/2) \n",
        "test": "assert     parabola_directrix(1, 1, 1) == 1",
        "num_ids": 209
    },
    {
        "number": 431,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for index in range(len(list1)):\n        if list1[index] in list2:\n            common = True\n    return common\n",
        "test": "assert     common_element([1, 2, 3], [2, 3, 4]) == True",
        "num_ids": 328
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def base_height(base1,base2):\n        return (base1+base2)/2\n    def trapezium(base1,base2,height):\n        total = base1 + base2 + height\n        return (base1 + base2)/2, (base1 + base2 + (height/2))/2, (base2 + base1)/2, (base2 + base1 + (height/2))/2\n    def height_method(base1,base2,height):\n        if base2/base1 < height/base2:\n            return (base2 + base1)/2\n        else:\n            return base2 + base1\n    return trapezium(base_height(base1,base2),height,base_height(base2,height))[2]\n",
        "test": "assert     median_trapezium(1,2,3.5) == 2.5",
        "num_ids": 455
    },
    {
        "number": 433,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_greater([5, 2, 3, 1], 4) == False",
        "num_ids": 195
    },
    {
        "number": 434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        return count\n    else:\n        return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a followed by three b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 2:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has a followed by three b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 3:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a followed by four b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 4:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has a followed by five b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 5:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a followed by six b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 6:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has a followed by seven b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 7:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has a followed by eight b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 8:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has a followed by nine b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has a followed by ten b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 10:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has a followed by eleven b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 11:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has a followed by twelve b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n            ",
        "test": "assert ",
        "num_ids": 408
    },
    {
        "number": 435,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if type(n) is not int :\n        raise TypeError('Only integer numbers')\n    elif n < 0 :\n        raise ValueError('n must be >= 0')\n    else :\n        last_digit = 0\n        while n >= 10 :\n            last_digit = (last_digit * 10) + (n%10)\n            n = n // 10\n        return last_digit\n",
        "test": "assert     last_Digit(5) == 0",
        "num_ids": 205
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for el in list1:\n        if el < 0:\n            neg_nos.append(-el)\n    return neg_nos\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 234
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string = \"\"\n    for char in str1:\n        if char % 2!= 0:\n            new_string += char\n    return new_string\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 224
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for item in test_list:\n        if type(item) == tuple:\n            result += 1\n        else:\n            result = 0\n    return result\n",
        "test": "assert     count_bidirectional((('a', 'b'), ('c', 'd'))) == 2",
        "num_ids": 410
    },
    {
        "number": 439,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #CASE 1:\n    if len(L) == 1:\n        return L[0]\n    #CASE 2:\n    else:\n        return L[0] + L[1]\n",
        "test": "assert     multiple_to_single([1,2,3]) == 3",
        "num_ids": 204
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    try:\n        adverbs = re.findall(r'\\b\\b(?:a[s]?|an)\\b', text)\n        #adverbs = re.findall(r'\\b\\b(?:a[s]?|an|anp|a[s]?|an|a[s]?|anp|an)\\b', text)\n        adverbs_positions = []\n        for adverb in adverbs:\n            positions = re.findall(r'\\b\\b(?:a|an|anp|a[s]?|an|anp|an)\\b', adverb)\n            if len(positions) > 0:\n                adverbs_positions.append(positions[0])\n        return adverbs_positions\n    except:\n        return []\n",
        "test": "assert     find_adverb_position('fifa fufa fufu') == (3, 7), 'fifa fufa fufu'",
        "num_ids": 2365
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0.0\n    # the cube is a square\n    if l == 0:\n        return 0\n    # the cube is a parallelogram\n    else:\n        # find the base\n        base = (l**2) * 0.5\n        # the perimeter of the parallelogram\n        perimeter = (l**2 + base) * 3\n        # the area of the parallelogram\n        area = (l**3) / 4\n        # return the area of the parallelogram\n        return area + perimeter + base\n",
        "test": "assert     surfacearea_cube(6) == 0",
        "num_ids": 321
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    c=0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            c+=1\n    return c\n",
        "test": "assert     positive_count([-1,4,6,10,-3]) == -1.0, \"test 3 failed\"",
        "num_ids": 195
    },
    {
        "number": 443,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Step 1: Initialize a variable to the largest positive integer.\n    largest_negative = -1\n    \n    # Step 2: Iterate over the list and find the largest negative integer.\n    for i in list1:\n        if i < 0:\n            if i > largest_negative:\n                largest_negative = i\n            \n    # Step 3: If the largest negative integer was not found, return -1.\n    return largest_negative\n",
        "test": "assert     largest_neg([-4, -2, 0, -3, -1, -2, 1, -5, -4]) == -1",
        "num_ids": 329
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    lst = [t[:K] for t in test_list]\n    return lst\n",
        "test": "assert     trim_tuple( [1, 2, 3], 1) == [1, 2, 3]",
        "num_ids": 260
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x*y, test_tup1, test_tup2))\n",
        "test": "assert index_multiplication((1,2),(3,4)) == (6,12)",
        "num_ids": 393
    },
    {
        "number": 446,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # lst = list(tup)\n    # cnt = 0\n    # for i in lst:\n    #     if i in lst:\n    #         cnt += 1\n    # return cnt\n    \n    # print(Counter(lst))\n    # print(Counter(lst))\n    # print(Counter(lst))\n    # return Counter(lst)\n    return len(set(lst))\n",
        "test": "assert     count_Occurrence([], []) == 0",
        "num_ids": 346
    },
    {
        "number": 447,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n",
        "test": "assert     cube_nums([1,2,3,4,5]) == [1,8,27,64,125]",
        "num_ids": 261
    },
    {
        "number": 448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a = 0\n    for i in range(1, n + 1):\n        a += i\n    return a\n",
        "test": "assert     cal_sum(5) == 10",
        "num_ids": 164
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    assert type(str) is list, 'Input should be a list'\n    assert type(l) is list, 'Input should be a list'\n    assert len(str) == len(l), 'Length of the list does not match the given size'\n    new_list = []\n    for x in range(0, len(str)):\n        new_list.append(str[x][:l[x]])\n    return new_list\n",
        "test": "assert     extract_string(\"String2\", [\"String3\", \"String4\", \"String5\"]) == \"String1\", \"String2 not as expected\"",
        "num_ids": 298
    },
    {
        "number": 451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    for i in range(len(text1)):\n        if text1[i].isspace():\n            text1 = text1[:i] + text1[i+1:]\n    return text1\n",
        "test": "assert     remove_whitespaces(\"this is     a    string\") == \"this is string\"",
        "num_ids": 150
    },
    {
        "number": 452,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(0,0) == 0",
        "num_ids": 138
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    print(\"\\n\\n\\n\")\n    print(\"\\n\\n\\n\")\n    s=[]\n    if n%2==0:\n        n1=int(n/2)\n        for i in range(1,int(math.sqrt(n1)+1)):\n            if n%i==0:\n                s.append(i)\n        if s!=[]:\n            print(s)\n            return s[0]+s[1]\n        else:\n            return s\n    else:\n        return n\ndef sumofProduct(n): \n    '''\n    Write a python function to find the sum of the product of a number.\n    '''\n    print(\"\\n\\n\\n\")\n    print(\"\\n\\n\\n\")\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return n*sumofProduct(n-1)\n",
        "test": "assert     sumofFactors(5) == 5",
        "num_ids": 265
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"z\"\n    m = re.findall(pattern, text)\n    print(m)\n",
        "test": "assert     'z' in text.lower()",
        "num_ids": 161
    },
    {
        "number": 455,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 2:\n        return True\n    elif monthnum2 == 3 or monthnum2 == 4 or monthnum2 == 5 or monthnum2 == 6 or monthnum2 == 7:\n        return True\n    elif monthnum2 == 8 or monthnum2 == 9 or monthnum2 == 10 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(6) == True",
        "num_ids": 281
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return list(map(lambda x: x[::-1], stringlist))\n",
        "test": "assert     reverse_string_list(['a', 'b', 'c']) == ['c', 'b', 'a'], \"Incorrect order of input\"",
        "num_ids": 280
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) < 1:\n        return -1\n    elif len(lst) == 1:\n        return lst[0]\n    elif len(lst) == 2:\n        return min(lst)\n    else:\n        return lst[0]\n",
        "test": "assert     Find_Min([1, 2, 3]) == 1",
        "num_ids": 457
    },
    {
        "number": 458,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef triangle_area(l,b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return l*b*h\n",
        "test": "assert     rectangle_area(5,5) == 25, \"rectangle_area failed\"",
        "num_ids": 111
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "test": "assert     remove_uppercase(\"davide\") == 'davide'",
        "num_ids": 393
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = list(map(lambda x: x[0], lst))\n    return lst[0]\n",
        "test": "assert     Extract(lst) == [1, 2, 3, 4",
        "num_ids": 272
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr(\"Hi\") == 1",
        "num_ids": 134
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    elif len(list1) > 1:\n        combos = []\n        for i in range(1, len(list1)+1):\n            combos += combinations_list(list1[:i])\n            combos += combinations_list(list1[i:])\n        return combos\n",
        "test": "assert     combinations_list([1,2,3,4,5]) == [1,2,3,4,5,1,2,3,4,5], \"check1\"",
        "num_ids": 511
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    prod = 1\n    max_len = 0\n    \n    for i in range(len(arr)):\n        prod = prod * arr[i]\n        max_len = max(max_len,i+1)\n    \n    return prod * max_len\n",
        "test": "assert     max_subarray_product([]) == 0",
        "num_ids": 256
    },
    {
        "number": 464,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return \"Please enter the same amount of values\"\n    else:\n        return True\n",
        "test": "assert     check_value({\"a\": 1, \"b\": 2}, 2) == True",
        "num_ids": 259
    },
    {
        "number": 465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    list_1 = list(dict1.values())\n    list_2 = []\n    for i in range(0,len(list_1)):\n        if(list_1[i] == \"\"):\n            list_2.append(list_1[i])\n            \n    return dict1.popitem()\n",
        "test": "assert     drop_empty({4:2, 5:6}) == {4: 2, 5: 6}",
        "num_ids": 276
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    prod = arr[0]\n    i = 1\n    while i < len(arr) and prod <= arr[i]:\n        prod *= arr[i]\n        i += 1\n    return prod\n",
        "test": "assert     max_product([1,2,3,4,5,6,7,8,9])==2*3*4*5*6*7*8*9, \"Test 2\"",
        "num_ids": 437
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # create list of tuples\n    tup_list = list(test_tup)\n    # add duplicate numbers\n    for i in range(len(tup_list)):\n        if i!= len(tup_list)-1:\n            tup_list[i] = tup_list[i]+tup_list[i+1]\n    # add duplicates\n    duplicate_list = list(set(tup_list))\n    # remove duplicates\n    for i in range(len(tup_list)):\n        if tup_list[i] in duplicate_list:\n            duplicate_list.remove(tup_list[i])\n    return tuple(duplicate_list)\n",
        "test": "assert     add_pairwise((1,2,3,4)) == ((1,2),(3,4),(5,None))",
        "num_ids": 427
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    import math\n    for i in range(n):\n        for j in range(n):\n            remainder = math.prod(arr[j:i + j])\n            if remainder % n!= 0:\n                return remainder % n\n    return 0\n",
        "test": "assert     find_remainder([1, 2, 3, 4], 3) == 1",
        "num_ids": 235
    },
    {
        "number": 472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    i = 0\n    while i < len(l):\n        if l[i]!= l[i+1]:\n            count += 1\n        else:\n            count = 0\n        i += 1\n    if count == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert ",
        "num_ids": 210
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                new_list.append(i)\n                break\n    return tuple(new_list)\n",
        "test": "assert     tuple_intersection(('B', 'C', 'D'), ('B', 'D', 'E')) == ('B', 'D')",
        "num_ids": 686
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1.replace(ch,'')\n    return str2\n    #2\ndef num2words(n):\n    '''\n    Convert a number n to a string.\n    '''\n    if n>=0:\n        string = ''\n        i=0\n        while i<n:\n            string=string+str(n%10)\n            n=n//10\n            i+=1\n        return string\n    else:\n        string = ''\n        i=0\n        while i<n:\n            string=string+str(n%10)\n            n=n//10\n            i+=1\n        return string\n",
        "test": "assert     replace_char(\"hello\", \"h\", \"e\")",
        "num_ids": 415
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = dict1.copy()\n    counter = Counter(dict2)\n    sorted_dict = {k:v for k,v in sorted(counter.items(), key=lambda item: item[1])}\n    return sorted_dict\n",
        "test": "assert     sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}) == {'d': 4, 'e': 5, 'f': 6, 'c': 3, 'b': 2, 'a': 1}",
        "num_ids": 544
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = 0\n    for num in nums:\n        s += num\n    return s\n",
        "test": "assert     big_sum([]) == 0, \"Function big_sum does not return 0.\"",
        "num_ids": 258
    },
    {
        "number": 477,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.lower()!= string:\n        return False\n    return True\n",
        "test": "assert     is_lower('hello') is True",
        "num_ids": 177
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\n",
        "test": "assert     remove_lowercase(\"Hello World!\") == \"hello world\"",
        "num_ids": 384
    },
    {
        "number": 479,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    f = 0\n    while n!= 0:\n        f = f * 10 + n % 10\n        n = n // 10\n    return f\n",
        "test": "assert     first_Digit(1) == 1",
        "num_ids": 152
    },
    {
        "number": 554,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    print(\"--= Splitting List --=\")\n    return list[::2]\n",
        "test": "assert     Split(['1','2','3']) == ['1','3']",
        "num_ids": 347
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total_sum = 0\n    n = n\n    for i in range(1, n + 1):\n        total_sum += i\n    total_sum = total_sum + 1\n    return total_sum\n",
        "test": "assert     difference(3) == 0, \"The function returns 0\"",
        "num_ids": 239
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A=list(A)\n    odd_count=0\n    for i in range(len(A)-1) :\n        for j in range(i+1,len(A)) :\n            if A[i]&A[j]==0 :\n                odd_count+=1\n    return odd_count\n",
        "test": "assert     find_Odd_Pair(A,N) == 0, \"Unexpected number of pairs\"",
        "num_ids": 214
    },
    {
        "number": 557,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    new_string = \"\"\n    \n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n        \n    return new_string\n",
        "test": "assert     toggle_string('The quick brown fox jumps over the lazy dog') == \"The brown fox jumps over the lazy dog\"",
        "num_ids": 337
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    res = 0\n    for i in range(1, 10):\n        if n1 % i == 0 and n2 % i == 0:\n            res += i\n",
        "test": "assert     digit_distance_nums(3, 11) == 0, \"Error: expected '3' but got '11'\"",
        "num_ids": 378
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    s = sum(a)\n    if len(a) <= 2 or size <= 1:\n        return s\n    sum_sub_array = []\n    for i in range(len(a)):\n        sum_sub_array.append(a[i] + max_sub_array_sum(a[i + 1:], size-1))\n    return max(sum_sub_array)\n",
        "test": "assert     max_sub_array_sum([], 0) == 0",
        "num_ids": 586
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = set(test_tup1) | set(test_tup2)\n    return sorted(union_elements)\n",
        "test": "assert         union_elements(('a', 'b', 'c'), ('a', 'b', 'd', 'e')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')",
        "num_ids": 738
    },
    {
        "number": 562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    if lst:\n        i = 0\n        l = len(lst)\n        while(i<l):\n            if lst[i] == lst[i+1]:\n                if l > max_len:\n                    max_len = l\n                else:\n                    break\n            else:\n                i = i + 1\n    return max_len\n",
        "test": "assert     Find_Max_Length([\"a\", \"b\", \"c\"]) == 2, \"Should return 2\"",
        "num_ids": 317
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    def extract_values_regex(string):\n        result = re.findall(r'\\([^)]+\\)', string)\n        return [x.strip('(') for x in result]\n    text = text.replace('\\'', '\"')\n    return extract_values_regex(text)\n",
        "test": "assert extract_values(\"This is a text.\") == \"This text\"",
        "num_ids": 403
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    counter = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if (arr[i] == arr[j]):\n                counter = counter + 1\n    return counter\n",
        "test": "assert     count_Pairs([0,1,2,1,2,2,2,1],2) == 0, \"The number of unordered pairs should be 0\"",
        "num_ids": 290
    },
    {
        "number": 565,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    # Remove spaces from the string\n",
        "test": "assert     split(\"abc\") == [\"a\", \"b\", \"c\"]",
        "num_ids": 209
    },
    {
        "number": 566,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return n\n",
        "test": "assert     sum_digits(0) == 0, 'Should be zero'",
        "num_ids": 155
    },
    {
        "number": 567,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    temp = len(list1)\n    for i in range(temp-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([]) == True",
        "num_ids": 209
    },
    {
        "number": 568,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    while len(l) < length:\n        l.append({})\n    return l\n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 142
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    i = 0\n    while i < len(list1):\n        j = i+1\n        while j < len(list1[i]):\n            if list1[i][j] =='':\n                list1[i][j] = '#'\n                j += 1\n                j = j+1\n            else:\n                break\n        i += 1\n    return list1\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 485
    },
    {
        "number": 572,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums)<=1:\n        return nums\n    removed_nums=[]\n    for n in nums:\n        if n not in removed_nums:\n            removed_nums.append(n)\n    return removed_nums\n",
        "test": "assert     two_unique_nums([1]), 'one'",
        "num_ids": 337
    },
    {
        "number": 573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for i in range(0, len(list_data)):\n        if list_data[i] not in unique_numbers:\n            unique_numbers.append(list_data[i])\n    return sum(unique_numbers)\n",
        "test": "assert     unique_product([1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,7,7,7,7]) == [1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "num_ids": 310
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4*(math.pi*r**2))/3\n",
        "test": "assert     surfacearea_cylinder(r=0,h=1) == 0.0",
        "num_ids": 131
    },
    {
        "number": 576,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (A[0] < B[0]): \n        return True \n    elif (A[-1] < B[-1]): \n        return True \n    else: \n        return False \n",
        "test": "assert     is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [1,2,4,8,10,6,5,7,3,9]) == False",
        "num_ids": 355
    },
    {
        "number": 577,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    else:\n        return n % 10 * factorial(n-1)\n        \n        \n    # result = (n-1)! / (n-1)! * (n-1)!\n    # return result\n",
        "test": "assert ",
        "num_ids": 248
    },
    {
        "number": 578,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return([list(list1[i] + list2[i] + list3[i]) for i in range(len(list1))])\n",
        "test": "assert     interleave_lists([], [], []) == []",
        "num_ids": 432
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #get all the tuples from the tuple\n    tuples = zip(test_tup1, test_tup2)\n    #create a list of tuples which is only the original tuples, not the list of tuples of tuples\n    #this is to make it easier to search for similar elements\n    #not using zip method\n    dissimilar_tuples = [tup for tup in tuples if tup not in test_tup1 and tup not in test_tup2]\n",
        "test": "assert     find_dissimilar(('a', 'a'), ('b', 'a')) == 1, 'fail'",
        "num_ids": 521
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_ele = []\n    for element in test_tuple:\n        if even_fnc(element):\n            even_ele.append(element)\n    return tuple(even_ele)\n",
        "test": "assert     even_ele(test_tuple, even_fnc) == test_tuple",
        "num_ids": 1427
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    n = 1\n    while s > 0:\n        n = n * 2 + 1\n        s -= (n - 1)\n        area = area + (n * (n - 1) // 2)\n    return area\n",
        "test": "assert surface_Area(5,7) == 0.0,'surface_Area()'",
        "num_ids": 2301
    },
    {
        "number": 582,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1.keys():\n        if dict1[key] == '':\n            return True\n        else:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 152
    },
    {
        "number": 583,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Subtract 1 from n if there are negative numbers\n    if num < 0:\n        num -= 1\n    if num == 0:\n        return 1\n    else:\n        return num * catalan_number(num - 1)\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 2228
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # First check if there are any adverbs\n    if re.search(r'([a-z]*ly|[a-z]*s|[a-z]*l|[a-z]*s|[a-z]*l|[a-z]*ly|[a-z]*l|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*l|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*s|[a-z]*s|[a-z]*l|[a-z]*l|[a-z]*l|[a-z]*ly|[a-z]*ly)',text):\n        adverb = text.split(r'[\\']')[-1]\n        adverb_pos = re.search(r'\\[(\\d+),(\\d+)]',adverb).group(2)+re.search(r'\\[(\\d+),(\\d+)]',adverb).group(1)\n        return adverb,adverb_pos\n    else:\n        return \"No adverb found\",0\ndef find_verb(text):\n    '''\n    Write a function to find the first verb ending with ly and its positions in a given string.\n    '''\n    # First check if there are any adverbs\n    if re.search(r'([a-z]*ly|[a-z]*s|[a-z]*l|[a-z]*s|[a-z]*l|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*s|[a-z]*s|[a-z]*l|[a-z]*l|[a-z]*l|[a-z]*ly|[a-z]*ly|[a-z]*ly)',text):\n        verb = text.split(r'[\\']')[-1]\n        verb_pos = re.search(r'\\[(\\d+),(\\d+)]',verb).group(2)+re.search(r'\\[(\\d+),(\\d+)]',verb).group(1)\n        return verb,verb_pos\n    else:\n        return \"No verb found\",0\n",
        "test": "assert ",
        "num_ids": 2369
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items=sorted(items,reverse=True)\n    return heapq.nlargest(n,items)\n",
        "test": "assert     expensive_items([1, 2, 3, 4, 5],3) == [2, 3, 4, 5]",
        "num_ids": 331
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.sort()\n    return l[0:n] + l[n:]\n",
        "test": "assert     split_Arr([1,2,3,4,5,6,7,8,9,10,11,12],4) == [1,2,3,4,5,6,7,8,9,10,11,12]",
        "num_ids": 293
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert         list_tuple([1, 2, 3]) == (1, 2, 3), 'Expected: list_tuple([1, 2, 3])!= (1, 2, 3)'",
        "num_ids": 298
    },
    {
        "number": 588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    i = 0\n    largest = nums[0]\n    smallest = nums[0]\n",
        "test": "assert big_diff([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 341
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return True\n    elif b == 1:\n        return False\n    else:\n        for x in range(b):\n            if perfect_square_sum(a,x)!= False:\n                return True\n        return False\n",
        "test": "assert ",
        "num_ids": 257
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_rad = cmath.polar(x)\n    y_rad = cmath.polar(y)\n    x = x_rad[0]\n    y = y_rad[0]\n    return [x,y]\n",
        "test": "assert     polar_rect(1,1) == (0,0)",
        "num_ids": 290
    },
    {
        "number": 591,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(0,len(newList)-1):\n        newList[i], newList[len(newList)-1] = newList[len(newList)-1], newList[i]\n    return newList\n",
        "test": "assert     swap_List(['a','b']) == ['b','a'], \"list should be 'a' or 'b'\"",
        "num_ids": 328
    },
    {
        "number": 592,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c = 0\n    for i in range(1, k+1):\n        c += n*(n-1)*(2**i)/(2**(k-i))\n    return c\n",
        "test": "assert     binomial_Coeff(0,1) == 0",
        "num_ids": 613
    },
    {
        "number": 593,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_str = ip.strip('0')\n    if new_str.find('.')!= -1:\n        new_str = new_str.strip('.')\n        if new_str.find('.')!= -1:\n            new_str = new_str.strip('.')\n    return new_str\ndef remove_url(url):\n    '''\n    Write a function to remove http or https urls from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if 'https' in url_parts[-1]:\n        url_parts.pop()\n    if 'http' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_all_url(url):\n    '''\n    Write a function to remove any trailing slash, or any specific parts of a url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_trailing_slash(url):\n    '''\n    Write a function to remove a trailing slash from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '/' not in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_link(url):\n    '''\n    Write a function to remove a link from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_auth(url):\n    '''\n    Write a function to remove the <auth> tag from a url.\n    '''\n    url_parts = re.split('<auth>', url)\n    if '<auth>' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_all_auth(url):\n    '''\n    Write a function to remove any trailing slash, or any specific parts of a url.\n    '''\n    url_parts = re.split('<auth>', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_trailing_slash_2(url):\n    '''\n    Write a function to remove a trailing slash from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '/' not in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_link_2(url):\n    '''\n    Write a function to remove a link from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_auth_2(url):\n    '''\n    Write a function to remove the <auth> tag from a url.\n    '''\n    url_parts = re.split('<auth>', url)\n    if '<auth>' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_all_auth_2(url):\n    '''\n    Write a function to remove any trailing slash, or any specific parts of a url.\n    '''\n    url_parts = re.split('<auth>', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_trailing_slash_3(url):\n    '''\n    Write a function to remove a trailing slash from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '/' not in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_link_3(url):\n    '''\n    Write a function to remove a link from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_auth_3(url):\n    '''\n    Write a function to remove the <auth> tag from a url.\n    '''\n    url_parts = re.split('<auth>', url)\n    if '<auth>' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_all_auth_3(url):\n    '''\n    Write a function to remove any trailing slash, or any specific parts of a url.\n    '''\n    url_parts = re.split('<auth>', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_trailing_slash_4(url):\n    '''\n    Write a function to remove a trailing slash from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '/' not in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_link_4(url):\n    '''\n    Write a function to remove a link from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_auth_4(url):\n    '''\n    Write a function to remove the <auth> tag from a url.\n    '''\n    url_parts = re.split('<auth>', url)\n    if '<auth>' in url_parts[-1]:\n        ur",
        "test": "assert     removezero_ip('5.23.43.4') == '5.23.43.4'",
        "num_ids": 290
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        return list1[0] - list1[len(list1)//2]\n    else:\n        return list1[0] - list1[(len(list1)//2) + 1]\n",
        "test": "assert     diff_even_odd([4,2,4,4,2,4,2,4]) == 2",
        "num_ids": 279
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return 0\n    if str1 == str2:\n        return 1\n",
        "test": "assert     min_Swaps(\"10011100111100001101011110\", \"1110000110110\") == 0",
        "num_ids": 1030
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list[0]) + len(tuple_list[1]) * 2\n",
        "test": "assert     tuple_size([1,2,3,4,5,6,7,8,9]) == 36",
        "num_ids": 271
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr1):\n        return None\n    elif k < len(arr1):\n        return arr1[k]\n    else:\n        return arr2[k]\n",
        "test": "assert     find_kth([2, 4, 3, 5, 1], [2, 3, 4, 5, 1], 1) == 4",
        "num_ids": 330
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number==number:\n        return True\n    elif number==number*number:\n        return False\n    else:\n        sum=0\n        for i in range(1,number):\n            if number%i==0:\n                sum+=i\n        if sum==number:\n            return True\n        else:\n            return False\n",
        "test": "assert     armstrong_number(123) == True, \"The given number is not armstrong\"",
        "num_ids": 287
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for x in range(1, number+1):\n        sum += x\n",
        "test": "assert     sum_average(5) == 10.0",
        "num_ids": 163
    },
    {
        "number": 600,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\"\nprint(is_Even(20))\n",
        "test": "assert     is_Even(5)",
        "num_ids": 183
    },
    {
        "number": 602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return str1.find(str1[0])\n",
        "test": "assert     first_repeated_char('This is the first time I was programmed to repeat myself.",
        "num_ids": 217
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    from collections import deque\n    lucas = deque()\n    for i in range(1, n+1):\n        if i % 5 == 0 and i > 1:\n            lucas.append(i)\n        if i % 3 == 0:\n            if i > 2:\n                lucas.append(i)\n    return lucas\n",
        "test": "assert ",
        "num_ids": 227
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # write a reverse function\n    # make a dictionary where key is the word and value is the next to the next word\n    dictionary = dict()\n    for word in s.split():\n        if word in dictionary:\n            dictionary[word] += \" \" + word[::-1]\n        else:\n            dictionary[word] = word[::-1]\n    # print the dictionary\n    for word in dictionary:\n        print(word)\n",
        "test": "assert     reverse_words('hi hello') == 'hi'",
        "num_ids": 305
    },
    {
        "number": 605,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(10) == False",
        "num_ids": 189
    },
    {
        "number": 606,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef deg_radian(deg_deg):\n    '''\n    Convert degrees to radians.\n    '''\n    return deg_deg * (math.pi / 180)\ndef sign(num):\n    '''\n    Return the sign of a number.\n    '''\n    if num < 0:\n        return -1\n    return 1\ndef range_radian(min,max):\n    '''\n    Return a list of radians between a min and max.\n    '''\n    return [radian_degree(i) for i in range(min,max)]\ndef range_deg_radian(min,max):\n    '''\n    Return a list of degrees between a min and max.\n    '''\n    return [deg_radian(i) for i in range(min,max)]\ndef add(x,y):\n    '''\n    Return the sum of two numbers.\n    '''\n    return (x+y)\ndef sub(x,y):\n    '''\n    Return the difference of two numbers.\n    '''\n    return (x-y)\ndef mul(x,y):\n    '''\n    Return the product of two numbers.\n    '''\n    return (x*y)\ndef div(x,y):\n    '''\n    Return the quotient of two numbers.\n    '''\n    return (x/y)\ndef mod(x,y):\n    '''\n    Return the modulus of two numbers.\n    '''\n    return (x%y)\ndef all_values(input_list):\n    '''\n    Return the list of all values in a list.\n    '''\n    return [i for i in input_list]\ndef is_list(x):\n    '''\n    Return True if the object x is a list. Otherwise, return False.\n    '''\n    return isinstance(x,list)\ndef is_int(x):\n    '''\n    Return True if the object x is an int, otherwise return False.\n    '''\n    return isinstance(x,int)\ndef is_float(x):\n    '''\n    Return True if the object x is a float, otherwise return False.\n    '''\n    return isinstance(x,float)\ndef is_string(x):\n    '''\n    Return True if the object x is a string, otherwise return False.\n    '''\n    return isinstance(x,str)\ndef is_boolean(x):\n    '''\n    Return True if the object x is a boolean, otherwise return False.\n    '''\n    return isinstance(x,bool)\ndef is_number(x):\n    '''\n    Return True if the object x is a number, otherwise return False.\n    '''\n    return isinstance(x,int) or isinstance(x,float) or isinstance(x,str) or isinstance(x,bool)\ndef is_datetime(x):\n    '''\n    Return True if the object x is a datetime, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_datetime_with_tz(x):\n    '''\n    Return True if the object x is a datetime with a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_string_with_tz(x):\n    '''\n    Return True if the object x is a string with a timezone, otherwise return False.\n    '''\n    return isinstance(x,str)\ndef is_datetime_with_timezone(x):\n    '''\n    Return True if the object x is a datetime with a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_date(x):\n    '''\n    Return True if the object x is a date, otherwise return False.\n    '''\n    return isinstance(x,date)\ndef is_datetime_with_timezone_and_timezone_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_date_time(x):\n    '''\n    Return True if the object x is a date, time, or datetime, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_datetime_with_timezone_and_timezone_is_with_tz(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz_and_tz(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, with a timezone, and a timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz_and_tz_is(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, with a timezone, with a timezone, and a timezone, and another timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz_and_tz_is_with_tz(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, with a timezone, with a timezone, and another timezone, and another timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz_and_tz_is_with_tz(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, with a timezone, with a timezone, and another timezone, and another timezone, and another timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_string_with_tz_and_tz_is(x):\n    '''\n    Return True if the object x is a string with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,str)\ndef is_datetime_with_timezone_and_timezone_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_datetime_with_timezone_and_timezone_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_datetime_with_tz_and_tz_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or i",
        "test": "assert         radian_degree(0) == 0",
        "num_ids": 126
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # TODO: YOUR SOLUTION\n    result = re.search(pattern, text)\n    return result\n",
        "test": "assert     find_literals(\"programming is fun\", \"is fun\") == (1,3,6)",
        "num_ids": 1883
    },
    {
        "number": 608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    x = 1\n    while(x <= n):\n        x = x*(x+1)/2\n    return x\n    pass\n",
        "test": "assert ",
        "num_ids": 170
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # write your code here\n    return list1\n",
        "test": "assert     remove_kth_element([1,2,3,4,5], 1) == [2,3,4,5]",
        "num_ids": 321
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    return max(test_list[n-1][i] for i in range(N))\n",
        "test": "assert     max_of_nth([[0,1,2,1,5], [2,3,4,4,7], [2,3,1,1,2], [2,1,2,2,2]], 3) == 2, \"should return 2\"",
        "num_ids": 470
    },
    {
        "number": 612,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final = []\n    for i in range(len(lst)):\n        final.append([lst[i][0],lst[i][1]])\n    return final\n    \ndef insert_middle(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new = []\n    for i in range(len(lst)):\n        new.append(lst[i][0])\n        new.append(lst[i][1])\n    return new\n    \ndef remove_middle(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new = []\n    for i in range(len(lst)):\n        if len(lst[i][0]) == 2:\n            new.append(lst[i][0])\n        else:\n            new.append(lst[i][1])\n    return new\n    \ndef merge_2(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final = []\n    for i in range(len(lst)):\n        if len(lst[i][0]) == 2:\n            final.append(lst[i][0])\n        else:\n            final.append(lst[i][1])\n    return final\n",
        "test": "assert     merge([]) == []",
        "num_ids": 243
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Your code here\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n",
        "test": "assert     cummulative_sum([1,2,3,4]) == 10",
        "num_ids": 231
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    list_tuple = [tuple(num) for num in nums]\n    result = []\n    for i in range(len(list_tuple)):\n        result.append(sum(list_tuple[i])/len(list_tuple[i]))\n    return result\n",
        "test": "assert     average_tuple(((1,2,3), (4,5,6), (1,2,3), (4,5,6))), (7,8,9)",
        "num_ids": 370
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # YOUR CODE HERE\n    tup1_mod = []\n    tup2_mod = []\n    tup1_mod.append(test_tup1[0] % test_tup2[0])\n    tup2_mod.append(test_tup1[1] % test_tup2[1])\n    return tup1_mod, tup2_mod\n",
        "test": "assert     tuple_modulo((\"A\", \"B\"), (\"D\", \"E\")) == (\"D\", \"E\")",
        "num_ids": 336
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # check if starting point is on the plane\n    if d == 0: \n        return steps \n    # if the starting point is outside the plane, then the step is already taken\n    else: \n        return steps + 1\n        \ndef min_Jumps_1(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # check if starting point is on the plane\n    if d == 0: \n        return steps \n    # if the starting point is outside the plane, then the step is already taken\n    else: \n        steps += 1\n        # if the point is already in the plane, then the step is already taken\n        if steps == d:\n            return steps\n        # otherwise, check if the number of jumps is still less than the given value\n        else: \n            return min_Jumps(steps, d - 1)\n            \ndef test_min_Jumps(d):\n    '''\n    Function to test the correctness of the provided function.\n    '''\n    # test case 1\n    # D = 1\n    # steps = 0\n    # expected = 0\n    # actual = 0\n    \n    # test case 2\n    # D = 1\n    # steps = 0\n    # expected = 0\n    # actual = 1\n    \n    # test case 3\n    # D = 1\n    # steps = 0\n    # expected = 0\n    # actual = 1\n    \n    # test case 4\n    # D = 2\n    # steps = 0\n    # expected = 1\n    # actual = 1\n    \n    # test case 5\n    # D = 2\n    # steps = 0\n    # expected = 2\n    # actual = 1\n    \n    # test case 6\n    # D = 3\n    # steps = 0\n    # expected = 2\n    # actual = 3\n    \n    # test case 7\n    # D = 3\n    # steps = 0\n    # expected = 3\n    # actual = 3\n    \n    # test case 8\n    # D = 4\n    # steps = 0\n    # expected = 3\n    # actual = 4\n    \n    # test case 9\n    # D = 5\n    # steps = 0\n    # expected = 4\n    # actual = 6\n    \n    # test case 10\n    # D = 5\n    # steps = 0\n    # expected = 4\n    # actual = 5\n    \n    # test case 11\n    # D = 5\n    # steps = 0\n    # expected = 5\n    # actual = 5\n    \n    # test case 12\n    # D = 6\n    # steps = 0\n    # expected = 5\n    # actual = 6\n    \n    # test case 13\n    # D = 6\n    # steps = 0\n    # expected = 5\n    # actual = 6\n    \n    # test case 14\n    # D = 6\n    # steps = 0\n    # expected = 5\n    # actual = 6\n    \n    # test case 15\n    # D = 7\n    # steps = 0\n    # expected = 5\n    # actual = 7\n    \n    # test case 16\n    # D = 7\n    # steps = 0\n    # expected = 5\n    # actual = 7\n    \n    # test case 17\n    # D = 8\n    # steps = 0\n    # expected = 5\n    # actual = 8\n    \n    # test case 18\n    # D = 8\n    # steps = 0\n    # expected = 5\n    # actual = 8\n    \n    # test case 19\n    # D = 9\n    # steps = 0\n    # expected = 5\n    # actual = 9\n    \n    # test case 20\n    # D = 9\n    # steps = 0\n    # expected = 5\n    # actual = 9\n    \n    # test case 21\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 22\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 23\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 24\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 25\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 26\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 27\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 28\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 29\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 30\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 31\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 32\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 33\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 34\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 35\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 36\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 37\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 38\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 39\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 40\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 41\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 42\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 43\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 44\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 45\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 46\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 47\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 48\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 49\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 50\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 51\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 52\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 53\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 54\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    ",
        "test": "assert     min_Jumps(steps=4, d=0) == 4",
        "num_ids": 2137
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0 and len(nums2) == 0:\n        return None\n    elif len(nums1) == 0:\n        return nums2\n    elif len(nums2) == 0:\n        return nums1\n    else:\n        for i in range(len(nums1)):\n            nums1[i] = nums1[i]/nums2[i]\n        return nums1\n",
        "test": "assert ",
        "num_ids": 387
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    temp = ''\n    for num in range(0, len(test_str)):\n        if (test_str[num].isdigit()):\n            temp += test_str[num]\n            if (temp.isalpha()):\n                continue\n            else:\n                num = temp\n        else:\n            temp += test_str[num]\n    return temp\n",
        "test": "assert     move_num(\"\") == ''",
        "num_ids": 377
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # your code here\n    pass\n",
        "test": "assert     largest_subset([1,2,3,4,5]) == [1,2,3]",
        "num_ids": 291
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (float(arr1[n//2]) + float(arr2[n//2])) / 2.0\n    else:\n        return float(arr1[n//2])\n",
        "test": "assert     get_median([1,2,3,4,5], [1,2,3,4], 5) == 2.5, '2.5 not as expected'",
        "num_ids": 2255
    },
    {
        "number": 623,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def nth_nums_recur(n,nums):\n        if n==0:\n            return 1\n        elif n==1:\n            return nums[n-1]\n        else:\n            return nth_nums_recur(n-1,nums)+nth_nums_recur(n-2,nums)\n    return nth_nums_recur(n,nums)\n",
        "test": "assert     nth_nums([1,2,3,4,5,6,7,8,9],2),False",
        "num_ids": 280
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "test": "assert     is_upper('Hi') == True",
        "num_ids": 144
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    print('swap_List')\n    print('swap: ', newList)\n    \n    if len(newList) >= 2: \n        first = newList[0] \n        last = newList[1] \n        \n        newList[0] = last \n        newList[1] = first \n        \n        newList = sorted(newList) \n        \n        return newList \n",
        "test": "assert     swap_List([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 298
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    a = r*r\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += a*i*j\n    return result\ndef triangle_area_diagonal(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    a = r*r\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += a*i*i\n    return result\ndef triangle_area_tangle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    a = r*r\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += a*i*i\n    return result\ndef triangle_area_circular(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i\n    return result\ndef triangle_area_sphere(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i\n    return result\ndef triangle_area_equilateral(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*j\n    return result\ndef triangle_area_triangle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*j\n    return result\ndef triangle_area_rectangle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*j\n    return result\ndef triangle_area_square(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*j\n    return result\ndef triangle_area_sphere_square(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i*j\n    return result\ndef triangle_area_sphere_circle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*j\n    return result\ndef triangle_area_circle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*j\n    return result\ndef triangle_area_circle_square(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i*j\n    return result\ndef triangle_area_circle_square_triangle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i*i*j\n    return result\ndef triangle_area_circle_sphere(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i*j\n    return result\ndef triangle_area_sphere_circle_square(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i*i*j\n    return result\ndef triangle_area_sphere_square_circle_square(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i*i*i*j\n    return result\ndef triangle_area_circle_circle_square_triangle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i*i*i*j\n    return result\ndef triangle_area_circle_circle_square_sphere(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793",
        "test": "assert     isinstance(triangle_area, type(0)), \"triangle_area should be type int\"",
        "num_ids": 175
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start==end:\n        return array[start]\n    mid=(start+end)//2\n    if array[mid]==mid:\n        return find_First_Missing(array,start,mid-1)\n    elif array[mid]>mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n",
        "test": "assert ",
        "num_ids": 263
    },
    {
        "number": 628,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # 1. Declare the variables\n    replaced = string\n    \n    # 2. For loop to handle all the spaces\n    for i in range(len(string)):\n        if string[i].isspace():\n            replaced = replaced.replace(string[i], '%20')\n    return replaced\n",
        "test": "assert     replace_spaces(\"\") == \"\"",
        "num_ids": 244
    },
    {
        "number": 629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    Evens = []\n    \n    for i in list:\n        if i%2==0:\n            Evens.append(i)\n    return Evens\n    \ndef Find_Coefficient(x, y, m):\n    '''\n    Write a python function to find the coefficient of a polynomial.\n    '''\n    return x**m\n    \ndef Find_Root(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)\n    \ndef Find_Root_2(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_3(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_4(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_5(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_6(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_7(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_8(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_9(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_10(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_11(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_12(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_13(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_14(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_15(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_16(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_17(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_18(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_19(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_20(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_21(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_22(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_23(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_24(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_25(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_26(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_27(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_28(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_29(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_30(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_31(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_32(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_33(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_34(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_35(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_36(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_37(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '",
        "test": "assert     Split(list) == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 102
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    global num_coord\n    if ele not in sub:\n        sub.append(ele)\n        adjac(ele, sub)\n        return sub\n    else:\n        return sub\n",
        "test": "assert     len(a) == 2 and type(a[0]) == int",
        "num_ids": 347
    },
    {
        "number": 631,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for i in range(len(text)):\n        if text[i] =='':\n            new_text += '_'\n        else:\n            new_text += text[i]\n    return new_text\n",
        "test": "assert     replace_spaces(\"\") == \"\"",
        "num_ids": 292
    },
    {
        "number": 632,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i] = num_list[i] + num_list[i+1]\n    return num_list\n",
        "test": "assert     move_zero([0,0,0,0,0]) == [0,0,0,0,0]",
        "num_ids": 272
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    i=0\n    temp=0\n    while i<len(arr) : \n        temp=arr[i]\n        temp_xor=arr[i]^arr[i+1]\n        arr[i] = temp_xor\n        temp=arr[i]\n        arr[i+1] = temp\n        i+=2\n    return arr\n",
        "test": "assert ",
        "num_ids": 371
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable.sort()\n",
        "test": "assert ",
        "num_ids": 1547
    },
    {
        "number": 637,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost>sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert     noprofit_noloss(100,1000) == False",
        "num_ids": 147
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = (9.80665 * (v**0.16) - 0.621371 * (v**0.01) + 32.0) / (v**0.16 + 0.621371 * (v**0.01) + 32.0)\n    return int(round(wind_chill))\n",
        "test": "assert     wind_chill(0.1,40.1) == 1",
        "num_ids": 283
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    sample_names = [name.lower() for name in sample_names if not name.startswith('a')]\n    sample_names.sort()\n    return sum(len(name) for name in sample_names)\n    \n",
        "test": "assert     sample_nam([\"Ahmed\", \"Abir\", \"Rohan\", \"Shrinath\", \"Sahil\", \"Sofia\"]) == 4",
        "num_ids": 427
    },
    {
        "number": 640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    a = []\n    for i in items:\n        if i[0] == '(':\n            a.append(i)\n        elif i[0] == ')':\n            a.pop()\n    return a\n",
        "test": "assert     (remove_parenthesis(['))', '(', '(']) == ')'",
        "num_ids": 1861
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    elif n==3:\n        return 5\n    elif n==4:\n        return 7\n    elif n==5:\n        return 11\n    else:\n        return n\n",
        "test": "assert     is_nonagonal(2) == 1",
        "num_ids": 257
    },
    {
        "number": 643,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.strip()\n    text = re.sub('[^a-zA-Z0-9]', '', text)\n    text = re.sub('\\w*\\w*', '', text)\n    return text.startswith('z') and text.endswith('z')\n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.strip()\n    text = re.sub('[^a-zA-Z0-9]', '', text)\n    text = re.sub('\\w*\\w*', '', text)\n    return text.startswith('z') and text.endswith('z')\n",
        "test": "assert     text_match_wordz_middle(\"This is a test is the test\") == False",
        "num_ids": 297
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    if(input == None or input == [] or input == [None]):\n        return None\n    output = []\n    \n    for i in range(len(input)):\n        output.append(input[len(input)-i-1])\n    \n    return output[::-1]\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5,6], 3) == [1,2,3,4,5,6]",
        "num_ids": 387
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup = []\n    for element in test_dict:\n        tup.append(element)\n    return tup\n",
        "test": "assert     add_dict_to_tuple(tuple(), dict(a=1)) == (1, 1)",
        "num_ids": 314
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def helper(cost):\n        if not len(cost):\n            return cost\n        else:\n            cell = len(cost)//2\n            return cost[cell][cell] + helper(cost[:cell][:cell]) + helper(cost[cell:])\n    \n    return max(helper(cost))\n",
        "test": "assert     maxAverageOfPath([[1,1,1,1],[1,1,1,1]]) == 3",
        "num_ids": 513
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    height=0\n    weight=0\n    for k in students:\n        if students[k][1]>h and students[k][0]>w:\n            height=students[k][1]\n            weight=students[k][0]\n    if height>h and weight>w:\n        return(students)\n    else:\n        return(students)\n        \n",
        "test": "assert ",
        "num_ids": 430
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    i, j = 0, 0\n    for x in nums1:\n        i += 1\n        if x == nums2[j]:\n            i = 0\n            j += 1\n        else:\n            i = 0\n            j += 1\n    return i\n",
        "test": "assert     (count_same_pair([0,0,0,0,0,0,0,0,0,0], [4,4,4,4,4,4,4,4,4,5]) == 0)",
        "num_ids": 453
    },
    {
        "number": 724,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base < 10:\n        return base\n    else:\n        result = base\n        for digit in range(base, power, -1):\n            result = result * 10 + digit\n        return result\n    ",
        "test": "assert     power_base_sum(2, 2) == 2",
        "num_ids": 204
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    quot_regex = re.compile('([ ])(?P<name>^[^ ]*(?P<value>.*))')\n    quot_match = quot_regex.search(text1)\n    quot_arr = quot_match.groupdict()\n    \n    if quot_match:\n        name = quot_match.group('name')\n        value = quot_match.group('value')\n        return name, value\n    else:\n        return '', ''\n    \ndef extract_date(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    date_regex = re.compile('([ ])(?P<month>^[1-9]|(jan)|(feb))(?P<day>\\d)\\.(?P<year>\\d\\d|\\d\\d\\d|\\d\\d\\d|\\d\\d\\d)')\n    date_match = date_regex.search(text1)\n    date_arr = date_match.groupdict()\n    \n    if date_match:\n        month = date_match.group('month')\n        day = date_match.group('day')\n        year = date_match.group('year')\n        \n        return month, day, year\n    else:\n        return '', '', ''\n",
        "test": "assert     extract_quotation(\"\"\"",
        "num_ids": 336
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l_tup = len(test_tup)\n    l_i = 1\n    for i in range(1,l_tup):\n        l_i = l_i * test_tup[i]\n    return l_i\n",
        "test": "assert len(multiply_elements) == 10, \"the tuple must contain 10 elements\"",
        "num_ids": 320
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #my code here\n    a_sum=0\n    for i in lst1:\n        a_sum+=i\n    for i in lst2:\n        a_sum+=i\n    return a_sum\n    \n    \nprint(sum_list([1,2,3,4],[5,6,7,8])",
        "test": "assert     sum_list([1,2,3], [3,4,5]) == 6, \"the input list is not correct\"",
        "num_ids": 219
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    count = 0\n    unique_list = []\n    \n    for element in nums:\n        if element not in unique_list:\n            unique_list.append(element)\n            count += 1\n        if count == len(nums):\n            return unique_list\n    \n",
        "test": "assert     consecutive_duplicates([1,2,1,2,1,2]) == [1,2,2,1,2]",
        "num_ids": 446
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*h*math.pi*r\n",
        "test": "assert     (lateralsurface_cone(0.1, 4.0)) == 4.0",
        "num_ids": 355
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s+','colon',text)\n",
        "test": "assert     replace_specialchar('')==''",
        "num_ids": 2281
    },
    {
        "number": 733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n",
        "test": "assert     find_first_occurrence(A, x) == 1, 'find_first_occurrence() should return 1 if given number is in first position of sorted array'",
        "num_ids": 247
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subArray = []\n    for index in range(len(arr)):\n        #print(arr[index])\n        subArray.append(sum(arr[index:]))\n    return sum(subArray)\n",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 282
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    new_n = bin(n)[2:].zfill(n.bit_length())\n    return new_n\n",
        "test": "assert     set_middle_bits(69) == 4",
        "num_ids": 205
    },
    {
        "number": 736,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    if x < a[0]:\n        return 0\n    if n < 2:\n        return n\n    if x < a[1]:\n        return 1\n    p = bisect.bisect_left(a, x)\n    if p == 0:\n        return n\n    if p == 1:\n        return p\n    if p == n:\n        return p - 1\n    if a[p] < x:\n        return p\n",
        "test": "assert     left_insertion([-1, -2, -3, -4, -5], -5) == 0",
        "num_ids": 381
    },
    {
        "number": 737,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return any(c in string for c in ['a','e','i','o','u'])\n",
        "test": "assert     check_str('bob') == True",
        "num_ids": 115
    },
    {
        "number": 738,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 0\n    return n + geometric_sum(n-1)\n",
        "test": "assert         geometric_sum(1) == 1",
        "num_ids": 229
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i=0\n    while(n-i>=0): \n        if (n-i)%3==0: \n            i=n-i\n        else: \n            i=n-i-1\n            return i\n        n=n-i\n    return n",
        "test": "assert     find_Index(12) == 0",
        "num_ids": 341
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[test_tup[i][0]] = test_tup[i][1]\n    return d\n",
        "test": "assert     tuple_to_dict([(1,2),(4,5)]) == {1: 2, 4: 5}",
        "num_ids": 329
    },
    {
        "number": 741,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    return all(char not in s for char in s)\n",
        "test": "assert     all_Characters_Same(\"P\") == False",
        "num_ids": 272
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(side**2 - (side*side - side*side*(side - 1)))\n",
        "test": "assert     area_tetrahedron(0) == 0",
        "num_ids": 290
    },
    {
        "number": 743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    start = 0\n    for i in range(m):\n        start = (start + n - 2) % n\n        list[start], list[n-1-start] = list[n-1-start], list[start]\n",
        "test": "assert     rotate_right([1,2,3,4,5], 3) == [1,3,2,5,4]",
        "num_ids": 2217
    },
    {
        "number": 744,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for el in test_tup:\n        if el is None:\n            return True\n    return False\n",
        "test": "assert     check_none((None,)) == True, \"The function should return True\"",
        "num_ids": 170
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # TODO: Write your code here\n    digit = 1\n    while(digit<=10):\n        i=0\n        while(i<=digit):\n            if(startnum%(i**digit)==0 and endnum%(i**digit)==0):\n                print(i**digit, end=\" \")\n            i+=1\n        digit+=1\n",
        "test": "assert     divisible_by_digits(12345, 123456) == False",
        "num_ids": 279
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    while r < 0:\n        r = float(input(\"Invalid input! Enter a valid angle between -90 and 90 degrees in decimal degrees.\\n\\n\"))\n    while a < 0:\n        a = float(input(\"Invalid input! Enter a valid angle between -90 and 90 degrees in decimal degrees.\\n\\n\"))\n    # if angle is greater than 360 degrees, then change the angle to be between -90 and 90 degrees\n    if a > 180:\n        a = a - 360\n    # if angle is less than 0 degrees, change the angle to be between -90 and 90 degrees\n    if a < -90:\n        a = a + 360\n    # find the area of the sector\n    sector_area = 2 * math.pi * r * a * math.sin(a)\n    return sector_area\n",
        "test": "assert     sector_area(1,0) == 0",
        "num_ids": 2293
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create an empty lists\n    LCS_Length = []\n    LCS_len = 0\n    LCS_Length.append([0 for x in range(len(Z))])\n    for i in range(len(Z)):\n        LCS_Length.append([0 for x in range(len(X))])\n        LCS_Length[i][i] = i\n        LCS_Length[i][i+1] = i+1\n    for i in range(len(X)):\n        for j in range(len(Z)):\n            if(i+1<len(X)):\n                if(X[i+1]==Z[j]):\n                    LCS_Length[i+1][j] = LCS_Length[i][j]\n                    LCS_Length[i][j+1] = LCS_Length[i+1][j]\n                else:\n                    LCS_Length[i+1][j] = max(LCS_Length[i+1][j], LCS_Length[i][j+1])\n                    LCS_Length[i][j+1] = max(LCS_Length[i][j+1], LCS_Length[i+1][j])\n    return(LCS_Length[len(X) - 1][len(Z) - 1])\n",
        "test": "assert ",
        "num_ids": 391
    },
    {
        "number": 748,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\w+',str1)\n    s = ''\n    for word in words:\n        s += word.capitalize() +''\n    return s\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from the given string.\n    '''\n    #Initialize the list\n    stopwords = []\n    #Remove the word from the list\n    str1 = str1.lower()\n    for word in stopwords:\n        str1 = str1.replace(word, '')\n    return str1\ndef remove_stopwords_list(list1):\n    '''\n    Write a function to remove stopwords from the given list of strings.\n    '''\n    #Initialize the list\n    stopwords = []\n    #Remove the word from the list\n    for word in list1:\n        str1 = word.lower()\n        for word in stopwords:\n            str1 = str1.replace(word, '')\n    return str1\n",
        "test": "assert     capital_words_spaces('') == '', 'no_capital_words_spaces'",
        "num_ids": 2217
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_list = []\n    for num in nums_str:\n        if num > 0:\n            sorted_list.append(num)\n    sorted_list.sort()\n    return sorted_list\n",
        "test": "assert     sort_numeric_strings([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Wrong order of numbers in list\"",
        "num_ids": 425
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n",
        "test": "assert     add_tuple([1, 2, 3], (1, 2, 3)) == (1, 2, 3)",
        "num_ids": 261
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) // 2:\n        return True\n    if arr[i] > arr[i // 2] and arr[i] > arr[(i + 1) // 2] and arr[(i + 1) // 2] > arr[i]:\n        return check_min_heap_helper(arr, i // 2)\n    return False\n",
        "test": "assert         check_min_heap_helper([1,2,3,4,5], 0) == False, \"Wrong return value\"",
        "num_ids": 348
    },
    {
        "number": 752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    i = 0\n    while True:\n        if n > 1:\n            if n % i == 0:\n                return (n // i) + 1\n            i += 1\n        else:\n            return i + 1\n",
        "test": "assert     jacobsthal_num(2) == 5",
        "num_ids": 2189
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    from collections import defaultdict\n    d = defaultdict(lambda:0)\n    d[0] = 1\n    for i in test_list:\n        d[i[0]] = max(d[i[0]], d[i[1]]+1)\n    min_k = float('inf')\n    k = 0\n    for i in range(1, len(d)):\n        if d[i] < min_k:\n            min_k = d[i]\n            k = i\n    return k\n",
        "test": "assert         min_k([1, 2, 3, 4, 5], 3) == 5, 'Min k is 5'",
        "num_ids": 463
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for index in range(len(l1)):\n        if l1[index] in l2[index] and l1[index] in l3[index]:\n            index_list.append(index)\n    return index_list\n",
        "test": "assert     extract_index_list([],[],[]).__eq__([]),'should return []'",
        "num_ids": 589
    },
    {
        "number": 755,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n",
        "test": "assert     second_smallest([2,3,4,5,6,7,8,9]) == 5, 'Wrong second smallest'",
        "num_ids": 306
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    valid_word = 'a'\n    word = re.search(valid_word, text)\n    if word:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one('abcdef') == 'b'",
        "num_ids": 287
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    list_copy = test_list.copy()\n    count_reverse = 0\n    for i in range(len(list_copy)):\n        for j in range(len(list_copy) - 1, -1, -1):\n            if list_copy[j] == list_copy[i]:\n                count_reverse += 1\n    return count_reverse\n",
        "test": "assert     count_reverse_pairs([]) == 0",
        "num_ids": 508
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1_tuples = []\n    for i in range(len(list1)):\n        list1_tuples.append((list1[i], i))\n    return dict(list1_tuples)",
        "test": "assert     unique_sublists([1, 2, 3, 1, 2, 3]) == {1:3, 2:2, 3:1}",
        "num_ids": 306
    },
    {
        "number": 759,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        x = Decimal(num)\n    except:\n        return False\n    return True\n",
        "test": "assert is_decimal(1.123) is False",
        "num_ids": 269
    },
    {
        "number": 760,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==1:\n        return True\n    else:\n        for i in arr:\n            if arr.count(i)>1:\n                return False\n    return True\n",
        "test": "assert     unique_Element([\"1\", \"2\", \"2\", \"3\"]) == False",
        "num_ids": 285
    },
    {
        "number": 762,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = str(monthnum3)\n    if monthnum3[0] == '3':\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(12) == False",
        "num_ids": 2163
    },
    {
        "number": 763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff=0\n    i=0\n    j=n-1\n    while(i<j):\n        if(arr[i]!=arr[j]):\n            i+=1\n        elif(arr[i]==arr[j]):\n            i+=1\n            j-=1\n            j-=1\n        else:\n            i+=1\n            j+=1\n        diff+=1\n    return diff\n",
        "test": "assert ",
        "num_ids": 311
    },
    {
        "number": 764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    def count_digits(string):\n        '''\n        1) count the number of digits in a given string\n        2) return the result\n        '''\n        result = 0\n        for i in range(0, len(string)):\n            if string[i].isdigit():\n                result = result + 1\n        return result\n    \n    def count_digits_v2(string):\n        '''\n        1) count the number of digits in a given string\n        2) return the result\n        '''\n        result = 0\n        for i in string:\n            if i.isdigit():\n                result = result + 1\n        return result\n",
        "test": "assert ",
        "num_ids": 184
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n % 2!= 0\n",
        "test": "assert     is_polite(0) == 0",
        "num_ids": 203
    },
    {
        "number": 766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    pairs = []\n    \n    #loop through the list\n    for i in range(0,len(l1)):\n        for j in range(i+1,len(l1)):\n            if l1[i] == l1[j]:\n                #if we have the same number of pairs, we don't add the pair\n                if len(pairs) == 0:\n                    pairs.append([l1[i],l1[j]])\n                #we add the pair\n                else:\n                    #sort the pair\n                    if pairs[len(pairs)-1][1] > l1[i]:\n                        pairs.append([l1[i],l1[j]])\n                    else:\n                        continue\n    return pairs\n    \n    \ndef main():\n    \n    #get the file\n    f = open(\"input_day3.txt\", \"r\")\n    \n    #read the input file\n    data = f.read()\n    \n    #make a list of the words\n    data = data.split(\"\\n\")\n    \n    #make a list of lists with the input words\n    l1 = []\n    for i in data:\n        l1.append(i)\n    \n    #print it out\n    print(l1)\n    \n    #pairwise\n    pairs = pair_wise(l1)\n    \n    #print the output\n    print(pairs)\n    \n    #write it out\n    f = open(\"output_day3.txt\", \"w\")\n    f.write(str(pairs))\n    f.close()\n    \n    \nif __name__ == \"__main__\":\n    main()",
        "test": "assert     pair_wise([1,2,3,4,5,6,7,8,9,10]) == [(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9), (9,10)]",
        "num_ids": 887
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    i = 0\n    pairs = 0\n    while(i < len(arr) - 1):\n        if(sum == arr[i] + arr[i+1]):\n            pairs = pairs + 1\n            i = i + 2\n        else:\n            i = i + 1\n    return pairs\n",
        "test": "assert     get_pairs_count([2, 3, 4, 3, 1, 2], 4) == 1",
        "num_ids": 321
    },
    {
        "number": 769,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n        else:\n            continue\n    return diff\n",
        "test": "assert     Diff([2,3,1,4,2,7,8,4,9,2,5,6,3],[2,3,1,4,2,7,8,4,9,2,5,6,8,3,5]) == []",
        "num_ids": 329
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #we are not going to use any more variable, just sum of 2*x in base 10 power of x, for i\n    #in range 1..n, to find it, we need to multiply it by 2, (n*2)\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i*i)\n    return sum\nprint(odd_num_sum(4)",
        "test": "assert     odd_num_sum(10) == 50, \"check the function\"",
        "num_ids": 250
    },
    {
        "number": 771,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_paren = ['(', '[', '{']\n    close_paren = [')', ']', '}']\n    stack = []\n    for i in exp:\n        if i in open_paren:\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                curr = stack.pop()\n                if i == curr:\n                    continue\n                elif i == ')':\n                    if curr!= '(':\n                        return False\n                elif i == ']':\n                    if curr!= '[':\n                        return False\n                elif i == '}':\n                    if curr!= '{':\n                        return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_expression(\"(()())(())\") == True",
        "num_ids": 502
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return test_str.replace(\" \", \"\")\n",
        "test": "assert     remove_length('aba',2) == 'aba'",
        "num_ids": 236
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Your code here\n    pass\n",
        "test": "assert     occurrence_substring(\"abc\", \"abd\") == 'abc'",
        "num_ids": 256
    },
    {
        "number": 775,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index=0\n    for i in range(len(nums)):\n        if (nums[i]%2)==1:\n            odd_index=odd_index+1\n    if odd_index%2==1:\n        return True\n    else:\n        return False\n",
        "test": "assert     odd_position([1,2,3,4,5,6,7]) == False",
        "num_ids": 268
    },
    {
        "number": 776,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    vowel_count = 0\n    for char in test_str:\n        if char in vowels:\n            vowel_count += 1\n    return vowel_count\n",
        "test": "assert     count_vowels('Python') == 1",
        "num_ids": 423
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # The algorithm is a combination of the brute force approach.\n    \n    # 1) Construct a dictionary to store the elements.\n    \n    # 2) Check if the element is present in dictionary.\n    \n    # 3) If not present, initialize the new dictionary as the old one.\n    \n    # 4) If the element is present in the dictionary, update the element in the dictionary.\n    \n    d = dict()\n    for el in arr:\n        if el not in d:\n            d[el] = 1\n        else:\n            d[el] += 1\n    return d\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     find_sum([1,1,2,3,4,1,1,2]) == 5, \"The function should return 5\"",
        "num_ids": 2136
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # repeat_start = 0, repeat_end = len(list1)-1\n    # print(list1)\n    l = len(list1)\n    n = 0\n    # print(list1)\n    while n < l-1:\n        if list1[n]!= list1[n+1]:\n            # print(list1)\n            # print(n)\n            # print(list1[n],list1[n+1])\n            if list1[n]!= list1[n+1]:\n                # print(list1)\n                # print(n)\n                # print(list1[n],list1[n+1])\n                list1.append(list1[n] + list1[n+1])\n                # print(list1)\n            # print(list1)\n            # print(n)\n            # print(list1[n],list1[n+1])\n            # print(n)\n            # print(list1[n],list1[n+1])\n            # print(list1[n+1])\n            n += 2\n        # repeat_end += 1\n        # print(n)\n        # print(list1)\n        n += 1\n    return list1\ndef get_two_chars_in_a_string(string):\n    '''\n    Write a function that takes a string and returns two characters in it.\n    '''\n    i = 0\n    j = 0\n    # while i < len(string) - 1:\n    while i < len(string) - 1:\n        if string[i] == string[i+1]:\n            if string[i+1] == 'a' or string[i+1] == 'e' or string[i+1] == 'i' or string[i+1] == 'o' or string[i+1] == 'u':\n                j += 1\n        i += 1\n    print('two_chars_in_a_string',i,j)\n    return i,j\ndef split_strings(s):\n    '''\n    Write a function that accepts a string and returns a list of the words in the string.\n    '''\n    # print(s)\n    # print(s[0])\n    return s.split()\n",
        "test": "assert     pack_consecutive_duplicates([1,2,3,4,5,6,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1",
        "num_ids": 2424
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #Initialize an empty dictionary.\n    dictionary = {}\n    #Iterate through the input list.\n    for i in range(len(list1)):\n        #If the list is not a tuple, copy it to a list.\n        if not isinstance(list1[i], tuple):\n            list1[i] = [list1[i]]\n        #Create a tuple.\n        elif list1[i] not in dictionary:\n            dictionary[list1[i]] = 0\n        #If the value of the tuple is the same as the number of elements in the list, add it to the current count.\n        else:\n            dictionary[list1[i]] += 1\n    return dictionary\n",
        "test": "assert     unique_sublists(['a', 'b', 'c', 'd', 'e']) == {'a': 2, 'b': 1, 'c': 1, 'd': 1, 'e': 1}",
        "num_ids": 610
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 1:\n        return test_list\n    elif len(test_list) == 2:\n        return [test_list[0] + test_list[1]]\n    else:\n        return [list(i) for i in combinations(test_list,2)]\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 2228
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Your code here\n    count=0\n    i=0\n    while i<n:\n        if (n%i)==0:\n            count+=1\n        i+=1\n    if count==2:\n        return True\n    else:\n        return False\ndef can_be_palindrome(s):\n    '''\n    Given an input string s and a string t of length at most 2, check whether t is a palindrome.\n    '''\n    # Your code here\n    s=s.lower()\n    t=t.lower()\n    i=0\n    j=len(s)-1\n    l=len(t)\n    while i<=j:\n        if s[i]!=t[j]:\n            return False\n        i+=1\n        j-=1\n    return True\ndef is_palindrome(s):\n    '''\n    Given a string s and a string t of at most 2, check whether t is a palindrome.\n    '''\n    # Your code here\n    if can_be_palindrome(s):\n        return True\n    else:\n        return False\ndef can_be_palindrome_alternative(s):\n    '''\n    Given a string s and a string t of at most 2, check whether t is a palindrome.\n    '''\n    # Your code here\n    if can_be_palindrome(s):\n        return True\n    else:\n        return False\ndef is_palindrome_alternative(s):\n    '''\n    Given a string s and a string t of at most 2, check whether t is a palindrome.\n    '''\n    # Your code here\n    s=s.lower()\n    t=t.lower()\n    i=0\n    j=len(s)-1\n    l=len(t)\n    while i<=j:\n        if s[i]!=t[j]:\n            return False\n        i+=1\n        j-=1\n    return True\ndef is_palindrome_alternative_2(s):\n    '''\n    Given a string s and a string t of at most 2, check whether t is a palindrome.\n    '''\n    # Your code here\n    if can_be_palindrome(s):\n        return True\n    else:\n        return False\ndef is_palindrome_alternative_3(s):\n    '''\n    Given a string s and a string t of at most 2, check whether t is a palindrome.\n    '''\n    # Your code here\n    if can_be_palindrome(s):\n        return True\n    else:\n        return False\ndef is_palindrome_alternative_4(s):\n    '''\n    Given a string s and a string t of at most 2, check whether t is a palindrome.\n    '''\n    # Your code here\n    if can_be_palindrome(s):\n        return True\n    else:\n        return False\n",
        "test": "assert     count_divisors(0) == 0",
        "num_ids": 308
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(1, len(arr)):\n        if arr[i]%2==0:\n            sum += arr[i]\n    return sum\n",
        "test": "assert ",
        "num_ids": 195
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #colors = {'red': (255, 0, 0),\n    #          'green': (0, 255, 0),\n    #          'blue': (0, 0, 255),\n    #          'yellow': (0, 255, 255)}\n    #\n    #return colors[colour]\n",
        "test": "assert     (r, g, b) == (0, 0, 0), 'Error: `r`, `g`, and `b` must be the same value.'",
        "num_ids": 727
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    product = 1\n    for i in list1:\n        product *= i\n    \n    return product\n    \n    ",
        "test": "assert     mul_even_odd([4, 8, 2]) == 24",
        "num_ids": 242
    },
    {
        "number": 785,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = tuple(map(int, test_str.split(\",\")))\n    return test_str\n",
        "test": "assert     tuple_str_int('1, 2, 3, 4') == (1, 2, 3, 4), \"Error: check tuple_str_int\"",
        "num_ids": 241
    },
    {
        "number": 786,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    if i == 0:\n        return 0\n    else:\n        return i - 1\n",
        "test": "assert     right_insertion([], 0) == 0",
        "num_ids": 421
    },
    {
        "number": 787,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return text.lower().startswith('a') and re.search(r'\\w{3}\\b', text)\n",
        "test": "assert     text_match_three(\"Never odd nubmers\") == False",
        "num_ids": 289
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if not test_list:\n        raise TypeError(\"Empty tuple\")\n    elif not test_str:\n        raise ValueError(\"Empty string\")\n    else:\n        return tuple(test_list) + (test_str,)\n",
        "test": "assert     new_tuple([1,2,3,4], \"hello\") == (1,2,3,4), \"wrong input\"",
        "num_ids": 409
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even = []\n    for i in range(len(nums)):\n        if (nums[i] % 2 == 0):\n            even.append(nums[i])\n    return even == [0] * len(even)\n",
        "test": "assert     even_position([2,4,6,8]) == False",
        "num_ids": 240
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[1]\n",
        "test": "assert ",
        "num_ids": 240
    },
    {
        "number": 792,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    print(\"number of lists in a given number of lists:\")\n    lenght=len(input_list)\n    if lenght==0:\n        print(\"No List\")\n    else:\n        print(\"List\")\n        for i in range(lenght):\n            if type(input_list[i])==list:\n                print(input_list[i])\n                count_list(input_list[i])\n            else:\n                print(input_list[i])\n    return lenght\n",
        "test": "assert     count_list([1, 2, 3, 4, 5]) == 5, \"incorrect\"",
        "num_ids": 223
    },
    {
        "number": 793,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=len(arr)\n    if l<1:\n        return -1\n    if l==1:\n        return 0\n    p=arr[l-2]\n    if p>x:\n        return arr[l-2]\n    if p<x:\n        return arr[l-1]\n    if p==x:\n        return arr[l-1]\n    if p<x:\n        return arr[l-1]\n    else:\n        return arr[l-2]\n",
        "test": "assert ",
        "num_ids": 284
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    begin_match = re.search('a', text)\n    if begin_match!= None:\n        end_match = re.search('b', text)\n        return end_match.start()\n    return 0\n",
        "test": "assert     text_starta_endb(\"There is an 'a' and a 'b' in the text\") == \"There is an 'a' and a 'b' in the text\"",
        "num_ids": 355
    },
    {
        "number": 796,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for i in dict.values():\n        sum+=i\n    return sum\n",
        "test": "assert     return_sum({\"one\":1,\"two\":2}) == 3",
        "num_ids": 180
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        return 0\n    if n>=30000:\n        return sum_even(n) + sum_odd(n-1)\n    return sum_odd(n-1)\n",
        "test": "assert     sum_odd(1) == 0",
        "num_ids": 202
    },
    {
        "number": 798,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Your code here\n    return sum(arr)\n",
        "test": "assert     _sum([2, 2, 2, 2, 2]) == 4",
        "num_ids": 194
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=(n&(2**32-1))>>32\n    d=(d<<32)\n    return ((n>>(32-d))&(2**32-1))|(n<<d)\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=(n&(2**32-1))>>32\n    d=(d<<32)\n    return ((n>>(32-d))&(2**32-1))|(n<<d)\n    \ndef set(n,d):\n    '''\n    Write a function to set bit n to the right of the next bit in bit d. We assume that the number is 32 bit.\n    '''\n    n=(n&(2**32-1))>>32\n    d=(d<<32)\n    return ((n>>d)&2**32-1) | (n<<32)\n    \ndef unset(n,d):\n    '''\n    Write a function to set bit n to the right of the next bit in bit d. We assume that the number is 32 bit.\n    '''\n    n=(n&(2**32-1))>>32\n    d=(d<<32)\n    return ((n>>d)&2**32-1)\n    \ndef left(n,d):\n    '''\n    Write a function to set bit n to the left of the next bit in bit d. We assume that the number is 32 bit.\n    '''\n    n=(n&(2**32-1))>>32\n    d=(d<<32)\n    return ((n>>(32-d))&2**32-1)\n    \ndef right(n,d):\n    '''\n    Write a function to set bit n to the right of the next bit in bit d. We assume that the number is 32 bit.\n    '''\n    n=(n&(2**32-1))>>32\n    d=(d<<32)\n    return ((n>>d)&2**32-1)\n    \ndef input():\n    '''\n    This function takes in a number and creates a 32 bit number which is the inverse of this number.\n    '''\n    n=int(input('Enter a number: '))\n    d=int(input('Enter a bit to rotate: '))\n    return n,d\n    \ndef clear():\n    '''\n    This function clears the 32 bit number that is the inverse of the given number.\n    '''\n    n=0\n    return n\n    \ndef get(n):\n    '''\n    This function takes in a number and returns a 32 bit number which is the inverse of this number.\n    '''\n    n=(n&(2**32-1))>>32\n    return n\n    \ndef main():\n    '''\n    This function calls the functions and checks if the input is valid.\n    '''\n    n,d=input()\n    n,d=int(n),int(d)\n    if n==0:\n        print('Invalid input')\n    elif d>=32:\n        print('Invalid input')\n    else:\n        print('Original number: ', n)\n        print('Reverted number: ', n, '\\n')\n        print('Left rotate: ', left_rotate(n,d))\n        print('Right rotate: ', right_rotate(n,d))\n        print('Sets bit: ', set(n,d))\n        print('Unsets bit: ', unset(n,d))\n        print('Bit at left side: ', left(n,d))\n        print('Bit at right side: ', right(n,d))\n        print('Bit at set: ', set(n,d))\n        print('Bit at unset: ', unset(n,d))\n        print()\n        \nmain(",
        "test": "assert ",
        "num_ids": 434
    },
    {
        "number": 800,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    s = re.sub(\" +\", \" \", text)\n    return s\n",
        "test": "assert     remove_all_spaces(\"\") == \"\", \"The function should return an empty string\"",
        "num_ids": 167
    },
    {
        "number": 801,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(f'{x} - {y} - {z}')\n    if (x==y and y==z):\n        return 0\n    else:\n        return 1\nprint(f'{test_three_equal(3,4,5)}')\nprint(test_three_equal(1,2,3))",
        "test": "assert     test_three_equal(3,3,3) == 0",
        "num_ids": 359
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    temp = [arr[0]]\n    for i in range(1,len(arr)):\n        temp.append(arr[i])\n        if arr[i] < temp[-1]:\n            temp.append(arr[i])\n            arr[i],arr[len(arr)-1] = arr[len(arr)-1],arr[i]\n            len(arr)-=1\n            #print(temp)\n        else:\n            arr[len(arr)-1],arr[i] = arr[i],arr[len(arr)-1]\n            len(arr)-=1\n            #print(arr)\n            \n    #print(arr)\n    return len(arr)\n",
        "test": "assert     count_rotation(arr) == 3",
        "num_ids": 328
    },
    {
        "number": 803,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # your code here\n    if n == 0 or n == 1:\n        return True\n    if n < 0 :\n        return False\n    sqrt = int(math.sqrt(n))\n    for i in range(2, sqrt + 1):\n        if n % i == 0:\n            return False\n    return True\n    \n",
        "test": "assert     is_perfect_square(81) == False",
        "num_ids": 273
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s%2==0\n",
        "test": "assert is_product_even([2,4,3,2]) == False",
        "num_ids": 223
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # your code here\n    max_num = 0\n    max_list = []\n    \n    # for each item in the list, check if the item is the sum of all the numbers in the list minus the element it is in\n    for item in lists:\n        for num in item:\n            if num!= 0:\n                if num > max_num:\n                    max_num = num\n                    max_list = []\n                else:\n                    max_list.append(num)\n    \n    return max_list\n",
        "test": "assert     max_sum_list([]) == [], \"The test case failed\"",
        "num_ids": 337
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = str(test_str)\n    s = set(test_str)\n    return len(s)",
        "test": "assert     max_run_uppercase(\"Hello World!\") == \"H\"",
        "num_ids": 253
    },
    {
        "number": 807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    l=[]\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            l.append(nums[i])\n    return l[0]\n",
        "test": "assert ",
        "num_ids": 160
    },
    {
        "number": 808,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    else:\n        return True\n    ",
        "test": "assert         check_K([1,2,3,4], 2) == False",
        "num_ids": 170
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    i = 0\n    smaller_tuple = False\n    while i < len(test_tup2):\n        if test_tup2[i] < test_tup1[i]:\n            smaller_tuple = True\n            break\n        i += 1\n    return smaller_tuple\n",
        "test": "assert     check_smaller(('a', 'b'), ('c', 'b')) == False",
        "num_ids": 606
    }
]