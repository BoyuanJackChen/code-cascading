[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared.append(element)\n    return shared\n",
        "test": "assert     similar_elements([], []) == []",
        "num_ids": 1014,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not(n % 2 == 0 or n % 3 == 0)\n",
        "test": "assert     is_not_prime(33) == False",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # TODO: Write the code that goes with your function\n    return hq.nlargest(n, nums)\n",
        "test": "assert     heap_queue_largest([], 0) == []",
        "num_ids": 1091,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 10 :\n        return True\n    else :\n        return False\n",
        "test": "assert     is_Power_Of_Two(10) == False",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text_split = text.split()\n    word = ''\n    for i in range(len(text_split)):\n        if len(text_split[i]) >= 4:\n            word = word + text_split[i]\n    return word\n",
        "test": "assert     find_char_long(\"\") == ''",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_nums = []\n    for num in nums:\n        square_nums.append(num*num)\n    return square_nums\n",
        "test": "assert     square_nums([1, 2, 3, 4]) == [1, 4, 9, 16], \"Square function failed\"",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #initialize\n    count = 0\n    #loop through the string\n    for i in range(len(str)):\n        #if the char is greater than the rotations required\n        if (str[i]>=str[i-1]):\n            #update the count and add one to count\n            count += 1\n    #return the count\n    return count\n",
        "test": "assert     find_Rotations('abc') == 2, \"Expected 2 rotations, got %d\" %find_Rotations('abc')",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = len(s)\n    if ch in s:\n        s=s.replace(ch,'')\n        \n    if len(s)>0:\n        return s\n    else:\n        print(\"Invalid input\")\n        return -1\n    \ndef remove_vowels(s):\n    '''\n    Write a python function to remove vowels from the given string.\n    '''\n    count=0\n    for x in s:\n        if x in 'AEIOUaeiou':\n            count+=1\n    if count>0:\n        s=s.replace('A','a')\n        s=s.replace('E','e')\n        s=s.replace('I','i')\n        s=s.replace('O','o')\n        s=s.replace('U','u')\n    return s\n    \ndef remove_digits(s):\n    '''\n    Write a python function to remove digits from the given string.\n    '''\n    l=len(s)\n    count=0\n    for x in s:\n        if x in '0123456789':\n            count+=1\n    if count>0:\n        s=s.replace('0','')\n        s=s.replace('1','1')\n        s=s.replace('2','2')\n        s=s.replace('3','3')\n        s=s.replace('4','4')\n        s=s.replace('5','5')\n        s=s.replace('6','6')\n        s=s.replace('7','7')\n        s=s.replace('8','8')\n        s=s.replace('9','9')\n    else:\n        s=s.replace('0','')\n        s=s.replace('1','1')\n        s=s.replace('2','2')\n        s=s.replace('3','3')\n        s=s.replace('4','4')\n        s=s.replace('5','5')\n        s=s.replace('6','6')\n        s=s.replace('7','7')\n        s=s.replace('8','8')\n        s=s.replace('9','9')\n    return s\n    \ndef count_words(s):\n    '''\n    Write a python function to count words from the given string.\n    '''\n    words=0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            words+=1\n    return words\n    \ndef count_letters(s):\n    '''\n    Write a python function to count letters from the given string.\n    '''\n    letters=0\n    for char in s:\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            letters+=1\n    return letters\n",
        "test": "assert     remove_Occ(\"a\", \"t\") == \"a\"",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key = lambda x: x[0])\n    return M\n",
        "test": "assert     sort_matrix([[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]]) == [[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]]",
        "num_ids": 1963,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/2\n    return volume\n",
        "test": "assert     find_Volume(0,0,0) == 0",
        "num_ids": 738,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match('(^[a-zA-Z_][a-zA-Z0-9_]*)', text)!= None\n",
        "test": "assert text_lowercase_underscore('abc') == True",
        "num_ids": 5382,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a ** 2\n",
        "test": "assert     square_perimeter(0) == 0",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = []\n    for i in string:\n        if i not in new_string:\n            new_string.append(i)\n    return new_string\ndef get_index(index_str, string):\n    '''\n    Get the index of string at the given index_str.\n    '''\n    for i in range(len(string)):\n        if string[i] == index_str:\n            return i\ndef find_all(string, index_str):\n    '''\n    Returns a list of all substrings which starts with string[index_str].\n    '''\n    new_str = str_to_list(string)\n    index_list = []\n    for i in range(len(new_str)):\n        if new_str[i] == index_str:\n            index_list.append(i)\n    return index_list\ndef get_str_indices(string):\n    '''\n    Return a list of indices in the string where the first occurrence of a character is present.\n    '''\n    new_str = str_to_list(string)\n    index_list = []\n    for i in range(len(new_str)):\n        if new_str[i] == new_str[i-1]:\n            index_list.append(i)\n    return index_list\ndef replace_string(string, index_str, string_new):\n    '''\n    Replace the character at the index_str with string_new.\n    '''\n    new_str = str_to_list(string)\n    for i in range(len(string)):\n        if string[i] == index_str:\n            new_str[i] = string_new\n    return new_str\ndef get_len(string):\n    '''\n    Get the length of the string.\n    '''\n    new_str = str_to_list(string)\n    return len(new_str)\n",
        "test": "assert         str_to_list(\"a\")",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate_list = [arraynums[i] for i in range(len(arraynums)) if arraynums[i] not in arraynums]\n    return len(duplicate_list) == 0\n",
        "test": "assert     test_duplicate([1,2,3,4,5,6,6,6,7,8,8,8,8,9,9,9,9]) == True",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    is_woodall = True\n    if x > 200:\n        is_woodall = False\n    return is_woodall\n",
        "test": "assert     is_woodall(1), \"is_woodall(1) should return False.\"",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num - (num * 2)    \n",
        "test": "assert     rev(0) == 0",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in range(1, len(arr)) : \n        if arr[i] > max : \n            max = arr[i]\n    return max\n",
        "test": "assert     find_Max_Num([9,9,9,9,9,9,9,9,9]) == 9",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        x,y = y,x\n    if y < x:\n        x,y = y,x\n    if x == y:\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(0,1) == False",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if (n == 1):\n        return 0\n    elif (n == 2):\n        return 1\n    else:\n        return is_octagonal(n-1) + is_octagonal(n-2)\n",
        "test": "assert     is_octagonal(2), '2'",
        "num_ids": 7841,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    subs = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}\n    out = 0\n    for i in s:\n        if i in subs:\n            out += subs[i]\n    return out\n",
        "test": "assert     count_Substrings('100') == 1",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return -1\n    min = xs[0]\n    for x in xs[1:]:\n        if x < min:\n            min = x\n    return min\n",
        "test": "assert     smallest_num([1, 2, 3, 4, 5]), \"Error: only one value\"",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in test_list:\n        for j in test_list:\n            if i!= j:\n                difference = i-j\n                if difference > max_difference:\n                    max_difference = difference\n    return max_difference\n",
        "test": "assert     max_difference([2,2,2,2]) == 0, 'test_data_incorrect'",
        "num_ids": 5225,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "test": "assert     [(1, 'A'), (1, 'B'), (1, 'C'), (1, 'D'), (2, 'A'), (2, 'B'), (2, 'C'), (2, 'D'), (2, 'E')], 'Assertion Failed'",
        "num_ids": 1059,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: Write your solution here\n    if len(data_list) == 0:\n        return 0\n    sum = 0\n    for item in data_list:\n        if type(item) is list:\n            sum += recursive_list_sum(item)\n        else:\n            sum += item\n    return sum\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 3092,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 4632,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 3046,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([4, 6, 1, 3, 2]) == False",
        "num_ids": 3019,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l[0] in s and l[1] in s\n",
        "test": "assert     is_sublist([1,2,3], [1,2,3]) == True",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if type(Input) == tuple:\n        for i in Input:\n            if len(i)!= len(Input):\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert     find_equal_tuple(Input=([1,2,3], [3,4,5], [1,2,3], [4,5,6])) == False",
        "num_ids": 1445,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        # Compare the current element to all \n        # adjacent elements. If the element is \n        # greater, swap them.\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                # Swap the elements\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "test": "assert         comb_sort([]) == []",
        "num_ids": 3330,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_dif = n*n \n    return square_dif\n",
        "test": "assert     dif_Square(1) == 1",
        "num_ids": 2730,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n        \n    return True\n",
        "test": "assert     is_samepatterns([1, 2, 3, 1, 1, 1, 1, 1], [[1, 1], [2, 2], [3, 3]]) == False",
        "num_ids": 1372,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # print(len(test_list))\n    for i in test_list:\n        # print(i)\n        if (i[0] % K) == 0:\n            # print(i[0])\n            if (i[1] % K) == 0:\n                # print(i[1])\n                # print(i[0]/i[1])\n                return True\n        \n    return False\n",
        "test": "assert     find_tuples([(1,2), (3,4), (5,6), (7,8)], 3) == False",
        "num_ids": 1479,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    def divisors(n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n    def dfs(n):\n        if n == 1:\n            return True\n        if n < 10:\n            return False\n        if n % 10 == 0 and dfs(n//10):\n            return True\n        if n % 11 == 0 and dfs(n//11):\n            return True\n        return False\n    return dfs(n)\n",
        "test": "assert     is_Diff(6) == False",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count = 0\n    for i in s:\n        count = count + 1\n    if count % 2!= 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     word_len('python') == 0, \"word_len('python')\"",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    from math import factorial\n    from functools import lru_cache\n    if n == 1 or n == 2: \n        return n\n    elif n <= 0: \n        return 0\n    else: \n        return factorial(n) // (factorial(n - 1) * factorial(n - 2)) \n",
        "test": "assert     tetrahedral_number(0) == 0",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*3.14*r*math.pi*r**3\n",
        "test": "assert     (volume_sphere(0)==0.0)",
        "num_ids": 736,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = ''.join(chr(ord(c) % 26 + ord('A')) for c in strr)  \n    return char  \n",
        "test": "assert     get_Char(\"abcdefghijklmnopqrstuvwxyz\")",
        "num_ids": 1096,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2)",
        "test": "assert     sequence(0) == 0",
        "num_ids": 977,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*3.14159*math.pow(r,3)\n",
        "test": "assert surfacearea_sphere(0) == 0",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    \n    n += 1\n    n -= 2\n    return n * (n-1) // 6 + (n-1)//6 * 6\n    \n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 2576,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_final = dict()\n    for k,v in dict1.items():\n        if k in dict2.keys():\n            dict_final[k] = dict2[k]\n        elif k in dict3.keys():\n            dict_final[k] = dict3[k]\n        else:\n            dict_final[k] = v\n    for k,v in dict2.items():\n        if k in dict3.keys():\n            dict_final[k] = dict3[k]\n        else:\n            dict_final[k] = v\n    return dict_final\n",
        "test": "assert     merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 1662,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 1314,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return N\n    else:\n        return closest_num(N-1) + 1\n",
        "test": "assert     closest_num(1) == 1",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        if len(list1) == 1:\n            return 1\n        else:\n            return len(list1[0])\n",
        "test": "assert     len_log(['dog', 'cat', 'dog']) == 3",
        "num_ids": 4578,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Code to illustrate the purpose of this function\n    # print(\"Find substring in the string:\")\n    # print(str1)\n    # print(sub_str)\n    # if sub_str in str1:\n    #     return True\n    # else:\n    #     return False\n    # print(\"Returning false since there is no sub_string\")\n    sub_string_index = 0\n    for i in range(0, len(sub_str)):\n        if sub_str[i] in str1:\n            # print(\"Found: \", sub_str[i])\n            sub_string_index = sub_string_index + 1\n            if sub_string_index == len(sub_str):\n                # print(\"Returning false since there is no sub_string\")\n                break\n    if sub_string_index == len(sub_str):\n        return True\n    else:\n        return False\n    # print(\"Returning false since there is no sub_string\")\n    # return False\n    \n    # if sub_str in str1:\n    #     return True\n    # else:\n    #     return False\n    # print(\"Returning false since there is no sub_string\")\n    # return False\n",
        "test": "assert     find_substring(str1=\"aba\", sub_str = \"abc\") == False",
        "num_ids": 1571,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return(n%3 == 0 or n%5 == 0)\n",
        "test": "assert     is_undulating(10) == True",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert     power(1,5) == 1",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return 'Empty'\n    \n    smallest_value = test_list[0][1]\n    smallest_index = 0\n    for index, item in enumerate(test_list):\n        if smallest_value < item[1]:\n            smallest_value = item[1]\n            smallest_index = index\n    return test_list[smallest_index][0]\n",
        "test": "assert     index_minimum([(2,1), (2,1), (1,2)]) == 1",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #Use a loop and a function to find the minimum\n    minimum_length=0\n    for i in lst:\n        for j in i:\n            if j<minimum_length:\n                minimum_length=j\n    #Print the minimum length\n    print(minimum_length)\n    #Return the length\n    return minimum_length\n",
        "test": "assert     Find_Min_Length([]) == 0",
        "num_ids": 1006,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert     divisor(1) == 1",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counter = {}\n    for i in list1:\n        for j in i:\n            if j in counter:\n                counter[j] = counter[j] + 1\n            else:\n                counter[j] = 1\n    return counter\n",
        "test": "assert     frequency_lists([[]])==True",
        "num_ids": 1485,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result=1\n    for number in numbers:\n        result *= number\n    return result\n",
        "test": "assert     multiply_num([1]) == 1",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s = str(n)\n    return '0' * (len(s)-len(s[::-1])) + s[::-1]\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 1\n    elif num % 2 == 0:\n        return num / 2\n    else:\n        return num * 3 + 1\n",
        "test": "assert     next_smallest_palindrome(1) == 1",
        "num_ids": 2912,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert     kth_element([1,2,3,4,5,6,7,8,9,10], 4) == 4",
        "num_ids": 934,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join(x.capitalize() for x in word.split('_'))\n",
        "test": "assert     snake_to_camel('Foo') == 'Foo'",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: \n        return n\n    if n == 0: \n        return m \n    if n % 2 == 0: \n        return eulerian_num(n-1, m) + m\n    else: \n        return eulerian_num(n-1, m) \n    \n    ",
        "test": "assert     eulerian_num(2, 2) == 2",
        "num_ids": 1293,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for sublist in input_list:\n        for el in sublist:\n            if el =='':\n                el = ''\n                \n            if isinstance(el, str):\n                el = el.strip(' ')\n                el = el.lower()\n                \n        if not isinstance(el, str):\n            el = el.strip()\n            \n        el = el.split()\n        el = el[::-1]\n        el = [el[i] for i in range(len(el))]\n        \n        input_list[input_list.index(sublist)] = el\n    \n    return input_list\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 3354,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "test": "assert     count([True, False, True]) == 2",
        "num_ids": 4460,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_lists([1], (1,)), \"successful\"",
        "num_ids": 1295,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) == 0:\n        return num2\n    elif len(num2) == 0:\n        return num1\n    elif len(num3) == 0:\n        return num1+num2\n    elif len(num3) == 1:\n        return num1+num3\n    elif len(num3) == 2:\n        return num1+num2+num3\n    else:\n        heapq.heappush(num3,heapq.heappop(num1)+heapq.heappop(num2)+heapq.heappop(num3))\n        heapq.heapify(num3)\n        return num3\n",
        "test": "assert     merge_sorted_list([], [], []) == []",
        "num_ids": 3497,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Write your code here.\n    if n <= 0:\n        return 0\n    odd_count = 0\n    for i in range(n):\n        if i % 2 == 1:\n            odd_count += 1\n        else:\n            odd_count += 1\n    return odd_count\n",
        "test": "assert     odd_Equivalent(\"11111111\",1) == 1, \"Should be 1\"",
        "num_ids": 3202,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i!= j:\n                if nestedlist[i] == nestedlist[j]:\n                    return nestedlist[i]\n    return None\n",
        "test": "assert     common_in_nested_lists(nestedlist=[[1], [2, 3]]) is None",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(str(5)) == True",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            pass\n        else:\n            return False\n    return True\n",
        "test": "assert     empty_dit([]) == True",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0\n",
        "test": "assert     tuple_to_int([0, 0, 1]) == 0",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            test_list[i] = list(map(list_to_float, test_list[i]))\n    return test_list\n",
        "test": "assert     list_to_float([]) == []",
        "num_ids": 1374,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list(\"hey\") == ['hey']",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        middle = (left + right) // 2\n        if arr[middle] == arr[middle - 1]:\n            left += 1\n        else:\n            right = middle - 1\n            while arr[middle]!= arr[middle - 1] and left <= right:\n                left += 1\n                middle -= 1\n    return arr[middle]\n",
        "test": "assert     search([0,0,0,0,0,0,0,0]) == 0",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0][0]\n    else:\n        return max(list1[0][0]*list1[1][0], list1[0][1]*list1[1][0], list1[0][0]*list1[1][1], list1[0][1]*list1[1][1])\n",
        "test": "assert     max_product_tuple([]) == 0",
        "num_ids": 1513,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = [num for num in range(1, limit + 1) if num%2 == 0]\n    return sum(amicable_numbers)\n",
        "test": "assert         amicable_numbers_sum(3) == 2",
        "num_ids": 1574,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 0\n    if b.real == 0:\n        angle = 2*math.pi*(a.imag)\n    else:\n        angle = math.atan2(b.imag, b.real)\n    if a.real == 0:\n        angle = 2*math.pi - angle\n    return angle\n",
        "test": "assert     angle_complex(1,1) == 0",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    max = 0\n    i = 0\n    while i < len(string):\n        if string[i] == '0':\n            max += 1\n        else:\n            max -= 1\n        i += 1\n        \n    return max\n",
        "test": "assert     find_length(['0','0','1','1','0','0','0','0','1','1','0','0']) == 4",
        "num_ids": 2999,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0 and b==0: \n        return 0\n    if a%b==0: \n        return a//b\n    else: \n        return b//a\n    \ndef divisors(n): \n    '''\n    Write a python function to find the divisors of a given number n.\n    '''\n    divisors=[1]\n    for i in range(1,int(n**0.5)+1): \n        if n%i==0: \n            divisors.append(i)\n            if n//i==i: \n                divisors.append(n//i)\n    return divisors\n    \ndef count(n,k): \n    '''\n    Write a python function to find the number of occurences of k in a given number n.\n    '''\n    return sum(n==i for i in range(1,k+1))\n    \ndef fib(n): \n    '''\n    Write a python function to find the Fibonacci numbers of a given number of elements.\n    '''\n    f=[0,1]\n    for i in range(2,n+1):\n        f.append(f[i-1]+f[i-2])\n    return f\n    \ndef factorial(n): \n    '''\n    Write a python function to find the factorial of a given number of elements.\n    '''\n    fact=[1]\n    for i in range(2,n+1):\n        fact.append(fact[i-1]*i)\n    return fact\n    \ndef primes(n): \n    '''\n    Write a python function to find all prime numbers in a given number of elements.\n    '''\n    a=[2]\n    for i in range(3,n+1):\n        a.append(i)\n        for j in range(i,n+1,i):\n            a.append(j)\n    return a\n    \ndef primes_series(n): \n    '''\n    Write a python function to find all prime numbers in a given number of elements.\n    '''\n    a=[2]\n    for i in range(3,n+1):\n        a.append(i)\n        for j in range(i,n+1,i):\n            a.append(j)\n    return a\n    \ndef main(): \n    print(sum(1,2)) \n    print(divisors(11)) \n    print(count(50,10)) \n    print(factorial(3)) \n    print(fib(4)) \n    print(primes(10)) \n    print(primes_series(10))\n",
        "test": "assert     sum(5,1) == 5",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = x * y\n    print('{} {}'.format(x, y))\n    return z\n",
        "test": "assert     multiply_int(2, 0) == 0, 'Test case failed'",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    from string import ascii_letters, punctuation\n    res = []\n    for w in str:\n        for char in w:\n            if char not in ascii_letters + punctuation:\n                break\n        else:\n            res.append(w)\n    return res\n",
        "test": "assert     long_words(1, ['a','long'])",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!=1:\n                return False\n    return True\n",
        "test": "assert     magic_square_test(my_matrix = [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12]]) == False",
        "num_ids": 1289,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums = sorted(nums)\n    max_freq = nums[0]\n    max_occur = nums[0]\n    for n in nums:\n        if n > max_freq:\n            max_occur = max_freq\n            max_freq = n\n        elif n == max_occur:\n            if n > max_occur:\n                max_occur = n\n    return max_occur\n",
        "test": "assert     max_occurrences([1]) == 1",
        "num_ids": 2904,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if(str1.startswith(\"a\")):\n        # this is the starting point for the function\n        return(str1[::-1])\n    elif(str1.startswith(\"e\")):\n        return(\"a\" * len(str1) + \"e\" * len(str1))\n    elif(str1.startswith(\"i\")):\n        return(\"a\" * len(str1) + \"i\" * len(str1))\n    elif(str1.startswith(\"o\")):\n        return(\"a\" * len(str1) + \"o\" * len(str1))\n    elif(str1.startswith(\"u\")):\n        return(\"a\" * len(str1) + \"u\" * len(str1))\n    elif(str1.startswith(\"y\")):\n        return(\"a\" * len(str1) + \"y\" * len(str1))\n    else:\n        return(str1)\n",
        "test": "assert     reverse_vowels('') == ''",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(map(str, tup1))\n",
        "test": "assert     tup_string(('hello',)) == 'hello'",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num_sum = 0\n    for num in nums:\n        if num < 0:\n            num_sum -= num\n    return num_sum\n",
        "test": "assert     sum_negativenum([-1, 2, -3, 4, -5]), \"Test failed\"",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    if n==1 or n==2 or n==3 or n==4 or n==5:\n        return n\n    else:\n        return (n*(n+1))/2\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i] == 0:\n            nums[i] = nums[i + 1]\n            nums[i + 1] = 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count / len(nums)\n",
        "test": "assert     zero_count([0,0,0,0,0]) == 1.0",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return sum(int(num)**2 for num in str(n)) == n\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(10) == False",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * (r ** 2)\n",
        "test": "assert     circle_circumference(0) == 0, \"Circumference of a circle should be 0\"",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for element in test_list:\n        if type(element)!= list:\n            element = [element]\n        for subelement in element:\n            if type(subelement) == list:\n                for item in subelement:\n                    flattened_list.append(item)\n            else:\n                flattened_list.append(subelement)\n    return flattened_list",
        "test": "assert     extract_singly([]) == []",
        "num_ids": 1373,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # NOTE: Can you come up with an O(N) faster algorithm?\n    for i in range(len(nums)-1, 0, -1):\n        smallest_idx = i\n        for j in range(i):\n            if nums[j] < nums[smallest_idx]:\n                smallest_idx = j\n        nums[i], nums[smallest_idx] = nums[smallest_idx], nums[i]\n        nums = sorted(nums)\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 1514,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_pair = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and (list1[i]!= 0 and list2[j]!= 0):\n                same_pair += 1\n    return same_pair\n",
        "test": "assert     count_samepair([1,1,1], [1,1,1], [1,1,1]), 1",
        "num_ids": 1881,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    # get list of tuples\n    lists = tuple(Input)\n    # create a set\n    set_of_lists = set()\n    # iterate through the list\n    for i in lists:\n        # add to set if it is not already in\n        if i not in set_of_lists:\n            set_of_lists.add(i)\n    return len(set_of_lists)\n    ",
        "test": "assert     find_lists([]) == 0",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Diff=0\n    for i in range(0,len(arr)):\n        for j in range(0,len(arr)):\n            if i<j:\n                if arr[i]<arr[j]:\n                    tmp_diff=abs(arr[i]-arr[j])\n                    if max_Diff<tmp_diff:\n                        max_Diff=tmp_diff\n    return max_Diff\n",
        "test": "assert     max_Abs_Diff([1]) == 0",
        "num_ids": 1453,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a < 0 or b < 0 or a == n or b == n:\n        return None\n    elif a < n and b < n:\n        return a, b\n    elif a > n or b > n:\n        return None\n    else:\n        a_min, a_max = a, a\n        b_min, b_max = b, b\n",
        "test": "assert     find_solution(1, 1, 1) == None",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = []\n    for element in list2:\n        list1.append(element)\n    return list1\n",
        "test": "assert     remove_elements([], []) == [], \"Test not correct\"",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i\n    return sum\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s == 0:\n        return 0\n    if s < 0:\n        return float('inf')\n    return l**2 / s\n",
        "test": "assert     area_polygon(0, 2) == 0, 'Should return 0'",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 0: \n        n = -n\n    sum = 0\n    for i in range(1,int(math.sqrt(n) + 1)): \n        if n % i == 0: \n            sum += i \n            if sum == n: \n                return True\n            elif sum > n: \n                return False\n    return False\n",
        "test": "assert     div_sum(34) == False",
        "num_ids": 2479,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return str1.count(str1[0])\n",
        "test": "assert     count_char_position('HELLO WORLD') == 1, \"The function should return 1 if the word 'HELLO WORLD' is a substring of 'HELLO WORLD'.\"",
        "num_ids": 2903,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Assume the list has only integers.\n    even_pairs = 0\n    for x in A:\n        if A.count(x) % 2 == 0:\n            even_pairs += 1\n    return even_pairs\n",
        "test": "assert     find_even_pair([]) == 0, \"The function should return 0. The function is not correct\"",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    temp = 0\n    if n < 2: \n        return n\n    while n:\n        temp = n % 2\n        if temp:\n            n //= 2\n        else:\n            n //= 3\n    return n \n    \ndef next_power_of_3(n): \n    '''\n    Write a python function to find the smallest power of 3 greater than or equal to n.\n    '''\n    temp = 0\n    if n < 3: \n        return n\n    while n:\n        temp = n % 3\n        if temp:\n            n //= 3\n        else:\n            n //= 2\n    return n \n    \ndef next_power_of_4(n): \n    '''\n    Write a python function to find the smallest power of 4 greater than or equal to n.\n    '''\n    temp = 0\n    if n < 4: \n        return n\n    while n:\n        temp = n % 4\n        if temp:\n            n //= 4\n        else:\n            n //= 3\n    return n\n    \ndef next_power_of_5(n): \n    '''\n    Write a python function to find the smallest power of 5 greater than or equal to n.\n    '''\n    temp = 0\n    if n < 5: \n        return n\n    while n:\n        temp = n % 5\n        if temp:\n            n //= 5\n        else:\n            n //= 4\n    return n\n",
        "test": "assert     next_power_of_2(1) == 1",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #Use dictionary and zip() function\n    #Frequency is a dictionary of number and the number it occured in the list\n    dict_number_occurrence = {}\n    num_occurrence_in_list = list(zip(list(a),list(x)))\n    for item in num_occurrence_in_list:\n        if item[1] in dict_number_occurrence:\n            dict_number_occurrence[item[1]] += 1\n        else:\n            dict_number_occurrence[item[1]] = 1\n    \n    #Return value is the number of occurrence of a number in the given list\n    return len(dict_number_occurrence)\n",
        "test": "assert     frequency('apache', 'a') == 1",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 170,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    result = 0\n    for i in range(m - 1):\n        result += list1[i]\n    for j in range(m - 1, n):\n        result += list1[j]\n    return result\n",
        "test": "assert     sum_range_list([1, 2, 3, 4, 5], 1, 4) == 10",
        "num_ids": 3130,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #find the base and calculate the perimeter of the square\n    base = 0\n    perimeter = 0\n    while(a!=0):\n        base += (a%5)\n        a //= 5\n    #calculate the perimeter\n    while(base!=0):\n        perimeter += base\n        base = 0\n        while(a!=0):\n            base += (a%5)\n            a //= 5\n    return perimeter\n",
        "test": "assert     perimeter_pentagon(0) == 0.0",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt = 0\n    for char in s:\n        if char =='s':\n            cnt+=1\n    return cnt\n",
        "test": "assert     count_occurance('s') == 1",
        "num_ids": 2629,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    t1 = test_tuple[0]\n    t2 = test_tuple[1]\n    if isinstance(t1,str) and isinstance(t2,str):\n        return True\n    elif isinstance(t1,list) and isinstance(t2,list):\n        for i in range(len(t1)):\n            if not(check_type(t1[i]) or check_type(t2[i])):\n                return False\n    elif isinstance(t1,dict):\n        for i in t1.keys():\n            if not(check_type(t1[i]) or check_type(t2[i])):\n                return False\n    else:\n        return False\n    return True\n",
        "test": "assert     check_type([1,2,'a',4.0]) == False",
        "num_ids": 3226,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    s = sorted(arr)\n    mid = (n - 1) // 2\n    if (mid == n - 1): # If mid is the last element, then it is the majority element.\n        return arr[mid] == x\n    if (s[mid] == x): # If the mid element in the array is equal to the current element, it is the majority element.\n        return True\n    if (arr[mid] == x): # If the mid element in the array is not equal to the current element, then it is not the majority element.\n        return False\n",
        "test": "assert     is_majority([1,3,2,3,3,4], 4, 3) == False, 'check is_majority'",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(n, -1, -1):\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 917,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_ind = []\n    \n    if len(str) % 2 == 0:\n        for i in range(len(str)):\n            if i % 2 == 1:\n                odd_ind.append(str[i])\n    \n    else:\n        for i in range(len(str)):\n            if i % 2!= 1:\n                odd_ind.append(str[i])\n    \n    return \"\".join(odd_ind)\n",
        "test": "assert     odd_values_string('') == ''",
        "num_ids": 3117,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        elif c>a:\n            return c\n        else:\n            return a\n    elif b>a:\n        if b>c:\n            return b\n        elif c>a:\n            return c\n        else:\n            return a\n    else:\n        if b>c:\n            return c\n        elif a>c:\n            return a\n        else:\n            return a\n    pass\n",
        "test": "assert     min_of_three(3,2,1) == 3",
        "num_ids": 1117,
        "indeed": false
    },
    {
        "number": 228,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return bin(n).count('1') == 0\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(6,0,10) == False",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = list(arr)\n    if n == 0:\n        return\n    elif n < len(arr):\n        arr.extend([0] * (len(arr) - n))\n        arr[0:n] = [-1] * (n-len(arr))\n    else:\n        arr[0:n] = [-1] * n\n        arr[n-1:len(arr)] = [-1] * (n-len(arr)-1)\n    return arr\n",
        "test": "assert ",
        "num_ids": 1372,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1 = str1.replace(str1[i],'',1)\n        else:\n            continue\n    return str1\n",
        "test": "assert     replace_blank('','') == '', 'test not correct'",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return_list=[]\n    for i in range(n):\n        return_list.append(list1.pop(0))\n    return return_list\n",
        "test": "assert     larg_nnum([1, 2, 3, 4, 5], 1) == [1]",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 233,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return h*r*(1+((-1)**(r+h))/(1+(1-r)**(r+h)))\n",
        "test": "assert     lateralsuface_cylinder(0,0) == 0",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(0) == 0",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # write your code here\n    return n\n",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Write your code here\n    d = Counter(test_list)\n    return d\n",
        "test": "assert     check_occurences([(1, 2), (1, 1), (2, 1), (2, 2)]), \"The function should return an empty dictionary\"",
        "num_ids": 3207,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = 0\n    for i in range(len(str)-1):\n        if str[i:i+2] == str[i+2:i+4]:\n            substrings += 1\n    return substrings\n",
        "test": "assert     number_of_substrings(\"\") == 0, \"number_of_substrings() should return 0\"",
        "num_ids": 911,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return 1 + int(math.sqrt(m) * math.sqrt(n))\n",
        "test": "assert     get_total_number_of_sequences(1,2) == 2",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1)\n    print(list2)\n    print(list1[-1])\n    list1[-1] = list2[0]\n    print(list1)\n",
        "test": "assert     replace_list(['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h']) is None",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    count = 0\n    for i in str1:\n        if i == 'a' or i == 'b' or i == 'c' or i == 'd' or i == 'e' or i == 'f' or i == 'g' or i == 'h' or i == 'i' or i == 'j' or i == 'k' or i == 'l' or i =='m' or i == 'n' or i == 'o' or i == 'p' or i == 'q' or i == 'r' or i =='s' or i == 't' or i == 'u' or i == 'v' or i == 'w' or i == 'x' or i == 'y' or i == 'z':\n            count = count + 1\n    return count\n",
        "test": "assert     count_charac('a') == 1",
        "num_ids": 2689,
        "indeed": false
    },
    {
        "number": 244,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 1:\n        return 1\n    if N <= 2:\n        return 2*N\n    return next_Perfect_Square(N/2) + 1\n",
        "test": "assert     next_Perfect_Square(4) == 5",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # define the array\n    arr = arr[:] # array to start from\n    max_sum = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1] and arr[i] > arr[i-2]: # if it's not increasing or decreasing\n            max_sum = max(max_sum, arr[i]) # update the max sum\n    return max_sum\n",
        "test": "assert     max_sum([]) == 0, \"test failed\"",
        "num_ids": 3496,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = pow(number,0.5)\n    return root\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lps = []\n    \n    def palindromic(i, j, s):\n        if j == j: return True\n        if s[i:j+1] == s[i:j+1][::-1]: return True\n        if s[i:j+1] == s[i:j+1][::-1][1:len(s[i:j+1])]: return True\n        return False\n    \n    def longest(l, s):\n        l.append(0)\n        for i in range(len(s)):\n            if not palindromic(i, i, s): l[0] = max(l[0], i)\n            if not palindromic(i, i+1, s): l[0] = max(l[0], i+1)\n            if not palindromic(i+1, i, s): l[0] = max(l[0], i+1)\n        return l[0]\n    \n    i = 0\n    j = len(str) - 1\n    \n    while i <= j:\n        if palindromic(i, i, str):\n            lps.append(i)\n            i += 1\n        elif palindromic(i, j, str):\n            lps.append(j)\n            j -= 1\n        else:\n            if len(lps) > len(str):\n                lps = []\n            return len(str)\n    \n    if len(lps) > len(str):\n        lps = []\n    return len(str)",
        "test": "assert     lps('') == 0",
        "num_ids": 2509,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #Implement your code here\n    sum = 0\n    for i in range(1,n):\n        sum += 1/i\n    return sum\n",
        "test": "assert         harmonic_sum(0) == 0",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection=[]\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection.append(array_nums1[i])\n    return intersection\n",
        "test": "assert     intersection_array([1,2,3,4,5], [2,3,6]) == [2,3]",
        "num_ids": 1361,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ = 0\n    for i in tup:\n        if i == x:\n            occ = occ + 1\n    return occ\n",
        "test": "assert count_X((1,1,2,3,2,1), 1) == 3",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list[i] = element\n            break\n    return list\n",
        "test": "assert     insert_element([], 1) == []",
        "num_ids": 2687,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if numbers.count(complex(0,0))!= 0:\n        if numbers.count(complex(1,0))!= 0:\n            print(\"ERROR: The input must be a complex number.\")\n            return False\n        numbers = [i.real for i in numbers]\n        numbers = [i.imag for i in numbers]\n        \n        if any(i.imag > 0 for i in numbers):\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n        else:\n            print(\"ERROR: The input must be a complex number.\")\n            return False\n            \n    else:\n        numbers = [i.real for i in numbers]\n        numbers = [i.imag for i in numbers]\n        \n        if all(i.imag > 0 for i in numbers):\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n        else:\n            print(\"ERROR: The input must be a complex number.\")\n            return False\n        \n    \n    if numbers[0] >= 0 and numbers[0] <= 1 and numbers[1] >= 0 and numbers[1] <= 1:\n        x = cmath.phase(numbers[0])\n        y = cmath.phase(numbers[1])\n        print(x,y)\n        if all(i.real >= 0 for i in numbers):\n            print(\"x is positive.\")\n            return x\n        if all(i.imag >= 0 for i in numbers):\n            print(\"y is positive.\")\n            return y\n        if all(i.real < 0 for i in numbers):\n            print(\"x is negative.\")\n            return -x\n        if all(i.imag < 0 for i in numbers):\n            print(\"y is negative.\")\n            return -y\n        if all(i.real == 0 for i in numbers):\n            print(\"x is zero.\")\n            return 0\n        if all(i.imag == 0 for i in numbers):\n            print(\"y is zero.\")\n            return 0\n        \n    else:\n        print(\"ERROR: input must be a complex number.\")\n        return False\n        \n        \ndef update(numbers):\n    '''\n    Write a python function to update the complex numbers.\n    '''\n    if numbers.count(complex(0,0))!= 0:\n        if numbers.count(complex(1,0))!= 0:\n            print(\"ERROR: The input must be a complex number.\")\n            return False\n        numbers = [i.real for i in numbers]\n        numbers = [i.imag for i in numbers]\n        \n        if all(i.imag > 0 for i in numbers):\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n        else:\n            print(\"ERROR: The input must be a complex number.\")\n            return False\n            \n    else:\n        numbers = [i.real for i in numbers]\n        numbers = [i.imag for i in numbers]\n        \n        if all(i.imag > 0 for i in numbers):\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n        else:\n            print(\"ERROR: The input must be a complex number.\")\n            return False\n        \n    if numbers[0] >= 0 and numbers[0] <= 1 and numbers[1] >= 0 and numbers[1] <= 1:\n        x = cmath.phase(numbers[0])\n        y = cmath.phase(numbers[1])\n        print(x,y)\n        if all(i.real >= 0 for i in numbers):\n            print(\"x is positive.\")\n            return x\n        if all(i.imag >= 0 for i in numbers):\n            print(\"y is positive.\")\n            return y\n        if all(i.real < 0 for i in numbers):\n            print(\"x is negative.\")\n            return -x\n        if all(i.imag < 0 for i in numbers):\n            print(\"y is negative.\")\n            return -y\n        if all(i.real == 0 for i in numbers):\n            print(\"x is zero.\")\n            return 0\n        if all(i.imag == 0 for i in numbers):\n            print(\"y is zero.\")\n            return 0\n        \n    else:\n        print(\"ERROR: input must be a complex number.\")\n        return False\n        \ndef result(numbers, x, y):\n    '''\n    Write a python function to calculate the result of a complex number.\n    '''\n    if not isinstance(numbers, list):\n        print(\"ERROR: input must be a list.\")\n        return False\n    \n    if len(numbers) == 2:\n        x = x - 0.5\n        y = y - 0.5\n        \n        if x < 0 and y > 0:\n            print(\"ERROR: the x-coordinate is negative.\")\n            return False\n        \n        if x > 0 and y < 0:\n            print(\"ERROR: the x-coordinate is negative.\")\n            return False\n        \n        if x < 0 and y > 0:\n            print(\"ERROR: the x-coordinate is positive.\")\n            return False\n        \n        if x > 0 and y < 0:\n            print(\"ERROR: the x-coordinate is positive.\")\n            return False\n        \n        if x == 0 and y == 0:\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n        \n        \n        if any(abs(i.real) > 1 for i in numbers):\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n        \n        if not all(abs(i.real) <= 1 for i in numbers):\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n        \n        if any(abs(i.real) > 1 for i in numbers):\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n            \n        if all(abs(i.real) <= 1 for i in numbers):\n            print(\"x is positive.\")\n            return x\n        if all(abs(i.real) > 1 for i in numbers):\n            print(\"y is positive.\")\n            return y\n        if all(abs(i.real) <= 1 for i in numbers):\n            print(\"x is negative.\")\n            return -x\n        if all(abs(i.real) > 1 for i in numbers):\n            print(\"y is negative.\")\n            return -y\n        if all(abs(i.real) == 1 for i in numbers):\n            print(\"x is zero.\")\n            return 0\n        if all(abs(i.real) == 1 for i in numbers):\n            print(\"y is zero.\")\n            return 0\n            \n    else:\n        if len(numbers) == 2:\n            x = x - 0.5\n            y = y - 0.5\n            \n            if x < 0 and y > 0:\n                print(\"ERROR: the x-coordinate is negative.\")\n                return False\n            \n            if x > 0 and y < 0:\n                print(\"ERROR: the x-coordinate is negative.\")\n                return False\n            \n            if x < 0 and y > 0:\n                print(\"ERROR: the x-coordinate is positive.\")\n                return False\n            \n            if x > 0 and y < 0:\n                print(\"ERROR: the x-coordinate is positive.\")\n                return False\n            \n            if x == 0 and y == 0:\n                print(\"ERROR: the input must be a complex number.\")\n                return False\n            \n            if all(abs(i.real) > 1 for i in numbers):\n                print(\"ERROR: the input must be a complex number.\")\n                return False\n            \n            if not all(abs(i.real) <= 1 for i in numbers):\n                print(\"ERROR: the input must be a complex number.\")\n                return False\n            \n            if any(abs(i.real) > 1 for i in numbers):\n                print(\"ERROR: the input must be a complex number.\")\n                return False\n            \n            if all(abs(i.real) <= 1 for i in numbers):\n                print(\"x is positive.\")\n                return x\n            if all(abs(i.real) > 1 for i in numbers):\n                print(\"y is positive.\")\n                return y\n            if all(abs(i.real) <= 1 for i in numbers):\n                print(\"x is negative.\")\n                return -x\n            if all(abs(i.real) > 1 for i in numbers):\n                print(\"y is negative.\")\n                return -y\n            if all(abs(i.real) == 1 for i in numbers):\n                print(\"x is zero.\")\n                return 0\n            if all(abs",
        "test": "assert     convert([1+2j, 3-4j, 5+6j]) == [2-4j, 3+6j, 5+8j]",
        "num_ids": 2681,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    total = 0\n    for i in list1:\n        if type(i) == int:\n            total = total + 1\n    return total\n    \ndef make_album(singer, album, year):\n    '''\n    Write a python function that returns a dictionary that contains information about a song album.\n    '''\n    album1 = {'title': '', 'year': '','singer': ''}\n    album1['title'] = singer + \" \" + album\n    album1['year'] = year\n    album1['singer'] = singer\n    return album1\n",
        "test": "assert     count_integer([]) == 0",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Your code here\n    l = list(l)\n    n = int(n)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [tuple(l)]\n    else:\n        return [tuple(l[i:i+n]) for i in range(0, len(l), n)]\n",
        "test": "assert     combinations_colors([],0) == []",
        "num_ids": 5116,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    c = 0\n    for i in range(2,n):\n        for j in range(2,i):\n            if i%j==0:\n                break\n        else:\n            c+=1\n    return c\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 958,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     swap_numbers(10,5) == (5,10)",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    (min1, min2) = (float('inf'), float('inf'))\n    for ele in test_tup1:\n        if ele < min1:\n            min1 = ele\n    for ele in test_tup2:\n        if ele < min2:\n            min2 = ele\n    return min1, min2\n",
        "test": "assert     (maximize_elements((1, 2), (5, 6)) == (1, 5))",
        "num_ids": 1425,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_number = False\n    for i in range(1, n):\n        if (n%i == 0):\n            prime_number = False\n            break\n        else:\n            prime_number = True\n            \n    if prime_number == False:\n        print(n)\n    return n\n",
        "test": "assert     newman_prime(1) == 1",
        "num_ids": 1553,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return test_tup1[0]/test_tup1[1] == test_tup2[0]/test_tup2[1]\n",
        "test": "assert     division_elements((1, 2), (3, 5)) == 0",
        "num_ids": 1452,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    temp = []\n    for i in range(len(list1)):\n        temp.append(list1[i])\n    if len(temp) < L:\n        return None\n    elif len(temp) > L:\n        temp.pop()\n    return temp\n",
        "test": "assert     split_two_parts(['a', 'b', 'c'], 2) == ['a', 'b']",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 264,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 4:\n        return 0\n    elif h_age < 7:\n        return 1\n    elif h_age < 10:\n        return 2\n    elif h_age < 14:\n        return 3\n    else:\n        return 4\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 2862,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def split_list(S, n):\n        if n == 1:\n            return [S]\n        else:\n            return [S[i:i+n] for i in range(0, len(S), n)]\n    return split_list(S, step)\n",
        "test": "assert     list_split([2,3,4,5,6], 3) == [[2,3,4],[5,6]]",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = 0\n    if l <= 10:\n        s = l**2\n    else:\n        s = (l-10)**2\n    return s\n",
        "test": "assert     lateralsurface_cube(0) == 0, 'error in lateralsurface_cube'",
        "num_ids": 2571,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    squares = []\n    for x in range(1,n+1):\n        squares.append(x**2)\n    return sum(squares)\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 3\n    if n % 2 == 0: \n        return find_star_num(n//2) + n//2\n    else: \n        return find_star_num(n-1) + n - 1\n",
        "test": "assert     find_star_num(1) == 1, \"the function should return 1\"",
        "num_ids": 2656,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    char = k.encode('ascii')\n    return char[0]\n    \ndef ascii_value_decode(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    char = k.encode('ascii')\n    return char[1]\n    \ndef ascii_value_list(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    char = k.encode('ascii')\n    return char[2:]\n",
        "test": "assert     ascii_value(\"a\")",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            s = s + arr[i]\n    return s\n",
        "test": "assert     sum_even_and_even_index([2, 4, 6, 8, 10]) == 24, 'test failed'",
        "num_ids": 2842,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power = 0\n    # see https://docs.python.org/3/tutorial/classes.html#classes-and-programming-recursion\n    while n > 0:\n        power = power + n\n        n = n - 1\n    return power\n",
        "test": "assert     even_Power_Sum(1) == 1",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    l = list()\n    for i in test_list:\n        l.append(i[-1])\n    return l\n",
        "test": "assert     rear_extract([('a', 'A'), ('b', 'B'), ('c', 'C'), ('d', 'D'), ('e', 'E')]) == ['A', 'B', 'C', 'D', 'E']",
        "num_ids": 7143,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = test_tup1[:]\n    for index in range(len(test_tup1)):\n        if index < len(test_tup2):\n            result[index] = test_tup2[index] - test_tup1[index]\n        else:\n            result[index] = test_tup1[index]\n    return result\n",
        "test": "assert     substract_elements(tuple(), tuple()) == tuple()",
        "num_ids": 1353,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # if n is zero or negative, return 0\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    \n    # if n is odd, get the odd index binomial coefficients\n    odd_index_binomial_coeff = even_binomial_Coeff_Sum(n-1)\n    # if n is even, add the odd index binomial coefficients to the sum\n    even_index_binomial_coeff = even_binomial_Coeff_Sum(n-1)\n    return odd_index_binomial_coeff + even_index_binomial_coeff\n",
        "test": "assert     even_binomial_Coeff_Sum(2)==4",
        "num_ids": 2707,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4 * pi * r * r * (2 * pi)**2\n    return volume\n",
        "test": "assert     volume_cylinder(3,5) == 30",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict1={}\n    for k,v in dict.items():\n        if type(v)==int:\n            dict1[k]=v\n        elif type(v)==str:\n            dict1[k]=v.replace(\" \",\"\")\n    for k,v in dict1.items():\n        if type(v)==int:\n            if v>=n:\n                dict1[k]=v\n    return dict1\n",
        "test": "assert     dict_filter({},1) == {}",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 278,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements(()) == 0",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    import math\n    if n < 0: \n        return 0\n    \n    elif n == 0: \n        return 1\n    \n    elif n == 1: \n        return n\n    \n    else:\n        return math.gcd(n, (n - 1))",
        "test": "assert     is_num_decagonal(3)",
        "num_ids": 3044,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n        else:\n            return (False, -1)\n",
        "test": "assert     sequential_search(dlist, 10) == (True, 0)",
        "num_ids": 1027,
        "indeed": false
    },
    {
        "number": 281,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # TO DO\n    # write your code here\n    count = 0\n    for i in test_list:\n        if i in test_list:\n            count += 1\n    if count == len(test_list):\n        return True\n    else:\n        return False\n",
        "test": "assert     all_unique([1,2,3,4,5]) == True, \"All elements of the list are unique.\"",
        "num_ids": 2960,
        "indeed": false
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if not nums1:\n        return []\n    if not nums2:\n        return []\n    if len(nums1)!= len(nums2):\n        return nums1\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n",
        "test": "assert     sub_list([1,2,3,4], [3,4,5]) == [1,2,3,4], 'Input does not match'",
        "num_ids": 942,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Write your code here\n    if n < 0:\n        raise ValueError('n must be non-negative')\n    return n%10 == 0\n",
        "test": "assert validate(0) == True",
        "num_ids": 2048,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_element([1, 1, 1], 1) is True",
        "num_ids": 711,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # 'a' followed by two or three 'b' characters\n    for i in range(len(text)-2):\n        if text[i] == 'b' and text[i+1] == 'a':\n            return True\n    # 'a' followed by three 'b' characters\n    for i in range(len(text)-2):\n        if text[i] == 'b' and text[i+1] == 'a':\n            return True\n    return False\n",
        "test": "assert     text_match_two_three(\"the quick brown fox jumps over the lazy dog\") == False",
        "num_ids": 1446,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Your code here\n    \n    result = 0\n    l = len(a)\n    i = 0\n    for j in range(n, l):\n        result = max(result + a[j - i], a[j])\n        i = j\n    return result\n    \ndef run():\n    a = [int(i) for i in input().strip().split()]\n    n = len(a)\n    k = int(input())\n    print(max_sub_array_sum_repeated(a, n, k))\n    \n",
        "test": "assert     max_sub_array_sum_repeated([], 3, 2) == 0",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return (n**2)  \n",
        "test": "assert     square_Sum(2) == 4",
        "num_ids": 2406,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for sub_list in list1:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    return max_length\n",
        "test": "assert     max_length([[]]) == 0",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k <= 2:\n        return n\n    if n == 0:\n        return 0\n    if k == 0:\n        return 1\n    if k == n-1:\n        return 2\n",
        "test": "assert     count_no_of_ways(1, 2) == 1",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    # if first number is even\n    if n % 2 == 0:\n        return (n // 2)\n    else:\n        # if n is odd\n        return n\n",
        "test": "assert     find(0,0)==0",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = 0.5 * (w * h)\n    \n    if area > 7:\n        return 6\n    elif (area < 7) and (area > 6):\n        return (area - 3) / 2\n    elif (area == 7) and (area > 6):\n        return 0\n    else:\n        return 0\n    \ndef triangle_area(w,h):\n    '''\n    A function to find the area of a triangle\n    '''\n    area = 0.5 * (w * h)\n    \n    if (area == 0):\n        return 0\n    elif (area > 7):\n        return 6\n    elif (area < 7) and (area > 6):\n        return (area - 3) / 2\n    elif (area == 7) and (area > 6):\n        return 0\n    else:\n        return 0\n    \ndef otherside_rightangle_prod(w,h):\n    '''\n    a function to find the product of the other side of a right angled triangle\n    '''\n    area = 0.5 * (w * h)\n    \n    if area > 7:\n        return 6\n    elif (area < 7) and (area > 6):\n        return (area - 3) / 2\n    elif (area == 7) and (area > 6):\n        return 0\n    else:\n        return 0\n",
        "test": "assert     otherside_rightangle(5,12) == 6",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n    \n",
        "test": "assert     max_val([1, 9]) == 9",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        if number == 1:\n            return 1\n        else:\n            result = 0\n            while number!= 1:\n                if number%2 == 0:\n                    result += number\n                    number /= 2\n                else:\n                    number = number / 2\n            return result\n",
        "test": "assert sum_div(0) == 0",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 0: \n        return 0\n",
        "test": "assert ",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            flattened.extend(flatten_list(list1[i]))\n        else:\n            flattened.append(list1[i])\n    return flattened\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 1199,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maximum = 0\n    for item in stdata:\n        if item[1] > maximum:\n            maximum = item[1]\n    return maximum\n",
        "test": "assert     max_aggregate([(1, 2), (2, 3), (1, 2), (2, 3), (1, 3)]) == 3",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n    \ndef binary_seq_search(num, l, r):\n    if l > r:\n        return -1\n",
        "test": "assert     count_binary_seq(0) == 0",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)\n",
        "test": "assert     dict_depth({'a': 1, 'b': 2}), 2",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    try : \n        for x in range(0,len(arr),1) :\n            if rotations > x :\n                rotations = rotations - 1\n                index = index + 1\n            else :\n                index = index + 1\n                rotations = rotations + 1\n                break\n    except :\n        pass\n    return index\n",
        "test": "assert     find_Element([1,2,3,4,5,6,7,8,9],(0,1,2,3,4,5,6,7,8,9),0,0), 'the function does not find the element at 0'",
        "num_ids": 6046,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # TODO: Complete this function\n    '''\n    Your code here\n    '''\n    x = []\n    for i in words:\n        if i.startswith('p'):\n            x.append(i)\n    return x\n",
        "test": "assert     ('p' in start_withp([\"gfg\",\"pqr\",\"xyz\",\"gfd\",\"pqr\"])) == False",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case\n    if n == 0 or index == 0 or k == 0:\n        return a[index]\n    if index == n:\n        return a[index - k]\n    if a[index] > a[index - k]:\n        return max_sum_increasing_subseq(a, n-1, index, k)\n    if a[index-k] < a[index]:\n        return max_sum_increasing_subseq(a, n-1, index-k, k)\n    return a[index] + max_sum_increasing_subseq(a, n-1, index-k-1, k)\n",
        "test": "assert     max_sum_increasing_subseq(a, n, 0, 5) == 0",
        "num_ids": 1634,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==n:\n        return tuplex\n    else:\n        return (tuplex[:m] + (m+1,)*n)\n    pass\ndef colon_flattu(flattu,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==n:\n        return flattu\n    else:\n        return (flattu[:m] + (m+1,)*n)\n    pass\ndef colon_flatt(flattu,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==n:\n        return flattu\n    else:\n        return (flattu[:m] + (m+1,)*n)\n    pass\ndef sum_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to compute the sum of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return 0\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return (tuplex1[0][1]+tuplex2[0][1],)\n        else:\n            return (tuplex1[0][1]+tuplex2[0][1],) + sum_tuplex(tuplex1[1:],tuplex2[1:])\n    pass\ndef get_sum_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to compute the sum of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return 0\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1]+get_sum_tuplex(tuplex1[1:],tuplex2[1:])\n    pass\ndef cross(tuplex1,tuplex2):\n    '''\n    Write a function to cross two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return (tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1])\n        else:\n            return (tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]) + cross(tuplex1[1:],tuplex2[1:])\n    pass\ndef get_cross_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to cross two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + get_cross_tuplex(tuplex1[1:],tuplex2[1:])\n    pass\ndef union(tuplex1,tuplex2):\n    '''\n    Write a function to union two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + union(tuplex1[1:],tuplex2[1:])\n    pass\ndef intersection(tuplex1,tuplex2):\n    '''\n    Write a function to intersection two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + intersection(tuplex1[1:],tuplex2[1:])\n    pass\ndef left_cross(tuplex1,tuplex2):\n    '''\n    Write a function to left a cross of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + left_cross(tuplex1[1:],tuplex2[1:])\n    pass\ndef right_cross(tuplex1,tuplex2):\n    '''\n    Write a function to right a cross of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + right_cross(tuplex1[1:],tuplex2[1:])\n    pass\ndef sum_left(tuplex1,tuplex2):\n    '''\n    Write a function to compute the sum of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return 0\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            retur",
        "test": "assert     colon_tuplex((\"\",), 1,0) == (\"\",)",
        "num_ids": 1131,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    num_lst = []\n    for i in nums1:\n        num_lst.append(i)\n    for j in nums2:\n        num_lst.append(j)\n    if len(num_lst) == 0:\n        return None\n    product = 1\n    for i in range(N-1):\n        product *= num_lst[i]\n    return product\n",
        "test": "assert     large_product([1], [1, 2, 1], 3) == 1, \"Your function should be applied to two inputs\"",
        "num_ids": 1722,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(0,0)==0",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple(\"\") == ()",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & 0x01: \n        return 1\n    else:\n        return 0\n",
        "test": "assert     set_left_most_unset_bit(0) == 0",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # This function calculates the volume of a cone\n    # Using the Pythagorean theorem\n    # r = radius of the cone\n    # h = height of the cone\n    # If r > h, h should be a height\n    if r > h:\n        return 0\n    elif r == h:\n        return r*h*math.pi*2\n    elif r == h**2:\n        return (h/2)*r*h*math.pi*2\n    else:\n        return (h/2)*r*h*math.pi*(r-h)\n        # return (r*h*math.pi*2)\n",
        "test": "assert     volume_cone(0,0) == 0",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 2\n    count = 0\n    while(i <= n):\n        if(pow(i, 2) <= n):\n            count += 1\n        i += 1\n    print(count)\n    return count\n",
        "test": "assert     highest_Power_of_2(0) == 0",
        "num_ids": 2746,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 10: \n        return n \n    return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(0) == 0",
        "num_ids": 4734,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [list_]\n    for el in list_:\n        el.append(string)\n    return list_\n",
        "test": "assert     add_string(['a','b','c'], 'ab'), \"add_string() failed to process element ['a','b','c']\"",
        "num_ids": 4904,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    l1.sort()\n    d1['first'] = l1[0]\n    d1['second'] = l1[1]\n    d1['third'] = l1[2]\n",
        "test": "assert convert_list_dictionary([1,2,3,4,5,6], [1,2,3,4,5,6], [3,4,5,6,7,8])!= {'a':[1,2,3,4,5,6], 'b':[3,4,5,6,7,8]}",
        "num_ids": 1741,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n < 2):\n        return 0\n    elif (n == 2):\n        return n\n    elif (n == 3):\n        return n * n\n    elif (n == 4):\n        return n * (n + 1)\n    elif (n == 5):\n        return n * (n + 2)\n    elif (n == 6):\n        return n * (n + 3)\n    else:\n        return n * max(get_max_sum(n-1), get_max_sum(n-2), get_max_sum(n-3), get_max_sum(n-4), get_max_sum(n-5))\n",
        "test": "assert     get_max_sum(0) == 0",
        "num_ids": 1549,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for value in input_list:\n        if len(str(value)) > max_length:\n            max_length = len(str(value))\n    return max_length\n",
        "test": "assert     max_length_list([]) == 0",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = tuple(test_tup)\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n",
        "test": "assert not check_distinct((1,2,2,3,1))",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    first_char = []\n    for char in str1:\n        if char not in first_char:\n            first_char.append(char)\n    return first_char[0]\n",
        "test": "assert     first_non_repeating_character('hello') == 'h'",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_char('pqrstuv') == False",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<c<a:\n        return b\n    else:\n        return c\n",
        "test": "assert     median_numbers(10,10,10) == 10, 'Should return 10'",
        "num_ids": 3401,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Take in the first number.\n    sum_digit = 0\n    # Loop over the number list\n    for num in nums:\n        # Check that the number is greater than 0,\n        # if so, add it to the sum.\n        if num > 0:\n            sum_digit += num\n    return sum_digit\n",
        "test": "assert sum_of_digits([0, 0, 0, 0]) == 0",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Not a valid operation\"\n    res = []\n    for t in range(len(test_tup1)):\n        res.append(test_tup1[t] ^ test_tup2[t])\n    return tuple(res)\n",
        "test": "assert     bitwise_xor( (0, 1), (1, 1) ) == (1, 0)",
        "num_ids": 4005,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    import collections\n    freq = collections.Counter()\n    for tup in test_list:\n        freq[tup[0]] += 1\n    return(len(freq))\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #returns tuple\n    return test_tup1 + test_tup2\n",
        "test": "assert     add_nested_tuples((1,),(2,)) == (1,2)",
        "num_ids": 3239,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif a == b:\n        return a\n    else:\n        return b\n",
        "test": "assert     minimum(1,1) == 1",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 405,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for elem in tuplex:\n        if elem not in tuple1:\n            return False\n    return True\n",
        "test": "assert     check_tuplex((\"Ala\", \"Ami\", \"Gut\",\"Jaro\"), (\"A\", \"M\", \"J\", \"P\")) == False     ",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Get the number\n    x = int(x)\n    if x % 2 == 1:\n        # Return true\n        return True\n    else:\n        # Return false\n        return False\n",
        "test": "assert     find_Parity(15) == True",
        "num_ids": 2427,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n_in_base10 = n[-1]\n    n = n[:-1]\n    n = n[::-1]\n    n = n + n_in_base10\n    return int(n)",
        "test": "assert     rearrange_bigger(5) == 5",
        "num_ids": 1921,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # O(n1+n2)\n    # O(n2)\n    heap = []\n    for num1 in nums1:\n        #O(n1)\n        heapq.heappush(heap, (num1, num1))\n    for num2 in nums2:\n        #O(n2)\n        heapq.heappush(heap, (num2, num2))\n    pairs = []\n    while heap:\n        pairs.append(heapq.heappop(heap))\n    return pairs[:k]\n",
        "test": "assert     k_smallest_pairs([], [1], 0) == []",
        "num_ids": 2614,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    products = list()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if(list1[i][0]*list1[j][0])<(list1[i][1]*list1[j][1]):\n                products.append(list1[i])\n                products.append(list1[j])\n    return min(products)\n",
        "test": "assert     min_product_tuple([(1,3), (2,4), (5,1), (4,3)]) == (1,3), 'Error in the input'",
        "num_ids": 3518,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    else:\n        return min(listval)\n",
        "test": "assert     min_val([3,9,8,8,5,7,0,2,1,4,6,3,5]) == 0, \"test2 failed\"",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if re.match(r'^[A-Z]+$',word):\n        return word.upper()\n    elif re.match(r'^[A-Z]+$', word.title()):\n        return word.title()\n    elif re.match(r'^[A-Z]+\\.', word):\n        return word.title()\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.title()\n    else:\n        return word\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if re.match(r'^[A-Z]+$',word):\n        return word.lower()\n    elif re.match(r'^[A-Z]+\\.', word):\n        return word.lower()\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.title()\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.title()\n    else:\n        return word\ndef remove_dash(word):\n    '''\n    Write a function to remove the dash from the given string.\n    '''\n    if re.match(r'^[A-Z]+$', word):\n        return word.replace('-',' ')\n    elif re.match(r'^[A-Z]+\\.', word):\n        return word.replace('-',' ')\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.replace('-',' ')\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.replace('-',' ')\n    else:\n        return word\n",
        "test": "assert     snake_to_camel('michael') =='michael'",
        "num_ids": 1289,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    l_to_remove = []\n    i = 0\n    while(i<len(l)):\n        if l[i]%2 == 1:\n            l_to_remove.append(l[i])\n            i = i+1\n        else:\n            i = i + 1\n    return l_to_remove\n",
        "test": "assert     remove_odd([]) == [], \"Should return an empty list\"",
        "num_ids": 3309,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4)], 3) == ('d', 4)",
        "num_ids": 1171,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([1,2,3,4,5,6,7,8,9,10], [2,3,4,6,8,10,11,12,13,14,15]) == True, \"Test Case Failed\"",
        "num_ids": 1102,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #create a empty dictionary and set the length of the array to be 2 \n    max_dict = {}\n    length = 2\n    #create a for loop to iterate over all the elements of the array.\n    for i in arr:\n        #if the element is not in the dictionary, append it to the dictionary.\n        if i not in max_dict:\n            max_dict[i] = i\n        #if the element is already in the dictionary, add the number that is smaller to the dictionary.\n        else:\n            if i < max_dict[i]:\n                max_dict[i] = i\n    #return the max_product\n    return max_dict\n",
        "test": "assert ",
        "num_ids": 1063,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        Output.append(Input[i])\n    \n    return Output\n",
        "test": "assert     group_tuples([1,2,3,4,5,6]),    'Incorrect parameters.'",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_len:\n            max_len = len(str(lst[i]))\n    return max_len\n",
        "test": "assert     Find_Max([]) == 0, 'The function does not work'",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #initializing the sum\n    sum = 0\n    \n    #iterating over the list\n    for num in list1:\n        #applying the division\n        sum = sum + num / len(list1)\n    \n    #returning the sum\n    return sum\n",
        "test": "assert     round_and_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]) == 22, 'Test case 2 failed'",
        "num_ids": 969,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n",
        "test": "assert     cube_Sum(0) == 0     # 0",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup = tuple(test_tup)\n    return tup\n",
        "test": "assert     concatenate_tuple(()) == ()",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #Write your code here\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * find_Average_Of_Cube(n-1)\n",
        "test": "assert     find_Average_Of_Cube(1) == 1.0",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # TODO\n    return test_tuple[0]\n",
        "test": "assert     extract_rear((('a','b','c','d','e','f'))),    (4, 3, 1)",
        "num_ids": 2953,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([], 1) == 0",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for i in nums:\n        if i % 2!= 0:\n            oddnumbers.append(i)\n    return oddnumbers\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5], \"Filter odd numbers test failed\"",
        "num_ids": 904,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    date[1] = date[1][:2]\n    date[2] = date[2][:2]\n    date[0] = date[0][:4]\n    date_str = ''\n    for d in date:\n        date_str += d + '-'\n    return date_str[:-1]\n",
        "test": "assert     change_date_format('2014-12-29') == '''2014-12-29''', 'date_format is incorrect'",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap >= 1:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([]) == []",
        "num_ids": 1550,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # TODO: your code here\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"The elements of the tuples must be the same length.\")\n    return test_tup1, test_tup2\n",
        "test": "assert     and_tuples(('red', 'green'), ('white', 'blue'))",
        "num_ids": 1141,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*b*c\n",
        "test": "assert     parabola_directrix(1.0, 1.0, 2.0) == 2.0",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1).intersection(list2)) > 0\n    \n",
        "test": "assert     common_element(['a','b'], ['c','d']) == False, 'False'",
        "num_ids": 1037,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print(\"Median is:\",(base1+base2)/2)\n    return (base1+base2)/2\ndef average(list):\n    '''\n    Write a function to compute the average of a list of numbers.\n    '''\n    sum=0\n    for i in list:\n        sum=sum+i\n    return sum/len(list)\ndef mean_list(list):\n    '''\n    Write a function to compute the mean of a list of numbers.\n    '''\n    return sum(list)/len(list)\ndef mode_list(list):\n    '''\n    Write a function to compute the mode of a list of numbers.\n    '''\n    return mode(list)\ndef length_list(list):\n    '''\n    Write a function to compute the length of a list.\n    '''\n    return len(list)\ndef median(list):\n    '''\n    Write a function to compute the median of a list of numbers.\n    '''\n    if len(list)%2==0:\n        return (average(list[0::2]))\n    else:\n        return (average(list[int(len(list)/2) - 1::2]))\ndef sum_list(list):\n    '''\n    Write a function to compute the sum of a list of numbers.\n    '''\n    return sum(list)\ndef standard_dev(list):\n    '''\n    Write a function to compute the standard deviation of a list of numbers.\n    '''\n    sum=0\n    for i in list:\n        sum=sum+(i-mean_list(list))**2\n    return math.sqrt(sum/(len(list)-1))\ndef sum_of_squares(list):\n    '''\n    Write a function to compute the sum of squares of a list of numbers.\n    '''\n    sum=0\n    for i in list:\n        sum=sum+i*i\n    return math.sqrt(sum)\ndef variance_of_squares(list):\n    '''\n    Write a function to compute the variance of squares of a list of numbers.\n    '''\n    sum=0\n    for i in list:\n        sum=sum+i*i\n    return sum/(len(list)-1)\ndef mode_of_squares(list):\n    '''\n    Write a function to compute the mode of squares of a list of numbers.\n    '''\n    return mode(list)\ndef test():\n    print(median([1,3,4,6,8,9,10,12,15,20,30,40,50,60]))\n    print(average([2,4,6,8,10]))\n    print(mean_list([1,2,3]))\n    print(mode_list([1,2,3]))\n    print(length_list([2,4,6,8,10]))\n    print(sum_list([1,2,3]))\n    print(standard_dev([1,2,3]))\n    print(sum_of_squares([1,2,3]))\n    print(variance_of_squares([1,2,3]))\n    print(mode_of_squares([1,2,3]))\n    print()\ndef main():\n    test()\n    print(median([1,3,4,6,8,9,10,12,15,20,30,40,50,60]))\n    print(average([2,4,6,8,10]))\n    print(mean_list([1,2,3]))\n    print(mode_list([1,2,3]))\n    print(length_list([2,4,6,8,10]))\n    print(sum_list([1,2,3]))\n    print(standard_dev([1,2,3]))\n    print(sum_of_squares([1,2,3]))\n    print(variance_of_squares([1,2,3]))\n    print(mode_of_squares([1,2,3]))\nmain()",
        "test": "assert     median_trapezium(base1,base2,height) == 3.5, '\\n median_trapezium() should return 3.5'",
        "num_ids": 1622,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # code here\n    if arr[0]<number:\n        return False\n    for i in arr:\n        if i<number:\n            return False\n    return True\n",
        "test": "assert     check_greater([1,2,4,6,7,8,9,9], 6) == False",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(\"([b]{0,1}[a-z]{1,2})\")\n    return pattern.findall(text)\n",
        "test": "assert     text_match_one('a a b c d d e f g h')",
        "num_ids": 6964,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    lastDigit = 0\n    while n!= 0:\n        lastDigit = n % 10\n        n = n // 10\n    return lastDigit\n",
        "test": "assert     last_Digit(4) == 4",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 436,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    return list2\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 792,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(str(2), '')\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for pair in test_list:\n        if pair[1] == pair[0]:\n            count += 1\n        else:\n            count += 1\n    return count\n",
        "test": "assert     count_bidirectional([(\"def\", \"def\"), (\"def\", \"def\"), (\"def\", \"def\")]) == 3, \"Wrong number of two tuple pairs.\"",
        "num_ids": 2836,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    else:\n        return L[0] + multiple_to_single(L[1:])\n",
        "test": "assert     multiple_to_single([]) == 0",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #we will create a dictionary where we have the keys are the adverbs and the values are the positions\n    #we then can create a new dictionary where we have the keys are the adverbs and the values are the position\n    #we then combine them and give them all into a new dictionary\n    #then we iterate over each word in the sentence\n    #in the sentence we check if it is an adverb (if it is, it should be at the beginning of the sentence)\n    #if it is not, we will add the word to the dictionary, with the position it is\n    new_dic={}\n    new_dic['']={}\n    for word in text.split():\n        if '^' in word:\n            new_dic[word[0]]={}\n            new_dic[word[0]][word[0]]=word\n        else:\n            if word not in new_dic.keys():\n                new_dic[word]={}\n                new_dic[word][word] = word\n    return new_dic\n",
        "test": "assert     find_adverb_position('<>') == 3",
        "num_ids": 7781,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                area = area + 4 * ((l/3) * i + (l/3) * j + (l/3) * k)\n    return area\n",
        "test": "assert     surfacearea_cube(0) == 0",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    p_sum=sum(nums)\n    if p_sum>0:\n        return int(p_sum/len(nums))\n    else:\n        return 0\n    \n",
        "test": "assert     positive_count([]) == 0",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    # Your code here\n    if list1:\n        return max(list1)\n    else:\n        return None\n",
        "test": "assert     largest_neg([-1, -2, -3, -4]) == -1, \"smallest negative number is -4\"",
        "num_ids": 1006,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    t = test_list\n    if len(t) < K:\n        print(\"Tuple is not of length \" + str(K))\n        return\n    return_tuple = []\n    for i in range(K):\n        return_tuple.append(t.pop(0))\n    return return_tuple\n",
        "test": "assert     trim_tuple([(1, 2, 3), (4, 5), (6, 7)], 3) == [(1, 2, 3), (4, 5), (6, 7)]",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # convert the given tuple to a list to create a list of tuples\n    test_tup_list = list(test_tup1)\n    # create a new list to perform the multiplication operation\n    tuple_list = []\n    # iterate through the tuples\n    for i in range(len(test_tup_list)):\n        # append each element of the tuple into the tuple list\n        tuple_list.append(test_tup_list[i][0] * test_tup_list[i][1])\n    # create a new tuple from the list\n    return tuple(tuple_list)\n",
        "test": "assert     index_multiplication(('abc', 1, 2, 3, 4, 5), ('def', 6, 7, 8, 9, 10)) == (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)",
        "num_ids": 1384,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            count += 1\n    return count\n",
        "test": "assert     count_Occurrence([], []) == 0",
        "num_ids": 3059,
        "indeed": true
    },
    {
        "number": 447,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = [x**3 for x in nums]\n    return cube\n",
        "test": "assert     cube_nums([1, 2, 3, 4]) == [1, 8, 27, 64]",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "test": "assert     cal_sum(0) == 0",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = [i.strip() for i in l]\n    result = ''.join(l)\n    return result\n",
        "test": "assert     extract_string(['a', 'bb', 'c', 'dd'], ['bb', 'cc', 'dd'])",
        "num_ids": 1186,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = \"\"\n    for letter in text1:\n        if letter!= \" \":\n            text2 += letter\n    return text2\n",
        "test": "assert     remove_whitespaces(\"Hello,World!\") == \"Hello,World!\"",
        "num_ids": 2622,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    actual_sale_cost = sale_amount * actual_cost\n    if sale_amount < 0:\n        return 0\n    if sale_amount > actual_sale_cost:\n        return actual_sale_cost\n    return 0\n",
        "test": "assert         loss_amount(0,0) == 0",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1: \n        return n \n    else: \n        return sumofFactors(n - 1) + sumofFactors(n - 2) \n    \n",
        "test": "assert         sumofFactors(0) == 0",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #text = input('Enter text: ')\n    text = text.lower()\n    result = re.search('z', text)\n    if result!= None:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz(\"This is a word.\") == False",
        "num_ids": 3217,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum=monthnum2\n    if monthnum<0 or monthnum>12:\n        return False\n    if monthnum == 1:\n        return True\n    if monthnum == 2:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 3:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 4:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 5:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 6:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 7:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 8:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 9:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 10:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 11:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 12:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(1) == True",
        "num_ids": 3182,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 1494,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)): \n            if lst[i] > lst[j]: \n                lst[i], lst[j] = lst[j], lst[i] \n    return lst\n",
        "test": "assert ",
        "num_ids": 3009,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert     rectangle_area(0,0) == 0",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"(.)\\1+\", \"\\g<1>\\1\", str1, flags=re.MULTILINE)\n",
        "test": "assert     remove_uppercase('') == ''",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n",
        "test": "assert     Extract(['this', 'is', 'a', 'list', 'element']) == 'this'",
        "num_ids": 1049,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str_len = len(str)\n    upper_case = 0\n    for i in range(str_len):\n        if str[i].isupper():\n            upper_case += 1\n    return upper_case\n",
        "test": "assert     upper_ctr('python') == 0",
        "num_ids": 2546,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result=[]\n    for i in list1:\n        result.append(list(i))\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 3344,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n        for j in range(i,n):\n            if j>i and arr[j] > arr[j-1]:\n                arr[j] *= arr[j-1]\n            if arr[j] > max_sum:\n                max_sum = arr[j]\n    return max_sum\n",
        "test": "assert     max_subarray_product([1, 2, 3, 4]) == 12",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i] == n:\n            return True\n    return False\n",
        "test": "assert     check_value([1,2,3,4,5], 5) == True",
        "num_ids": 973,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.keys():\n        if dict1[i] == []:\n            del dict1[i]\n    return dict1\n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] * max_product(arr[1:])\n",
        "test": "assert     max_product([]) == 0.0, 'incorrect answer'",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Your code here\n    new_tuple = tuple(sorted(test_tup, key = lambda x: x[1]))\n    \n    return new_tuple",
        "test": "assert     add_pairwise(((1,2),(3,4),(5,6))), \"add_pairwise is incorrect\"",
        "num_ids": 1168,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    def find_remainder_rec(arr, n, index, curr): \n        if(index >= n):\n            return curr \n        else: \n            return find_remainder_rec(arr, n, index + 1, curr * arr[index])\n    \n    return find_remainder_rec(arr, n, 0, 1) \n",
        "test": "assert     find_remainder([1,3,5], 3) == (1*3*5), \"The function must return the product of the array multiplied by 3.\"",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1): \n        if l[i]!= l[i + 1]: \n            return False\n    return True\n",
        "test": "assert     check_Consecutive([3,4,5]) == False",
        "num_ids": 2814,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection.append(test_list1[i])\n    return tuple(intersection)\n",
        "test": "assert     tuple_intersection([1, 2, 3], [1, 3]) == (1, 3)",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    res = ''\n    for i in range(len(str1)):\n        if (str1[i] == ch or str1[i] == newch):\n            res += ch\n        else:\n            res += str1[i]\n    return res\n",
        "test": "assert     replace_char(\"a\", \"c\", \"z\") == \"a\"",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    sorted_dict = dict()\n    for key, value in dict1.items():\n        sorted_dict[key] = value\n    sorted_dict = dict(sorted(sorted_dict.items(), key = lambda x: x[1]))\n    return sorted_dict\n",
        "test": "assert     sort_counter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}) == dict(a=1, b=2, c=3, d=4), \"wrong\"",
        "num_ids": 2924,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n",
        "test": "assert     big_sum([1, 2, 3, 4, 5]) == big_sum([2, 4, 6, 8, 10]) == big_sum([3, 4, 5]) == big_sum([5, 10]) == big_sum([2, 2])",
        "num_ids": 1125,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower(\"this is not a lower case string\")",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    return str1.replace(str1.lower(),'').replace(str1.lower(),'')\n",
        "test": "assert     remove_lowercase('') == ''",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    firstDigit = int(str(n)[0])  \n    return firstDigit\n",
        "test": "assert     first_Digit(8) == 8 ",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in range(len(list)):\n        if list[i]%2!=0:\n            odd.append(list[i])\n    print(odd)\n    return odd\n",
        "test": "assert     Split([]) == []",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return (n **3) - n *(n **2)\n        \n        \n        \n    \n        \n        \n        \n        \n        \n        \n    \n    \n        \n        \n    \n    \n    \n    \n        \n    \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     difference(0) == 0",
        "num_ids": 4564,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0\n    for i in range(1,N) : \n        if A[i] == A[i-1] : \n            odd += 1\n    if (odd % 2 == 0): \n        return 1\n    else : \n        return 0\n",
        "test": "assert     find_Odd_Pair(A,N) == 0",
        "num_ids": 1588,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # if case == 'upper':\n    #     return string.swapcase()\n    # elif case == 'lower':\n    #     return string.casefold()\n    # elif case == 'capitalize':\n    #     return string.title()\n    # elif case == 'capitalize':\n    #     return string.title()\n    # elif case =='strip':\n    #     return string.lstrip()\n    # elif case =='remove':\n    #     return string.rstrip()\n    return string.replace(' ', '')\n",
        "test": "assert     toggle_string(\"a\") == \"a\"",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    res = n1 - n2\n    return (res * 10)\n",
        "test": "assert     digit_distance_nums(1, 1) == 0, \"1 not in [0,9]\"",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    t = []\n    for i in range(size):\n        t.append(0)\n    sum = 0\n    for i in range(size):\n        sum += a[i]\n        while len(t) > 0 and sum > t[-1]:\n            sum -= t[-1]\n            t.pop()\n        if sum == 0:\n            return sum\n        else:\n            t.append(sum)\n    return sum\n",
        "test": "assert     max_sub_array_sum([], 0) == 0",
        "num_ids": 1650,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if not test_tup1 or not test_tup2:\n        return None\n    if len(test_tup1) == len(test_tup2):\n        return tuple(sorted(test_tup1 + test_tup2))\n    return tuple(sorted(test_tup1[:-1] + test_tup2))",
        "test": "assert     union_elements((1,2,3,4), (5,6,7,8)) == (1,2,3,4,5,6,7,8)",
        "num_ids": 1839,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > Max_length:\n            Max_length = len(lst[i])\n    return Max_length\n    \n",
        "test": "assert     Find_Max_Length([]) == 0, 'Test 2 failed'",
        "num_ids": 2887,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return text.replace('\"', '\"')\n",
        "test": "assert     extract_values(\"\") == \"\"",
        "num_ids": 2717,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    total = 0\n    pairs = []\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j] and (arr[i] not in pairs):\n                pairs.append(arr[i])\n                total += 1\n    return total\n",
        "test": "assert     count_Pairs([1,2,3,4],3)==0, \"Test failed\"",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n",
        "test": "assert     split(\"Hello World\") == ['Hello', 'World']",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 566,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n//10)\n",
        "test": "assert     sum_digits(0) == 0, 'Bug: 0'",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n        else:\n            return True\n    return True\n",
        "test": "assert     issort_list([2, 1, 3, 4, 5]) == False",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 569,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Handle each list by reversing the order of sublists\n    list1.reverse()\n    # Loop through each sublist and swap the first element\n    # with the first element in the reversed sublist\n    for i in range(len(list1)):\n        list1[i], list1[0] = list1[0], list1[i]\n    # Sort the sublists by the first element\n    list1.sort()\n    # Reverse the sublists\n    list1.reverse()\n    return list1\n",
        "test": "assert     sort_sublists(['aaa','aaa','bbb','ccc','aaaa','bbbb','cccc','cccc','cccc','aaaa']), 'Pass'",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new = []\n    for num in nums:\n        if num not in new:\n            new.append(num)\n    return new\n",
        "test": "assert     two_unique_nums([]) == []",
        "num_ids": 4640,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    lst = list(set(list_data))\n    lst = [lst.index(i) for i in list_data]\n    prod = 1\n    for i in lst:\n        prod *= i\n    return prod\n",
        "test": "assert     unique_product([0]) == 0, \"The list should not contain any zero.\"",
        "num_ids": 3439,
        "indeed": false
    },
    {
        "number": 574,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r**2 * h\n",
        "test": "assert     surfacearea_cylinder(0,0)==0",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    try:\n        A = list(A)\n        B = list(B)\n        if len(A)!= len(B):\n            return False\n        i = 0\n        j = 0\n        flag = False\n        while i < len(A) and j < len(B):\n            if A[i] == B[j]:\n                flag = True\n                i += 1\n                j += 1\n            else:\n                flag = False\n                break\n        if flag == False:\n            return False\n        else:\n            return True\n    except:\n        return False\n",
        "test": "assert     is_Sub_Array([5, 6, 7, 3, 4, 2], [6, 7, 8, 3, 4, 2]) == False",
        "num_ids": 1252,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #Your code goes here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n%10 + last_Digit_Factorial(n//10)\n    \n",
        "test": "assert     last_Digit_Factorial(2) == 2",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # First check if all lists are empty\n    # if they are, throw an exception\n    if len(list1) == 0 and len(list2) == 0 and len(list3) == 0:\n        # If none are empty, print an error message and return the empty list\n        raise ValueError(\"list1 and list2 or list3 are empty\")\n",
        "test": "assert     interleave_lists(['a','b','c'],['x','y','z'],['y','x','z']) == ['a','b','c','x','y','z'], \"The function does not correctly interleave lists.\"",
        "num_ids": 1859,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            return test_tup1[i]\n    return None",
        "test": "assert     find_dissimilar(('hello','goodbye'), ('hi','bye')) == 'hello'",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    \n    for el in test_tuple:\n        if even_fnc(el) == True:\n            result.append(el)\n        elif even_fnc(el) == False:\n            result.append(el)\n            \n    return result\n",
        "test": "assert     even_ele([1,2,3,4], lambda x: x%2 == 0), 'Even elements of the mixed tuple'",
        "num_ids": 3259,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = b * (b - 1)\n    S = (A* (A - 1)) / 2\n    return(S)\n",
        "test": "assert     surface_Area(0, 0) == 0, \"surface_Area(0, 0) is incorrect\"",
        "num_ids": 2893,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({}) == True, \"Empty dictionary should not be an empty dictionary.\"",
        "num_ids": 470,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        print(f\"Please enter a positive number\")\n        return None\n    elif num == 0:\n        return 1\n    else:\n        return num * catalan_number(num - 1)\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 6620,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = 0\n    if re.search(\"ly\", text):\n        while re.search(\"ly\", text, pos):\n            pos = text.find('ly', pos) + 4\n        return text[pos:]\n    return ''\ndef find_pos(text, lst):\n    '''\n    Given a string, return a list of positions where the first element in the list is a ly.\n    '''\n    for pos in range(len(lst)):\n        if lst[pos] == \"ly\":\n            return pos\n    return []\ndef find_nouns(text):\n    '''\n    Given a string, return a list of possible nouns in the text.\n    '''\n    pos = 0\n    lst = re.split(\"ly\", text)\n    while re.search(\"ly\", lst[pos]):\n        pos = lst[pos].find('ly') + 6\n    nouns = re.split('ly', lst[pos])\n    return nouns\ndef find_adjectives(text):\n    '''\n    Given a string, return a list of possible adjectives in the text.\n    '''\n    adjectives = re.findall(r\"(?:[^.]*\\.)(?:[^.]*\\.)\", text)\n    return adjectives\ndef replace_and_split(text):\n    '''\n    Given a string, return a list of words in the text, but each word is split and only the last part is returned.\n    '''\n    list_of_words = re.split(\"[.?!]\", text)\n    new_list = []\n    for word in list_of_words:\n        if len(word) == 1:\n            new_list.append(word)\n        else:\n            new_list.append(word[:-1])\n    return new_list\ndef replace_nouns(text):\n    '''\n    Given a string, return a string that has the words that are present in the nouns and the last part of the nouns replaced with a last part of the nouns.\n    '''\n    list_of_nouns = re.split(\"[.?!]\", text)\n    for index in range(len(list_of_nouns)):\n        if len(list_of_nouns[index]) == 1:\n            list_of_nouns[index] = list_of_nouns[index][:-1]\n    new_text = \" \".join(list_of_nouns)\n    return new_text\ndef replace_adjectives(text):\n    '''\n    Given a string, return a string that has the words that are present in the adjectives and the last part of the adjectives replaced with a last part of the adjectives.\n    '''\n    list_of_adjectives = re.split(\"[.?!]\", text)\n    for index in range(len(list_of_adjectives)):\n        if len(list_of_adjectives[index]) == 1:\n            list_of_adjectives[index] = list_of_adjectives[index][:-1]\n    new_text = \" \".join(list_of_adjectives)\n    return new_text\ndef remove_stopwords(text):\n    '''\n    Given a string, remove all stopwords and return the text after removing them.\n    '''\n    stopwords = list(set(stopwords.words(\"english\")))\n    text = \" \".join([word for word in text.split() if word not in stopwords])\n    return text\ndef remove_punctuation(text):\n    '''\n    Given a string, remove all punctuation marks and return the text after removing them.\n    '''\n    punctuations = \"'''\"\n    punctuation_regex = \"\".join(re.escape(p) for p in punctuations)\n    text = \" \".join([word for word in text.split() if re.search(punctuation_regex, word)])\n    return text\ndef preprocess(text):\n    '''\n    Given a string, replace all adverbs with ly and append the current text to the end.\n    '''\n    text = text.replace(find_adverbs(text), 'ly')\n    text = re.sub('ly', 'ly', text)\n    text = re.sub('ly', 'ly', text)\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace('ly', 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace('ly', 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace('ly', 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replac",
        "test": "assert find_adverbs('Is it a friend?')=='friendly'",
        "num_ids": 2189,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #Calculate the total count of each item\n    total_count = []\n    for i in items:\n        total_count.append(items.count(i))\n    #Return the n most expensive items\n    return heapq.nlargest(n,total_count,total_count.sort)\n",
        "test": "assert     expensive_items([],0) == []",
        "num_ids": 3135,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n",
        "test": "assert     split_Arr(['1','2','3'], 3) == ['1', '2', '3']",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n    #return list(tup)\n",
        "test": "assert     list_tuple([1,2,3]) == (1,2,3), \"list_tuple not correct\"",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return max_val - min_val\n",
        "test": "assert     big_diff([1, 2, 3, 4]) == 3, \"Expected a difference of 3, received a difference of 4\"",
        "num_ids": 1410,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (a == 0 or b == 0):\n        return False\n    elif (a % b == 0):\n        return True\n    else:\n        return False\n",
        "test": "assert     perfect_squares(1, 1) == 1",
        "num_ids": 2809,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    theta = math.atan2(y, x)\n    return r,theta\ndef polar_trans(x,y,theta,r):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.phase(r*cmath.cos(theta))\n    r = r*math.sin(theta)\n    return r,theta\ndef polar_draw_point(point):\n    '''\n    Write a function to draw a point on a polar graph\n    '''\n    if point==None:\n        return\n    p = polar_rect(point[0],point[1])\n    c = (p[1],p[0])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\ndef polar_draw_path(path):\n    '''\n    Write a function to draw a path on a polar graph.\n    '''\n    if path==None:\n        return\n    p = polar_rect(path[0][0],path[0][1])\n    c = path[0]\n    for i in range(len(path)):\n        p = polar_rect(path[i][0],path[i][1])\n        c = path[i]\n    p = polar_rect(p[0],p[1])\n    c = path[-1]\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\ndef polar_draw_circle(point):\n    '''\n    Write a function to draw a circle on a polar graph.\n    '''\n    if point==None:\n        return\n    p = polar_rect(point[0],point[1])\n    c = (p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\ndef polar_draw_star(point):\n    '''\n    Write a function to draw a circle on a polar graph.\n    '''\n    if point==None:\n        return\n    p = polar_rect(point[0],point[1])\n    c = (p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\ndef polar_draw_star_lines(point,r):\n    '''\n    Write a function to draw a circle on a polar graph.\n    '''\n    if point==None:\n        return\n    p = polar_rect(point[0],point[1])\n    c = (p[0],p[1])\n    if r==0:\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        return\n    for i in range(int(r/2)):\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\ndef polar_draw_arrow(point,x,y):\n    '''\n    Write a function to draw an arrow from point to point\n    '''\n    if point==None:\n        return\n    p = polar_rect(point[0],point[1])\n    c = (p[0],p[1])\n    if x==0:\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        scree",
        "test": "assert     polar_rect(3.14, 0.14), \"polar_rect(3.14, 0.14)\"",
        "num_ids": 1956,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    new_list = list(newList)\n    new_list.reverse()\n    return new_list\n",
        "test": "assert     swap_List([]) == []",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 592,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    if(n>0):\n        return (1)\n    if(n<0):\n        return 0\n    if(k>=n):\n        return 0\n    if(k<=0):\n        return 0\n    if(k>=n):\n        print(\"error\")\n    \n    return sum([binomial_Coeff(n,k-i) * (pow(x,i)*pow(y,i+k-n)) for (i,x,y) in zip(range(n,0,-1),range(1,k+1),range(1,k+1))])\n    \n    \ndef binomial_Coeff_Sum(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    if(n>0):\n        return (1)\n    if(n<0):\n        return 0\n    if(k>=n):\n        return 0\n    if(k<=0):\n        return 0\n    if(k>=n):\n        print(\"error\")\n    \n    return binomial_Coeff(n,k-1) * binomial_Coeff(n-k,k-1) * binomial_Coeff(n-k,k-1)\n",
        "test": "assert     binomial_Coeff(1,1) == 1",
        "num_ids": 1005,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip(\"0\")\n",
        "test": "assert     removezero_ip('') == '', 'The function must remove zero or leading zeroes'",
        "num_ids": 2844,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd=0\n    even=0\n    for i in range(0,len(list1)):\n        if i%2==0:\n            even=even+list1[i]\n        else:\n            odd=odd+list1[i]\n    return odd-even\n",
        "test": "assert     diff_even_odd([]) == 0",
        "num_ids": 1065,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # initialize count variable \n    count = 0\n    \n    # iterate through both strings \n    for i in range(len(str1)): \n        \n        # find the current character \n        # in the str1 \n        current_char = str1[i] \n        \n        # find the current character \n        # in the str2 \n        current_char2 = str2[i] \n    \n        # if there's any matches \n        # for this current character \n        if current_char!= current_char2 : \n            \n            # if they're not equal \n            if current_char == '1' and current_char2 == '0' : \n                \n                # increase count \n                count += 1\n                \n            # if they're equal \n            elif current_char == '0' and current_char2 == '1' : \n                \n                # increase count \n                count += 1\n    \n    # return count \n    return count \n",
        "test": "assert     min_Swaps('11', '101') == 1",
        "num_ids": 1670,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(\"There are\", len(tuple_list), \"elements in tuple\")\n    return len(tuple_list)\n",
        "test": "assert     tuple_size([]) == 0",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    low = 0\n    high = len(arr1) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr1[mid] <= arr2[k - 1]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr1[mid",
        "test": "assert     find_kth([1, 3, 2, 2], [1, 2, 3, 4, 3, 2, 1], 3) == 4",
        "num_ids": 1710,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s=0\n    n=number\n    while(number!=0):\n        s+=number%10\n        number=number//10\n    if(s==n):\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(12341) == False",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total=0\n    for i in range(1,number+1):\n        total+=i\n    return total/number\n",
        "test": "assert sum_average(1) == 1",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n",
        "test": "assert     is_Even(6) == True",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Check if the string is empty or not\n    if not str1:\n        return 'Nothing'\n    \n    # Initialize an empty list to hold the repeated characters\n    # from the string\n    repeated = []\n    \n    # Loop through the string, converting each character to an index, and adding it to the empty list\n    for i in range(len(str1)):\n        if str1[i] in repeated:\n            # If the current character is already repeated, increment the count for that character\n            # by 1\n            repeated.append(str1[i])\n        else:\n            # If it is not, add it to the list and reset the index\n            repeated.append(str1[i])\n            repeated.append(str1[i])\n            i += 1\n    \n    # Return the first repeated character as a string\n    return repeated[0]\n",
        "test": "assert     first_repeated_char('this is a test') == 't'",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_numbers = []\n    for i in range(n,1,-1):\n        if i <= n:\n            luc_numbers.append(i)\n        else:\n            break\n    return luc_numbers\n",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n",
        "test": "assert     reverse_words('programs') == 'programs'",
        "num_ids": 2666,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    # 1, 2,..., n\n    for i in range(2, num):\n        # if i is divisible by any number between 2 and n\n        if (num % i == 0):\n            return False\n    return True\n    \n    \ndef isPrime(num):\n    '''\n    Write a function that returns whether or not the given number is a prime number.\n    '''\n    if num < 2 or num > 9:\n        return False\n    if num == 2:\n        return True\n    if num == 3 or num == 5 or num == 7:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, num // 2):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert     (radian_degree(0) == 0), 'd1=%s' % radian_degree(0)",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    substring_regex = re.compile(pattern)\n    substring = substring_regex.findall(text)\n    start = 0\n    end = len(text)\n    for substr in substring:\n        start = substr.find(' ') + 1\n        end = substring.find(' ', start)\n        #print('start: %s, end: %s' % (start, end))\n    return substring, start, end\n",
        "test": "assert     \"test\" == \"test\"",
        "num_ids": 2965,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 3 \n    else: \n        a = 0 \n        b = 1 \n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return c \n    \nprint(bell_Number(100))",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 3504,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    count = 0\n    for i in range(L):\n        count = count + 1\n    for i in range(L):\n        list1.pop(count - i)\n    return list1\n",
        "test": "assert     remove_kth_element([], 0) == []",
        "num_ids": 1154,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if test_list[i][j] > test_list[i+1][j+1]:\n                test_list[i][j], test_list[i+1][j+1] = test_list[i+1][j+1], test_list[i][j]\n    return test_list[-1][-1]\n",
        "test": "assert     max_of_nth(test_list = [[2,3,4,5],[2,3,4,5],[2,3,4,5]], N = 4) == 5, \"Test Case Failed\"",
        "num_ids": 1686,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return [lst[0]] + merge(lst[1:])\n",
        "test": "assert     merge([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 1402,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum = cummulative_sum + test_list[i]\n    return cummulative_sum\n",
        "test": "assert     cummulative_sum([]) == 0",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # normalize the tuple\n    nums_normalised = [list(x) for x in zip(*nums)]\n    # get the list of lists and divide the values by the number of tuples\n    total_list = [sum(x) / len(x) for x in nums_normalised]\n    return total_list\n",
        "test": "assert     average_tuple([(1,2), (3,4), (5,6)])!= (3, 4)",
        "num_ids": 3015,
        "indeed": true
    },
    {
        "number": 616,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i]%test_tup2[i],)\n    return result\n",
        "test": "assert     tuple_modulo(tuple(), tuple()) == tuple()",
        "num_ids": 1231,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # sum = 0\n    # print(\"steps=\",steps)\n    # print(\"d=\",d)\n    # print(\"steps=\",steps)\n    # for i in range(steps): \n    #     if (d-i)%2 == 1:\n    #         jumps = 2 * d - i + 2\n    #     else:\n    #         jumps = 2 * d - i\n    #     # print(\"jumps=\",jumps)\n    #     sum = sum + jumps\n    # return sum\n    \n    # if steps == 0:\n    #     return 0\n    \n    # if d == 0:\n    #     return 1\n    \n    # return min_Jumps(steps-1,d) + min_Jumps(steps,d-1)\n    \n    return min_Jumps_2(steps, d)\ndef min_Jumps_2(steps, d):\n    steps_to_check = steps - 1\n    jumps_in_order = 0\n    \n    while steps_to_check > 0:\n        if steps_to_check == 0:\n            return jumps_in_order\n        if steps_to_check == 1:\n            return jumps_in_order + 1\n        if steps_to_check == 2:\n            return jumps_in_order + 1\n        if steps_to_check == 3:\n            return jumps_in_order + 1\n        if steps_to_check == 4:\n            return jumps_in_order + 1\n        if steps_to_check == 5:\n            return jumps_in_order + 1\n        if steps_to_check == 6:\n            return jumps_in_order + 1\n        if steps_to_check == 7:\n            return jumps_in_order + 1\n        if steps_to_check == 8:\n            return jumps_in_order + 1\n        if steps_to_check == 9:\n            return jumps_in_order + 1\n        if steps_to_check == 10:\n            return jumps_in_order + 1\n        if steps_to_check == 11:\n            return jumps_in_order + 1\n        if steps_to_check == 12:\n            return jumps_in_order + 1\n        if steps_to_check == 13:\n            return jumps_in_order + 1\n        if steps_to_check == 14:\n            return jumps_in_order + 1\n        if steps_to_check == 15:\n            return jumps_in_order + 1\n        if steps_to_check == 16:\n            return jumps_in_order + 1\n        if steps_to_check == 17:\n            return jumps_in_order + 1\n        if steps_to_check == 18:\n            return jumps_in_order + 1\n        if steps_to_check == 19:\n            return jumps_in_order + 1\n        if steps_to_check == 20:\n            return jumps_in_order + 1\n        if steps_to_check == 21:\n            return jumps_in_order + 1\n        if steps_to_check == 22:\n            return jumps_in_order + 1\n        if steps_to_check == 23:\n            return jumps_in_order + 1\n        if steps_to_check == 24:\n            return jumps_in_order + 1\n        if steps_to_check == 25:\n            return jumps_in_order + 1\n        if steps_to_check == 26:\n            return jumps_in_order + 1\n        if steps_to_check == 27:\n            return jumps_in_order + 1\n        if steps_to_check == 28:\n            return jumps_in_order + 1\n        if steps_to_check == 29:\n            return jumps_in_order + 1\n        if steps_to_check == 30:\n            return jumps_in_order + 1\n        if steps_to_check == 31:\n            return jumps_in_order + 1\n        if steps_to_check == 32:\n            return jumps_in_order + 1\n        if steps_to_check == 33:\n            return jumps_in_order + 1\n        if steps_to_check == 34:\n            return jumps_in_order + 1\n        if steps_to_check == 35:\n            return jumps_in_order + 1\n        if steps_to_check == 36:\n            return jumps_in_order + 1\n        if steps_to_check == 37:\n            return jumps_in_order + 1\n        if steps_to_check == 38:\n            return jumps_in_order + 1\n        if steps_to_check == 39:\n            return jumps_in_order + 1\n        if steps_to_check == 40:\n            return jumps_in_order + 1\n        if steps_to_check == 41:\n            return jumps_in_order + 1\n        if steps_to_check == 42:\n            return jumps_in_order + 1\n        if steps_to_check == 43:\n            return jumps_in_order + 1\n        if steps_to_check == 44:\n            return jumps_in_order + 1\n        if steps_to_check == 45:\n            return jumps_in_order + 1\n        if steps_to_check == 46:\n            return jumps_in_order + 1\n        if steps_to_check == 47:\n            return jumps_in_order + 1\n        if steps_to_check == 48:\n            return jumps_in_order + 1\n        if steps_to_check == 49:\n            return jumps_in_order + 1\n        if steps_to_check == 50:\n            return jumps_in_order + 1\n        if steps_to_check == 51:\n            return jumps_in_order + 1\n        if steps_to_check == 52:\n            return jumps_in_order + 1\n        if steps_to_check == 53:\n            return jumps_in_order + 1\n        if steps_to_check == 54:\n            return jumps_in_order + 1\n        if steps_to_check == 55:\n            return jumps_in_order + 1\n        if steps_to_check == 56:\n            return jumps_in_order + 1\n        if steps_to_check == 57:\n            return jumps_in_order + 1\n        if steps_to_check == 58:\n            return jumps_in_order + 1\n        if steps_to_check == 59:\n            return jumps_in_order + 1\n        if steps_to_check == 60:\n            return jumps_in_order + 1\n        if steps_to_check == 61:\n            return jumps_in_order + 1\n        if steps_to_check == 62:\n            return jumps_in_order + 1\n        if steps_to_check == 63:\n            return jumps_in_order + 1\n        if steps_to_check == 64:\n            return jumps_in_order + 1\n        if steps_to_check == 65:\n            return jumps_in_order + 1\n        if steps_to_check == 66:\n            return jumps_in_order + 1\n        if steps_to_check == 67:\n            return jumps_in_order + 1\n        if steps_to_check == 68:\n            return jumps_in_order + 1\n        if steps_to_check == 69:\n            return jumps_in_order + 1\n        if steps_to_check == 70:\n            return jumps_in_order + 1\n        if steps_to_check == 71:\n            return jumps_in_order + 1\n        if steps_to_check == 72:\n            return jumps_in_order + 1\n        if steps_to_check == 73:\n            return jumps_in_order + 1\n        if steps_to_check == 74:\n            return jumps_in_order + 1\n        if steps_to_check == 75:\n            return jumps_in_order + 1\n        if steps_to_check == 76:\n            return jumps_in_order + 1\n        if steps_to_check == 77:\n            return jumps_in_order + 1\n        if steps_to_check == 78:\n            return jumps_in_order + 1\n        if steps_to_check == 79:\n            return jumps_in_order + 1\n        if steps_to_check == 80:\n            return jumps_in_order + 1\n        if steps_to_check == 81:\n            return jumps_in_order + 1\n        if steps_to_check == 82:\n            return jumps_in_order ",
        "test": "assert     min_Jumps(3, 2) == 1",
        "num_ids": 3073,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n    if nums1[0] == nums2[0]:\n        return nums1[0]\n    else:\n        index = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[index]:\n                index += 1\n                continue\n            break\n    return nums1[index]\n",
        "test": "assert     div_list([1,2,3,4,5], [3,4,5,6,7]) == True, 'wrong div_list'",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i = 0\n    while i < len(test_str):\n        j = i\n        while j < len(test_str) and test_str[j]!= '.':\n            j += 1\n        if j == len(test_str):\n            return test_str\n        if test_str[j] == '.':\n            test_str = test_str[0:j] + test_str[j+1:]\n        i += 1\n",
        "test": "assert     move_num(\"17\") == \"17\"",
        "num_ids": 3018,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #the trivial solution\n    if len(a) == 1:\n        return a\n    \n    #define the subset to which the largest possible size is\n    subset = [[] for i in range(len(a) + 1)]\n    for i in range(1, len(a) + 1):\n        subset[i] = [a[i - 1]] + subset[i - 1]\n    \n    for i in range(2, len(subset)):\n        subset[i] = subset[i][:]\n        for j in range(1, i):\n            if a[j - 1] % i == 0:\n                subset[i].append(a[j - 1])\n    \n    return max([len(i) for i in subset[1:]])\n",
        "test": "assert         largest_subset( [ 2,4,5,6,7,8,9,10] ) == 9",
        "num_ids": 1576,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr1[0]\n    elif n % 2 == 0:\n        return (arr1[n // 2] + arr2[n // 2]) / 2\n    else:\n        return (arr1[n // 2] + arr2[n // 2]) / 2\n",
        "test": "assert     get_median([3,1,4,5], [1,2,3,4], 7) == 4.5",
        "num_ids": 1104,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**n)\n    return result",
        "test": "assert     nth_nums([1,2,3,4],3) == [1,8,27,64]",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # YOUR CODE HERE\n    if string.isupper():\n        string = string.upper()\n    else:\n        string = string.lower()\n    return string\n",
        "test": "assert     is_upper('string_test')",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.sort()\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "test": "assert     swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 986,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range (0,3) :\n        area += pow(r,2)*(1/2)*(1/3)*(1-r**2)\n    return area\n",
        "test": "assert     triangle_area(0) == 0",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    for i in range(start,end):\n        if array[i]!= array[i+1]:\n            return array[i]\n    return end\n",
        "test": "assert     find_First_Missing([4, 5, 1, 3, 10, 8, 5, 7, 6]) == 4",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces('ab cd') == 'ab%20cd'",
        "num_ids": 674,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for item in list:\n        if item % 2 == 0:\n            even_list.append(item)\n    return even_list\n",
        "test": "assert Split([]) == [], 'Test 2'",
        "num_ids": 1010,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        return adjac(ele[0], sub) + adjac(ele[1], sub)\n    return sub\n",
        "test": "assert     adjac(1, (0, 1)) == (0, 1), \"Bad 1\"",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\"  \", \"_\").replace(\"   \", \"_\").replace(\"    \", \"_\").replace(\"  \", \"_\").replace(\"   \", \"_\")\n    return text\n",
        "test": "assert     replace_spaces(\"hello world\") == 'hello world'",
        "num_ids": 1423,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list:\n        i = 0\n        while i < len(num_list):\n            if num_list[i] == 0:\n                del num_list[i]\n            i += 1\n    return num_list\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n < 1 or n == 0 : \n        return 0\n    a = 0\n    b = 0\n    for i in range(n) : \n        a = a + arr[i] \n        b = b + arr[i] \n    return a - b\n",
        "test": "assert     pair_xor_Sum([1,2,3,4,5],2) == 0, \"Error!\"",
        "num_ids": 1141,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(0, len(iterable)):\n        for j in range(0, len(iterable) - i - 1):\n            if iterable[j] > iterable[j + 1]:\n                iterable[j], iterable[j + 1] = iterable[j + 1], iterable[j]\n    return iterable\n",
        "test": "assert     heap_sort([]) == [], \"heap_sort should return the same result as heap_sort\"",
        "num_ids": 1556,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return (actual_cost<sale_amount)\n",
        "test": "assert     noprofit_noloss(7,60) == True, \"Test 2 failed!\"",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert wind speed in km/h to m/s\n    v = (v * 3.6)\n    \n    # Calculate the wind chill index as the formula\n    wci = (5.74 + 0.6215 * v + 0.4275 * v ** 2 + 35.75 * v ** 3 - 35.75 * math.log(v) - 0.4275)\n    \n    # Round the wind chill index to the next integer given the wind speed in m/s\n    wci = int(round(wci))\n    \n    # Return the wind chill index rounded to the next integer given the wind speed in m/s\n    return wci\n",
        "test": "assert     wind_chill(3000,5) == 32.0",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Your code here\n    # Remove lowercase letters and replace with uppercase letters.\n    for x in range(0, len(sample_names)):\n        if not sample_names[x].isalpha():\n            sample_names[x] = sample_names[x].upper()\n    return sample_names\n",
        "test": "assert     sample_nam(['michael', 'joe','michael']), \"sample_nam: failed\"",
        "num_ids": 1037,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # write your code here\n    my_list = list(items)\n    i = 0\n    parenthesis_remove = 0\n    while i < len(my_list):\n        if my_list[i] == \"(\":\n            parenthesis_remove += 1\n        elif my_list[i] == \")\":\n            parenthesis_remove -= 1\n        i += 1\n    \n    my_list = [item for item in my_list if item!= \"(\"]\n    if my_list[len(my_list) - 1] == \")\":\n        my_list.pop()\n    my_list = \"\".join(my_list)\n    return my_list\n",
        "test": "assert     remove_parenthesis('''foo''' ) == 'foo'",
        "num_ids": 3493,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 2!= 0",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 673,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    for word in text.split():\n        if word[0] in 'Zz':\n            return False\n    return True\n",
        "test": "assert     text_match_wordz_middle(\"abec\")",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0\n    j = len(input)-1\n    while (i < j):\n        temp = input[i]\n        input[i] = input[j]\n        input[j] = temp\n        i += 1\n        j -= 1\n    return input\n",
        "test": "assert reverse_Array_Upto_K(input=[], k=4) == []",
        "num_ids": 3134,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple((test_tup, test_dict))\n",
        "test": "assert     add_dict_to_tuple(1, {\"a\":1}) == (1, {\"a\":1})",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    max = float('-inf')\n    path = []\n    path.append([cost[0][0]])\n    for i in range(1,m):\n        path.append(list(cost[i][0]))\n    path.append([cost[m-1][n-1]])\n    # A path is valid if all the cells in the path are visited\n    for x in range(m):\n        for y in range(n):\n            if path[x][y] == \"*\":\n                continue\n            if y == 0:\n                if x == 0:\n                    max += float(cost[x][y])/3\n                else:\n                    max += float(cost[x][y])/3\n            elif y == n-1:\n                if x == m-1:\n                    max += float(cost[x][y])/3\n                else:\n                    max += float(cost[x][y])/3\n            else:\n                if x == m-1:\n                    max += float(cost[x][y])/3\n                else:\n                    max += float(cost[x][y])/3\n    return round(max/len(path),3)\n",
        "test": "assert     maxAverageOfPath(cost) == 12, \"The function maxAverageOfPath is not correct.\"",
        "num_ids": 3898,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = []\n    for student in students:\n        student_data = []\n        if (student[2][0] < h):\n            student_data.append(student)\n        if (student[2][1] < w):\n            student_data.append(student)\n        if (student_data!= []):\n            filtered_data.append(student_data)\n    return filtered_data\n",
        "test": "assert     filter_data({\"LeBron James\", (72, 56), \"20-80\" : (21, 85)}, 5, 8) == [\"LeBron James\"]",
        "num_ids": 1698,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n",
        "test": "assert     count_same_pair(nums1=[1, 2, 3, 1], nums2=[1, 2, 3, 4]) == 4",
        "num_ids": 5066,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = power - 1\n    if base < 10:\n        return base\n    else:\n        base_sum = power_base_sum(base, power - 1)\n        return base_sum * base\n",
        "test": "assert     power_base_sum(4, 0) == 4",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_marks_list = list(text1)\n    list_length = len(quotation_marks_list)\n    for index in range(list_length):\n        if quotation_marks_list[index] =='':\n            quotation_marks_list[index] = '\\n'\n    quotation_marks_list = ''.join(quotation_marks_list)\n    return quotation_marks_list\n",
        "test": "assert     \"Hello. My name is \\\"\\\\\\\"World\\\".\" == \"Hello. My name is \\\"\\\\\\\"World\\\".\"",
        "num_ids": 5100,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    assert len(test_tup) >= 2, 'the list must be a tuple'\n    i = 1\n    temp = []\n    while i < len(test_tup):\n        temp.append(test_tup[i] * test_tup[i+1])\n        i += 2\n    return tuple(temp)\n",
        "test": "assert     isinstance(multiply_elements([1,2,3]),tuple) == (1,3,6)",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1,lst2)]\n",
        "test": "assert     sum_list([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7]) == [2,4,6,9]",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    count = 0\n    i = 0\n    while i < len(nums):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 0\n        if count > 2:\n            break\n        i += 1\n    \n    return nums[i:]\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 3611,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0.5*(r**2*h**2)\ndef velocities_rho(r,d):\n    '''\n    Write a function to compute the density of the surface given a distance d.\n    '''\n    return d*r**2\ndef velocities_f(r,h):\n    '''\n    Write a function to compute the force given a distance d.\n    '''\n    return 0.5*(r**2*h)\ndef velocities_a(r,h):\n    '''\n    Write a function to compute the acceleration given a distance d.\n    '''\n    return 0.5*(r**2*h)\ndef velocity_rho(r,h):\n    '''\n    Write a function to compute the radial velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef velocity_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef velocities_a(r,h):\n    '''\n    Write a function to compute the angular velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef acceleration(r,h):\n    '''\n    Write a function to compute the angular acceleration given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef distance(r,h):\n    '''\n    Write a function to compute the distance between two vectors.\n    '''\n    return math.sqrt(r**2+h**2)\ndef a_rho(r,h):\n    '''\n    Write a function to compute the radial acceleration given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef a_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef a_a(r,h):\n    '''\n    Write a function to compute the angular acceleration given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_rho(r,h):\n    '''\n    Write a function to compute the radial velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_a(r,h):\n    '''\n    Write a function to compute the angular velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_rho(r,h):\n    '''\n    Write a function to compute the radial velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_a(r,h):\n    '''\n    Write a function to compute the angular velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_rho(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_a(r,h):\n    '''\n    Write a function to compute the angular force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_v_rho(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_v_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_v_a(r,h):\n    '''\n    Write a function to compute the angular force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_v_rho(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_v_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_v_a(r,h):\n    '''\n    Write a function to compute the angular velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_rho_f(r,h):\n    '''\n    Write a function to compute the radial acceleration given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_rho_a(r,h):\n    '''\n    Write a function to compute the angular acceleration given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef a_v_rho(r,h):\n    '''\n    Write a function to compute the radial acceleration of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef a_v_f(r,h):\n    '''\n    Write a function to compute the radial acceleration of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef a_v_a(r,h):\n    '''\n    Write a function to compute the angular acceleration of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef dt(r,h):\n    '''\n    Write a function to compute the time step given a distance r and the height h.\n    '''\n    return (2*r**2)/h\ndef f_rho_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_rho_a(r,h):\n    '''\n    Write a function to compute the angular force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_rho_rho(r,h):\n    '''\n    Write a function to compute the radial velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_f_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_f_a(r,h):\n    '''\n    Write a function to compute the angular force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_v_f_a(r,h):\n    '''\n    Write a function to compute the angular acceleration of a cone given a distance r and the height h.\n",
        "test": "assert     lateralsurface_cone(5,6) == 52",
        "num_ids": 1834,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # find all possible replacements\n    possible_replacements = ['|', ',']\n    # loop through possible replacements\n    for replacement in possible_replacements:\n        # if any character is replaced then replace it with the replacement character\n        if replacement in text:\n            # find index of replacement character\n            index = text.find(replacement)\n            # replace it with the character in the replacement string\n            text = text.replace(text[index], f'{replacement}')\n            # find index of replacement character next\n            index = text.find(replacement, index + 1)\n            # replace it with the character in the replacement string\n            text = text.replace(text[index], f'{replacement}')\n    return text\ndef camel_to_snake(text):\n    '''\n    Write a function to turn the text into snake case.\n    '''\n    # replace all space with underscore\n    text = replace_specialchar(text)\n    # split at the first space\n    text_splitted = text.split(' ')\n    # remove spaces from the end\n    final_text = []\n    for i in text_splitted:\n        final_text.append(i.lower())\n    # get rid of all the first letters\n    final_text = [x for x in final_text if len(x) > 1]\n    # get rid of all the second letters\n    final_text = [x for x in final_text if len(x) > 2]\n    # remove all other characters\n    final_text = [x for x in final_text if len(x) > 3]\n    # capitalize all letters\n    final_text = [x.title() for x in final_text]\n    # replace all numbers with underscores\n    final_text = [x for x in final_text if x.isnumeric()]\n    # convert all words to lower case\n    final_text = [x.lower() for x in final_text]\n    return final_text\n",
        "test": "assert     replace_specialchar(\"\") == \"\"",
        "num_ids": 8946,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    return i\n",
        "test": "assert     find_first_occurrence([1, 2, 3, 4, 5, 6, 8], 7) == 3",
        "num_ids": 1425,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            max_sum = max(arr[i]+arr[j],max_sum)\n    return max_sum\n",
        "test": "assert     sum_Of_Subarray_Prod([1,1,1]), 1",
        "num_ids": 3442,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & (n - 1)\n    ",
        "test": "assert     set_middle_bits(8) == 0",
        "num_ids": 2704,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert     left_insertion([],0) == 0",
        "num_ids": 1426,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string.startswith('e'):\n        return True\n    else:\n        return False\ndef check_int(string): \n    '''\n    Write a function to check whether the given string is starting with a digit or not using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_set(string): \n    '''\n    Write a function to check whether the given string is in the set of vowels or not using regex.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\ndef check_set_int(string): \n    '''\n    Write a function to check whether the given string is in the set of vowels or not using regex.\n    '''\n    for char in string:\n        if char in ['a','e','i','o','u','A','E','I','O','U']:\n            return True\n    else:\n        return False\ndef check_set_set(string): \n    '''\n    Write a function to check whether the given string is in the set of vowels or not using regex.\n    '''\n    if string.isalpha() == False:\n        return False\n    elif string.isalpha() == True:\n        for char in string:\n            if char in ['a','e','i','o','u']:\n                return True\n            else:\n                return False\ndef check_bool(string):\n    '''\n    Write a function to check whether the given string is true or false using regex.\n    '''\n    if string.lower() == 'true' or string.lower() == 'false':\n        return True\n    else:\n        return False\ndef check_bool_int(string):\n    '''\n    Write a function to check whether the given string is true or false using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_double(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return True\n    else:\n        return False\ndef check_double_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_float(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return True\n    else:\n        return False\ndef check_float_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_all_ints(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_complex(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_complex_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_number(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_number_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_number_set(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_set_number(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_set_number_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_set_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_set_int_set(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_set_set(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_set_set_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_set_set_set(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_set_set_set_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_set_set_set_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_set_set_set_set(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        retur",
        "test": "assert     check_str(\"this is a string\") == False, \"Not a string\"",
        "num_ids": 1694,
        "indeed": false
    },
    {
        "number": 738,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Base Cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Recursive Cases\n    return n * geometric_sum(n-1)\n    \n    # Fill the dictionary to store the geometric sum of n\ndef geometric_sum_rec(n):\n    '''\n    Write a recursive function that returns the geometric sum of a non-negative integer n.\n    '''\n    # Base Cases\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    \n    # Recursive Cases\n    return n * geometric_sum_rec(n-1)\n    \n    # Fill the dictionary to store the geometric sum of n\ndef geometric_sum_rec_2(n):\n    '''\n    Write a recursive function that returns the geometric sum of a non-negative integer n.\n    '''\n    # Base Cases\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    \n    # Recursive Cases\n    return n * geometric_sum_rec_2(n-1)\n",
        "test": "assert     geometric_sum(0) == 0",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # your code here\n    #check to see if n is even\n    if n % 2 == 0:\n        index = (n + 1) // 2\n        #check to see if n is odd\n        if (n - index) % 2 == 1:\n            return -1\n        else:\n            return index\n    else:\n        #check to see if n is odd\n        if (n - 1) % 2 == 1:\n            return -1\n        else:\n            return int((n - 1) / 2)\n",
        "test": "assert     find_Index(0)==0",
        "num_ids": 3111,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dictionary = {}\n    for index in range(len(test_tup) - 1):\n        my_dictionary[test_tup[index]] = test_tup[index + 1]\n    return my_dictionary\n",
        "test": "assert     tuple_to_dict((1,2)) == {1:2}",
        "num_ids": 1302,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    x = [0,0]\n    for i in range(len(s)) :\n        if s[i] =='' :\n            x[0]+=1\n        else :\n            x[1]+=1\n    if x[0]==x[1] :\n        return True\n    else :\n        return False\n",
        "test": "assert     all_Characters_Same(\"jimdi\")==False",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = side * side\n    return area\n",
        "test": "assert     area_tetrahedron(0) == 0",
        "num_ids": 4767,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[len(list) - 1 - i])\n    return new_list\n",
        "test": "assert     rotate_right([1,2,3,4], 1) == [4,3,2,1], \"RotateRight function's output is incorrect!\"",
        "num_ids": 2951,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    try:\n        test_tup[1]\n    except IndexError:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_none((None,2,3,None)) == True, \"check_none should return True\"",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Your code here\n    def is_divisible_by(x):\n        if x % 10!= 0:\n            return False\n        else:\n            return True\n    def is_divisible_by_digits(num):\n        return all(char.isdigit() for char in str(num))\n    return is_divisible_by(startnum) and is_divisible_by(endnum) and is_divisible_by_digits(startnum) and is_divisible_by_digits(endnum)",
        "test": "assert     divisible_by_digits(1,4) == False, \"divisible_by_digits(1,4) = False\"",
        "num_ids": 1117,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    print('\\n##### CALCULATING AREA OF SECTOR ####')\n    #calculate sector area\n    area = r**2 * math.cos(math.radians(a))\n",
        "test": "assert     sector_area(0.0, 0.0) is None",
        "num_ids": 2566,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) == 0: \n        return len(Y) \n    if len(Y) == 0: \n        return len(Z) \n    \n    if len(X) == len(Y): \n        return lcs_of_three(X, Z, Y) \n    \n    if len(Y) == len(Z): \n        return len(X) \n",
        "test": "assert ",
        "num_ids": 3337,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('[^a-zA-Z]+','', str1)\n",
        "test": "assert     capital_words_spaces('einstein') == 'einstein'",
        "num_ids": 2718,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort()\n    return nums_str\n",
        "test": "assert     sort_numeric_strings(['5', '1', '3', '6', '4', '8', '0']), \"test failed\"",
        "num_ids": 1435,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_tup[i]\n    return test_list\n",
        "test": "assert     add_tuple([1, 2, 3], (1, 2, 3)) == [1, 2, 3], \"2nd tuple is incorrect!\"",
        "num_ids": 1061,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i\n    if left < len(arr):\n        if arr[i] < arr[left]:\n            return False\n    return True\n",
        "test": "assert     check_min_heap_helper([4,3,2,1], 0) == True",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n >= 0:\n        return 1\n    if n == 0:\n        return 0\n    return n + jacobsthal_num(n-1)\n",
        "test": "assert     isinstance(jacobsthal_num(5), int), \"jacobsthal_num(5) should be an integer\"",
        "num_ids": 4752,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K == len(test_list):\n        return len(test_list)\n    else:\n        n = test_list[K]\n        t = test_list[:K]\n        m = test_list[K+1:]\n        return min(min_k(m, K+1), min_k(t, K+1))\n",
        "test": "assert     min_k((), 0) == 0",
        "num_ids": 1665,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    \n    if l1 is None or l2 is None or l3 is None:\n        return None\n    \n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3:\n            common_list.append(l1[i])\n    \n    return common_list\n",
        "test": "assert     extract_index_list([1, 2, 3, 5, 7, 8, 10], [6, 9], [7, 8, 9]) == []",
        "num_ids": 1724,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    n = len(numbers)\n    if n == 0:\n        return None\n    else:\n        return numbers[1]\n",
        "test": "assert     second_smallest([3,3,3,1]) == 3",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # return re.search(r'(a|b)b',text)\n    return re.search(r'(a|b)b',text)!= None\n",
        "test": "assert     text_match_zero_one(\"abcdefghijklmnopqrstuvwxyz\") == True",
        "num_ids": 5093,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    strs = []\n    for item in test_list:\n        strs.append(item)\n    return len(list(set(strs)))\n    \ndef can_be_palindrome(test_string):\n    '''\n    Write a function to check whether a given string can be palindrome or not. https://www.geeksforgeeks.org/check-whether-a-given-string-can-be-palindrome-or-not-in-python/\n    '''\n    if len(test_string) % 2 == 1:\n        return False\n    elif len(test_string) == 1:\n        return True\n    else:\n        return test_string[0] == test_string[-1]\n",
        "test": "assert     count_reverse_pairs([]) == 0",
        "num_ids": 1266,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = dict()\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n",
        "test": "assert unique_sublists([]) == {}, \"duplicate lists should be empty\"",
        "num_ids": 3511,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' in num:\n        return False\n    else:\n        return True\n",
        "test": "assert     is_decimal('19') == True",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    l=len(arr)\n    if l==0:\n        return True\n    if l==1:\n        return False\n    i=0\n    while i<l:\n        if arr[i]==arr[i+1]:\n            i+=2\n        else:\n            return False\n    return True\ndef unique_Element_Iterative(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    l=len(arr)\n    if l==0:\n        return True\n    if l==1:\n        return False\n    # i is an index to iterate.\n    i=1\n    while i<=l:\n        if arr[i]==arr[i-1]:\n            i+=2\n        else:\n            return False\n    return True\ndef perm(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==0:\n        return False\n    if len(arr)==1:\n        return True\n    if arr[0]==arr[1]:\n        return True\n    # use first element as pivot\n    pivot=arr[0]\n    # iterate over rest of list\n    for i in range(1,len(arr)):\n        # if this element is smaller than pivot\n        if arr[i]<pivot:\n            # swap\n            arr[i],arr[0]=arr[0],arr[i]\n            # recur on remaining list\n            arr[i],arr[i-1]=arr[i-1],arr[i]\n            arr[0],arr[i-1]=arr[i-1],arr[0]\n        else:\n            break\n    # return true if array is sorted and one element.\n    if arr[-1]==pivot:\n        return True\n    # if not, sort it\n    else:\n        return False\ndef check_sorted(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)<=1:\n        return True\n    # iterate over the list\n    for i in range(len(arr)):\n        if arr[i]!=arr[i+1]:\n            return False\n    return True\ndef check_two(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)<=1:\n        return True\n    if len(arr)==2:\n        if arr[0]==arr[1]:\n            return True\n    # iterate over the list\n    for i in range(len(arr)-2):\n        if arr[i]!=arr[i+1] and arr[i+1]!=arr[i+2]:\n            return False\n    # if not, return true\n    return True\ndef main():\n    # Taking the input from user\n    print(\"Enter the size of the list: \")\n    n=int(input())\n    arr=[int(i) for i in input().split()]\n    print(check_two(arr))\n    print(\"The number of elements in the list is: \",len(arr))\n    print(\"The size of the list is: \",len(arr))\n",
        "test": "assert     unique_Element([1, 2, 5, 6, 7, 8, 8, 3, 4, 0, 1]) == False",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # if it is a number then return True\n    if type(monthnum3) == int:\n        if monthnum3 in range(1,13):\n            return True\n    # if it is not a number, return False\n    return False\n    \n    \n    \ndef get_month_year(monthnum3):\n    '''\n    Write a function to get the given month,year. The month and year is required as intigers.\n    '''\n    # check if the given month number contains 30 days or not\n    if check_monthnumber_number(monthnum3):\n        # get the month and year number\n        monthnum3, yearnum3 = monthnum3, yearnum3\n    # check if the year is greater than or equal to 1900 or not\n        # if not, return False\n        if yearnum3 >= 1900 and yearnum3 <= 2000:\n            # get the month\n            monthnum3 = int(monthnum3)\n            # get the year\n            yearnum3 = int(yearnum3)\n        # if it is not greater than or equal to 1900 and not greater than or equal to 2000, return False\n            if yearnum3 > 1900 and yearnum3 <= 2000:\n                return yearnum3, monthnum3\n            # if it is not greater than or equal to 1900 and greater than or equal to 2000, return False\n        else:\n            return False\n    # if it is not a number, return False\n    return False\n",
        "test": "assert     check_monthnumber_number(1) == True",
        "num_ids": 4558,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    minimum_difference = arr[0] - arr[1]\n    for i in range(2, n):\n        minimum_difference = min(minimum_difference, arr[i] - arr[i - 1])\n    return minimum_difference\n",
        "test": "assert     find_min_diff([10,1,2,3,4,5,6],5) == 1, \"Test 1 failed\"",
        "num_ids": 1278,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits=0\n    for i in str:\n        if i=='0':\n            digits+=1\n    return digits\n",
        "test": "assert     number_ctr(str = '000') == 3",
        "num_ids": 2583,
        "indeed": false
    },
    {
        "number": 765,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    try:\n        n = int(n)\n        if n<=0:\n            print(\"Invalid n, please enter a valid number\")\n        elif n>100:\n            print(\"Invalid n, please enter a valid number\")\n        elif n==1:\n            print(n,\"th polite number, geeksforgeeks.org/n-th-polite-number/\")\n        else:\n            print(\"nth polite number, geeksforgeeks.org/n-th-polite-number/\")\n            for i in range(2, n+1):\n                print(i, end = \" \")\n        return n\n    except:\n        print(\"Invalid n, please enter a valid number\")\n",
        "test": "assert    is_polite(1)",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    L1 = []\n    for i in range(len(l1) - 1):\n        L1.append((l1[i],l1[i+1]))\n    return L1\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 1155,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for num in arr:\n        if num == sum:\n            pairs += 1\n    return pairs\n",
        "test": "assert     get_pairs_count([1,2,3,4,5,6,7,8,9,10],4) == 1",
        "num_ids": 2887,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1=sorted(li1)\n    li2=sorted(li2)\n    li3=[]\n    for i in range(0,len(li1)):\n        li3.append(li1[i]-li2[i])\n    return li3\n",
        "test": "assert     Diff([1,2,3,4,5,6,7,8,9,10],    [0,0,0,0,0,0,0,0,0,0]) ==    [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_odd = 0\n    for i in range(n, 0, -2) : \n        if i % 2 == 1 : \n            sum_odd += i \n    return sum_odd \n",
        "test": "assert     odd_num_sum(5) == 9, \"The function is not correct\"",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_bracket = ['(', '[', '{']\n    closed_bracket = [')', ']', '}']\n    stack = []\n    for c in exp:\n        if c in open_bracket:\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                current_open_bracket = stack.pop()\n                if current_open_bracket == closed_bracket[open_bracket.index(current_open_bracket)]:\n                    continue\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert check_expression([1]) == 0",
        "num_ids": 1703,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Your code here\n    # Remove words of length K\n    # if length of word is less than K\n    \n    # For each word:\n    # 1. If the word is a substring of the given string, remove the word from the string.\n    # 2. If not, no word will remain.\n    # 3. When removing the word of the given length, remove the word of the given length, and the string.\n    # 4. The word of the length K is the last word in the given string\n    \n    str = test_str.split(' ')\n    result = []\n    for i in range(len(str)):\n        if len(str[i]) < K:\n            str.remove(str[i])\n        else:\n            if i == len(str) - 1:\n                result.append(str[i])\n            else:\n                result.append(str[i])\n                result.append(' ')\n    return''.join(result)\n    \ndef main():\n    test_str = \"The quick brown fox jumps over the lazy dog.\"\n    print(remove_length(test_str, 2))\n    \nif __name__ == \"__main__\":\n    main()",
        "test": "assert     remove_length(\"\", 1) == \"\"",
        "num_ids": 5113,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # create a regex to search for the substrings\n    # substring[i:j]\n    # if substring[i:j] is found, return substring[i:j] and the index of the substring in the string. If substring[i:j] is not found, return None\n    # this is because the substrings can only have one letter\n    # for example, \n    # 'python' is a substring of 'python'\n    # but python[2] is not a substring of python[1]\n    # then python[2:6] is not a substring of python[2:6]\n",
        "test": "assert     occurance_substring('abcd', 'def') == None",
        "num_ids": 3299,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if not nums:\n        return False\n    s = set(nums)\n    if len(s) % 2:\n        return False\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2:\n            return False\n    return True\n",
        "test": "assert     odd_position([1, 2, 3, 4, 5]) == False",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if test_str == '':\n        return 0\n    vowels = 'aeiou'\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n",
        "test": "assert     count_vowels(\"ac\") == 1",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = set()\n    for i in arr: \n        if i not in s: \n            s.add(i) \n    return len(s)\n",
        "test": "assert     find_sum([]) == 0",
        "num_ids": 1200,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if (i == 0 or (i > 0 and list1[i] == list1[i - 1])):\n            list2.append(list1[i])\n    return list2\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 7482,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for item in list1:\n        if isinstance(item, list):\n            for i in item:\n                d[i] = d.get(i, 0) + 1\n    return d\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 3188,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    my_tuple = []\n    for element in test_list:\n        for i in combinations(element,2):\n            my_tuple.append(i)\n    return my_tuple\n",
        "test": "assert         find_combinations([]) == []",
        "num_ids": 3152,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    if n==2 : \n        return 2\n    d = 0 \n    q = n//2\n    while q>0 : \n        r = q \n        q = q -1 \n        while r>0: \n            if (r%2)==1: \n                d += 1 \n            r = r//2\n        if d == 2: \n            return d\n        d = 0 \n    return 0\n",
        "test": "assert     count_divisors(0) == 0",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    for i in range(0,len(arr)):\n        if (i%2 == 0):\n            res += arr[i]\n    return res\n",
        "test": "assert     odd_length_sum([]) == 0,'should be 0'",
        "num_ids": 1080,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    f = (6.0 / 255.0) * r + (7.0 / 255.0) * g + (8.0 / 255.0) * b\n    if f > 1.0:\n        f = 1.0\n    if f < 0.0:\n        f = 0.0\n    if f == 0.0:\n        return (0, 0, 0)\n    else:\n        return (int(f * 6.0 + 0.5), int(f * 6.0 + 0.5), int(f * 6.0 + 0.5))\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0), \"R, G, B are not 0\"",
        "num_ids": 2152,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Your code here\n    \n    mul = 1\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            mul *= list1[i]\n        else:\n            mul *= list1[i]\n    return mul\n",
        "test": "assert     mul_even_odd([1]) == 1",
        "num_ids": 2988,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = tuple(test_str)\n    return tuple_str\n",
        "test": "assert     tuple_str_int((1, 2, 3, 4)) == (1, 2, 3, 4)",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    return l\n",
        "test": "assert     right_insertion(a=[1,2,4], x=3) == 2",
        "num_ids": 2770,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # If the string is empty, it will return False.\n    if text == \"\":\n        return False\n    # If the string is not empty, it will return True\n    return re.search(r'^[a-zA-Z]+a', text)!= None or re.search(r'^[A-Za-z]+a', text)!= None or re.search(r'^[A-Za-z]+b', text)!= None or re.search(r'^[A-Za-z]+b', text)!= None\n",
        "test": "assert     text_match_three(\"abcdef\") == True",
        "num_ids": 6839,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n",
        "test": "assert     new_tuple(['5', '5', '5'], ['5', '5', '5']) == ('5', '5', '5')",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_position = True\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            if nums[i] % 2 == 0 and nums[i]!= nums[i - 1]:\n                even_position = False\n            else:\n                even_position = True\n    return even_position\n",
        "test": "assert     not even_position([1,3,5,7,9,10])",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tuple = test_tup\n    while type(test_tuple[0]) is tuple:\n        test_tuple = test_tuple[1:]\n    return test_tuple\n",
        "test": "assert     remove_nested([1,2,3]) == [1,2,3]",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "test": "assert     count_list([]) == 0",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    return n-1 if x >= arr[0] else n-2\n",
        "test": "assert     last(arr=[1, 3, 5, 7, 9, 12, 11], x=2) == 6",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)(?<!b)(?:[^a-zA-Z0-9])'\n    end_pattern = r'(?<=b)'\n    re_found = re.findall(pattern, text)\n    for string in re_found:\n        text = text.replace(string, end_pattern)\n    return text\ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    pattern = r'(?<=a)(?:[^a-zA-Z0-9])'\n    end_pattern = r'(?<=c)'\n    re_found = re.findall(pattern, text)\n    for string in re_found:\n        text = text.replace(string, end_pattern)\n    return text\n",
        "test": "assert     text_starta_endb('abcdef')=='abcdef'",
        "num_ids": 6843,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n",
        "test": "assert     return_sum({1: 10, 2: 20}) == 30, \"return_sum should return a 30\"",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd_sum = 0\n    for i in range(n, n+1):\n        if i % 2 == 0:\n            odd_sum += i\n    return odd_sum\n",
        "test": "assert     sum_odd(0) == 0",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for element in arr:\n        total = total + element\n    return total\n",
        "test": "assert     _sum([]) == 0",
        "num_ids": 564,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    t = n>>d & 0xF\n    n = (n & 0xF) | (t<<(d&(-d)))\n    return n\n",
        "test": "assert     left_rotate(3,5) == 3, \"Expected to be 3\"",
        "num_ids": 1675,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text\n",
        "test": "assert     remove_all_spaces(\"\") == \"\"",
        "num_ids": 891,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    def sum_equal(x,y,z):\n        if(x+y+z==0):\n            return 0\n        if(x+y+z==x+y+z):\n            return 1\n        if(x+y+z==x+z+y+z):\n            return 2\n        if(x+y+z==x-y-z):\n            return 3\n        if(x+y+z==x*y*z):\n            return 4\n    x=x+y\n    y=y+z\n    z=z+x+y\n    if(x>y):\n        if(z>x):\n            if(z==x+y):\n                return sum_equal(x,y,z)\n            elif(z==x+y+z):\n                return sum_equal(x,y,z)\n            elif(z==x-y-z):\n                return sum_equal(x,y,z)\n            elif(z==x*y*z):\n                return sum_equal(x,y,z)\n            else:\n                return 0\n        elif(z>x+y):\n            if(z==x+y+z):\n                return sum_equal(x,y,z)\n            elif(z==x+y*z):\n                return sum_equal(x,y,z)\n            elif(z==x-y-z):\n                return sum_equal(x,y,z)\n            elif(z==x*y*z):\n                return sum_equal(x,y,z)\n            else:\n                return 0\n        else:\n            return 0\n    elif(x<y):\n        if(z>x):\n            if(z==x+y):\n                return sum_equal(x,y,z)\n            elif(z==x+y+z):\n                return sum_equal(x,y,z)\n            elif(z==x-y-z):\n                return sum_equal(x,y,z)\n            elif(z==x*y*z):\n                return sum_equal(x,y,z)\n            else:\n                return 0\n        elif(z>x+y):\n            if(z==x+y*z):\n                return sum_equal(x,y,z)\n            elif(z==x+y*z):\n                return sum_equal(x,y,z)\n            elif(z==x-y-z):\n                return sum_equal(x,y,z)\n            elif(z==x*y*z):\n                return sum_equal(x,y,z)\n            else:\n                return 0\n        else:\n            return 0\n    elif(x==y):\n        return sum_equal(x,y,z)\n    else:\n        return 0\n",
        "test": "assert test_three_equal(4,1,4) == 1",
        "num_ids": 1450,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                count += 1\n                break\n    return count\n    ",
        "test": "assert     count_rotation([1,2,3,4,5]) == 0, 'False'",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == n):\n        return True\n    elif (n % 2 == 0):\n        return False\n    else :\n        i = 3\n        while (i * i <= n):\n            if (n % i == 0):\n                return False\n            i += 2\n        return True\n",
        "test": "assert     is_perfect_square(1) == True",
        "num_ids": 2291,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    l = [i for i in arr if i % 2 == 0]\n    \n    return l == []\n",
        "test": "assert     is_product_even([]) == True, 'test_is_product_even() should return True.'",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Your code here\n    highest_sum = []\n    for i in lists:\n        for j in i:\n            if j not in highest_sum:\n                highest_sum.append(j)\n    return highest_sum\n",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str == '':\n        return 0\n    \n    if test_str[0].isupper():\n        return 1\n    \n    return max(\n        max_run_uppercase(test_str[1:]),\n        max_run_uppercase(test_str[0].upper() + test_str[1:])\n    )\n",
        "test": "assert     max_run_uppercase(\"abcd\") == 1, \"Runs is not correct\"",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    counter = 0\n    for num in nums:\n        if num % 2!= 0:\n            counter += 1\n    return counter\n",
        "test": "assert     first_odd([1]) == 1",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 808,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    return True\n",
        "test": "assert     check_K( (1,2,3), 4) == False, \"Checking k is wrong.\"",
        "num_ids": 1104,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    temp_tup1 = test_tup1[0]\n    temp_tup2 = test_tup2[0]\n    if temp_tup1 < temp_tup2:\n        return False\n    elif temp_tup2 < temp_tup1:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_smaller((1,2,3),(4,5,6)) == False",
        "num_ids": 2019,
        "indeed": false
    }
]