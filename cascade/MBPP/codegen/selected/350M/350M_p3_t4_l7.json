[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Your code goes here...\n    for i in test_tup2:\n        if test_tup1[0] in test_tup2[1:]:\n            if test_tup2[0] in test_tup1[1:]:\n                return (test_tup1[0], test_tup2[0])\n",
        "test": "assert     similar_elements([1,2,3,4,5,6,7,8,9,10,11], [6,7,8]) == False",
        "num_ids": 456
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if input is an integer\n    if n < 2:\n        return False\n    # Check if input is an integer and if n is the\n    # sum of two divisors\n    if n == 2:\n        return True\n    # Check if input is not an integer and if n\n    # is the sum of two divisors\n    if n < 2 or n % 2 == 0:\n        return False\n    # Check if input is a multiple of both\n    # divisors\n    if n % 2 == 0:\n        return False\n    # Check if input is divisible by both\n    # divisors and n and if it is not a multiple\n    # of both\n    if n % 2 == 0 and n % 2!= 0:\n        return False\n    # Check if input is divisible by the\n    # divisors, n and if it is not a\n    # multiple of both\n    if n % 2 == 0 and n % 2 == 0:\n        return False\n    # Check if the square root of n\n    # is greater than 0\n    if n % 2 == 0 and n % 2!= 0:\n        if n ** 0.5 > 0:\n            return False\n    # Check if the square root of n\n    # is less than 0\n    if n % 2!= 0 and n % 2!= 0:\n        if n ** 0.5 < 0:\n            return False\n    # Check if the cube root of n\n    # is greater than 0\n    if n % 2!= 0 and n % 2!= 0:\n        if math.pow(n, 0.5) > 0:\n            return False\n    # Check if the cube root of n\n    # is less than 0\n    if n % 2!= 0 and n % 2!= 0:\n        if math.pow(n, 0.5) < 0:\n            return False\n    return True\n",
        "test": "assert     is_not_prime(123) == False",
        "num_ids": 600
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    output = []\n    while len(nums)>0:\n        val = hq.heappop(nums)\n        output.append(val)\n    return output[::-1]\n",
        "test": "assert ",
        "num_ids": 513
    },
    {
        "number": 6,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = str(x)\n    return len(x) == 1\n",
        "test": "assert     is_Power_Of_Two(2) == True, \"is_Power_Of_Two failed\"",
        "num_ids": 355
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #text = \"Hello world, Hello world, Hello world!\"\n    text = re.sub(\"\\s+\", \"\", text)\n    return text.split(\" \")\n",
        "test": "assert     find_char_long(\"The quick brown fox jumps over the lazy dog\")!= \"The quick brown fox jumps over the lazy dog\"",
        "num_ids": 506
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n",
        "test": "assert     square_nums([1,2,3,4,5]) == [1,4,9,16,25]",
        "num_ids": 378
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #find all the rotations of a string \n    rotations = 0 \n    for i in range(len(str)-1): \n        rotations += str.count(str[i]) \n        \n    #print(rotations)\n    return rotations \n",
        "test": "assert     (find_Rotations(\"abc\") == 2)",
        "num_ids": 409
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch)!= -1: \n        s = s.replace(ch,\"\") \n        return s \n    else: \n        return s \n",
        "test": "assert     remove_Occ(\"n\", \"i\") == \"n\"",
        "num_ids": 1881
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for i in range(N):\n        current_sum = 0\n        for j in range(N):\n            current_sum += M[j][i]\n        temp = [M[j][i] for j in range(N)]\n        for j in range(N):\n            temp[i] = M[j][i]\n            M[j][i] = current_sum\n        for j in range(N-1, -1, -1):\n            M[j][i] = temp[j]\n    return M\n",
        "test": "assert     sort_matrix([[3,2,1],[6,5,4]]) == [[3,2,1], [1,5,4], [6,4,3]]",
        "num_ids": 646
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = (b + l)/2\n    b = (h/2)\n    # print(a,b,h)\n    while a > 0 :\n        if (b**2) + (l**2) < (a**2) : \n            a = a/2\n        else :\n            b = b/2\n    return b * h * 3.14\n    # return \"Triangular Prism\"\n",
        "test": "assert     find_Volume(2,4,3) == 5.0",
        "num_ids": 235
    },
    {
        "number": 16,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for c in text:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            if text.lower().count(c) > text.lower().count('_'):\n                return False\n        else:\n            return False\n    return True\n",
        "test": "assert     text_lowercase_underscore('wet') == False",
        "num_ids": 442
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2 + 2 * a * (a + 1)\n",
        "test": "assert     square_perimeter(7) == 25",
        "num_ids": 94
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if string[i] == string[j]:\n                output.append(string[i])\n    return output\n",
        "test": "assert         (str_to_list('abc') == ['a', 'b', 'c'])",
        "num_ids": 273
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    a = arraynums\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] == a[j]:\n                return True\n    return False\n",
        "test": "assert     test_duplicate([1,1,1,2,3,3]) == True",
        "num_ids": 436
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x >= 5 and x <= 10):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(3) == False, 'The function is_woodall failed.'",
        "num_ids": 256
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    if rev == 0:\n        return False\n    return True\n",
        "test": "assert     rev(0) == 0",
        "num_ids": 235
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if arr == []:\n        return 0\n    max_num = arr[0]\n    for i in range(1,len(arr)) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\n",
        "test": "assert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9",
        "num_ids": 563
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # TODO: write your code here\n    # copy your code here\n    return not(x==y)\n",
        "test": "assert     opposite_Signs(7,10) == True",
        "num_ids": 164
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*(3*n-1))/2\n",
        "test": "assert         is_octagonal(1) == True",
        "num_ids": 212
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 1\n    if s[0]!= s[1]:\n        return 0\n    c = 1\n    if len(s) % 2:\n        return 0\n    for i in range(len(s) - 1):\n        if s[i]!= s[i + 1]:\n            return 0\n        c += 1\n    return c\ndef find_index(s, x, l, h):\n    '''\n    Write a python function to find the index of the first occurrence of x in the string.\n    '''\n    if l > h:\n        return -1\n    if l == h:\n        return -1\n    mid = (l + h) // 2\n    if s[mid] == x:\n        return mid\n    if s[mid] < x:\n        return find_index(s, x, mid + 1, h)\n    return find_index(s, x, l, mid - 1)\n",
        "test": "assert     count_Substrings(\"1\") == 1",
        "num_ids": 480
    },
    {
        "number": 62,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    minimum = xs[0]\n    for x in xs:\n        if x < minimum:\n            minimum = x\n    return minimum\n",
        "test": "assert smallest_num([1]) == 1",
        "num_ids": 308
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in test_list:\n        for j in range(0,i+1):\n            diff = abs(j-i)\n            if diff > max_difference:\n                max_difference = diff\n    print(\"Maximum difference between available pairs is %d\" %(max_difference))\n    return max_difference\n",
        "test": "assert     max_difference([7,5,3,2,1]) == 4, 'Test fail'",
        "num_ids": 345
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda k:k[1])\n",
        "test": "assert ",
        "num_ids": 341
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for element in data_list:\n        sum += element\n    return sum\n",
        "test": "assert     recursive_list_sum( [1,2,3,4,5,6,7,8,9,0,0,0] ) == 45",
        "num_ids": 2239
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    n = 0\n    for i in list:\n        if i > 0:\n            n += 1\n    return n\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 374
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    return bell_number(n - 1) + bell_number(n - 2)\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 243
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # naive soln\n    if len(A) >= 2:\n        if np.diff(A).any() == 0:\n            return True\n        else:\n            return False\n    else:\n        return True\n    \n",
        "test": "assert     is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == False, \"Arrays must be of the same type.\"",
        "num_ids": 2408
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1], []), \"is_sublist() should be called with an empty list\"",
        "num_ids": 2323
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #Your code here\n    try:\n        #using a for loop\n        for i in range(len(Input)):\n            for j in range(i+1,len(Input)):\n                if(Input[i]==Input[j]):\n                    return False\n        return True\n    except:\n        return False\n        \nprint(find_equal_tuple([(1,2),(3,4),(5,6)])) #should return true\nprint(find_equal_tuple([(1,2),(3,4),(5,6),(8,9)])) #should return false\nprint(find_equal_tuple([(1,2),(3,4),(5,6),(8,9),(7,8)])) #should return true\nprint(find_equal_tuple([(1,2),(3,4),(5,6),(8,9),(7,8),(9,10)])) #should return false\n",
        "test": "assert     find_equal_tuple([(1,2),(1,3),(1,3)]) == (True, True, True)",
        "num_ids": 2449
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Removes 1 element at a time\n    for x in range(1, len(nums)):\n        # Switches every element\n        for y in range(len(nums) - x - 1):\n            # Switches the values\n            if nums[y] > nums[y + 1]:\n                # Swits the values\n                nums[y], nums[y + 1] = nums[y + 1], nums[y]\n    return nums\n",
        "test": "assert     comb_sort([5,5,5]) == [5,5,5]",
        "num_ids": 436
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return False\n    if dif_Square(n // 2) == False:\n        return False\n    if dif_Square(n - 1) == False:\n        return False\n    return True\n",
        "test": "assert ",
        "num_ids": 244
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    from itertools import product\n    possible_patterns = product(colors, patterns)\n    return all(any(i in j for i in possible_patterns) for j in possible_patterns)\n",
        "test": "assert     is_samepatterns([0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1]) == False, \"1\"",
        "num_ids": 630
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Define a function to find tuples which have all elements divisible by k from the given list of tuples.\n    # Take a list of tuples and an integer k\n    def find_tuples(test_list, k):\n        '''\n        Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n        '''\n        # Sort the list of tuples in ascending order by their first element\n        test_list.sort()\n        \n        # Create an empty set\n        tuples = set()\n        \n        # While there are not elements divisible by the k\n        while len(test_list) > 0:\n            # Take the first element as the first element in the list\n            element = test_list.pop(0)\n            \n            # If the element is a multiple of k\n            if element % k == 0:\n                # Add the element to the set\n                tuples.add(tuple(element))\n                \n                # Move the remaining elements to the next iteration\n                test_list.extend(test_list.pop(0))\n        \n        # Return the list of tuples in sorted order\n        return list(tuples)\n    \n    return find_tuples(test_list, K)\n",
        "test": "assert     find_tuples([(1, 2), (2, 4), (4, 8)], 9) == []",
        "num_ids": 711
    },
    {
        "number": 77,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    is_divisible = False\n    for i in range(1, n):\n        if n % i == 0:\n            is_divisible = True\n            break\n    return is_divisible\n",
        "test": "assert     is_Diff(11) == True",
        "num_ids": 263
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) > 0:\n        if len(s) % 2!= 0:\n            return False\n        else:\n            return True\n    return False\n",
        "test": "assert     word_len(\"hi\") == 1, \"word_len('hi')\"",
        "num_ids": 231
    },
    {
        "number": 80,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    pass\n",
        "test": "assert     tetrahedral_number(3) == 2",
        "num_ids": 260
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #We create a volume of a sphere, you can try different values of the radius.\n    return 4*math.pi*(r**3)\n",
        "test": "assert     volume_sphere(0) == 0.0",
        "num_ids": 241
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = []\n    for char in strr:\n        char_list.append(ord(char))\n    char_mod = 0\n    for i in range(len(char_list)):\n        if char_mod == 0:\n            char_mod = char_mod + char_list[i]\n        elif char_mod == char_list[i]:\n            pass\n        else:\n            char_mod = char_mod - char_list[i]\n    return char_mod\n",
        "test": "assert     get_Char('test') == 'o'",
        "num_ids": 501
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n*sequence(n-1)\n",
        "test": "assert sequence(1) == 1, \"sequence(1) is wrong\"",
        "num_ids": 2228
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (math.pi*r**2)*6\n",
        "test": "assert ",
        "num_ids": 138
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n > 9:\n        return -1\n    return (n*n)-((n*n)-1)\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 211
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1.copy()\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n",
        "test": "assert     merge_dictionaries_three({'a':1, 'b':2, 'c':3, 'd':4,'e':5}) == {'a':1,'b':2,'c':3,'d':4,'e':5}",
        "num_ids": 597
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # initializing the dictionary and list\n    d = collections.Counter(list1)\n    # looping through the dictionary and storing the element in the list\n    for key, value in d.items():\n        print(key, value)\n    # returning the dictionary\n    return d\n",
        "test": "assert     freq_count([1,1,2,2,2,2,3,3,3,2,2]) == {1:2, 2:3, 3:1}",
        "num_ids": 2351
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N < 0:\n        return -1\n    else:\n        return closest_num(N - 1) + 1\n",
        "test": "assert closest_num(10) == 10",
        "num_ids": 245
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #Write your code here\n    if list1:\n        return len(max(list1, key=len))\n    else:\n        return 0\n",
        "test": "assert     len_log(['', '', '', '', '', '', '']) == 0",
        "num_ids": 255
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    if sub_str_len > len(str1):\n        return False\n    else:\n        indices = []\n        for i in range(0, len(str1)-sub_str_len+1):\n            if str1[i:i+sub_str_len] == sub_str:\n                indices.append(i)\n                if len(indices) == len(str1):\n                    return True\n        return False\n",
        "test": "assert     find_substring(\"Input\", [\"Input\", \"Input\"]) == False",
        "num_ids": 628
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n%2!= 0\n",
        "test": "assert     is_undulating(2) == False",
        "num_ids": 243
    },
    {
        "number": 93,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    else:\n        return a**b\n    \n    \ndef gcd(a,b):\n    '''\n    Write a function to find the greatest common denominator between two integers.\n    '''\n    \n    if b==0:\n        return a\n    elif b==1:\n        return 1\n    else:\n        return gcd(b,a%b)\n        \n    \ndef is_prime(n):\n    '''\n    Write a function that returns True if a number is prime.\n    '''\n    \n    if n<2:\n        return False\n        \n    if n==2:\n        return True\n    \n    if n%2==0 or n%3==0:\n        return False\n        \n    for i in range(5,int(math.sqrt(n)),2):\n        if n%i==0:\n            return False\n            \n    return True\n",
        "test": "assert     power(10,0) == 1",
        "num_ids": 303
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_val = test_list[0][0]\n    second_val = test_list[0][1]\n    for item in test_list:\n        if item[1] < second_val:\n            second_val = item[1]\n            minimum_val = item[0]\n    return minimum_val\n",
        "test": "assert     index_minimum([(1,2),(1,3),(3,4)]) == (1,3)",
        "num_ids": 164
    },
    {
        "number": 95,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # create a loop to iterate over all the lists\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i][1] < lst[j][1]:\n                # swap values\n                lst[i], lst[j] = lst[j], lst[i]\n    # return the length of the list\n    return len(lst)\n",
        "test": "assert     Find_Min_Length([[1, 2, 3], [4, 5, 6]]) == 2",
        "num_ids": 258
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            div_count += 1\n    return div_count\n",
        "test": "assert     divisor(1) == 1",
        "num_ids": 252
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # split list into flat lists\n    list1_flat = list(map(lambda x: list(map(lambda y: list(map(lambda z: float(z), y)), x)), list1))\n    # flatten list\n    list1_flat = list(map(lambda x: list(map(list, x)), list1_flat))\n    # sort and get unique list of frequency of each element\n    list1_unique = list(set([item for sublist in list1_flat for item in sublist]))\n    return dict(zip(list1_unique, list1_flat))\n",
        "test": "assert     frequency_lists([]) == {}",
        "num_ids": 747
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    l = len(numbers)\n    result = 1\n    for i in range(1,l):\n        result *= i\n    return result\n",
        "test": "assert     multiply_num([1, 2, 3, 4]) == 6, 'It should return 6.'",
        "num_ids": 282
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n <= 0: return ''\n    binary = bin(n)[2:]\n    return binary\n",
        "test": "assert     decimal_to_binary(0) == '0b0'",
        "num_ids": 249
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    if num < 2:\n        return num\n    \n    left = num - 1\n    right = num - 2\n    \n    while left >= 0 and right < len(num) and num[left] == num[right]:\n        left -= 1\n        right += 1\n    \n    return right\n",
        "test": "assert     next_smallest_palindrome(22) == 3",
        "num_ids": 268
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Base case, if kth element is missing\n    if (k > len(arr)):\n        return None\n    # Find the index of the kth element\n    return arr[k - 1]\n",
        "test": "assert     kth_element([1, 3, 5, 6], 4) == 5, 'Test 4'",
        "num_ids": 206
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.isupper():\n        word = word.lower()\n    elif word.islower():\n        word = word.upper()\n    elif word.isnumeric():\n        word = word.zfill(3)\n    else:\n        word = word.title()\n    return word\n",
        "test": "assert     snake_to_camel(\"Hello\") == \"Hello\"",
        "num_ids": 274
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        print(m, end=' ')\n        return 1\n    else:\n        print(m, end=' ')\n        return m * eulerian_num(n - 1, m)\n",
        "test": "assert     eulerian_num(1, 1) == 1",
        "num_ids": 2350
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # write your code here\n    if len(input_list) < 2:\n        return input_list\n    else:\n        for i in range(len(input_list)):\n            for j in range(len(input_list[i])):\n                if input_list[i][j] == \" \":\n                    input_list[i].pop(j)\n                else:\n                    break\n        output_list = sort_sublists(input_list)\n        return output_list\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 465
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # initialize an empty dictionary to store \n    # the count of True booleans\n    d = {}\n    # iterate through the list\n    # and if the boolean \n    # is 'True' append to the dictionary\n    for item in lst:\n        if item:\n            d[item] = d.get(item,0) + 1\n",
        "test": "assert     count([1, 0, 0, 0, 0]) == 5",
        "num_ids": 235
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        test_tup[i] = test_list[i]\n    return test_tup\n",
        "test": "assert     add_lists([1,2,3], (1,2)) == [1,2,3], 'Error: append a tuple'",
        "num_ids": 537
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    #Initiate a heap\n    #Initiate a new list\n    #add items in the heap\n    #if the elements in the list are not equal, the heapify\n    #if the elements are equal, replace one with the next bigger number\n    #if the elements are not equal, replace one with the next smaller number\n    #if the heapify is successful, return the merged list\n    #if heapify is not successful, return the original list\n    \n    #create a new list\n    #append the first item\n    #append the second item\n    #append the third item\n    #add the element in the new list\n    \n    #check if the items are equal\n    #if the item is not equal, replace the smaller number with the next bigger number\n    #if the item is equal, replace the smallest number with the next smaller number\n    #if not equal, replace the next smaller number with the next bigger number\n    #if equal, return the merged list\n    #else return the original list\n    \n    #create a new list\n    #append the second item\n    #append the third item\n    #append the element in the new list\n    #add the element in the new list\n    \n    #check if the items are equal\n    #if the item is not equal, replace the smaller number with the next bigger number\n    #if the item is equal, replace the smallest number with the next smaller number\n    #if not equal, replace the next smaller number with the next bigger number\n    #if equal, return the merged list\n    #else return the original list\n    \n    #create a new list\n    #append the second item\n    #append the element in the new list\n    #add the element in the new list\n    \n    #create a new list\n    #append the third item\n    #append the element in the new list\n    #append the element in the new list\n    \n    #check if the items are equal\n    #if the item is not equal, replace the smallest number with the next bigger number\n    #if the item is equal, replace the next smaller number with the next bigger number\n    #if not equal, replace the next smaller number with the next bigger number\n    #if equal, return the merged list\n    #else return the original list\n",
        "test": "assert     merge_sorted_list([1, 2, 3, 4, 5, 6], [6, 7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, None, None, None, None]",
        "num_ids": 1292
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n%2 == 0: \n        return odd_Equivalent(s,n//2)\n    else: \n        return odd_Equivalent(s,n-1)\n",
        "test": "assert odd_Equivalent(11, 1) == 1",
        "num_ids": 225
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    return [e for e in nestedlist[0] if e in nestedlist[1]]\n",
        "test": "assert     common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9], [10,11,12]]) == []",
        "num_ids": 461
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('') == False",
        "num_ids": 219
    },
    {
        "number": 115,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        for j in i:\n            if j == '':\n                empty = False\n                break\n    return empty\n",
        "test": "assert     empty_dit([]) == True",
        "num_ids": 266
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(x * y for x, y in zip(nums, nums[1:]))\n",
        "test": "assert     tuple_to_int([-1, -2, -3, -4, -5]) == -1",
        "num_ids": 313
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # create empty list and copy each element of list to the variable\n    list_of_floats = []\n    for element in test_list:\n        list_of_floats.append(float(element))\n    # return list_of_floats\n    return list_of_floats\n",
        "test": "assert     list_to_float([[1, 2, 3, 4], [5, 6, 7], [8, 9, 10, 11, 12]]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0]",
        "num_ids": 968
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_string = string.split(\" \")\n    return list_of_string\n",
        "test": "assert     string_to_list('one two three') == ['o', 'e', 'n', 't','s', 'i', 'h', 'l', 'o', 'r', 't', 'i']",
        "num_ids": 252
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Your code here\n    # nested if-else construct \n    if len(arr) == 0:\n        return -1\n    else:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            index = arr[1]\n            for i in range(arr[0] + 1, len(arr)):\n                if arr[i] == index:\n                    return arr[i]\n            return -1\n",
        "test": "assert     search([3,4,1,2]) == -1",
        "num_ids": 2416
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if not list1:\n        return 0\n    max_product = list1[0][0]*list1[1][1]\n    for i in range(len(list1)-1):\n        max_product = max(max_product,list1[i][0]*list1[i+1][1])\n    return max_product\n",
        "test": "assert     max_product_tuple([(1,2),(3,4),(5,6)]), 5",
        "num_ids": 413
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Memoization approach\n    # Since we use two arrays to store all the previous sums,\n    # we need to use a dictionary to store the previous sums.\n    # So, in the last loop, we need to calculate sums for all numbers from 1 to limit.\n    # Whenever we are adding the new number, we need to check if it's already in the dictionary.\n    # If it's not, we need to keep adding it.\n    # Otherwise we need to calculate the sum by adding it with that previous sum and keeping it.\n    # Then we need to return the sum.\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    \n    amicable_numbers_sum = [0 for _ in range(limit+1)]\n    amicable_numbers_sum[1] = 1\n    \n    # Memoization approach\n    # In the following loop, we calculate sums for all numbers from 1 to limit.\n    # O(n)\n    for i in range(2, limit+1):\n        # Here, we store each new number's previous sum.\n        # O(n)\n        if i % 2 == 0:\n            # This is because it's odd number\n            # O(1)\n            amicable_numbers_sum[i] = amicable_numbers_sum[i // 2] + amicable_numbers_sum[i // 2 - 1]\n        # This is because it's even number\n        # O(1)\n        else:\n            amicable_numbers_sum[i] = amicable_numbers_sum[i // 2]\n    \n    # Memoization approach\n    # In the following loop, we calculate the sums for all numbers from 1 to limit.\n    # O(n)\n    for i in range(2, limit+1):\n        # Here, we keep checking each new number's previous sum with that previous sum.\n        # O(n)\n        if amicable_numbers_sum[i] % 2 == 1:\n            # This is because it's odd number\n            # O(1)\n            amicable_numbers_sum[i] += amicable_numbers_sum[i // 2]\n        # This is because it's even number\n        # O(1)\n        else:\n            amicable_numbers_sum[i] += amicable_numbers_sum[i // 2]\n    \n    # Memoization approach\n    # In the following loop, we calculate the sums for all numbers from 1 to limit.\n    # O(n)\n    for i in range(2, limit+1):\n        # Here, we keep checking each new number's previous sum with that previous sum.\n        # O(n)\n        amicable_numbers_sum[i] += amicable_numbers_sum[i] // 2\n    \n    return amicable_numbers_sum[limit]\n",
        "test": "assert     amicable_numbers_sum(10) == 9",
        "num_ids": 1043
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    c = a + b\n",
        "test": "assert     angle_complex(a,b) == 0",
        "num_ids": 191
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    if len(string) < 2:\n        return 0\n    \n    return max(find_length(string[0:len(string) - 1]), find_length(string[1:]))\n    \ndef remove_0(string): \n    '''\n    Write a function that removes all 0s from a given binary string.\n    '''\n    \n    if len(string) == 0:\n        return []\n    else:\n        return string[1:]\n    \ndef remove_1(string): \n    '''\n    Write a function that removes all 1s from a given binary string.\n    '''\n    \n    if len(string) == 0:\n        return []\n    else:\n        return string[0:-1]\n    \ndef count_digits(string): \n    '''\n    Write a function that counts the number of 0's in a given binary string.\n    '''\n    \n    if len(string) == 0:\n        return 0\n    else:\n        return sum(char == '0' for char in string)\n    \ndef get_count_binary_strings(string): \n    '''\n    Write a function that counts the number of 0's in all the given binary strings.\n    '''\n    \n    if len(string) == 0:\n        return 0\n    \n    if string[0] == '0':\n        return string.count('0')\n    else:\n        return string.count('1')\n    \ndef count_ones_and_zeros(string): \n    '''\n    Write a function that counts the number of 1's in a given binary string.\n    '''\n    \n    if len(string) == 0:\n        return 0\n    \n    if string[0] == '1':\n        return string.count('1')\n    else:\n        return string.count('0')\n",
        "test": "assert     find_length('111111111') == 0",
        "num_ids": 227
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 0\n    while(b!= 0):\n        c = b % 10\n        b = b // 10\n    return c\n",
        "test": "assert ",
        "num_ids": 197
    },
    {
        "number": 127,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(10, 5) == 50",
        "num_ids": 197
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_word = [word for word in str.split() if len(word)>=n]\n    return''.join(long_word)\n    \n",
        "test": "assert     long_words(4, ['a', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab']) == ['ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab']",
        "num_ids": 679
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Write your code here\n    if len(my_matrix) == len(my_matrix[0]) == 0:\n        return True\n    elif len(my_matrix) == 1:\n        if my_matrix[0][0] == 0:\n            return True\n        elif my_matrix[0][0] == 1:\n            return False\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] == 0:\n                return False\n    return True\n",
        "test": "assert     magic_square_test([[0,0,0,0]]), 'The matrix is not a magic square.'",
        "num_ids": 555
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counter = defaultdict(int)\n    for i in nums:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    for i in counter.values():\n        if i > 1:\n            return i\n    return 0\n    pass\ndef permutations(nums):\n    '''\n    Write a function to generate all permutations of a given list.\n    '''\n    from itertools import permutations\n    for x in permutations(nums):\n        yield list(x)\n",
        "test": "assert     max_occurrences([2, 2, 1, 1]) == 2",
        "num_ids": 582
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = 'aeiou'\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result += char.lower()\n        else:\n            result += char\n    return result\n",
        "test": "assert     reverse_vowels(\"\") == \"\"",
        "num_ids": 359
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"tuple of %d elements\" % len(tup1)\n",
        "test": "assert     (type(tup1) is tuple)",
        "num_ids": 192
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum -= n\n    return sum\n",
        "test": "assert     sum_negativenum([-1,2,-3,-4,-5]) == -9",
        "num_ids": 340
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((n*(n+1))/6)\n",
        "test": "assert hexagonal_num(0)==0",
        "num_ids": 325
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero = 0\n    num_nonzero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            num_zero += 1\n        else:\n            num_nonzero += 1\n    \n    return num_zero/len(nums) if len(nums)!= 0 else 0\n",
        "test": "assert zero_count([]) == 0.0",
        "num_ids": 451
    },
    {
        "number": 138,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    for i in str(n):\n        sum += int(i)**2\n    if sum == n:\n        return True\n    else:\n        return False\n",
        "test": "assert    is_Sum_Of_Powers_Of_Two(16)==False",
        "num_ids": 197
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n",
        "test": "assert     circle_circumference(1) == 3",
        "num_ids": 154
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result\n    \ndef unique_element(test_list):\n    '''\n    Write a function that returns the unique element from the list of numbers.\n    '''\n    temp = []\n    for num in test_list:\n        if num not in temp:\n            temp.append(num)\n    return temp[0]\n",
        "test": "assert     extract_singly([[1, 2, 3], [4, 5, 6, 7], [8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 474
    },
    {
        "number": 141,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    i = 0\n    j = n-1\n",
        "test": "assert     [0, 0, 0, 0, 0, 0, 0] == sorted([0, 0, 0, 0, 0, 0, 0])",
        "num_ids": 677
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and list3[i]==list3[j]:\n                count += 1\n    return count\n",
        "test": "assert     count_samepair([1,2,3],[1,2,3,4], [2,2,3])==3, \"count_samepair fail\"",
        "num_ids": 401
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    found_index = 0\n    for index,value in enumerate(Input):\n        if value == '#':\n            found_index = index\n    return found_index\n",
        "test": "assert     find_lists(('a', 'b')) == 0",
        "num_ids": 293
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    length = len(arr)\n    i = 0\n    j = 0\n    max_diff = -1\n    while i<length and j<length:\n        if arr[i] < arr[j]:\n            max_diff = arr[i]\n            i += 1\n        else:\n            max_diff = arr[j]\n            j += 1\n    return max_diff\n",
        "test": "assert ",
        "num_ids": 214
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(a, b + 1):\n        for j in range(a, b + 1):\n            if(i + j == n):\n                return (i, j)\n    return None\n",
        "test": "assert     find_solution(1, 0, 3) == None, \"find_solution: Incorrect result\"",
        "num_ids": 620
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "test": "assert         remove_elements([], []) == []",
        "num_ids": 350
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (n-i)\n        \n    return sum\n",
        "test": "assert sum_series(1) == 0",
        "num_ids": 190
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    # given the parameters (s, l), calculate the area of the polygon\n    area = pi * (s * (s-l)/2)\n    \n    return area\n",
        "test": "assert     area_polygon(1, 1) == 0",
        "num_ids": 221
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    # Determine the divisors \n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(int(n/i))\n    # Compare the two numbers \n    # the first 2 numbers are the same and it's not divisors \n    # if sum of divisors is even then it's not divisors\n    # if it's not divisors then it's not divisors\n    return (not(sum(divisors) % 2) and not(sum(divisors) in divisors))\n",
        "test": "assert     div_sum(0) == 0",
        "num_ids": 383
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet_dict = dict([(x.upper(), 1) for x in list(string.ascii_lowercase)])\n    result = 0\n    for char in str1:\n        if char in alphabet_dict:\n            result += alphabet_dict[char]\n    return result\n",
        "test": "assert     count_char_position('abbbcdba') == 2, \"Should return 2\"",
        "num_ids": 370
    },
    {
        "number": 166,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    odd = 0\n    for i in A:\n        if (i & 1) == 0:\n            even += 1\n        else:\n            odd += 1\n    return(int(even))\n",
        "test": "assert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5",
        "num_ids": 409
    },
    {
        "number": 167,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    k = 0\n    while n!= 1: \n        if n%2 == 0:\n            n = n/2\n            k = k + 1\n        else: \n            n = n*3\n            k = k + 1\n    return k\n",
        "test": "assert     next_power_of_2(4) == 2",
        "num_ids": 581
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if a==[]:\n        return 0\n    else:\n        x = x.lower()\n        count = 0\n        for i in a:\n            if x == i:\n                count +=1\n        return count\n",
        "test": "assert     frequency(2, [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,",
        "num_ids": 3843
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(m, n):\n        sum = sum + list1[i]\n    return sum\n",
        "test": "assert     sum_range_list([1,2,3,4,5], 0, 4) == 10",
        "num_ids": 344
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = a + 4*a\n    return l\n",
        "test": "assert     perimeter_pentagon(0) == 0",
        "num_ids": 360
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    def count_occurance(s):\n        letters = {}\n        for letter in s:\n            if letter in letters:\n                letters[letter] += 1\n            else:\n                letters[letter] = 1\n        occurance = 0\n        for letter, count in letters.items():\n            if count == 1:\n                occurance += 1\n        return occurance\n    return count_occurance(s)\n",
        "test": "assert     count_occurance(\"\") == 0",
        "num_ids": 240
    },
    {
        "number": 222,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    count = 0\n    for el in test_tuple:\n        if type(el)!= type(1):\n            count += 1\n    if count == len(test_tuple):\n        return True\n    else:\n        return False\n",
        "test": "assert    check_type('Hello')",
        "num_ids": 916
    },
    {
        "number": 223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return True\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return False\n",
        "test": "assert ",
        "num_ids": 199
    },
    {
        "number": 224,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    '''\n    Sample Input: n = 3\n    Expected Output: 2\n    Sample Input: n = 3\n    Expected Output: 1\n    '''\n    return bin(n).count('1')\n",
        "test": "assert     count_Set_Bits(1) == 1",
        "num_ids": 242
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    def odd_values(str):\n        x = []\n        for i in str:\n            if i % 2 == 1:\n                x.append(i)\n        return x\n    str = str.lower()\n    odd_values_list = odd_values(str)\n    print(odd_values_list)\n",
        "test": "assert     odd_values_string
        "num_ids": 2261
    },
    {
        "number": 227,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a == b == c:\n        return a \n    if a < b < c:\n        return a\n    if b < a < c:\n        return b\n    if c < a < b:\n        return c \n    else:\n        return None\n",
        "test": "assert     min_of_three(1, 2, 3) == 1",
        "num_ids": 336
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l < r:\n        return False\n    else:\n        return all([x & 1 for x in range(n)])\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(15,0,17) == False",
        "num_ids": 462
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    return arr\n",
        "test": "assert     re_arrange_array([1, 2, 3], 0) == [1, 2, 3], 'Your test() function is not correct.'",
        "num_ids": 645
    },
    {
        "number": 230,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1\n",
        "test": "assert     replace_blank(\"Hello\",\" \") == \"Hello\"",
        "num_ids": 162
    },
    {
        "number": 232,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    mylist=[]\n    for i in range(n):\n        for j in range(len(list1)):\n            if list1[j]==i:\n                mylist.append(list1[j])\n                break\n    return mylist\n",
        "test": "assert     larg_nnum([2,3,4,5,6,7,8,9,10],1) == []",
        "num_ids": 355
    },
    {
        "number": 233,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return h*(r**2)*(1 + r/2)\n",
        "test": "assert     lateralsuface_cylinder(0.5,0.0) == 0.0",
        "num_ids": 244
    },
    {
        "number": 234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l*l*l\n    print(\"The volume of the cube is \", volume)\n",
        "test": "assert     volume_cube(-3) == 0.0",
        "num_ids": 125
    },
    {
        "number": 235,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bit = 0\n    while n > 0: \n        if (n & 1) == 0: \n            n >>= 1\n            bit += 1\n        else: \n            n >>= 1\n            bit -= 1\n    return bit \n",
        "test": "assert     even_bit_set_number(9) == False",
        "num_ids": 324
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    dict = {}\n    for t in test_list:\n        dict[t[0]] = t[1]\n    return dict\n",
        "test": "assert     check_occurences([(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (3, 4)]) == {(1, 1): 1, (1, 2): 2, (1, 3): 3, (1, 4): 1, (1, 5): 2, (2, 3): 3, (3, 4): 1}",
        "num_ids": 4392
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n=0\n    for i in range(0,len(str)-1):\n        if (str[i]==str[i+1]):\n            n+=1\n    return n\n",
        "test": "assert     number_of_substrings(\"a\") == 0",
        "num_ids": 276
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import math\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if j + i >= m:\n                break\n            else:\n                if m%i!= 0:\n                    count += 1\n    return count\n",
        "test": "assert     get_total_number_of_sequences(-1,0) == 0, \"get_total_number_of_sequences failed\"",
        "num_ids": 2300
    },
    {
        "number": 240,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    return list1\n",
        "test": "assert     replace_list([1, 2, 3], [3, 4, 5]) == [3, 4, 5], \"The replace_list function should return a new list of elements\"",
        "num_ids": 749
    },
    {
        "number": 242,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert     count_charac('a') == 1",
        "num_ids": 262
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    p = math.sqrt(N)\n    for i in range(N):\n        if N//p**2 == int(N/p**2) and N%p==0:\n            return N\n    return False\n    \n",
        "test": "assert     next_Perfect_Square(1) == 1",
        "num_ids": 334
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # find start and end of bitonic subsequences\n    start, end = 0, 0\n    for i in range(1, len(arr)): \n        # if the next element is greater than the previous element,\n        # then the current element is a bitonic subsequence\n        # i.e. start element = next element\n        # prev element = current element\n        # if prev element is less than next element, then it's a bitonic\n        if arr[i] > arr[i-1]:\n            # if i is greater than start, then we need to update start\n            # i is the current element, so we add 1 to start\n            # because start is 1 less than the current element\n            # i is not greater than the current element, and we need to add 1 to the current element\n            # so start is 1, so we have to subtract 1 from start\n            # since start is 1, we don't need to check the next element\n            # to see if we found the bitonic subsequence\n            start += 1\n            # if the current element is less than the prev element\n            # it's a bitonic, so we can skip to the next element\n            # and we can increase start by 1\n            if arr[i] < arr[i-1]:\n                start += 1\n                # if the next element is greater than the prev element,\n                # it's a bitonic, so we can skip to the next element\n                # since it's a bitonic, we can increase start by 1\n                # since it's a bitonic, we have to add 1 to start\n                # since start is 1, so we have to add 1 to the current element\n                # since start is 1, we don't need to check the next element\n                # to see if we found the bitonic subsequence\n                if arr[i] > arr[i-1]:\n                    start += 1\n    return start\n",
        "test": "assert ",
        "num_ids": 565
    },
    {
        "number": 246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return round(babylonian_squareroot_v2(number), 5)\n",
        "test": "assert     babylonian_squareroot(3) == (1.6666666666666666)",
        "num_ids": 319
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def findLPS(str):\n        '''\n        This function takes a string as input and find the longest palindromic subsequence in the string.\n        '''\n        if len(str) == 1:\n            return 1\n        if str[0]!= str[-1]:\n            return findLPS(str[1:])\n        else:\n            return 1 + findLPS(str[1:-1])\n    return findLPS(str)",
        "test": "assert ",
        "num_ids": 380
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # your code goes here\n    h=1\n    for i in range(2,n):\n        h=h+(1/i)\n    return h",
        "test": "assert         harmonic_sum(1) == 1",
        "num_ids": 245
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    l1 = len(array_nums1)\n    l2 = len(array_nums2)\n    i,j = 0,0\n    arr = []\n    while i<l1 and j<l2:\n        if array_nums1[i] == array_nums2[j]:\n            arr.append(array_nums1[i])\n            i+=1\n            j+=1\n        elif array_nums1[i]<array_nums2[j]:\n            i+=1\n        else:\n            j+=1\n    return arr\n    \ndef k_intersection(k,arr,size):\n    '''\n    Given an array of integers arr and an integer k, return an array of the first k integers in the array.\n    '''\n    i = 0\n    while i<size:\n        if i<k:\n            j = i\n            while j<size:\n                if arr[j] < arr[i]:\n                    arr[j],arr[i] = arr[i],arr[j]\n                j+=1\n            i+=1\n        else:\n            break\n    return arr\ndef main():\n    print(intersection_array([1,2,3,4,5], [2,3,5,7,8]))\n    print(k_intersection(2,[1,2,3,4,5],4))\n    print(k_intersection(3,[1,2,3,4,5],4))\n",
        "test": "assert     (intersection_array([], [])==[])",
        "num_ids": 478
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len(tup)-len(set(tup)-set(x))\n",
        "test": "assert     count_X(tuple('abc'), 'c') == 1",
        "num_ids": 356
    },
    {
        "number": 251,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #Your code here\n    \n    if len(list) == 0:\n        return None\n    else:\n        for i in range(len(list)):\n            if list[i] == element:\n                list.insert(i,element)\n                return list\n        return None\n    \n",
        "test": "assert     insert_element([4,5,6],6) == [4,5,6,6]",
        "num_ids": 688
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #If the value is a complex number\n    if isinstance(numbers,(complex,np.complex)) == True:\n        #Create the polar coordinates for the complex numbers.\n        r = numbers.real\n        i = numbers.imag\n        #Convert it to real and imaginary parts and return the angle.\n        return [r,i]\n    #If the value is an int or float\n    if isinstance(numbers,(int,float)) == True:\n        #Create the polar coordinates for the int or float values\n        r = round(numbers,2)\n        #Convert it to real and imaginary parts and return the angle.\n        return [r]\n    #If the value is a string\n    if isinstance(numbers,(str)) == True:\n        #Create the polar coordinates for the string\n        r = convert(numbers[0])\n        #Convert it to real and imaginary parts and return the angle.\n        return [r]\n    #If the value is an array or list\n    if isinstance(numbers,(list,np.ndarray)) == True:\n        #Create the polar coordinates for the array\n        r = convert(numbers[0])\n        #Convert it to real and imaginary parts and return the angle.\n        return [r]\n    #If the value is an int or float\n    if isinstance(numbers,(int,float)) == False:\n        #Create the polar coordinates for the int or float values\n        r = convert(numbers)\n        #Convert it to real and imaginary parts and return the angle.\n        return [r]\n",
        "test": "assert     convert(-1+1j) == (0,-1)",
        "num_ids": 703
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_list = []\n    for i in list1:\n        if type(i) == int:\n            num_list.append(i)\n    return len(num_list)\n",
        "test": "assert     count_integer([]) == 0, \"count_integer\"",
        "num_ids": 352
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    possible_comb = []\n    for i in range(1, n+1):\n        possible_comb.extend(list(combinations(l, i)))\n",
        "test": "assert     combinations_colors([1, 2, 3], 2) == [",
        "num_ids": 349
    },
    {
        "number": 256,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_number_count = 0\n",
        "test": "assert     count_Primes_nums(5) == 0",
        "num_ids": 154
    },
    {
        "number": 257,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # if not (type(a)==int or type(a)==float):\n    #     print(\"That wasn't a number.\")\n    #     return \n    # elif not (type(b)==int or type(b)==float):\n    #     print(\"That wasn't a number.\")\n    #     return \n    # elif not(a>b):\n    #     print(\"That's not a number.\")\n    #     return \n    # elif not(a<b):\n    #     print(\"That's not a number.\")\n    #     return \n    # elif not(a==b):\n    #     print(\"That's not a number.\")\n    #     return \n    # else:\n    #     print(f\"They're both in the {a}-{b} numbers range.\")\n    #     return a,b\n    return int(b), int(a)\n    \n",
        "test": "assert     swap_numbers(2,3) == (3,2)",
        "num_ids": 414
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n    return test_tup1, test_tup2\n",
        "test": "assert     maximize_elements((1, 5), (2, 3)) == (2, 3)",
        "num_ids": 684
    },
    {
        "number": 260,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt\n    for i in range(2,int(sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert         newman_prime(1) == 1, \"newman_prime(1) should return 1\"",
        "num_ids": 275
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #print(test_tup1, test_tup2)\n    def f(tup):\n        return tup[0] / tup[1]\n    \n    answer = f(test_tup1)\n    answer = f(test_tup2)\n    #answer = (test_tup2[0] / test_tup1[1])\n    #print(\"answer is: {}\".format(answer))\n    return answer\n",
        "test": "assert         division_elements((1, 2, 3), (4, 8)) == (2/3, 8/4)",
        "num_ids": 603
    },
    {
        "number": 262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L],list1[L:]\n",
        "test": "assert     split_two_parts(list1 = ['one', 'two', 'three', 'four', 'five'], L = 5) == ['three', 'two', 'four', 'five']",
        "num_ids": 459
    },
    {
        "number": 264,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 365 * 24 * 2\n    return dog_years\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 412
    },
    {
        "number": 265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Write your code here\n    if step > len(S):\n        return None\n    if step == len(S):\n        return [S]\n    if S[step] == '0':\n        return list_split(S, step+1)\n    if S[step] == '1':\n        return [S[0:step]+'0'+S[step+1:]] + list_split(S, step+1)\n    return [S[0:step]+'1'+S[step+1:]] + list_split(S, step+1)\n",
        "test": "assert ",
        "num_ids": 2248
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = (0.5 * l**2) - (0.5 * l * (l - 1) * (l - 2))\n    return a\n",
        "test": "assert     lateralsurface_cube(0.0) == 0.0",
        "num_ids": 238
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n):\n        if i%2==0:\n            sum+=i**2\n    return sum\n",
        "test": "assert     square_Sum(4) == 4",
        "num_ids": 217
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    import math\n    if n > 1:\n        star_num = math.floor(n ** 0.5)\n        if n % 2 == 0:\n            star_num += 1\n        for i in range(3, star_num+1, 2):\n            if n % i == 0:\n                break\n        else:\n            return n\n    return -1\n",
        "test": "assert     find_star_num(2) == 2",
        "num_ids": 304
    },
    {
        "number": 269,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == '.':\n        return 32\n    elif k == '-' or k == '_':\n        return 39\n    elif k == '0':\n        return 46\n    elif k == '1':\n        return 49\n    elif k == '2':\n        return 58\n    elif k == '3':\n        return 63\n    elif k == '4':\n        return 67\n    elif k == '5':\n        return 70\n    elif k == '6':\n        return 73\n    elif k == '7':\n        return 77\n    elif k == '8':\n        return 80\n    elif k == '9':\n        return 82\n    else:\n        return int(k)",
        "test": "assert     ascii_value(42)==42",
        "num_ids": 404
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            sum_even=sum_even+arr[i]\n    return sum_even\n        \nprint(sum_even_and_even_index([1,2,3,4,5]))\n",
        "test": "assert     sum_even_and_even_index([]) == 0",
        "num_ids": 357
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i**3)\n    return sum\n",
        "test": "assert     even_Power_Sum(1) == 1",
        "num_ids": 189
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[1])\n    return rear\n",
        "test": "assert     rear_extract([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14)]) == [2,4,6,8,10,12,14]",
        "num_ids": 359
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1_list = []\n    test_tup2_list = []\n",
        "test": "assert     substract_elements(test_tup1, test_tup2) =='substract_elements'",
        "num_ids": 184
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # return ((math.factorial(n)) // (math.factorial(n - 1)) // (math.factorial(n - 2))) // (((math.factorial(n) - 1) * (math.factorial(n - 2)))) \n    return (math.factorial(n) // (math.factorial(n - 1) // (math.factorial(n - 2)))) // (((math.factorial(n) - 1) * (math.factorial(n - 2))))\n",
        "test": "assert     even_binomial_Coeff_Sum(6) == 0",
        "num_ids": 368
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**3/3\n",
        "test": "assert     volume_cylinder(3,5) == 9",
        "num_ids": 154
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.copy().filter(lambda x: x[\"value\"] >= n)\n",
        "test": "assert     dict_filter({1:1, 2:2, 3:3}, 3) == {1:1, 2:2}",
        "num_ids": 332
    },
    {
        "number": 278,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) <= 1:\n        return 0\n    else:\n        # find the position of the first element\n        first_index = test_tup.index(test_tup[0])\n        # find the second element\n        second_index = test_tup.index(test_tup[1])\n        # count the number of elements that occurs before the first element\n        first_element_count = 0\n        # iterate over each element in the list\n        for i in test_tup:\n            # if the element is less than the first element\n            if i < test_tup[first_index]:\n                # increment the count by 1\n                first_element_count += 1\n        # return the count\n        return first_element_count\n",
        "test": "assert     count_first_elements(()) == 0, \"Expected 0, got {}\".format(count_first_elements(()))",
        "num_ids": 624
    },
    {
        "number": 279,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return (n + 1) // 2\n",
        "test": "assert     is_num_decagonal(0) == False",
        "num_ids": 194
    },
    {
        "number": 280,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, e in enumerate(dlist):\n        if e == item:\n            return (True,i)\n    return (False, -1)\n",
        "test": "assert     sequential_search([1,2,3,4,5,6,7,8,9,10], 15) == (False, -1)",
        "num_ids": 377
    },
    {
        "number": 281,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    count = 0\n    for ele in test_list:\n        if ele in test_list:\n            count += 1\n    return count == len(test_list)\n",
        "test": "assert     all_unique([1,1,2,2,3,3]), \"The function must return a list containing unique elements.\"",
        "num_ids": 673
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1-n2 for n1,n2 in zip(nums1,nums2)]\n",
        "test": "assert     sub_list([1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 9], 'wrong'",
        "num_ids": 397
    },
    {
        "number": 283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass \n    # if n%10 == 0:\n    #     return True\n    # elif n%10 == 1:\n    #     return False\n    # elif n%10 == 2:\n    #     return False\n    # elif n%10 == 3:\n    #     return False\n    # elif n%10 == 4:\n    #     return False\n    # elif n%10 == 5:\n    #     return False\n    # elif n%10 == 6:\n    #     return False\n    # elif n%10 == 7:\n    #     return False\n    # elif n%10 == 8:\n    #     return False\n    # elif n%10 == 9:\n    #     return False\n    # else:\n    #     return False\n",
        "test": "assert validate(9) == True",
        "num_ids": 327
    },
    {
        "number": 284,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "test": "assert     check_element([1,2,3,4,5,6,7],5) == False",
        "num_ids": 252
    },
    {
        "number": 285,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text=re.sub(r'[a-zA-Z ]','',text)\n    return re.search(r'[a-zA-Z][a-zA-Z0-9]+\\b',text)!= None\n",
        "test": "assert text_match_two_three(\"123\") == False",
        "num_ids": 2228
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Write your code here\n    numbers = [0] * n\n    for i in range(1, k):\n        numbers[i-1] = a[i-1]\n    for i in range(n-k, n):\n        numbers[i-k] += a[i]\n    return max(numbers)\n",
        "test": "assert ",
        "num_ids": 325
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    if (n==0):\n        return 0\n    else:\n        return n*square_Sum(n-1)\n        \n    # def sum_squares(n):\n    #     \"\"\"\n    #     Write a python function takes in an integer n and returns the sum of squares of all numbers up to n.\n    #     \"\"\"\n    #     sum=0\n    #     for i in range(1,n+1):\n    #         sum+=i**2\n    #     return sum\n",
        "test": "assert     square_Sum(7) == 25",
        "num_ids": 224
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    length = len(list1[0])\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n",
        "test": "assert     max_length([[]]) == 0",
        "num_ids": 314
    },
    {
        "number": 291,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = 0\n    for i in range(n):\n        for j in range(i + 1):\n            for k in range(j + 1):\n                if (i + j == k) or (i + j + k == n):\n                    ways += 1\n    return ways\n",
        "test": "assert     count_no_of_ways(1, 3) == 1",
        "num_ids": 865
    },
    {
        "number": 292,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return n\n    elif n>m:\n        return find(n,m//2)\n    else:\n        return find(n//2,m)\n",
        "test": "assert     find(0,0) == 0",
        "num_ids": 289
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    A = (w/2) + (h/2)\n    B = 2*(w/3)\n    C = (h/2)\n    if A == B:\n        return A\n    if B == C:\n        return C\n    return ((A+B)/2) + (2*(A+B+C)/3)\n    #d = math.sqrt((w/2)**2+(h/2)**2)\n    #return (math.sqrt((A+B+C)/3))+d\n    #return (math.sqrt((A+C)/3))+d\n",
        "test": "assert otherside_rightangle(4,4) == 0.3333333333333333",
        "num_ids": 341
    },
    {
        "number": 294,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Create a new list that has the maximum element\n    max_val = listval[0]\n    # Loop through all elements in the list\n    for x in listval:\n        if x > max_val:\n            max_val = x\n    return max_val\n",
        "test": "assert     max_val(['1','2','3','4']) == '4'",
        "num_ids": 232
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    count = 0\n    if number < 0:\n        return \"Integer can't be negative.\"\n    for i in range(2,number+1):\n        if number % i == 0:\n            count += i\n    return count\n",
        "test": "assert     sum_div(2) == 2",
        "num_ids": 225
    },
    {
        "number": 296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # TODO: your code here\n",
        "test": "assert     get_Inv_Count(arr) == 0",
        "num_ids": 492
    },
    {
        "number": 297,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    temp = []\n    for elem in list1:\n        if isinstance(elem, list):\n            temp.extend(flatten_list(elem))\n        else:\n            temp.append(elem)\n    return temp\n",
        "test": "assert         flatten_list([1]) == [1]",
        "num_ids": 552
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    def aggregate(tuple_list):\n        'Calculate the maximum aggregate from the tuple_list'\n        max_agg = 0\n        for tuple in tuple_list:\n            max_agg += tuple[1]\n        return max_agg\n    result = []\n    for st_item in stdata:\n        agg_item = aggregate(st_item)\n        if agg_item > result[-1][1]:\n            result.append([agg_item, st_item])\n        else:\n            agg_item = agg_item / result[-1][1]\n            result[-1][1] = agg_item\n    return result\n",
        "test": "assert     max_aggregate(((0,1,2),(1,2,3),(2,3,4))) == (2,3,4)",
        "num_ids": 420
    },
    {
        "number": 300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Two pointer solution (or better)\n    \n    bit_seq = [0,0,0,0]\n    \n    # the sum of last 2 bits \n    # (to avoid overflow)\n    s = 0\n    \n    # the sum of first 2 bits \n    # (to avoid overflow)\n    s_1 = 0\n    \n    # count all first 2 bits \n    # (to avoid overflow)\n    # If sum is less than 2^(n-1), then \n    # then the whole sequence is counted only once.\n    # Otherwise, the whole sequence is counted twice.\n    for i in range(2**n):\n        \n        # If the sum of last 2 bits is less than 2^(n-1),\n        # then the whole sequence is counted only once.\n        # Otherwise, the whole sequence is counted twice.\n        if i % 2**n == 0:\n            s = s_1\n        else:\n            s = s_1 + (i >> (2**n-1))\n        \n        # if the sum of first 2 bits is less than 2^(n-1),\n        # then the whole sequence is counted only once.\n        # Otherwise, the whole sequence is counted twice.\n        if s <= 2**(n-1):\n            bit_seq[0] += 1\n        \n        # if the sum of first 2 bits is more than 2^(n-1),\n        # then the whole sequence is counted twice.\n        # Otherwise, the whole sequence is counted only once.\n        else:\n            bit_seq[1] += 1\n        \n        # if the sum of first 2 bits is less than 2^(n-1),\n        # then the whole sequence is counted only once.\n        # Otherwise, the whole sequence is counted twice.\n        if s < 2**(n-1):\n            bit_seq[2] += 1\n        \n        # if the sum of first 2 bits is more than 2^(n-1),\n        # then the whole sequence is counted only once.\n        # Otherwise, the whole sequence is counted twice.\n        else:\n            bit_seq[3] += 1\n    \n    # if the sum of first 2 bits is less than 2^(n-1)\n    # then the whole sequence is counted only once.\n    # Otherwise, the whole sequence is counted twice.\n    if s < 2**(n-1):\n        bit_seq[4] += 1\n    \n    # if the sum of first 2 bits is more than 2^(n-1)\n    # then the whole sequence is counted only once.\n    # Otherwise, the whole sequence is counted twice.\n    else:\n        bit_seq[5] += 1\n    \n    # return bit_seq\n    return bit_seq[0] + bit_seq[1] + bit_seq[2] + bit_seq[3] + bit_seq[4] + bit_seq[5]\n",
        "test": "assert ",
        "num_ids": 925
    },
    {
        "number": 301,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # YOUR CODE HERE\n    if type(d) is not dict:\n        return None\n    depth = 0\n    for key in d:\n        depth += dict_depth(d[key]) + 1\n    return depth\n",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 434
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (rotations==0) :\n        return arr[index]\n    elif (rotations==1) :\n        return arr[index+1]\n    elif (rotations==2) :\n        return arr[index-1]\n    elif (rotations==3) :\n        return arr[index+ranges[0]]\n    elif (rotations==4) :\n        return arr[index-ranges[1]]\n    else :\n        return arr[index-ranges[2]]\n    \ndef merge_Sort(arr,ranges,rotations) :\n    '''\n    Write a python function to sort array given a range of rotations.\n    '''\n    if (rotations==0) :\n        return arr\n    elif (rotations==1) :\n        return arr[0:ranges[0]]+arr[ranges[1]:]\n    elif (rotations==2) :\n        return arr[0:ranges[0]]+arr[0:ranges[1]]+arr[ranges[2]:]\n    elif (rotations==3) :\n        return arr[0:ranges[0]]+arr[ranges[1]:ranges[2]]+arr[ranges[3]:]\n    elif (rotations==4) :\n        return arr[0:ranges[0]]+arr[ranges[1]:ranges[2]]+arr[ranges[3]:ranges[4]]+arr[ranges[5]:]\n    else :\n        return arr\n    \ndef reverse_Iterative(arr,index) :\n    '''\n    Write a python function to reverse array given a index.\n    '''\n    #print(\"Reverse : \" + str(index))\n    while (index<len(arr)-1) :\n        temp = arr[index]\n        arr[index] = arr[index+1]\n        arr[index+1] = temp\n        index +=1\n    #print(\"Array after reverse : \" + str(arr))\n",
        "test": "assert     find_Element([5, 3, 1, 2, 6, 4, 0, 5], [0, 2, 3, 5, 6, 7], 0, 0) == 5",
        "num_ids": 839
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    new_words = []\n    for word in words:\n        if word[0] == 'p':\n            new_words.append(word)\n    return new_words\n",
        "test": "assert start_withp([]) == []",
        "num_ids": 436
    },
    {
        "number": 306,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    pre, pre_sum = 0, -1\n    for i in range(n - 1, index - 1, -1):\n        pre_sum += a[i]\n        if pre_sum > pre_sum + k:\n            pre = i\n            pre_sum = pre_sum - a[i]\n    return max(a[pre:] + a[:pre] + [a[n - 1]])\n",
        "test": "assert     max_sum_increasing_subseq([1, 2, 3, 4], 4, 3, 1) == 4",
        "num_ids": 659
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n+1):\n        if tuplex[i:i+n] == tuplex[i+n:i+n+n]:\n            return tuplex[i:i+n],tuplex[i+n:i+n+n]\n    return '',''\n",
        "test": "assert     (colon_tuplex(1,2,3) == (1,2,3)) == False",
        "num_ids": 2315
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Gathers the two numbers that we will need for the product.\n    nums1_L = []\n    nums2_L = []\n    for i in range(N):\n        nums1_L.append(nums1[i])\n        nums2_L.append(nums2[i])\n",
        "test": "assert ",
        "num_ids": 515
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # your code goes here\n    if(a>b):\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(1,2) == 2",
        "num_ids": 163
    },
    {
        "number": 310,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('abcd') == ('a', 'b', 'c', 'd')",
        "num_ids": 359
    },
    {
        "number": 311,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    for bit in bin(n):\n        if bit == '1':\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return 1\n",
        "test": "assert set_left_most_unset_bit(1) == 1",
        "num_ids": 350
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=r*h\n    return v\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    a=2*(math.pi*(r**2))\n    return a\ndef volume_cone_2d(r,h):\n    '''\n    Write a function to find the volume of a cone with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_cone_2d(r,h):\n    '''\n    Write a function to find the area of a cone with only the 2D shape.\n    '''\n    a=2*(math.pi*(r**2))\n    return a\ndef volume_cube(r,h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v=r*h\n    return v\ndef area_cube(r,h):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    a=4*h\n    return a\ndef volume_cube_2d(r,h):\n    '''\n    Write a function to find the volume of a cube with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_cube_2d(r,h):\n    '''\n    Write a function to find the area of a cube with only the 2D shape.\n    '''\n    a=4*h\n    return a\ndef volume_triangle(r,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    v=r*h\n    return v\ndef area_triangle(r,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    a=3*h\n    return a\ndef volume_quadrilateral(r,h):\n    '''\n    Write a function to find the volume of a quadrilateral.\n    '''\n    v=r*h\n    return v\ndef area_quadrilateral(r,h):\n    '''\n    Write a function to find the area of a quadrilateral.\n    '''\n    a=3*h\n    return a\ndef volume_pentagon(r,h):\n    '''\n    Write a function to find the volume of a pentagon.\n    '''\n    v=r*h\n    return v\ndef area_pentagon(r,h):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    a=2*h\n    return a\ndef volume_hexagon(r,h):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    v=r*h\n    return v\ndef area_hexagon(r,h):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    a=h\n    return a\ndef volume_hexagon_2d(r,h):\n    '''\n    Write a function to find the volume of a hexagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_hexagon_2d(r,h):\n    '''\n    Write a function to find the area of a hexagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_pentagon_2d(r,h):\n    '''\n    Write a function to find the volume of a pentagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_pentagon_2d(r,h):\n    '''\n    Write a function to find the area of a pentagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_cuboid(r,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    v=r*h\n    return v\ndef area_cuboid(r,h):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    a=4*h\n    return a\ndef volume_cuboid_2d(r,h):\n    '''\n    Write a function to find the volume of a cuboid with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_cuboid_2d(r,h):\n    '''\n    Write a function to find the area of a cuboid with only the 2D shape.\n    '''\n    a=4*h\n    return a\ndef volume_octagon(r,h):\n    '''\n    Write a function to find the volume of an octagon.\n    '''\n    v=r*h\n    return v\ndef area_octagon(r,h):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    a=h\n    return a\ndef volume_octagon_2d(r,h):\n    '''\n    Write a function to find the volume of an octagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_octagon_2d(r,h):\n    '''\n    Write a function to find the area of an octagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_ray(r,h):\n    '''\n    Write a function to find the volume of a ray.\n    '''\n    v=r*h\n    return v\ndef area_ray(r,h):\n    '''\n    Write a function to find the area of a ray.\n    '''\n    a=4*h\n    return a\ndef volume_triangle_2d(r,h):\n    '''\n    Write a function to find the volume of a triangle with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_triangle_2d(r,h):\n    '''\n    Write a function to find the area of a triangle with only the 2D shape.\n    '''\n    a=4*h\n    return a\ndef volume_cube_2d(r,h):\n    '''\n    Write a function to find the volume of a cube with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_cube_2d(r,h):\n    '''\n    Write a function to find the area of a cube with only the 2D shape.\n    '''\n    a=4*h\n    return a\ndef volume_pentagon_2d(r,h):\n    '''\n    Write a function to find the volume of a pentagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_pentagon_2d(r,h):\n    '''\n    Write a function to find the area of a pentagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_quadrilateral_2d(r,h):\n    '''\n    Write a function to find the volume of a quadrilateral with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_quadrilateral_2d(r,h):\n    '''\n    Write a function to find the area of a quadrilateral with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_hexagon_2d(r,h):\n    '''\n    Write a function to find the volume of a hexagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_hexagon_2d(r,h):\n    '''\n    Write a function to find the area of a hexagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_octagon_2d(r,h):\n    '''\n    Write a function to find the volume of an octagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_octagon_2d(r,h):\n    '''\n    Write a function to find the area of an octagon with only the 2D shape.\n    '''\n    a=h\n",
        "test": "assert     volume_cone(1.0, 1.0) == 1",
        "num_ids": 353
    },
    {
        "number": 388,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0:\n        return \"Invalid Input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        power = 0\n        while n > 0:\n            power += 1\n            n -= 1\n        return power\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 299
    },
    {
        "number": 389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = int(n)\n    if n == 2:\n        return n\n    if n % 2 == 0:\n        return find_lucas(n // 2) + 1\n    return find_lucas((n - 1) // 2) + 1\n",
        "test": "assert ",
        "num_ids": 347
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = element.replace('{','')\n        element = element.replace('}','')\n        element = element.replace('[','')\n        element = element.replace(']','')\n        element = element.replace('(','')\n        element = element.replace(')','')\n        element = element.replace('\\\\','')\n        element = element.replace('\"','')\n        element = element.replace(\"'\",'')\n        list_[list_.index(element)] = string\n",
        "test": "assert     add_string([1, 2, 3], 'a   b   c   d   e f g') == [1, 2, 3, 'a', 'b', 'c', 'd', 'e', 'f', 'g']",
        "num_ids": 588
    },
    {
        "number": 391,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    try:\n        if len(l1) == len(l2) and len(l2) == len(l3):\n            d = {}\n            for i, j in zip(l1, l2, l3):\n                d[i] = j\n            return d\n        else:\n            return None\n    except:\n        return None\n",
        "test": "assert     convert_list_dictionary('list', 'list', 'list') == None",
        "num_ids": 1334
    },
    {
        "number": 392,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    else:\n        pass\n",
        "test": "assert     get_max_sum(0) == 0",
        "num_ids": 365
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in input_list:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n    return max_len\n",
        "test": "assert     max_length_list([]) == 0",
        "num_ids": 429
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    count = 0\n    for i in test_tup:\n        if i in test_tup:\n            count = count + 1\n    if count > 1:\n        return False\n    else:\n        return True\n",
        "test": "assert         check_distinct((1, 1, 2, 1, 2, 3, 1, 2)) == False",
        "num_ids": 347
    },
    {
        "number": 395,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    # return first non-repeating char\n    print(str1)\n    print(str1.count(str1[0]))\n    # print(str1.index(str1[0]))\n    return str1[0]\n",
        "test": "assert     first_non_repeating_character('a') == 'a', \"First non repeating character in the string is a\"",
        "num_ids": 466
    },
    {
        "number": 396,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith('-'):\n        return False\n    if string.endswith('-'):\n        return False\n    return True\n",
        "test": "assert     check_char('aa1')==True",
        "num_ids": 106
    },
    {
        "number": 397,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if a==b==c==0:\n        return a\n    \n    else:\n        if a%2==0:\n            return a/2 + (a/2)\n        else:\n            return a/2 + (a/2) + (a/2)\n        \nprint(median_numbers(2,4,5))",
        "test": "assert     median_numbers(1,2,3) == 1.5",
        "num_ids": 537
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = []\n    for num in nums:\n        res.append(sum(map(int, str(num))))\n    return sum(res)\n",
        "test": "assert     sum_of_digits([]) == 0, \"Test 3\"",
        "num_ids": 371
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = lambda a, b: (a[0] ^ b[0]) if a[1] == b[1] else (a[1] ^ b[1]) if a[0] == b[0] else (a[0] ^ b[0])\n",
        "test": "assert     bitwise_xor(test_tup1, test_tup2) == test_tup1 ^ test_tup2",
        "num_ids": 564
    },
    {
        "number": 400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = []\n    for tuples in test_list:\n        if tuples not in unique_tuples:\n            unique_tuples.append(tuples)\n    return unique_tuples\n",
        "test": "assert     extract_freq([1, 2, 3, 1, 2, 3, 2, 2, 3, 2]) == 3",
        "num_ids": 1478
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = []\n    tup2 = []\n    for i in range(len(test_tup1)):\n        tup1.append(test_tup1[i][0])\n        tup2.append(test_tup2[i][0])\n    tup1.sort()\n    tup2.sort()\n    return tup1, tup2\n",
        "test": "assert     add_nested_tuples([1,2,3], [1,2,5]) == (1,2,3,5), \"The function returns the wrong result\"",
        "num_ids": 345
    },
    {
        "number": 404,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum=a\n    if b<minimum:\n        minimum=b\n    return minimum\n",
        "test": "assert     minimum(5,10) == 5",
        "num_ids": 137
    },
    {
        "number": 405,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n",
        "test": "assert     check_tuplex(('a','b','c'),('a','b','d','c','d')) is True, \"True\"",
        "num_ids": 491
    },
    {
        "number": 406,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    s = str(x) \n    if len(s) % 2 == 1: \n        return 0\n    return 1\n",
        "test": "assert     find_Parity(0) == 0",
        "num_ids": 241
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def create_next_bigger(num):\n        num_str = str(num)\n        num_str = num_str[::-1]\n        next_bigger = int(num_str)\n        return next_bigger\n    return create_next_bigger\n",
        "test": "assert ",
        "num_ids": 228
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    heapq.heapify(min_heap)\n    for i in range(k):\n        for j in range(i+1, len(nums1)):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n    result = []\n    for i in range(k):\n        if min_heap and min_heap[0][0] < heapq.heappop(min_heap)[0]:\n            continue\n        if len(result) < k:\n            result.append((min_heap[0][0] + min_heap[1][0], min_heap[0][1], min_heap[1][1]) )\n        else:\n            result[k-1] = result[k-1]\n    return result\n",
        "test": "assert     k_smallest_pairs([1, 4, 6, 7], [1, 5, 7, 8], 0) == []",
        "num_ids": 1027
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 3:\n        raise Exception('At least 3 items must be given.')\n    d = {}\n    for i in list1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] = d[i] + 1\n    min_key = min(d, key=d.get)\n    return min_key * list1[list1.index(min_key)]\n",
        "test": "assert     min_product_tuple([(1,3),(2,3),(3,4)])==(1,3)",
        "num_ids": 564
    },
    {
        "number": 410,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    \n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n            \n    return min_val\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    \n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n            \n    return max_val\n    \ndef mean(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    \n    mean = sum(listval) / len(listval)\n    return mean\n",
        "test": "assert     min_val([1,2,3,4]) == 1, 'test_min_val returns 1'",
        "num_ids": 443
    },
    {
        "number": 411,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = ''\n    for c in word:\n        if c.isupper():\n            s = s + c.lower()\n        elif c.islower():\n            s = s + c.upper()\n    return s\n",
        "test": "assert     snake_to_camel('a') == 'A'",
        "num_ids": 305
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # create a list of odd numbers\n    odd_list = []\n    for i in l:\n        if i % 2 == 1:\n            odd_list.append(i)\n    # print even list\n    print(odd_list)\n    return odd_list\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 461
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element(test_list, 5) == test_list[5]",
        "num_ids": 237
    },
    {
        "number": 414,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "test": "assert     overlapping(['b', 'c', 'a', 'd', 'e'], ['e', 'c', 'd', 'c', 'b', 'a']) == True, \"The following sequence does not overlap the above sequence: ['b', 'c', 'a', 'd', 'e']\"",
        "num_ids": 647
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_p = 0\n    max_idx = -1\n",
        "test": "assert ",
        "num_ids": 210
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(set(map(tuple,Input))) \n",
        "test": "assert     group_tuples([]) == []        # empty list",
        "num_ids": 317
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if lst == None or len(lst) == 0: \n        return None\n    if len(lst) == 1: \n        return lst[0]\n    if len(lst) == 2: \n        return lst[0] if lst[0] < lst[1] else lst[1]\n    if len(lst) == 3: \n        return lst[0] if lst[0] < lst[1] < lst[2] else lst[1]\n    mid = len(lst)//2\n    if lst[mid] < lst[mid - 1] and lst[mid] < lst[mid + 1]: \n        return lst[mid]\n    if lst[mid] < lst[mid - 1]: \n        return Find_Max(lst[:mid-1]) \n    return Find_Max(lst[mid:]) \n",
        "test": "assert     Find_Max(['A','B','C','D']) == 'C'",
        "num_ids": 505
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list = list(map(round, list1))\n    total = sum(new_list)\n    print(f\"The total sum of {list1} multiplied by length of the list is {total}\")\n",
        "test": "assert     round_and_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5",
        "num_ids": 266
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    n = abs(n)\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n",
        "test": "assert     cube_Sum(6) == 216",
        "num_ids": 213
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # print(\"tuple=\", test_tup)\n    n = test_tup[0]\n    # print(\"tuple[0]=\", n)\n    t = test_tup[1]\n    # print(\"tuple[1]=\", t)\n    l = []\n    for i in range(len(t)):\n        l.append(t[i])\n    # print(\"l=\", l)\n    # print(n)\n    if n.isdigit():\n        return(n + l[0] + l[1])\n    else:\n        return(n + l[0] + l[1])\n    # return(n + l[0] + l[1])\n",
        "test": "assert concatenate_tuple([1, 2, (3, 4)]) == (1, 2, (3, 4))",
        "num_ids": 490
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n < 1:\n        return \n    else:\n        lst = []\n        for i in range(1,n+1):\n            lst.append(i**3)\n        print(sum(lst)/len(lst))\n",
        "test": "assert     find_Average_Of_Cube(7) == 6.0",
        "num_ids": 324
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return list(map(list, zip(*test_tuple)))",
        "test": "assert     extract_rear(((1, 2), (3, 4), (5, 6), (7, 8), (9, 10)) ) == (3, 6)",
        "num_ids": 558
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for x in list1:\n        if x == x:\n            counter = counter + 1\n    return counter\n",
        "test": "assert     count_element_in_list([1, 2, 3], 2) == 3",
        "num_ids": 204
    },
    {
        "number": 426,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # O(n)\n    # O(n) time complexity\n    # O(n) space complexity\n    for num in nums:\n        if num % 2 == 1:\n            nums.remove(num)\n    return nums\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 373
    },
    {
        "number": 427,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{1,2})-(\\d{1,2})-(\\d{4})')\n    m = pattern.match(dt)\n    if not m:\n        return dt\n    d,m,y = m.groups()\n    return f'{d}-{m}-{y}'\n",
        "test": "assert     change_date_format('2021-07-01') == '2021-07-01'",
        "num_ids": 642
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # length = len(my_list)\n    for i in range(0, len(my_list)):\n        for j in range(i, 0, -1):\n            if my_list[j] < my_list[j-1]:\n                temp = my_list[j]\n                my_list[j] = my_list[j-1]\n                my_list[j-1] = temp\n    return my_list\n",
        "test": "assert     shell_sort([4, 8, 9, 1, 2, 6, 7, 9, 12, 7, 8, 5, 6, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 7, 6, 5, 4, 8, 9, 12, 10, 7, 8, 9, 6, 5, 4, 1",
        "num_ids": 518
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n",
        "test": "assert     and_tuples(test_tup1, test_tup2) == (False, True)",
        "num_ids": 568
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = np.linspace(-1,1,100)\n    y = (b*x**2 + a*x + c)/(b**2 + a**2 + (x - 1)**2)\n    return x, y\n",
        "test": "assert     parabola_directrix(2,2,3) == True, 'parabola_directrix is incorrect!'",
        "num_ids": 252
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        for el in list1:\n            if el not in list2:\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert     common_element([1, 2, 3, 4, 5], [1, 5, 6, 7, 8, 9]) == False, \"Wrong\"",
        "num_ids": 466
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #Base and height are ascii characters.\n    #Hides the base and height variables for easier use.\n    base,height=base1,base2\n    #We need to check whether the base is greater than 0\n    if base > 0:\n        #We need to check whether the height is greater than 0\n        if height > 0:\n            #The below if/else block determines if the height is even or odd.\n            if height % 2 == 0:\n                #We find the modulo by 2 to account for the remainder of the division.\n                modulo=height%2\n            else:\n                modulo=height%2\n            #If the modulo is odd we get the average value.\n            #This is done by dividing the modulo by 2.\n            if modulo%2==0:\n                #We need to get the value of the two halves.\n                base_half=int(base/2)\n                height_half=int(height/2)\n                #Then we calculate the average of the two halves.\n                base_median=round((base_half+height_half)/2)\n                height_median=round((height_half+base_half)/2)\n                #We get the median.\n                return base_median+height_median\n            #If the modulo is even we need to calculate the median of the two halves.\n            else:\n                base_half=int(base/2)\n                height_half=int(height/2)\n                #Then we calculate the median of the two halves.\n                base_median=round((base_half+height_half)/2)\n                height_median=round((height_half+base_half)/2)\n                return base_median\n        #If the height is greater than 0 and is odd we get the average.\n        else:\n            #This is done by getting the modulo by 2 to account for the remainder of the division.\n            modulo=height%2\n            #We find the modulo by 2 to account for the remainder of the division.\n            if modulo%2==0:\n                base_half=int(base/2)\n                height_half=int(height/2)\n                #Then we calculate the average of the two halves.\n                base_median=round((base_half+height_half)/2)\n                height_median=round((height_half+base_half)/2)\n                #We get the median.\n                return base_median+height_median\n            #If the modulo is even we need to calculate the median of the two halves.\n            else:\n                base_half=int(base/2)\n                height_half=int(height/2)\n                #Then we calculate the median of the two halves.\n                base_median=round((base_half+height_half)/2)\n                height_median=round((height_half+base_half)/2)\n                return base_median+height_median\n    #If the base is zero then we need to return the height.\n    else:\n        base_half=int(base/2)\n        height_half=int(height/2)\n        #Then we calculate the average of the two halves.\n        base_median=round((base_half+height_half)/2)\n        height_median=round((height_half+base_half)/2)\n        #We get the median.\n        return base_median+height_median\n    #If the height is greater than 0 and is odd we need to get the average.\n    #This is done by dividing the modulo by 2.\n    if modulo%2==0:\n        return base+height_half\n    #If the height is greater than 0 and is even we need to get the average.\n    else:\n        return base+height_half\n",
        "test": "assert     median_trapezium(5,3,3), \"Median is not 7.\"",
        "num_ids": 1261
    },
    {
        "number": 433,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number in arr:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_greater([2, 3, 4, 5, 6, 7], 1) == False",
        "num_ids": 270
    },
    {
        "number": 434,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more b's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more c's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more e's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more f's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more g's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more h's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more i's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more j's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more k's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more l's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more m's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more n's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more o's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more p's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more q's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more r's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more s's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more t's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more u's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more v's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more w's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more x's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_thirtyone(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more y's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_thirtytwo(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twiny(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyone(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinytwo(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinythree(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyfour(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyfive(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinysix(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyseven(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyeight(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinynine(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinynineone(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text ",
        "test": "assert     text_match_one('Hello, world!') == 'Hello, world!'",
        "num_ids": 2135
    },
    {
        "number": 435,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = 0\n    while n > 0 :\n        last_digit = n % 10\n        n = n // 10\n    return last_digit\n    ",
        "test": "assert     last_Digit(6) == 6",
        "num_ids": 178
    },
    {
        "number": 436,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(-i)\n    return neg\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 299
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd = []\n    for i in str1:\n        if i % 2 == 1:\n            odd.append(i)\n    return ''.join(odd)\n",
        "test": "assert     remove_odd('aabbacccddeeff') == 'abacccddeeff'",
        "num_ids": 348
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i > j:\n                if test_list[i][1] > test_list[j][1]:\n                    count += 1\n                else:\n                    count += 2\n    return count\n",
        "test": "assert     count_bidirectional([]) == 0",
        "num_ids": 319
    },
    {
        "number": 439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(L))\n",
        "test": "assert ",
        "num_ids": 250
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    indices = []\n    for i in range(len(text) - 2):\n        adverb = text[i:i+3]\n        if adverb == 'am':\n            indices.append(i)\n            continue\n        if adverb == 'are':\n            indices.append(i+2)\n            continue\n        if adverb == 'was':\n            indices.append(i+1)\n            continue\n        if adverb == 'were':\n            indices.append(i+2)\n            continue\n        if adverb == 'be':\n            indices.append(i+3)\n            continue\n        if adverb == 'been':\n            indices.append(i+4)\n            continue\n        if adverb == 'have':\n            indices.append(i+5)\n            continue\n        if adverb == 'have' or adverb == 'has':\n            indices.append(i+6)\n            continue\n        if adverb == 'did':\n            indices.append(i+7)\n            continue\n        if adverb == 'did' or adverb == 'does':\n            indices.append(i+8)\n            continue\n        if adverb == 'does' or adverb == 'does' or adverb == 'is':\n            indices.append(i+9)\n            continue\n        if adverb == 'is' or adverb == 'is' or adverb == 'was':\n            indices.append(i+10)\n            continue\n        if adverb == 'was' or adverb == 'was' or adverb == 'were':\n            indices.append(i+11)\n            continue\n        if adverb == 'were' or adverb == 'were' or adverb == 'been':\n            indices.append(i+12)\n            continue\n        if adverb == 'been' or adverb == 'been' or adverb == 'have':\n            indices.append(i+13)\n            continue\n        if adverb == 'have' or adverb == 'have' or adverb == 'did':\n            indices.append(i+14)\n            continue\n        if adverb == 'did' or adverb == 'did' or adverb == 'does':\n            indices.append(i+15)\n            continue\n        if adverb == 'does' or adverb == 'does' or adverb == 'is':\n            indices.append(i+16)\n            continue\n        if adverb == 'is' or adverb == 'is' or adverb == 'was':\n            indices.append(i+17)\n            continue\n        if adverb == 'was' or adverb == 'was' or adverb == 'were':\n            indices.append(i+18)\n            continue\n        if adverb == 'were' or adverb == 'were' or adverb == 'been':\n            indices.append(i+19)\n            continue\n        if adverb == 'been' or adverb == 'been' or adverb == 'have':\n            indices.append(i+20)\n            continue\n        if adverb == 'have' or adverb == 'have' or adverb == 'did':\n            indices.append(i+21)\n            continue\n        if adverb == 'did' or adverb == 'did' or adverb == 'does':\n            indices.append(i+22)\n            continue\n        if adverb == 'does' or adverb == 'does' or adverb == 'is':\n            indices.append(i+23)\n            continue\n        if adverb == 'is' or adverb == 'is' or adverb == 'was':\n            indices.append(i+24)\n            continue\n        if adverb == 'was' or adverb == 'was' or adverb == 'were':\n            indices.append(i+25)\n            continue\n        if adverb == 'were' or adverb == 'were' or adverb == 'been':\n            indices.append(i+26)\n            continue\n        if adverb == 'been' or adverb == 'been' or adverb == 'have':\n            indices.append(i+27)\n            continue\n        if adverb == 'have' or adverb == 'have' or adverb == 'did':\n            indices.append(i+28)\n            continue\n        if adverb == 'did' or adverb == 'did' or adverb == 'does':\n            indices.append(i+29)\n            continue\n        if adverb == 'does' or adverb == 'does' or adverb == 'is':\n            indices.append(i+30)\n            continue\n        if adverb == 'is' or adverb == 'is' or adverb == 'was':\n            indices.append(i+31)\n            continue\n        if adverb == 'was' or adverb == 'was' or adverb == 'were':\n            indices.append(i+32)\n            continue\n        if adverb == 'were' or adverb == 'were' or adverb == 'been':\n            indices.append(i+33)\n            continue\n        if adverb == 'been' or adverb == 'been' or adverb == 'have':\n            indices.append(i+34)\n            continue\n        if adverb == 'have' or adverb == 'have' or adverb == 'did':\n            indices.append(i+35)\n            continue\n        if adverb == 'did' or adverb == 'did' or adverb == 'does':\n            indices.append(i+36)\n            continue\n        if adverb == 'does' or adverb == 'does' or adverb == 'is':\n            indices.append(i+37)\n            continue\n        if adverb == 'is' or adverb == 'is' or adverb == 'was':\n            indices.append(i+38)\n            continue\n        if adverb == 'was' or adverb == 'was' or adverb == 'were':\n            indices.append(i+39)\n            continue\n        if adverb == 'were' or adverb == 'were' or adverb == 'been':\n            indices.append(i+40)\n            continue\n        if adverb == 'been' or adverb == 'been' or adverb == 'have':\n            indices.append(i+41)\n            continue\n        if adverb == 'have' or adverb == 'have' or adverb == 'did':\n            indices.append(i+42)\n            continue\n        if adverb == 'did' or adverb == 'did' or adverb == 'does':\n            indices.append(i+43)\n            continue\n        if adverb == 'does' or adverb == 'does' or adverb == 'is':\n            indices.append(i+44)\n            continue\n        if adverb == 'is' or adverb == 'is' or adverb == 'was':\n            indices.append(i+45)\n            continue\n        if adverb == 'was' or adverb == 'was' or adverb == 'were':\n            indices.append(i+46)\n            continue\n        if adverb == 'were' or adverb == 'were' or adverb == 'been':\n            indices.append(i+47)\n            continue\n        if adverb == 'been' or adverb == 'been' or adverb == 'have':\n            indices.append(i+48)\n            continue\n        if adverb == 'have' or adverb == 'have' or adverb == 'did':\n            indices.append(i+49)\n            continue\n        if adverb == 'did' or adverb == 'did' or adverb == 'does':\n            indices.append(i+50)\n            continue\n        if adverb == 'does' or adverb == 'does' or adverb == 'is':\n            indices.append(i+51)\n            continue\n        if adverb == 'is' or adverb == 'is' or adverb == 'was':\n            indices.append(i+52)\n            continue\n        if adverb == 'was' or adverb == 'was' or adverb == 'were':\n            indices.append(i+53)\n            continue\n        if adverb == 'were' or adverb == 'were' or adverb == 'been':\n            indices.append(i+54)\n            continue\n        if adverb == 'been' or adverb == 'been' or adverb == 'have':\n            indices.append(",
        "test": "assert     find_adverb_position(\"It is not to be said to be a true adverb.\") == (0,0), \"Error in find_adverb_position\"",
        "num_ids": 2794
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    from math import pi\n    a = pi * (l**3)\n    print(a)\n    return a\n",
        "test": "assert     surfacearea_cube(10) == 1920",
        "num_ids": 202
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    # initialize the result\n    result = 0\n    \n    # loop through the array\n    for n in nums:\n        if n > 0:\n            result += n / nums[-1]\n    return result\n",
        "test": "assert positive_count([]) == 0.0, \"the function should be correct\"",
        "num_ids": 370
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -9999\n    for num in list1:\n        if num < 0:\n            if num < 0:\n                if num > max_num:\n                    max_num = num\n    return max_num\n",
        "test": "assert     largest_neg([-5, -10, -14, -5, -4, -2, -2, -2, -1, 0]) == -1, '%Error: largest_neg() should return -1'",
        "num_ids": 354
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_tuple_list = []\n    for item in test_list:\n        trimmed_tuple_list.append(item[:K])\n    return trimmed_tuple_list\n",
        "test": "assert     trim_tuple([(1, 2), (3, 4), (5, 6)], 2) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 249
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n",
        "test": "assert     index_multiplication((\"a\", \"b\"), (\"c\", \"d\")) == (\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\")",
        "num_ids": 693
    },
    {
        "number": 446,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence=0\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            occurence=occurence+1\n    return occurence\n",
        "test": "assert     count_Occurrence(tuple(),[]) == 0, \"The function returns 0\"",
        "num_ids": 694
    },
    {
        "number": 447,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(0, len(nums)):\n        nums[i] = nums[i]**3\n    return nums\n",
        "test": "assert     cube_nums([1,2,3,4,5]) == [1,8,27,64,125]",
        "num_ids": 494
    },
    {
        "number": 448,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_n = 0\n    for i in range(1, n+1): \n        sum_n = sum_n + i \n    return sum_n \n",
        "test": "assert     cal_sum(2) == 3",
        "num_ids": 232
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start = l.index(str[0])\n    end = len(str) - 1\n    if start > end:\n        return None\n    else:\n        return str[start + 1:end]\n",
        "test": "assert     extract_string(\"Hello\\nworld!\\n\", \"world\") == \"hello\"",
        "num_ids": 305
    },
    {
        "number": 451,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    \n    text1 = text1.replace(\"\\t\", \"\")\n    text1 = text1.replace(\"\\r\", \"\")\n    text1 = text1.replace(\"\\n\", \"\")\n    return text1\n",
        "test": "assert     remove_whitespaces('') == ''",
        "num_ids": 362
    },
    {
        "number": 452,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return 0\n    elif sale_amount==actual_cost:\n        return 0\n    else:\n        return sale_amount-actual_cost\n        \ndef main():\n    amount=int(input())\n    total_cost=int(input())\n    total_sales=int(input())\n    actual_cost=int(input())\n    sale_amount=0\n    print(total_sales,amount,sale_amount,total_cost)\n    for i in range(0,total_sales):\n        sale_amount=sale_amount+int(input())\n        sale_amount=sale_amount+sale_amount\n        \n    print(\"Amount:\",sale_amount)\n    print(\"Total:\",sale_amount+amount)\n    print(\"Loss:\",amount-sale_amount)\n    print(\"Amount:\",sale_amount)\n    print(\"Total:\",sale_amount+amount)\n    print(\"Loss:\",amount-sale_amount)\n    print(\"Amount:\",sale_amount)\n    print(\"Total:\",sale_amount+amount)\n    print(\"Loss:\",amount-sale_amount)\n",
        "test": "assert     loss_amount(500,500) == 0.0",
        "num_ids": 459
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = n\n    while n % 2 == 0:\n        result += n/2\n        n = n/2\n    if n > 1:\n        result += sumofFactors(n-1)\n    return result\n",
        "test": "assert     sumofFactors(1) == 1",
        "num_ids": 2273
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern=re.compile('z')\n    if(pattern.search(text)):\n        return True\n    else:\n        return False\n    ",
        "test": "assert     text_match_wordz('Ss, ss, ss, ss') == False",
        "num_ids": 267
    },
    {
        "number": 455,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 0 or monthnum2 >= 12:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_monthnumb_number(4)",
        "num_ids": 551
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        stringlist[i] = stringlist[i].replace(\" \", \"\")\n        stringlist[i] = stringlist[i].replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\").replace(\"!\", \"\").replace(\";\", \"\").replace(\".\", \"\")\n        stringlist[i] = stringlist[i].replace(\" \", \"\")\n    return stringlist\n",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 623
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0: \n        return []\n    \n    min_idx = 0\n    lst_min = []\n    \n    for i in range(len(lst)):\n        if lst[i] < lst[min_idx]:\n            min_idx = i\n            lst_min.append(lst[i])\n    return lst_min\n    \n    \n    # code here\n",
        "test": "assert     Find_Min([]) == []",
        "num_ids": 370
    },
    {
        "number": 458,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert         rectangle_area(10,5) == 50",
        "num_ids": 270
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'(^[A-Z])(\\w+)',r'\\1\\2',str1)\n",
        "test": "assert     remove_uppercase(\"TEST1\") == \"TEST1\"",
        "num_ids": 237
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst.sort(key = len)\n    index_lst = []\n    for index, element in enumerate(lst):\n        if index == 0:\n            index_lst.append(index)\n        else:\n            if element[0]!= element[index]:\n                return lst[index][0]\n    else:\n        return lst[index_lst[0]]\n",
        "test": "assert     Extract([[1,2],[3,4]])==3",
        "num_ids": 403
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n",
        "test": "assert     upper_ctr(\"Python\")==1",
        "num_ids": 221
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos = []\n    if len(list1) > 1:\n        for i in range(len(list1)):\n            for j in range(i+1,len(list1)):\n                combos.append(list1[i] + list1[j])\n        return combos\n    else:\n        return []\n",
        "test": "assert         combinations_list([1, 2, 3, 4, 5, 6]) == [[1,2,3,4,5,6]]",
        "num_ids": 431
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    \n    # base case\n    if n == 0:\n        return 0\n",
        "test": "assert ",
        "num_ids": 157
    },
    {
        "number": 464,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    if not all(k in dict for k in range(n)):\n        return False\n    return True\n",
        "test": "assert check_value({\"name\":\"John\",\"age\":35,\"salary\":450000},12) == False",
        "num_ids": 409
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.keys():\n        if (dict1[i]==''):\n            del dict1[i]\n    return dict1\n",
        "test": "assert         drop_empty({}) == {}",
        "num_ids": 381
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n",
        "test": "assert     max_product([0,1]) == 1",
        "num_ids": 669
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # define the list of tuples to add to\n    numbers = []\n    for i in range(0, len(test_tup) - 1):\n        numbers.append([test_tup[i], test_tup[i + 1]])\n    return numbers\n",
        "test": "assert     add_pairwise((10, 20, 30)) == (10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)",
        "num_ids": 405
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)): \n        product *= arr[i] \n    return product % n\n",
        "test": "assert     find_remainder([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 417
    },
    {
        "number": 472,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    tot = 0\n    for i in l:\n        if i >= 0:\n            tot += 1\n    if tot % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef check_Vowels(l): \n    '''\n    Write a python function to check whether the given list contains vowels or not.\n    '''\n    tot = 0\n    for i in l:\n        if i.lower() in 'aeiou':\n            tot += 1\n    if tot == 4:\n        return True\n    else:\n        return False\n",
        "test": "assert    check_Consecutive([5, 6, 5, 9, 3, 8, 5]) == False",
        "num_ids": 400
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_tuple = []\n    for ele in test_list1:\n        if ele in test_list2:\n            intersection_tuple.append(ele)\n",
        "test": "assert     tuple_intersection(('x', 'y', 'z'), ('z', 'x', 'y')) == 'z'",
        "num_ids": 377
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    ans=str1\n    for i in range(0,len(str1)):\n        if ch == str1[i]:\n            ans=ans[:i]+newch+ans[i+1:]\n    return ans\n",
        "test": "assert     replace_char(ch=\"a\",str1=\"\",newch='') == \"\", \"Should return empty string\"",
        "num_ids": 388
    },
    {
        "number": 475,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict()\n    for i in dict1:\n        sorted_dict[i] = dict1[i]\n    return sorted_dict\n",
        "test": "assert     sort_counter({'A': 1, 'B': 1, 'C': 3, 'D': 2, 'E': 4, 'F': 5}) == {'A': 1, 'B': 1, 'C': 3, 'D': 2, 'E': 4, 'F': 5}",
        "num_ids": 2883
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if nums==[]:\n        return 0\n    lst = sorted(nums)\n    maxval = lst[-1]\n    minval = lst[0]\n    for x in lst:\n        if x<maxval:\n            maxval=x\n        if x>minval:\n            minval=x\n    return maxval+minval\n",
        "test": "assert     big_sum([]) == 0",
        "num_ids": 480
    },
    {
        "number": 477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n",
        "test": "assert         is_lower('HEEE') == False",
        "num_ids": 132
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2=str1.lower()\n    #print(str2)\n    str3=str(str2)\n    #print(str3)\n    i=0\n    for j in str3:\n        if j=='a':\n            i=i+1\n            str3=str3.replace(str3[i],\"\")\n    #print(str3)\n    return str3\n",
        "test": "assert     remove_lowercase(\"a b c d\") == \"abcd\"",
        "num_ids": 494
    },
    {
        "number": 479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    elif n == 3 :\n        return 3\n    elif n == 4 :\n        return 4\n    elif n == 5 :\n        return 5\n    elif n == 6 :\n        return 6\n    elif n == 7 :\n        return 7\n    elif n == 8 :\n        return 8\n    elif n == 9 :\n        return 9\n    elif n == 10 :\n        return 10\n    elif n == 11 :\n        return 11\n    elif n == 12 :\n        return 12\n    elif n == 13 :\n        return 13\n    elif n == 14 :\n        return 14\n    elif n == 15 :\n        return 15\n    elif n == 16 :\n        return 16\n    elif n == 17 :\n        return 17\n    elif n == 18 :\n        return 18\n    elif n == 19 :\n        return 19\n    elif n == 20 :\n        return 20\n    elif n == 21 :\n        return 21\n    elif n == 22 :\n        return 22\n    elif n == 23 :\n        return 23\n    elif n == 24 :\n        return 24\n    elif n == 25 :\n        return 25\n    elif n == 26 :\n        return 26\n    elif n == 27 :\n        return 27\n    elif n == 28 :\n        return 28\n    elif n == 29 :\n        return 29\n    elif n == 30 :\n        return 30\n    elif n == 31 :\n        return 31\n    elif n == 32 :\n        return 32\n    elif n == 33 :\n        return 33\n    elif n == 34 :\n        return 34\n    elif n == 35 :\n        return 35\n    elif n == 36 :\n        return 36\n    elif n == 37 :\n        return 37\n    elif n == 38 :\n        return 38\n    elif n == 39 :\n        return 39\n    elif n == 40 :\n        return 40\n    elif n == 41 :\n        return 41\n    elif n == 42 :\n        return 42\n    elif n == 43 :\n        return 43\n    elif n == 44 :\n        return 44\n    elif n == 45 :\n        return 45\n    elif n == 46 :\n        return 46\n    elif n == 47 :\n        return 47\n    elif n == 48 :\n        return 48\n    elif n == 49 :\n        return 49\n    elif n == 50 :\n        return 50\n    elif n == 51 :\n        return 51\n    elif n == 52 :\n        return 52\n    elif n == 53 :\n        return 53\n    elif n == 54 :\n        return 54\n    elif n == 55 :\n        return 55\n    elif n == 56 :\n        return 56\n    elif n == 57 :\n        return 57\n    elif n == 58 :\n        return 58\n    elif n == 59 :\n        return 59\n    elif n == 60 :\n        return 60\n    elif n == 61 :\n        return 61\n    elif n == 62 :\n        return 62\n    elif n == 63 :\n        return 63\n    elif n == 64 :\n        return 64\n    elif n == 65 :\n        return 65\n    elif n == 66 :\n        return 66\n    elif n == 67 :\n        return 67\n    elif n == 68 :\n        return 68\n    elif n == 69 :\n        return 69\n    elif n == 70 :\n        return 70\n    elif n == 71 :\n        return 71\n    elif n == 72 :\n        return 72\n    elif n == 73 :\n        return 73\n    elif n == 74 :\n        return 74\n    elif n == 75 :\n        return 75\n    elif n == 76 :\n        return 76\n    elif n == 77 :\n        return 77\n    elif n == 78 :\n        return 78\n    elif n == 79 :\n        return 79\n    elif n == 80 :\n        return 80\n    elif n == 81 :\n        return 81\n    elif n == 82 :\n        return 82\n    elif n == 83 :\n        return 83\n    elif n == 84 :\n        return 84\n    elif n == 85 :\n        return 85\n    elif n == 86 :\n        return 86\n    elif n == 87 :\n        return 87\n    elif n == 88 :\n        return 88\n    elif n == 89 :\n        return 89\n    elif n == 90 :\n        return 90\n    elif n == 91 :\n        return 91\n    elif n == 92 :\n        return 92\n    elif n == 93 :\n        return 93\n    elif n == 94 :\n        return 94\n    elif n == 95 :\n        return 95\n    elif n == 96 :\n        return 96\n    elif n == 97 :\n        return 97\n    elif n == 98 :\n        return 98\n    elif n == 99 :\n        return 99\n    elif n == 100 :\n        return 100\n    elif n == 101 :\n        return 101\n    elif n == 102 :\n        return 102\n    elif n == 103 :\n        return 103\n    elif n == 104 :\n        return 104\n    elif n == 105 :\n        return 105\n    elif n == 106 :\n        return 106\n    elif n == 107 :\n        return 107\n    elif n == 108 :\n        return 108\n    elif n == 109 :\n        return 109\n    elif n == 110 :\n        return 110\n    elif n == 111 :\n        return 111\n    elif n == 112 :\n        return 112\n    elif n == 113 :\n        return 113\n    elif n == 114 :\n        return 114\n    elif n == 115 :\n        return 115\n    elif n == 116 :\n        return 116\n    elif n == 117 :\n        return 117\n    elif n == 118 :\n        return 118\n    elif n == 119 :\n        return 119\n    elif n == 120 :\n        return 120\n    elif n == 121 :\n        return 121\n    elif n == 122 :\n        return 122\n    elif n == 123 :\n        return 123\n    elif n == 124 :\n        return 124\n    elif n == 125 :\n        return 125\n    elif n == 126 :\n        return 126\n    elif n == 127 :\n        return 127\n    elif n == 128 :\n        return 128\n    elif n == 129 :\n        return 129\n    elif n == 130 :\n        return 130\n    elif n == 131 :\n        return 131\n    elif n == 132 :\n        return 132\n    elif n == 133 :\n        return 133\n    elif n == 134 :\n        return 134\n    elif n == 135 :\n        return 135\n    elif n == 136 :\n        return 136\n    elif n == 137 :\n        return 137\n    elif n == 138 :\n        return 138\n    elif n == 139 :\n        return 139\n    elif n == 140 :\n        return 140\n    elif n == 141 :\n        return 141\n    elif n == 142 :\n        return 142\n    elif n == 143 :\n        return 143\n    elif n == 144 :\n        return 144\n    elif n == 145 :\n        return 145\n    elif n == 146 :\n        return 146\n    elif n == 147 :\n        return 147\n    elif n == 148 :\n        return 148\n    elif n == 149 :\n        return 149\n    elif n == 150 :\n        return 150\n    elif n == 151 :\n        return 151\n    elif n == 152 :\n        return 152\n    elif n == 153 :\n        return 153\n    elif n == 154 :\n        return 154\n    elif n == 155 :\n        return 155\n    elif n == 156 :\n        return 156\n    elif n == 157 :\n        return 157\n    elif n == 158 :\n        return 158\n    elif n == 159 :\n        return 159\n    elif n == 160 :\n        return 160\n    elif n == 161 :\n        return 161\n    elif n == 162 :\n        return 162\n    elif n == 163 :\n        return 163\n    elif n == 164 :\n        return 164\n    elif n == 165 :\n        return 165\n    elif n == 166 :\n        return 166\n    elif n == 167 :\n        retur",
        "test": "assert ",
        "num_ids": 4190
    },
    {
        "number": 554,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n",
        "test": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == [19, 21]",
        "num_ids": 2336
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n**3-n\n",
        "test": "assert     difference(0) == 0, \"incorrect\"",
        "num_ids": 250
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    A.sort()\n    i = N-1\n    if (A[N-1] & (A[N]>>1))  == (A[N] & (A[N+1]>>1)): #  xor of both sides of pair\n        return N-1\n    while i >= 0 :\n        if (A[i]&(A[i+1]>>1)) == ((A[i]&(A[i+1]<<1))<<1): #  xor of left half of pair\n            return i\n        i = i-1\n    return -1\n    \ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    \n    A.sort()\n    i = N-1\n    if (A[N-1] & (A[N]>>1))  == (A[N] & (A[N+1]>>1)): #  xor of both sides of pair\n        return N-1\n    while i >= 0 :\n        if (A[i]&(A[i+1]>>1)) == ((A[i]&(A[i+1]<<1))<<1): #  xor of left half of pair\n            return i\n        i = i-1\n    return -1\n    \ndef find_Even_or_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even or odd.\n    '''\n    \n    A.sort()\n    i = N-1\n    if (A[N-1] & (A[N]>>1))  == (A[N] & (A[N+1]>>1)): #  xor of both sides of pair\n        return N-1\n    while i >= 0 :\n        if (A[i]&(A[i+1]>>1)) == ((A[i]&(A[i+1]<<1))<<1): #  xor of left half of pair\n            return i\n        i = i-1\n    return -1\n    \ndef find_Odd_or_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd or even.\n    '''\n    \n    A.sort()\n    i = N-1\n    if (A[N-1] & (A[N]>>1))  == (A[N] & (A[N+1]>>1)): #  xor of both sides of pair\n        return N-1\n    while i >= 0 :\n        if (A[i]&(A[i+1]>>1)) == ((A[i]&(A[i+1]<<1))<<1): #  xor of left half of pair\n            return i\n        i = i-1\n    return -1\n    \ndef main() : \n    '''\n    create 2d array for number of pairs and store pair values in 2d array.\n    '''\n    n = int(input())\n    for i in range(n):\n        pair = [0]*n\n        a = int(input())\n        for j in range(n):\n            pair[j] = a%2\n            a = a//2\n        a = a%2\n        pair_arr = [pair[i:i+2] for i in range(0, len(pair), 2)]\n        print(*pair_arr)\n    \nif __name__ == '__main__' : \n    main()\n",
        "test": "assert ",
        "num_ids": 425
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    output = \"\"\n    for letter in string:\n        if letter.isupper():\n            output += \"Q\"\n        else:\n            output += \"A\"\n    return output\n",
        "test": "assert     toggle_string('abc')",
        "num_ids": 2246
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n",
        "test": "assert     digit_distance_nums(0, 3) == 0",
        "num_ids": 284
    },
    {
        "number": 559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(len(a)):\n        max_sum = max(a[i], max_sum)\n",
        "test": "assert ",
        "num_ids": 273
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return union_elements(test_tup2, test_tup1)\n    if len(test_tup1) > len(test_tup2):\n        return union_elements(test_tup1, test_tup2)\n",
        "test": "assert     union_elements([1, 2, 3], [3, 4, 5, 6]) == [3, 4, 5, 6]",
        "num_ids": 731
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        longest_sublist_length = 0\n        for i in range(len(lst)):\n            for j in range(len(lst)):\n                if lst[i] == lst[j]:\n                    sublist_length = j - i + 1\n                    if sublist_length > longest_sublist_length:\n                        longest_sublist_length = sublist_length\n        return longest_sublist_length\n",
        "test": "assert     Find_Max_Length([]) == 0",
        "num_ids": 364
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    val = re.findall(r\"([^\\s`\\[]+)([^\\s`])\", text)[0]\n    val = re.sub(\"\\s+\", \" \", val[0])\n    val = re.sub(r\"(.)\\1*\", r\"\\1\\1\", val)\n    val = val.replace(\"\\n\", \" \")\n    val = val.replace(\"\\t\", \" \")\n    val = val.replace(\"\\r\", \" \")\n    val = val.replace(\"\\f\", \" \")\n    val = val.replace(\"\\v\", \" \")\n    val = val.replace(\"\\xa0\", \" \")\n    val = val.replace(\"\\u2028\", \"\\n\")\n    val = val.replace(\"\\u2029\", \"\\n\")\n    return val.strip()\n",
        "test": "assert     extract_values(\"this is a test \\\"\\\"\") == (\"this\", \"is\", \"a\", \"test \\\"\\\"\")",
        "num_ids": 724
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n == 1: \n        return 0\n    elif n < 1: \n        return -1\n    elif len(arr) == 1:\n        return 1\n    else: \n        return (count_Pairs(arr[1:],n-1) + count_Pairs(arr[:len(arr)-1],n-1))\n",
        "test": "assert     count_Pairs([1,2,3,4,5],2) == 0, 'Incorrect count_Pairs implementation'",
        "num_ids": 551
    },
    {
        "number": 565,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n    # def split(word): \n    #     return word.split(',') \n    #     #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')",
        "test": "assert     split('a b') == ['a', 'b']",
        "num_ids": 2213
    },
    {
        "number": 566,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    else:\n        return n % 10\n",
        "test": "assert     sum_digits(-9) == 0",
        "num_ids": 237
    },
    {
        "number": 567,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #your code here\n    if len(list1) == 1:\n        return True\n    if list1[0] >= list1[1]:\n        return False\n    return True\n",
        "test": "assert     issort_list([4, 3, 0, 1]) == False",
        "num_ids": 267
    },
    {
        "number": 568,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [[] for i in range(length)]\n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 319
    },
    {
        "number": 569,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sorted_list.append(sublist)\n    sorted_list = sorted(sorted_list, key=len)\n    return sorted_list\n",
        "test": "assert     sort_sublists([['A', 'B']]) == [['A', 'B']]",
        "num_ids": 547
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # iterate through each element in the lists.\n    # if element is in list, remove it from the list.\n    # if not, add the element to the list\n    # return the number of unique elements.\n    unique_elements = []\n    # set of unique elements\n    unique_elements = set(nums)\n    return len(nums) - len(unique_elements)\n",
        "test": "assert     two_unique_nums([1,2,3,4,4,5,5,6,6,7,7,8,8,8,8,9,9,9,9,10]) == [1,2,3,4,4,5,6,7,7,8,8,9,9,10]",
        "num_ids": 2343
    },
    {
        "number": 573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total_sum = 0\n    for element in list_data:\n        if element in unique_numbers:\n            total_sum += element\n    return total_sum\n",
        "test": "assert     unique_product([1,2,3,3,4,5,6,6,7,8,9,9,9,8]) == 0",
        "num_ids": 376
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4*r*h)/3\n",
        "test": "assert     surfacearea_cylinder(1.0,3.0) == 4.0, 'Your function returns incorrect surface area.'",
        "num_ids": 153
    },
    {
        "number": 576,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return len(A) == len(B) and A == B\n",
        "test": "assert     is_Sub_Array([2,3,4,5],1) == True",
        "num_ids": 211
    },
    {
        "number": 577,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print (\"The number should be greater than 0\")\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "test": "assert ",
        "num_ids": 285
    },
    {
        "number": 578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n",
        "test": "assert     is_valid_list(interleave_lists(['apple','banana','cherry'], ['mango','orange','apple'], ['kiwi','mango','banana'])) == True",
        "num_ids": 389
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Your code here\n    # Create a for-loop to iterate through each list element\n    # and compare two tuples elements in list one\n    # check if the element in list one is in list two\n    # return the tuple\n",
        "test": "assert     find_dissimilar(test_tup1, test_tup2) == None",
        "num_ids": 321
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_arr, odd_arr = test_tuple \n    even_idx, odd_idx = odd_arr.index(even_fnc), odd_arr.index(odd_fnc)\n    even_tuple = tuple(odd_arr[:even_idx]+even_arr[even_idx+1:])\n    odd_tuple = tuple(odd_arr[:odd_idx]+odd_arr[odd_idx+1:])\n    return even_tuple, odd_tuple \n",
        "test": "assert     even_ele((1, 4, 3, 2, 5), even_fnc) == (1, 4, 3, 2, 5)",
        "num_ids": 328
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # write your code here\n    return((b**2)*s)\n",
        "test": "assert     surface_Area(1,0) == 0",
        "num_ids": 216
    },
    {
        "number": 582,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({}), \"dictionary is not empty\"",
        "num_ids": 203
    },
    {
        "number": 583,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c=1\n    for i in range(1,num):\n        c=c*(i+1)\n    return c\n",
        "test": "assert     catalan_number(2) == 2",
        "num_ids": 307
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = {}\n    pattern = r'(.*)ly'\n    regex = re.compile(pattern)\n    m = regex.findall(text)\n    for i in m:\n        pos = i.find(':')\n        adverbs[i] = (pos, len(i))\n    return adverbs\n",
        "test": "assert     find_adverbs(\"Hello\\n World!\") == \"le\"",
        "num_ids": 746
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    for i in range(n,0,-1):\n        if items[0]<heapq.heappop(items):\n            return i\n    return 0\ndef search_k_expensive_items(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef find_k_least_expensive_items(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items2(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items3(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items4(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items5(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items6(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items7(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items8(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items9(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items10(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items11(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items12(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items13(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items14(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items15(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items16(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items17(dataset,k):\n    '''\n    Write a function that takes a dataset and a k and returns the k least expensive items in the dataset.\n    '''\n    heapq.heapify(dataset)\n    for i in range(k):\n        if dataset[0]<heapq.heappop(dataset):\n            return i\n    return 0\ndef get_k_least_expensive_items18(dataset,k):\n    '''\n    Writ",
        "test": "assert     expensive_items([1,3,4,5,6,7,8,8,9,10],8) == [1,3,4,5,6,7,8,8,9,10], \"Performance test failed\"",
        "num_ids": 502
    },
    {
        "number": 586,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:len(l)]\n",
        "test": "assert     split_Arr(['a', 'b', 'c'],3) == ['a', 'b', 'c']",
        "num_ids": 305
    },
    {
        "number": 587,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n    # Return a tuple.\n",
        "test": "assert     list_tuple([1,2,3]) == (1,2,3), 'list_tuple failed'",
        "num_ids": 128
    },
    {
        "number": 588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = nums[0] - nums[-1]\n    for i in range(1, len(nums)):\n        diff = max(diff, nums[i] - nums[i-1])\n    return diff\n",
        "test": "assert ",
        "num_ids": 448
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    '''\n    perfect_squares = []\n",
        "test": "assert     perfect_squares(100, 100000) == [], \"Function is not returning correct values\"",
        "num_ids": 234
    },
    {
        "number": 590,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x,y)\n",
        "test": "assert     polar_rect(0, 0) == (0,0)",
        "num_ids": 276
    },
    {
        "number": 591,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <=1:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert     swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 309
    },
    {
        "number": 592,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    ans = 0 \n    for i in range(0,k):\n        ans += (n*i)**i\n    return ans\n",
        "test": "assert     binomial_Coeff(1,0) == 0",
        "num_ids": 431
    },
    {
        "number": 593,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #return str(ip[:-1])\n    for i in range(len(ip)):\n        if ip[i]!= '0':\n            return ip\n    return ip\n",
        "test": "assert     removezero_ip('192.168.1.00') == '192.168.1.00'",
        "num_ids": 2307
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n",
        "test": "assert     diff_even_odd([2, 2, 2, 2, 2]) == 2, \"It's not the correct result.\"",
        "num_ids": 356
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Checking base cases\n    if len(str1)!= len(str2):\n        return -1\n",
        "test": "assert ",
        "num_ids": 2199
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += len(str(item))\n    return size\n",
        "test": "assert     tuple_size([(1,2,3), (5,), (1,2,3,1), (5,), (1,2,3,4,5,6,7,8,9,10)]) == 5, 'Incorrect tuple size'",
        "num_ids": 499
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if (arr1 == [] and arr2 == []):\n        return None\n    if (arr1 == [] or arr2 == []):\n        return None\n    if (k == 0):\n        return arr1[k]\n    if (k < 0):\n        return None\n    \n    # TEMPORARY HASH MAP\n    #     return arr2[k] if arr1[k] <= arr2[k] else arr1[k]\n    \n    arr3 = []\n    for arr in arr2:\n        arr3.append(arr)\n",
        "test": "assert     find_kth([1, 2, 3, 4, 5], [1, 2, 3, 5, 4], 3) == 3",
        "num_ids": 638
    },
    {
        "number": 598,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s = 0\n    num = number\n    for i in range(0,len(str(number))):\n        s += int(str(number)[i])\n    for i in range(len(str(s))):\n        if s%10==int(str(s)[i]):\n            return False\n    return True\n",
        "test": "assert     armstrong_number(12345) == False",
        "num_ids": 339
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Your code here\n    total = 0\n    for i in range(1, number + 1):\n        total = total + i\n    return total / number\n",
        "test": "assert     sum_average(1) == 1",
        "num_ids": 302
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "test": "assert     is_Even(2)",
        "num_ids": 192
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return -1\n    elif len(str1) == 1:\n        return str1[0]\n    else:\n        for i in range(0, len(str1)):\n            if str1[i] == str1[i+1]:\n                return str1[i]\n    return -1\n",
        "test": "assert     first_repeated_char(\"a\") == \"a\"",
        "num_ids": 383
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    ludic = []\n    for i in range(1, n+1):\n        lud = [j for j in range(1, i+1) if i%j == 0]\n        ludic.append(lud)\n    return ludic\n",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 348
    },
    {
        "number": 604,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n",
        "test": "assert         reverse_words('') == ''",
        "num_ids": 309
    },
    {
        "number": 605,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    \ndef prime_list(num):\n    '''\n    Write a function that generates a list of prime numbers up to and including the number passed to it.\n    '''\n    lst = []\n    for i in range(1, num + 1):\n        if prime_num(i):\n            lst.append(i)\n    return lst\n",
        "test": "assert     prime_num(3) == True",
        "num_ids": 330
    },
    {
        "number": 606,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n",
        "test": "assert     radian_degree(90) == 1.5707963267948966",
        "num_ids": 231
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = 0\n    # search the text for the pattern\n    while True:\n        pos = text.find(pattern, start)\n        # if no match, then we have found a match\n        if pos == -1:\n            # if we have reached the end of the string, we have a match\n            if end == len(text):\n                return ('', start, end)\n            # if we have a next match, we can't find it\n            return ('', -1, -1)\n        # if there is a match, we must check its end\n        if pos == len(text):\n            end = len(text)\n        # update the start index\n        start = pos + len(pattern)\n        # update the end index\n        end = pos + len(pattern) + len(pattern)\n",
        "test": "assert ",
        "num_ids": 480
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 1 : \n        return n\n    return n * bell_Number(n - 1)\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 353
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # your code goes here\n    pass\n",
        "test": "assert     remove_kth_element([1,2,2,3,4,2], 3) == [2,2,2,4,2,2]",
        "num_ids": 442
    },
    {
        "number": 611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[:, N-1])\n",
        "test": "assert ",
        "num_ids": 252
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return []\n    res=[]\n    for i in lst:\n        res.append(i[0])\n        res.append(i[1])\n    return res",
        "test": "assert     merge([]) == []",
        "num_ids": 434
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for item in test_list:\n        sum = sum + item\n    return sum\n",
        "test": "assert     cummulative_sum([1, 2, 3]) == 6, 'cummulative_sum() should return 6'",
        "num_ids": 292
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num_list = []\n    for i in range(len(nums)):\n        num_list.append(nums[i])\n    total = 0\n    for i in num_list:\n        total = total + i\n    average = total / len(nums)\n    return average\n",
        "test": "assert     average_tuple((1, 2, 3)) == 1.5",
        "num_ids": 498
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod_1 = test_tup1[0] % test_tup1[1] # getting the modulo of the first tuple\n    mod_2 = test_tup2[0] % test_tup2[1] # getting the modulo of the second tuple\n",
        "test": "assert     tuple_modulo((1, 2, 3, 4, 5), (5, 6, 7, 8, 9)) == (1, 4, 6, 8, 10)",
        "num_ids": 281
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d[0][0] > 0:\n        return 0\n    if d[0][-1] > 0:\n        return 0\n    if d[-1][-1] > 0:\n        return 0\n    jumps = 0\n    #set the current step\n    i, j = 0, 0\n    #calculate how many steps are going through the matrix\n    while i < steps:\n        #set current step\n        j = 0\n        while j < steps:\n            #check whether the current step is in the range of the matrix\n            #if so, update the current step to (i, j)\n            if i < d[j][0] and j < d[j][-1]:\n                i = i + 1\n                j = j + 1\n            #if not, continue\n            else:\n                j = j + 1\n        #jumps counter\n        jumps = jumps + 1\n    #return the number of jumps\n    return jumps\n",
        "test": "assert ",
        "num_ids": 1075
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)==0 or len(nums2)==0:\n        return []\n    else:\n        nums = [nums1[0]]\n        num2 = [nums2[0]]\n        i=0\n        while i < len(nums1):\n            if nums[0] == nums2[0]:\n                i+=1\n                continue\n            nums.append(nums[i]+nums[i+1])\n            num2.append(num2[i])\n            i+=2\n        return [nums,num2]\n",
        "test": "assert     div_list([], [])==[]",
        "num_ids": 526
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('1', '2').replace('3', '4').replace('5', '6').replace('7', '8').replace('9', '0')\n    print(test_str)\n    test_str_list = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            test_str_list.append(test_str[i])\n    test_str = ''.join(test_str_list)\n    print(test_str)\n    return test_str\n",
        "test": "assert ",
        "num_ids": 729
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    from itertools import combinations\n    from operator import mul\n    \n    nums = a\n    \n    for i in range(2, len(nums)):\n        if(mul(i, i) in nums):\n            nums.remove(mul(i, i))\n    \n    return len(nums)\n",
        "test": "assert     largest_subset([2]), \"The largest subset of a list is 2\"",
        "num_ids": 689
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n < 2:\n        return None\n    else:\n        return arr1[n//2]\n    \n    # If list is already sorted\n    if n % 2 == 0:\n        return get_median(arr1, arr2, n//2)\n    else:\n        return (arr1[n//2] + arr2[n//2]) / 2\n",
        "test": "assert     get_median([1, 2, 3, 4, 5], [1, 3, 5, 10, 15], 5) == 3",
        "num_ids": 475
    },
    {
        "number": 623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [pow(x,n) for x in nums]\n",
        "test": "assert ",
        "num_ids": 100
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Base case\n    if len(string) == 0:\n        return True\n    \n    # Is first letter uppercase\n    if string[0] == string[0].upper():\n        return is_upper(string[1:])\n    \n    # Is second letter uppercase\n    if string[0] == string[1].upper():\n        return is_upper(string[2:])\n    \n    # Is third letter uppercase\n    if string[0] == string[2].upper():\n        return is_upper(string[3:])\n    \n    return False\n",
        "test": "assert     is_upper(\"A\") == True",
        "num_ids": 297
    },
    {
        "number": 625,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if newList:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert     swap_List([2,1,3]) == [3,1,2]",
        "num_ids": 408
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area_circum(r) :\n        '''\n        Write a python function to find the area of a triangle that can be inscribed in a circle of a given radius.\n        '''\n        return r**2*math.pi\n    return area_circum(r)\n",
        "test": "assert     triangle_area(0) == 0",
        "num_ids": 216
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if end == 0:\n        return start\n    \n    p = start\n    while p < end:\n        if array[p] == end:\n            p += 1\n        elif array[p] > end:\n            end = p\n        else:\n            p += 1\n            \n    return end",
        "test": "assert     find_First_Missing([4,5,6,7,8,9,10,0]) == 4, 'incorrect'",
        "num_ids": 409
    },
    {
        "number": 628,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "test": "assert     replace_spaces('') == ''",
        "num_ids": 371
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\n",
        "test": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10], \"Check correctness\"",
        "num_ids": 317
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not ele in sub:\n        sub.append(ele)\n        adjac(ele[0], sub)\n        adjac(ele[1], sub)\n",
        "test": "assert     adjac(0, [1, 0]) == [0, 1]",
        "num_ids": 512
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \",\"_\").replace(\".\",\"_\")\n    return text\n",
        "test": "assert     replace_spaces(\"\") == ''",
        "num_ids": 313
    },
    {
        "number": 632,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # I will use the for loop to iterate over the list\n    for index in range(len(num_list)):\n        # if the number is 0\n        if num_list[index] == 0:\n            # add it to the end of the list\n            num_list.insert(index, num_list.pop(index+1))\n    return num_list\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 743
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) < 3:\n        return 0\n    arr.sort()\n    res = 0\n    arr.reverse()\n    for i in range(len(arr)) :\n        if i == 0 :\n            res += arr[i]\n        else :\n            if arr[i]!= arr[i-1] :\n                res += arr[i]\n            else :\n                continue\n    return res\n",
        "test": "assert     pair_xor_Sum([1,2,3,4,5,6], 6) == 5",
        "num_ids": 437
    },
    {
        "number": 635,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        val = iterable[i]\n        hq.heapreplace(iterable, val)\n    return iterable\n",
        "test": "assert     heap_sort([]) == []",
        "num_ids": 2703
    },
    {
        "number": 637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount>actual_cost:\n        return False\n    else:\n        return True\n",
        "test": "assert ",
        "num_ids": 151
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return v + (v/100)*(t - 32)\ndef velocity(v,t):\n    '''\n    Write a function that calculates the wind speed at a given speed in km/h given a temperature in celsius.\n    '''\n    return v * math.pow(0.621371, t)\ndef wind_direction(wind_chill,wind_speed):\n    '''\n    Write a function to determine the wind direction given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / wind_speed * 100,1)\ndef wind_speed_direction(wind_direction,wind_speed):\n    '''\n    Write a function that calculates the wind speed at a given speed in knots and a temperature in celsius.\n    '''\n    return round(wind_speed / wind_direction,1)\ndef wind_direction_direction(wind_direction,wind_speed,t):\n    '''\n    Write a function to determine the wind direction given the wind speed and wind chill index and temperature in celsius.\n    '''\n    return round(wind_direction / wind_speed * 100,1)\ndef wind_direction_speed(wind_direction,wind_speed,t):\n    '''\n    Write a function that calculates the wind speed at a given speed and a temperature in celsius.\n    '''\n    return wind_speed / wind_direction * math.pow(0.621371, t)\ndef wind_direction_t(wind_direction,wind_speed,t):\n    '''\n    Write a function to determine the wind direction given the wind speed and wind chill index.\n    '''\n    return round(wind_direction / wind_speed * 100,1)\ndef wind_direction_t_s(wind_direction,wind_speed,t):\n    '''\n    Write a function that calculates the wind speed at a given speed and a temperature in celsius.\n    '''\n    return round(wind_speed / wind_direction * math.pow(0.621371, t),1)\ndef wind_direction_t_c(wind_direction,wind_speed,t):\n    '''\n    Write a function that calculates the wind speed at a given speed and a temperature in celsius.\n    '''\n    return round(wind_speed / wind_direction * math.pow(0.621371, t),1)\ndef wind_direction_t_k(wind_direction,wind_speed,t):\n    '''\n    Write a function to determine the wind direction given the wind speed and wind chill index.\n    '''\n    return round(wind_direction / wind_speed * 100,1)\ndef wind_speed_t_c(wind_speed,t):\n    '''\n    Write a function that calculates the wind speed at a given speed and a temperature in celsius.\n    '''\n    return wind_speed / wind_direction * math.pow(0.621371, t)\ndef wind_speed_t_k(wind_speed,t):\n    '''\n    Write a function to determine the wind speed at a given speed and a temperature in celsius.\n    '''\n    return wind_speed / wind_direction * math.pow(0.621371, t)\ndef wind_direction_k(wind_chill,wind_speed,t):\n    '''\n    Write a function to determine the wind direction given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / wind_speed * 100,1)\ndef wind_speed_direction_k(wind_chill,wind_speed,t):\n    '''\n    Write a function to determine the wind speed at a given speed and a temperature in celsius.\n    '''\n    return round(wind_speed / wind_chill * 100,1)\ndef wind_chill_k(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and a temperature in celsius.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_s(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_c(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_k(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_k_s(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_c_s(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_c_c(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_k_s(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_c_c(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_k_s(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_c_c(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_k_s(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_c_c(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_k_s(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_chill / math.pow(0.621371, t) * 100,1)\ndef wind_chill_t_c_c(wind_chill,t):\n    '''\n    Write a function to determine the wind chill index given the wind speed and wind chill index.\n    '''\n    return round(wind_c",
        "test": "assert     wind_chill(6,1) == 26.3, 'Wrong value'",
        "num_ids": 258
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_nam = 0\n    for i in range(len(sample_names)):\n        if(sample_names[i][0].islower()):\n            sum_nam += len(sample_names[i])\n    return sum_nam\n",
        "test": "assert ",
        "num_ids": 2186
    },
    {
        "number": 640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    string=''\n    for item in items:\n        if item=='(':\n            string=string+')'\n        elif item==')':\n            string=string+'('\n    return string\ndef split_line(items):\n    '''\n    Write a function to split a line to a list of strings.\n    '''\n    line=''\n    for item in items:\n        line=line+' '+item\n    return line.split()\ndef words_in_string(line):\n    '''\n    Write a function to get all words in a string.\n    '''\n    words=[]\n    for item in line:\n        if item==' ':\n            continue\n        else:\n            words.append(item)\n    return words\ndef return_line_words(line):\n    '''\n    Write a function to return the line words.\n    '''\n    words=[]\n    for item in line:\n        if item==' ':\n            continue\n        else:\n            words.append(item)\n    return words\ndef return_words(line):\n    '''\n    Write a function to return the words in a line.\n    '''\n    words=[]\n    for item in line:\n        if item==' ':\n            continue\n        else:\n            words.append(item)\n    return words\ndef delete_words(line,words):\n    '''\n    Write a function to delete the words in a line.\n    '''\n    for item in words:\n        line=line.replace(item,'')\n    return line\ndef split_line_without_space(line):\n    '''\n    Write a function to split a line to a list of strings without spaces.\n    '''\n    line=line.split()\n    return line\ndef split_line_without_parenthesis(line):\n    '''\n    Write a function to split a line to a list of strings without spaces.\n    '''\n    line=line.split('(')\n    line=line[:-1]\n    return line\ndef check_parenthesis(line):\n    '''\n    Write a function to check if a line has a parenthesis.\n    '''\n    line=line.replace(')','(')\n    return line\ndef check_blank(line):\n    '''\n    Write a function to check if a line has a blank.\n    '''\n    line=line.replace(' ','')\n    return line\ndef check_space(line):\n    '''\n    Write a function to check if a line has a space.\n    '''\n    line=line.replace(' ','')\n    return line\ndef count_space(line):\n    '''\n    Write a function to count the spaces in a line.\n    '''\n    count=0\n    for item in line:\n        if item==' ':\n            count+=1\n    return count\ndef parenthesis_count(line):\n    '''\n    Write a function to count the parenthesis in a line.\n    '''\n    count=0\n    for item in line:\n        if item=='(' or item==')':\n            count+=1\n    return count\ndef letters_count(line):\n    '''\n    Write a function to count the letters in a line.\n    '''\n    count=0\n    for item in line:\n        if item in 'abcdefghijklmnopqrstuvwxyz ':\n            count+=1\n    return count\ndef words_count(line):\n    '''\n    Write a function to count the words in a line.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            count+=1\n    return count\ndef words_count_in_line(line):\n    '''\n    Write a function to count the words in a line.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            count+=1\n    return count\ndef sum_word_in_line(line):\n    '''\n    Write a function to count the sum of words in a line.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            count+=line.count(item)\n    return count\ndef sum_line_in_line(line):\n    '''\n    Write a function to count the sum of words in a line.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            count+=line.count(item)\n    return count\ndef capitalize_line_in_line(line):\n    '''\n    Write a function to capitalize the first letter of a word in a line.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            line=line.replace(item,'',1)\n            count+=1\n    return line.capitalize()\ndef words_count_with_brackets(line):\n    '''\n    Write a function to count the words in a line with brackets.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            count+=line.count(item)\n    return count\ndef count_brackets(line):\n    '''\n    Write a function to count the number of brackets in a line.\n    '''\n    count=0\n    for item in line:\n        if item=='(' or item==')':\n            count+=1\n    return count\ndef find_word(line,word):\n    '''\n    Write a function to find a word in a line.\n    '''\n    count=0\n    for item in line:\n        if item==word:\n            count+=1\n    return count\ndef words_count_with_punctuation(line):\n    '''\n    Write a function to count the words in a line with punctuation.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            count+=line.count(item)\n    return count\ndef words_count_with_brackets_and_punctuation(line):\n    '''\n    Write a function to count the words in a line with brackets and punctuation.\n    '''\n    count=0\n    for item in line:\n        if item in '!@#$%^&*()-_=+[{]}]':\n            count+=line.count(item)\n    return count\ndef find_first_space(line):\n    '''\n    Write a function to find the first space in a line.\n    '''\n    count=0\n    for item in line:\n        if item==' ':\n            count+=1\n    return count\ndef find_second_space(line):\n    '''\n    Write a function to find the second space in a line.\n    '''\n    count=0\n    for item in line:\n        if item==' ':\n            count+=1\n    return count\ndef find_last_space(line):\n    '''\n    Write a function to find the last space in a line.\n    '''\n    count=0\n    for item in line:\n        if item==' ':\n            count+=1\n    return count\ndef first_space_between_words(line):\n    '''\n    Write a function to find the first space in a line.\n    '''\n    count=0\n    for item in line:\n        if item==' ':\n            count+=1\n    return count\ndef second_space_between_words(line):\n    '''\n    Write a function to find the second space in a line.\n    '''\n    count=0\n    for item in line:\n        if item==' ':\n            count+=1\n    return count\ndef last_space_between_words(line):\n    '''\n    Write a function to find the last space in a line.\n    '''\n    count=0\n    for item in line:\n        if item==' ':\n            count+=1\n    return count\ndef find_first_parenthesis(line):\n    '''\n    Write a function to fin",
        "test": "assert     remove_parenthesis(\"()()[])\") == \"()\", \"Incorrect remove_parenthesis\"",
        "num_ids": 420
    },
    {
        "number": 641,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    s = str(n) \n    return int(s[-1]) \n",
        "test": "assert     is_nonagonal(1) == True",
        "num_ids": 327
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # If a word starts with 'z'\n    if re.match(r'(^\\w+)\\Z', text):\n        return True\n    # If a word ends with 'z'\n    elif re.match(r'(^\\w+)\\Z', text[-1]):\n        return True\n",
        "test": "assert     text_match_wordz_middle(\"z\") == True, \"Text is not correct\"",
        "num_ids": 2334
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    result = []\n    if(len(input) < k):\n        return input\n    else:\n        for i in range(k, len(input)):\n            result.append(input[i])\n        result = result[::-1]\n        for i in range(k):\n            result.insert(i, input[i])\n        return result",
        "test": "assert         reverse_Array_Upto_K(",
        "num_ids": 309
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup[key] = test_dict[key]\n",
        "test": "assert     add_dict_to_tuple(('cat', 'dog', 'horse'), {'food': 'ham', 'water':'spam'}) == ('cat', 'dog', 'horse', 'ham','spam')",
        "num_ids": 252
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if (len(cost) == 0):\n        return 0\n    elif (len(cost) == 1):\n        return cost[0][0]\n    elif (len(cost) == 2):\n        return (cost[0][0]+cost[1][0])/2\n    else:\n        result = 0\n        currentMax = 0\n        for i in range(len(cost)):\n            for j in range(len(cost[i])):\n                if (cost[i][j] > currentMax):\n                    currentMax = cost[i][j]\n            result += currentMax\n        result /= len(cost)\n        return result\n",
        "test": "assert     maxAverageOfPath(",
        "num_ids": 599
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = dict()\n    for student in students:\n        if not student['student_height'] or not student['student_weight']:\n            continue\n        if student['student_height'] > h or student['student_weight'] > w:\n            continue\n        else:\n            result[student['student_name']] = student\n    return result\n",
        "test": "assert ",
        "num_ids": 379
    },
    {
        "number": 723,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #Convert the lists into sets\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n    #Find the set difference\n    return len(nums1_set.difference(nums2_set))\n",
        "test": "assert     count_same_pair([1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 2, 2]) == 0",
        "num_ids": 581
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base!= 0:\n        digit = base % 10\n        base = base // 10\n        sum = sum + digit\n    return sum * power\n",
        "test": "assert ",
        "num_ids": 238
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    def split_quotation(text):\n        '''Split a string into sentences.\n        '''\n        sentences = re.split('(?<=[.?!])([^\".,!?])', text)\n        return sentences\n    def remove_quotation(sentences):\n        '''Remove quotation marks from sentences.\n        '''\n        sentences = [s.replace(u'\\u2029','') for s in sentences]\n        sentences = [s.replace('.', '') for s in sentences]\n        sentences = [s.replace(u'\\u2019','') for s in sentences]\n        sentences = [s.replace('.', '') for s in sentences]\n        return sentences\n    \n    def find_infinite_words(text):\n        '''\n        Find infinite words in a string.\n        '''\n        infinite_words = []\n        for word in text.split():\n            if re.search('[^\\w]', word):\n                infinite_words.append(word)\n        return infinite_words\n    \n    def find_the_nearest_one(sentences, word):\n        '''\n        Find the nearest word to the given one.\n        '''\n        i = 0\n        nearest_words = []\n        \n        while len(sentences) > i and sentences[i]!= word:\n            if re.search(word, sentences[i]):\n                nearest_words.append(sentences[i])\n                i += 1\n            else:\n                i += 1\n        \n        return nearest_words\n    \n    def print_nearest_one(sentences, word):\n        '''\n        Print the nearest one to the given one.\n        '''\n        print(word)\n        print(find_nearest_one(sentences, word))\n    \n    def find_the_nearest_word(sentences, word):\n        '''\n        Find the nearest word to the given one.\n        '''\n        nearest_word = \"\"\n        for sentence in sentences:\n            if word in sentence:\n                nearest_word = sentence\n                break\n        return nearest_word\n    \n    def remove_punctuation(sentences):\n        '''\n        Remove punctuation.\n        '''\n        for i in range(len(sentences)):\n            sentences[i] = sentences[i].translate(str.maketrans('', '', string.punctuation))\n        return sentences\n    \n    def remove_all_stopwords(sentences):\n        '''\n        Remove all stopwords.\n        '''\n        for i in range(len(sentences)):\n            sentences[i] = sentences[i].translate(str.maketrans('', '', string.punctuation))\n        return sentences\n    \n    def remove_stopwords(sentences):\n        '''\n        Remove all stopwords.\n        '''\n        for i in range(len(sentences)):\n            sentences[i] = sentences[i].translate(str.maketrans('', '', string.punctuation))\n        return sentences\n    \n    def remove_numbers(sentences):\n        '''\n        Remove all numbers.\n        '''\n        for i in range(len(sentences)):\n            sentences[i] = sentences[i].translate(str.maketrans('', '', string.digits))\n        return sentences\n    \n    def find_numbers(sentences, word):\n        '''\n        Find numbers to the given word.\n        '''\n        i = 0\n        numbers = []\n        \n        while i < len(sentences) and re.search(word, sentences[i]):\n            numbers.append(sentences[i])\n            i += 1\n        \n        return numbers\n    \n    def remove_numbers_stopwords(sentences):\n        '''\n        Remove all numbers and stopwords from sentences.\n        '''\n        for sentence in sentences:\n            sentence = sentence.translate(str.maketrans('', '', string.digits))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n            sen",
        "test": "assert     extract_quotation(text4) =='\"I'",
        "num_ids": 1411
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result\n",
        "test": "assert     multiply_elements([1,2,3,4]) == (6,12,24)",
        "num_ids": 377
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    summ = []\n    for i in range(len(lst1)):\n        summ.append(lst1[i] + lst2[i])\n    return summ\n",
        "test": "assert     sum_list([2, 5, 6, 8], [5, 3, 1, 4]) == [5, 4]",
        "num_ids": 741
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Your code here\n    temp=[]\n    i=0\n    while i<len(nums):\n        if nums[i]!=nums[i-1]:\n            temp.append(nums[i])\n        i+=1\n    return temp\n",
        "test": "assert ",
        "num_ids": 310
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    c = math.pi * r * r * (h/2)\n    return c\n",
        "test": "assert     lateralsurface_cone(0,0) == 0",
        "num_ids": 666
    },
    {
        "number": 732,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\".\", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\"/\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\":\", \":\")\n    text = text.replace(\"!\", \":\")\n    text = text.replace(\"?\", \":\")\n    text = text.replace(\"'\", \":\")\n    text = text.replace(\"@\", \":\")\n    text = text.replace(\"[\", \":\")\n    text = text.replace(\"]\", \":\")\n    text = text.replace(\"{\", \":\")\n    text = text.replace(\"}\", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"\\t\", \":\")\n    text = text.replace(\"\\n\", \":\")\n    text = text.replace(\"\\\"\", \":\")\n    text = text.replace(\"\\\\\", \":\")\n    return text\ndef csv_to_dict(input_file):\n    '''\n    Write a function to parse and convert a CSV file to a dictionary.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Parse the file\n    with open(input_file) as f:\n        reader = csv.reader(f)\n        csv_dict = {row[0]:row[1:] for row in reader}\n    return csv_dict\ndef create_dict(input_file, key_word):\n    '''\n    Create a dictionary from a csv file.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [key_word] + [word for row in csv_dict.values() for word in row]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_lower_case(input_file):\n    '''\n    Given a CSV file, return a dictionary with lowercase keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word.lower() for word in csv_dict.values()]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_capitalized(input_file):\n    '''\n    Given a CSV file, return a dictionary with capitalized keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word.capitalize() for word in csv_dict.values()]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_non_word(input_file):\n    '''\n    Given a CSV file, return a dictionary with keys that aren't words.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word.lower() for word in csv_dict.values()]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_numbers(input_file):\n    '''\n    Given a CSV file, return a dictionary with numbers as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word for word in csv_dict.values() if word.isnumeric()]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_urls(input_file):\n    '''\n    Given a CSV file, return a dictionary with urls as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word for word in csv_dict.values() if word.find('http') > -1]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_mixed(input_file):\n    '''\n    Given a CSV file, return a dictionary with mixed keys as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word for word in csv_dict.values() if word.endswith(\".csv\")]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_url_subdomain(input_file):\n    '''\n    Given a CSV file, return a dictionary with subdomain keys as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word for word in csv_dict.values() if word.endswith(\".csv\")]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_path(input_file):\n    '''\n    Given a CSV file, return a dictionary with path keys as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''",
        "test": "assert     replace_specialchar(\"HelloWorld\") == \"HelloWorld\", \"not correct\"",
        "num_ids": 515
    },
    {
        "number": 733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    i = 0\n    while i < n:\n        if A[i] == x:\n            return i\n        else:\n            i = i + 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1,2,3,4,5,6], 8) == 5",
        "num_ids": 359
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    current = arr[0]\n    res = arr[0]\n    for i in range(1, len(arr)):\n        current = current*arr[i]\n        res = res + current\n    return res\n",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 459
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & 0xF\n    if n == 0xF:\n        n = 1\n    else:\n        n = 0\n    return n\n",
        "test": "assert     set_middle_bits(0) == 0, \"The number is not padded correctly\"",
        "num_ids": 306
    },
    {
        "number": 736,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n",
        "test": "assert     left_insertion([1, 2, 3, 4, 5], 4) == 3",
        "num_ids": 334
    },
    {
        "number": 737,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = 'aeiouAEIOU'\n    if re.search(vowels, string): \n        return True\n    else: \n        return False\n",
        "test": "assert not check_str(' ')",
        "num_ids": 168
    },
    {
        "number": 738,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(0) == 0",
        "num_ids": 258
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    d = {3: 1, 5: 2, 7: 3, 9: 4, 11: 5, 13: 6, 17: 7, 19: 8, 21: 9, 23: 10, 29: 11, 31: 12, 37: 13, 41: 14, 43: 15, 47: 16, 53: 17, 59: 18, 61: 19, 67: 20, 71: 21, 73: 22, 79: 23, 83: 24, 89: 25, 97: 26, 101: 27, 103: 28, 107: 29, 109: 30, 111: 31, 113: 32}\n    index = 0\n    for i in range(n + 1): \n        a = math.floor(i / 10) \n        b = math.floor((i % 10) / 5) \n        c = math.floor((i % 10) / 3) \n        if (a, b, c) in d.values(): \n            index = d[a, b, c]\n    return index \n",
        "test": "assert     find_Index(8) == 0",
        "num_ids": 1300
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    keys = list(test_tup)\n    return {keys[i]: keys[i+1] for i in range(0, len(keys), 2)}\n",
        "test": "assert     tuple_to_dict((1, 2)) == {1: 2}",
        "num_ids": 554
    },
    {
        "number": 741,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s))==len(s)",
        "test": "assert     all_Characters_Same(\"abc\")==True",
        "num_ids": 149
    },
    {
        "number": 742,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0\n    # if the side of the tetrahedron is 1\n    if side == 1:\n        return 0\n    # if the side of the tetrahedron is 2\n    elif side == 2:\n        area = 0.25*side*side\n    elif side == 3:\n        area = 0.5*side*side\n    elif side == 4:\n        area = side**2\n    return area\n",
        "test": "assert     area_tetrahedron(0) == 0.0",
        "num_ids": 416
    },
    {
        "number": 743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return rotate_right(list, m-1) + [list[-1]] + rotate_right(list[:len(list)-m], m-1)\n",
        "test": "assert     rotate_right([1,2,3,4,5], 5) == [1,2,3,4,5,1]",
        "num_ids": 471
    },
    {
        "number": 744,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return not test_tup\n",
        "test": "assert     check_none([]) == True",
        "num_ids": 350
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # my own helper function:\n    def extract_digits(number):\n        '''Extract digits from an integer.'''\n        if type(number) is not int:\n            raise TypeError('number must be an integer')\n        if number < 1:\n            raise ValueError('number must be greater than 0')\n        else:\n            return list(map(int, str(number)))\n    \n    # initialize\n    num_dict = {}\n    result = []\n    \n    # iterate through each digit\n    for digit in extract_digits(startnum):\n        # check each digit against num_dict\n        if digit in num_dict:\n            # add to result if it matches\n            if num_dict[digit]!= digit:\n                result.append(digit)\n                num_dict[digit] = digit\n        else:\n            # add digit to num_dict\n            num_dict[digit] = digit\n    \n    # return the result\n    return result\n",
        "test": "assert ",
        "num_ids": 362
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r<0:\n        print(\"The radius of a sector must be positive\")\n        return None\n    elif a<0:\n        print(\"The angle of a sector must be positive\")\n        return None\n    elif a>math.pi:\n        print(\"The angle of a sector must be smaller than pi/2\")\n        return None\n    elif r==0:\n        print(\"The sector is the square root of the area of the radius\")\n        return math.pi*r**2\n    elif r==1:\n        print(\"The sector is the area of a circle\")\n        return r*r*math.pi\n    else:\n        n = math.sqrt(r*r-a*a)\n        print(n)\n        if n<0.001:\n            print(\"The sector is a square root of the area of the radius\")\n            return math.pi*n**2\n        else:\n            print(\"The sector is a circle\")\n            return n**2*math.pi\n",
        "test": "assert     sector_area(3,45)==None",
        "num_ids": 562
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M = len(X)\n    N = len(Y)\n    T = len(Z)\n    \n    # Create DP array to store results \n    # Create a 2D array to store lcs results\n    # Create a 2D array to store lcs results \n    # Create a 2D array to store lcs results \n    # Create a 2D array to store lcs results \n    \n    LCS = [[0 for x in range(N + 1)] for y in range(M + 1)] # 2D array to store LCS results \n    \n    # Build 2D array to store LCS results \n    # For each character in string X\n    # store results of X followed by LCS results of Y \n    # for each result of X, store in index in index\n    for i in range(M + 1):\n        for j in range(N + 1):\n            if i == 0 or j == 0:\n                LCS[i][j] = 0 # Base case \n            elif X[i - 1] == Y[j - 1]: # case if two characters are adjacent \n                LCS[i][j] = LCS[i - 1][j - 1] + 1\n            else: # else, it will be the last character \n                LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n    \n    # Store lcs results \n    # for each character in string X \n    # Store the index of the characters \n    # in the string \n    # in the 2D array \n    # Index of the first character in string X \n    # is stored in index \n    # Index of the last character in string X \n    # is stored in index \n    # in the 2D array \n    # Index of the first character in string Y \n    # is stored in index \n    # Index of the last character in string Y \n    # is stored in index \n    # in the 2D array \n    # Index of the first character in string Z \n    # is stored in index \n    # Index of the last character in string Z \n    # is stored in index \n    # in the 2D array \n    \n    for i in range(1, M + 1):\n        for j in range(1, N + 1):\n            if X[i - 1] == Y[j - 1]:\n                LCS[i][j] = LCS[i - 1][j - 1] + 1\n            else:\n                LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n    \n    # find the longest common subsequence \n    # from LCS results \n    # to string X, Y and Z \n    # and return the result \n    return LCS[M][N]\n",
        "test": "assert     lcs_of_three(\"abc\", \"def\", \"abcd\") == 0, \"1\"",
        "num_ids": 1399
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word_list = str1.split()\n    capital_words_str = \"\"\n    for word in word_list:\n        if word[0].isupper():\n            capital_words_str += word[0].upper() + \" \"\n        else:\n            capital_words_str += word[0] + \" \"\n    return capital_words_str\n",
        "test": "assert     capital_words_spaces(\"The quick brown fox jumped over the lazy dog! \") == \"The quick brown fox jumped over the lazy dog! \"",
        "num_ids": 476
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str",
        "test": "assert     sort_numeric_strings([]) == []",
        "num_ids": 441
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tup)\n",
        "test": "assert     add_tuple([1, 2, 3], (3, 4, 5)) == (1, 2, 3, 4, 5)",
        "num_ids": 2125
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2 * i] or arr[i] < arr[2 * i + 1]:\n        return False\n    if arr[i] > arr[2 * i]:\n        return True\n    if arr[2 * i] > arr[2 * i + 1]:\n        return True\n    return False\n",
        "test": "assert     check_min_heap_helper([1,2,3,4], 1) == False",
        "num_ids": 462
    },
    {
        "number": 752,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0:\n        return 0\n    \n    j = 1\n    while n > 1:\n        if n % j == 0:\n            n /= j\n            j += 1\n        else:\n            j += 1\n    return n\n",
        "test": "assert     jacobsthal_num(5) == 1",
        "num_ids": 2145
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    smallest_value = float('inf')\n    smallest_k = 0\n    for i in range(len(test_list)):\n        temp_value = test_list[i][0]\n        k = test_list[i][1]\n        if temp_value < smallest_value:\n            smallest_value = temp_value\n            smallest_k = k\n    return smallest_k\n",
        "test": "assert     min_k(((1,2,3,4),(1,2,3,4)),5) == ((1,2,3,4),1)",
        "num_ids": 804
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    common_elements_list.append(l1[i])\n    return common_elements_list\n",
        "test": "assert     extract_index_list([1, 1, 3], [3, 3], [1, 1, 3]) == [3, 3]",
        "num_ids": 962
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert second_smallest([1, 3, 2]), \"First smallest number is 1\"",
        "num_ids": 300
    },
    {
        "number": 756,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    pattern=r'(?:[a-zA-Z]{2,}){1,2}'\n    matches= re.findall(pattern, text)\n    return matches\n",
        "test": "assert     'a' not in text_match_zero_one('This is text that contains a: \\n ')",
        "num_ids": 545
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #print(test_list)\n    my_string = ''\n    for i in range(len(test_list)):\n        my_string += test_list[i]\n    #print(my_string)\n    #print(len(my_string))\n    return my_string.count('reversed')\n",
        "test": "assert     count_reverse_pairs([]) == 0",
        "num_ids": 464
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {}\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 291
    },
    {
        "number": 759,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_decimal('1.2') == True",
        "num_ids": 186
    },
    {
        "number": 760,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True\n",
        "test": "assert     unique_Element([2,2,2,1,2,2]) == False, \"Error in unique_Element\"",
        "num_ids": 333
    },
    {
        "number": 762,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    return True\n",
        "test": "assert     check_monthnumber_number(12)",
        "num_ids": 387
    },
    {
        "number": 763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Input\n    # arr = [1,4,3,2,8,5]\n    # n = 6\n    # Output\n    # minDiff = 6\n    arr = sorted(arr)\n    n = len(arr)\n    minDiff = arr[0] - arr[1]\n    for i in range(2,n):\n        minDiff = min(minDiff, arr[i] - arr[i-1])\n    return minDiff\n    \ndef minDiff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Input\n    # arr = [1,4,3,2,8,5]\n    # n = 6\n    # Output\n    # minDiff = 6\n    arr = sorted(arr)\n    n = len(arr)\n    minDiff = arr[0] - arr[1]\n    for i in range(2, n):\n        minDiff = min(minDiff, arr[i] - arr[i-1])\n    return minDiff\n    \ndef minDiff_index(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Input\n    # arr = [1,4,3,2,8,5]\n    # n = 6\n    # Output\n    # minDiff = 6\n    arr = sorted(arr)\n    n = len(arr)\n    minDiff = arr[0] - arr[1]\n    for i in range(2, n):\n        minDiff = min(minDiff, arr[i] - arr[i-1])\n    return minDiff\n    \ndef minDiff_idx(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Input\n    # arr = [1,4,3,2,8,5]\n    # n = 6\n    # Output\n    # minDiff = 6\n    arr = sorted(arr)\n    n = len(arr)\n    minDiff = arr[0] - arr[1]\n    for i in range(2, n):\n        minDiff = min(minDiff, arr[i] - arr[i-1])\n    return minDiff\n",
        "test": "assert     find_min_diff([4,8,2,6,3,5,9,8],10) == 8, 'The function should return 8'",
        "num_ids": 450
    },
    {
        "number": 764,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = 0\n    # Split the string into each character\n    for i in str:\n        if i.isdigit():\n            digits += 1\n        else:\n            break\n    return digits\n",
        "test": "assert     number_ctr('') == 0",
        "num_ids": 240
    },
    {
        "number": 765,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return (n+1) % 10 == 1\n",
        "test": "assert     is_polite(10) == True",
        "num_ids": 183
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        if l1[i]==l1[i+1]:\n            continue\n        else:\n            l.append((l1[i],l1[i+1]))\n    return l\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 492
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n",
        "test": "assert     get_pairs_count([2, 2, 3, 7], 7) == 0",
        "num_ids": 460
    },
    {
        "number": 769,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1)==len(li2):\n        li1_diff=[]\n        li2_diff=[]\n        i=0\n        while i<len(li1):\n            if li1[i]!=li2[i]:\n                li1_diff.append(li1[i])\n                li2_diff.append(li2[i])\n            else:\n                i=i+1\n        return li1_diff,li2_diff\n    else:\n        raise ValueError('Invalid Input')\n",
        "test": "assert     Diff([1,2,3],[1,2,3,4,5]) == [1,4,5,1,3]",
        "num_ids": 590
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    return odd_num_sum(n-1) + odd_num_sum(n-2) + odd_num_sum(n-3) + odd_num_sum(n-4)\n",
        "test": "assert     odd_num_sum(4) == 25, \"The function odd_num_sum returns wrong output.\"",
        "num_ids": 238
    },
    {
        "number": 771,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    def balanced(string):\n        open_brackets = ['(', '[', '{']\n        closed_brackets = [')', ']', '}']\n        stack = []\n        for char in string:\n            if char in open_brackets:\n                stack.append(char)\n            else:\n                if len(stack) == 0:\n                    return False\n                elif char == stack[-1]:\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0\n    stack = deque()\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            elif char == stack[-1]:\n                stack.pop()\n            else:\n                return False\n    return balanced(string=exp)\n",
        "test": "assert     check_expression('') == True",
        "num_ids": 513
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #Your code here\n    pass\n",
        "test": "assert     remove_length(test_str='aaaaaabbbbbccccddddeeeeffgghh', K=3) == 'aaaaaabbbbccccd'",
        "num_ids": 2192
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    str_split = re.findall(pattern,text)\n    if len(str_split) == 0:\n        return None\n    else:\n        for i in range(len(str_split)):\n            if i == len(str_split)-1:\n                return str_split[i]\n    return None\ndef occurrence_substring_dict(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    str_split = re.findall(pattern,text)\n    if len(str_split) == 0:\n        return None\n    else:\n        for i in range(len(str_split)):\n            if i == len(str_split)-1:\n                return str_split[i]\n    return None\n",
        "test": "assert     occurance_substring('sport', 'blah blah') == None",
        "num_ids": 2457
    },
    {
        "number": 775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(len(nums)):\n        if nums[index] % 2 == 1:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 5, 6, 8, 10]) == True",
        "num_ids": 200
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    # loop through each character\n    for char in test_str:\n        # if a letter is a vowel\n        if char in 'aeiou':\n            count += 1\n        # if a letter is a consonant\n        else:\n            # if a letter is a vowel, then it's a neighbor\n            if char in 'aeiou':\n                count += 1\n    return count\n",
        "test": "assert     count_vowels('') == 0, 'count_vowels test failed'",
        "num_ids": 551
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(set(arr))\n    for i in arr:\n        if arr.count(i)!= arr.count(i):\n            return i\n",
        "test": "assert ",
        "num_ids": 347
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1, lambda x: x in x)\n    consecutive_duplicates_list = [list(group) for key, group in grouped_list]\n",
        "test": "assert ",
        "num_ids": 334
    },
    {
        "number": 779,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        dict[list1[i]] = list1[i]\n    return dict\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 439
    },
    {
        "number": 780,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list.sort()\n    combinations_list = []\n    for i in test_list:\n        combinations_list.append(tuple(combinations(test_list,i)))\n    return combinations_list\n",
        "test": "assert     find_combinations([]) == [], \"find_combinations() should be returning None\"",
        "num_ids": 2307
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0 :\n            return False\n    return True\n",
        "test": "assert         count_divisors(5) == 1",
        "num_ids": 311
    },
    {
        "number": 782,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odds = 0\n    for i in range(len(arr) - 1):\n        if arr[i] % 2 == 1:\n            odds += arr[i]\n        else:\n            continue\n    return odds\n",
        "test": "assert     odd_length_sum([]) == 0",
        "num_ids": 349
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    c = int(255 * r + 0.5)\n    m = int(255 * g + 0.5)\n    y = int(255 * b + 0.5)\n    min_val = min(c, m, y)\n    max_val = max(c, m, y)\n    delta = max_val - min_val\n    if delta == 0:\n        return (0, 0, 0)\n    if delta == 0.000001:\n        return (0, 0, 0)\n    if m == 0:\n        s = 0\n    else:\n        s = delta / m\n    if c == 0:\n        h = 0\n    else:\n        h = delta / c\n    if y == 0:\n        v = 0\n    else:\n        v = delta / y\n    if s < 0.0031308:\n        h = 0\n    if s > 0.0031308:\n        h = 1\n    if h < 0.301029:\n        v = 0\n    if h > 0.301029:\n        v = 1\n    if v < 0.200002:\n        s = 0\n    if v > 0.200002:\n        s = 1\n    if s < 0.0001:\n        s = 0\n    return (int(h * 6.1134), int(s * 6.1134), int(v * 6.1134))\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0), \"rgb_to_hsv() should return (0, 0, 0)\"",
        "num_ids": 2720
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for item in list1:\n        if item % 2 == 0:\n            result *= item\n        else:\n            result /= item\n",
        "test": "assert     isinstance(mul_even_odd([3,4,5,6]), list) == False",
        "num_ids": 495
    },
    {
        "number": 785,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    res = tuple(map(int, test_str))\n    return res\n",
        "test": "assert     tuple_str_int((1, 2, 3)) == (1, 2, 3)",
        "num_ids": 433
    },
    {
        "number": 786,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if a[mid] <= x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n",
        "test": "assert     right_insertion(a=[1, 2, 3, 4], x=4) == right_insertion(a=[1, 2, 3, 4], x=4)",
        "num_ids": 507
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a = re.findall('a\\b', text)\n    b = re.findall('b\\b', text)\n    c = re.findall('c\\b', text)\n    return a == b == c\n",
        "test": "assert     text_match_three('abc abc abc aa bb bb aa bb aa bb bb abc aa bb bb aa aa aa bb aa aa bb bb aa bb aa aa bb aa aa aa bb aa aa aa bb aa aa aa bb aa aa aa aa aa bb aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa a",
        "num_ids": 592
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = test_list.split(',')\n    return tuple(test_list)\n",
        "test": "assert     new_tuple(['a', 'b', 'c'], ['aa', 'bb', 'cc']) == (\"a\", \"bb\", \"cc\"), \"Tuples must have a, b, and c separated by a, b, and c\"",
        "num_ids": 404
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_numbers = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_numbers.append(nums[i])\n    if len(even_numbers) == len(nums):\n        return True\n    else:\n        return False\n",
        "test": "assert     even_position([0,2,4,6,8,10]) == True",
        "num_ids": 233
    },
    {
        "number": 791,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x: not isinstance(x, tuple), test_tup))\n",
        "test": "assert     remove_nested((1, 2)) == (1, 2)",
        "num_ids": 275
    },
    {
        "number": 792,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) is list:\n            count+=1\n    return count\n    \nprint(count_list([1,2,3,4,5]))\nprint(count_list([1,2,3,4]))\n",
        "test": "assert     count_list([]) == 0, \"The function should return 0\"",
        "num_ids": 593
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    j=len(arr)-1\n    while arr[j]<=x:\n        j-=1\n    return j\ndef front(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    i=0\n    while i<len(arr):\n        if arr[i]>x:\n            return i\n        i+=1\n    return -1\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    j=len(arr)-1\n    while arr[j]<=x:\n        j-=1\n    return j\ndef at_position(arr,x):\n    '''\n    Write a python function to find the index of an element in a sorted array.\n    '''\n    j=last(arr,x)\n    i=first(arr,x)\n    if i==-1:\n        return -1\n    else:\n        return i\ndef print_array(arr):\n    for i in arr:\n        print(i,end=' ')\n    print()",
        "test": "assert last([0, 1, 3, -2, -4, 7], -3) == 5",
        "num_ids": 306
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a(?=\\w)', text) is not None\n",
        "test": "assert     text_starta_endb('abcd') == True",
        "num_ids": 593
    },
    {
        "number": 796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    print(dict)\n    total = 0\n    for key in dict:\n        total += dict[key]\n    print(total)\n    \ndef return_dictionary(dictionary):\n    '''\n    Write function to find the given dictionary.\n    '''\n    print(dictionary)\n    for key in dictionary:\n        print(key, dictionary[key])\n    \ndef main():\n    '''\n    1. Read in the file\n    2. Create a dictionary from the file\n    3. Print the sum\n    4. Print the dictionary\n    '''\n    filename = 'names.txt'\n    file = open(filename, 'r')\n    dict = {}\n    for line in file:\n        name, surname = line.strip().split('-')\n        dict[name] = surname\n    file.close()\n    return_sum(dict)\n    return_dictionary(dict)\n    \nif __name__ == '__main__':\n    main(",
        "test": "assert     return_sum(d1) == {1, 3, 6, 10, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50}",
        "num_ids": 396
    },
    {
        "number": 797,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 2:\n        return n\n    else:\n        return sum_odd(n-1) + sum_odd(n-2)\n",
        "test": "assert     sum_odd(0) == 0",
        "num_ids": 211
    },
    {
        "number": 798,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum=sum+arr[i]\n    return sum\n",
        "test": "assert     _sum([]) == 0",
        "num_ids": 241
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n | (1<<d) \n",
        "test": "assert     left_rotate(7,3) == 7",
        "num_ids": 284
    },
    {
        "number": 800,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('\\s+','', text)\n    return text\n",
        "test": "assert     'Hi' == 'Hi'",
        "num_ids": 2236
    },
    {
        "number": 801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # 1. Declare a variable called nums\n    # 2. Declare a variable called nums\n    # 3. Declare a variable called total\n    # 4. Declare a function called check\n    # 5. Initialize a list of numbers, as an array\n    # 6. Initialize a count, as an array\n    # 7. Use nums, nums, and total to call a function\n    # 8. Call a function with a value of x as argument\n    # 9. Print the value of the array\n    # 10. Call a function with a value of y as argument\n    # 11. Print the value of the array\n    # 12. Call a function with a value of z as argument\n",
        "test": "assert ",
        "num_ids": 521
    },
    {
        "number": 802,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    length = len(arr)\n    count = 0\n    j = 0\n    while j < length:\n        i = j\n        while i > 0:\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n                i -= 1\n                j -= 1\n            else:\n                i -= 1\n        j += 1\n    return count\n",
        "test": "assert     count_rotation([0,1,2,3]), 3",
        "num_ids": 460
    },
    {
        "number": 803,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if it is a perfect square\n    if n % 2 == 0:\n        # if it is perfectly square\n        if n == (n >> 1):\n            return True\n        else:\n            return False\n    else:\n        # check if it is not a perfect square\n        if n == (n >> 1):\n            return True\n        else:\n            return False\n        \n        ",
        "test": "assert     is_perfect_square(0) == True",
        "num_ids": 259
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if (i % 2) == 0:\n            return False\n    return True\n",
        "test": "assert     is_product_even([1,2,3,6,7,8,9,10]) == False, \"is_product_even: Expected False, got: \" + str(is_product_even([1,2,3,6,7,8,9,10]))",
        "num_ids": 304
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Your code here\n    return None\n",
        "test": "assert     max_sum_list([1,2,3,4,5,6,7,8,9,10]) == [9,10]",
        "num_ids": 321
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_chars = set(test_str)\n    return uppercase_chars\n",
        "test": "assert ",
        "num_ids": 338
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # O(N) solution\n    return nums[0]\n",
        "test": "assert     first_odd([2, 2, 2, 2, 2]) == 2",
        "num_ids": 381
    },
    {
        "number": 808,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    try:\n        if len(test_tup) == len(K):\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "test": "assert     check_K((\"b\", \"a\"), 1) == False",
        "num_ids": 239
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] < test_tup2[0] and test_tup2[1] < test_tup1[1]\n",
        "test": "assert     check_smaller((1, 2, 4, 5), (5, 2, 1, 2)) == False",
        "num_ids": 337
    }
]