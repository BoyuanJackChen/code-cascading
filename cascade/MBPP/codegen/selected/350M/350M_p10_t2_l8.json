[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    tup1 = test_tup1[:]\n    tup2 = test_tup2[:]\n    \n    for i in tup1:\n        for j in tup2:\n            if i == j:\n                tup1.remove(i)\n                tup2.remove(j)\n                break\n    \n    tup1 = list(tup1)\n    tup2 = list(tup2)\n    \n    return tup1, tup2\n    \n",
        "test": "assert     similar_elements([1, 2, 3, 4], [1, 3, 4]) == False",
        "num_ids": 1792,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    isPrime = True\n    for i in range(2, n):\n        if n % i == 0:\n            isPrime = False\n    return isPrime\n",
        "test": "assert     is_not_prime(4)==False",
        "num_ids": 2211,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Your code here\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n        print(heap)\n    i = 0\n    for j in range(n):\n        # print(heapq.heappop(heap))\n        heapq.heapreplace(heap,nums[i])\n        print(heap)\n        i += 1\n        # heapq.heapify(heap)\n        # heapq.heappop(heap)\n        # print(heap)\n        # print(heap[0])\n    # print(heap[0])\n    return heap\n",
        "test": "assert heap_queue_largest([],0)==[]",
        "num_ids": 1433,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x%2==0: \n        return 0\n    elif x==1: \n        return 1\n    else: \n        return 1\n",
        "test": "assert     is_Power_Of_Two (10) == False",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile(\"[a-zA-Z]\")\n    result = regex.findall(text)\n    return result\n",
        "test": "assert     find_char_long('abcde') == ['a', 'b', 'c', 'd', 'e']",
        "num_ids": 2906,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n",
        "test": "assert     square_nums([1, 2, 3]) == [1, 4, 9],'square_nums does not return correct values'",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations=0\n    for i in range(0,len(str)):\n        for j in range(0,len(str)):\n            if str[i]!=str[j]:\n                break\n            if str[i]!=str[j]:\n                rotations=rotations+1\n    return rotations\n",
        "test": "assert     find_Rotations(\"\") == 0",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ=0\n    l=len(s)\n    for i in range(l): \n        if s[i]==ch:\n            occ+=1\n        if occ>0:\n            break\n    for j in range(l-occ): \n        s=s[j:j+occ]+s[:j]+s[j+occ:]\n    return s\n",
        "test": "assert     remove_Occ(\"Aa\",'b') == 'Aa', \"Error Occurred\"",
        "num_ids": 1366,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    temp = [[0 for x in range(len(M[0]))] for x in range(len(M))]\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            temp[i][j] = M[i][j]\n    \n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if temp[i][j] == 0:\n                continue\n            for k in range(i+1, len(M)):\n                if temp[k][j] > 0:\n                    temp[i][j] -= temp[k][j]\n                    break\n            for k in range(j+1, len(M[0])):\n                if temp[i][k] > 0:\n                    temp[i][j] -= temp[i][k]\n                    break\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if temp[i][j] == 0:\n                M[i][j] = 0\n    return temp\n",
        "test": "assert     sort_matrix([]) == []",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return h * l * b\n",
        "test": "assert     find_Volume(1,1,1) == 1",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[A-Za-z0-9_.]+', text)!= None\n",
        "test": "assert     text_lowercase_underscore('There is nothing')==True",
        "num_ids": 2119,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    for i in range(0, a, 1):\n        for j in range(0, a, 1):\n            perimeter += 1\n    return perimeter\n",
        "test": "assert     square_perimeter(4) == 16",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = string.replace(\" \",\"\")\n    final_string = []\n    for i in new_string:\n        if i not in final_string:\n            final_string.append(i)\n    return final_string\n",
        "test": "assert     str_to_list('The quick brown fox jumps over the lazy dog.')!= 'fox,quick,brown,fox,jumps,over,the,lazy,dog'",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums.copy()\n    array.sort()\n    index = []\n    for i in range(len(array)):\n        if array[i] not in index:\n            index.append(array[i])\n    return len(index) >= 2\n",
        "test": "assert     test_duplicate([1,1,2]) == True",
        "num_ids": 2555,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 7:\n        return False\n    if x <= 7 and x >= 8:\n        return True\n    if x <= 8 and x >= 9:\n        return False\n    if x <= 9 and x >= 10:\n        return True\n    \n    \ndef is_woodball(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 7:\n        return False\n    if x <= 7 and x >= 8:\n        return True\n    if x <= 8 and x >= 9:\n        return True\n    if x <= 9 and x >= 10:\n        return True\n    \n    \ndef is_helicopate(x):\n    '''\n    Write a function to check if the given number is helicopate or not.\n    '''\n    if x <= 7:\n        return False\n    if x <= 7 and x >= 8:\n        return True\n    if x <= 8 and x >= 9:\n        return True\n    if x <= 9 and x >= 10:\n        return True\n    \n",
        "test": "assert     is_woodall(5) == False",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 1:\n        return True\n    if num == num:\n        return True\n    if num < num:\n        return False\n    else:\n        return rev(num-1)\n",
        "test": "assert     rev(1)!= 0 # rev(1) is not equal to rev(2)",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    num_count = 1\n    for i in range(1, len(arr)) : \n        if arr[i] > max_num : \n            max_num = arr[i] \n            num_count = 1\n        else : \n            num_count += 1\n    return max_num \n",
        "test": "assert     find_Max_Num([1, 2, 3, 4, 5]) == 5, \"One of the numbers is not possible\"",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0 and y < 0\n",
        "test": "assert     opposite_Signs(1,1) == False",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0: \n        return False\n    else: \n        i = 1\n        while n / i >= 10: \n            i += 1\n        if n % i == 0: \n            return True\n        else: \n            return False\n    \ndef is_primitive(n): \n    '''\n    Write a function to check if a given number is a primitive number.\n    '''\n    if n in [1, 3, 5, 7, 11, 13]: \n        return True\n    if n in [2, 4, 6, 9, 12, 15]: \n        return True\n    if n in [1, 3, 5, 7, 11, 13, 21, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]: \n        return True\n    if n in [2, 4, 6, 9, 12, 15, 20, 23, 28, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 91]: \n        return True\n    return False\n",
        "test": "assert     is_octagonal(10), \"The first argument does not indicate an octagonal number\"",
        "num_ids": 2688,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = defaultdict(int)\n    for i in range(len(s)):\n        if s[i]=='0':\n            pass\n        elif s[i]=='1':\n            result['1'] += 1\n        else:\n            result['0'] += 1\n    return sum(result.values())\n",
        "test": "assert     count_Substrings(\"\") == 0",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num_list = list(xs)\n    num_list.sort()\n    n = len(num_list)\n    for i in range(n):\n        if num_list[i] == xs[i]:\n            return num_list[i]\n",
        "test": "assert     smallest_num([1]) == 1",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = test_list[0] - test_list[1]\n    for pair in test_list:\n        if pair!= max_difference:\n            if max_difference < pair:\n                max_difference = pair\n    return max_difference\n",
        "test": "assert     max_difference((1, 2, 3)) == 3, \"invalid input\"",
        "num_ids": 1378,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup: tup[1])\n    return subjectmarks\n",
        "test": "assert     \"subject_marks\" == \"subject_marks\"",
        "num_ids": 2960,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for i in data_list:\n        result += i\n    return result\n",
        "test": "assert         recursive_list_sum([]) == 0",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for element in list:\n        if element > 0:\n            positive += 1\n    return positive\n",
        "test": "assert     pos_count([0,0,0,0,0,0,0,0,0,0]) == 0",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return n\n    elif n == 2:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "test": "assert         bell_number(1) == 1",
        "num_ids": 778,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if np.sum(A) < 2:\n        return False\n    for i in range(1, np.shape(A)[0] - 1):\n        if A[i] < A[i-1] and A[i] > A[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([3, 2, 1, 0, 5, 4]) == False",
        "num_ids": 993,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l==[]:\n        return True\n    for i in range(len(l)):\n        if s==l[i:i+len(s)]:\n            return True\n    return False\n        ",
        "test": "assert     is_sublist([1,2,3,4], [6,7,8]) == False",
        "num_ids": 881,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)<2:\n        return False\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!=len(Input[j]):\n                return False\n            if len(Input[i])==len(Input[j]) and Input[i] not in Input[j]:\n                return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1,1),(1,1),(2,2)]) == False",
        "num_ids": 2885,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums) - 1 - i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 1511,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # if n==1:\n    #     return True\n    # if n==2:\n    #     return True\n    # if n%2==0:\n    #     return False\n    # # print(n//2)\n    # if n<=1:\n    #     return False\n    # x=n-1\n    # y=n-1\n    # if x==y:\n    #     return True\n    # for i in range(1,n):\n    #     if (n-i)==1:\n    #         return True\n    #     if n%2==0:\n    #         if i<n//2:\n    #             if n-i in (n//2,n//2+1):\n    #                 continue\n    #         else:\n    #             if n-i in (n//2,n-1):\n    #                 continue\n    #     if n%2==0:\n    #         if i<n//2:\n    #             if x<y:\n    #                 continue\n    #         else:\n    #             if y<x:\n    #                 continue\n    # return False\n    def Square(n): \n        # if n%2==0:\n        #     return False\n        # x=n//2\n        # y=n//2\n        # if x==y:\n        #     return True\n        # for i in range(1,n):\n        #     if (n-i)==1:\n        #         return True\n        #     if n%2==0:\n        #         if i<n//2:\n        #             if n-i in (n//2,n//2+1):\n        #                 continue\n        #         else:\n        #             if n-i in (n//2,n-1):\n        #                 continue\n        # return False\n        # for i in range(1,n):\n        #     if (n-i)==1:\n        #         return True\n        #     if n%2==0:\n        #         if i<n//2:\n        #             if x<y:\n        #                 continue\n        #         else:\n        #             if y<x:\n        #                 continue\n        # return False\n        if n%2==0:\n            return False\n        x=n//2\n        y=n//2\n        for i in range(1,n):\n            if (n-i)==1:\n                return True\n            if n%2==0:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n            if n%2==0:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n            if n%2==1:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n        return False\n    def Square_2(n):\n        # if n%2==0:\n        #     return False\n        # x=n//2\n        # y=n//2\n        # if x==y:\n        #     return True\n        # for i in range(1,n):\n        #     if (n-i)==1:\n        #         return True\n        #     if n%2==0:\n        #         if i<n//2:\n        #             if n-i in (n//2,n//2+1):\n        #                 continue\n        #         else:\n        #             if n-i in (n//2,n-1):\n        #                 continue\n        #     if n%2==0:\n        #         if i<n//2:\n        #             if x<y:\n        #                 continue\n        #         else:\n        #             if y<x:\n        #                 continue\n        # return False\n        if n%2==0:\n            return False\n        x=n//2\n        y=n//2\n        for i in range(1,n):\n            if (n-i)==1:\n                return True\n            if n%2==0:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n            if n%2==0:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n            if n%2==1:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n        return False\n    if n%2==0:\n        return False\n    x=n//2\n    y=n//2\n    for i in range(1,n):\n        if (n-i)==1:\n            return True\n        if n%2==0:\n            if i<n//2:\n                if x<y:\n                    continue\n            else:\n                if y<x:\n                    continue\n        if n%2==0:\n            if i<n//2:\n                if x<y:\n                    continue\n            else:\n                if y<x:\n                    continue\n    return False\n",
        "test": "assert     dif_Square(12) == False",
        "num_ids": 2357,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if colors == patterns:\n        return True\n    return False\n",
        "test": "assert     is_samepatterns([1,1,1,1,1,1], [1,1,1,1,1,1]), \"Check the correctness of the function is_samepatterns\"",
        "num_ids": 5540,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Write your code here\n    tup = []\n    for i in range(len(test_list)):\n        if test_list[i][0] % K == 0:\n            tup.append(test_list[i])\n    return tup\n",
        "test": "assert     find_tuples([(2,2,2), (3,3,3)], 4) == []",
        "num_ids": 1224,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%10 == 1 or n%10 == 0: \n        return False\n    else: \n        return True\n",
        "test": "assert     is_Diff(1) == False",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    # YOUR CODE HERE\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert not     word_len('woord') == 'woord'",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0: \n        raise ValueError(\"The input must be >= 0\") \n    else: \n        return n % (n + 1)\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 4661,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * r * r * math.pi\n",
        "test": "assert     volume_sphere(0) == 0",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    strr = strr.lower()\n    res = \"\"\n    for i in range(0, len(strr)):\n        if strr[i] >= \"a\" and strr[i] <= \"z\":\n            res += chr(ord(strr[i]) - ord(\"a\") + 1)\n        else:\n            res += strr[i]\n    return res\n",
        "test": "assert     get_Char('F'), 'F'",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return sequence(n-1) + sequence(n-2)\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # TODO: your code here\n    return 0\n",
        "test": "assert     surfacearea_sphere(0) == 0",
        "num_ids": 1174,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # Corner cases\n    if n <= 0:\n        raise ValueError('n must be positive')\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 12\n    elif n == 5:\n        return 15\n    elif n == 6:\n        return 18\n    elif n == 7:\n        return 21\n    elif n == 8:\n        return 24\n    elif n == 9:\n        return 27\n    elif n == 10:\n        return 30\n    elif n == 11:\n        return 33\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 1269,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key in dict1:\n        d[key] = dict1[key]\n    for key in dict2:\n        d[key] = dict2[key]\n    for key in dict3:\n        d[key] = dict3[key]\n    return d\n",
        "test": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}",
        "num_ids": 1664,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = collections.Counter(list1)\n    return my_dict\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 7128,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(N,1,-1):\n        if N%i == 0:\n            closest = i\n            break\n    return closest\n    \ndef is_prime(N):\n    '''\n    Write a function that returns True if N is a prime number and False if it is not.\n    '''\n    for i in range(2,N):\n        if N%i == 0:\n            return False\n    return True\n",
        "test": "assert     closest_num(0) == 0",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n",
        "test": "assert     len_log(['We','must','have','a','nice','phone']) == 5",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    for i in range(len(str1)-len(sub_str)+1):\n        for j in range(i, i+len(sub_str)):\n            if str1[i:j+len(sub_str)] == sub_str:\n                return True\n    return False\n",
        "test": "assert     find_substring(\"123456789\", \"123\")",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2 == 0: return True \n    else: return False \n",
        "test": "assert     is_undulating(120) == True",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert     power(1,0) == 1",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key = itemgetter(1))\n    return sorted_list[0][0]\n",
        "test": "assert     index_minimum([(1,2), (3,4), (5,6)]) == 1 ",
        "num_ids": 2322,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst is None or len(lst) == 0:\n        return 0\n    min_length = len(lst)\n    for element in lst:\n        if element < min_length:\n            min_length = element\n    return min_length\n",
        "test": "assert     'Find_Min_Length' == 'Find_Min_Length' ",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "test": "assert     divisor(12), \"This is not a divisor\"",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    \n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in dictionary:\n                dictionary[list1[i][j]] += 1\n            else:\n                dictionary[list1[i][j]] = 1\n    return dictionary\n",
        "test": "assert     frequency_lists([[2, 3, 4], [4, 5, 3]])!= {2: 4, 3: 3}",
        "num_ids": 3171,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 0\n    for num in numbers:\n        sum = sum + num\n    return sum\n",
        "test": "assert     multiply_num([1]) == 1",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = ''\n    while n: \n        remainder = n % 2\n        if remainder == 0: \n            binary_string += '0'\n        else: \n            binary_string += '1'\n        n //= 2\n    return binary_string\n",
        "test": "assert     decimal_to_binary(1) == '1'",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if len(str(num)) == 1:\n        return num\n",
        "test": "assert     next_smallest_palindrome(0) == 0",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]",
        "test": "assert     kth_element([5, 4, 3, 2, 1, 0], 3) == 2",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n",
        "test": "assert     snake_to_camel(\"\") == ''",
        "num_ids": 2554,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n==0) or (m==0): \n        return 0\n    elif n==0: \n        return m\n    elif m==0: \n        return n\n    else: \n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m) \n",
        "test": "assert     eulerian_num(0, 3) == 0",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        for index, item in enumerate(sublist):\n            if type(item) is list:\n                sublist[index] = sort_sublists(item)\n    return input_list\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # start and end of loop\n    count = 0\n    # loop through the lst and check for True\n    for item in lst:\n        if item:\n            count = count+1\n    return count\n",
        "test": "assert     count([1,0,1,1,0,0,1]) == 4",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n",
        "test": "assert     add_lists(['foo', 'bar'], ('baz', 'quux')) == ['foo', 'bar', 'baz', 'quux']",
        "num_ids": 2777,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    merged_list.extend(num1)\n    merged_list.extend(num2)\n    merged_list.extend(num3)\n    return merged_list\n",
        "test": "assert     merge_sorted_list([], [], []) == []",
        "num_ids": 1715,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return n // 2 \n",
        "test": "assert     odd_Equivalent(0,0) == 0",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    \n    if type(nestedlist) == list:\n        for item in nestedlist:\n            if type(item) == list:\n                common.extend(common_in_nested_lists(item))\n            else:\n                common.append(item)\n    elif type(nestedlist) == set:\n        for item in nestedlist:\n            if type(item) == set:\n                common.extend(common_in_nested_lists(item))\n            else:\n                common.append(item)\n    else:\n        print('Please provide a valid list of lists.')\n        raise TypeError\n    return common\n",
        "test": "assert     common_in_nested_lists([]) == []",
        "num_ids": 1536,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(\"Test2\") == False",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # list1 is not empty\n    if len(list1) > 0:\n        # all elements in list1 are empty\n        for element in list1:\n            if len(element) > 0:\n                # all elements in list1 are empty\n                return False\n    return True\n    \ndef not_empty_dit(list1):\n    '''\n    Write a function to check whether a list contains any dictionary\n    '''\n    # list1 is empty\n    if len(list1) == 0:\n        return True\n    # list1 is not empty\n    for element in list1:\n        # each element in list1 is not empty\n        if len(element) > 0:\n            return False\n    # all elements in list1 are not empty\n    return True\n    \ndef similar(list1, list2):\n    '''\n    Write a function that returns whether two lists have the same length and \n    contain the same values.\n    '''\n    # compare elements in list1 and list2\n    # length and the number of elements in each list is same\n    if len(list1)!= len(list2):\n        return False\n    # if length of list1 and list2 are equal\n    # then all the elements in list1 are the same\n    elif len(list1) == len(list2):\n        # check every element in list1 and list2\n        for element in list1:\n            if element not in list2:\n                return False\n    return True\n    \ndef not_similar(list1, list2):\n    '''\n    Write a function that returns whether two lists have different lengths, \n    contain different values, and have different order.\n    '''\n    # length of list1 and list2 are not equal\n    # length of list1 and list2 should be equal\n    if len(list1)!= len(list2):\n        return False\n    # check whether all elements in list1 are equal\n    # and whether all elements in list2 are equal\n    elif len(list1) == len(list2):\n        # check whether every element in list1 and list2 are not equal\n        for element in list1:\n            if element not in list2:\n                return False\n    # all elements in list1 are not equal\n    # but elements in list2 are not equal\n    else:\n        # all elements in list1 and list2 are equal\n        return True\n    \ndef not_diff_list(list1, list2):\n    '''\n    Write a function that returns whether two lists have different lengths, \n    contain different values, and have different order.\n    '''\n    # length of list1 and list2 are not equal\n    # length of list1 and list2 should be equal\n    # and list2 should be not empty\n    if len(list1)!= len(list2):\n        return False\n    # check whether every element in list1 and list2 are not equal\n    # and length of list1 and list2 are equal\n    elif len(list1) == len(list2):\n        # check whether every element in list1 and list2 are not equal\n        for element in list1:\n            if element not in list2:\n                return False\n    # all elements in list1 and list2 are not equal\n    # and list1 and list2 are not empty\n    elif len(list1) == len(list2) and len(list1)!= 0:\n        return True\n    else:\n        # all elements in list1 and list2 are not equal\n        return False\n",
        "test": "assert     empty_dit([]) == True",
        "num_ids": 701,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for item in nums:\n        sum += item\n    return sum\n",
        "test": "assert     tuple_to_int([0]) == 0",
        "num_ids": 2561,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # first, we'll look at the lowest possible possible values in the given list\n    floats_list = []\n    for element in test_list:\n        try:\n            float(element)\n            floats_list.append(float(element))\n        except ValueError:\n            print(f'Unable to convert {element} to float')\n    return floats_list\n",
        "test": "assert     list_to_float([\"3.3\",\"3.3\",\"3.3\",\"3.3\",\"3.3\",\"3.3\",\"3.3\"]) == [3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3]",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('Hi'), '\"Hi\" is not a list'",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #Takes in array\n    #Returns element that appears only once\n    def find(arr, key, found):\n        if arr[key] == key:\n            found = True\n        return found\n    #Searches the array, and iterates through each key\n    for index in range(0, len(arr)-1):\n        found = find(arr, index, False)\n        found = find(arr, index, found)\n        if found:\n            return arr[index]\n    return -1\n",
        "test": "assert     search([]), \"Empty Array\"",
        "num_ids": 3148,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_p = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i < j and max_p < (list1[i] * list1[j]):\n                max_p = list1[i] * list1[j]\n    return max_p\n",
        "test": "assert     max_product_tuple([]) == 0",
        "num_ids": 1555,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for number in range(1, limit):\n        sum += int(str(number) + str(number)[::-1])\n        if sum > limit:\n            break\n    return sum\n",
        "test": "assert     amicable_numbers_sum(0) == 0",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    import numpy as np\n    a = np.array(a)\n    b = np.array(b)\n    angle = np.angle(a)\n    return angle\ndef z_rotation(z):\n    '''\n    Write a function to rotate a complex number\n    '''\n    import numpy as np\n    from math import degrees,acos,asin,atan2,sqrt\n    import numpy as np\n    z = np.array(z)\n    angle_r = np.angle(z)\n    rot_angle = degrees(angle_r)\n    rot_x = degrees(acos(z[0]))\n    rot_y = degrees(asin(z[1]))\n    rot_z = degrees(atan2(z[2],z[0]))\n    return [rot_x, rot_y, rot_z, rot_angle]\n",
        "test": "assert     angle_complex(1,0) == 0",
        "num_ids": 1212,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    my_list = list(string)\n    if len(string) == 0 or len(string) == 1:\n        return 0\n    else:\n        for i in range(len(string)-1):\n            if string[i] == string[i+1]:\n                continue\n            else:\n                if string[i] == '0' and string[i+1] == '1':\n                    my_list[i] = '1' + my_list[i+1]\n                if string[i] == '1' and string[i+1] == '0':\n                    my_list[i] = '0' + my_list[i+1]\n        return len(my_list[0]) - len(my_list[1])\n",
        "test": "assert     find_length(\"a\") == 0",
        "num_ids": 3772,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0 or b==0:\n        return 0\n    elif a==b:\n        return a\n    elif a%b==0:\n        return a//b\n    elif a%b==0:\n        return b\n    else:\n        return a+b\n    \n",
        "test": "assert     sum(2,3) == 5",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    return x * y\n",
        "test": "assert     multiply_int(1, 2) == 2",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_len = 0\n    word_list = list(str)\n    for word in word_list:\n        word_len = len(word)\n    return word_len > n\n",
        "test": "assert     long_words(4, ['p', 'py', 'l', 'ol', 'ab', 'abc','my', 'is','myself', 'l', 'e', 'le']) == ['ab', 'abc', 'le', 'le']",
        "num_ids": 1520,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] % 2!= 0:\n                return False\n    return True\n",
        "test": "assert      magic_square_test( [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ) == False, \"magic_square_test\"",
        "num_ids": 3112,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrences = -1\n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for key, value in freq.items():\n        if value == max(freq.values()):\n            max_occurrences = key\n    return max_occurrences\n",
        "test": "assert     max_occurrences([4,3,1,2,7,5,6,3,4,3]) == 3",
        "num_ids": 1096,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # if vowels are in another string, the function should return the reversed version of the string\n    if all(char in 'aeiou' for char in str1):\n        return str1[::-1]\n    # if the vowel does not exist in the string, the function should return the original string\n    return str1\n    \n    ",
        "test": "assert     reverse_vowels('') == ''",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\"+\", \".join([str(el) for el in tup1])+\")\"\n",
        "test": "assert     isinstance(tup_string(('red', 'blue')), str)",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    ans = 0\n    for num in nums:\n        if num < 0:\n            ans += abs(num)\n    return ans\n",
        "test": "assert     sum_negativenum([]) == 0, 'empty list'",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i % 2 == 0):\n            sum = sum + (i + 1) * n\n        else:\n            sum = sum + i * n\n    return sum\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 2665,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    count = 0\n    if type(nums) == type([0,1,2,3,4,5,6,7,8,9]):\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                zeros += 1\n            else:\n                count += 1\n    else:\n        for i in nums:\n            if i == 0:\n                zeros += 1\n            else:\n                count += 1\n    \n    if zeros == 0:\n        return 0\n    else:\n        return zeros/count\n",
        "test": "assert     zero_count([1]) == 0",
        "num_ids": 1014,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0: \n        return False \n    if n == 0: \n        return True \n    else: \n        num_of_power = 0\n        power = 0\n        while n: \n            rem = n%2\n            if rem == 1: \n                num_of_power += 1\n                n = n//2\n            else: \n                num_of_power += 1\n                n = n//2 - 1\n            power += 1\n        if num_of_power == power: \n            return True \n        else: \n            return False\n    \n    \ndef is_Perfect_Square(n): \n    ''' \n    Write a function that returns whether the number is a perfect square. \n    For any number, we have the following rules:  \n    \u2022 If the number is perfectly divisible by 2, then it is a perfect square. \n    \u2022 For any positive integer x > 1,  x can be written as  x*x  without any remainder. \n    The perfect squares are the squares of 2, 3, 5, 7, 11, and 13. \n    The sum of the squares of any non-perfect squares will not exceed 400. \n    \u2022 For any number  x >= 1,  the sum of its squares is exactly x. \n    \u2022 If n = x**2, then it must be a perfect square. \n    Write a Python function that takes a non-negative integer n and returns whether n is a perfect square.\n    '''\n    # It is always good to use recursive function\n    def rec(n): \n        if n < 2: \n            return True\n        elif n <= 3: \n            return n == 2 or n == 3\n        else: \n            return n % 2 == 0 and rec(n // 2) and rec((n - (n // 2)) % 2) \n    return rec(n)\n    \ndef is_Anagram(str1, str2): \n    ''' \n    A function that takes a string as input and returns True if it is an anagram of another string, \n    otherwise return False. \n    For any string x and y, we have \n    a string x followed by a string y. \n    For a string x and y, we have \n    a string x followed by all the characters in the same order as in y. \n    For a string x, we have a string x followed by all the characters in the same order as in y. \n    \n    A string is said to be anagram if it has the same number of characters and the characters have the same order. \n    A string is anagram if it has a single character repeated in exactly one place. \n    \n    For example, \"a\" is an anagram of \"aa\". \n    \n    Note: The strings that we will be testing are not necessarily in alphabetical order. \n    In other words, \"abba\" is not an anagram of \"abab\". \n    \n    '''\n    # Solution of one pointer\n    if len(str1)!= len(str2): \n        return False\n    \n    # Solution of two pointers\n    # First half is used to move left and second half is used to move right. \n    # Checks if both the strings are anagrams of each other, if they are anagrams, then we return True. \n    # Otherwise, the character is not an anagram of another character. \n    # In other words, there is only one character in a string that does not occur in another string. \n    def isAnagram(str1, str2): \n        # Generate a dictionary for key:val pair. \n        d = {} \n        # For each character in str1, add it to dictionary. \n        for i in str1: \n            if i not in d: \n                d[i] = 0 \n            d[i] += 1 \n        \n        # For each character in str2, add it to dictionary. \n        for i in str2: \n            if i not in d: \n                return False\n            d[i] -= 1 \n        \n        # Check if both are anagrams of each other \n        for k, v in d.items(): \n            if v!= 0: \n                return False\n        return True\n        \n    return isAnagram(str1, str2) \n    \ndef sortList(l): \n    '''\n    A function to sort a list in increasing order. \n    For example, [1, 5, 7, 9, 10, 16, 18, 20, 21, 25] \n    is sorted in increasing order. \n    '''\n    n = len(l) \n    for i in range(n-1): \n        for j in range(n-1-i): \n            if l[j] > l[j+1]: \n                l[j], l[j+1] = l[j+1], l[j] \n    return l \n    \ndef sum_of_digits(n): \n    '''\n    A function to calculate the sum of digits of an integer. \n    For example, 10 has 2 digits. \n    '''\n    # Recursion \n    if n == 0: \n        return 0 \n    else: \n        return n%10 + sum_of_digits(n//10) \n    \n    \ndef is_Palindrome(s): \n    '''\n    A function that takes a string as input and returns True if it is a palindrome. \n    It also returns whether it is palindrome or not. \n    For strings, we will be using a string as a check for a palindrome. \n    \n    '''\n    # Using boolean to handle substrings of a string\n    def check(s): \n        return s == s[::-1]\n    # Checking if string is palindrome\n    # For string is palindrome if string is of length same as string in reverse order.\n    if len(s) == 0: \n        return True\n    if len(s) == 1: \n        return check(s[0])\n    else: \n        return check(s[0]) and is_Palindrome(s[1:]) \n    \n    \ndef has_cycle(graph): \n    '''\n    A function to find if a given graph has a cycle. \n    For any directed graph, we can use DFS to find the cycles. \n    If a cycle exists, then it is a cycle. \n    In a directed graph, a cycle exists if there exists a path from the source vertex to any vertex in the list of paths from the source vertex. \n    For example, a graph with edges [2, 3, 5, 4, 6, 7] has a cycle. \n    If no cycle exists, then it is a no cycle. \n    '''\n    visited = set() \n    def dfs(v): \n        if v not in visited: \n            visited.add(v) \n            for w in graph[v]: \n                if w not in visited: \n                    dfs(w) \n    \n    # If a cycle exists, then return True \n    # Otherwise, return False \n    dfs(0) \n    # If there is a cycle, return True \n    # Otherwise, return False \n    return len(visited) >= 1 \n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 1125,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return (2*math.pi*r)\n    \n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    import math\n    return (math.pi*r*r)\n    \n",
        "test": "assert     circle_circumference(0) == 0, \"Circle circumference is incorrect\"",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat = []\n    for item in test_list:\n        if type(item) == list:\n            flat.extend(item)\n        else:\n            flat.append(item)\n    return flat\n",
        "test": "assert     extract_singly([]) == []",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_num = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    for i in range(len(nums)-1,0,-1):\n        if nums[i] > max_num:\n            max_num = nums[i]\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 1355,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result=0\n    \n    for item1 in list1:\n        for item2 in list2:\n            if item1==item2:\n                result+=1\n                \n    for item1 in list3:\n        for item2 in list3:\n            if item1==item2:\n                result+=1\n                \n    return result\n    \n",
        "test": "assert     count_samepair([], [], []) == 0, 'Test failed.'",
        "num_ids": 1397,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    # declare empty lists \n    lst = []\n    \n    # get the size of the tuple \n    size = len(Input)\n    \n    # add each value to the lst \n    for i in range(size): \n        lst.append(Input[i])\n    \n    # check if there are even numbers \n    if size%2 == 0: \n        \n        # check for number of even numbers \n        even = 0\n        \n        # iterate over the number of even numbers \n        for i in range(size): \n            \n            # check if the value of the next number is even \n            if Input[i+1]%2 == 0: \n                \n                # increment even count \n                even += 1\n        \n        # return the count \n        return(even) \n    \n    # if there is odd numbers \n    else: \n        \n        # check for number of odd numbers \n        odd = 0\n        \n        # iterate over the number of odd numbers \n        for i in range(size): \n            \n            # check if the next number is odd \n            if Input[i+1]%2 == 1: \n                \n                # increment odd count \n                odd += 1\n        \n        # return the count \n        return(odd) \n    \n    # return the number of lsts \n    # for all even and odd numbers \n    # else - return -1 \n    \ndef remove_dups(t): \n    \n    '''\n    Write a function to remove duplicate values from a tuple.\n    '''\n    \n    # declare empty lists \n    lst = []\n    \n    # get the size of the tuple \n    size = len(t)\n    \n    # add each value to the lst \n    for i in range(size): \n        lst.append(t[i])\n    \n    # get the number of duplicates \n    dup = 0\n    \n    # iterate over the number of duplicates \n    for i in range(size): \n        \n        # check if the value of the next number is duplicate \n        if t[i] in lst: \n            \n            # increment the dup count \n            dup += 1\n    \n    # return the dup count \n    return(dup) \n    \ndef remove_dups_2(t): \n    \n    '''\n    Write a function to remove duplicate values from a tuple.\n    '''\n    \n    # declare empty lists \n    lst = []\n    \n    # get the size of the tuple \n    size = len(t)\n    \n    # add each value to the lst \n    for i in range(size): \n        lst.append(t[i])\n    \n    # get the number of duplicates \n    dup = 0\n    \n    # iterate over the number of duplicates \n    for i in range(size): \n        \n        # check if the value of the next number is duplicate \n        if t[i] in lst: \n            \n            # increment the dup count \n            dup += 1\n    \n    # return the dup count \n    return(dup) \n",
        "test": "assert     find_lists(()) == 0",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    n = len(arr)\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        if arr[i] > 0:\n            ans += arr[i]\n    if ans == 0:\n        return 0\n    return abs(arr[i] - ans)\n",
        "test": "assert     max_Abs_Diff([0,1,3,9,5]) == 9, 'Wrong answer'",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # YOUR CODE HERE\n    pass\n",
        "test": "assert     find_solution(1, 1, 3) == None",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_1 = []\n    list_2 = []\n    list_1.extend(list1)\n    list_2.extend(list2)\n    for x in range(len(list_1)):\n        if list_1[x] not in list_2:\n            list_2.append(list_1[x])\n    return list_2\n",
        "test": "assert     remove_elements([], []) == [], \"Error in remove_elements()\"",
        "num_ids": 3350,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0 or n == 1:\n        return n\n    elif n == 2:\n        return 1\n    else:\n        return sum_series(n-2) + sum_series(n-4)\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    l = l/2\n    for i in range(s):\n        area += l * tan(pi/s)\n    return area\n",
        "test": "assert area_polygon(0, 0) == 0.0",
        "num_ids": 2546,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #count the divisors in the number\n    divs = [x for x in range(1, n+1)]\n    # make all the divisors in the number\n    for div in divs:\n        if n % div == 0:\n            return True\n        else:\n            continue\n    return False\n    \n    \ndef is_prime(n):\n    '''\n    return True if n is prime else return false\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    for i in range(5,int(math.sqrt(n))+1,6):\n        if n%i==0:\n            return False\n    return True\n",
        "test": "assert     div_sum(0) == 0",
        "num_ids": 958,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    a = 0\n    for i in range(len(str1)):\n        if str1[i].isupper() == True:\n            a += 1\n    return a\n",
        "test": "assert     count_char_position('abca') == 0",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        if A[i]%2==0:\n            count +=1\n    return count\n    \ndef find_even_pair2(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        if A[i]%2!=0:\n            count +=1\n    return count\n",
        "test": "assert     find_even_pair([]) == 0, \"test\"",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 2: \n        return n \n    else:\n        return next_power_of_2(n//2) + 1\n",
        "test": "assert     next_power_of_2(2) == 2",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    import collections\n    return collections.Counter(a).get(x,0)+1\n",
        "test": "assert     frequency(['a','b','a','c','a'], 'c'), \"incorrect answer\"",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # find the start of the range \n    lower = 0\n    upper = len(list1)-1\n    \n    # find the end of the range \n    while lower<=upper:\n        mid = (lower+upper)//2\n        if list1[mid]<m:\n            lower = mid + 1\n        else:\n            upper = mid -1\n    \n    # return the sum of the range \n    return sum(list1[lower:upper+1])\n    ",
        "test": "assert     sum_range_list([5,6,3,7], 0, 4) == 0",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a < 0:\n        print(\"Negative value passed\")\n    elif a <= 2:\n        print(\"Equilateral triangle\")\n    elif a <= 6:\n        print(\"Right Triangle\")\n    else:\n        print(\"Scalene triangle\")\n        \n    return a\n",
        "test": "assert     perimeter_pentagon(0) == 0",
        "num_ids": 4155,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    c = s.count('std')\n    print(c)\n    return c\n",
        "test": "assert     count_occurance(\"abc\") == 0",
        "num_ids": 2611,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_to_check = tuple(test_tuple)\n    for element in tuple_to_check:\n        if tuple_to_check.count(element) == len(tuple_to_check):\n            return True\n    return False\n",
        "test": "assert not check_type((1,2,3))",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(len(arr)):\n        count += arr[i]\n    if count > (n*(n/2)):\n        return True\n    return False\n",
        "test": "assert     is_majority([5, 4, 5, 5, 4, 4, 1, 4, 1, 1, 1, 1, 3], 10, 4) == False",
        "num_ids": 1204,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    setBits=0\n    while n > 0:\n        if n & 1 == 0:\n            setBits = setBits + 1\n        n = n >> 1\n    return setBits\n",
        "test": "assert count_Set_Bits(2) == 1",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = ''\n    for char in str:\n        if ord(char) % 2 == 1:\n            res += char\n    return res\n",
        "test": "assert     odd_values_string('') == ''",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n",
        "test": "assert     min_of_three(4,6,8) == 4, \"4 is not min of 3\"",
        "num_ids": 928,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n >= l and n <= r:\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(10,0,3)==False",
        "num_ids": 1355,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for i in range(n):\n        new_arr.append(0)\n    for i in arr:\n        if i < 0:\n            new_arr[i] = 1\n        else:\n            new_arr[i] = -1\n    new_arr[0] = 0\n    for i in range(1, n):\n        if new_arr[i] > 0:\n            new_arr[i] *= -1\n    return new_arr\n",
        "test": "assert     re_arrange_array([-1,2,-3,4,-1,-2], 1) == [[-1, 2, -3, 4]]",
        "num_ids": 1720,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    temp_str=str1.replace(char,'')\n    return temp_str\n",
        "test": "assert     replace_blank(\"a\",' ') == 'a'",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 120,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return list1[0:n]\n",
        "test": "assert     larg_nnum([],3) == []",
        "num_ids": 2929,
        "indeed": false
    },
    {
        "number": 233,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h)\n",
        "test": "assert     lateralsuface_cylinder(0,0) == 0",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l*l*l)\n    return volume\n",
        "test": "assert     volume_cube(0) == 0",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n > 0:\n        n &= 0b10000000\n        while n:\n            n &= n-1\n            if n & 1:\n                n |= 0b1\n                n -= 1\n            else:\n                n |= 0b0\n                n -= 1\n    else:\n        n &= 0b10000000\n        while n:\n            n &= n-1\n            if n & 1:\n                n |= 0b0\n                n -= 1\n            else:\n                n |= 0b1\n                n -= 1\n    return n\n",
        "test": "assert     even_bit_set_number(4) == 0",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)\n    \ndef most_common(test_list):\n    '''\n    Write a function that takes in a list of tuples, and returns the dictionary with the most common values in the list.\n    '''\n    return max(test_list, key=counter.get)\n",
        "test": "assert ",
        "num_ids": 8627,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    char_set = set(str)\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] not in char_set:\n            char_set.remove(str[i])\n            count += 1\n    return count\n    pass\n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 1640,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int((m+n-2)*(m+n-2)/2)\n",
        "test": "assert     get_total_number_of_sequences(2,2) == 2",
        "num_ids": 1122,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    return list1\n",
        "test": "assert     replace_list([\"Foo\",\"Bar\",\"Baz\",\"Foo\"], [\"Foo\",\"Bar\",\"Baz\"]) == [\"Foo\",\"Bar\",\"Baz\",\"Foo\"]",
        "num_ids": 1524,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    chars = 0\n    for char in str1:\n        chars += 1\n    return chars\n",
        "test": "assert     count_charac(\"\") == 0, \"count_charac() returned an incorrect result\"",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1) or (N == 2):\n        return N\n    elif N == 3:\n        return N\n    elif N < 3:\n        return N\n    else:\n        i = 4\n        while i*i <= N:\n            if N % i == 0:\n                return N\n            i += 4\n        return N\n",
        "test": "assert     next_Perfect_Square(1) == 1",
        "num_ids": 2754,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr: return 0\n    res, base = arr[0], arr[0]\n    for num in arr[1:]:\n        if num > base:\n            res += base\n            base = num\n        else:\n            res += num\n    return res\n",
        "test": "assert     max_sum([0,0,0,0]) == 0",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    new_number = 0\n    while number!= 0:\n        remainder = number % 10\n        new_number += remainder * (remainder//10)\n        number = number // 10\n    return new_number\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    sub_str = []\n    \n    i = 0\n    n = len(str)\n    \n    while i < n:\n        if str[i] == str[n - i - 1]:\n            if len(str[i:n - i]) > len(str[n - i - 1:n]):\n                sub_str.append(str[i:n - i])\n        else:\n            sub_str.append(str[i:n - i])\n        i += 1\n    \n    return len(sub_str)\n",
        "test": "assert     lps('agbcdfabc'),     \"The longest palindromic subsequence is 'agbcdfabc'.\"",
        "num_ids": 1058,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # get the sum of numbers from 1 to the sum\n    s = 0\n    for i in range(1,n+1):\n        s = s + i\n    return s\n    \ndef NthUglyNumber(n):\n    '''\n    Get the nth ugly number.\n    '''\n    # use a dictionary to store the factors of the numbers\n    d = {}\n    d['1'] = 1\n    d['2'] = 2\n    d['3'] = 3\n    d['4'] = 4\n    d['5'] = 5\n    d['6'] = 6\n    d['7'] = 7\n    d['8'] = 8\n    d['9'] = 9\n    d['10'] = 10\n    d['11'] = 11\n    d['12'] = 12\n    d['13'] = 13\n    d['14'] = 14\n    d['15'] = 15\n    d['16'] = 16\n    d['17'] = 17\n    d['18'] = 18\n    d['19'] = 19\n    d['20'] = 20\n    d['21'] = 21\n    d['22'] = 22\n    d['23'] = 23\n    d['24'] = 24\n    d['25'] = 25\n    d['26'] = 26\n    d['27'] = 27\n    d['28'] = 28\n    d['29'] = 29\n    d['30'] = 30\n    d['31'] = 31\n    d['32'] = 32\n    d['33'] = 33\n    d['34'] = 34\n    d['35'] = 35\n    d['36'] = 36\n    d['37'] = 37\n    d['38'] = 38\n    d['39'] = 39\n    d['40'] = 40\n    d['41'] = 41\n    d['42'] = 42\n    d['43'] = 43\n    d['44'] = 44\n    d['45'] = 45\n    d['46'] = 46\n    d['47'] = 47\n    d['48'] = 48\n    d['49'] = 49\n    d['50'] = 50\n    d['51'] = 51\n    d['52'] = 52\n    d['53'] = 53\n    d['54'] = 54\n    d['55'] = 55\n    d['56'] = 56\n    d['57'] = 57\n    d['58'] = 58\n    d['59'] = 59\n    d['60'] = 60\n    d['61'] = 61\n    d['62'] = 62\n    d['63'] = 63\n    d['64'] = 64\n    d['65'] = 65\n    d['66'] = 66\n    d['67'] = 67\n    d['68'] = 68\n    d['69'] = 69\n    d['70'] = 70\n    d['71'] = 71\n    d['72'] = 72\n    d['73'] = 73\n    d['74'] = 74\n    d['75'] = 75\n    d['76'] = 76\n    d['77'] = 77\n    d['78'] = 78\n    d['79'] = 79\n    d['80'] = 80\n    d['81'] = 81\n    d['82'] = 82\n    d['83'] = 83\n    d['84'] = 84\n    d['85'] = 85\n    d['86'] = 86\n    d['87'] = 87\n    d['88'] = 88\n    d['89'] = 89\n    d['90'] = 90\n    d['91'] = 91\n    d['92'] = 92\n    d['93'] = 93\n    d['94'] = 94\n    d['95'] = 95\n    d['96'] = 96\n    d['97'] = 97\n    d['98'] = 98\n    d['99'] = 99\n    d['100'] = 100\n    d['101'] = 101\n    d['102'] = 102\n    d['103'] = 103\n    d['104'] = 104\n    d['105'] = 105\n    d['106'] = 106\n    d['107'] = 107\n    d['108'] = 108\n    d['109'] = 109\n    d['110'] = 110\n    d['111'] = 111\n    d['112'] = 112\n    d['113'] = 113\n    d['114'] = 114\n    d['115'] = 115\n    d['116'] = 116\n    d['117'] = 117\n    d['118'] = 118\n    d['119'] = 119\n    d['120'] = 120\n    d['121'] = 121\n    d['122'] = 122\n    d['123'] = 123\n    d['124'] = 124\n    d['125'] = 125\n    d['126'] = 126\n    d['127'] = 127\n    d['128'] = 128\n    d['129'] = 129\n    d['130'] = 130\n    d['131'] = 131\n    d['132'] = 132\n    d['133'] = 133\n    d['134'] = 134\n    d['135'] = 135\n    d['136'] = 136\n    d['137'] = 137\n    d['138'] = 138\n    d['139'] = 139\n    d['140'] = 140\n    d['141'] = 141\n    d['142'] = 142\n    d['143'] = 143\n    d['144'] = 144\n    d['145'] = 145\n    d['146'] = 146\n    d['147'] = 147\n    d['148'] = 148\n    d['149'] = 149\n    d['150'] = 150\n    d['151'] = 151\n    d['152'] = 152\n    d['153'] = 153\n    d['154'] = 154\n    d['155'] = 155\n    d['156'] = 156\n    d['157'] = 157\n    d['158'] = 158\n    d['159'] = 159\n    d['160'] = 160\n    d['161'] = 161\n    d['162'] = 162\n    d['163'] = 163\n    d['164'] = 164\n    d['165'] = 165\n    d['166'] = 166\n    d['167'] = 167\n    d['168'] = 168\n    d['169'] = 169\n    d['170'] = 170\n    d['171'] = 171\n    d['172'] = 172\n    d['173'] = 173\n    d['174'] = 174\n    d['175'] = 175\n    d['176'] = 176\n    d['177'] = 177\n    d['178'] = 178\n    d['179'] = 179\n    d['180'] = 180\n    d['181'] = 181\n    d['182'] = 182\n    d['183'] = 183\n    d['184'] = 184\n    d['185'] = 185\n    d['186'] = 186\n    d['187'] = 187\n    d['188'] = 188\n    d['189'] = 189\n    d['190'] = 190\n    d['191'] = 191\n    d['192'] = 192\n    d['193'] = 193\n    d['194'] = 194\n    d['195'] = 195\n    d['196'] = 196\n    d['197'] = 197\n    d['198'] = 198\n    d['199'] = 199\n    d['200'] = 200\n    d['201'] = 201\n    d['202'] = 202\n    d['203'] = 203\n    d['204'] = 204\n    d['205'] = 205\n    d['206'] = 206\n    d['207'] = 207\n    d['208'] = 208\n    d['209'] = 209\n    d['210'] = 210\n    d['211'] = 211\n    d['212'] = 212\n    d['213'] = 213\n    d['214'] = 214\n    d['215'] = 215\n    d['216'] = 216\n    d['217'] = 217\n    d['218'] = 218\n    d['219'] = 219\n    d['220'] = 220\n    d['221'] = 221\n    d['222'] = 222\n    d['223'] = 223\n    d['224'] = 224\n    d['225'] = 225\n    d['226'] = 226\n    d['227'] = 227\n    d['228'] = 228\n    d['229'] = 229\n    d['230'] = 230\n    d['231'] = 231\n    d['232'] = 232\n    d['233'] = 233\n    d['234'] = 234\n    d['235'] = 235\n    d['236'] = 236\n    d['237'] = 237\n    d['238'] = 238\n    d['239'] = 239\n    d['240'] = 240\n    ",
        "test": "assert         harmonic_sum(1) == 1",
        "num_ids": 2382,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for i in array_nums1:\n        for j in array_nums2:\n            if i == j:\n                result.append(i)\n                break\n    return result\n    \n    \ndef intersection_sorted_array(array_nums1,array_nums2):\n    '''\n    Write a function that takes two sorted arrays as input and returns their intersection.\n    '''\n    result = []\n    for i in array_nums1:\n        if i not in result:\n            result.append(i)\n    for j in array_nums2:\n        if j not in result:\n            result.append(j)\n    return result\n",
        "test": "assert     intersection_array([1,2,3,4], [2,3,5,6]) == [2,3]",
        "num_ids": 1357,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X([1, 2, 2, 1, 1], 1) == 3, \"Test 1\"",
        "num_ids": 1123,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #loop through the list, removing the element, and adding it to the new position\n    new_position = []\n    for i in list:\n        if i==element:\n            new_position.append(i)\n        else:\n            new_position.append(i)\n    return new_position\n",
        "test": "assert     insert_element([1,2,3,4,5,6,7,8,3],0)==[1,2,3,4,5,6,7,8,3]",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if(numbers == 'end'):\n        return 'end'\n    else:\n        return numbers\n",
        "test": "assert     convert(0) == 0",
        "num_ids": 3678,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in range(0,len(list1)):\n        if list1[i] < 10:\n            counter+=1\n    return counter\n",
        "test": "assert     count_integer([]) == 0, 'count_integer should return 0'",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 255,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i])\n        for j in range(i + 1, len(l)):\n            result.append(l[j])\n    return result\n",
        "test": "assert     combinations_colors([], 0) == []",
        "num_ids": 1722,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # var my_list = [2,3,5,7,11,13,17]\n    # var count_primes = 0\n    # for number in my_list:\n    #     if number > 1:\n    #         for i in range(2, number):\n    #             if number % i == 0:\n    #                 break\n    #         else:\n    #             count_primes += 1\n    #     else:\n    #         continue\n    # return count_primes\n    return sum([1 for i in range(2, n) if n % i == 0])\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "test": "assert     swap_numbers(1,1) == (1,1), \"Test failed\"",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def elements(x):\n        '''\n        Return the maximum of all of the elements in the given tuple.\n        '''\n        return max(x)\n    return max(test_tup1)\n    \n    \n    \n    # Write your code here\n    pass\n",
        "test": "assert     maximize_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == 'c'",
        "num_ids": 1401,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    prime_list = []\n    \n    for i in range(1, n+1):\n        for j in range(i, n+1, i):\n            if j%2:\n                prime_list.append(j)\n    \n    return prime_list[-1]\n",
        "test": "assert     newman_prime(1) == 1",
        "num_ids": 1243,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n",
        "test": "assert     division_elements(('1','2'), ('1','3')) == (1, 1)",
        "num_ids": 2985,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = []\n    for i in range(L):\n        a.append(list1[i])\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     split_two_parts([1,2,3,4,5,6,7,8,9], 1) == [1]",
        "num_ids": 2937,
        "indeed": false
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Your code here\n    dog_age = 0\n    dog_age = h_age * 365\n    return dog_age\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 2541,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    ls = []\n    for i in range(0, len(S), step):\n        if (i+1) >= len(S):\n            return ls\n        ls.append(S[i:i+step])\n    return ls\n",
        "test": "assert     list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Your code here\n    return 0\n",
        "test": "assert     lateralsurface_cube(0) == 0",
        "num_ids": 1943,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 2:\n        return n*n\n    else:\n        return (n*n) + (square_Sum(n-1)//2)\nprint(square_Sum(5))\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n+1): \n        for j in range(i):\n            if (n % i == 0): \n                return i \n    return 0 \n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    value = ord(k)\n    return value\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_num = 0\n    index = 0\n    while(index < len(arr)):\n        if(arr[index] % 2 == 0):\n            even_num += arr[index]\n            sum += even_num\n            index += 1\n        else:\n            index += 1\n    return sum\n",
        "test": "assert     sum_even_and_even_index([]) == 0",
        "num_ids": 3093,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 120,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #Write your code here\n    num=int(n)\n    power=1\n    for x in range(2,num):\n        if num%x == 0:\n            num = num//x\n            power+=1\n        if power%2==0:\n            power=1\n    return num*power\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     even_Power_Sum(0) == 0",
        "num_ids": 6530,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list\n",
        "test": "assert     rear_extract([(1,1),(2,2),(3,3)]) == [1,2,3]",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # TODO: Implement this function\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n",
        "test": "assert     substract_elements([1, 2, 3], [2, 3, 1]) == (1, 3, 2)",
        "num_ids": 1061,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i % 2 == 0):\n            sum += math.pow(2, i)\n    return sum\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1629,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = r**3*h\n    return volume\n",
        "test": "assert     volume_cylinder(r=1,h=1) == 1",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # A function to create a dictionary with the appropriate data types\n    def dict_new(dict):\n        for key in dict:\n            if isinstance(dict[key], int) or isinstance(dict[key], float):\n                dict[key] = dict[key]\n        return dict\n    # Create an empty dictionary and populate it with the values of the user input.\n    dict = dict.copy()\n    # Condition to remove values greater than n\n    if n < 1:\n        print(\"You need to enter a value greater than or equal to 1.\")\n    else:\n        # For each key in the dictionary\n        for key in dict:\n            # Condition to filter out entries with values less than n\n            if dict[key] > n:\n                # If the value is a string\n                if isinstance(dict[key], str) or isinstance(dict[key], int):\n                    # If the value is an int\n                    if isinstance(dict[key], int):\n                        # Put the value in the dictionary with the key as a string\n                        dict[key] = dict[key]\n                # If the value is a float\n                elif isinstance(dict[key], float):\n                    # Put the value in the dictionary with the key as a string\n                    dict[key] = dict[key]\n        # Return the dictionary\n        return dict_new(dict)\n",
        "test": "assert     dict_filter({\"A\":1,\"B\":2,\"C\":3},1) == {'A':1,\"B\":2,\"C\":3}",
        "num_ids": 1325,
        "indeed": false
    },
    {
        "number": 278,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements([]) == 0, 'Test_2'",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if (n == 0): return 0\n    else:\n        return n % 4\n",
        "test": "assert     is_num_decagonal(1)",
        "num_ids": 3032,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert     sequential_search([4,7,8,1,2,3], 3), (\"sequential search failed\")",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # YOUR CODE HERE\n    if test_list == sorted(test_list):\n        return True\n    else:\n        return False\n    \n    #raise NotImplementedError\n",
        "test": "assert     all_unique(['a', 'a', 'b', 'b', 'c', 'c', 'a', 'd']) == False, \"test 1\"",
        "num_ids": 1047,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums2)):\n        if i < len(nums2):\n            new_list.append(nums1[i]-nums2[i])\n        else:\n            new_list.append(nums1[i])\n    return new_list\n",
        "test": "assert     sub_list([], []) == [], \"Should return an empty list\"",
        "num_ids": 1088,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return True\n",
        "test": "assert     validate(2390) == True",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "test": "assert         check_element([1,2,3,4,5,6],10)==False # False",
        "num_ids": 719,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a\\w')\n    return pattern.findall(text) == ['a', 'b']\n",
        "test": "assert     text_match_two_three('aabccdaa') == False, 'The text does not have the correct match'",
        "num_ids": 2961,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    import math\n    if (n < 2 or n < k):\n        return 0\n    if (k < 1 or k > len(a)):\n        return 0\n    if (k == 1):\n        return max(a)\n",
        "test": "assert     max_sub_array_sum_repeated(a = [0,0,0], n = 4, k = 0) == 0",
        "num_ids": 1768,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i**2\n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     square_Sum(1) == 1",
        "num_ids": 2510,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Write your code here\n    if not list1:\n        return 0\n    #Use a heap to store the length of the list\n    heap = []\n    for item in list1:\n        if len(item) > len(heap):\n            heap = item\n    return len(heap)\n",
        "test": "assert     max_length([]) == 0",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2: return n \n    elif n == 2: return 1\n    else: \n        ways = [0] * (n+1)\n        ways[0] = 1\n        ways[1] = 1\n        for i in range(2, n+1): \n            ways[i] = ways[i-1] + ways[i-2]\n        return ways[n]\n",
        "test": "assert     count_no_of_ways(1, 2) == 1, \"test_4\"",
        "num_ids": 1460,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n%2 == 0:\n        return int(n/2)\n    else:\n        return int((n-1)/2)\n",
        "test": "assert     find(1,0) == 0",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(2)\n    return S\ndef otherside_rightangledge(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(3)\n    return S\ndef otherside_rightangledge_2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(4)\n    return S\ndef otherside_rightangledge_3(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(5)\n    return S\ndef otherside_rightangledge_4(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(6)\n    return S\ndef otherside_rightangledge_5(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(7)\n    return S\ndef otherside_rightangledge_6(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(8)\n    return S\ndef otherside_rightangledge_7(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(9)\n    return S\ndef otherside_rightangledge_8(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(10)\n    return S\ndef otherside_rightangledge_9(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(11)\n    return S\ndef otherside_rightangledge_10(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(12)\n    return S\ndef otherside_rightangledge_11(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(13)\n    return S\ndef otherside_rightangledge_12(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(14)\n    return S\ndef otherside_rightangledge_13(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(15)\n    return S\ndef otherside_rightangledge_14(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(16)\n    return S\ndef otherside_rightangledge_15(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(17)\n    return S\ndef otherside_rightangledge_16(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(18)\n    return S\ndef otherside_rightangledge_17(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(19)\n    return S\ndef otherside_rightangledge_18(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(20)\n    return S\ndef otherside_rightangledge_19(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(21)\n    return S\ndef otherside_rightangledge_20(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(22)\n    return S\ndef otherside_rightangledge_21(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(23)\n    return S\ndef otherside_rightangledge_22(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(24)\n    return S\ndef otherside_rightangledge_23(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(25)\n    return S\ndef otherside_rightangledge_24(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(26)\n    return S\ndef otherside_rightangledge_25(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(27)\n    return S\ndef otherside_rightangledge_26(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(28)\n    return S\ndef otherside_rightangledge_27(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(29)\n    return S\ndef otherside_rightangledge_28(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(30)\n    return S\ndef otherside_rightangledge_29(w,h):\n    '''\n",
        "test": "assert     otherside_rightangle(1, 2) == 2, \"The function should return 2\"",
        "num_ids": 2715,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    max_val = listval[0]\n    for elem in listval:\n        if elem > max_val:\n            max_val = elem\n    return max_val\n",
        "test": "assert     max_val([1, 3, 5, 4]) == 5",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        if number < 0:\n            return -1\n        else:\n            i = 1\n            while i <= (number / i):\n                if number % i == 0:\n                    return i\n                else:\n                    i = i + 1",
        "test": "assert     sum_div(0) == 0",
        "num_ids": 2645,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    # traverse in array\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]: \n                inversions += 1\n    return inversions\n",
        "test": "assert     get_Inv_Count([1, 4, 5, 6, 2, 3]) == 6, 'Test Failed'",
        "num_ids": 1233,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for items in list1:\n        if isinstance(items, list):\n            flattened.extend(flatten_list(items))\n        else:\n            flattened.append(items)\n    return flattened\n",
        "test": "assert     flatten_list([['a', 'b'], ['c', 'd']]) == ['a', 'b', 'c', 'd']",
        "num_ids": 1242,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = 0\n    for t in stdata:\n        if t[0] > max_val:\n            max_val = t[0]\n    return max_val\n",
        "test": "assert     max_aggregate([(1, 2), (3, 4), (5, 6)]) == 5, \"the list should be of length 4\"",
        "num_ids": 5176,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(n):\n        if(bin(i).count('1')) == n:\n            count = count + 1\n    return count\n    #output : 10001\n",
        "test": "assert     (count_binary_seq(1) == 0), \"error in function count_binary_seq\"",
        "num_ids": 3010,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    l = 0\n    for i in d.items():\n        l += 1\n    return l\n",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(ranges)) :\n        if ranges[i] == index :\n            return arr[i]\n    return arr[-1]\n",
        "test": "assert     find_Element([1,2,3,4,5], [3,4,5,3,2], [3,2,1,3,1], 2) == 5",
        "num_ids": 2217,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\n",
        "test": "assert     start_withp(['a','b','a']) == ('a', 'b')",
        "num_ids": 5015,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return sum(a)\n    \n    if index+1 < n:\n        m = a[index]\n        m_prev = a[index-1]\n        m_next = a[index+1]\n        if m + m_prev > m_next + k:\n            return max_sum_increasing_subseq(a, n, index+1, k)\n        return m + m_prev + max_sum_increasing_subseq(a, n, index+1, k)\n    return 0\n",
        "test": "assert     max_sum_increasing_subseq(a, n, 2, 2) == 4",
        "num_ids": 3574,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x,y = tuplex[0],tuplex[1]\n    if y < m or x < n:\n        return -1\n    if y > m or x > n:\n        return -1\n    else:\n        return tuplex[2]\ndef get_idx_at_pos(tuplex, m, n, idx):\n    '''\n    Return the index of the given index in the tuple.\n    '''\n    #if not (0 <= idx < m):\n        #print('Invalid index. Use negative numbers.')\n    #    return -1\n    if idx < 0:\n        idx = m + idx\n    if idx > n - 1:\n        idx = m + (n - 1 - idx)\n    return idx\ndef get_cols_at_pos(tuplex, m, n, idx):\n    '''\n    Return the columns of the given index in the tuple.\n    '''\n    #if not (0 <= idx < m):\n        #print('Invalid index. Use negative numbers.')\n    #    return -1\n    if idx < 0:\n        idx = m + idx\n    if idx > n - 1:\n        idx = m + (n - 1 - idx)\n    return idx\n",
        "test": "assert     (colon_tuplex([1,2,3],2,2), 'Wrong case.')",
        "num_ids": 3225,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    \n    # largest product in both lists\n    L = sum(nums1[0:N])\n    r = 0\n    \n    # loop to find the largest product\n    for i in range(N):\n        if L < nums1[i]:\n            r = i\n            break\n    \n    # largest product from nums2\n    for j in range(N,len(nums2)):\n        if L < nums2[j]:\n            r = j\n            break\n    \n    # return the product\n    return r\n",
        "test": "assert     large_product(nums1=[1, 2, 3, 4], nums2=[3, 2, 7, 4], N=3) == 3",
        "num_ids": 1782,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    #your code here\n    print(a)\n    print(b)\n    return a if (a > b) else b\n    #to solve this we have to define a max function so we know the max value is the largest value\n    #then you just know that the max value is the largest in the list.\n    #that's the maximum in the list\n",
        "test": "assert     maximum(3,2) == 3",
        "num_ids": 503,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert     string_to_tuple('') == ()",
        "num_ids": 2684,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    else:\n        n = 1 if n == 1 else 0\n        return n\n",
        "test": "assert     set_left_most_unset_bit(0x01) == 0x1",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r==0 or r==h:\n        return 0\n    return (r*h)/math.pi\n",
        "test": "assert     volume_cone(0,0) == 0",
        "num_ids": 2722,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==2 or n==3:\n        return 2\n    else:\n        if n<2:\n            return n\n        else:\n            lst=[]\n            for i in range(1,n+1):\n                lst.append(i)\n            m=lst[0]\n            for j in range(1,len(lst)):\n                if lst[j]==lst[j-1]:\n                    continue\n                else:\n                    m=max(m,lst[j])\n                    continue\n            return m\n",
        "test": "assert     highest_Power_of_2(0) == 0",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 3:\n        return n\n    if n <= 5:\n        return 4\n    return 3 * find_lucas(n-3) + 5\n",
        "test": "assert     find_lucas(0) == 0",
        "num_ids": 2654,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for elem in list_:\n        new_list.append(elem.replace(string,''))\n    return new_list\n",
        "test": "assert     add_string([], '') == []",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if isinstance(l1, list):\n        l = []\n        for element in l1:\n            if isinstance(element, dict):\n                l.append(element)\n            else:\n                l.append({element: \"value\"})\n        return {\"result\": l}\n    elif isinstance(l2, list):\n        l = []\n        for element in l2:\n            if isinstance(element, dict):\n                l.append(element)\n            else:\n                l.append({element: \"value\"})\n        return l\n    elif isinstance(l3, list):\n        l = []\n        for element in l3:\n            if isinstance(element, dict):\n                l.append(element)\n            else:\n                l.append({element: \"value\"})\n        return l\n    elif isinstance(l3, dict):\n        l = {}\n        for key, value in l3.items():\n            if isinstance(value, list):\n                l[key] = convert_list_dictionary(l[key], value, l3[key])\n            else:\n                l[key] = l3[key]\n        return l\n    else:\n        return l3\n",
        "test": "assert     convert_list_dictionary(['a','b','c','d','e'], ['a','c','b','d'], ['x','y','z','w']) == {'a': {'x': 'a', 'y': 'c', 'z': 'b'}, 'c': {'x': 'c', 'y': 'd'}, 'b': {'x': 'b', 'y': 'e'}}",
        "num_ids": 2373,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #your code here\n    n_1 = n // 2\n    n_2 = n // 3\n    n_3 = n // 4\n    n_4 = n // 5\n    n_5 = n // 6\n    return max(max(max(n_1, n_2, n_3, n_4, n_5), n), n)\n    \n    \n    \n    \n",
        "test": "assert     get_max_sum(0) == 0",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = input_list[0]\n    for i in range(1, len(input_list)):\n        if input_list[i] > maximum:\n            maximum = input_list[i]\n    return maximum\n",
        "test": "assert     max_length_list([1,2,3,4,5,6]) == 6",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = set(test_tup)\n    if len(tup)!= len(set(tup)):\n        return False\n    return True\n    \ndef check_duplicates(test_tup):\n    '''\n    Write a function to check if given tuple contains duplicates.\n    '''\n    for i in test_tup:\n        if i in test_tup:\n            return False\n    return True\n    \ndef check_tuple(test_tup):\n    '''\n    Write a function to check if given tuple contains a single duplicate.\n    '''\n    if len(test_tup) == 1:\n        return False\n    for i in range(1,len(test_tup)):\n        if test_tup[i] in test_tup[:i]:\n            return False\n    return True\n    \ndef check_order(test_tup):\n    '''\n    Write a function to check if given tuple contains the same order.\n    '''\n    if len(test_tup) < 2:\n        return False\n    for i in range(len(test_tup) - 1):\n        if test_tup[i]!= test_tup[i + 1]:\n            return False\n    return True\n    \ndef is_in_range(num):\n    '''\n    Write a function to check if a given number is within a range.\n    '''\n    if num <= 0 or num >= 10 ** 6:\n        return False\n    else:\n        return True\n    \ndef is_in_range(num):\n    '''\n    Write a function to check if a given number is within a range.\n    '''\n    if num <= 0 or num >= 10 ** 6:\n        return False\n    elif num >= 10 ** 6:\n        return True\n    else:\n        return True\n    \ndef make_test_tup():\n    '''\n    Write a function to create a tuple of one digit and one digit.\n    '''\n    for i in range(0,10):\n        tup = str(i) + str(i)\n        test_tup.append(tup)\n    \ndef prime_checker(num):\n    '''\n    Write a function to check if given number is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef check_prime(test_tup):\n    '''\n    Write a function to check if given tuple contains a prime number.\n    '''\n    num_list = []\n    num_list.append(test_tup[0])\n    for i in range(1,len(test_tup)):\n        if prime_checker(test_tup[i]) == True:\n            num_list.append(test_tup[i])\n            \n    if len(num_list) == 0:\n        return False\n    return True\n",
        "test": "assert         check_distinct(('a','b','c','d'))",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # character counts\n    character_counts = {}\n    # loop through the given string\n    for char in str1:\n        # if char is in the dictionary, increment the count\n        if char in character_counts:\n            character_counts[char] += 1\n        # else add it\n        else:\n            character_counts[char] = 1\n    # find the first occurance of that character\n    return char\n",
        "test": "assert     first_non_repeating_character('abracadabra') == 'a'",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    flag = 0\n    for c in string: \n        if c in string:\n            flag += 1\n    return flag == len(string)\n",
        "test": "assert     check_char('asd')",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    import statistics\n    numbers = [a,b,c]\n    numbers.sort()\n    return numbers[len(numbers)//2]\n",
        "test": "assert     median_numbers(1,1,1) == 1",
        "num_ids": 880,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += num\n    return sum_of_digits\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # TODO: WRITE YOUR CODE HERE\n    a = test_tup1[0]\n    b = test_tup2[0]\n    result = []\n    for i in range(0, len(a)):\n        if a[i]!= b[i]:\n            result.append(1)\n        else:\n            result.append(0)\n    return result\n",
        "test": "assert     bitwise_xor(test_tup1, test_tup1) == (0, 0, 0)",
        "num_ids": 1566,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique = set()\n    for i in test_list:\n        if i not in unique:\n            unique.add(i)\n    return len(unique)\n",
        "test": "assert     extract_freq([]) == 0, \"It should be 0\"",
        "num_ids": 1371,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    a = []\n    for elem in test_tup1:\n        a.append(elem)\n    for elem in test_tup2:\n        a.append(elem)\n    \n    return tuple(a)\n",
        "test": "assert     add_nested_tuples((\"hi\", \"there\"), (\"hi\", \"there\")) == (\"hi\", \"there\", \"hi\", \"there\")",
        "num_ids": 1445,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n",
        "test": "assert     minimum(0,0)==0",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] in tuple1:\n            return True\n    return False\n    \ndef get_tuple(tupl1,tupl2):\n    '''\n    Write a function to get the the tuple of two tuples.\n    '''\n    return tupl1,tupl2\n    \ndef del_tuple(tupl):\n    '''\n    Write a function to delete a tuple.\n    '''\n    tupl.pop()\n    return tuple(tupl)\n    \ndef sort(list1):\n    '''\n    Write a function to sort a list.\n    '''\n    list1.sort()\n    return list1\n    \ndef add_tuple(tupl,tuple2):\n    '''\n    Write a function to add a tuple to another tuple.\n    '''\n    tupl.append(tuple2)\n    return tuple(tupl)\n    \ndef reverse(tup):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuple(reversed(tup))\n    \ndef gen_unique_numbers():\n    '''\n    Write a function to generate a list of unique numbers in a list.\n    '''\n    numbers = list(range(0,100))\n    return numbers\n    \ndef add_numbers(numbers):\n    '''\n    Write a function to add two numbers.\n    '''\n    numbers.append(11)\n    return numbers\n    \ndef insert_numbers(numbers,num):\n    '''\n    Write a function to insert an element in a list.\n    '''\n    numbers.insert(2,num)\n    return numbers\n    \ndef is_even(num):\n    '''\n    Write a function to check whether the element of a list is even.\n    '''\n    if num % 2 == 0:\n        return True\n    return False\n",
        "test": "assert     check_tuplex('1','3') == False",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Write your code here\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     find_Parity(3) == False",
        "num_ids": 2471,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    result = ''\n    for i in range(len(s)):\n        num = int(s[i])\n        if num < 9:\n            result += str(num)\n        else:\n            result += str(num//10)\n            num = num % 10\n    return int(result)\n",
        "test": "assert     rearrange_bigger(66) == 66",
        "num_ids": 3163,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    #num1 = num1[1:] + num1[0]\n    #num2 = num2[1:] + num2[0]\n    \n    #nums1 = nums1[1:] + nums1[0]\n    #nums2 = nums2[1:] + nums2[0]\n    \n    h = []\n    for i in range(0,len(nums1)):\n        heapq.heappush(h,(nums1[i],i+1))\n    \n    smallest_pair = []\n    for i in range(k-1):\n        heapq.heappop(h)\n        smallest_pair.append(heapq.heappop(h))\n        heapq.heappush(h,(nums2[smallest_pair[0]],smallest_pair[1]))\n    \n    return smallest_pair\n    ",
        "test": "assert     k_smallest_pairs([1,1,1,1,1], [1,1,1,1,1], 1) == []",
        "num_ids": 2022,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(tuple(map(min, zip(list1, list1[1:])))[0], tuple(map(min, zip(list1, list1[1:])))[1])\n",
        "test": "assert     min_product_tuple([(1,2,3), (1,3,4), (1,2,1), (2,3,4), (2,1,3), (2,1,2), (3,4,5)]), \"The list is empty\"",
        "num_ids": 1413,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval:\n        min = listval[0]\n        for val in listval:\n            if val < min:\n                min = val\n        return min\n    else:\n        return None\n",
        "test": "assert     min_val([0,1,2,3,4,5,6,7,8,9]) == 0, \"incorrect result\"",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split()\n    return''.join(word[::-1])\n",
        "test": "assert     snake_to_camel('foo') == 'foo'",
        "num_ids": 778,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([\"a\", \"b\", \"c\"], 1) == \"b\", \"Test 1 failed\"",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    if list1==None and list2==None:\n        return True\n    elif list1==None or list2==None:\n        return False\n    else:\n        if list1[0]<=list2[0] or list1[0]>=list2[0] or list1[-1]<=list2[-1] or list1[-1]>=list2[-1]:\n            return True\n        else:\n            return False\n",
        "test": "assert     overlapping(['a','a','a','b','b'],['a','b','a','a','a'])",
        "num_ids": 3022,
        "indeed": false
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_p = arr[0]*arr[1]\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i]*arr[j] > max_p:\n                max_p = arr[i]*arr[j]\n                max_i = i\n                max_j = j\n    return(max_i, max_j)\n",
        "test": "assert ",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # note that we are not interested in order\n    \n    # first, map each tuples into a list of their first element\n    list_of_tuples = list(map(tuple,Input))\n    \n    # remove duplicate tuples\n    list_of_tuples = list(set(list_of_tuples))\n    \n    # now sort them, return the first element\n    return list_of_tuples[0]\n    \ndef main():\n    # list of tuples\n    Input = [(1,2),(2,3),(3,4),(4,5)]\n    \n    # find the first element\n    print(\"The first element in the list is: \" + str(group_tuples(Input)))\n    \n    # map the tuples back to a list\n    # but now we only care about the first element\n    Output = list(map(tuple,Input))\n    \n    # now sort the tuples\n    Output.sort()\n    \n    # now print out the list\n    print(Output)\n",
        "test": "assert     group_tuples([(1, 2), (2, 3), (3, 1)]), 'passed:'+ str(group_tuples([(1, 2), (2, 3), (3, 1)]))",
        "num_ids": 1186,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0: \n        return None\n    \n    else:\n        pivot = lst[0]\n        for x in lst:\n            if x > pivot:\n                pivot = x\n        \n        return pivot\n        \n",
        "test": "assert     Find_Max([]) == (None), \"Should be an empty list.\"",
        "num_ids": 987,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    length = len(list1)\n    for i in range(length):\n        total_sum += list1[i]\n    return total_sum\n",
        "test": "assert     round_and_sum([1,2,3,4,5]) == 15",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**3\n    return sum\n",
        "test": "assert     cube_Sum(1) == 1",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if test_tup:\n        return tuple(test_tup)\n    else:\n        return ()\n",
        "test": "assert     concatenate_tuple([1, 2, 3, 4, 5, 6]) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + 1\n    avg = sum/n\n    return avg\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    output_tuple = []\n    for test_item in test_tuple:\n        output_tuple.append(test_item[0])\n    return output_tuple\n",
        "test": "assert     extract_rear(((1, 'Hello'), (2, 'World'))) == [1, 2], \"passed\"",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    index = []\n    for i in range(len(list1)):\n        if list1[i] == x:\n            index.append(i)\n    return len(index)\n",
        "test": "assert     count_element_in_list([], 5) == 0",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #FIRST\n    #Odd number\n    # RETURN TRUE IF ODD nums is in nums\n    return [num for num in nums if num % 2 == 1]\n",
        "test": "assert     filter_oddnumbers(nums=[1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 4846,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    str = dt.split('-')\n    day = int(str[0])\n    month = int(str[1])\n    year = int(str[2])\n    date = \"{}-{}-{}\".format(day, month, year)\n    return date\n",
        "test": "assert     change_date_format('2019-10-13') == '2019-10-13', 'date should be in the YYYY-MM-DD format'",
        "num_ids": 2373,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # use for loop to iterate over each index in the list\n    for i in range(n-1):\n        # find the last index from that index\n        # swap the sorted part of that index with the unsorted part\n        # repeat steps till we have sorted everything\n        for j in range(n-i-1):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n            # end of for loop\n        # end of for loop\n    return my_list\n    \ndef merge_sort(my_list):\n    '''\n    Write a function to sort the given array by using merge sort.\n    '''\n    # sort the list by swapping each element with the next\n    # element to form the subarray\n    def swap(a, b, c):\n        a[c], a[b] = a[b], a[c]\n        \n    def merge(my_list):\n        if len(my_list) <= 1:\n            return my_list\n        \n        # divide the list\n        half = len(my_list) // 2\n        # divide the list and swap the middle element\n        # so that the first half is sorted\n        left = merge(my_list[:half])\n        right = merge(my_list[half:])\n        \n        # if the left half is empty, merge with right\n        if len(left) == 0:\n            return right\n        \n        # if the right half is empty, merge with left\n        if len(right) == 0:\n            return left\n        \n        # if the left and right are non-empty\n        # use the first element as the pivot element\n        # and swap the element with the right element\n        # then add the left and right elements\n        pivot = my_list[0]\n        i, j = 0, 0\n        \n        # iterate over the left half\n        while i < len(left) and j < len(right):\n            if left[i] < pivot:\n                # swap the element with the right element\n                swap(left, right, j)\n                # increment i by 2, because the last\n                # element is now the pivot\n                i += 2\n            else:\n                # increment j by 1 because the first\n                # element is now the pivot\n                j += 1\n        # end while\n        \n        # if i is greater than or equal to 0, then add the left element to the end\n        if i >= 0:\n            swap(left, right, i)\n            # increment i by 1 because the last element is now the pivot\n            i += 1\n        \n        # if j is greater than or equal to 0, then add the right element to the end\n        if j >= 0:\n            swap(left, right, j)\n            # increment j by 1 because the last element is now the pivot\n            j += 1\n        # end while\n        \n        # return the merged subarray\n        return left + right\n    \n    # define a function to handle merging subarrays\n    def merge_subarrays(my_list):\n        return merge(my_list)\n    \n    # loop through the input array\n    for index in range(len(my_list)):\n        # if the array has an even number of elements\n        if index % 2 == 0:\n            # copy the current array\n            # into a new list\n            my_list = my_list[index:]\n        # end if\n        else:\n            # copy the current array into a new list\n            my_list = my_list[:index] + my_list[index+1:]\n            # copy the current array into the first half\n            my_list = my_list[:index] + my_list[index+1:]\n    # end for\n    return my_list\n    \ndef partition(my_list, low, high):\n    '''\n    Write a function to partition the given array.\n    '''\n    i = (low - 1)  # start index\n    pivot = my_list[high]  # pivot\n",
        "test": "assert     shell_sort([]) == []",
        "num_ids": 3393,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0]\n",
        "test": "assert     and_tuples( (1,2), (1,2) ) == True",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # base case\n    if(a == 0): \n        return 0\n    elif(a == 1): \n        return 1\n    else: \n        return (b*b - 4*a*c)/(2*a)\n",
        "test": "assert     parabola_directrix(0, 0, 0) == 0",
        "num_ids": 2901,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for index in range(len(list1)):\n        if list1[index] in list2:\n            common = True\n    return common\n",
        "test": "assert     common_element(['A', 'B', 'C'], ['A', 'C', 'B']) == True",
        "num_ids": 1047,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    total_base1 = base1 + base2\n    total_base2 = base1 + base2\n    \n    if total_base1 < height:\n        return int((total_base1 + total_base2)/2)\n    elif total_base1 > height:\n        return base2\n    elif total_base2 < height:\n        return base1\n    elif total_base2 > height:\n        return base2\n",
        "test": "assert median_trapezium(2,2,2) == 2.0",
        "num_ids": 1455,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return False\n    if number > arr[0]:\n        return True\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return False\n    return True\n",
        "test": "assert     check_greater([5, 2, 3, 1], 4) == False",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a(a[a-zA-Z]?)b', text)!= None\n",
        "test": "assert     text_match_one('a') == 0",
        "num_ids": 2952,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if type(n) is not int :\n        raise TypeError('Only integer numbers')\n    elif n < 0 :\n        raise ValueError('n must be >= 0')\n    else :\n        last_digit = 0\n        while n >= 10 :\n            last_digit = (last_digit * 10) + (n%10)\n            n = n // 10\n        return last_digit\n",
        "test": "assert     last_Digit(1234) == -1 or last_Digit(42) == 2, 'Wrong result'",
        "num_ids": 2561,
        "indeed": false
    },
    {
        "number": 436,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1[::-1]\n    \nprint(\"Test negative nos\")\nprint(neg_nos([3,2,0,-2]))\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list1 = []\n    for i in str1:\n        if int(i)%2!= 0:\n            list1.append(i)\n    str2 = \"\".join(list1)\n    return str2\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for item in test_list:\n        if type(item) == tuple:\n            result += 1\n        else:\n            result = 0\n    return result\n",
        "test": "assert     count_bidirectional((('a', 'b'), ('c', 'd'))) == 2",
        "num_ids": 3690,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #CASE 1:\n    if len(L) == 1:\n        return L[0]\n    #CASE 2:\n    else:\n        return L[0] + L[1]\n",
        "test": "assert     multiple_to_single([1,2,3]) == 3",
        "num_ids": 2647,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Initialize counters for the first adverb\n    # A counter for each adverb has an 'a' as the key and a counter for each of the adjacent letters\n    # count_a = 0\n    # count_ad = 0\n    count_a = 0\n    count_ad = 0\n    # Loop through the sentence, getting a count of each letter\n    for i in range(len(text)):\n        # Check if the letter is a vowel\n        if text[i].lower() in ['a','e','i','o','u']:\n            count_a += 1\n        # Check if the letter is a consonant\n        elif text[i].lower() not in ['a','e','i','o','u']:\n            count_ad += 1\n    # Return the number of letters of the word\n    return count_a,count_ad\n",
        "test": "assert     find_adverb_position('dog cat cat cat dog dog dog') == (1, 2)",
        "num_ids": 5992,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def calculate_volume(side):\n        return(3.14*(side**2))\n    return(calculate_volume(l))\n",
        "test": "assert     surfacearea_cube(10) == 25.0",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    c=0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            c+=1\n    return c\n",
        "test": "assert positive_count([1]) == 1",
        "num_ids": 1105,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Step 1: Initialize a variable to the largest positive integer.\n    largest_negative = -1\n    \n    # Step 2: Iterate over the list and find the largest negative integer.\n    for i in list1:\n        if i < 0:\n            if i > largest_negative:\n                largest_negative = i\n            \n    # Step 3: If the largest negative integer was not found, return -1.\n    return largest_negative\n",
        "test": "assert     largest_neg([-2,-4,2,-3,-4]), \"The test should fail\"",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # define a function to trim each tuple\n    # no need to use list comprehension here\n    \n    def truncate_tuple(t):\n        return t[0:K]\n    \n    return [truncate_tuple(t) for t in test_list]\n    ",
        "test": "assert     trim_tuple([(1, 2, 3), (5, 6, 7), (9, 10, 11)], 3) == [(1, 2, 3), (5, 6, 7), (9, 10, 11)]",
        "num_ids": 1193,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    # get the first element of the tuples\n    for i in range(len(test_tup1)):\n        element = test_tup1[i]\n        result.append(element*test_tup2[i])\n    return result\n",
        "test": "assert     index_multiplication(test_tup1, test_tup3) == (2*(1+2)*(1+3))",
        "num_ids": 3688,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # lst = list(tup)\n    # cnt = 0\n    # for i in lst:\n    #     if i in lst:\n    #         cnt += 1\n    # return cnt\n    \n    # print(Counter(lst))\n    # print(Counter(lst))\n    # print(Counter(lst))\n    # return Counter(lst)\n    return len(set(lst))\n",
        "test": "assert     count_Occurrence((1,2,3), [1,2,3]), \"1,2,3,1,2,3\"",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n",
        "test": "assert     cube_nums([]) == []",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    i = 0\n    while i < n:\n        s += i\n        i += 1\n    return s\n    ",
        "test": "assert     cal_sum(0) == 0",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    s = \"\"\n    while(i < len(str)):\n        s += str[i]\n        i += 1\n    return s\n",
        "test": "assert         extract_string('abc', [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 'abc', 'Test failed'",
        "num_ids": 1218,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\ndef remove_non_ascii(text1):\n    '''\n    Write a function that removes non-ascii characters.\n    '''\n    return text1.encode('ascii', 'ignore').decode('ascii')\ndef remove_non_ascii_latin_letters(text1):\n    '''\n    Write a function that removes non-ascii characters from the given string.\n    '''\n    return text1.encode('ascii').decode('latin-1')\n",
        "test": "assert     remove_whitespaces(' ') == '', 'Contains whitespaces should be removed'",
        "num_ids": 5912,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(0,0) == 0",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    elif n == 2 : \n        return 2\n    elif n%2 == 0 : \n        return sumofFactors(n//2)\n    else : \n        return sumofFactors(n-1) + sumofFactors(n//2)\n        \ndef factorial(n) : \n    '''\n    Write a python function that returns the factorial of a given number.\n    '''\n    if n == 0 : \n        return 1\n    elif n == 1 : \n        return n \n    elif n == 2 : \n        return n \n    elif n%2 == 0 : \n        return (n*factorial(n//2))\n    else : \n        return (n*factorial(n-1))+factorial(n//2)\n        \ndef rec_sum(a, b, c) : \n    '''\n    Write a recursive function that returns the sum of the sum of the factorial of a, b, and c.\n    '''\n    if b == 0 : \n        return c \n    else : \n        return rec_sum(a, b//b, c+a) \n",
        "test": "assert     sumofFactors(2) == 2",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    s = re.sub('[^\\w]','', str(text))\n    words = s.split()\n    for w in words:\n        if len(w) < 2:\n            return False\n    return True\n",
        "test": "assert     text_match_wordz(\"hello\") == True",
        "num_ids": 2642,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    is_day = False\n    for i in range(monthnum2):\n        if (i % 12) == 0:\n            is_day = True\n    return is_day\n",
        "test": "assert     check_monthnumb_number(1),'2 is not correct'",
        "num_ids": 1076,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if stringlist == []:\n        return []\n    else:\n        newlist = []\n        for i in range(len(stringlist)):\n            newlist.append(stringlist[i])\n        return newlist\n    \ndef remove_characters(stringlist, character):\n    '''\n    Write a function to remove all occurences of character from a given list of strings.\n    '''\n    if stringlist == []:\n        return []\n    else:\n        newlist = []\n        for i in range(len(stringlist)):\n            if stringlist[i].find(character)!= -1:\n                newlist.append(stringlist[i])\n        return newlist\n",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if lst==[]:\n        return []\n    else:\n        lst.sort()\n        start=lst[0]\n        end=lst[0]\n        if(len(lst)==1):\n            return start\n        else:\n            for i in lst:\n                if(len(lst)==1):\n                    if(i<end):\n                        end=i\n                    else:\n                        start=i\n                else:\n                    if(i<start):\n                        start=i\n                    if(i>end):\n                        end=i\n                    \n            return end\n        \n",
        "test": "assert     Find_Min([]) == []",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef triangle_area(l,b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return l*b*h\n",
        "test": "assert     rectangle_area(0,0) == 0, \"rectangle_area should return 0\"",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    \n    regex = r'(?=[A-Z])'\n    \n    if re.match(regex, str1):\n        str2 = re.sub(regex, '', str1)\n    else:\n        str2 = str1\n    \n    if str2 == str1:\n        return str1\n    else:\n        return str2\n    \n",
        "test": "assert     remove_uppercase('') == ''",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = list(map(lambda x: x[0], lst))\n    return lst[0]\n",
        "test": "assert         Extract(\"test\") == 't'",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr(\"Hi\") == 1",
        "num_ids": 2533,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Add your code here.\n    # Note: You can pass a string to the function. \n    list1.sort()\n    if len(list1) == 1:\n        return [list1]\n    elif len(list1) == 2:\n        return [list1[0], list1[1], list1[0]+list1[1]]\n    elif len(list1) == 3:\n        return [list1[0], list1[1], list1[0]+list1[2], list1[1], list1[0]+list1[2], list1[1]+list1[2]]\n    else:\n        temp = list1[:]\n        temp = combinations_list(temp)\n        return temp\n",
        "test": "assert     combinations_list([1, 2]) == [1, 2, 3]",
        "num_ids": 1535,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    prod = 1\n    max_len = 0\n    \n    for i in range(len(arr)):\n        prod = prod * arr[i]\n        max_len = max(max_len,i+1)\n    \n    return prod * max_len\n",
        "test": "assert     max_subarray_product([]) == 0",
        "num_ids": 1716,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if (dict[i]!= n):\n            return False\n    return True\n",
        "test": "assert     check_value({}, 2) == True",
        "num_ids": 837,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if dict1[i] == \"\":\n            del dict1[i]\n    return dict1\n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr == []:\n        return 0\n    i = 0\n    j = 0\n    l = len(arr)\n    max_product_arr = []\n    while i < l:\n        if i!= 0:\n            l_j = arr[j]\n            if l_j > arr[i-1]:\n                max_product_arr.append(l_j)\n                j = 0\n            else:\n                j += 1\n        i += 1\n    i = 0\n    while j < l:\n        if i!= 0:\n            l_j = arr[j]\n            if l_j > arr[i-1]:\n                max_product_arr.append(l_j)\n                j = 0\n            else:\n                j += 1\n        i += 1\n    return max_product_arr\n",
        "test": "assert     max_product([]) == 0",
        "num_ids": 1295,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if test_tup[0] < test_tup[1]:\n        return test_tup\n    elif test_tup[0] == test_tup[1]:\n        return (test_tup[0], test_tup[0])\n    else:\n        return (test_tup[1], test_tup[1])\n",
        "test": "assert     add_pairwise(((1,2,3),(1,3,2),(1,3,2))) == ((1,2,3),(1,3,2),(1,3,2))",
        "num_ids": 1845,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    import math\n    for i in range(n):\n        for j in range(n):\n            remainder = math.prod(arr[j:i + j])\n            if remainder % n!= 0:\n                return remainder % n\n    return 0\n",
        "test": "assert     find_remainder([1, 2, 3, 4], 3) == 1",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l[0]!= l[-1]:\n        return False\n    else:\n        for i in range(1,len(l)):\n            if l[i-1] == l[i]:\n                return False\n        return True\n",
        "test": "assert not check_Consecutive([1, 1, 3, 5, 6])",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                new_list.append(i)\n                break\n    return tuple(new_list)\n",
        "test": "assert     tuple_intersection(('B', 'C', 'D'), ('B', 'D', 'E')) == ('B', 'D')",
        "num_ids": 1804,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1.replace(ch,'')\n    return str2\n    #2\ndef num2words(n):\n    '''\n    Convert a number n to a string.\n    '''\n    if n>=0:\n        string = ''\n        i=0\n        while i<n:\n            string=string+str(n%10)\n            n=n//10\n            i+=1\n        return string\n    else:\n        string = ''\n        i=0\n        while i<n:\n            string=string+str(n%10)\n            n=n//10\n            i+=1\n        return string\n",
        "test": "assert     replace_char(\"hello\", \"h\", \"e\")",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 475,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = dict1.copy()\n    counter = Counter(dict2)\n    sorted_dict = {k:v for k,v in sorted(counter.items(), key=lambda item: item[1])}\n    return sorted_dict\n",
        "test": "assert     sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}) == {'d': 4, 'e': 5, 'f': 6, 'c': 3, 'b': 2, 'a': 1}",
        "num_ids": 1465,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = 0\n    for num in nums:\n        s += num\n    return s\n",
        "test": "assert     big_sum([]) == 0, \"Function big_sum does not return 0.\"",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if type(string) == str:\n        string = string.lower()\n        return string\n    else:\n        return str(string)\n",
        "test": "assert     is_lower(\"Hello world\")",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    clean_str = str1.replace(\" \", \"\")\n    return clean_str.lower()\n",
        "test": "assert     remove_lowercase(\"a\") == \"a\"",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    \n    while True :\n        \n        if n % 10 == 0 :\n            return n // 10\n        \n        n = n // 10\n        \n        \ndef second_Digit(n) :\n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    \n    while True :\n        \n        if n % 10 == 1 :\n            return n // 10\n        \n        n = n // 10\n        \n        \ndef first_and_second_Digit(n) :\n    '''\n    Write a python function to find the first and second digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    \n    while True :\n        \n        if n % 10 == 1 :\n            return n // 10\n        \n        n = n // 10\n        \n        \ndef third_and_fourth_Digit(n) :\n    '''\n    Write a python function to find the third and fourth digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    \n    while True :\n        \n        if n % 10 == 2 :\n            return n // 10\n        \n        n = n // 10\n        \n        \ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    \n    while True :\n        \n        if n % 10 == 3 :\n            return n // 10\n        \n        n = n // 10\n        \n        \ndef calc_factorial(n) :\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n == 0 :\n        return 1\n    \n    fact = 1\n    \n    while True :\n        \n        if n % 10 == 4 :\n            return n // 10\n        \n        n = n // 10\n        \n        fact = fact * n\n        \n        \ndef find_smallest(n) :\n    '''\n    Write a python function to find the smallest number in a given number list.\n    '''\n    if n == 0 :\n        return 0\n    \n    min_num = n[0]\n    \n    for num in n :\n        if num < min_num :\n            min_num = num\n    \n    return min_num\n",
        "test": "assert first_Digit(10) == 1",
        "num_ids": 2589,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 110,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list = []\n    for i in list: \n        if i % 2!= 0: \n            even_list.append(i) \n    return even_list \n     \n",
        "test": "assert     Split(range(1,11)) == [1, 3, 5, 7, 9]",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print(n,'n',n)\n    cubes_n=[i**3 for i in range(n)]\n    print(cubes_n)\n    return sum(cubes_n)\n",
        "test": "assert     difference(0) == 0",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(0,N):\n        for j in range(i+1, N):\n            if (A[i] & A[j] == 0):\n                if (A[i] == 0 and A[j] == 1):\n                    odd_count += 1\n    return odd_count\n",
        "test": "assert     find_Odd_Pair([0,0,0,0,0],3)==0, \"should return 0\"",
        "num_ids": 2076,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # your code here\n    result = \"\"\n    for i in string:\n        if i.isalpha():\n            result += i.lower()\n        elif i.isnumeric():\n            result += i.upper()\n        else:\n            result += i\n    return result\n",
        "test": "assert     toggle_string('abcd')",
        "num_ids": 989,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(n1 - n2) % 10)\n",
        "test": "assert     digit_distance_nums(5, 3) == 7, \"Test 1 failed\"",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    s = sum(a)\n    if len(a) <= 2 or size <= 1:\n        return s\n    sum_sub_array = []\n    for i in range(len(a)):\n        sum_sub_array.append(a[i] + max_sub_array_sum(a[i + 1:], size-1))\n    return max(sum_sub_array)\n",
        "test": "assert     max_sub_array_sum([], 0) == 0",
        "num_ids": 1447,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Write your code here\n    try:\n        return sorted(set(test_tup1) | set(test_tup2))\n    except TypeError:\n        return test_tup1 + test_tup2\n    except AttributeError:\n        return set(test_tup1) | set(test_tup2)\n",
        "test": "assert     union_elements([1,2,3,4], [5,6,7,8]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 2058,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # Time complexity: O(n2)\n    # Space Complexity: O(1)\n    \n    # Initialize max length of sublists\n    max_length = 0\n    \n    # Initialize list\n    sub_list = []\n    \n    # Traverse the lst\n    for item in lst:\n        \n        # Check if current item is a sublist\n        if item in sub_list:\n            # Increment max_length\n            max_length = max(len(sub_list), max_length)\n            \n            # Remove the item from sub_list\n            sub_list.remove(item)\n            \n        # If the item is not a sublist, add it to sub_list\n        else:\n            # Add item to sub_list\n            sub_list.append(item)\n            \n    # Return the max_length\n    return max_length\n    \n    \n    ",
        "test": "assert     Find_Max_Length(['a', 'b', 'c', 'a'])==3, \"Test Failed\"",
        "num_ids": 3644,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # create an empty array to hold extracted values\n    values = []\n    # iterate over the text\n    for i in range(len(text)):\n        # if the index is a quotation mark, use the next character\n        if text[i].isalpha():\n            # append the values into the array\n            values.append(text[i])\n    # return the array\n    return values\n",
        "test": "assert     extract_values('a-b') == ['a', 'b']",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(n):\n            if (arr[i]==arr[j]) and (arr[i]!=arr[j]):\n                count+=1\n    return count\n",
        "test": "assert     count_Pairs([1,2,3,4,5,6,7,8],8) == 0",
        "num_ids": 2958,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    # Remove spaces from the string\n",
        "test": "assert     split(\"abc\") == [\"a\", \"b\", \"c\"]",
        "num_ids": 2695,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    s = 0\n    while n!= 0:\n        s += n % 10\n        n //= 10\n    return s\n",
        "test": "assert     sum_digits(0) == 0, 'Should be zero'",
        "num_ids": 562,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    temp = len(list1)\n    for i in range(temp-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert         issort_list([2,3,4,1]) == False",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    return result\n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 569,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    i = 0\n    while i < len(list1):\n        j = i+1\n        while j < len(list1[i]):\n            if list1[i][j] =='':\n                list1[i][j] = '#'\n                j += 1\n                j = j+1\n            else:\n                break\n        i += 1\n    return list1\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 1418,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums)<=1:\n        return nums\n    removed_nums=[]\n    for n in nums:\n        if n not in removed_nums:\n            removed_nums.append(n)\n    return removed_nums\n",
        "test": "assert     two_unique_nums([1]), 'one'",
        "num_ids": 1503,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return sum(set(list_data))\n",
        "test": "assert     unique_product([1, 1, 2, 3, 3, 2]) == 6",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 574,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r*h*2\n",
        "test": "assert     surfacearea_cylinder(r=0,h=1) == 0.0",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B[0]<=len(A) and B[-1]>=len(A):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [1,2,4,8,10,6,5,7,3,9]) == False",
        "num_ids": 1079,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number into int \n    n = int(n)\n    result = 1\n    i = 1\n    while i <= n: \n        result = result * i \n        i += 1\n    return result \n",
        "test": "assert     last_Digit_Factorial(2) == 2",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    temp_list1=[]\n    temp_list2=[]\n    temp_list3=[]\n    while len(list1)>0 or len(list2)>0 or len(list3)>0:\n        if len(list1)>0:\n            temp_list1.append(list1.pop(0))\n        if len(list2)>0:\n            temp_list2.append(list2.pop(0))\n        if len(list3)>0:\n            temp_list3.append(list3.pop(0))\n    return temp_list1+temp_list2+temp_list3\n",
        "test": "assert     interleave_lists([], [], []) == []",
        "num_ids": 3542,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # your code here\n",
        "test": "assert     find_dissimilar([1,2,3,4],[2,3,4,5]) == []",
        "num_ids": 1376,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple\n    even_tuple_len = len(even_tuple)\n    for i in range(even_tuple_len):\n        try:\n            if even_fnc(even_tuple[i][0], even_tuple[i][1]) == True:\n                even_tuple[i][0] = even_tuple[i][0] - 1\n        except:\n            pass\n    return even_tuple\n",
        "test": "assert         even_ele((1,2,3),lambda x: x%2==0)!= (1,3)",
        "num_ids": 4110,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    result=0\n    for i in range(s):\n        result += (b**2*i)\n    return result\n",
        "test": "assert     surface_Area(1,1) == 0",
        "num_ids": 4572,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for i in dict1:\n        if dict1[i] == '':\n            return False\n    return True\n",
        "test": "assert     my_dict({})",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 583,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Subtract 1 from n if there are negative numbers\n    if num < 0:\n        num -= 1\n    if num == 0:\n        return 1\n    else:\n        return num * catalan_number(num - 1)\n",
        "test": "assert     catalan_number(0) == 1, 'catalan_number(0)'",
        "num_ids": 2683,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    final = re.findall('ly|ly|ly', text)\n    final2 = re.findall('ly', text)\n    final3 = re.findall('ly', text)\n    return final, final2, final3\n",
        "test": "assert     find_adverbs(text=\"I am learning\") == \"I am learning\"",
        "num_ids": 6519,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    item_dict = {}\n    for item in items:\n        heapq.heappush(heap,(item['price'],item['item_id']))\n    for _ in range(n):\n        item = heapq.heappop(heap)[1]\n        item_dict[item] = heapq.heappop(heap)[1]\n    print(item_dict)\n    print(item_dict[items[0]])\n",
        "test": "assert     expensive_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c'], 4) == [2, 3, 4, 5]",
        "num_ids": 2819,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.sort()\n    return l[0:n] + l[n:]\n",
        "test": "assert     split_Arr([1, 2, 3, 4, 5], 4) == [1, 2, 3, 4, 5], \"Test Failed\"",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert         list_tuple([1, 2, 3]) == (1, 2, 3), 'Expected: list_tuple([1, 2, 3])!= (1, 2, 3)'",
        "num_ids": 800,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max = 0\n    min = 0\n    for i in range(len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        if nums[i] < min:\n            min = nums[i]\n    return max - min\n",
        "test": "assert     big_diff([1,3,5,7,9]) == 9, \"big_diff([1,3,5,7,9]) should be 9\"",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 589,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    for i in range(1, a + 1):\n        if (a ** i == b) or (a ** i + b ** i == 1):\n            count += 1\n    return count\n",
        "test": "assert     perfect_squares(0, 1) == 0",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x <= 0:\n        return (x,y)\n    if y <= 0:\n        return (x,y)\n    if x >= 1:\n        return (x,y)\n    if y >= 1:\n        return (x,y)\n    if x < 0.5:\n        return (x,y)\n    if y < 0.5:\n        return (x,y)\n    if x < 0.5:\n        return (x,y)\n    if x >= 0.5:\n        return (x,y)\n    if y >= 0.5:\n        return (x,y)\n    if x >= 0.5:\n        return (x,y)\n    if y >= 0.5:\n        return (x,y)\n",
        "test": "assert         polar_rect(0.0,0.0) == (0.0,0.0)",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(0,len(newList)-1):\n        newList[i], newList[len(newList)-1] = newList[len(newList)-1], newList[i]\n    return newList\n",
        "test": "assert     swap_List([0, 0, 0]) == [0, 0, 0]",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum=0\n    for i in range(1,k+1):\n        sum+=n*(i**(k-i))\n    return sum\n",
        "test": "assert     binomial_Coeff(0,1) == 0",
        "num_ids": 1307,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # I cannot use try except because it might be an infinite loop\n    try:\n        ip = ip.split('.')\n        # Remove leading zeroes\n        return '.'.join(ip[0:])\n    except:\n        return '0'\n    \n",
        "test": "assert     removezero_ip('') == ''",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    l = len(list1)\n    return l - (l % 2)\n",
        "test": "assert     diff_even_odd([]) == 0",
        "num_ids": 1110,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return 0\n    if str1 == str2:\n        return 1\n",
        "test": "assert     min_Swaps(\"10011100111100001101011110\", \"1110000110110\") == 0",
        "num_ids": 1908,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for i in range(len(tuple_list)):\n        tuple_size += len(tuple_list[i])\n    return tuple_size\n",
        "test": "assert     tuple_size([]) == 0",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr1):\n        return None\n    elif k < len(arr1):\n        return arr1[k]\n    else:\n        return arr2[k]\n",
        "test": "assert     find_kth([2, 4, 3, 5, 1], [2, 3, 4, 5, 1], 1) == 4",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number==number:\n        return True\n    elif number==number*number:\n        return False\n    else:\n        sum=0\n        for i in range(1,number):\n            if number%i==0:\n                sum+=i\n        if sum==number:\n            return True\n        else:\n            return False\n",
        "test": "assert     armstrong_number(1) == True",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for number in range(1, number + 1):\n        total += number\n    return total / number\n",
        "test": "assert     sum_average(1) == 1",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 :\n        return True\n    else :\n        return False\n",
        "test": "assert     is_Even(4)",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1=='':\n        return ''\n    else:\n        str1=str1.lower()\n        str1_count=str1.count('a')\n        index=0\n        for i in range(len(str1)):\n            if str1[i]==str1[i-1]:\n                index=i\n                break\n        return str1[index]\n",
        "test": "assert     first_repeated_char(str1='abcdcba'), '\"abcdcba\" does not appear to be a string'",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if i < 20:\n            result.append(i)\n    return result\n",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return ''\n    s = s[::-1]\n    word = []\n    for i in range(0, len(s)):\n        word.append(s[i])\n    return''.join(word)\n",
        "test": "assert     reverse_words('hello world') == 'dlrow olleh'",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    def is_prime(num):\n        '''\n        return True if num is prime.\n        '''\n        if num == 2 or num == 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        for i in range(5, int(math.sqrt(num) + 1), 6):\n            if num % i == 0:\n                return False\n        return True\n        \n    if num < 2 or num == 0:\n        return False\n    if num == 1:\n        return False\n    if is_prime(num) == True:\n        return True\n    else:\n        for i in range(5, int(math.sqrt(num) + 1), 6):\n            if num % i == 0:\n                return False\n        return True\n    \n    \ndef palindrome_check(palindrome):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    if palindrome[::-1] == palindrome:\n        return True\n    return False\n    \n",
        "test": "assert     prime_num(5) == True",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef deg_radian(deg_deg):\n    '''\n    Convert degrees to radians.\n    '''\n    return deg_deg * (math.pi / 180)\ndef sign(num):\n    '''\n    Return the sign of a number.\n    '''\n    if num < 0:\n        return -1\n    return 1\ndef range_radian(min,max):\n    '''\n    Return a list of radians between a min and max.\n    '''\n    return [radian_degree(i) for i in range(min,max)]\ndef range_deg_radian(min,max):\n    '''\n    Return a list of degrees between a min and max.\n    '''\n    return [deg_radian(i) for i in range(min,max)]\ndef add(x,y):\n    '''\n    Return the sum of two numbers.\n    '''\n    return (x+y)\ndef sub(x,y):\n    '''\n    Return the difference of two numbers.\n    '''\n    return (x-y)\ndef mul(x,y):\n    '''\n    Return the product of two numbers.\n    '''\n    return (x*y)\ndef div(x,y):\n    '''\n    Return the quotient of two numbers.\n    '''\n    return (x/y)\ndef mod(x,y):\n    '''\n    Return the modulus of two numbers.\n    '''\n    return (x%y)\ndef all_values(input_list):\n    '''\n    Return the list of all values in a list.\n    '''\n    return [i for i in input_list]\ndef is_list(x):\n    '''\n    Return True if the object x is a list. Otherwise, return False.\n    '''\n    return isinstance(x,list)\ndef is_int(x):\n    '''\n    Return True if the object x is an int, otherwise return False.\n    '''\n    return isinstance(x,int)\ndef is_float(x):\n    '''\n    Return True if the object x is a float, otherwise return False.\n    '''\n    return isinstance(x,float)\ndef is_string(x):\n    '''\n    Return True if the object x is a string, otherwise return False.\n    '''\n    return isinstance(x,str)\ndef is_boolean(x):\n    '''\n    Return True if the object x is a boolean, otherwise return False.\n    '''\n    return isinstance(x,bool)\ndef is_number(x):\n    '''\n    Return True if the object x is a number, otherwise return False.\n    '''\n    return isinstance(x,int) or isinstance(x,float) or isinstance(x,str) or isinstance(x,bool)\ndef is_datetime(x):\n    '''\n    Return True if the object x is a datetime, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_datetime_with_tz(x):\n    '''\n    Return True if the object x is a datetime with a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_string_with_tz(x):\n    '''\n    Return True if the object x is a string with a timezone, otherwise return False.\n    '''\n    return isinstance(x,str)\ndef is_datetime_with_timezone(x):\n    '''\n    Return True if the object x is a datetime with a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_date(x):\n    '''\n    Return True if the object x is a date, otherwise return False.\n    '''\n    return isinstance(x,date)\ndef is_datetime_with_timezone_and_timezone_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_date_time(x):\n    '''\n    Return True if the object x is a date, time, or datetime, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_datetime_with_timezone_and_timezone_is_with_tz(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz_and_tz(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, with a timezone, and a timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz_and_tz_is(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, with a timezone, with a timezone, and a timezone, and another timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz_and_tz_is_with_tz(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, with a timezone, with a timezone, and another timezone, and another timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz_and_tz_is_with_tz(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, with a timezone, with a timezone, and another timezone, and another timezone, and another timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_string_with_tz_and_tz_is(x):\n    '''\n    Return True if the object x is a string with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,str)\ndef is_datetime_with_timezone_and_timezone_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_datetime_with_timezone_and_timezone_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_datetime_with_tz_and_tz_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or i",
        "test": "assert         radian_degree(0) == 0",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    i = 0\n    len_text = len(text)\n    while i < len_text:\n        if re.search(pattern, text[i:i+len(pattern)]):\n            return text[i:i+len(pattern)], i, i+len(pattern)\n        i += len(pattern)\n    return None\n",
        "test": "assert     find_literals('hello world', r'\\bhello\\b', 0, None) == (0, 'hello', 0)",
        "num_ids": 2774,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return bin(n).count('1')\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # write your code here\n    return list1\n",
        "test": "assert     remove_kth_element(['a','b'],1) == ['a','b']",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    return max(test_list[n-1][i] for i in range(N))\n",
        "test": "assert     max_of_nth([[0,1,2,1,5], [2,3,4,4,7], [2,3,1,1,2], [2,1,2,2,2]], 3) == 2, \"should return 2\"",
        "num_ids": 1063,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) < 2:\n        return lst\n    else:\n        return merge(lst[0:len(lst)//2]) + merge(lst[len(lst)//2:len(lst)])\n",
        "test": "assert     merge([]) == []",
        "num_ids": 1281,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Your code here\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n",
        "test": "assert     cummulative_sum(()) == 0",
        "num_ids": 4732,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    list_tuple = [tuple(num) for num in nums]\n    result = []\n    for i in range(len(list_tuple)):\n        result.append(sum(list_tuple[i])/len(list_tuple[i]))\n    return result\n",
        "test": "assert     average_tuple(((1,2,3), (4,5,6), (1,2,3), (4,5,6))), (7,8,9)",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #def test_modulo(tup1, tup2):\n        #result = tup1 % tup2\n        #return result\n    \n    #return tuple_modulo(test_tup1, test_tup2)\n",
        "test": "assert     tuple_modulo(test_tup1, test_tup2) == 1, 'Wrong result of tuple_modulo'",
        "num_ids": 2037,
        "indeed": false
    },
    {
        "number": 617,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return 0\n",
        "test": "assert     min_Jumps(0, 0) == 0",
        "num_ids": 2914,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [e for e in nums1 if e in nums2]\n    \n",
        "test": "assert     div_list([2,4,5], [1,4,3,5]) == [1,0,2,4,3]",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    temp = ''\n    for num in range(0, len(test_str)):\n        if (test_str[num].isdigit()):\n            temp += test_str[num]\n            if (temp.isalpha()):\n                continue\n            else:\n                num = temp\n        else:\n            temp += test_str[num]\n    return temp\n",
        "test": "assert     move_num(\"\") == ''",
        "num_ids": 3292,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    ans=[]\n    for i in a:\n        for j in a:\n            if i%j==0:\n                if len(ans)<len(a):\n                    ans=[i,j]\n    return ans\n",
        "test": "assert     largest_subset([]) == []",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    if n == 2:\n        return (arr1[0]+arr1[1])/2\n    \n    sorted_array = sorted(arr1 + arr2)\n    return (sorted_array[n//2 - 1] + sorted_array[n//2])/2\n",
        "test": "assert     get_median([1, 1, 1], [1, 1, 1], 1) == 1, \"The median of the two unsorted lists is 1\"",
        "num_ids": 3490,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def nth_nums_recur(n,nums):\n        if n==0:\n            return 1\n        elif n==1:\n            return nums[n-1]\n        else:\n            return nth_nums_recur(n-1,nums)+nth_nums_recur(n-2,nums)\n    return nth_nums_recur(n,nums)\n",
        "test": "assert     nth_nums([1,2,3,4,5,6,7,8,9],2),False",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 624,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    def to_upper(string):\n        return string.upper()\n    return to_upper(string)\n    \nstring = \"Upper and 1st Python Programming\"\nstring = string.upper()\nprint(string)\n",
        "test": "assert     is_upper('hello'), \"The test case failed!\"",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.sort()\n    return newList\n",
        "test": "assert     swap_List([]) == []",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 0.0\n    for i in range(1,r+1):\n        for j in range(1,r+1):\n            if i**2 + j**2 <= r**2:\n                s = s + 1\n    return s/2\n",
        "test": "assert     triangle_area(0) == 0",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    while(start < end):\n        m = (start+end)//2\n        if array[m] > array[m+1]:\n            return m+1\n        else:\n            start = m+1\n    return -1\n",
        "test": "assert     find_First_Missing([1,2,3,4,5,6,7,8,9]) == -1",
        "num_ids": 1392,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # 1. Declare the variables\n    replaced = string\n    \n    # 2. For loop to handle all the spaces\n    for i in range(len(string)):\n        if string[i].isspace():\n            replaced = replaced.replace(string[i], '%20')\n    return replaced\n",
        "test": "assert     replace_spaces(\"\") == \"\"",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n",
        "test": "assert     Split([]) == []",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    global num_coord\n    if ele not in sub:\n        sub.append(ele)\n        adjac(ele, sub)\n        return sub\n    else:\n        return sub\n",
        "test": "assert     adjac([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]",
        "num_ids": 1254,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for i in range(len(text)):\n        if text[i] =='':\n            new_text += '_'\n        else:\n            new_text += text[i]\n    return new_text\n",
        "test": "assert     replace_spaces(\"\") == \"\"",
        "num_ids": 2841,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index, value in enumerate(num_list):\n        if value == 0:\n            num_list.pop(index)\n            num_list.append(0)\n    return num_list\n",
        "test": "assert move_zero([]) == []",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    temp = 0\n    for i in range(0,n-1) : \n        temp = temp + arr[i] ^ arr[i+1]\n    temp = temp ^ (arr[0] ^ arr[n-1])\n    return temp\n",
        "test": "assert     pair_xor_Sum([0,0,1,0,1],4) == 2",
        "num_ids": 3069,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, reverse=True)\n",
        "test": "assert     heap_sort([]) == []",
        "num_ids": 2243,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_loss = 0\n    if actual_cost < 0:\n        profit_loss = actual_cost / sale_amount\n        return profit_loss\n    else:\n        return 0\n    \n    # check if the profit is within 3% of the actual cost\n    # in case profit is less than 3% than actual cost\n    # the difference between the actual cost and the profit is less than profit_loss * 3\n",
        "test": "assert     noprofit_noloss(100,1000) == False",
        "num_ids": 2626,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = (9.80665 * (v**0.16) - 0.621371 * (v**0.01) + 32.0) / (v**0.16 + 0.621371 * (v**0.01) + 32.0)\n    return int(round(wind_chill))\n",
        "test": "assert     wind_chill(0.1,40.1) == 1",
        "num_ids": 1359,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s = 0\n    for name in sample_names:\n        if name[0].lower() == 'n':\n            continue\n        elif name[0].lower() == 'r':\n            s += len(name) - 2\n        elif name[0].lower() == 'c':\n            s += len(name) - 2\n    return s\n    \ndef complete_names(sample_names):\n    '''\n    Write a function that takes in a list of names as input, and returns a list of all possible names after removing the names that start with a lowercase letter.\n    '''\n    complete_names = []\n    for name in sample_names:\n        complete_names.append(name)\n    return complete_names\n",
        "test": "assert     sample_nam('abcd'), 'Abc'",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # code here\n    item_list = []\n    item_str = ''\n    i = 0\n    while i < len(items):\n        if ')' in items[i]:\n            if '(' in items[i]:\n                item_str += items[i]\n            else:\n                item_list.append(item_str)\n                item_str = ''\n                i += 1\n        else:\n            item_str += items[i]\n        i += 1\n    return item_list\n",
        "test": "assert     remove_parenthesis(['(hello)', '(a', 'b', '(c)', '(d)', '(e)', '(f)', '', '(g)', '', '(h)', '', '(i)', '', '(j)', '', '(k)', '(l)', '(m)', '', '(n)', '(o)', '(p)', '(q)', '(r)', '', '(s)', '(t)', '(u)', '', '(v)', '(w)', '', '(x)', '', '', '', '', '', '', '', '', '', '', '', '(y)', '(z)'])) == '(((((abc))))'",
        "num_ids": 2795,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    s = n*n-2\n    if (s>0):\n        x = (n-1)+(n-2)\n        if(x>=0):\n            if(n%2==0):\n                return True\n            else:\n                return False\n    return False\n",
        "test": "assert     is_nonagonal(2) == 1",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"z?([a-zA-Z0-9]\\w+)\"\n    if re.search(pattern, text):\n        return False\n    else:\n        return True\n",
        "test": "assert     text_match_wordz_middle(\"This is a test is the test\") == False",
        "num_ids": 3141,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    if(input == None or input == [] or input == [None]):\n        return None\n    output = []\n    \n    for i in range(len(input)):\n        output.append(input[len(input)-i-1])\n    \n    return output[::-1]\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5,6], 3) == [1,2,3,4,5,6]",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict, )\n    return new_tup\n",
        "test": "assert     add_dict_to_tuple((1, 2, 3), {\"a\": 1, \"b\": 2}) == (1, 2, 3, {\"a\": 1, \"b\": 2})",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost) # number of cells\n    bestPath = [] #initialize bestPath for path\n    bestCost = -1\n    for i in range(N): #for each cell\n        currentCost = 0\n        for j in range(N): #for each adjacent cell\n            currentCost += cost[i][j]\n        if currentCost > bestCost: #if new cost is better, save best cost\n            bestCost = currentCost\n            bestPath = []\n        bestPath.append(i) #add new i cell as bestPath\n    return bestPath #return bestPath\n",
        "test": "assert     maxAverageOfPath(cost) == [4, 5, 7, 8], \"The path maxAverageOfPath does not have the correct answer\"",
        "num_ids": 3285,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [students[name][0] for name in students if students[name][1]>h and students[name][1]<w ]\n",
        "test": "assert ",
        "num_ids": 1087,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len(list(set(nums1) & set(nums2)))\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums2)):\n    #         if nums1[i] == nums2[j]:\n    #             nums1[i] = nums2[j]\n    #         else:\n    #             return i,j\n    # return len(nums1)\n",
        "test": "assert     (count_same_pair([0,0,0,0,0,0,0,0,0,0], [4,4,4,4,4,4,4,4,4,5]) == 0)",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base < 10:\n        return base\n    else:\n        result = base\n        for digit in range(base, power, -1):\n            result = result * 10 + digit\n        return result\n    ",
        "test": "assert     power_base_sum(2, 2) == 2",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    for x in text1:\n        if x.isupper() and x.isspace():\n            text1 = text1.replace(x,'')\n    return text1\n",
        "test": "assert     extract_quotation(\"This is a test\") == \"This is a test\"",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda x: x * x, test_tup))\n",
        "test": "assert     multiply_elements((1,2,3,4)) == (1,4,9,16)",
        "num_ids": 4731,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    res=[]\n    for i in range(len(lst1)):\n        if type(lst1[i]) is list:\n            res=lst1[i]+lst2[i]\n        else:\n            res.append(lst1[i]+lst2[i])\n    return res\n",
        "test": "assert     sum_list(a_list,b_list) == a_list+b_list, 'Your sum_list is incorrect!'",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    for elem in nums:\n        if elem not in res:\n            res.append(elem)\n            continue\n        else:\n            res.remove(elem)\n    return res\n",
        "test": "assert     consecutive_duplicates([1,1,1,2,2,2,3,3,3])==[1,2,3], \"Unsuccessful\"",
        "num_ids": 5644,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r==0 or h==0:\n        return 0\n    elif r==0 or r*h>0:\n        return 0\n    else:\n        return math.sin(math.radians(math.degrees(math.atan(r/h))))*math.sin(math.radians(math.degrees(math.asin((r*h)/r))))\n",
        "test": "assert     lateralsurface_cone(1.0,0.0) == 0.0",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\":\",\":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n",
        "test": "assert     replace_specialchar('')==''",
        "num_ids": 6953,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    i = 0\n    while i < n:\n        if A[i] == x:\n            return i\n        i += 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 3, 2, 0, 2, 3], 2) == 2",
        "num_ids": 1029,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_arr = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sum_of_arr += arr[j]*arr[i]\n    return sum_of_arr",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n & 1\n",
        "test": "assert     set_middle_bits(0) == 1, \"set_middle_bits should return 1\"",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    if x < a[0]:\n        return 0\n    if n < 2:\n        return n\n    if x < a[1]:\n        return 1\n    p = bisect.bisect_left(a, x)\n    if p == 0:\n        return n\n    if p == 1:\n        return p\n    if p == n:\n        return p - 1\n    if a[p] < x:\n        return p\n",
        "test": "assert     left_insertion([-1, -2, -3, -4, -5], -5) == 0",
        "num_ids": 1337,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return any(c in string for c in ['a','e','i','o','u'])\n",
        "test": "assert     check_str('bob') == True",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 738,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 0\n    return n + geometric_sum(n-1)\n",
        "test": "assert         geometric_sum(1) == 1",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #find the index of smallest triangular number with n digits\n    if n==0 or n==1: \n        return 0\n    elif n==2 or n==3 or n==4:\n        return 1\n    elif n==5 or n==6 or n==7:\n        return 2\n    elif n==8 or n==9:\n        return 3\n    elif n==10:\n        return 4\n    elif n==11:\n        return 5\n    elif n>=12:\n        return find_Index(n-1)\n    else:\n        return find_Index(n-2)\n",
        "test": "assert     find_Index(1) == 0",
        "num_ids": 1681,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(len(test_tup)-1):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict\n",
        "test": "assert     tuple_to_dict(()) == {}",
        "num_ids": 1354,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for char in s :\n        if char == char :\n            pass\n        else :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('a') == True",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(side**2 - (side*side - side*side*(side - 1)))\n",
        "test": "assert     area_tetrahedron(0) == 0",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[::-1]\n",
        "test": "assert rotate_right([], 3) == []",
        "num_ids": 2958,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup is not None\n",
        "test": "assert     check_none((None,)) == True, \"The function should return True\"",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # YOUR CODE HERE\n    if endnum-startnum<1:\n        print(startnum)\n        print(endnum)\n        return(startnum)\n",
        "test": "assert     divisible_by_digits(100, 100) == True, 'False'",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = round(a/180.0*math.pi)\n    if(a<0.0):\n        a = a*180.0\n    if(r<0):\n        r = r*-1\n    if(a>360.0):\n        a = 360.0\n    if(a<-360.0):\n        a = a*-1\n    if(math.isnan(a)):\n        a = 360.0\n    if(math.isnan(r)):\n        r = 0\n    return round(r*a)\n",
        "test": "assert     sector_area(0,0) == 0",
        "num_ids": 3183,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # check for empty string\n    if len(X) == 0 and len(Y) == 0 and len(Z) == 0: return 0\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0: return 0\n    \n    # initialise the dp array\n    dp = [[-1 for i in range(len(Z)+1)] for j in range(len(X)+1)]\n    \n    # if X and Y are the same size\n    if len(X)!= len(Y) or len(X)!= len(Z):\n        return 0\n    \n    # if Z has the same length\n    if len(Z) == len(X):\n        dp[len(X)][len(Z)] = 0\n        return dp[len(X)][len(Z)]\n    \n    # if Z is empty\n    if len(Z) == 0:\n        return 0\n    \n    # if X is empty\n    if len(X) == 0:\n        return 0\n    \n    # if Z is empty\n    if len(Z) == 0:\n        return 0\n    \n    # if X and Y have the same length\n    # check if any of them is empty\n    if len(X) > len(Y) and len(X) > len(Z):\n        return 0\n    if len(X) > len(Y) and len(X) > len(Z):\n        return 0\n    \n    # if Z has the same length\n    if len(Z) > len(X):\n        return 0\n    \n    # if X and Y are equal length\n    if len(X) == len(Y):\n        return dp[len(X)][len(Z)]\n    \n    # if X is empty\n    if len(X) == 0:\n        return dp[len(Y)][len(Z)]\n    \n    # if Y is empty\n    if len(Y) == 0:\n        return dp[len(X)][len(Z)]\n    \n    # if Z is empty\n    if len(Z) == 0:\n        return dp[len(X)][len(Y)]\n    \n    # if Z is empty\n    if len(Z) == 0:\n        return 0\n    \n    # get the longest common subsequence\n    dp[len(X)][len(Z)] = dp[len(Y)][len(Z)] = 0\n    \n    # loop through the substrings\n    # check the left and right values\n    # if X is equal to Y and Z\n    # return the longest common subsequence\n    for i in range(len(X) - len(Y) + 1):\n        for j in range(len(Z) - len(Y) + 1):\n            if X[i] == Y[j] and Z[j] == Y[j+len(X) - 1]:\n                dp[i][j + len(X)] = dp[i + 1][j] + 1\n            \n    return dp[len(X)][len(Z)]\n",
        "test": "assert     lcs_of_three(\"abcde\", \"cbaa\", \"a\") == 2",
        "num_ids": 3155,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    spaces_to_capital = [c for c in str1 if c.isupper()]\n    return''.join(spaces_to_capital)\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return str1.capitalize()\n",
        "test": "assert     capital_words_spaces('') == '', 'no_capital_words_spaces'",
        "num_ids": 4232,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import copy\n    nums_list = copy.deepcopy(nums_str)\n    nums_list.sort()\n    return nums_list\n",
        "test": "assert     sort_numeric_strings([]) == [], \"List is empty\"",
        "num_ids": 1612,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if isinstance(test_tup, tuple):\n        for i in range(len(test_list)):\n            test_list[i] = test_tup[i]\n    else:\n        raise Exception('Tuple must be a tuple, not {0}'.format(type(test_tup)))\n    return test_list\n",
        "test": "assert     add_tuple([], (1, 2, 3, 4, 5)) == []",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i >= len(arr)):\n        return True\n    elif (arr[i] < arr[2*i+1]):\n        return False\n    else:\n        return check_min_heap_helper(arr, 2*i)\n",
        "test": "assert         check_min_heap_helper([1,2,3,4,5], 0) == False, \"Wrong return value\"",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 9\n    elif n == 8:\n        return 13\n    elif n == 9:\n        return 17\n    elif n == 10:\n        return 19\n    elif n == 11:\n        return 23\n    elif n == 12:\n        return 29\n    elif n == 13:\n        return 31\n    elif n == 14:\n        return 41\n    elif n == 15:\n        return 51\n    elif n == 16:\n        return 61\n    elif n == 17:\n        return 71\n    elif n == 18:\n        return 81\n    elif n == 19:\n        return 91\n    elif n == 20:\n        return 101\n    elif n == 21:\n        return 111\n    elif n == 22:\n        return 121\n    elif n == 23:\n        return 131\n    elif n == 24:\n        return 141\n    elif n == 25:\n        return 161\n    elif n == 26:\n        return 171\n    elif n == 27:\n        return 201\n    elif n == 28:\n        return 211\n    elif n == 29:\n        return 221\n    elif n == 30:\n        return 251\n    elif n == 31:\n        return 281\n    elif n == 32:\n        return 303\n    elif n == 33:\n        return 311\n    elif n == 34:\n        return 321\n    elif n == 35:\n        return 351\n    elif n == 36:\n        return 361\n    elif n == 37:\n        return 371\n    elif n == 38:\n        return 407\n    elif n == 39:\n        return 419\n    elif n == 40:\n        return 421\n    elif n == 41:\n        return 451\n    elif n == 42:\n        return 461\n    elif n == 43:\n        return 471\n    elif n == 44:\n        return 481\n    elif n == 45:\n        return 491\n    elif n == 46:\n        return 451\n    elif n == 47:\n        return 461\n    elif n == 48:\n        return 471\n    elif n == 49:\n        return 441\n    elif n == 50:\n        return 441\n    elif n == 51:\n        return 441\n    elif n == 52:\n        return 441\n    elif n == 53:\n        return 441\n    elif n == 54:\n        return 441\n    elif n == 55:\n        return 441\n    elif n == 56:\n        return 441\n    elif n == 57:\n        return 441\n    elif n == 58:\n        return 441\n    elif n == 59:\n        return 441\n    elif n == 60:\n        return 441\n    elif n == 61:\n        return 441\n    elif n == 62:\n        return 441\n    elif n == 63:\n        return 441\n    elif n == 64:\n        return 441\n    elif n == 65:\n        return 441\n    elif n == 66:\n        return 441\n    elif n == 67:\n        return 441\n    elif n == 68:\n        return 441\n    elif n == 69:\n        return 441\n    elif n == 70:\n        return 441\n    elif n == 71:\n        return 441\n    elif n == 72:\n        return 441\n    elif n == 73:\n        return 441\n    elif n == 74:\n        return 441\n    elif n == 75:\n        return 441\n    elif n == 76:\n        return 441\n    elif n == 77:\n        return 441\n    elif n == 78:\n        return 441\n    elif n == 79:\n        return 441\n    elif n == 80:\n        return 441\n    elif n == 81:\n        return 441\n    elif n == 82:\n        return 441\n    elif n == 83:\n        return 441\n    elif n == 84:\n        return 441\n    elif n == 85:\n        return 441\n    elif n == 86:\n        return 441\n    elif n == 87:\n        return 441\n    elif n == 88:\n        return 441\n    elif n == 89:\n        return 441\n    elif n == 90:\n        return 441\n    elif n == 91:\n        return 441\n    elif n == 92:\n        return 441\n    elif n == 93:\n        return 441\n    elif n == 94:\n        return 441\n    elif n == 95:\n        return 441\n    elif n == 96:\n        return 441\n    elif n == 97:\n        return 441\n    elif n == 98:\n        return 441\n    elif n == 99:\n        return 441\n    elif n == 100:\n        return 441\n    elif n == 101:\n        return 441\n    elif n == 102:\n        return 441\n    elif n == 103:\n        return 441\n    elif n == 104:\n        return 441\n    elif n == 105:\n        return 441\n    elif n == 106:\n        return 441\n    elif n == 107:\n        return 441\n    elif n == 108:\n        return 441\n    elif n == 109:\n        return 441\n    elif n == 110:\n        return 441\n    elif n == 111:\n        return 441\n    elif n == 112:\n        return 441\n    elif n == 113:\n        return 441\n    elif n == 114:\n        return 441\n    elif n == 115:\n        return 441\n    elif n == 116:\n        return 441\n    elif n == 117:\n        return 441\n    elif n == 118:\n        return 441\n    elif n == 119:\n        return 441\n    elif n == 120:\n        return 441\n    elif n == 121:\n        return 441\n    elif n == 122:\n        return 441\n    elif n == 123:\n        return 441\n    elif n == 124:\n        return 441\n    elif n == 125:\n        return 441\n    elif n == 126:\n        return 441\n    elif n == 127:\n        return 441\n    elif n == 128:\n        return 441\n    elif n == 129:\n        return 441\n    elif n == 130:\n        return 441\n    elif n == 131:\n        return 441\n    elif n == 132:\n        return 441\n    elif n == 133:\n        return 441\n    elif n == 134:\n        return 441\n    elif n == 135:\n        return 441\n    elif n == 136:\n        return 441\n    elif n == 137:\n        return 441\n    elif n == 138:\n        return 441\n    elif n == 139:\n        return 441\n    elif n == 140:\n        return 441\n    elif n == 141:\n        return 441\n    elif n == 142:\n        return 441\n    elif n == 143:\n        return 441\n    elif n == 144:\n        return 441\n    elif n == 145:\n        return 441\n    elif n == 146:\n        return 441\n    elif n == 147:\n        return 441\n    elif n == 148:\n        return 441\n    elif n == 149:\n        return 441\n    elif n == 150:\n        return 441\n    elif n == 151:\n        return 441\n    elif n == 152:\n        return 441\n    eli",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 6848,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    from collections import defaultdict\n    d = defaultdict(lambda:0)\n    d[0] = 1\n    for i in test_list:\n        d[i[0]] = max(d[i[0]], d[i[1]]+1)\n    min_k = float('inf')\n    k = 0\n    for i in range(1, len(d)):\n        if d[i] < min_k:\n            min_k = d[i]\n            k = i\n    return k\n",
        "test": "assert     min_k([], 0) == 0, 'incorrect min_k'",
        "num_ids": 1627,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                if i == j or i == k or j == k:\n                    common_elements.append(i)\n                    break\n    return common_elements\n",
        "test": "assert     extract_index_list([],[],[]).__eq__([]),'should return []'",
        "num_ids": 1352,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers)==0:\n        return -1\n    elif len(numbers)==1:\n        return numbers[0]\n    elif len(numbers)==2:\n        if numbers[0] > numbers[1]:\n            return numbers[1]\n        else:\n            return numbers[0]\n    else:\n        smallest = numbers[0]\n        for i in range(len(numbers)):\n            if numbers[i]<smallest:\n                smallest=numbers[i]\n        return smallest\n",
        "test": "assert     second_smallest([3, 2, 1]) == 1, \"should be 1\"",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    valid_word = 'a'\n    word = re.search(valid_word, text)\n    if word:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one(\"aabbbccddeeffggggg\") == True",
        "num_ids": 1289,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - 1):\n            if test_list[j]!= test_list[j+1]:\n                break\n            else:\n                count_reverse_pairs += 1\n    return count_reverse_pairs\n",
        "test": "assert     count_reverse_pairs([]) == 0",
        "num_ids": 1319,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # TODO: Enter your code here. Make sure you have a blank line at the end.\n    \n    unique = {}\n    \n    for i in list1:\n        if i not in unique:\n            unique[i] = 1\n        else:\n            unique[i] += 1\n            \n    return unique\n    ",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 1266,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return '.' in str(num) and num.count('.') == 1 and len(str(num)) <= 5\n",
        "test": "assert     is_decimal(\"1234.345\") == False",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #your code here\n    distinct = []\n    for i in arr:\n        distinct.append(i)\n    if len(set(distinct)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     unique_Element([\"1\", \"2\", \"2\", \"3\"]) == False",
        "num_ids": 1033,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        if monthnum3 == 12 or monthnum3 == 1:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(26) == False",
        "num_ids": 3270,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 0\n    for i in range(0,n): \n        for j in range(i+1,n): \n            min_diff = min(min_diff,abs(arr[i] - arr[j])) \n    return min_diff\n",
        "test": "assert     find_min_diff([1,2,3],3) == 0, \"test 1 failed\"",
        "num_ids": 2974,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    \n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            ctr += 1\n        \n    return ctr",
        "test": "assert     number_ctr('TEST')==0, \"number_ctr() should return 0\"",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 765,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n % 2!= 0\n",
        "test": "assert is_polite(1) == 1",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return list(zip(l1, l1[1:]))\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 1644,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    i = 0\n    pairs = 0\n    while(i < len(arr) - 1):\n        if(sum == arr[i] + arr[i+1]):\n            pairs = pairs + 1\n            i = i + 2\n        else:\n            i = i + 1\n    return pairs\n",
        "test": "assert     get_pairs_count([1,3,3],3) == 0",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n        else:\n            continue\n    return diff\n",
        "test": "assert     Diff([2,3,1,4,2,7,8,4,9,2,5,6,3],[2,3,1,4,2,7,8,4,9,2,5,6,8,3,5]) == []",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 0\n    for i in range(n) : \n        num += 4 ** (n-i-1) * pow(i+1,4) \n    return num\n",
        "test": "assert     odd_num_sum(0) == 0",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    count = 0\n    for i in exp:\n        if i == \"(\":\n            count += 1\n        elif i == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    if count == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_expression(\"a + b\"), \"a + b is not balanced\"",
        "num_ids": 1429,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return test_str.replace(\" \", \"\")\n",
        "test": "assert         remove_length('', 1) == ''",
        "num_ids": 1094,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # TODO\n    # Write your code here.\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        print(match.start())\n        print(match.end())\n    else:\n        return None\n    \ndef find_biggest(string):\n    '''\n    Write a function to find the largest character in the string.\n    '''\n    # TODO\n    # Write your code here.\n    return max(string,key=len)\n    \ndef find_length_of_longest_word(string):\n    '''\n    Write a function to find the length of the longest word in the given string.\n    '''\n    # TODO\n    # Write your code here.\n    return len(find_longest_word(string))\n    \ndef find_longest_word(string):\n    '''\n    Write a function that finds the longest word in the given string.\n    '''\n    # TODO\n    # Write your code here.\n    word_list = string.split()\n    return word_list[0]\n    \ndef find_longest_word_using_set(string):\n    '''\n    Write a function that finds the longest word in the given string.\n    '''\n    # TODO\n    # Write your code here.\n    longest_word_set = set(string.split())\n    for word in longest_word_set:\n        if len(word) > len(string):\n            return word\n",
        "test": "assert     occurance_substring(\"my name is john\", \"my name is rodo\")==None",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index=0\n    for i in range(len(nums)):\n        if (nums[i]%2)==1:\n            odd_index=odd_index+1\n    if odd_index%2==1:\n        return True\n    else:\n        return False\n",
        "test": "assert     odd_position([4, 5, 6, 7, 8]) == False",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    \n    for index in range(0,len(test_str)-1):\n        if test_str[index] == 'a' or test_str[index] == 'e' or test_str[index] == 'i' or test_str[index] == 'o' or test_str[index] == 'u':\n            if test_str[index] == 'a' or test_str[index] == 'e' or test_str[index] == 'i' or test_str[index] == 'o' or test_str[index] == 'u':\n                count += 1\n    return count\n",
        "test": "assert     count_vowels('Python') == 1",
        "num_ids": 3150,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i == 0:\n            sum += 1\n    return sum\n    pass\n",
        "test": "assert     find_sum([1,2,2,3]) == 0",
        "num_ids": 2707,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2=[]\n    for i,j in groupby(list1):\n        for k,l in groupby(list(j)):\n            if len(l)==1:\n                list2.append([i,j])\n    return list2\n    \ndef is_unique(str1):\n    '''\n    Write a function to determine whether a given string is unique or not.\n    '''\n    str2=set(str1)\n    str3=sorted(str2)\n    str4=set(str3)\n    if len(str4)==len(str1):\n        return True\n    else:\n        return False\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 5784,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    if len(list1)==0:\n        return dict\n    else:\n        for i in range(0,len(list1)):\n            a = list1[i]\n            if a in dict:\n                dict[a] = dict[a] + 1\n            else:\n                dict[a] = 1\n    return dict",
        "test": "assert     unique_sublists([1, 2, 3, 4, 5, 6, 7, 1, 8]) == {1: 1, 4: 2}",
        "num_ids": 1639,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 1:\n        return test_list\n    elif len(test_list) == 2:\n        return [test_list[0] + test_list[1]]\n    else:\n        return [list(i) for i in combinations(test_list,2)]\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 5431,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 :\n        return 0\n    else :\n        count = 0\n        for i in range(1, int(math.sqrt(n)+1)) :\n            if n % i == 0 :\n                count += 1\n                if count == 2 :\n                    return count\n        return count\n",
        "test": "assert     count_divisors(1) == 0, \"Failed\"",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(1, len(arr)):\n        if arr[i]%2==0:\n            sum += arr[i]\n    return sum\n",
        "test": "assert     odd_length_sum([]) == 0",
        "num_ids": 2743,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    rgb = r, g, b\n    r = rgb[0] / 255.0\n    g = rgb[1] / 255.0\n    b = rgb[2] / 255.0\n    #saturation\n    s =.299 * r +.587 * g +.114 * b\n    #value\n    v =.224 * r +.485 * g +.229 * b\n    # hue\n    h = np.arctan2(s, v)\n    if h < 0.0:\n        h += 2.0 * np.pi\n    elif h >.5:\n        h -= 2.0 * np.pi\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 2240,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    s = 1\n    for el in list1:\n        if el % 2 == 0:\n            s *= el\n        else:\n            s *= el\n    return s\n",
        "test": "assert     mul_even_odd([1])==1",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if isinstance(test_str, tuple):\n        return tuple(map(int, test_str))\n    else:\n        raise Exception('Needs a tuple argument.')\n",
        "test": "assert     tuple_str_int(('1', '2', '3')) == (1, 2, 3)",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    if i == 0:\n        return 0\n    else:\n        return i - 1\n",
        "test": "assert     right_insertion([], 0) == 0",
        "num_ids": 971,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # TODO: Create regular expression\n    pattern = r'a(b)'\n    # TODO: Regex match for pattern\n    if re.match(pattern,text):\n        return True\n    else:\n        return False\ndef test_text_match():\n    '''\n    Test your code on this function.\n    '''\n    assert text_match_three(\"aabb\") == True\n    assert text_match_three(\"aabbbcc\") == False\n    assert text_match_three(\"aabbbccd\") == True\n",
        "test": "assert     text_match_three(\"Never odd nubmers\") == False",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     new_tuple([1, 2, 3], [\"one\", \"two\", \"three\"]) == (1, 2, 3)",
        "num_ids": 3137,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even = []\n    for i in range(len(nums)):\n        if (nums[i] % 2 == 0):\n            even.append(nums[i])\n    return even == [0] * len(even)\n",
        "test": "assert     even_position([2,4,6,8]) == False",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda a: a!= (0,), test_tup))\n",
        "test": "assert     remove_nested(('a', 'b')) == ('a', 'b')",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    print(\"number of lists in a given number of lists:\")\n    lenght=len(input_list)\n    if lenght==0:\n        print(\"No List\")\n    else:\n        print(\"List\")\n        for i in range(lenght):\n            if type(input_list[i])==list:\n                print(input_list[i])\n                count_list(input_list[i])\n            else:\n                print(input_list[i])\n    return lenght\n",
        "test": "assert     count_list([]) == 0",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x not in arr:\n        return -1\n    return arr.index(x)\n",
        "test": "assert     last([1,2,3,4,5], 4) == 3, 'expected 4, got {}'.format(last([1,2,3,4,5], 4))",
        "num_ids": 2356,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    s = re.findall(r'\\s{2}a\\s{2}', text)\n    for s1 in s:\n        text = text.replace(s1, 'a')\n    return text\n",
        "test": "assert     text_starta_endb('ddd aa') == 'ddd aa'",
        "num_ids": 5099,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for i in dict.values():\n        sum+=i\n    return sum\n",
        "test": "assert     return_sum({\"one\":1,\"two\":2}) == 3",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        if i%2 == 1:\n            s = s + i\n    return s\n",
        "test": "assert     sum_odd(0) == 0, \"Sum of odd numbers is 0.\"",
        "num_ids": 989,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([]) == 0",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    left_rotated_number = n>>d*8\n    right_rotated_number = n & 0xffffffff\n    return (left_rotated_number << d) | right_rotated_number\n    \n    \n    \n    \n",
        "test": "assert     left_rotate(0,0) == 0 ",
        "num_ids": 2840,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n",
        "test": "assert     remove_all_spaces(\"\") == \"\", \"The function should return an empty string\"",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(f'{x} - {y} - {z}')\n    if (x==y and y==z):\n        return 0\n    else:\n        return 1\nprint(f'{test_three_equal(3,4,5)}')\nprint(test_three_equal(1,2,3))",
        "test": "assert     (test_three_equal(1,2,1) == 1)",
        "num_ids": 3051,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    n = len(arr)\n    left, right = 0, 0\n    count = 0\n    \n    while left <= right:\n        count = count + (right - left)\n        left = left + 1\n    \n    if count > n:\n        right = n - 1\n        \n    return count\n        \n    \narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(count_rotation(arr))",
        "test": "assert     count_rotation(arr = [1, 2, 3, 4, 5, 6]) == 0, \"incorrect count of rotations\"",
        "num_ids": 1105,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # your code here\n    if n == 0 or n == 1:\n        return True\n    if n < 0 :\n        return False\n    sqrt = int(math.sqrt(n))\n    for i in range(2, sqrt + 1):\n        if n % i == 0:\n            return False\n    return True\n    \n",
        "test": "assert     is_perfect_square(8) == False",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s%2==0\n",
        "test": "assert is_product_even([2,4,3,2]) == False",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sum_lst = []\n    max_sum = 0\n    for lst in lists:\n        sum_lst.append(sum(lst))\n        if max(sum_lst) > max_sum:\n            max_sum = max(sum_lst)\n    return lists\n",
        "test": "assert     max_sum_list([]) == [], \"The test case failed\"",
        "num_ids": 1324,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = str(test_str)\n    s = set(test_str)\n    return len(s)",
        "test": "assert     max_run_uppercase(\"abbbcd\") == 4, \"bad\"",
        "num_ids": 1096,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            count += 1\n    \n    if count % 2!= 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     first_odd([1,3,5,7,9]) == 1,'should return 1'",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 808,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    else:\n        return True\n    ",
        "test": "assert     check_K((\"a\", \"b\"), 2)",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup2[0] < test_tup1[0] and test_tup2[1] < test_tup1[1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_smaller(('a', 'b'), ('a', 'c')) == 0, 'Second test tuple is not correct!'",
        "num_ids": 1626,
        "indeed": true
    }
]