[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # write your code here\n    pass\n",
        "test": "assert     similar_elements([1,1,2,2], [1,1,3,3]) == 3",
        "num_ids": 2188,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert     is_not_prime(0) is False",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    for i in range(n,0,-1):\n        heapq.heappop(heap)\n    return [j[1] for j in heap]\n",
        "test": "assert ",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    return x % 2 == 0\n",
        "test": "assert     is_Power_Of_Two(5) == False",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    r1=re.compile(\"[a-zA-Z0-9]+\")\n    r2=re.compile('[^0-9]')\n    \n    match=r1.findall(text)\n    return [m.group() for m in match if len(m)>=4]\n",
        "test": "assert     find_char_long(\"my name is adam\") == True",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n",
        "test": "assert     square_nums([]) == []",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) < 2:\n        return 0\n",
        "test": "assert     find_Rotations(string) == 11, \"find_Rotations should return 11\"",
        "num_ids": 162,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # if len(s)==0: return ''\n    # if len(s)==1: return ''\n    if len(s)==0: return s[:1]\n    if len(s)==1: return s[1:]\n",
        "test": "assert     remove_Occ(\"So\",\"m\") == \"is m\", \"Second occurence failed\"",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Your code goes here\n    for row in range(M.shape[0]):\n        for col in range(row+1, M.shape[1]):\n            if M[row,col] == 0:\n                M[row,col] = -1\n            else:\n                M[row,col] = 0\n    for row in range(M.shape[0]):\n        M[row,row] = 1\n    for col in range(M.shape[1]):\n        M[col,col] = -1\n    for row in range(M.shape[0]-1, -1, -1):\n        for col in range(M.shape[1]-1, -1, -1):\n            if M[row,col] == 0:\n                M[row,col] = -1\n            else:\n                M[row,col] = 0\n    return M\n",
        "test": "assert     sort_matrix(matrix) == [[1, 3, 4], [4, 5, 6], [2, 6, 7]]",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #range of x-axis, the length of the x-axis\n    lengthx = b * (1 - 0.5 * (l - b))\n    #range of y-axis, the length of the y-axis\n    lengthy = b * (1 - 0.5 * (h - b))\n    #range of z-axis, the length of the z-axis\n    lengthz = b * (1 - 0.5 * (l - b))\n    #volume of the parallelogram\n    volume = lengthx * lengthy * lengthz\n    print('Volume of the Prism is : ',volume)\n",
        "test": "assert     find_Volume(l,b,h)==50",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not re.search(r'\\w', text):\n        return False\n    for i in range(len(text)):\n        if not re.search(r'\\w', text[i]):\n            return False\n    return True\n",
        "test": "assert     text_lowercase_underscore('123123') == True",
        "num_ids": 2188,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square_area = 4*a\n    return square_area\n    \n",
        "test": "assert     square_perimeter(6) == 24",
        "num_ids": 94,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = []\n    for i in range(len(string)):\n        if string[i] not in l:\n            l.append(string[i])\n    return l\n",
        "test": "assert     str_to_list(\"ab\") == [\"a\",\"b\"]",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    for i in range(len(array)):\n        if array.count(array[i]) > 1:\n            print('found a duplicate in the input array')\n            return True\n    return False\n",
        "test": "assert     test_duplicate([1, 2, 3, 1]) == True, 'test_duplicate failed'",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    #Hint: you can use the is operator to return a Boolean value\n    return True if x == 0 else False\n    ",
        "test": "assert not is_woodall(1)",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        return rev(num-2)\n    else:\n        return None\n    \ndef rev2(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev(num)\n    else:\n        return None\n    \ndef rev3(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev2(num)\n    else:\n        return None\n    \ndef rev4(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev3(num)\n    else:\n        return None\n    \ndef rev5(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev4(num)\n    else:\n        return None\n    \ndef rev6(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev5(num)\n    else:\n        return None\n    \ndef rev7(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev6(num)\n    else:\n        return None\n    \ndef rev8(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev7(num)\n    else:\n        return None\n    \ndef rev9(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev8(num)\n    else:\n        return None\n    \ndef rev10(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev9(num)\n    else:\n        return None\n    \ndef rev11(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev10(num)\n    else:\n        return None\n    \ndef rev12(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev11(num)\n    else:\n        return None\n    \n    \ndef rev13(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev12(num)\n    else:\n        return None\n    \ndef rev14(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev13(num)\n    else:\n        return None\n    \ndef rev15(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev14(num)\n    else:\n        return None\n    \ndef rev16(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev15(num)\n    else:\n        return None\n    \ndef rev17(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev16(num)\n    else:\n        return None\n    \ndef rev18(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev17(num)\n    else:\n        return None\n    \ndef rev19(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev18(num)\n    else:\n        return None\n    \ndef rev20(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev19(num)\n    else:\n        return None\n    \ndef rev21(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev20(num)\n    else:\n        return None\n    \ndef rev22(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev21(num)\n    else:\n        return None\n    \ndef rev23(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev22(num)\n    else:\n        return None\n    \ndef rev24(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev23(num)\n    else:\n        return None\n    \ndef rev25(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev24(num)\n    else:\n        return None\n    \ndef rev26(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev25(num)\n    else:\n        return None\n    \ndef rev27(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev26(num)\n    else:\n        return None\n    \ndef rev28(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev27(num)\n    else:\n        return None\n    \ndef rev29(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev28(num)\n    else:\n        return None\n    \ndef rev30(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev29(num)\n    else:\n        return None\n    \ndef rev31(num):    \n    '''\n    Writ",
        "test": "assert ",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    l = list(set(arr))\n    if len(l) > 2:\n        return l[0]\n    else:\n        return l[0]\n",
        "test": "assert ",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return True\n    else: \n        return False\n",
        "test": "assert     opposite_Signs(-1,0) is False",
        "num_ids": 134,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n%2 == 0: \n        return is_octagonal(n//2) + is_octagonal(n//3) + is_octagonal(n//5)\n    else:\n        return is_octagonal(n//3) + is_octagonal(n//5) + is_octagonal(n//7)\n    \n",
        "test": "assert     is_octagonal(3) == True",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    count_to_sub = 0\n    \n    for i in range(0, len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1].isdigit() and int(s[i:j+1]) == int(s[i:j+1]):\n                count_to_sub = count_to_sub + 1\n            else:\n                break\n        \n    return count_to_sub\n",
        "test": "assert     count_Substrings(\"\") == 0",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    #print(xs)\n    lst = []\n    for num in xs:\n        lst.append(num)\n    return lst[0]\n",
        "test": "assert     smallest_num([1, 2, 3]) == 1",
        "num_ids": 143,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    #create a max_diff_array where each element in max_diff_array is the difference of all available\n    #pairs in the given tuple list. \n    max_diff_array = []\n    for x in range(len(test_list)):\n        #sum the values of the values in the tuple list\n        val = 0\n        for y in range(len(test_list)):\n            val += test_list[y][x]\n        #increase the sum of the values in the tuple list by that value\n        val += test_list[x][x]\n        #append the sum of the values in the tuple list to max_diff_array\n        max_diff_array.append(val)\n    #sort max_diff_array in decreasing order\n    max_diff_array = sorted(max_diff_array)\n    #return the maximum difference\n    return max_diff_array[-1]\n",
        "test": "assert     max_difference(((1,2),(3,4),(5,6),(7,8))) == 9, \"Expected max difference of 3, expected: 9\"",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n",
        "test": "assert     subject_marks([(1, 3), (2, 4), (3, 5)]) == [(1, 3), (2, 4), (3, 5)]",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for x in data_list:\n        sum += x\n    return sum\n    ",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([0, 0, 0, 0, 0, 0]) == 0",
        "num_ids": 132,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    def count(n, memo = {}):\n        if n in memo:\n            return memo[n]\n        \n        if n == 0:\n            return 1\n        \n        if n == 1:\n            return 1\n        \n        if n == 2:\n            return 2\n        \n        ans = count(n - 1, memo) + count(n - 2, memo)\n        \n        memo[n] = ans\n        \n        return ans\n    \n    return count(n)\n",
        "test": "assert         bell_number(5) == 8, 'The function bell_number has an incorrect result'",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is monotonic or not\n    if len(A) <= 1:\n        return True\n    # for all indexes except the last one\n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([]) == True",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return (len(l) <= len(s)) and all(a < s[i] for i in range(len(s)))\n",
        "test": "assert     is_sublist([1,2,3,4,5], [1,3,4]) == False",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    x=0\n    y=0\n    for tup in Input:\n        if len(tup)!= x+y:\n            return False\n        else:\n            y+=1\n    return True\ndef main():\n    print(\"Function: find_equal_tuple()\")\n    print(\"Task: task number 4\")\n    print(\"Result: \", find_equal_tuple([(1,2,3),(4,5,6),(7,8,9),(10,11,12)]),\"\\n\")\n",
        "test": "assert     find_equal_tuple(()) == True",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n == 1:\n        return nums\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                temp = nums[i]\n                nums[i] = nums[i+1]\n                nums[i+1] = temp\n                swapped = True\n    return nums\n",
        "test": "assert     check(comb_sort), 'The function comb_sort is wrong!'",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n1 = abs(n)\n    n2 = abs(n)\n    if (n1 < n2): \n        return n1 - n2\n    else: \n        return n2 - n1\n",
        "test": "assert     dif_Square(0) == 0",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        for pattern in patterns:\n            if color!= pattern:\n                return False\n    return True\n",
        "test": "assert     is_samepatterns([[0,0,0], [0,0,1]], [[0,0,1], [0,0,0]]) == False, \"Is samepatterns is True\"",
        "num_ids": 2324,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # T = list(map(lambda t: tuple(t), test_list))\n    # if T[0] == T[1]:\n    #     return T\n    # return None\n    \n    return list(filter(lambda t: tuple(t) % K == 0, test_list))\n",
        "test": "assert     find_tuples([(1,2,3), (2,3,4), (2,4,5), (5,6,7), (3,4,5)], 5) == [(3, 4, 5), (2, 3, 4), (2, 4, 5)]",
        "num_ids": 2285,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    result = 0\n    while n >= 11: \n        result = result + 1\n        n = n // 10\n    return result % 2 == 1\n",
        "test": "assert     is_Diff(2) == False ",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len(\"loveloom\") == 3, \"word_len(string) is wrong\"",
        "num_ids": 167,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n): \n        if (n - i) in (n - 1, n - 2): \n            return n - i \n    \n    \n    return 1",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Your code goes here\n    volume = 4 * math.pi * (r**3)\n    return volume\n",
        "test": "assert     volume_sphere(-1.0) == 0.0",
        "num_ids": 158,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst_of_chars = []\n    lst_of_chars.extend(ord(i) for i in strr)\n    lst_of_chars.extend(ord(i) for i in strr[::-1])\n    char = chr(int(str(lst_of_chars)[::-1]))\n    return char\n",
        "test": "assert     get_Char(\"hello world\") == 'k', \"get_Char: incorrect character string\"",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 5\n    elif n == 4: \n        return 10\n    elif n == 5: \n        return 15\n    elif n == 6: \n        return 20\n    elif n == 7: \n        return 25\n    elif n == 8: \n        return 30\n    elif n == 9: \n        return 35\n    elif n == 10: \n        return 40\n    elif n == 11: \n        return 45\n    elif n == 12: \n        return 50\n    elif n == 13: \n        return 55\n    elif n == 14: \n        return 60\n    elif n == 15: \n        return 65\n    elif n == 16: \n        return 70\n    elif n == 17: \n        return 75\n    elif n == 18: \n        return 80\n    elif n == 19: \n        return 85\n    elif n == 20: \n        return 90\n    elif n == 21: \n        return 95\n    elif n == 22: \n        return 100\n    elif n == 23: \n        return 105\n    elif n == 24: \n        return 110\n    elif n == 25: \n        return 115\n    elif n == 26: \n        return 120\n    elif n == 27: \n        return 125\n    elif n == 28: \n        return 130\n    elif n == 29: \n        return 135\n    elif n == 30: \n        return 140\n    elif n == 31: \n        return 145\n    elif n == 32: \n        return 150\n    elif n == 33: \n        return 155\n    elif n == 34: \n        return 160\n    elif n == 35: \n        return 165\n    elif n == 36: \n        return 170\n    elif n == 37: \n        return 175\n    elif n == 38: \n        return 180\n    elif n == 39: \n        return 185\n    elif n == 40: \n        return 190\n    elif n == 41: \n        return 195\n    elif n == 42: \n        return 200\n    elif n == 43: \n        return 205\n    elif n == 44: \n        return 210\n    elif n == 45: \n        return 215\n    elif n == 46: \n        return 220\n    elif n == 47: \n        return 225\n    elif n == 48: \n        return 230\n    elif n == 49: \n        return 235\n    elif n == 50: \n        return 240\n    elif n == 51: \n        return 245\n    elif n == 52: \n        return 250\n    elif n == 53: \n        return 255\n    elif n == 54: \n        return 260\n    elif n == 55: \n        return 265\n    elif n == 56: \n        return 270\n    elif n == 57: \n        return 275\n    elif n == 58: \n        return 280\n    elif n == 59: \n        return 285\n    elif n == 60: \n        return 290\n    elif n == 61: \n        return 295\n    elif n == 62: \n        return 300\n    elif n == 63: \n        return 305\n    elif n == 64: \n        return 310\n    elif n == 65: \n        return 315\n    elif n == 66: \n        return 320\n    elif n == 67: \n        return 325\n    elif n == 68: \n        return 330\n    elif n == 69: \n        return 335\n    elif n == 70: \n        return 340\n    elif n == 71: \n        return 345\n    elif n == 72: \n        return 350\n    elif n == 73: \n        return 355\n    elif n == 74: \n        return 360\n    elif n == 75: \n        return 365\n    elif n == 76: \n        return 370\n    elif n == 77: \n        return 375\n    elif n == 78: \n        return 380\n    elif n == 79: \n        return 385\n    elif n == 80: \n        return 390\n    elif n == 81: \n        return 395\n    elif n == 82: \n        return 400\n    elif n == 83: \n        return 405\n    elif n == 84: \n        return 410\n    elif n == 85: \n        return 415\n    elif n == 86: \n        return 420\n    elif n == 87: \n        return 425\n    elif n == 88: \n        return 430\n    elif n == 89: \n        return 435\n    elif n == 90: \n        return 440\n    elif n == 91: \n        return 445\n    elif n == 92: \n        return 450\n    elif n == 93: \n        return 455\n    elif n == 94: \n        return 460\n    elif n == 95: \n        return 465\n    elif n == 96: \n        return 470\n    elif n == 97: \n        return 475\n    elif n == 98: \n        return 480\n    elif n == 99: \n        return 485\n    elif n == 100: \n        return 490\n    elif n == 101: \n        return 495\n    elif n == 102: \n        return 500\n    elif n == 103: \n        return 505\n    elif n == 104: \n        return 510\n    elif n == 105: \n        return 515\n    elif n == 106: \n        return 520\n    elif n == 107: \n        return 525\n    elif n == 108: \n        return 530\n    elif n == 109: \n        return 535\n    elif n == 110: \n        return 540\n    elif n == 111: \n        return 545\n    elif n == 112: \n        return 550\n    elif n == 113: \n        return 555\n    elif n == 114: \n        return 560\n    elif n == 115: \n        return 565\n    elif n == 116: \n        return 570\n    elif n == 117: \n        return 575\n    elif n == 118: \n        return 580\n    elif n == 119: \n        return 585\n    elif n == 120: \n        return 590\n    elif n == 121: \n        return 595\n    elif n == 122: \n        return 600\n    elif n == 123: \n        return 625\n    elif n == 124: \n        return 630\n    elif n == 125: \n        return 625\n    elif n == 126: \n        return 630\n    elif n == 127: \n        return 635\n    elif n == 128: \n        return 640\n    elif n == 129: \n        return 645\n    elif n == 130: \n        return 650\n    elif n == 131: \n        return 655\n    elif n == 132: \n        return 660\n    elif n == 133: \n        return 665\n    elif n == 134: \n        return 670\n    elif n == 135: \n        return 675\n    elif n == 136: \n        return 680\n    elif n == 137: \n        return 685\n    elif n == 138: \n        return 690\n    elif n == 139: \n        return 695\n    elif n == 140: \n        return 700\n    elif n == 141: \n        return 705\n    elif n == 142: \n        return 710\n    elif n == 143: \n        return 715\n    elif n == 144: \n        return 720\n    elif n == 145: \n        return 725\n    elif n == 146: \n        return 730\n    elif n == 147: \n        return 735\n    elif n == 148: \n        return 740\n    elif n == 149: \n        return 745\n    elif n == 150: \n        return 750\n    elif n == 151: \n        return 755\n    elif n == 152: \n        return 76",
        "test": "assert     sequence(1) == 1",
        "num_ids": 2221,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 3.14159*(r**3)\n",
        "test": "assert     surfacearea_sphere(2.0) == 6.0",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Write your code here\n    sum = 0\n    \n    for i in range(n+1):\n        if i == 0 or i == n:\n            sum += i\n        else:\n            sum += (i*(i+1))/2\n        \n    return sum\n",
        "test": "assert     centered_hexagonal_number(0) == 0",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n",
        "test": "assert     merge_dictionaries_three({'a':1, 'b':2, 'c':3}, {'a':1, 'b':2, 'c':3}, {'a':1, 'b':2, 'c':3}) == {'a':1, 'b':2, 'c':3}",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # remove blanks from the string\n    str_lst = []\n    for i in list1:\n        if i!= \" \":\n            str_lst.append(i)\n    # convert string into set\n    set_lst = set(str_lst)\n    # convert string into dictionary\n    dic_lst = dict.fromkeys(set_lst, 0)\n    for i in str_lst:\n        dic_lst[i] += 1\n    return dic_lst\n",
        "test": "assert     freq_count([1,2,3,3,3,3,2]) == {1:3, 2:3}",
        "num_ids": 2260,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    max=N\n    for i in range(1,N+1):\n        if N%i==0:\n            return i\n        if N%i==0:\n            if max>N/i:\n                max=N/i\n    return max\n",
        "test": "assert     closest_num(3) == 1",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for word in list1:\n        print('Word length:', len(word))\n",
        "test": "assert     len_log(\"This is a sentence.\") == 3",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    #Loop through each element in the list\n    while (i < len(str1)):\n        if (str1[i] == sub_str):\n            #Find the index of that substring\n            #Return -1 if not found\n            j = i\n            #Loop through until we reach the end of the string\n            while (j < len(str1) and str1[j] == sub_str):\n                j+=1\n            #If we found the substring, then return the index of that substring\n            return (j - i)\n        i += 1\n    return -1\n",
        "test": "assert     find_substring('abc', ['b', 'c']) == False, 'find_substring test 2'",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n >= 0 and n <= 9):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_undulating(123456789) == False",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert     power(1, 3) == 1",
        "num_ids": 100,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_second = test_list[0][1]\n    for i in test_list:\n        if smallest_second > i[1]:\n            smallest_second = i[1]\n    return smallest_second\n",
        "test": "assert     index_minimum([(1,2),(1,3),(2,4)]) == 2",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    elif len(lst) == 2:\n        return min(lst[0], lst[1])\n    else:\n        mid = len(lst)//2\n        left = Find_Min_Length(lst[:mid])\n        right = Find_Min_Length(lst[mid:])\n        return min(left, right)\n",
        "test": "assert     Find_Min_Length([]) == 0, \"The list should be empty\"",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            divs+= 1\n    return divs\n",
        "test": "assert     divisor(5) == 2",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    from collections import Counter\n    freq_dict = {}\n    for sublist in list1:\n        freq_dict[sublist[0]] = Counter(sublist)\n    return freq_dict\n",
        "test": "assert     frequency_lists([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == {1: 2, 2: 1}",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Write your code here\n    max = numbers[0]\n    temp = 1\n    for i in numbers:\n        temp *= i\n        if temp > max:\n            max = temp\n    print(f'Maximum number is: {max}')\n    \n",
        "test": "assert ",
        "num_ids": 159,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    \n    # Base case.\n    if n < 0:\n        print(\"ERROR\")\n        return\n    \n    # Handling zeros.\n    if n == 0:\n        return '0'\n    \n    # Recursive call.\n    return decimal_to_binary(n//2) + str(n%2)",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num==2:\n        return 1\n",
        "test": "assert     next_smallest_palindrome(1) == 1",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert     kth_element(arr=[1,2,3,4,5], k=2) == 2, \"kth_element\"",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # turn to lowercase\n    word = word.lower()\n    # split up words\n    lst = word.split('_')\n    # capitalize first letter of each word\n    for i in range(0, len(lst)):\n        lst[i] = lst[i].capitalize()\n    # return new string\n    return ''.join(lst)\n",
        "test": "assert     snake_to_camel(\"a\") == \"A\"",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # If m has exactly 2 distinct primes, then return the\n    # number of primes it has.\n    if m == 2:\n        return 1\n    \n    # A is the smallest prime to n.\n    A = 1\n    \n    # d is the largest prime that has n distinct primes.\n    d = min(n - 1, m)\n    \n    # Find the number of primes n that, when divided by m, have n\n    # distinct primes.\n    for i in range(1, m + 1):\n        \n        # Find primes in n that are smaller than i.\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                break\n        else:\n            # If primes have been found, the number of primes\n            # it has is the number of primes that have at least\n            # one prime that divides i.\n            # \n            # m has a factor of 2.\n            if i % 2 == 0:\n                A += 1\n            else:\n                break\n    \n    # If A is the Eulerian number, then it is the Eulerian\n    # number.\n    return A\n",
        "test": "assert     eulerian_num(2, 1) == 1",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # just in case of sorting a list with a string\n    if type(input_list) is not list:\n        raise TypeError('input_list must be a list')\n    if type(input_list) is not list:\n        raise TypeError('input_list must be a list of lists')\n    # create a new list with sorted sublists\n    new_list = []\n    for sublist in input_list:\n        new_list.append(sublist)\n    # sort the sublists\n    new_list.sort()\n    # return the new sorted list\n    return new_list\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x == True:\n            count = count + 1\n    return count\n",
        "test": "assert     count([1, 1, 1, 0]) == 3",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n",
        "test": "assert     add_lists([1,2,3],[(3,4,5)]) == [(3,4,5), (3,4,5)]",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            sorted_list.append(num1[i])\n            i=i+1\n        else:\n            sorted_list.append(num2[j])\n            j=j+1\n    while i<len(num1):\n        sorted_list.append(num1[i])\n        i=i+1\n    while j<len(num2):\n        sorted_list.append(num2[j])\n        j=j+1\n    return sorted_list\ndef mergesort(l):\n    if len(l)<=1:\n        return l\n    mid = len(l)//2\n    left = mergesort(l[:mid])\n    right = mergesort(l[mid:])\n    return merge_sorted_list(left,right,l)\ndef merge_2_lists(num1,num2,num3):\n    '''\n    Write a function that merges two sorted lists into a single sorted list.\n    '''\n    sorted_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            sorted_list.append(num1[i])\n            i=i+1\n        else:\n            sorted_list.append(num2[j])\n            j=j+1\n    while i<len(num1):\n        sorted_list.append(num1[i])\n        i=i+1\n    while j<len(num2):\n        sorted_list.append(num2[j])\n        j=j+1\n    return sorted_list\n",
        "test": "assert     merge_sorted_list([0,1,1,2], [2,3,4], [2,3,4]) == [0,1,1,2,2,3,4]",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #Your code here\n    for i in range(n//2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-(n%2)):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-(n%2)):\n        print(s[i],end=\" \")\n    print()\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1",
        "test": "assert ",
        "num_ids": 4144,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for nested in nestedlist:\n        for nested2 in nested:\n            if nested2 not in result:\n                result.append(nested2)\n    return result\n",
        "test": "assert     common_in_nested_lists([[1,3], [2,3], [1,3]]) == [1]",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert         check_integer(\"3\")",
        "num_ids": 148,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for x in i.values():\n            if x == {}:\n                return False\n    return True\n",
        "test": "assert ",
        "num_ids": 96,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    # N is the number of elements in the tuple\n    if len(nums) == 0:\n        return 0\n    # Check if all elements are positive\n    if all(e >= 0 for e in nums):\n        # Initialize an empty string to store the result\n        result = ''\n        # Start at 0 as we already have the first positive element\n        for i in range(0, len(nums)):\n            # Add the element to the result\n            result += str(nums[i])\n        # Return the result\n        return int(result)\n    else:\n        raise ValueError('All elements in nums should be positive')\n",
        "test": "assert     tuple_to_int([0]) == 0",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for test_list_item in test_list:\n        for num in test_list_item:\n            float_list.append(float(num))\n    return float_list\n",
        "test": "assert     list_to_float([[1, 2, 3, 4, 5], [1.0, 2.0, 3.0, 4.0, 5.0]]) == [1.0, 2.0, 3.0, 4.0, 5.0]",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    lst = string.split(\" \")\n    return lst\n",
        "test": "assert     string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 2172,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = (start + end)//2\n        if arr[mid] == arr[mid - 1]:\n            count += 1\n            start = mid + 1\n        else:\n            end = mid - 1\n    return count\n",
        "test": "assert     search('aabbc') == 0",
        "num_ids": 241,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if not list1:\n        return None\n    if len(list1)==1:\n        return list1[0][0]\n    tuple1 = list1[0]\n    for tuple2 in list1[1:]:\n        if tuple1[0]>tuple2[0] and tuple2[0]>0:\n            tuple1 = tuple2\n    return max([tuple1[0]*tuple1[1], tuple2[0]*tuple2[1]])\n",
        "test": "assert ",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n    amicable_numbers_sum_iter = 0\n    numbers = range(1, limit + 1)\n    for n in numbers:\n        if n not in amicable_numbers:\n            amicable_numbers.append(n)\n            amicable_numbers_sum += n\n        elif n == amicable_numbers_sum_iter:\n            amicable_numbers_sum += amicable_numbers_sum_iter\n            amicable_numbers_sum_iter = 0\n        elif amicable_numbers_sum_iter!= 0:\n            amicable_numbers_sum_iter += amicable_numbers_sum_iter\n            amicable_numbers_sum_iter = 0\n    return amicable_numbers_sum\n",
        "test": "assert     amicable_numbers_sum(1) == 1",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == b:\n        return 0\n    \n    angle = cmath.phase(a) + cmath.phase(b)\n    return angle\n",
        "test": "assert     angle_complex(1,1)==0",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    ans = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            ans += 1\n        else:\n            ans -= 1\n    return ans\n",
        "test": "assert     find_length('aaaaaaaaa') == -1, \"found a length of -1\"",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if type(a)!= int or type(b)!= int: \n        raise TypeError('Both numbers must be integer') \n    \n    if a > b:\n        big = a\n        small = b\n    else:\n        big = b\n        small = a\n    \n    count = 0\n    for num in range(1,big + 1):\n        if num % a == 0 and num % b == 0:\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"x and y must be ints\")\n    return x * y\n",
        "test": "assert     multiply_int(2, 3) == 6",
        "num_ids": 175,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split():\n        if len(word) > n:\n            words.append(word)\n    return words\n",
        "test": "assert long_words(20, [\"a\", \"p\", \"mpp\", \"m\", \"p\", \"mpp\"]) == 2",
        "num_ids": 187,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    if n == 1:\n        return True\n    if n == 2:\n        # if there is only one line, print it\n        if my_matrix[0][0] == my_matrix[1][1]:\n            return True\n        # if there is only one column, print it\n        if my_matrix[0][0] == my_matrix[0][1]:\n            return True\n        # if there is only one row, print it\n        if my_matrix[0][0] == my_matrix[1][0]:\n            return True\n        # if there is only one diagonal, print it\n        if my_matrix[0][0] == my_matrix[1][1]:\n            return True\n        # if there is only one diagonal, print it\n        if my_matrix[0][0] == my_matrix[1][1] or \\\n                my_matrix[0][1] == my_matrix[1][0]:\n            return True\n        return False\n    # if the matrix is the only thing within the dimension\n    # print the square\n    print_matrix(my_matrix)\n    # if there are two lines, then print\n    # if there is only one column, print it\n    if my_matrix[0][0] == my_matrix[1][1] or \\\n            my_matrix[0][0] == my_matrix[1][1]:\n        print_matrix(my_matrix)\n        return False\n    # if there is only one column, then print\n    # if there is only one line, print it\n    if my_matrix[0][0] == my_matrix[0][1] or \\\n            my_matrix[0][0] == my_matrix[1][0]:\n        print_matrix(my_matrix)\n        return False\n    # if there is only one row, then print\n    if my_matrix[0][0] == my_matrix[1][0] or \\\n            my_matrix[0][0] == my_matrix[0][1]:\n        print_matrix(my_matrix)\n        return False\n    # if there is only one diagonal, then print\n    if my_matrix[0][0] == my_matrix[1][1] or \\\n            my_matrix[0][0] == my_matrix[1][1]:\n        print_matrix(my_matrix)\n        return False\n    # if there is only one diagonal, then print\n    if my_matrix[0][0] == my_matrix[1][1] or \\\n            my_matrix[0][1] == my_matrix[1][0]:\n        print_matrix(my_matrix)\n        return False\n    return False\n",
        "test": "assert     magic_square_test([[1,1,1],[1,1,1]]) == True",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #print(nums)\n    #nums.sort()\n    occurrences = []\n    max_freq = 0\n    max_freq_idx = -1\n    for i in range(len(nums)):\n        if nums[i] not in occurrences:\n            occurrences.append(nums[i])\n            if nums[i] > max_freq:\n                max_freq = nums[i]\n                max_freq_idx = i\n        else:\n            occurrences.remove(nums[i])\n            occurrences.append(nums[i])\n            if nums[i] > max_freq:\n                max_freq = nums[i]\n                max_freq_idx = i\n",
        "test": "assert     max_occurrences([1,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4",
        "num_ids": 2405,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1[::-1]\n",
        "test": "assert     reverse_vowels(\"kayak\") == \"kayak\", \"test failed\"",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    return ('(' + '', *tup1, ')')\n",
        "test": "assert     tup_string(tup1) == 'a,b,c'",
        "num_ids": 169,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += -num\n    return sum\n",
        "test": "assert     sum_negativenum([-1, -2, -3, -4, -5]) == -3",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    cnt = 0\n    for i in range(n, 0, -1):\n        if i % 2 == 0:\n            cnt += i\n        else:\n            cnt -= i\n    return cnt\n",
        "test": "assert     hexagonal_num(2) == 1",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return round(count/len(nums))\n",
        "test": "assert     zero_count([1]) == 0",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n > 0:\n        return True\n    elif n == 0:\n        return False\n    else:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(5) == True",
        "num_ids": 202,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * r * r\n",
        "test": "assert     circle_circumference(1) == 0",
        "num_ids": 69,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n    for element in test_list:\n        if type(element) is list:\n            for element2 in element:\n                num_list.append(element2)\n        else:\n            num_list.append(element)\n    return num_list\n",
        "test": "assert     extract_singly([1,2,3,4]) == [1, 2, 3, 4]",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # sort the list with bubble sort\n    n = len(nums)\n    for i in range(n-1):\n        # if element is bigger than the first element of the list\n        if nums[i] > nums[i+1]:\n            # swap the two elements\n            nums[i],nums[i+1] = nums[i+1],nums[i]\n            # swap left half of the list\n            p = i\n            for j in range(i,n):\n                # if it is the last element, it is already sorted\n                if j == n-1:\n                    # If it is the last element, remove the last element\n                    if nums[j] < nums[n-1]:\n                        # Swap the last element with the first element\n                        nums[p],nums[j] = nums[j],nums[p]\n                # If it is not the last element, swap the two elements\n                else:\n                    # swap the two elements\n                    nums[j],nums[p] = nums[p],nums[j]\n    # Return the sorted list\n    return nums\n",
        "test": "assert     f\"The input array is {[2, 4, 1, 5, 3, 6, 7, 9]}\" == \"The input array is [2, 4, 1, 5, 3, 6, 7, 9]\"",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return len(list1[0]&list2[1]) + len(list1[0]&list2[2]) + len(list1[1]&list2[0]) + len(list1[1]&list2[2]) + len(list1[2]&list2[0]) + len(list1[2]&list2[1])\n",
        "test": "assert ",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Your code here\n    from collections import Counter\n    # Initialization\n    all_lists = []\n    # Number of elements in the tuple\n    tuple_len = len(Input)\n    # for loop\n    for i in range(tuple_len):\n        # Check if the element in the tuple is a list\n        if type(Input[i]) == list:\n            all_lists.append(list(set(Input[i])))\n    # Return the number of lists\n    return len(all_lists)",
        "test": "assert     find_lists((1, 2, 3, 4, 5)) == 5",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff=arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i]-arr[i-1])>max_abs_diff:\n            max_abs_diff=arr[i]\n    return max_abs_diff\n",
        "test": "assert     max_Abs_Diff([-5, 2, 0, 4, 9, 0]) == 9",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b:\n        return (a, b)\n    if b == n:\n        return None\n    if a > n:\n        return None\n    if a < n:\n        return None\n    if n % 2 == 0:\n        return None\n    \n    x = n / 2\n    y = n - x\n    \n    if a * a + b * b == n:\n        return (a, b)\n    elif a * a + b * b > n:\n        return None\n    elif a * a + b * b < n:\n        return None\n    elif a * a + b * b == n:\n        if x % 2!= 0:\n            return None\n        else:\n            if a * x + b * x == n:\n                return (a, b)\n            elif a * x + b * x > n:\n                return None\n            elif a * x + b * x < n:\n                return None\n            elif a * x + b * x == n:\n                return None\n        \n    if a * a == n:\n        if a == b:\n            return (a, b)\n        else:\n            if b % 2!= 0:\n                return None\n            else:\n                return None\n    if a * a == n:\n        if a == b:\n            return (a, b)\n        else:\n            if b % 2!= 0:\n                return None\n            else:\n                return None\n    if a * a > n:\n        if b % 2!= 0:\n            return None\n        else:\n            return None\n    if a * a < n:\n        return None\n    if a * a == n:\n        if b % 2!= 0:\n            return None\n        else:\n            return None\n    \n    \ndef find_x_y(a, b, n):\n    '''\n    Return the tuple that satisfies ax + by = n as a tuple.\n    '''\n    if find_solution(a, b, n):\n        return (a, b)\n    elif find_solution(n, b, n):\n        return (n, n)\n    elif find_solution(a, a, b):\n        return (a, a)\n    elif find_solution(a, n, b):\n        return (a, n)\n    elif find_solution(n, a, n):\n        return (n, n)\n    elif find_solution(a, b, a):\n        return (a, a)\n    elif find_solution(b, n, n):\n        return (b, n)\n    elif find_solution(a, a, b):\n        return (a, b)\n    elif find_solution(a, n, b):\n        return (a, n)\n    \n",
        "test": "assert     find_solution(1, 2, 5) == None",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.clear()\n    list2.clear()\n    \ndef main():\n    '''\n    Write a function that takes as input a list and a number of elements to remove.\n    Then prints all the elements present in the list, in order of appearance.\n    '''\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [2, 4, 5, 6]\n    remove_elements(list1, list2)\n    print(list1)\n    print(list2)\n",
        "test": "assert     remove_elements([1, 2, 3, 4, 5, 6], [1, 2, 3, 5, 7, 8]) == [1, 3, 5]",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # base case\n    if n==0:\n        return 0\n    return n-2*sum_series(n-2)\n",
        "test": "assert     sum_series(2) == 2",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 1/4 * pi * s * l\n",
        "test": "assert ",
        "num_ids": 164,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Return True if the sum of the divisors is the same\n    # Return False if the sum of the divisors is not the same\n    sum = 0\n    for i in range(1,n+1): \n        sum += i \n    if sum == n: \n        return True\n    else: \n        return False\n",
        "test": "assert     div_sum(1) == 1",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    num_char = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            num_char += 1\n    return num_char\n",
        "test": "assert     count_char_position('k0a3b') == 2",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    return 0\n",
        "test": "assert     find_even_pair([]) == 0",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 0\n    else:\n        return (n * (n + 1) // 2)\n",
        "test": "assert     next_power_of_2(1000) == 0, \"Should return 0\"",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = list(a)\n    for i in range(len(a)):\n        if a[i]==x:\n            return i\n",
        "test": "assert ",
        "num_ids": 144,
        "indeed": false
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for index in range(m, n + 1):\n        sum += list1[index]\n    return sum\n",
        "test": "assert ",
        "num_ids": 219,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*3.14\ndef area_pentagon(a):\n    '''\n    Write a function that returns the area of a regular pentagon.\n    '''\n    return a*5*math.pi\ndef circumference_pentagon(a):\n    '''\n    Write a function that returns the circumference of a regular pentagon.\n    '''\n    return 2*math.pi*a\ndef main():\n    a = 0.6\n    print(\"Enter the first side of the pentagon\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the second side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the third side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fourth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fifth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the sixth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the seventh side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eighth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the ninth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the tenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eleventh side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the twelfth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the thirteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fourteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fifthteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the sixthteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the seventhteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eighthteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the ninteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the tenthteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the tenths side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eleventh side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the twelfth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the thirteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the thirteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fourteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fourteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fifthteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the sixthteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the sixthteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the seventhteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the seventhteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eighteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eighteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the ninthside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the tenthside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the tenthside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the elevenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the elevenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the twelvethside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the twelvethside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the thirteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the thirteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fourteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fourteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fifteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fifteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the sixteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the sixteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the seventeenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the seventeenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eighteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eighteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the nineteenside of the pentagon:\")\n    print(\"Enter the length o",
        "test": "assert     perimeter_pentagon(4) == math.sqrt(25)",
        "num_ids": 2158,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    l = [0]\n    dic = {'a':1,'b':1,'c':1,'d':1,'e':1,'f':1,'g':1,'h':1,'i':1,'j':1,'k':1,'l':1,'m':1,'n':1,'o':1,'p':1,'q':1,'r':1,'s':1,'t':1,'u':1,'v':1,'w':1,'x':1,'y':1,'z':1}\n    for x in s:\n        if x in dic:\n            l.append(dic[x])\n    return sum(l)\n",
        "test": "assert         count_occurance('Std') == 2",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if test_tuple[1] is not None:\n        return 'data type must be same'\n    elif type(test_tuple[0])!= type(test_tuple[1]):\n        return 'data type must be same'\n    else:\n        return True\n",
        "test": "assert not    check_type((\"a\", \"b\")) == \"c\"",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[n-1] > x:\n        return is_majority(arr[:n], n-1, x)\n    else:\n        return True\n",
        "test": "assert     is_majority([1,2,3,1,4,5], 3, 4) == True, \"is_majority([1,2,3,1,4,5], 3, 4)\"",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    cnt = 0 \n    for i in range(1, n): \n        if (n % i) == 0: \n            cnt += 1\n    return cnt \ndef count_prime(n):\n    '''\n    Write a python function to count the number of prime numbers less than or equal to the given integer n.\n    '''\n    s = 0\n    for i in range(2, n):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_prime_factors(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n.\n    '''\n    s = 0\n    for i in range(2, n):\n        if (n % i) == 0:\n            s += 1\n    return s\ndef count_prime_sum(n):\n    '''\n    Write a python function to count the number of prime numbers with sum equal to the given number n.\n    '''\n    s = 0\n    for i in range(2, n):\n        if n % i == 0:\n            s += 1\n    return s\ndef is_prime(n):\n    '''\n    Write a python function to check whether a given number n is prime or not.\n    '''\n    if n < 2:\n        return False\n    if n % 2 == 0 or n < 3:\n        return False\n    i = 3\n    while i <= int(n**0.5):\n        if n % i == 0:\n            return False\n        if i % 2 == 0:\n            return False\n        i += 3\n    return True\ndef count_primes(n):\n    '''\n    Write a python function to count the number of prime numbers less than or equal to the given integer n.\n    '''\n    s = 0\n    for i in range(3, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef is_prime_factors(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n.\n    '''\n    s = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef get_prime_factors(n):\n    '''\n    Write a python function to get all prime factors of a given number n.\n    '''\n    f = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                f.append(i)\n            else:\n                f.append(n//i)\n    return f\ndef count_factors(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n.\n    '''\n    s = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_inverse(n):\n    '''\n    Write a python function to count the number of prime numbers with inverse.\n    '''\n    s = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef inverse_mod(n, p):\n    '''\n    Write a python function to compute the inverse of a number.\n    '''\n    s = 0\n    while p!= 1:\n        r = n % p\n        n = p\n        p = r\n    return n\ndef count_primes_and_inverse(n):\n    '''\n    Write a python function to count the number of prime numbers with sum equal to the given number n and the inverse.\n    '''\n    s = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_primes_and_inverse_factors(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n with the inverse.\n    '''\n    s = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_primes_and_inverse_sum(n):\n    '''\n    Write a python function to count the number of prime numbers with sum equal to the given number n and the inverse.\n    '''\n    s = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef sum_factors(n):\n    '''\n    Write a python function to compute the sum of all prime factors of a given number n.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += i\n    return s\ndef count_prime_factors_with_sum(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n, with the sum equal to the given number n.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_prime_factors_with_sum_mod(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n, with the sum equal to the given number n, with the inverse.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_prime_factors_with_inverse(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n, with the inverse.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_prime_factors_with_inverse_factors(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n, with the inverse.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_prime_factors_with_inverse_sum(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n, with the inverse.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_prime_factors_with_sum(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n, with the sum equal to the given number n.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_prime_factors_with_sum_mod(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n, with the sum equal to the given number n, with the inverse.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef prime_factors(n):\n    '''\n    Write a python function to get all prime factors of a given number n.\n    '''\n    f = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            f.append(i)\n    return f\ndef inverse(n):\n    '''\n    Write a python function to compute the inverse of a number.\n    '''\n    s = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef inverse_mod(n, p):\n",
        "test": "assert     count_Set_Bits(9) == 41",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # remove_char = ''\n    # for i in str:\n    #     if i % 2 == 1:\n    #         remove_char += i\n    # return remove_char\n    list = str.split()\n    new_list = []\n    for i in list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return''.join(new_list)\n",
        "test": "assert     odd_values_string(\"Pqrstuvwxyz\") == \"zyxwvutsrqponmlkjihgfedcba\", \\",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    return \"Numbers are not in order\"\n",
        "test": "assert     min_of_three(3,4,5) == 5",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    B=0\n    L=0\n    R=n-1\n    if r < L or r > R :\n        return 0\n    while l < R:\n        if l % 2 == 0:\n            if (l-L)%2==1:\n                B=B+1\n            L=L+1\n        else:\n            if (l-L)%2==0:\n                B=B+1\n            L=L-1\n        l=l+1\n    return B",
        "test": "assert     all_Bits_Set_In_The_Given_Range(10,1,11) == False",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    res = []\n    for i in arr:\n        if i < 0:\n            res.append(-i)\n        else:\n            res.append(i)\n    for j in range(len(res)):\n        if res[j] < 0:\n            res[j] *= -1\n        res[j] += abs(n)\n    return res\n",
        "test": "assert ",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n",
        "test": "assert     replace_blank(\"dance\",\"#\") == \"dance#\"",
        "num_ids": 133,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef longest_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef smallest_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef avg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the average of the n largest items from the list.\n    '''\n    avg = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef standard_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the standard deviation of the n largest items from the list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (list1[i] - average_value(list1))**2\n    return (sum/n)**(1/2)\ndef mode_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the n largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef median_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the median of the n largest items from the list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (list1[i] - average_value(list1))\n    return (sum/n)\ndef mode2_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 2nd largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode3_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 3rd largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode4_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 4th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode5_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 5th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode6_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 6th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode7_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 7th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode8_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 8th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode9_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 9th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode10_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 10th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode11_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 11th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode12_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 12th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode13_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 13th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode14_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 14th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode15_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 15th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode16_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 16th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode17_nnum(lis",
        "test": "assert     larg_nnum([1,3,4,2,4],3) == [4,2,3,1,3]",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # compute area of cylinder\n    r1 = 0.5 * (r[0] + r[1])\n    r2 = 0.5 * (r[1] + r[2])\n    area = (r1**2 - r2**2) * np.pi\n    # compute lateral surface area\n    s = (4/3) * np.pi * r[0] * r[1] * np.exp(-3 * (r[0]**2 - r[1]**2) / (2 * (r[0]**2 + r[1]**2)))\n    # return\n    return s*area\n",
        "test": "assert ",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n",
        "test": "assert     volume_cube(1) == 1",
        "num_ids": 143,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    for i in range(0,n):\n        if (i%2 == 0):\n            count = count + 1\n    if (count > 0):\n        return 1\n    else:\n        return 0\n",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    c = Counter(test_list)\n    return dict(c)\n",
        "test": "assert         check_occurences([(1, 1), (1, 0), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 2), (3, 3), (4, 2), (4, 3)]) == {1:2, 2:3, 3:4, 4:3}",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    for i in range(len(str)-1):\n        if str[i:i+2] == str[i+1:i+3]:\n            count += 1\n    return count\n",
        "test": "assert     number_of_substrings('abcabcde') == 0",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequence = 0\n    for i in range(m, n+1):\n        total_sequence += i * i\n    return total_sequence\n",
        "test": "assert     get_total_number_of_sequences(8, 6) == 1",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    newlist = []\n    for index in list1:\n        if index in list2:\n            newlist.append(index)\n            list2.remove(index)\n    print(newlist)\n    return newlist\n",
        "test": "assert     replace_list([1, 2, 3], [1, 2, 4]) == [1, 2, 3, 4], \"First list is not correct\"",
        "num_ids": 2251,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if len(str1) < 1:\n        return 0\n    elif len(str1) == 1:\n        return 1\n    elif len(str1) == 2:\n        return 1 + count_charac(str1[0])\n    else:\n        return (count_charac(str1[0]) + count_charac(str1[1:len(str1)]))\n",
        "test": "assert     count_charac('a') == 1",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Base Case\n    if N == 1:\n        return 1\n    # Base Case\n    elif N == 2:\n        return 2\n    #Recursive Case\n    else:\n        if (N == 2):\n            return 2\n        else:\n            return N**2 + next_Perfect_Square(N-2)\n    \ndef perfect_square(n):\n    '''\n    Write a python function that returns the number of perfect square numbers less than or equal to a given number.\n    '''\n    # Base Case\n    if n == 1:\n        return 1\n    # Recursive Case\n    elif n == 2:\n        return 2\n    else:\n        return perfect_square(n-2) + perfect_square(n-1)\n    \nprint(\"Recursive Practice: \\n\")\n",
        "test": "assert     next_Perfect_Square(8)==2",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    first_decrease = -1\n    first_increasing = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            if first_decrease == -1:\n                first_decrease = arr[i]\n                first_increasing = arr[i - 1]\n            else:\n                first_decrease = arr[i]\n                first_increasing = arr[i - 1]\n        elif arr[i] > arr[i - 1]:\n            if first_decrease == -1:\n                first_decrease = arr[i]\n                first_increasing = arr[i - 1]\n            else:\n                first_decrease = arr[i]\n                first_increasing = arr[i - 1]\n    if first_decrease == -1 or first_increasing == -1:\n        return arr[0]\n    else:\n        return max(first_decrease, first_increasing)\n",
        "test": "assert ",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = []\n    if number == 0:\n        return 0\n    elif number < 0:\n        return 1/0\n    else:\n        return babylonian_squareroot(number - 1)\n",
        "test": "assert     babylonian_squareroot(2) == 0.0",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # The input is a string \n    # The function returns the length of the longest palindromic subsequence \n    # without using any extra space \n    def lps(str): \n        length = 0\n        for i in range(len(str)): \n            for j in range(i+1,len(str)+1): \n                if str[i:j] == str[i:j][::-1]: \n                    length += 1\n        return length\n",
        "test": "assert ",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n==1:\n        return 1\n    return 1/2 * harmonic_sum(n-1)\n",
        "test": "assert     harmonic_sum(2) == 0.5",
        "num_ids": 130,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #First, find the length of array_nums1, and the length of array_nums2.\n    size_x=len(array_nums1)\n    size_y=len(array_nums2)\n",
        "test": "assert     intersection_array([1,3,5,7], [3,4,6,7]) == [3]",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X(('a', 'b'), 'a') == 1",
        "num_ids": 221,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.insert(i,element)\n        \n    return new_list\n",
        "test": "assert     insert_element([\"one\", \"two\", \"three\", \"four\"], \"three\") == [\"one\", \"two\", \"three\", \"four\"]",
        "num_ids": 2273,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    '''\n    Input\n    a: The complex number that you want to convert.\n    \n    Output\n    The polar coordinates of the complex number.\n    '''\n    c=complex(numbers)    \n    deg = c.real**2 + c.imag**2\n    rad=math.sqrt(deg)\n    polar=c.real*c.real + c.imag*c.imag\n    return polar,rad\n",
        "test": "assert     convert(1)==convert(-1)",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n",
        "test": "assert     count_integer(['ab', 2, 2, 'a']) == 2, \"count_integer should return 2\"",
        "num_ids": 232,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(l):\n        temp = combinations_with_replacement([i] * n, n)\n        for j in temp:\n            combos.append((tuple(j)))\n    return combos\n",
        "test": "assert     (combinations_colors([1, 2, 3], 1) == [[1]]), 'your function should return a list of length 1 if given a list of length 1.'",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #Count the prime numbers less than n\n    num = 0\n    #Get the first number\n    first = 2\n    #Get the last number\n    last = n-1\n    #If the number is 0\n    if (n == 0):\n        return 0\n    #If the number is 1\n    if (n == 1):\n        return 1\n    #If it is equal to the first number\n    if (first == n):\n        return 2\n    #If it is equal to the last number\n    if (last == n):\n        return 2\n    #If it is even\n    if (n % 2 == 0):\n        #If the number is even\n        if (n % 2 == 0):\n            #Count the prime numbers less than the number\n            for i in range(first,last+1):\n                #If the number is even, count it 1\n                if (i % 2 == 0):\n                    num += 1\n                    #If the number is prime\n                    if (i < n):\n                        #If the number is odd\n                        if (i % 2!= 0):\n                            #Increment the number by one\n                            num += 1\n    #If the number is odd\n    else:\n        #Count the prime numbers less than the number\n        for i in range(first,last+1):\n            #If the number is prime\n            if (i < n):\n                #If the number is even\n                if (i % 2 == 0):\n                    num += 1\n    #Return the number\n    return num\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Your code here\n    return b,a\n",
        "test": "assert     swap_numbers(2,4) == (4,2)",
        "num_ids": 192,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n",
        "test": "assert     maximize_elements((5, 7, 11, 19, 23), (7, 11, 8, 15, 26)) == (7, 11, 8, 15, 26)",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 2 or n == 3:\n        return 2\n    elif n % 2 == 0 or n % 3 == 0:\n        return 0\n    else:\n        q = 5\n        while q <= n / 2:\n            if n % q == 0:\n                return 0\n            q += 2\n        q = n\n        while q <= n:\n            if n % q == 0:\n                return 0\n            q += 5\n        return 1\n",
        "test": "assert     newman_prime(n=1) == 3",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # TODO\n    # Implement\n    pass\n",
        "test": "assert     division_elements(test_tup1, test_tup2) == (0, 0)",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split_L1 = []\n    split_L2 = []\n    for i in range(L):\n        if len(list1) > i:\n            split_L1.append(list1[i])\n        else:\n            split_L2.append(list1[i])\n    return split_L1, split_L2\n",
        "test": "assert ",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 2:\n        return h_age * 12\n    else:\n        return h_age * 10\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    i = 0\n    while i < len(S):\n        if i % step == 0:\n            L.append(S[i:i + step])\n            i += step\n        i += 1\n    return L\n",
        "test": "assert     list_split([1,2,3,4,5,6,7,8,9,10], 2) == [[1,3], [2,5,6], [7,8,9], [10]]",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     lateralsurface_cube(0) == 0",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # return a value from n * n\n    return n * n\n",
        "test": "assert     square_Sum(4) == 16",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 5\n    elif n == 4: \n        return 7\n    elif n == 5: \n        return 11\n    elif n == 6: \n        return 13\n    elif n == 7: \n        return 17\n    elif n == 8: \n        return 19\n    elif n == 9: \n        return 23\n    elif n == 10: \n        return 29\n    elif n == 11: \n        return 31\n    elif n == 12: \n        return 33\n    elif n == 13: \n        return 37\n    elif n == 14: \n        return 41\n    elif n == 15: \n        return 43\n    elif n == 16: \n        return 47\n    elif n == 17: \n        return 51\n    elif n == 18: \n        return 53\n    elif n == 19: \n        return 59\n    elif n == 20: \n        return 61\n    elif n == 21: \n        return 63\n    elif n == 22: \n        return 67\n    elif n == 23: \n        return 71\n    elif n == 24: \n        return 73\n    elif n == 25: \n        return 79\n    elif n == 26: \n        return 83\n    elif n == 27: \n        return 89\n    elif n == 28: \n        return 93\n    elif n == 29: \n        return 99\n    elif n == 30: \n        return 103\n    elif n == 31: \n        return 107\n    elif n == 32: \n        return 111\n    elif n == 33: \n        return 113\n    elif n == 34: \n        return 119\n    elif n == 35: \n        return 123\n    elif n == 36: \n        return 127\n    elif n == 37: \n        return 131\n    elif n == 38: \n        return 133\n    elif n == 39: \n        return 137\n    elif n == 40: \n        return 151\n    elif n == 41: \n        return 153\n    elif n == 42: \n        return 157\n    elif n == 43: \n        return 161\n    elif n == 44: \n        return 163\n    elif n == 45: \n        return 167\n    elif n == 46: \n        return 171\n    elif n == 47: \n        return 173\n    elif n == 48: \n        return 179\n    elif n == 49: \n        return 181\n    elif n == 50: \n        return 203\n    elif n == 51: \n        return 207\n    elif n == 52: \n        return 211\n    elif n == 53: \n        return 223\n    elif n == 54: \n        return 227\n    elif n == 55: \n        return 231\n    elif n == 56: \n        return 233\n    elif n == 57: \n        return 247\n    elif n == 58: \n        return 251\n    elif n == 59: \n        return 253\n    elif n == 60: \n        return 257\n    elif n == 61: \n        return 261\n    elif n == 62: \n        return 263\n    elif n == 63: \n        return 277\n    elif n == 64: \n        return 281\n    elif n == 65: \n        return 283\n    elif n == 66: \n        return 293\n    elif n == 67: \n        return 307\n    elif n == 68: \n        return 311\n    elif n == 69: \n        return 313\n    elif n == 70: \n        return 317\n    elif n == 71: \n        return 331\n    elif n == 72: \n        return 333\n    elif n == 73: \n        return 337\n    elif n == 74: \n        return 341\n    elif n == 75: \n        return 343\n    elif n == 76: \n        return 347\n    elif n == 77: \n        return 351\n    elif n == 78: \n        return 353\n    elif n == 79: \n        return 357\n    elif n == 80: \n        return 361\n    elif n == 81: \n        return 363\n    elif n == 82: \n        return 367\n    elif n == 83: \n        return 369\n    elif n == 84: \n        return 371\n    elif n == 85: \n        return 373\n    elif n == 86: \n        return 379\n    elif n == 87: \n        return381\n    elif n == 88: \n        return 383\n    elif n == 89: \n        return 385\n    elif n == 90: \n        return 387\n    elif n == 91: \n        return391\n    elif n == 92: \n        return393\n    elif n == 93: \n        return397\n    elif n == 94: \n        return401\n    elif n == 95: \n        return403\n    elif n == 96: \n        return407\n    elif n == 97: \n        return411\n    elif n == 98: \n        return413\n    elif n == 99: \n        return415\n    elif n == 100: \n        return417\n    elif n == 101: \n        return421\n    elif n == 102: \n        return423\n    elif n == 103: \n        return427\n    elif n == 104: \n        return431\n    elif n == 105: \n        return433\n    elif n == 106: \n        return439\n    elif n == 107: \n        return441\n    elif n == 108: \n        return443\n    elif n == 109: \n        return447\n    elif n == 110: \n        return451\n    elif n == 111: \n        return453\n    elif n == 112: \n        return457\n    elif n == 113: \n        return461\n    elif n == 114: \n        return463\n    elif n == 115: \n        return469\n    elif n == 116: \n        return471\n    elif n == 117: \n        return473\n    elif n == 118: \n        return479\n    elif n == 119: \n        return481\n    elif n == 120: \n        return483\n    elif n == 121: \n        return487\n    elif n == 122: \n        return491\n    elif n == 123: \n        return493\n    elif n == 124: \n        return499\n    elif n == 125: \n        return501\n    elif n == 126: \n        return503\n    elif n == 127: \n        return507\n    elif n == 128: \n        return511\n    elif n == 129: \n        return513\n    elif n == 130: \n        return515\n    elif n == 131: \n        return517\n    elif n == 132: \n        return519\n    elif n == 133: \n        return521\n    elif n == 134: \n        return523\n    elif n == 135: \n        return527\n    elif n == 136: \n        return531\n    elif n == 137: \n        return543\n    elif n == 138: \n        return549\n    elif n == 139: \n        return551\n    elif n == 140: \n        return553\n    elif n == 141: \n        return557\n    elif n == 142: \n        return561\n    elif n == 143: \n        return563\n    elif n == 144: \n        return567\n    elif n == 145: \n        return571\n    elif n == 146: \n        return573\n    elif n == 147: \n        return579\n    elif n == 148: \n        return581\n    elif n == 149: \n        return583\n    elif n == 150: \n        return587\n    elif n == 151: \n        return591\n    elif n == 152: \n        return593\n    elif n == 153: \n        return597\n    elif n == 154: \n        return601\n    elif n == 155: ",
        "test": "assert     find_star_num(2) == -1",
        "num_ids": 2112,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return(ord(k))\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 92,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for even in arr:\n        if even % 2 == 0:\n            even_sum += even\n    return even_sum\n    \ndef sum_odd_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    odd_sum = 0\n    for odd in range(len(arr)):\n        if (odd % 2) == 1:\n            odd_sum += arr[odd]\n    return odd_sum\n    \ndef sum_even_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers and odd numbers at even positions of a list.\n    '''\n    even_odd_sum = 0\n    for even in range(len(arr)):\n        if even % 2 == 0:\n            even_odd_sum += arr[even]\n    return sum_even_and_even_index(arr) + sum_odd_and_odd_index(arr)\n    \ndef selectionSort(arr):  \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n",
        "test": "assert     sum_even_and_even_index([]) == 0",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0: \n        return 0\n    elif n < 0: \n        return 0\n    elif n == 1: \n        return n \n    elif n == 2: \n        return n * n \n    elif n == 3: \n        return n * n * n \n    else: \n        return n * n * n * n \n",
        "test": "assert ",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted = []\n    for element in test_list:\n        rear_extracted.append(element[1])\n    return rear_extracted\n",
        "test": "assert     rear_extract([(3, 5), (7, 2), (4, 3)]), \"The return should be [7, 2, 5]\"",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Error: Each tuple must have the same length.')\n",
        "test": "assert     substract_elements((1, 2, 3), (3, 4, 5, 6)) == (1, 3, 4, 5, 6)",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 2) / 6\n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (2*(r*h))\n",
        "test": "assert     volume_cylinder(0,2) == 0",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = dict.copy()\n    d = dict.copy()\n    for key, value in d.items():\n        if value >= n:\n            d[key] = value\n    return d\n",
        "test": "assert     dict_filter(dict, 10) == {'Vios': 20, 'Cisco': 10}",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_elements = []\n    for item in test_tup:\n        first_elements.append(item)\n    return len(first_elements)\n",
        "test": "assert     count_first_elements([]) == 0, 'empty tuple'",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # check to see if n is a positive number\n    if not n.isdigit(): \n        print('Please input a valid number!')\n        return False\n    \n    # check if n is even\n    if n % 2 == 0: \n        return False\n    \n    # Check if it is a decimal\n    elif int(n) % 2!= 0: \n        print('Please input a number that is even!')\n        return False\n    else: \n        # return the decagualated number\n        return int(n)\n",
        "test": "assert is_num_decagonal(3) == True",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n",
        "test": "assert      sequential_search([2, 1, 3, 4, 2], 4) == (False, -1)",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    return len(set(test_list)) == len(test_list)\n",
        "test": "assert     all_unique(['apples','blueberry','apricot','lemon']) == True, \"All unique elements must be in one list\"",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    a = []\n    b = []\n    for i in range(len(nums1)):\n        a.append(nums1[i] - nums2[i])\n    for j in range(len(nums2)):\n        b.append(nums2[j] - nums1[j])\n    return a,b\n    \n    \n",
        "test": "assert ",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 283,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return n\ndef validate2(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n <= 0: \n        return False\n    for i in range(10): \n        if n % 10 == i: \n            return False\n    return True \n",
        "test": "assert     validate(1) == True",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #print(element)\n    for item in list:\n        if item == element:\n            #print('Inlist:'+ str(item))\n            return True\n    #print('Not inlist:'+ str(item))\n    return False\n",
        "test": "assert     check_element([0, 1, 2, 3, 4, 5], 2) == True",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a = 0\n    b = 0\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'b':\n            a += 1\n        elif text[i] == 'a' and text[i+1]!= 'b':\n            a += 1\n        elif text[i]!= 'a' and text[i+1] == 'b':\n            b += 1\n    return a == 2 and b == 2\n",
        "test": "assert ",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #define variables\n    sums = []\n    remainder = []\n    \n    #check if a is a subarray\n    if (n == 1):\n        return a[0]\n    \n    #loop through array and add elements to sums\n    for i in range(n):\n        sums.append(a[i] + k*i)\n    \n    #check if elements sum to original array\n    for i in range(n):\n        remainder.append(sums[i] - a[i])\n    \n    #get the smallest element\n    remainder.sort()\n    smallest = remainder[0]\n    \n    #find the smallest element in remainder\n    for i in range(len(remainder)):\n        if remainder[i] <= smallest:\n            smallest = remainder[i]\n            \n    #find the sum\n    return smallest\n    \n",
        "test": "assert     max_sub_array_sum_repeated([1,1,1,2,3,3,4,4,4,4,5,5,5], 4, 2) == 24",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    return (n ** 2)\n",
        "test": "assert     square_Sum(3) == 9",
        "num_ids": 127,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    \n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if(list1[i][j] > length):\n                length = list1[i][j]\n            \n    return length\n    \n    \n",
        "test": "assert     max_length([]) == 0",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 2: \n        return 1\n",
        "test": "assert     count_no_of_ways(0, 1) == 1, \"count_no_of_ways method failed to return 1\"",
        "num_ids": 2224,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n > m: # if n is greater than m\n        a = n\n        b = m\n        while a > 0:\n            a = a // 10\n            b = b // 10\n        return b\n    else:\n        return n\n",
        "test": "assert     find(10,10) == 5",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    w_sides = w/2\n    h_sides = h/2\n    if w_sides < h_sides:\n        return w_sides\n    return h_sides\n",
        "test": "assert     otherside_rightangle(12,6) == 3",
        "num_ids": 1790,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) <= 0:\n        return None\n    else:\n        return max(listval)\n",
        "test": "assert     max_val([1, 2, 3, 4]) == 4, \"Test failed\"",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number%i==0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "test": "assert         sum_div(3) == 1",
        "num_ids": 202,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n",
        "test": "assert ",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n",
        "test": "assert     flatten_list([1, [2, 3], 4]) == [1, 2, 3, 4]",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for tup in stdata:\n        if max_aggregate < tup[1]:\n            max_aggregate = tup[1]\n    return max_aggregate\ndef get_intervals(stdata):\n    '''\n    Return the intervals of the given list of tuples.\n    '''\n    intervals = []\n    for tup in stdata:\n        intervals.append((tup[0], tup[1]))\n    return intervals\ndef get_buckets(stdata):\n    '''\n    Return the bucketized intervals of the given list of tuples.\n    '''\n    buckets = defaultdict(list)\n    for tup in stdata:\n        buckets[tup[0]].append(tup[1])\n    return buckets\ndef generate_intervals(buckets):\n    '''\n    Return the interval in lists of intervals of the given buckets.\n    '''\n    intervals = []\n    for bucket in buckets:\n        intervals.append([bucket, bucket, max_aggregate(buckets[bucket])])\n    return intervals\ndef generate_buckets(intervals):\n    '''\n    Return the bucketized intervals in lists of intervals of the given intervals.\n    '''\n    buckets = defaultdict(list)\n    for tup in intervals:\n        buckets[tup[0]].append(tup[1])\n    return buckets\ndef get_stats(buckets):\n    '''\n    Return the statistics of the given bucketized intervals.\n    '''\n    stats = {}\n    for bucket in buckets:\n        stats[bucket] = len(buckets[bucket])\n    return stats\ndef get_intervals_stats(buckets):\n    '''\n    Return the statistics of the given bucketized intervals.\n    '''\n    intervals = get_intervals(buckets)\n    stats = get_stats(buckets)\n    return stats, intervals\ndef get_buckets_stats(intervals):\n    '''\n    Return the statistics of the given interval bucketized intervals.\n    '''\n    buckets = get_buckets(intervals)\n    stats = get_stats(buckets)\n    return stats, intervals\ndef get_intervals_stats(buckets):\n    '''\n    Return the statistics of the given interval bucketized intervals.\n    '''\n    intervals = get_intervals(buckets)\n    stats = get_stats(buckets)\n    return stats, intervals\ndef get_buckets_stats(intervals):\n    '''\n    Return the statistics of the given interval bucketized intervals.\n    '''\n    buckets = get_buckets(intervals)\n    stats = get_stats(buckets)\n    return stats, intervals\ndef is_valid_interval(interval):\n    '''\n    Return True if the interval is valid and False otherwise.\n    '''\n    return interval[0] < interval[1]\ndef is_valid_bucket(bucket):\n    '''\n    Return True if the bucket is valid and False otherwise.\n    '''\n    return len(bucket) == 2 and 0 <= bucket[0] and bucket[0] < bucket[1]\ndef is_valid_stats(stats):\n    '''\n    Return True if the stats is valid and False otherwise.\n    '''\n    for key, value in stats.items():\n        if not is_valid_interval(key):\n            return False\n        if not isinstance(value, int) or value <= 0:\n            return False\n    return True\ndef is_valid_intervals(intervals):\n    '''\n    Return True if the intervals is valid and False otherwise.\n    '''\n    for interval in intervals:\n        if not is_valid_interval(interval):\n            return False\n    return True\ndef is_valid_buckets(buckets):\n    '''\n    Return True if the buckets is valid and False otherwise.\n    '''\n    for bucket in buckets:\n        if not is_valid_bucket(bucket):\n            return False\n    return True\ndef is_valid_intervals_stats(stats):\n    '''\n    Return True if the stats is valid and False otherwise.\n    '''\n    for stats_key, stats_value in stats.items():\n        if not isinstance(stats_value, int):\n            return False\n        if not is_valid_interval(stats_key):\n            return False\n    return True\ndef is_valid_buckets_stats(stats):\n    '''\n    Return True if the stats is valid and False otherwise.\n    '''\n    for stats_key, stats_value in stats.items():\n        if not isinstance(stats_value, int):\n            return False\n        if not is_valid_bucket(stats_key):\n            return False\n    return True\ndef get_buckets_stats(buckets):\n    '''\n    Return the statistics of the given bucketized intervals.\n    '''\n    stats = get_stats(buckets)\n    return stats\ndef get_intervals_stats(intervals):\n    '''\n    Return the statistics of the given interval bucketized intervals.\n    '''\n    stats = get_stats(intervals)\n    return stats\ndef get_buckets_stats(intervals):\n    '''\n    Return the statistics of the given interval bucketized intervals.\n    '''\n    stats = get_stats(intervals)\n    return stats\ndef print_intervals(intervals):\n    '''\n    Print the intervals in a nice way.\n    '''\n    if intervals == []:\n        return\n    for interval in intervals:\n        print(\"(\", end=\"\")\n        print(\",\".join(map(str, interval)), end=\"\")\n        print(\", max_aggregate=\" + str(max_aggregate(interval)))\n    print(\")\")\ndef print_buckets(buckets):\n    '''\n    Print the buckets in a nice way.\n    '''\n    if buckets == []:\n        return\n    for bucket in buckets:\n        print(\"(\" + str(bucket[0]) + \",\" + str(bucket[1]) + \")\", end=\"\")\n    print(\")\")\ndef print_buckets_stats(buckets):\n    '''\n    Print the buckets statistics in a nice way.\n    '''\n    if buckets == []:\n        return\n    print(\"Bucketized intervals:\")\n    print(buckets)\n    print(\"Intervals:\")\n    print_intervals(buckets)\ndef print_buckets_stats(stats):\n    '''\n    Print the buckets statistics in a nice way.\n    '''\n    if stats == []:\n        return\n    print(\"Bucketized intervals:\")\n    print(stats)\n    print(\"Intervals:\")\n    print_intervals(stats)\ndef print_intervals_stats(stats):\n    '''\n    Print the intervals statistics in a nice way.\n    '''\n    if stats == []:\n        return\n    print(\"Intervals:\")\n    print_intervals(stats)\ndef print_buckets_stats(stats):\n    '''\n    Print the buckets statistics in a nice way.\n    '''\n    if stats == []:\n        return\n    print(\"Bucketized intervals:\")\n    print(stats)\n    print(\"Intervals:\")\n    print_intervals(stats)\ndef print_intervals_stats(stats):\n    '''\n    Print the intervals statistics in a nice way.\n    '''\n    if stats == []:\n        return\n    print(\"Intervals:\")\n    print_intervals(stats)\ndef print_buckets_stats(stats):\n    '''\n    Print the buckets statistics in a nice way.\n    '''\n    if stats == []:\n        return\n    print(\"Bucketized intervals:\")\n    print(stats)\n    print(\"Intervals:\")\n    print_intervals(stats)\ndef is_valid_bucket(bucket):\n    '''\n    Return True if the bucket is valid and False otherwise.\n    '''\n    return bucket[0] < bucket[1]\ndef is_valid_buckets(buckets):\n    '''\n    Return True if the buckets is valid and False otherwise.\n    '''\n    for bucket in buckets:\n        if not is_valid_bucket(bucket):\n            return False\n    return True\ndef is_valid_stats(stats):\n    '''\n    Return True if the stats is valid and False otherwise.\n    '",
        "test": "assert ",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n    ",
        "test": "assert     count_binary_seq(3) == 3",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i, v in enumerate(d):\n        depth += 1\n        if i == len(d) - 1:\n            break\n        if d[i] == d[i + 1]:\n            depth -= 1\n    return depth\n",
        "test": "assert     dict_depth({\"a\":1,\"b\":2}), \"dict_depth({'b':2}) should be 2\".format(",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    rotation_list = []\n",
        "test": "assert     find_Element(arr,ranges,rotations,1) == 1",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_list = list()\n    p_list.append(words[0][0])\n    for i in range(1, len(words)):\n        if words[i][0] in p_list:\n            p_list.append(words[i][0])\n        else:\n            p_list.append(words[i][0] + 'p')\n    return p_list\n",
        "test": "assert     start_withp(['aa', 'bbb', 'ccc', 'ddd', 'eee']) == ('aa', 'bbb', 'ccc')",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    cur = a[index]\n    start_index = index\n    cur_sum = cur\n    for i in range(index, n, 1):\n        if cur < a[i] and cur_sum + (k - i) <= n:\n            cur_sum += a[i]\n            if i > 0:\n                start_index = i\n        else:\n            cur_sum = cur\n            start_index = i\n        if start_index > 0 and cur_sum + (k - i) >= n:\n            cur_sum = cur_sum + a[start_index]\n            if i < n - 1:\n                start_index = start_index - 1\n            else:\n                start_index = 0\n    return cur_sum\n",
        "test": "assert     max_sum_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6, 0, 2) == 10, \"False\"",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=tuplex[0:2]\n    tuplex=[colon_tuplex(x,m,n) for x in tuplex]\n    if(len(tuplex)<2):\n        return tuplex\n    return tuplex[0]\n",
        "test": "assert     colon_tuplex(tuplex(1),2,1) == (1,1,1)",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return\n    \n    for i in range(1, N + 1):\n        if nums2[i - 1] > nums1[i - 1]:\n            return (i, len(nums1) + 1, nums1[i - 1])\n    return\n",
        "test": "assert     large_product([1,2,3,4,5], [2,3,5,7,8], 3) == [2,3,5,7,8], \"The specified number of largest products does not correspond to the given numbers.\"",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(5,7) == 7",
        "num_ids": 156,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('') == ()",
        "num_ids": 251,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # increment bit by 1\n    n = n|1\n    # return result\n    return n\n",
        "test": "assert     set_left_most_unset_bit(1) == 1",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    a=math.pi*math.pow(r,2)\n    h=math.pi*h\n    b=a*(1/math.cos(h))\n    print('volume cone: ',b)\n    return b",
        "test": "assert     volume_cone(0,0) == 0",
        "num_ids": 171,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    num = n; \n    if n < 2: \n        return num \n    else: \n        return highest_Power_of_2(n - 1) \n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [None]*(n+1) \n    lucas[0] = 0\n    lucas[1] = 1\n    for i in range(2, n+1): \n        lucas[i] = lucas[i-1] + lucas[i-2] \n    return lucas[n]\n",
        "test": "assert     find_lucas(2) == 1",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if type(list_) is not list:\n        raise TypeError('add_string() requires a list')\n    for el in list_:\n        if type(el) is str:\n            list_.append(el.format(string))\n        else:\n            add_string(el, string)\n",
        "test": "assert add_string([1,2,3,4,5,6,7,8,9,10], '{:d}') == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = dict()\n    if l1:\n        d.update(l1)\n    if l2:\n        d.update(l2)\n    if l3:\n        d.update(l3)\n    return d\n",
        "test": "assert     convert_list_dictionary([1, 2, 3], 4, [5, 6]) == {1: {2: [3], 3: [5, 6]}, 2: {3: [4], 4: [5, 6]}}",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 7\n    \n    return get_max_sum (n/2) + get_max_sum (n/3) + get_max_sum (n/4) + get_max_sum (n/5)",
        "test": "assert     get_max_sum(0) == 0.0",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n",
        "test": "assert     max_length_list([]) == 0",
        "num_ids": 107,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup[0]!= test_tup[1]:\n        return False\n    return True\n",
        "test": "assert     check_distinct((1,1,1,1,2,2,3,3,3,4,5,6,7,7,7,7))",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    result = []\n    for x in str1:\n        if x not in result:\n            result.append(x)\n    return result[0]\n",
        "test": "assert     first_non_repeating_character('abbccdefg') == 'a', 'First non repeating character is not \"a\"'",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not string: return False\n    if string[0] == string[-1]: return True\n    elif len(string) == 1: \n        return False\n    else: return False\n",
        "test": "assert     check_char('A') == True",
        "num_ids": 156,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n",
        "test": "assert     median_numbers(1,3,4) == 1",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += int(num)\n    return result\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n",
        "test": "assert     bitwise_xor((1,2,3,4,5), (1,3,2,3,4)) == False",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # write your code here\n    if len(test_list) == 0:\n        return 0\n    elif len(test_list) == 1:\n        return 1\n    elif len(test_list) == 2:\n        return 2\n    else:\n        return 3\n    ",
        "test": "assert     extract_freq([\"a\", \"b\", \"a\", \"b\", \"a\"]) == 3, \"test_list does not contain 3 unique tuples\"",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def combine_tuples(tup1, tup2):\n        '''\n        Write a function to combine two given tuples.\n        '''\n        # Formal idea: return tuple(tup1 + tup2)\n        return tuple(tup1[i] + tup2[i] for i in range(len(tup1)))\n    \n    def append_tuples(tup1, tup2):\n        '''\n        Write a function to append tuples in the given two nested tuples.\n        '''\n        def get_nested_tuples(tup):\n            '''\n            Recursively create a nested tuple of given tuples.\n            '''\n            # Add new tuple to list\n            lst.append(tuple(tup[i] for i in range(len(tup))))\n            # Recursively call function on nested tuples\n            for i in range(len(tup)):\n                get_nested_tuples(tup[i])\n        # return a tuple with the first element as last element\n        # and append that element to the new tuple\n        return tuple(tup1[i] + tup2[i] for i in range(len(tup1)))\n    \n    # Combining two tuples\n    # and create a tuple to store the result\n    lst = []\n    # Make a tuple containing the first element in each tuple\n    tup1 = test_tup1[0]\n    # Make a tuple containing the second element in each tuple\n    tup2 = test_tup2[0]\n    \n    # Add the elements of the tuples to the list\n    get_nested_tuples(tup1)\n    get_nested_tuples(tup2)\n    \n    # Add the tuples to the list\n    return combine_tuples(lst, tup1) + combine_tuples(lst, tup2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     add_nested_tuples((1,2,3,4,5), (6,7,8,9,10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)",
        "num_ids": 2271,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a>b:\n        return b\n    else:\n        return a\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    c=a+b\n    return c/2\n    \ndef median(a,b):   \n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a>b:\n        if a>=b:\n            return (a+b)/2\n        else:\n            return (b+a)/2\n    else:\n        return a\n",
        "test": "assert     minimum(2,2) == 2",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        tuplex.index(tuple1)\n        return True\n    except ValueError:\n        return False\n    except:\n        return False\n",
        "test": "assert     check_tuplex((\"V\", \"E\", \"S\", \"M\", \"B\", \"T\", \"A\"), (\"G\", \"S\", \"M\", \"B\", \"T\", \"A\")) == False",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2):\n        return True\n    return False\n",
        "test": "assert     find_Parity(4) == 0",
        "num_ids": 138,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(str(n)) == 1:\n        return n\n    else:\n        return n%10 + rearrange_bigger(int(n/10))*10\n",
        "test": "assert     rearrange_bigger(1) == 1",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    n = len(nums1) + len(nums2)\n    nums1.sort()\n    nums2.sort()\n    return _k_smallest_pairs(nums1, nums2, k, n)\n",
        "test": "assert ",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return list1[0]\n    else:\n        return list1[0] * list1[1]\n",
        "test": "assert     min_product_tuple([(1,1), (2,2), (3,3), (4,4), (5,5), (6,6), (7,7), (8,8), (9,9), (10,10), (11,11), (12,12), (13,13), (14,14), (15,15), (16,16), (17,17), (18,18), (19,19), (20,20), (21,21), (22,22), (23,23), (24,24), (25,25), (26,26), (27,27), (28,28), (29,29), (30,30), (31,31), (32,32), (33,33), (34,34), (35,35), (36,36), (37,37), (38,38), (39,39), (40,40), (41,41), (42,42), (43,43), (44,44), (45,45), (46,46), (47,47), (48,48), (49,49), (50,50), (51,51), (52,52), (53,53), (54,54), (55,55), (56,56), (57,57), (58,58), (59,59), (60,60), (61,61), (62,62), (63,63), (64,64), (65,65), (66,66), (67,67), (68,68), (69,69), (70,70), (71,71), (72,72), (73,73), (74,74), (75,75), (76,76), (77,77), (78,78), (79,79), (80,80), (81,81), (82,82), (83,83), (84,84), (85,85), (86,86), (87,87), (88,88), (89,89), (90,90), (91,91), (92,92), (93,93), (94,94), (95,95), (96,96), (97,97), (98,98), (99,99), (100,100), (101,101), (102,102), (103,103), (104,104), (105,105), (106,106), (107,107), (108,108), (109,109), (110,110), (111,111), (112,112), (113,113), (114,114), (115,115), (116,116), (117,117), (118,118), (119,119), (120,120), (121,121), (122,122), (123,123), (124,124), (125,125), (126,126), (127,127), (128,128), (129,129), (130,130), (131,131), (132,132), (133,133), (134,134), (135,135), (136,136), (137,137), (138,138), (139,139), (140,140), (141,141), (142,142), (143,143), (144,144), (145,145), (146,146), (147,147), (148,148), (149,149), (150,150), (151,151), (152,152), (153,153), (154,154), (155,155), (156,156), (157,157), (158,158), (159,159), (160,160), (161,161), (162,162), (163,163), (164,164), (165,165), (166,166), (167,167), (168,168), (169,169), (170,170), (171,171), (172,172), (173,173), (174,174), (175,175), (176,176), (177,177), (178,178), (179,179), (180,180), (181,181), (182,182), (183,183), (184,184), (185,185), (186,186), (187,187), (188,188), (189,189), (190,190), (191,191), (192,192), (193,193), (194,194), (195,195), (196,196), (197,197), (198,198), (199,199), (200,200), (201,201), (202,202), (203,203), (204,204), (205,205), (206,206), (207,207), (208,208), (209,209), (210,210), (211,211), (212,212), (213,213), (214,214), (215,215), (216,216), (217,217), (218,218), (219,219), (220,220), (221,221), (222,222), (223,223), (224,224), (225,225), (226,226), (227,227), (228,228), (229,229), (230,230), (231,231), (232,232), (233,233), (234,234), (235,235), (236,236), (237,237), (238,238), (239,239), (240,240), (241,241), (242,242), (243,243), (244,244), (245,245), (246,246), (247,247), (248,248), (249,249), (250,250), (251,251), (252,252), (253,253), (254,254), (255,255), (256,256), (257,257), (258,258), (259,259), (260,260), (261,261), (262,262), (263,263), (264,264), (265,265), (266,266), (267,267), (268,268), (269,269), (270,270), (271,271), (272,272), (273,273), (274,274), (275,275), (276,276), (277,277), (278,278), (279,279), (280,280), (281,281), (282,282), (283,283), (284,284), (285,285), (286,286), (287,287), (288,288), (289,289), (290,290), (291,291), (292,292), (293,293), (294,294), (295,295), (296,296), (297,297), (298,298), (299,299), (300,300), (301,301), (302,302), (303,303), (304,304), (305,305), (306,306), (307,307), (308,308), (309,309), (310,310), (311,311), (312,312), (313,313), (314,314), (315,315), (316,316), (317,317), (318,318), (319,319), (320,320), (321,321), (322,322), (323,323), (324,324), (325,325), (326,326), (327,327), (328,328), (329,329), (330,330), (331,331), (332,332), (333,333), (334,334), (335,335), (336,336), (337,337), (338,338), (339,339), (340,340), (341,341), (342,342), (343,343), (344,344), (345,345), (346,346), (347,347), (348,348), (349,349), (350,350), (351,351), (352,352), (353,353), (354,354), (355,355), (356,356), (357,357), (358,358), (359,359), (360,360), (361,361), (362,362), (363,363), (364,364), (365,365), (366,366), (367,367), (368,368), (369,369), (370,370), (371,371), (372,372), (373,373), (374,374), (375,375), (376,376), (377,377), (378,378), (379,379), (380,380), (381,381), (382,382), (383,383), (384,384), (385,385), (386,386), (387,387), (388,388), (389,389), (390,390), (391,391), (392,392), (393,393), (394,39",
        "num_ids": 2173,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_index = 0\n    for i in range(len(listval)):\n        if listval[i] < listval[min_index]:\n            min_index = i\n    return listval[min_index]\n",
        "test": "assert     min_val([6,2,3,4]) == 6",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n",
        "test": "assert ",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    if len(l) <= 1:\n        return l\n    elif len(l) == 2:\n        if l[1] % 2 == 0:\n            return l\n        else:\n            return l[1:]\n    else:\n        l1 = l[1: len(l)]\n        if l1[0] % 2 == 0:\n            return l1\n        else:\n            return l1[1:]\n",
        "test": "assert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10], \"Expected [1,2,3,4,5,6,7,8,9,10]\"",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([1, 2, 3, 4], 0) == 1",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([1,2,3,4,5,6,7,8,9,10], [2,3,4,5,6,7,8,9,10,11]) == True, \"Incorrect\"",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # sort the array to get the highest product\n    arr = sorted(arr, reverse = True) \n    # iterate through array and check pair for each product\n    for i in range(len(arr) - 1):\n        for j in range(len(arr) - 1 - i):\n            # if product is bigger than it\n            if arr[j] > arr[j + 1]:\n                # swap the element in array and the element in the sorted array\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    # if it is the array is sorted in ascending order\n    if arr == sorted(arr, reverse = True):\n        # if there are two products\n        if arr[0]!= arr[1]:\n            return arr[0]\n    return -1\n",
        "test": "assert ",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # use a dictionary to find if an element is present in another.\n    \n    # getting the first element in the list \n    elements = dict() \n    for i in Input: \n        if i not in elements: \n            elements[i] = 0 \n        elements[i] += 1 \n    # looping through the dictionary \n    for i in elements: \n        if elements[i] == 1: \n            return i \n    \n    # return the key \n    return 'Not Found'\n    ",
        "test": "assert     group_tuples([1, (1, 2), (1, 2, 3), (1, 2, 3, 4)]) == 1",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    i = 0\n    m = lst[0]\n    for j in range(len(lst)):\n        if m > lst[j]:\n            m = lst[j]\n        i = i + 1\n    return i\n",
        "test": "assert     (Find_Max([5,4,3,2,1]) == 5), \"min_length\"",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_list = []\n    for i in list1:\n        sum_list.append(round(i,2))\n    print(sum_list)\n    sum = 0\n    for i in sum_list:\n        sum += i\n    print(sum)\n    \nlist1 = [1,2,3,4,5]\nround_and_sum(list1",
        "test": "assert ",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube=[]\n    for i in range(1,n+1):\n        cube.append(i**3)\n    print(cube)\n    sum=0\n    for i in range(len(cube)):\n        sum+=cube[i]\n    return sum\n",
        "test": "assert     cube_Sum(0) == 0",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    # take all the elements of the tuple\n    \n    # create a list of the elements and create a new tuple by concatenating them\n    \n    # return the list\n    \n    pass\n",
        "test": "assert     concatenate_tuple((1,2,3,4)) == (1,2,3,4)",
        "num_ids": 2217,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total/n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[0])\n",
        "test": "assert     extract_rear(tuple_1) == ('4',)",
        "num_ids": 154,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    # loop over the list \n    for item in list1: \n        # if the element is in the list \n        if x in item: \n            # increment the count \n            count += 1\n    # return the count \n    return count\n        \n        \n",
        "test": "assert     count_element_in_list(['abc','def','g','j'], 'z') == 0",
        "num_ids": 470,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            nums[i] = False\n    return nums\n",
        "test": "assert     filter_oddnumbers([1, 1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split(' ')\n    new_date =''.join([dt[0], dt[1], dt[2], dt[3]])\n    return new_date\n",
        "test": "assert     '1900-01-01'== change_date_format('1900-01-01')",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # store the length of the array\n    length = n\n    # store current position\n    pos = 0\n    # create loop\n    while pos < n:\n        # find position where current position is less than current position\n        # put current position in bracket to go to next position\n        while pos < length and my_list[pos] < my_list[pos + 1]:\n            # increment pos\n            pos += 1\n        # if current position is not less than the next position\n        if pos < length:\n            # put current position in bracket to go to next position\n            my_list[pos], my_list[pos + 1] = my_list[pos + 1], my_list[pos]\n            # move to the next position\n            pos += 1\n        # increment length by 1\n        length -= 1\n    \n    # return\n    return my_list\n    ",
        "test": "assert     shell_sort([]) == [],'shell_sort should return an empty array'",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tup1,tup2\n",
        "test": "assert     and_tuples((1, 2, 3), (4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print(a,b,c)\n    return a*(b**2) + c*b\n",
        "test": "assert     parabola_directrix(1, 0, 0) == (0, 0, 1)",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = 0\n    \n    for element in list1:\n        if element in list2:\n            common+=1\n        else:\n            return False\n        \n    if common == len(list2):\n        return True\n    else:\n        return False\n",
        "test": "assert     common_element([1, 1], [1, 2]) == True",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height=int(height)\n    if height>=0:\n        if base1>base2:\n            height=height+1\n            base=base2\n        else:\n            height=height+1\n            base=base1\n    if height<0:\n        height=0\n        base=base1\n    return(base)\n",
        "test": "assert     median_trapezium(1,1,3) == 1, \"fail to find 1\"",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] >= number:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 135,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = \"\"\n    # pattern = re.compile(r'a(.)b')\n    pattern = re.compile(r'a(.)b')\n    text = text.split(\"a\")\n    for word in text:\n        result = result + word\n    result = result.split(\"b\")\n    for word in result:\n        result = result + word\n    #print(result)\n    return result\n",
        "test": "assert ",
        "num_ids": 4650,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    sum = 0\n    while n > 0 :\n        digit = n % 10\n        sum = sum * 10 + digit\n        n = n // 10\n    return sum\n",
        "test": "assert     last_Digit(10) == 1",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1_neg = []\n    for num in list1:\n        list1_neg.append(-num)\n    return list1_neg\n",
        "test": "assert neg_nos([]) == [], \"Failed\"",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char % 2!= 0:\n            new_str += char\n    return new_str\n",
        "test": "assert     remove_odd(\"ADOBECODEBANC\") == \"ABC\"",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    # Bidirectional data structure (List)\n",
        "test": "assert     count_bidirectional(((1,2),(3,4),(5,6))) == 3",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L)==0:\n        return 0\n",
        "test": "assert     multiple_to_single([1,3,2]) == 2",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def is_adverb(word):\n        '''\n        Return True if a word is an adverb.\n        '''\n        return (word[0].upper() == 'A' and word[1] == 'E') or word[0].upper() == 'A' and word[1] == 'I'\n",
        "test": "assert     find_adverb_position(\"The big dog jumps on the apple\") == (4, 6)",
        "num_ids": 1840,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l <= 1:\n        print(\"ERROR: can't calculate surface area of a cube with less than 2 sides\")\n        return 0\n",
        "test": "assert     surfacearea_cube(5) == 12.0",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums)==0:\n        return -1\n    i = 0\n    count = 0\n    while i<len(nums):\n        if nums[i]>0:\n            count = count + 1\n        i = i+1\n    if count>0:\n        return count/len(nums)\n    else:\n        return -1\n",
        "test": "assert     positive_count(array('i',[1, 2, 3, 4, 5, 6, 7, 8, 9])) == 2",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n",
        "test": "assert     largest_neg([1, 2, -3, 4, 5, -1]) == -1, \"test 3\"",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for index, item in enumerate(test_list):\n        test_list[index] = item[:K]\n    return test_list\n",
        "test": "assert     trim_tuple([1, 2, 3, 4, 5], 2) == (1, 2, 3, 4, 5)",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1]\n",
        "test": "assert     index_multiplication(test_tup1, test_tup2) == (2,4), 'index_multiplication function must return the expected tuple'",
        "num_ids": 2154,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dict = {}\n    for x in tup:\n        if x in dict:\n            dict[x] += 1\n        else:\n            dict[x] = 1\n    for x in dict:\n        lst.append(dict[x])\n    return lst\n",
        "test": "assert     count_Occurrence([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]) == 4",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num*num*num)\n    return cube_nums\n    \n    \ndef solution(nums):\n    '''\n    solution(nums)\n    \n    Given a list of numbers, return the number of cubes that appear.\n    '''\n    cubes = cube_nums(nums)\n    result = sum(cubes)\n    return result\n    ",
        "test": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum\n",
        "test": "assert     cal_sum(1) == 1",
        "num_ids": 159,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # your code goes here\n    return (str[:l])\n",
        "test": "assert     extract_string(str='abcdefghij', l=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = text1.replace(' ', '').replace('\\n', '')\n    return new_text\n",
        "test": "assert     remove_whitespaces(\"\") == \"\"",
        "num_ids": 217,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        return sale_amount \n    else: \n        return 0\n",
        "test": "assert     loss_amount(500,550) == 0",
        "num_ids": 184,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 1:\n        return n \n    else:\n        even = [x for x in range(1,int(math.sqrt(n))) if n % x == 0] \n        sum = n \n        for i in even:\n            sum += (i**2) \n        return sum\n",
        "test": "assert     sumofFactors(1) == 1",
        "num_ids": 217,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_words = re.split(r'\\W+', text.lower())\n    sorted_text = sorted(text_words, key=len)\n    pos = 0\n    while pos < len(sorted_text):\n        if sorted_text[pos] == 'z':\n            return sorted_text[:pos+1]\n        pos += 1\n    return []\n",
        "test": "assert     text_match_wordz(\"WHAT IS A WORD\") == True, \"ERROR\"",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        if monthnum2==2:\n            if(int(monthnum2)<=12):\n                check=True\n            else:\n                check=False\n        else:\n            check=True\n    except ValueError:\n        check=False\n    return check\n",
        "test": "assert     check_monthnumb_number(11) == True",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n        print(stringlist[i])\n    return stringlist\n",
        "test": "assert ",
        "num_ids": 207,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n    return min \ndef Compare(lst1, lst2): \n    '''\n    Write a python function to compare two lists of integers.\n    '''\n    for i in range(0, len(lst1)):\n        if lst1[i] == lst2[i]:\n            continue\n        else:\n            return 'Not Equal'\n    return 'Equal'\ndef Output(lst): \n    '''\n    Write a python function to print the list.\n    '''\n    for i in range(0, len(lst)):\n        print(lst[i], end =\" \")\n    print()\n    ",
        "test": "assert     Find_Min([2, 3, 1, 1, 1, 1, 1, 3, 3, 3]) == 1",
        "num_ids": 2241,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(0, 0) == 0, \"rectangle_area(0, 0) is incorrect\"",
        "num_ids": 163,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1 == '':\n        return ''\n    else:\n        split1 = str1.split(' ')\n        for item in split1:\n            if len(item) > 1:\n                for i in range(len(item)):\n                    if item[i].isupper():\n                        item = item[:i] + item[i].lower() + item[i + 1:]\n        return''.join(split1)\n",
        "test": "assert     remove_uppercase(\"String\") == \"String\"",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def get_first(lst):\n        return lst[0]\n    for i in lst:\n        return get_first(i)\n    return None\n",
        "test": "assert     Extract([[1,2,3,4], [5,6,7,8], [9,10,11,12], [10,11,12,13]]) == 2",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for letter in str:\n        if letter.isupper():\n            counter += 1\n    return counter\nprint(upper_ctr('This is a string')) # Should return 1, because's' is uppercase and 't' is not.\n",
        "test": "assert ",
        "num_ids": 129,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # make a dictionary from list\n    l = dict(zip(list1, list1))\n    \n    # create empty list\n    list2 = []\n",
        "test": "assert     combinations_list([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Fetch the size of the array\n    n = len(arr)\n",
        "test": "assert ",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_length = len(dict)\n    for i in dict:\n        if dict[i]!= dict[n]:\n            return False\n    return True\n",
        "test": "assert     check_value({\"a\": \"A\", \"b\": \"B\", \"c\": \"C\"}, \"b\") == False",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1:\n        if dict1[item] == '':\n            dict1.pop(item)\n            \n    return dict1\n    \ndef sort_dict(d):\n    '''\n    Write a function to sort a given dictionary by key.\n    '''\n    d.sort(key=lambda k: d.get(k))\n    \n    return d\n",
        "test": "assert     drop_empty({\"a\":1, \"b\":2}) == {'a':1, 'b':2}",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # declaring a global variable to get the result\n    result = 1\n    # starting from every number\n    for i in range(len(arr)):\n        result = result * arr[i]\n    return result\n",
        "test": "assert     max_product([1]) == 1",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if not len(test_tup):\n        return\n    if not all(isinstance(tup, tuple) for tup in test_tup):\n        print('Invalid data')\n        return\n    if len(test_tup) == 1:\n        print('Invalid data')\n        return\n    if not all(isinstance(tup, tuple) for tup in test_tup):\n        print('Invalid data')\n        return\n    if len(test_tup) <= 1:\n        print('Invalid data')\n        return\n    total = 0\n    for i, tup in enumerate(test_tup):\n        total += (tup[0] + tup[1])\n    return total\n",
        "test": "assert add_pairwise((1,2))!= (3,4)",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Start with a product of all numbers\n    # multiply the first number by itself\n    # multiply the remaining numbers by the product of the first number and the product of the first number * the first number\n    # repeat multiplication until the product of the remaining numbers is not divisible by the product of the first number\n    # finally return the product of the remaining numbers and the product of the first number * the first number\n    product = 1\n",
        "test": "assert     find_remainder([1, 2, 3, 4, 5], 7) == 42, 'incorrect'",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)==0: return False\n    elif len(l)==1:\n        return l[0] == l[0] and l[0]%2!= 0\n    else:\n        d = {}\n        for i in range(len(l)-1): \n            if l[i] in d:\n                d[l[i]]+=1\n            else: \n                d[l[i]]=1\n        for k, v in d.items():\n            if v==1:\n                return False\n        return True\n",
        "test": "assert ",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_tuple1 = tuple(test_list1)\n    test_tuple2 = tuple(test_list2)\n    for i in range(0, len(test_list1)):\n        if test_tuple1[i]!= test_tuple2[i]:\n            return test_list1[i]\n    return test_list1[i]\n",
        "test": "assert     tuple_intersection(('a', 'b'), ('b', 'c')) == 'a'",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if len(str1)==0:\n        return str1\n    if len(str1)==1:\n        return str1[0].replace(ch,newch)\n    if ch not in str1[0]:\n        return str1[1:]\n    else:\n        return str1[0].replace(ch,newch) + str1[1:]\n",
        "test": "assert ",
        "num_ids": 205,
        "indeed": false
    },
    {
        "number": 475,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Fill in the fill_value function\n    # Fill in the sorted function\n    return Counter(dict1)\n",
        "test": "assert     sort_counter({'a': 2, 'b': 5, 'c': 7}) == {'b': 5, 'a': 2, 'c': 7}",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = ''\n    for character in string:\n        if character.isupper():\n            new_string += character.lower()\n        else:\n            new_string += character\n    return new_string\n",
        "test": "assert     is_lower('asdf') == 'asdf', \"correct pass\"",
        "num_ids": 157,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    newstr = re.sub('[a-z]', '', str1)\n    return newstr\n",
        "test": "assert remove_lowercase('TEST') == 'TEST'",
        "num_ids": 2139,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    lst = []\n    for i in str(n) :\n        lst.append(i)\n    return lst[0]\n",
        "test": "assert ",
        "num_ids": 131,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # your code goes here\n    if len(list) == 0:\n        print(\"no odd numbers\")\n    else:\n        for i in range(len(list)//2):\n            print(list[i])\n    return \n    \n",
        "test": "assert ",
        "num_ids": 188,
        "indeed": false
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    return abs(sum((i**3) for i in range(1,n))-sum(i**3 for i in range(1,n)))\n",
        "test": "assert     difference(3) == 0",
        "num_ids": 2258,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    return 0\n",
        "test": "assert     find_Odd_Pair(A,N) == 4",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # empty string\n    if not string:\n        return \"\"\n    \n    # keep a pointer\n    stack = []\n    \n    # move string and append to string\n    for char in string:\n        stack.append(char)\n        \n    # append the string to string\n    result = \"\".join(stack)\n    \n    # if it's empty\n    if not result:\n        result = string\n    \n    # if the stack is empty\n    if not stack:\n        result = \"\".join(stack)\n        \n    return result\n    \n    \n    ",
        "test": "assert     toggle_string('Hello, World!') == 'Hello, World!', 'Should be Hello, World!'",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(map(int, str(abs(n1 - n2))))\n",
        "test": "assert     digit_distance_nums(23,43) == 2",
        "num_ids": 196,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0 or size < 0:\n        return 0\n    if size == 1:\n        return a[0]\n    max_so_far = 0\n    max_ending_here = -1\n    for i in range(0,size):\n        if max_ending_here < a[i]:\n            max_ending_here = max_ending_here + a[i]\n        else:\n            continue\n    for i in range(size,size-1,-1):\n        if max_ending_here < a[i]:\n            max_ending_here = max_ending_here + a[i]\n        else:\n            continue\n    return max_ending_here\n",
        "test": "assert     max_sub_array_sum(a=[], size=0) == 0",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = tuple(sorted(test_tup1))\n    tup2 = tuple(sorted(test_tup2))\n    union = tup1 + tup2\n    return union\n",
        "test": "assert union_elements((1, 2, 3, 4, 5), (6, 7, 8, 9, 10)) == union_elements((1, 2, 3, 4, 5), (6, 7, 8, 9, 10))",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                Max_length = j - i + 1\n    return Max_length\n",
        "test": "assert     Find_Max_Length([]) == 0",
        "num_ids": 2161,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    for k in range(len(text)):\n        if text[k] == '\"':\n            if k+1 < len(text):\n                if text[k+1] == '\"':\n                    continue\n                else:\n                    return text[k+1:]\n        elif text[k] == '\"':\n            if k+1 < len(text):\n                if text[k+1] == '\"':\n                    continue\n                else:\n                    return text[k+1:]\n    return text\n",
        "test": "assert     extract_values(\"In this string\") == \"In this string\"",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if len(arr) < 2: \n        return 0\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1,n): \n        for j in range(i): \n            if arr[i] > arr[j]: \n                dp[i] += dp[j]\n    return dp[n - 1]\n",
        "test": "assert     count_Pairs([1, 3, 5, 7], 4) == 4",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\ndef sort_alphabet(word): \n    '''\n    Write a python function to sort a string alphabetically.\n    '''\n    word_list = split(word)\n    word_list.sort()\n    return ''.join(word_list)\ndef sort_alphabet_with_spaces(word): \n    '''\n    Write a python function to sort a string alphabetically.\n    '''\n    word_list = split(word)\n    word_list.sort(key = sort_alphabet)\n    return ''.join(word_list)",
        "test": "assert ",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Write your code here.\n    sum = 0\n    while n>0:\n        sum = sum + n%10\n        n = n//10\n    return sum\n    \nif __name__ == '__main__':\n    print(\"Example 1:\")\n    print(\"Input : \")\n    print(\"n = 123456789\")\n    print(\"Exception :\")\n    print(\"22\")\n    print(\"Output :\")\n    print(str(sum_digits(123456789)))\n    \n    print(\"Example 2:\")\n    print(\"Input : \")\n    print(\"n = 1000\")\n    print(\"Exception :\")\n    print(\"0\")\n    print(\"Output :\")\n    print(str(sum_digits(1000)))\n",
        "test": "assert ",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([3,1,0,2,4,5,6,7]) is False, \"list is not sorted\"",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dict1 = []\n    for i in range(length):\n        dict1.append({})\n    return dict1\n    \n    \ndef insert(list, k, v):\n    '''\n    Write a function that will insert a key-value pair into the dictionary.\n    The dictionary should have a key of the key-value pair and it should have a value of the value-key pair.\n    '''\n    if k not in list:\n        list.append(k)\n    list[list.index(k)][v] = v\n    \n    \ndef get(list, k):\n    '''\n    Write a function that will return the value of a key-value pair.\n    '''\n    if k in list:\n        return list[list.index(k)]\n    else:\n        return None\n    \n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 133,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_list(list1):\n        return sorted(list1, key = str.casefold)\n    return sort_list(list1)\n    \ndef list_join(list1, list2):\n    '''\n    Write a function to join a list of strings into a single string.\n    '''\n    return ', '.join(list1) +'' + ', '.join(list2)\n    \ndef list_count(list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [list.count(word) for word in list]\n    \ndef list_index(list, word):\n    '''\n    Write a function to return the position of a given word in a given list.\n    '''\n    return list.index(word)\n    \ndef word_count(list):\n    '''\n    Write a function to count the number of occurrences of a word from a given list of words.\n    '''\n    return len(list)\n    \ndef list_reverse(list):\n    '''\n    Write a function to reverse a list of strings.\n    '''\n    return [list[i] for i in range(len(list) - 1, -1, -1)]\n    \ndef list_split(string):\n    '''\n    Write a function to split a given string into two lists of words.\n    '''\n    return [word for word in string.split()]\n    \ndef index(index, list):\n    '''\n    Write a function to return the index of a given word in a given list.\n    '''\n    return list.index(index)\n    \ndef string_join(string):\n    '''\n    Write a function to join a list of strings into a single string.\n    '''\n    return ''.join(string)\n    \ndef string_split(string):\n    '''\n    Write a function to split a given string into a list of strings.\n    '''\n    return [string[i : i + len(string)] for i in range(0, len(string), len(string) - i)]\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return string[::-1]\n    \ndef replace_letters(string, list):\n    '''\n    Write a function to replace the letters in a given string with another given list.\n    '''\n    return ''.join([letter if letter in list else '_' for letter in string])\n    \ndef count_words(list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return len([word for word in list if word.lower() in list])\n    \ndef delete_letter(string, list):\n    '''\n    Write a function to delete a single letter from a given string.\n    '''\n    return string.replace(list[0], list[1], 1)\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_prime(num):\n    '''\n    Write a function to check if a given number is prime.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef prime_generator(num):\n    '''\n    Write a function to generate a prime number between the given range.\n    '''\n    while True:\n        yield num\n        num += 1\n        \ndef is_fibonacci(number):\n    '''\n    Write a function to check if a given number is a Fibonacci number.\n    '''\n    if number < 1 or number > 5:\n        return False\n    if number == 0:\n        return True\n    if number == 1:\n        return False\n    if number == 2:\n        return True\n    if number == 3:\n        return False\n    if number == 4:\n        return True\n    return is_fibonacci(number - 1) and is_fibonacci(number - 2)\n    \ndef fibonacci_generator(number):\n    '''\n    Write a function to generate a Fibonacci number between the given range.\n    '''\n    if number < 1 or number > 5:\n        return None\n    return fibonacci_generator(number - 1) + fibonacci_generator(number - 2)\n    \ndef factorial(number):\n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if number <= 1:\n        return 1\n    else:\n        return number * factorial(number - 1)\n    \ndef fibonacci_count(number):\n    '''\n    Write a function to calculate the number of Fibonacci numbers less than or equal to a given number.\n    '''\n    return factorial(number - 1) // factorial(number - 2)\n    \ndef word_frequency(word, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [list.count(word) for word in list]\n    \ndef word_frequency_list(word, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [list.count(word) for word in list if word.lower() in list]\n    \ndef letter_frequency(string, list):\n    '''\n    Write a function to count the number of times a given letter appears in a given list of words.\n    '''\n    return [string.count(letter) for letter in list]\n    \ndef letter_frequency_list(string, list):\n    '''\n    Write a function to count the number of times a given letter appears in a given list of words.\n    '''\n    return [string.count(letter) for letter in list if letter.lower() in list]\n    \ndef word_frequency_and_letter_frequency(string, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [string.count(word) for word in list if word.lower() in list]\n    \ndef word_frequency_and_letter_frequency_list(string, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [string.count(word) for word in list if word.lower() in list]\n    \ndef lexicographical_sort(string):\n    '''\n    Write a function to sort a given string.\n    '''\n    return sorted(string)\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_list(list):\n    '''\n    Write a function to check if a given list is a palindrome.\n    '''\n    return [list[i] for i in range(len(list) - 1, -1, -1)]\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return string[::-1]\n    \ndef list_count_equal_to_letters(string, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return len([word for word in string if word.lower() in list])\n    \ndef list_index_equal_to_letters(string, list):\n    '''\n    Write a function to return the position of a given word in a given list.\n    '''\n    return list.index(string)\n    \ndef index_and_count(index, string):\n    '''\n    Write a function to return the index of a given word in a given list.\n    '''\n    return index + string.index(index)\n    \ndef word_count_equal_to_letters(string, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return len([word for word in string if word.lower() in list])\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for num in nums:\n        if num not in nums:\n            nums.append(num)\n    return nums\n    \n    \n    \nnums = [1,1,1,1,2,2,3,3,3,4,4,4,5]\n",
        "test": "assert     two_unique_nums([1, 2, 2, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9]",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # user_data=list(map(int,input('Enter the list of numbers ').split()))\n    #\n    # counter=1\n    # result=1\n    #\n    # for i in user_data:\n    #\n    #\n    #\n    #\n    #     result*=i\n    #     if i==counter:\n    #\n    #         break\n    #\n    #     counter+=1\n    #\n    # return(result)\n    result=1\n    counter=1\n    user_data=list(map(int,input('Enter the list of numbers ').split()))\n    print(user_data)\n    for i in user_data:\n        result*=i\n        if i==counter:\n            break\n        counter+=1\n    return(result)\n",
        "test": "assert     unique_product([1,2,3,4,4,5]) == 1",
        "num_ids": 2403,
        "indeed": false
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return(4/3)*np.pi*r**3\n",
        "test": "assert     surfacearea_cylinder(0,0) == 0.0",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (len(A)!= len(B)): \n        return False\n    if (B==[]) or (B==None): \n        return True\n    for i in range(len(A)): \n        if (A[i]!=B[i]): \n            return False\n    return True\n",
        "test": "assert     is_Sub_Array([1,2,3,4], [2,3,4,5]) == False",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial_n = 1\n    for i in range(1,n+1):\n        factorial_n *= i\n    return factorial_n\n",
        "test": "assert ",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list3_first = list1\n    list3_second = list2\n    list3_third = list3\n",
        "test": "assert     interleave_lists([5,4,3,2,1], [5,4,3,2,1], [4,5,6,7,8]) == [5,4,3,2,1,4,5,6,7,8], 'Error'",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1, s2 = test_tup1, test_tup2\n",
        "test": "assert     find_dissimilar([1,2,3,4],[4,5,6,7]) == [5,4]",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = list(test_tuple)\n    even_tuple.pop(0)\n    if even_fnc == 'even':\n        return tuple(even_tuple)\n    else:\n        return tuple(even_tuple)\n",
        "test": "assert     even_ele(test_tuple, even_fnc) == test_tuple",
        "num_ids": 2303,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sqr = int(b)**2\n    #print (sqr)\n    return sqr * s\n",
        "test": "assert     surface_Area(0,0)==0",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) > 0\n",
        "test": "assert     not(my_dict({}))",
        "num_ids": 88,
        "indeed": false
    },
    {
        "number": 583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return catalan_function(num, [0,1])\n",
        "test": "assert     catalan_number(5) == 15",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    match = re.findall(r'[aeiou].*ly$',text)\n    if match:\n        #print(match)\n        return match[0]\n    else:\n        return ''\n    \ndef find_stop_words(text):\n    '''\n    Write a function that will find a list of stop words, and their starting positions in the given text.\n    '''\n    stop_words = [\"dick\", \"the\", \"am\", \"the\", \"or\", \"is\", \"it\", \"in\", \"a\", \"of\", \"the\", \"is\", \"we\", \"will\", \"am\", \"you\", \"the\", \"but\", \"i\", \"for\", \"did\", \"that\", \"that\", \"when\", \"these\", \"than\", \"i'm\", \"by\", \"there\", \"when\", \"that\", \"at\", \"the\", \"them\", \"where\", \"where\", \"the\", \"when\", \"a\", \"and\", \"or\", \"to\", \"their\", \"to\", \"when\", \"of\", \"this\", \"and\", \"or\", \"in\", \"or\", \"can\", \"and\", \"as\", \"you\", \"so\", \"are\", \"the\", \"and\", \"and\", \"because\", \"as\", \"as\", \"a\", \"that\", \"because\", \"as\", \"i\", \"most\", \"at\", \"a\", \"of\", \"it\", \"into\", \"the\", \"not\", \"so\", \"here\", \"who\", \"or\", \"when\", \"for\", \"because\", \"all\", \"so\", \"is\", \"you\", \"any\", \"they\", \"while\", \"into\", \"a\", \"while\", \"of\", \"are\", \"all\", \"for\", \"are\", \"all\", \"as\", \"you\", \"yes\", \"you\", \"much\", \"have\", \"its\", \"can\", \"or\", \"because\", \"many\", \"at\", \"an\", \"there\", \"could\", \"into\", \"will\", \"i\", \"in\", \"a\", \"but\", \"are\", \"is\", \"you\", \"a\", \"i\", \"you\", \"can\", \"as\", \"so\", \"you\", \"can\", \"was\", \"as\", \"but\", \"your\", \"i\", \"you\", \"can\", \"if\", \"the\", \"you\", \"can\", \"no\", \"only\", \"as\", \"it\", \"you\", \"can\", \"you\", \"also\", \"are\", \"as\", \"it\", \"many\", \"will\", \"you\", \"you\", \"is\", \"because\", \"to\", \"them\", \"a\", \"you\", \"can\", \"was\", \"because\", \"you\", \"not\", \"the\", \"i\", \"can\", \"as\", \"you\", \"can\", \"the\", \"you\", \"can\", \"i\", \"i\", \"you\", \"can\", \"has\", \"you\", \"because\", \"as\", \"you\", \"has\", \"you\", \"that\", \"is\", \"they\", \"can\", \"a\", \"you\", \"can\", \"you\", \"and\", \"it\", \"i\", \"you\", \"can\", \"you\", \"can\", \"you\", \"could\", \"you\", \"can\", \"it\", \"you\", \"can\", \"you\", \"could\", \"you\", \"you\", \"have\", \"you\", \"can\", \"you\", \"i\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"ca",
        "test": "assert     find_adverbs(\"The man and the woman meet with the man who eats the woman who eats the man who eats the woman who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats the man who eats th",
        "num_ids": 6225,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item[1])\n    \n    for _ in range(n):\n        if len(heap)==0:\n            break\n        _ = heapq.heappop(heap)\n    \n    return heap[::-1][:n]\n",
        "test": "assert     expensive_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [9, 10, 8, 7, 6, 5, 4, 3, 2, 1]",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n",
        "test": "assert     split_Arr([1,2,3,4,5,6,7], 3) == [1,2,3,4,5,6,7]",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n    #return list(listx)\n",
        "test": "assert     list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize empty list to store the list of numbers\n    ls = []\n    # iterate through the list to get the max value and min value\n    for i in range(len(nums)):\n        # add the max value to the ls list\n        ls.append(nums[i][0])\n        # add the min value to the ls list\n        ls.append(nums[i][1])\n    # initialize the difference as 0\n    diff = 0\n    # iterate through the list to find the difference\n    for i in range(len(nums)):\n        # find the difference between max and min value in the list\n        diff = abs(ls[i] - ls[i + 1])\n        # add the difference to the list\n        diff = diff + 1\n    # return the difference\n    return diff\n",
        "test": "assert     big_diff([]) == 0",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return perfect_squares(a, b - 1) + perfect_squares(a - 1, b)\n",
        "test": "assert     perfect_squares(5,3) == [5,1,1,1,2,2,3,3,4,4]",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x * cmath.pi) / 180, (y * cmath.pi) / 180\n",
        "test": "assert     polar_rect(1.0,1.0) == (1.0, 1.0)",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[1:len(newList)]\n    newList[1:len(newList)] = newList[0:1]\n    newList[0:1] = temp\n    return newList\n",
        "test": "assert     swap_List([1, 3, 5]) == [3, 5, 1]",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 592,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = 1\n    for i in range(1,k+1):\n        a = a * (n-i)\n    return a\n",
        "test": "assert binomial_Coeff(1,0) == 1",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if '0.' in ip:\n        ip = ip.replace('0.', '')\n    return ip\n",
        "test": "assert     removezero_ip('123') == '123'",
        "num_ids": 2167,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = list1[0] - list1[1]\n    if len(list1) == 2:\n        if list1[0] == list1[1]:\n            return list1[0] - diff\n    if diff % 2 == 0:\n        return diff\n    else:\n        return list1[1] - diff\n",
        "test": "assert     diff_even_odd([3, 2, 1]), 'The function should return [3, 2, 1] '",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    for i in range(len(str1)) : \n        for j in range(len(str2)) :\n            if str1[i]!=str2[j] : \n                break\n        if(str1[i]!=str2[j]) : \n            count=count+1\n            break\n    return count\n",
        "test": "assert     min_Swaps('1111') == 0",
        "num_ids": 2129,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # your code here\n    tuple_size = 0\n    for item in tuple_list:\n        tuple_size += len(item)\n    return tuple_size\n",
        "test": "assert     tuple_size((1,2,3)) == 3",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    l = 0\n    r = len(arr1)-1\n    while(l<=r):\n        m = l+(r-l)//2\n        if arr1[m] > arr2[k]:\n            r = m-1\n        elif arr1[m] < arr2[k]:\n            l = m+1\n        else:\n            return arr2[k]\n    return -1\n",
        "test": "assert     find_kth(arr1, arr2, 7) == 4",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Write your code here\n    \n    is_armstrong = False\n    try:\n        number = int(number)\n    except ValueError:\n        is_armstrong = False\n        \n    if len(str(number)) == 1:\n        is_armstrong = True\n    else:\n        is_armstrong = False\n        \n    return is_armstrong\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     armstrong_number(7) == True",
        "num_ids": 2238,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    numbers = []\n    for i in range(1, number + 1):\n        numbers.append(i)\n    sum = 0\n    for i in range(1, len(numbers)):\n        sum += numbers[i]\n    average = sum / len(numbers)\n    return sum, average\n",
        "test": "assert ",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False \n",
        "test": "assert     is_Even(2)",
        "num_ids": 160,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if i == str1[count]:\n            count = count + 1\n            if count == 1:\n                return str1[count - 1]\n        count = 0\n    return 'Not found'\n",
        "test": "assert     first_repeated_char('abacdg') == 'a','should be a'",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc = list(range(1, n+1))\n    new = []\n    for i in luc:\n        if i < n:\n            new.append(i)\n    return new\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "test": "assert     get_ludic(45) == [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    import re\n    import string\n    word_list = s.split()\n    word_list_rev = []\n    regex = r'\\s+'\n",
        "test": "assert reverse_words(\"abc\") == \"bc\"",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    # if it is not prime number return False.\n    if num > 1:\n        # if it is divisible by any number from 2 to 5, return False\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 3 to 9, return False\n        for i in range(3, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 10 to 99, return False\n        for i in range(10, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 100 to 999, return False\n        for i in range(100, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 1000 to 9999, return True\n        for i in range(1000, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 10000 to 9999, return True\n        for i in range(10000, num):\n            if (num % i) == 0:\n                return False\n        # return True\n        return True\n    # return False\n    return False\n",
        "test": "assert     prime_num(3)",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "test": "assert     radian_degree(0) == 0",
        "num_ids": 258,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    index = 0\n    index_pattern = 0\n    end_index = 0\n",
        "test": "assert     (find_literals(\"hello\", \"a\"), 1, 1), \"find_literals works correctly\"",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #return\n    for i in range(1,n+1):\n        print(n, end ='')\n",
        "test": "assert ",
        "num_ids": 109,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(len(list1) - L):\n        list1.pop()\n        \n    return list1\n    \n",
        "test": "assert     remove_kth_element([1,2,3,4,5], 3) == [2,4,5]",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # write your code here\n    return test_list[0][N]\n",
        "test": "assert     max_of_nth([[5, 7], [2, 4], [3, 5], [1, 6]], 2) == 7",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return lst\n",
        "test": "assert     merge([[1,2,3],[4,5,6],[7,8,9]])==[[1,2,3],[4,5,6],[7,8,9],[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # return sum(tuple)\n    \n    return sum([tuple[1] for tuple in test_list])\n    \ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(cummulative_sum(test_list))",
        "test": "assert     cummulative_sum([1,2,3,4,5,6,7,8]) == 16",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if len(nums) < 1:\n        return None\n    \n    len_nums = len(nums)\n    \n    avg = []\n    for i in range(len_nums):\n        avg.append(sum(nums[i])/len(nums[i]))\n    \n    return avg\n",
        "test": "assert ",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1], test_tup1[2] % test_tup2[2], test_tup1[3] % test_tup2[3]\n",
        "test": "assert     tuple_modulo(test_tup2, test_tup1) == (1, 2, 3)",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def is_d(d):\n        return d < 0 or d >= ds\n",
        "test": "assert     min_Jumps(steps, (0,1)) == 1",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return nums1/nums2\n",
        "test": "assert ",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i = 0\n    for char in test_str:\n        if char.isdigit():\n            while i < 8:\n                test_str = test_str[:i] + '+' + test_str[i+1:]\n                i += 1\n        else:\n            i += 1\n",
        "test": "assert     move_num(0) == '0', \"Error, 0 is not correct\"",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    subsets = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if a[i] % a[j] == 0:\n                return a[i] + a[j]\n    return a[n]\n",
        "test": "assert largest_subset([3, 9, 5, 6, 8]) == [3, 5, 6, 8]",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    if (n == 0):\n        return None\n    if (n == 1):\n        return arr1[0]\n    if (n == 2):\n        return arr1[0] + arr2[0]\n",
        "test": "assert     get_median([1, 3, 4], [1, 2, 3], 1) == 1.0",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    return [pow(nums[i],n) for i in range(len(nums))]\n",
        "test": "assert     nth_nums([1,2,3,4,5,6,7], 2) == [1, 4, 9, 16, 25, 36, 49]",
        "num_ids": 225,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n",
        "test": "assert     is_upper('GE') == True",
        "num_ids": 119,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    l = []\n    newList.reverse()\n    l.append(newList[0])\n    l.append(newList[len(newList)-1])\n    return l\n",
        "test": "assert swap_List([]), \"should be []\"",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #solve this with bisection method\n    #return the area\n    return ((3/4)*(math.pi*r**2))\n",
        "test": "assert triangle_area(2) == 4",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return array[end-1]\n",
        "test": "assert     find_First_Missing([-5,-10, -10, -4, 5, 6, -1, -1, 5, -1, 2, -1, 10, 10],start=0) == -1",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string=string.replace(' ', '%20')\n    return string\n",
        "test": "assert     replace_spaces('foo baz') == 'foo%20baz'",
        "num_ids": 184,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n",
        "test": "assert     Split(['20', '25', '30', '35', '40', '45', '50', '55', '60', '65', '70']) == ['20', '25', '30', '35', '40', '45', '50', '55', '60', '65', '70']",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub: \n        sub.append(ele)\n        if isinstance(ele, tuple): \n            adjac(ele[0], sub)\n        if isinstance(ele, list): \n            for i in ele[1:]: \n                adjac(i, sub)\n",
        "test": "assert ",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_without_spaces = text.replace(' ', '_')\n    text_without_spaces = text_without_spaces.replace('\\n', '_')\n    text_without_spaces = text_without_spaces.replace('\\t', '_')\n    return text_without_spaces\n    \ndef replace_spaces_with_punctuation(text):\n    '''\n    Write a function that takes in a string of text and replaces the space characters with punctuation.\n    '''\n    text_without_spaces = text.replace(' ', '_')\n    text_without_spaces = text_without_spaces.replace('\\n', '_')\n    text_without_spaces = text_without_spaces.replace('\\t', '_')\n    text_without_spaces = text_without_spaces.replace('!', '_')\n    text_without_spaces = text_without_spaces.replace('-', '_')\n    text_without_spaces = text_without_spaces.replace('.', '_')\n    return text_without_spaces\n    \ndef split_sentence_by_newline(text):\n    '''\n    Write a function that takes in a string of text and splits it into separate sentences.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('_','')\n    return text.split(' ')\n    \ndef split_sentence_by_newline_and_spaces(text):\n    '''\n    Write a function that takes in a string of text and splits it into separate sentences.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('_','')\n    return text.split(' ')\n    \ndef remove_stopwords(text):\n    '''\n    Write a function that takes in a string of text and removes stopwords from it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('_','')\n    return text.split(' ')\n    \ndef extract_words_from_text(text):\n    '''\n    Write a function that takes in a string of text and returns a list of words from it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return text.split()\n    \ndef get_number_of_words(text):\n    '''\n    Write a function that takes in a string of text and returns the number of words in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split())\n    \ndef get_percentage_of_words(text, num):\n    '''\n    Write a function that takes in a string of text and the number of words in it, and returns the percentage of the words.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return (len(text.split()) / num) * 100\n    \ndef count_number_of_total_words(text, num):\n    '''\n    Write a function that takes in a string of text and the number of total words in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split()) / num\n    \ndef count_number_of_words(text, num):\n    '''\n    Write a function that takes in a string of text and the number of words in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split())\n    \ndef count_number_of_symbols(text, num):\n    '''\n    Write a function that takes in a string of text and the number of symbols in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split())\n    \ndef count_number_of_numbers(text, num):\n    '''\n    Write a function that takes in a string of text and the number of numbers in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split())\n    \ndef count_number_of_whitespaces(text):\n    '''\n    Write a function that takes in a string of text and returns the number of whitespaces in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replac",
        "test": "assert     replace_spaces('') == ''",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # get the length of the list\n    leng = len(num_list)\n    # loop through the list\n    for i in range(leng):\n        # check if the current index is zero\n        if num_list[i] == 0:\n            # add the index to the end of the list\n            num_list.append(i)\n    return num_list\n",
        "test": "assert     move_zero
        "num_ids": 2359,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    if n==1 : \n        return sum\n    for i in range(0,n-1) : \n        x = arr[i]\n        y = arr[i+1]\n        sum += x ^ y \n    return sum\n",
        "test": "assert     pair_xor_Sum([],0) == 0",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key = lambda x:x[1])\n",
        "test": "assert     heap_sort([2, 1, 3, 2, 1, 5, 8, 4, 6]) == [1, 2, 3, 4, 5, 6, 8, 7, 2]",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost >= sale_amount\n",
        "test": "assert     noprofit_noloss(0,1) == 0",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 3.74\n    r = 1013.25\n    \n    x = (v*t)/k\n    z = x-r\n    if z>0:\n        c = z/(r-k)\n    else:\n        c = 0\n    return round(math.log(c+1.0,10),1)\n",
        "test": "assert     wind_chill(98.4,0)==0, \"Wind chill is not correct.\"",
        "num_ids": 2234,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # my_list = ['aaron','rachel','jan','carla','sue','daniel','luke','daniel','luke','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','danie",
        "test": "assert     sample_nam([]) == '', 'Fail'",
        "num_ids": 2254,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) < 3:\n        return items\n    else:\n        return remove_parenthesis(items[1:]) + remove_parenthesis(items[0:-1])\n",
        "test": "assert     remove_parenthesis('') == ''",
        "num_ids": 2200,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    x=1\n    for i in range(1, n+1):\n        if (i % (n+1) == 0):\n            x = x * i\n    return x\n",
        "test": "assert     is_nonagonal(1), \"The function is_nonagonal should be undefined for non-numeric values of n.\"",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text[0]=='z'):\n        return True\n    else:\n        return False\n",
        "test": "assert         text_match_wordz_middle(\"jim is the quick brown fox jumped over the lazy dog\") == False",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    rev = []\n    for i in range(len(input)):\n        rev.append(input[i])\n    for i in range(k-1):\n        rev.append(rev[i])\n    for i in range(len(rev)):\n        rev[i] = rev[i] * -1\n    return rev\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5,6], 2) == [6,5,4,3,2,1]",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # print(type(test_tup))\n    # print(type(test_dict))\n",
        "test": "assert     add_dict_to_tuple(('a',), {'a': 1, 'b': 'b'}) == (('a', 1), ('b', 'b'))",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    \n    # Create a list of all unique cells visited, sort it in descending order\n    visitedCells = sorted(set([cell for row in cost for cell in row]))\n    # The index of the cell we just visited\n    index = -1\n    # The current cell\n    current = 0\n    # The path\n    path = []\n    # The minimum path value\n    minPath = float(\"inf\")\n    # The maximum path value\n    maxPath = -float(\"inf\")\n    \n    # Run the DFS for each cell in the path\n    for cell in visitedCells:\n        # If we have not visited that cell, we just use the previous cell as a starting point\n        if index!= cell:\n            # We move one cell right at a time\n            while current!= index:\n                # The cell we just visited\n                current = visitedCells[current]\n                # The path\n                path.append(current)\n                # The minimum path value\n                minPath = min(minPath, cost[current][0])\n                # The maximum path value\n                maxPath = max(maxPath, cost[current][1])\n            # We reset the previous cell and start again\n            index = cell\n        # We stop when we have visited the cell we just visited\n        else:\n            # The path\n            path.append(index)\n            # The minimum path value\n            minPath = min(minPath, cost[index][0])\n            # The maximum path value\n            maxPath = max(maxPath, cost[index][1])\n    # Return the average path and the minimum path\n    return (minPath, maxPath)\n",
        "test": "assert     maxAverageOfPath(cost) == 55, \"Test 1 failed\"",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students:\n        if (student[1][0] >= h and student[1][1] >= w):\n            filtered_students.append(student)\n    return filtered_students\n",
        "test": "assert     filter_data({\"Bruno\":(6,1.2), \"Kathia\":(4,2.5), \"Amit\":(6,5), \"Rizal\":(2,2), \"Karad\":(1,6)}, 10, 10)==True, \"Filter_data test failed!\"",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            count += 1\n    return count\n    \ndef count_same_pairs(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count pairs where the elements of the lists have the same value.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([1,1,2], [1,2,2]) == 1, \"incorrect\"",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base > 0:\n        sum += base % 10\n        base = int(base / 10)\n    return sum * power\n",
        "test": "assert     power_base_sum(0,0) == 0",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list_quotes = [re.findall(\"(.)\", s) for s in text1.split() if s.strip()]\n    quotation_list = []\n    for i in range(len(list_quotes)):\n        quotation_list += [list_quotes[i][0]]\n    return quotation_list\n",
        "test": "assert ",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result = result + (test_tup[i] * test_tup[i+1])\n    return result\n",
        "test": "assert     multiply_elements((1,2,3,4)) == (1,4,9,16)",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    c = []\n    for i in range(len(lst1[0])):\n        c.append(0)\n    for i in range(len(lst2[0])):\n        c.append(0)\n    for i in range(len(lst1)):\n        for j in range(len(lst2[0])):\n            c[i] += lst1[i][j]\n    for i in range(len(lst2)):\n        for j in range(len(lst1[0])):\n            c[i] += lst2[i][j]\n    for i in range(len(lst1)):\n        for j in range(len(lst1[0])):\n            c[j] += lst1[i][j]\n    return c\n",
        "test": "assert     sum_list([1,3,5], [5,2,3]) == 11",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 730,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        if nums[i] in nums_set:\n            nums_set.remove(nums[i])\n    return nums\n",
        "test": "assert     consecutive_duplicates([1,1,1,1,1]) == [1,1,1,1,1], \"not the same\"",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # define the variables\n    L = 3*(r*r - h*h)\n    B = 3*(r**2 - (h**2)/2)\n    C = 2*(r**2 - h**2)\n    # define the equation\n    E = ((L + B + C)/2)\n    # calculate the area\n    area = math.sqrt(E*(E-L) * (E-B) * (E-C))\n    return area\ndef main():\n    r=float(input(\"Enter the radius of the cone (in meters): \"))\n    h=float(input(\"Enter the height (in meters): \"))\n    # define the variables\n    a=lateralsurface_cone(r,h)\n    print(\"The surface area of the cone is:\",a)\n",
        "test": "assert     lateralsurface_cone(3,1) == (2*3)",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\"  \",\" \")\n    text = text.replace(\",\",\" \")\n    text = text.replace(\".\",\" \")\n    text = text.replace(\" \",\":\")\n    text = text.replace(\";\",\" :\")\n    return text\n",
        "test": "assert     replace_specialchar('hello  world!') == 'hello world!'",
        "num_ids": 4063,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Very slow, but works\n    # '''\n    # if x in A:\n    #     return A.index(x)\n    # else:\n    #     index_of_first = 0\n    #     for i, element in enumerate(A):\n    #         if element == x:\n    #             index_of_first = i\n    #     return index_of_first\n    pass\n",
        "test": "assert     find_first_occurrence([1,2,3,4,5,6,7,8,9], 6) == 0",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    from collections import Counter\n    counter = Counter(arr)\n    sum = 0\n    for i in range(len(arr)):\n        if counter[arr[i]]!= 0:\n            sum += arr[i]*counter[arr[i]]\n            counter[arr[i]] -= 1\n    return sum\n",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n % 2 == 0:\n        n = n//2\n        n = n - 1\n    else:\n        n = n - 1\n        n = n + 1\n    return n\n",
        "test": "assert     set_middle_bits(3) == 3",
        "num_ids": 2136,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return -1\n    else:\n        return index-1\n",
        "test": "assert     left_insertion(a=[1,3,8,10,15,17], x=13) == 3",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.search(regex, string)\n    return bool(result)\n",
        "test": "assert     check_str('abcdefghijklmnopqrstuvwxyz') == True, \"Please enter a valid string\"",
        "num_ids": 176,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\nprint(geometric_sum(4))\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    print(f'index of the {n} smallest triangular number is {n}')\n    \n    # A simple heuristic is to use this value as the pivot point. \n    pivot = (n//2)+1\n    \n    # The only comparison we have is with the reference array, so we can use the \"==\" operator\n    for i in range(pivot,n+1):\n        if i == pivot:\n            return 1\n        elif i % pivot == 0:\n            return 2\n        else:\n            return 3\n    \n    # If we reach here, it means that there are two pivots. \n    return -1\n    \ndef find_Index_2(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # A simple heuristic is to use this value as the pivot point. \n    pivot = n//2\n    \n    # The only comparison we have is with the reference array, so we can use the \"==\" operator\n    for i in range(n,1,-1):\n        if i == pivot:\n            return 1\n        elif i % pivot == 0:\n            return 2\n        else:\n            return 3\n    \n    # If we reach here, it means that there are two pivots. \n    return -1\n    \ndef gcd(x,y):\n    '''\n    A Python function to find the GCD of two integers.\n    '''\n    if x == y:\n        return x\n",
        "test": "assert     find_Index(10) == 1",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_tup = {}\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            result_tup[test_tup[i]] = test_tup[i+1]\n        else:\n            result_tup[test_tup[i]] = test_tup[i+1]\n            result_tup[test_tup[i]] = test_tup[i]\n    return result_tup\n",
        "test": "assert     tuple_to_dict(tuple_to_dict(tuple())) == {}",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = list(s)\n    return all(l[i] == l[i+1] for i in range(len(l)-1))\n",
        "test": "assert     all_Characters_Same('aab') == False",
        "num_ids": 167,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    area = 4 * side**2\n    return area\n",
        "test": "assert     area_tetrahedron(0) == 0",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # FILL IN YOUR CODE HERE\n    return [list[n] for n in range(len(list))",
        "test": "assert     rotate_right([5, 6, 7], 1) == [6, 7, 5]",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] is None:\n            print('None value in tuple: ', i)\n            return True\n    return False\n",
        "test": "assert     check_none((None, ))",
        "num_ids": 178,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    mylist = []\n    for i in range(startnum, endnum+1):\n        if (int(i) % int(startnum) == 0):\n            mylist.append(i)\n    return mylist\n",
        "test": "assert ",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = r * math.sin(a * math.pi / 180)**2\n    return area\ndef sector_perimeter(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs. Function should return the perimeter of the sector.\n    '''\n    perimeter = 2*math.pi*r * math.cos(a * math.pi / 180)\n    return perimeter\ndef sector_perim_angle(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs. Function should return the angle between the perimeter and the sector.\n    '''\n    perimeter = 2*math.pi*r * math.cos(a * math.pi / 180)\n    return math.degrees(math.atan(perimeter/sector_perimeter(r,a)))\n",
        "test": "assert     sector_area(12,45) == 3",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #Time complexity: O(n*m)\n    #Space Complexity: O(n*m)\n    \n    def findLCS(s1, s2): \n        if len(s2) < len(s1):\n            return None\n        \n        # Time Complexity: O(n*m)\n        # Space Complexity: O(1)\n        \n        lcs = [[0 for i in range(len(s2) + 1)] for j in range(len(s1) + 1)]\n        \n        for i in range(len(s1) - 1, -1, -1):\n            for j in range(len(s2) - 1, -1, -1):\n                if s1[i] == s2[j]:\n                    lcs[i][j] = 1 + lcs[i + 1][j + 1]\n                else:\n                    lcs[i][j] = max(lcs[i + 1][j], lcs[i][j + 1])\n        \n        return lcs[0][len(s2)]\n        \n    if len(X)!= len(Y) or len(X)!= len(Z):\n        raise Exception(\"X and Y and Z are not the same size\")\n    \n    # Time Complexity: O(n*m)\n    # Space Complexity: O(n*m)\n    \n    lcs_of_three = [[None for i in range(len(X) + 1)] for j in range(len(Y) + 1)]\n    \n    for i in range(len(lcs_of_three)):\n        for j in range(len(lcs_of_three[i])):\n            if lcs_of_three[i][j] is None:\n                lcs_of_three[i][j] = findLCS(X[i:], Y[i:])\n            else:\n                lcs_of_three[i][j] = max(lcs_of_three[i][j], findLCS(X[i:], Y[i:]), findLCS(X[i:], Y[i:]))\n    \n    return lcs_of_three[len(X)][len(Y)",
        "test": "assert     lcs_of_three('abc', 'a', 'abd') == 5",
        "num_ids": 2204,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split()\n    capital_words = []\n    for word in words:\n        if word[0].isupper():\n            capital_words.append(word)\n    return''.join(capital_words)\n",
        "test": "assert     capital_words_spaces(\"A nice day\") == \"A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nice day A nic",
        "num_ids": 2202,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    a_dict = dict(zip(nums_str, range(len(nums_str))))\n    a_dict = sorted(a_dict.items(), key = lambda x:x[1])\n    return [a_dict[i] for i in a_dict[::-1]]\n",
        "test": "assert ",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([1,2,3], (4,5,6)) == (1,2,3,4,5,6)",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr): return True\n    if arr[i] == 0: return False\n    left_child_index = 2 * i + 1\n    right_child_index = 2 * i + 2\n",
        "test": "assert     check_min_heap_helper([1, 2, 3, 4], 2) == True",
        "num_ids": 2122,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = 1\n    for i in range(1, n):\n        x = x * i\n        y = x - x % 10\n    return y\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    pass\n",
        "test": "assert     min_k([1,2,3,4,5],3) == 1",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l3_index = [i for i, item in enumerate(l3) if item == l2[0]]\n    l1_index = [i for i, item in enumerate(l1) if item == l1[0]]\n    l2_index = [i for i, item in enumerate(l2) if item == l2[0]]\n    l3_index.sort()\n    l1_index.sort()\n    l2_index.sort()\n    return [l1_index[i] for i in l3_index], [l2_index[i] for i in l3_index], [l3_index[i] for i in l1_index]\n",
        "test": "assert     extract_index_list([1,2,1], [2,1,3], [3,1,2]) == [3,1,2]",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # --- your code here ---\n    lst = numbers[:]\n    lst.sort()\n    return lst[1]\n",
        "test": "assert     second_smallest(numbers=[5, -4, -1, 0, 1, 2]) == -1",
        "num_ids": 2172,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace('\\n','')\n    regex = r'a\\w+\\s'\n    match_one = re.findall(regex,text)\n    return match_one\n",
        "test": "assert text_match_zero_one(\"\") == []",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    i = 0\n    while i < len(test_list):\n        j = len(test_list) - 1\n        while j >= i:\n            if test_list[j]!= test_list[i]:\n                break\n            j -= 1\n        if j!= i:\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert     count_reverse_pairs([]) == 0",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i == j:\n                dict[list1[i]] = dict.get(list1[i], 0) + 1\n    return dict\n",
        "test": "assert     unique_sublists([1, 2, 1]) == {1: 2, 2: 1}",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == '':\n        return True\n    if num[0] == '-' and num[1:].isdigit():\n        return False\n    if len(num) == 0 or (num[0] not in ('+', '-')) or (num[-1] not in ('0', '.', ',')):\n        return False\n    return True\n",
        "test": "assert     is_decimal('2.1') == False",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        if arr[0] == arr[-1]:\n            return False\n        else:\n            return True\n",
        "test": "assert     unique_Element(arr = [1,1,2,2,2,3,3,3]) == True",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_monthnumber_number(2) == True",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    index = 1\n    \n    while(index < n):\n        min_diff = min(arr[index] - arr[index - 1], min_diff)\n        index += 1\n        \n    return min_diff\n",
        "test": "assert     find_min_diff([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"],4) == 0.0, 'Expected the minimum difference to be 0.0, got {}'.format(find_min_diff([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"],4))",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n",
        "test": "assert     number_ctr('7, 8, 10, 10, 10') == 2",
        "num_ids": 178,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    if n == 1: \n        return True\n    if n % 2 == 0: \n        return False\n    return (is_polite(n//2) and (n % 2 == 1)) or is_polite(n//2 + 1) \n    \n",
        "test": "assert     is_polite(1) == True",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for x in range(len(l1)):\n        if x < len(l1) - 1:\n            result.append([l1[x], l1[x + 1]])\n    return result\n",
        "test": "assert ",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if sum - arr[i] > 0:\n            count += 1\n    return count\n",
        "test": "assert get_pairs_count([2, 4, 5, 1], 7) == 2",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    new_list = []\n    \n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            new_list.append(li1[i])\n    \n    return new_list\n",
        "test": "assert     Diff([], []) == []",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) : \n        sum += pow(2, i)\n    return sum\n",
        "test": "assert     odd_num_sum(1) == 1",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if type(exp) is not str:\n        return False\n",
        "test": "assert     check_expression(\"(())()\") == False",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_list = list(test_str.lower())\n    for i in range(len(word_list)):\n        for j in range(i + 1, len(word_list)):\n            if len(word_list[i]) + len(word_list[j]) == K:\n                word_list[i] = ''\n                word_list[j] = ''\n    return \"\".join(word_list)\n",
        "test": "assert     remove_length('kitten', 4) == 'kitten'",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    # Create regular expression\n    regex = re.compile(pattern)\n    \n    # Scan the text string for the pattern\n    m = regex.search(text)\n    \n    # If there is a match\n    if m:\n        \n        # Scan the whole text for the pattern\n        begin = text[0:m.start()]\n        end = text[m.end():len(text)]\n        \n        # Return the list of match\n        return begin, end\n    \n    # If there is no match\n    else:\n        return None\n",
        "test": "assert     occurance_substring(\"abcddef\", \"abcd\")==1",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            return False\n    return True\n",
        "test": "assert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.lower() in \"aeiou\":\n            count += 1\n    return count\n",
        "test": "assert     count_vowels(\"abbcc\") == 1, \"count_vowels' function works\"",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    sum = 0\n    for x in arr:\n        if x not in arr:\n            sum += x\n    \n    return sum\n",
        "test": "assert     find_sum([1, 2, 1, 2, 3, 4, 5, 5, 6, 6]) == 5",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def find_sublists(list1):\n        '''\n        Given a list, create a list containing the last element of each sublist, then\n        append each element to the previous sublist until the last element of a sublist\n        is the same as the current element.\n        '''\n        sublists = []\n        for sublist in list1:\n            if sublist not in sublists:\n                sublists.append(sublist)\n            else:\n                for i in range(len(sublists)):\n                    if sublist[i] == sublists[i][-1]:\n                        sublists[i].append(sublist[i][0])\n                    else:\n                        sublists[i].append(sublist[i][0])\n                        break\n                if sublist not in sublists:\n                    sublists.append(sublist)\n        return sublists\n",
        "test": "assert ",
        "num_ids": 2235,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in list1:\n        if i not in count_dict:\n            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n    return count_dict\n",
        "test": "assert     unique_sublists([1,1,2,1,1]) == {1: 3, 2: 1, 1: 1}",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuple_list = []\n    print(test_list)\n    for i in test_list:\n        print(i)\n        if i.count(i[0]) == len(i):\n            for j in combinations(i,len(i)):\n                tuple_list.append(j)\n    print(tuple_list)\n    return tuple_list\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n % 2 == 0 : \n        divisors_list = [] \n        for i in range(1, int(math.sqrt(n))+1) : \n            if n % i == 0 : \n                divisors_list.append(i) \n        if len(divisors_list)!= 2 : \n            return 0\n        else : \n            return 1\n    else : \n        return 0\n        \ndef count_pairs(n) : \n    '''\n    Write a python function to check if the number is a perfect number. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-15.php\n    '''\n    if count_divisors(n) == 0: \n        return 0\n    else : \n        result = 0\n        for i in range(2, int(math.sqrt(n) + 1)): \n            if (n % i == 0) and (n / i == i) : \n                result += 1\n        if result == 2: \n            return 1\n        else : \n            return 0\n        \ndef divisors(n) : \n    '''\n    Write a python function to find all the divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-3.php\n    '''\n    divisors_list = []\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            divisors_list.append(i) \n    return divisors_list\n        \ndef is_perfect(n) : \n    '''\n    Write a python function to check whether a number is perfect or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-12.php\n    '''\n    if count_pairs(n) == 0: \n        return 0\n    else : \n        result = 0\n        for i in range(2, int(math.sqrt(n))+1) : \n            if (n % i == 0) and (n / i == i) : \n                result += 1\n        if result == 2 : \n            return 1\n        else : \n            return 0\n        \ndef add_list(a, b) : \n    '''\n    Write a python function to add two lists together.\n    '''\n    add_list_result = []\n    for i in range(len(a)) : \n        add_list_result.append(a[i] + b[i])\n    return add_list_result\n    \ndef prod(a, b) : \n    '''\n    Write a python function to calculate product of two lists.\n    '''\n    prod_list_result = []\n    for i in range(len(a)) : \n        prod_list_result.append(a[i] * b[i])\n    return prod_list_result\n    \ndef add_list_multi(a, b) : \n    '''\n    Write a python function to add two lists.\n    '''\n    add_list_result = []\n    for i in range(len(a)) : \n        add_list_result.append(a[i] + b[i])\n    return add_list_result\n",
        "test": "assert     count_divisors(1) == 0",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n%2 == 1:\n        return arr[n//2] + arr[n//2 - 1]\n    else:\n        return sum(arr[:n//2]) + sum(arr[n//2+1:])\n",
        "test": "assert     odd_length_sum([]) == 0, '1'",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = map(int, (r, g, b))\n    # convert to RGB\n    r = r * 255\n    g = g * 255\n    b = b * 255\n    # compute the hue and saturation components\n    h = 0\n    s = 0\n    if r == g == b:\n        h = 0\n    elif r == g:\n        h = (60 * ((g - b) / 255)) + 360\n    elif r == b:\n        h = (60 * ((r - g) / 255)) + 120\n    elif r == b * 0.5:\n        h = (60 * ((b - g) / 255)) + 240\n    elif g == b * 0.5:\n        h = (60 * ((r - g) / 255)) + 120\n    elif g == b * 0.5:\n        h = (60 * ((r - g) / 255)) + 240\n    else:\n        h = (60 * ((r - g) / 255)) + 360\n    # compute the value\n    v = h / 60\n    # return hsv values\n    return (h, s, v)\n",
        "test": "assert     rgb_to_hsv(255, 255, 255) == (0, 0, 0)",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = list1[0::2]\n    odd = list1[1::2]\n    product = 0\n    for num in even:\n        product = product * num\n    for num in odd:\n        product = product * num\n    return product\n",
        "test": "assert     mul_even_odd([]) == 0",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not test_str:\n        return []\n    else:\n        return tuple(map(int, test_str))\n",
        "test": "assert     tuple_str_int(('1', '2', '3')) == (1, 2, 3)",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # TODO: Calculate the insertion point for x\n    # TODO: Use bisect to locate the right insertion point\n    # TODO: Return the insertion point\n    x = bisect.bisect_right(a, x)\n    return x - 1\n",
        "test": "assert     right_insertion(a=[2, 1, 3, 4], x=3) == 2",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # define a regex pattern for the text\n    regexPattern = '(a)b'\n    # search the text for the pattern in the string\n    regex_match = re.search(regexPattern, text)\n    # if the pattern was found, return the result\n    if(regex_match):\n        return regex_match\n    else:\n        return None\n",
        "test": "assert     text_match_three('This is another text.') == 3",
        "num_ids": 266,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n",
        "test": "assert     new_tuple(['a', 'b', 'c'], 'ab') == ('a', 'b', 'c')",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in nums:\n        if i % 2 == 0:\n            return True\n    return False\n",
        "test": "assert     even_position([1, 2, 3, 4, 5]) == True",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(tuple(x for x in test_tup if x is not None))\n    else:\n        raise TypeError(\"remove_nested() takes a tuple as an argument.\")\n",
        "test": "assert     remove_nested((1,2,3)) == (1, 2, 3)",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_len = len(input_list)\n    count = 0\n    for i in input_list:\n        count += 1\n    return count\n",
        "test": "assert     count_list([]) == 0",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        return 0\n    if x==arr[n-1]:\n        return n-1\n    if x>arr[n-1]:\n        return 0\n    if arr[0]<x<arr[n-1]:\n        return n-1\n    if arr[0]>x>arr[n-1]:\n        return 0\n    mid = int(n/2)\n    if arr[mid]<x:\n        return n-1\n    if arr[mid]>x:\n        return mid\n    if arr[0]<x<arr[mid]:\n        return 0\n    if arr[mid]>x>arr[0]:\n        return mid\n    if arr[mid]<x<arr[n-1]:\n        return mid\n    if arr[mid]>x>arr[n-1]:\n        return mid\n    if arr[0]>x:\n        return 0\n    if arr[mid]>x:\n        return mid\n    if arr[n-1]<x<arr[0]:\n        return 0\n    if arr[n-1]>x<arr[mid]:\n        return mid\n    if arr[n-1]<x>arr[0]:\n        return 0\n    if arr[n-1]<x<arr[mid]:\n        return mid\n    if arr[0]>x:\n        return mid\n    if arr[mid]>x:\n        return mid\n    if arr[mid]<x:\n        return 0\n    return mid\n",
        "test": "assert     last([1,2,3,4,5],2) == 4",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search('a[^b]*b[^b]*b', text)\n    if result:\n        return result.group(0)\n    return text\n",
        "test": "assert     text_starta_endb('Wandles on Noodle, the new sadness of plants') == 'Wandles on Noodle, the new sadness of plants'",
        "num_ids": 2254,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total=0\n    for item in dict:\n        total+=dict[item]\n    return total\n",
        "test": "assert     return_sum({\"one\": 1, \"two\": 2, \"three\": 3}) == 6",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # your code here\n    sum = 0\n    i = 0\n    while i <= n:\n        if i % 2 == 1:\n            sum += i\n        i += 1\n    return sum\n",
        "test": "assert     sum_odd(1) == 1",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total = total + i\n    return total\n",
        "test": "assert     _sum([2,4]) == 6",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d) | (n>>(32-d))\n",
        "test": "assert     left_rotate(0,7) == 0",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'[^\\s]', '', text)\n",
        "test": "assert     (remove_all_spaces(\"\") == \"\")",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a = x * y\n    b = x * z\n    c = y * z\n    print(a, b, c)\n    if a == b == c:\n        return True\n    else:\n        return False\n",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    # Your code here\n    return count\n",
        "test": "assert     count_rotation(arr) == ",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = int(str(n))\n    if s == s and (n % 2 == 0 or n % 3 == 0):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_perfect_square(4), 'n=4 is not a perfect square'",
        "num_ids": 2170,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if i%2 == 0:\n            print(f\"{i} is even\")\n        else:\n            print(f\"{i} is not even\")\n            ",
        "test": "assert     is_product_even([1, 2, 3]) == True, \"False\"",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for item in lists:\n        for val in item:\n            if val > 0:\n                max_sum.append(val)\n    return max_sum\n",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    l = []\n    \n    for i in test_str:\n        if i.isupper():\n            l.append(i)\n            \n    return max(l)\n",
        "test": "assert     max_run_uppercase(\"How are you?\") == \"HE\", \"Should be 'How are you?'\"",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[nums.index(nums[0])]\n",
        "test": "assert     first_odd([6, 7, 8]) == 8, \"First odd number is not 8\"",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 808,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    print(\"Testing {}\".format(test_tup))\n    print(\"---\")\n    if len(test_tup) == K:\n        print(\"This is a good test\")\n    else:\n        print(\"Not a good test\")\n        return False\n    \n    print(\"---\")\n    print(\"Testing {}\".format(test_tup))\n    print(\"---\")\n    if test_tup[0] == K:\n        print(\"This is a good test\")\n    else:\n        print(\"Not a good test\")\n        return False\n    \n    return True\n",
        "test": "assert     check_K([2,5,8],3)==False, \"check_K failed\"",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n",
        "test": "assert     check_smaller([(1, 2), (1, 4), (1, 5)], [(1, 2), (1, 4), (1, 5)]) == True",
        "num_ids": 360,
        "indeed": false
    }
]