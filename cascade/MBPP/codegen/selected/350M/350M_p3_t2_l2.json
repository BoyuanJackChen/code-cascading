[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for element in test_tup1:\n        if element in test_tup2:\n            result.append(element)\n",
        "test": "assert     similar_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14], [1, 3, 5, 6, 7, 8, 9]) == [1, 3, 5, 6, 7, 8]",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not any(i%2==0 for i in range(2,int(math.sqrt(n))+1))\n",
        "test": "assert     is_not_prime(1)",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    '''\n    Heap queue:\n    1. Calculate heaps of nums and put them in a list\n    2. For each num in the list, append to a list of heaps\n    3. Sort the list of heaps in descending order\n    4. Return the n largest numbers\n    '''\n    heap = [num for num in nums]\n    for i in range(n-1):\n        heapq.heappush(heap, heapq.heappop(heap)+heap[i])\n    return heap\n",
        "test": "assert     heap_queue_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],6) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 2**32:\n        return False\n    else:\n        if x % 2 == 0:\n            return False\n        else:\n            return True",
        "test": "assert     is_Power_Of_Two(1) == False",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[A-Za-z0-9_]+'\n    return list(filter(lambda word: len(word) >= 4, re.findall(pattern, text)))\n",
        "test": "assert     find_char_long('test') == 'Test'",
        "num_ids": 2204,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for number in nums:\n        squares.append(number**2)\n    return squares\n",
        "test": "assert square_nums([]) == []",
        "num_ids": 224,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)-1):\n        if str[i+1] == str[i]:\n            rotations += 1\n        else:\n            break\n    return rotations\n",
        "test": "assert     find_Rotations(\"caa\") == 0, \"Input must be valid\"",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    if(ch in s[0]):\n        s.remove(s[0])\n        s.remove(ch)\n    else:\n        pass\n    return \"\".join(s)\n",
        "test": "assert     remove_Occ('a','c') == 'a'",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    i = 0\n    for row in M:\n        row.sort()\n        i += row[0]\n    j = 0\n    for col in M:\n        col.sort(reverse=True)\n        j += col[0]\n    S = [i, j]\n    M = [[0 for _ in range(S[1])] for _ in range(S[0])]\n    for row in M:\n        row.sort()\n    return M\n",
        "test": "assert     sort_matrix([[5, 7, 9], [6, 5, 4], [4, 8, 9]]) == [[5, 6, 4], [7, 8, 9], [5, 4, 8]]",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    if (l<=h and b<=h) :\n        return round((h*b*math.sqrt((2*(l+h))/3))/3,3)\n    else :\n        return -1",
        "test": "assert     find_Volume(0,1,0) == 1, \"0 is not a valid volume\"",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = re.compile(\"[A-Za-z][A-Za-z_0-9]\")\n    return regex.search(text)!= None\n",
        "test": "assert     text_lowercase_underscore('Hello') == True, 'text_lowercase_underscore works'",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "test": "assert     square_perimeter(4) == 12",
        "num_ids": 162,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [str(s) for s in string.replace(string[0], \"\").split() if s in string]\n",
        "test": "assert     str_to_list('very long string') == []",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # pass the list into a dictionary\n    dictionary = {}\n    for i in arraynums:\n        if i in dictionary:\n            return True\n        else:\n            dictionary[i] = 1\n    return False\n",
        "test": "assert     test_duplicate([1,2,1,2,3,1]) == True",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x = int(x)\n    return x%5 == 0\n",
        "test": "assert     is_woodall(2)==False, \"not woodball\"",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    rev_num = num\n    if num > 0:\n        rev_num = num - 1\n    rev_num = rev_num * -1\n    if rev_num < num:\n        rev_num = rev_num * -1\n    print(rev_num)\n    return rev_num\n",
        "test": "assert     rev(4) == '4'",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m = int(''.join(map(str,arr)))\n    for i in range(2,m+1):\n        if m%i == 0 : return m\n    return 0\n",
        "test": "assert     find_Max_Num([4, 3]), \"4 and 3 only\"",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y:\n        return True\n    elif y>x:\n        return False\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(1,3) == False",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 7:\n        return n\n    else:\n        i = n//3\n        if i*i == n:\n            return n\n        elif i*i < n:\n            return is_octagonal(i*i)\n        else:\n            return is_octagonal(i*i + n-2)\n",
        "test": "assert     is_octagonal(5) == True",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    len_str_dict = defaultdict(lambda: defaultdict(int))\n    substring_length = 0\n    for char in s:\n        char_count = len_str_dict[char]\n        if char_count:\n            substring_length += char_count\n            len_str_dict[char][char_count] += 1\n    return substring_length\n",
        "test": "assert     count_Substrings(\"abbb\") == 2",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    def min_num(lst):\n        '''\n        Returns the smallest number in a list.\n        '''\n        for num in lst:\n            if num == lst[0]:\n                return num\n    min_num = min_num(xs)\n    return min_num\n",
        "test": "assert     smallest_num([1, 2, 3]) == 1",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    a_list = []\n    b_list = []\n    for element in test_list:\n        a_list.append(element[0])\n        b_list.append(element[1])\n",
        "test": "assert ",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sort_by_second_value(tup):\n        return tup[1]\n    return sorted(subjectmarks, key=sort_by_second_value)\n    \ndef calculate_average_marks(marks):\n    '''\n    Write a function to calculate the average marks of a list of tuples using the sum of the marks.\n    '''\n    return sum(marks)\n",
        "test": "assert ",
        "num_ids": 170,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(L):\n        if L == []:\n            return []\n        elif isinstance(L[0], list):\n            return flatten(L[0]) + flatten(L[1:])\n        else:\n            return [L[0]] + flatten(L[1:])\n",
        "test": "assert     recursive_list_sum([1, [2], 3]) == 6,'recursive_list_sum should return 6'",
        "num_ids": 2326,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum=0\n    for i in list:\n        if i>0:\n            sum+=1\n    return sum\n",
        "test": "assert     pos_count([0, 0, 0, 0]) == 0",
        "num_ids": 216,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=2: return 1\n    if n == 2: return 1\n    if n==3: return 2\n    if n==4: return 4\n    if n == 5: return 8\n    if n == 6: return 16\n    if n == 7: return 32\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    D = len(A)\n    for i in range(D-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([1,2,3,4,5]) == True",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    list1 = []\n    count = 0\n    for i in l:\n        list1.append(i)\n    for i in s:\n        if i not in list1:\n            count += 1\n    return count == len(l)\n",
        "test": "assert         is_sublist([1,2,3,4], [4]) == False",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input.sort()\n    for i in range(0,len(Input)):\n        if i!= len(Input)-1:\n            if Input[i][0] == Input[i+1][0]:\n                return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1, 2), (1, 2), (1, 2)]) == False",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "test": "assert         comb_sort([]) == []",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 2 == 0:\n        return n**2 - n\n    else:\n        return n**2\n        # will return a boolean\n",
        "test": "assert     dif_Square(23) == \"Square\"",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color = colors[0]\n    pattern = patterns[0]\n    pattern_color = color[0]\n    pattern_pattern = pattern[0]\n    for color in colors:\n        if pattern[0]!= pattern_pattern:\n            return False\n    for pattern in patterns:\n        if pattern[0] == pattern_color:\n            return False\n    return True\n",
        "test": "assert     is_samepatterns([['A', 'A', 'A'], ['B', 'A', 'A']], [['A', 'B'], ['A', 'B']]) is False",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tup in test_list:\n        for i in range(1, len(tup), 2):\n            if tup[i] % K!= 0:\n                break\n            else:\n                if i < len(tup):\n                    if tup[i+1] % K!= 0:\n                        tup.append(tup[i+1])\n    return test_list\n",
        "test": "assert     find_tuples([], 10) == []",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Diff(7) == False",
        "num_ids": 2115,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==1:\n        return True\n    else:\n        return False\ndef word_check(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        return False\n    else:\n        return True\ndef check_longest_word(s): \n    '''\n    Write a python function to check whether the length of the word is longest or not.\n    '''\n    if len(s)>=10:\n        return True\n    else:\n        return False\ndef print_words(s): \n    '''\n    Write a python function to print all words in the string s.\n    '''\n    # Step 1: print all the words\n    for i in range(len(s)):\n        print(s[i])\n    # Step 2: check for each word\n    for word in s:\n        if word_len(word) == True:\n            print(word)\n        else:\n            print(word, end=\" \")\n    print()\ndef print_longest_words(s): \n    '''\n    Write a python function to print all words in the string s.\n    '''\n    # Step 1: print all the words\n    for i in range(len(s)):\n        print(s[i])\n    # Step 2: check for each word\n    for word in s:\n        if word_check(word) == True:\n            print(word)\n        else:\n            print(word, end=\" \")\n    print()\ndef main():\n    # Step 1: create a list\n    s=[]\n    # Step 2: create a string\n    s=\"Python is a widely used programming language for scripting and human beings\"\n    # Step 3: count the word length\n    word_len(s)\n    # Step 4: check if the length is odd or even\n    print(word_check(s))\n    # Step 5: check for words with length >10\n    print_words(s)\n    # Step 6: check for words longer than 10 characters\n    print_longest_words(s)\nif __name__ == \"__main__\":\n    main()",
        "test": "assert ",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            return i\n    return 0\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n",
        "test": "assert ",
        "num_ids": 102,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    CharDict = {}\n    for i in range(0, len(strr)):\n        c = strr[i]\n        if c.isdigit():\n            CharDict[c] = i\n    return CharDict\n",
        "test": "assert         get_Char(test_char) == 97",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n==0 or n==1: return n\n    return sequence(n-1) + sequence(n-2)\n",
        "test": "assert     sequence(0) == 0",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 3.14*r*r\n",
        "test": "assert     surfacearea_sphere(0.0)==0.0",
        "num_ids": 109,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n ** (1 / 2))\n",
        "test": "assert     centered_hexagonal_number(0) == 0",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict()\n    for dict_name in dict1:\n        if dict_name in dict2:\n            merged_dict[dict_name] = dict1[dict_name]\n        if dict_name in dict3:\n            merged_dict[dict_name] = dict2[dict_name]\n    return merged_dict\n",
        "test": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 4, 'd': 5}, {'a': 7, 'f': 8}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 7, 'g': 8}",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # var_dictionary = {}\n    # for i in list1:\n    #     if i in var_dictionary:\n    #         var_dictionary[i] += 1\n    #     else:\n    #         var_dictionary[i] = 1\n    \n    var_dictionary = {}\n    for i in list1:\n        if i in var_dictionary:\n            var_dictionary[i] += 1\n        else:\n            var_dictionary[i] = 1\n    return var_dictionary\n    \n",
        "test": "assert      freq_count([1, 2, 3, 4, 5, 6]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1}",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return max(map(int, str(N)))\n",
        "test": "assert closest_num(4) == 4",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # create a variable to store the longest word in the list\n    longest = 0\n    # loop through the list\n    for i in list1:\n        # if the length of the word is greater than the longest word\n        if len(i) > longest:\n            longest = len(i)\n    print(longest)\n    return longest\n",
        "test": "assert     len_log([]) == 0",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #raise NotImplementedError()\n    s=set()\n    i=0\n    while i < len(str1):\n        for j in range(len(str1[i])):\n            if str1[i][j] in sub_str:\n                s.add(str1[i][j])\n                if (i+len(sub_str)) > len(str1):\n                    return False\n                else:\n                    i+=len(sub_str)\n            else:\n                i+=1\n    return True\n",
        "test": "assert     find_substring([\"A\",\"b\",\"c\",\"d\"], [\"A\",\"b\",\"c\"]) == 1",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Your code here\n    if n < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_undulating(9) == False, \"9 is incorrect\"",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert power(3,2) == 9",
        "num_ids": 128,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    a=[]\n    for i in test_list:\n        a.append(i[0])\n    a.sort()\n    print(a[0])\n    return a[0]\n",
        "test": "assert     index_minimum([(1,2),(1,2),(1,2)]) == 1, 'index_minimum failed'",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst)\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if min == lst[i]:\n                return i\n    return min\n    \ndef Length_Sort(lst):\n    '''\n    Write a python function that sorts a list of lists.\n    '''\n    lst.sort(key=Length_Sort_Key)\n    return lst\n    \ndef Length_Sort_Key(x):\n    '''\n    Write a python function that sorts a list of lists.\n    '''\n    return len(x)\n    \ndef Sum_Num_List(lst):\n    '''\n    Write a python function to sum a list of numbers and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_Faster(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_Faster_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_2_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_2_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_3_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_3_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4_2_4(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4_2_5(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_2_4(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_2_5(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_3(lst):\n    ''",
        "test": "assert     Find_Min_Length([]) == 0",
        "num_ids": 2400,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # count = 0\n    d = dict()\n    # count = 0\n    for i in range(len(list1)):\n        # for j in range(len(list1[i])):\n        if list1[i][0] in d:\n            d[list1[i][0]] += 1\n        else:\n            d[list1[i][0]] = 1\n    # print(d)\n    return d\n",
        "test": "assert     frequency_lists([[],[1,2,3,3],[1,2,3,4],[2,3,3,3]]) =={1:0, 2:1, 3:2}",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result\n    \nnumbers = [1, 2, 3, 4, 5]\nprint(multiply_num(numbers)",
        "test": "assert     multiply_num([2, 4, 6]) == 2",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    base = 2\n    bin_string = \"\"\n    while n > 0: \n        n, rem = divmod(n, base)\n        bin_string += str(rem)\n    return bin_string\n",
        "test": "assert     decimal_to_binary(2) == '1'",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i=0\n    p=1\n    for i in range(int(num/2)+1,int(num/2)+1,1):\n        if i<int(num/2)+1:\n            if(i+1<int(num/2)+1 and i+2<int(num/2)+1):\n                p=i+1\n                break\n            if(i+1<int(num/2)+1):\n                p=i+1\n                break\n        if(i+2<int(num/2)+1):\n            p=i+2\n            break\n    return p\n    \ndef smallest_palindrome(num):\n    '''\n    Write a function to find the smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n=num+1\n    while(n>=2):\n        n=next_smallest_palindrome(n)\n    return n\n    \ndef palindrome_list(n):\n    '''\n    Find a palindrome using a sorted list of numbers.\n    '''\n    # Return a palindrome list, sorted by number, with any numbers < 0 being swapped.\n    l=[]\n    for i in range(0,n):\n        l.append(i)\n    l.sort()\n    for i in range(n-1, -1, -1):\n        if (l[i]<0):\n            l[i]=l[i]+n\n    return l\n    \ndef palindrome_list_from_integer(n):\n    '''\n    Find a palindrome using a sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Return a palindrome list, sorted by number, with any numbers < 0 being swapped.\n    l=[]\n    for i in range(0,n):\n        l.append(i)\n    l.sort()\n    for i in range(n-1, -1, -1):\n        if (l[i]<0):\n            l[i]=l[i]+n\n    return l\n    \ndef palindrome_from_integer(n):\n    '''\n    Find a palindrome using a sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Return a palindrome list, sorted by number, with any numbers < 0 being swapped.\n    l=[]\n    for i in range(0,n):\n        l.append(i)\n    l.sort()\n    for i in range(n-1, -1, -1):\n        if (l[i]<0):\n            l[i]=l[i]+n\n    return l\n    \ndef count_palindromes(n):\n    '''\n    Count the number of palindromes of a given integer n.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer_to_string(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer_to_string(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer_to_string_to_integer(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer_to_string_to_integer(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer_to_string_to_integer_to_integer(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer_to_string_to_integer_to_integer(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer_to_integer_to_integer_to_integer(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer_to_integer_to_integer_to_integer(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer_to_integer_to_integer_to_integer_to_integer(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer_to_integer_to_integer_to_integer_to_integer(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer_to_integer_to_integer_to_integer_to_integer_to_integer(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer_to_integer_to_integer_to_integer_to_integer_to_integer(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer_to_integer_to_integer_to_integer_to_integer_to_integer(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer_to_integer_to_integer_to_integer_to_integer_to_integer(i)\n        count+=len(j",
        "test": "assert     next_smallest_palindrome(24) == 18",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert     kth_element(arr=[2, 4, 6, 8], k=3) == 6",
        "num_ids": 178,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([c.capitalize() for c in word.split('_')])\n",
        "test": "assert     snake_to_camel('Hello') == 'Hello'",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    s=m\n    if (m-n)%2==1:\n        s=s+n\n    return s\n",
        "test": "assert     eulerian_num(1,1) == 1",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(i+1, len(input_list)):\n            if input_list[i] < input_list[j]:\n                temp = input_list[i]\n                input_list[i] = input_list[j]\n                input_list[j] = temp\n    return input_list\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # YOUR CODE HERE\n    if len(lst)==0:\n        return 0\n    if len(lst)==1:\n        return lst[0]\n    else:\n        return count(lst[1:]) + 1\n",
        "test": "assert         count([1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ",
        "num_ids": 2203,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tuple = tuple(test_tup)\n    test_list.append(new_tuple)\n",
        "test": "assert     add_lists(['a','b','c'], ('1','2','3')) == ['a','b','c',1,2,3]",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return num1+num2+num3\n",
        "test": "assert     merge_sorted_list([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        temp=s[i]\n        if(temp=='1'):\n            count+=1\n        else:\n            count+=1\n            temp='0'\n    if(count%2==0):\n        return count\n    else:\n        return n-count\n",
        "test": "assert     odd_Equivalent(\"0111\",3) == 0",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in nestedlist:\n        result += i\n    return result\n",
        "test": "assert     common_in_nested_lists([[[1, 2, 3, 4, 5]], [[1, 3, 4, 5]]]) == [[1, 3], [4, 5]]",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "test": "assert     check_integer(\"01\")",
        "num_ids": 114,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # if all the dictionaries are empty\n    if len(list1)==0:\n        return True\n    else:\n        # if any of the dictionaries are not empty\n        for x in range(len(list1)):\n            # if any of the values are not an empty string\n            if list1[x].keys()=={}:\n                # if the values are not empty\n                if list1[x].values()==[]:\n                    # if the keys are not empty\n                    if list1[x].items()==[]:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n            else:\n                # if the values are not empty\n                if list1[x].values()==[]:\n                    # if the keys are not empty\n                    if list1[x].keys()=={}:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n                else:\n                    # if the keys are not empty\n                    if list1[x].items()=={}:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n            # if the dictionary is not empty\n            if list1[x].keys()=={}:\n                # if the values are empty\n                if list1[x].values()==[]:\n                    # if the keys are empty\n                    if list1[x].items()==[]:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n            else:\n                # if the values are empty\n                if list1[x].items()==[]:\n                    # if the keys are empty\n                    if list1[x].keys()=={}:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n        # if all the dictionaries are empty\n        return True\n",
        "test": "assert     empty_dit([]) == True",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Your code here\n    x = 0\n    for i in nums:\n        x += i\n    return x\n",
        "test": "assert         tuple_to_int([5,5,5,5,5]) == 5",
        "num_ids": 214,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [i for i in test_list if type(i) == type(list(i))]\n    for i in test_list:\n        try:\n            i.append(float(i))\n        except:\n            pass\n    return test_list\n",
        "test": "assert ",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    strings = string.split()\n    return strings\n",
        "test": "assert     string_to_list(\"This is a test string\") == [\"This\", \"is\", \"a\", \"test\", \"string\"]",
        "num_ids": 258,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    seen = {}\n    for i,x in enumerate(arr):\n        if x in seen:\n            return x\n        if i == len(arr) - 1:\n            return -1\n        seen[x] = i\n    return -1\n",
        "test": "assert     search(arr = [3,1,3,2,2,3,1,3,4,5]) == 3",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1]*list1[j][1]\n            if(product > max_product):\n                max_product = product\n    return max_product\n",
        "test": "assert     max_product_tuple([]) == 0",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    if limit < 0:\n        return None\n    amicable_numbers_sum = []\n    amicable_numbers = []\n    i = 1\n    while i <= limit:\n        if i == 1:\n            pass\n        elif i % 2 == 0:\n            amicable_numbers.append(i)\n        else:\n            n1 = i * i\n            n2 = i * i + 1\n            n3 = i * i + 2\n            if n1 == n2 == n3:\n                amicable_numbers.append(i)\n            elif n1 == n2 or n3 == n1:\n                amicable_numbers.append(n1)\n            else:\n                amicable_numbers.append(n1 + n2 + n3)\n        i += 1\n    return sum(amicable_numbers)\n",
        "test": "assert         amicable_numbers_sum(2) == 2",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        a = float(a)\n        b = float(b)\n        return acos(complex(a,b).real)\n    except Exception as e:\n        return 'Wrong arguments'\n",
        "test": "assert     angle_complex(-1,1) == -90",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    index_0 = 0\n    index_1 = 0\n    \n    for i in range(0, len(string)):\n        if string[i] == \"0\":\n            count_0 = count_0 + 1\n        else:\n            count_1 = count_1 + 1\n        \n        if count_0 == count_1:\n            index_0 = i\n            index_1 = i\n            break\n    \n    return index_0 - index_1 + 1\n",
        "test": "assert ",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a < b:\n        a, b = b, a\n    a = abs(a)\n    b = abs(b)\n    # compute sum\n    s = a+b\n    # print number of divisors\n    # i = 1\n    # while i <= s:\n    #     if s % i == 0:\n    #         print i\n    #         break\n    #     i += 1\n    # return sum\n    div = []\n    for i in range(1, s+1):\n        if a % i == 0 and b % i == 0:\n            div.append(i)\n    return div\n",
        "test": "assert     sum(10,20) == 30",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        raise ZeroDivisionError('Cannot divide by zero.')\n    else:\n        return x * y\n",
        "test": "assert     multiply_int(0, 1) == 0",
        "num_ids": 189,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    result = []\n",
        "test": "assert     is_correct(long_words, ['mom','mama', 'tim','shopper','spider','spiderman','screen','screenman', 'death']) == 0",
        "num_ids": 167,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    num_rows = len(my_matrix)\n    num_cols = len(my_matrix[0])\n    for r in range(num_rows):\n        for c in range(num_cols):\n            if r == num_rows//2:\n                if c == num_cols//2:\n                    if my_matrix[r][c] == '1':\n                        return False\n            if c == num_cols//2:\n                if r == num_rows//2:\n                    if my_matrix[r][c] == '1':\n                        return False\n    return True\n",
        "test": "assert     magic_square_test([[1,1,1],[1,0,0],[0,0,0]]) == True, \"test_case 1 failed\"",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_freq = 0\n    for num in nums:\n        if num == max_freq:\n            max_count += 1\n        else:\n            max_freq = num\n            max_count += 1\n    return max_count\n        \n",
        "test": "assert     max_occurrences([1,2,3,4,5,5,6,7,8,9,10,11,12,13,14]) == 10, \"incorrect list\"",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # Hint: You can use the function.reverse() and.translate() methods to reverse a string.\n    # Hint: You can use list() to convert a string into a list.\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    reverse_str = \"\"\n    for c in str1:\n        if c in vowels:\n            c = vowels.index(c)\n            reverse_str = reverse_str + vowels[c]\n        else:\n            reverse_str = reverse_str + c\n    return reverse_str\n",
        "test": "assert     reverse_vowels(\"kayak\") == \"kayak\"",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    a = \"(\"\n    for x in tup1:\n        a = a + str(x)\n    a = a + \")\"\n    return a\n",
        "test": "assert     tup_string(tup1)==tup_string(tup2)",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n",
        "test": "assert ",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n==1):\n        return 1\n    elif (n==3):\n        return 3\n    elif (n==5):\n        return 5\n    elif (n==7):\n        return 7\n    elif (n==9):\n        return 9\n    else:\n        return n * n\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    zeroes = zeroes / len(nums)\n    non_zeroes = non_zeroes / len(nums)\n    return zeroes, non_zeroes\n",
        "test": "assert     zero_count([0,0,0,1,0]) == 0.5, \"Test failed.\"",
        "num_ids": 2298,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0 or n == 1: \n        return True\n    else: \n        if n & n-1 == 0: \n            return False\n        else: \n            return is_Sum_Of_Powers_Of_Two(n & n-1)\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(13) == False",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #Variables\n    circumference = 2*3.14*r\n    print(\"Circumference of circle: \", circumference)\n    \n    return circumference\n",
        "test": "assert     circle_circumference(30) == 42.0, \"circle_circumference test failed\"",
        "num_ids": 135,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n    for element in test_list:\n        if type(element) == list:\n            num_list += extract_singly(element)\n        elif type(element) == set:\n            num_list += element\n        else:\n            num_list.append(element)\n    return num_list\n",
        "test": "assert     extract_singly(['hello','world','coding','code']), \"Should be ['hello', 'world', 'coding', 'code']\"",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    gap = length - 1\n    count = 1\n    while count <= gap:\n        while count <= length and nums[count] > nums[count - 1]:\n            count += 1\n        nums[count - 1], nums[gap] = nums[gap], nums[count - 1]\n        gap -= 1\n        count = 1\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    if len(list1)==0 or len(list2)==0 or len(list3)==0:\n        return 0\n    \n    same_list = []\n    \n    for i in list1:\n        for j in list2:\n            if i == j:\n                same_list.append(i)\n    \n    return len(same_list)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert count_samepair([1,2,3],[2,3,4], [1,2,3,4]), \"lists must not contain duplicates\"",
        "num_ids": 2400,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    cnt = 0\n    for i in Input:\n        if type(i) is list:\n            cnt += 1\n    return cnt\ndef find_lists_2(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    cnt = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is list:\n            cnt += 1\n    return cnt\ndef find_lists_3(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    cnt = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            cnt += 1\n    return cnt\ndef check_2(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            if len(Input[i]) == 0:\n                return -1\n            else:\n                if type(Input[i][0]) is int:\n                    if Input[i][0] == 0:\n                        return -1\n                    else:\n                        return 1\n                else:\n                    return 0\ndef check_3(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            if len(Input[i]) == 0:\n                return -1\n            else:\n                if type(Input[i][0]) is int:\n                    if Input[i][0] == 0:\n                        return -1\n                    else:\n                        return 1\n                else:\n                    return 0\ndef check_4(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    if type(Input) is tuple:\n        if len(Input) == 1:\n            return -1\n        else:\n            for i in range(len(Input)):\n                if type(Input[i]) is tuple:\n                    if len(Input[i]) == 0:\n                        return -1\n                    else:\n                        if type(Input[i][0]) is int:\n                            if Input[i][0] == 0:\n                                return -1\n                            else:\n                                return 1\n                        else:\n                            return 0\ndef check_5(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            if len(Input[i]) == 0:\n                return -1\n            else:\n                if type(Input[i][0]) is int:\n                    if Input[i][0] == 0:\n                        return -1\n                    else:\n                        return 1\n                else:\n                    return 0\ndef check_6(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    if type(Input) is tuple:\n        if len(Input) == 1:\n            return -1\n        else:\n            for i in range(len(Input)):\n                if type(Input[i]) is tuple:\n                    if len(Input[i]) == 0:\n                        return -1\n                    else:\n                        if type(Input[i][0]) is int:\n                            if Input[i][0] == 0:\n                                return -1\n                            else:\n                                return 1\n                        else:\n                            return 0\n",
        "test": "assert     find_lists([]) == 0",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = arr[0] - arr[1]\n    min = arr[0] \n    i = 1\n    while i < len(arr):\n        if arr[i] < arr[i-1]:\n            max = arr[i] - arr[i-1]\n            min = max\n        else:\n            max = arr[i] - arr[i-1]\n            min = arr[i]\n        i+=1\n    return max - min\n",
        "test": "assert     max_Abs_Diff([10, -11, 12, 13, 14]) == -1, \"Test Passed\"",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == n:\n        return (a[0], a[1])\n    else:\n        for i in range(a[0], a[1]+1):\n            for j in range(a[1], a[1]+1):\n                if i + j == n:\n                    return (i, j)\n                elif not(i + j > n):\n                    continue\n                else:\n                    return find_solution(i, j, n)\n",
        "test": "assert     find_solution([1,2], 3, 5) == None",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list1.remove(j)\n    return list1\n",
        "test": "assert     remove_elements([1,2,3,4,5,6], [5,6,7,8,9]) == [5,6,7,8,9], 'check not correct'",
        "num_ids": 323,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum += (i*(i+1))//2\n    return sum\n",
        "test": "assert     sum_series(4) == 10",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*(s-l)**2)/2\n",
        "test": "assert         area_polygon(0,0) == 0",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n = n-1 # Getting the first number minus 1 to know the result\n    if n%2==0: # Checking if the first number is even\n        return False\n    else: # Checking if the first number is odd\n        return True\ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime or not.\n    '''\n    if n>1: # Checking if n is not 0\n        for i in range(2,n): # Checking each number from 2 to n\n            if n%i==0: # If number is divisible by i then it is not a prime number\n                return False # If the number is divisible by i then it is not a prime number\n    else:\n        return False # If the number is 0 then it is not a prime number\n    return True # If the number is 1 then it is not a prime number\n",
        "test": "assert div_sum(1) == 0",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #create an empty dictionary to store the character counts in. \n    dict = {}\n    #iterate through the string and look at the position of each character in the string\n    for i in str1: \n        if i.isalpha(): \n            if i not in dict: \n                dict[i] = 0 \n            dict[i] += 1 \n    #count the total of characters in dictionary. \n    return len(dict)\n",
        "test": "assert     count_char_position(\"abacaba\") == 3, \"incorrect\"",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    odd_pair = 0\n    for i in range(0, len(A)-1, 2):\n        if A[i] ^ A[i+1] == 0:\n            even_pair += 1\n        else:\n            odd_pair += 1\n    return even_pair, odd_pair\n",
        "test": "assert ",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # code to solve above problem\n    if n == 1:\n        return 2\n    elif n <= 2:\n        return 1\n    else:\n        return n * next_power_of_2(n-1)\n",
        "test": "assert     next_power_of_2(0) == 1",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    result = 0\n    for i in a:\n        if i==x:\n            result += 1\n    return result\n",
        "test": "assert ",
        "num_ids": 115,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n):                                                                                                                \n        total += list1[i]\n    return total\n",
        "test": "assert     sum_range_list([1,2,3,4,5], 4, 5) == 0, \"Sum of range list should be 0\"",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a < 0:\n        return 0\n    elif a == 0:\n        return math.sqrt(3)\n    else:\n        return (math.sqrt(3) * a) + (math.sqrt(3) * (a + 1))\n",
        "test": "assert     perimeter_pentagon(1) == math.pi*3/2",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    #string = str(input(\"Enter the string : \"))\n    string = s\n    for i in range(len(string)):\n        if string[i] =='s' or string[i] == 'S':\n            count += 1\n    print(\"The number of occurence of string's' in the given string : \", count)\n    print(\"The number of occurence of string 'S' in the given string : \", count)\n    print(\"The number of occurence of string'std' in the given string : \", count)\n    print(\"The number of occurence of string'std' in the given string : \", count)\n    return count\n",
        "test": "assert     count_occurance('aaa') == 0",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == type(i):\n            return True\n    return False\n",
        "test": "assert     check_type([1, 2, 3, \"a\", [4, 5, 6]]) == True, \"Wrong data type in check_type\"",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        count += arr[i]\n        if (count >= x):\n            return True\n    return False\n",
        "test": "assert     is_majority([1, 2, 1, 3, 3, 4, 2, 1], 5, 3) == True",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # code goes here\n    n = n%2\n    count_n = 0\n    while n>0:\n        n = n//2\n        if n%2==1:\n            count_n+=1\n    return count_n\n",
        "test": "assert     count_Set_Bits(1000) == 2",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    o = ''\n    for char in str:\n        if char % 2 == 1:\n            o = o + char\n    return o\n",
        "test": "assert     odd_values_string('') == ''",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c: \n        return a \n    elif b<c<a: \n        return b \n    else: \n        return c \n",
        "test": "assert     min_of_three(1,3,2) == 2",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n == 0 or n == 1):\n        return True\n    else:\n        for i in range(l,r+1):\n            if (i < 0 or i > 255):\n                return False\n            if (i % n == 0):\n                return False\n        return True\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(5,1,10) == 2",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] *= -1\n    return arr\n",
        "test": "assert         re_arrange_array([1, 2, 3, 4], 3) == [1, 2, 3, 4], 'The function does not match the given output!'",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(char,'')\n    return str1\n",
        "test": "assert     replace_blank('w','b') == 'w'",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n == 1:\n        return list1\n    else:\n        heapq.heapify(list1)\n        for i in range(n-2):\n            heapq.heappush(list1,heapq.heappop(list1))\n    return list1\n",
        "test": "assert     larg_nnum([1,2,3,4,5,6],4)==[4,5,6]",
        "num_ids": 2348,
        "indeed": false
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    c1 = 2.2*(r*r*(1-math.cos(h)))\n    c2 = 2.2*(r*r*(1+math.cos(h)))\n    return (c1+c2)/2\n",
        "test": "assert     lateralsuface_cylinder(0,2) == 0",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    def volume_cube_helper(side):\n        if side == 1:\n            return 1\n        elif side == 2:\n            return 4 * 4\n        elif side == 3:\n            return 16 * 16\n",
        "test": "assert     volume_cube(3) == 'Error'",
        "num_ids": 131,
        "indeed": false
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    ans = 0\n    for i in range(0, n):\n        if (i % 2 == 0):\n            ans += 2**i\n    return ans\n",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    out = {}\n    for entry in test_list:\n        key = tuple(entry)\n        if key in out:\n            out[key] += 1\n        else:\n            out[key] = 1\n    return out\n",
        "test": "assert     check_occurences([('aaaa', 3), ('bbbbb', 1)]) == {'aaa': 3, 'bbb': 1}",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    s = str.replace(\" \", \"\")\n    return len(set(s))\n",
        "test": "assert number_of_substrings(\"abcc\") == 3",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    counter = 0\n    for i in range(0,m-1):\n        if n > (i+1):\n            counter += 1\n        else:\n            counter += 1\n            n = n - (i+1)\n    if m == 1:\n        return counter\n    else:\n        return counter + 1\n        \n",
        "test": "assert     get_total_number_of_sequences(3,4) == 3",
        "num_ids": 333,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list(list1[-1]) + list(list2[-1])\n    \n    \ndef remove_space(str):\n    '''\n    This function takes in a string and returns it with all newlines removed.\n    '''\n    newstr = str.replace('\\n', '')\n    return newstr\n    \ndef check_string(string):\n    '''\n    This function takes in a string and returns True or False.\n    '''\n    if'' in string:\n        return True\n    else:\n        return False\n        \ndef check_string_n_space(string):\n    '''\n    This function takes in a string and returns True or False.\n    '''\n    if'' in string:\n        return True\n    else:\n        return False\n    \ndef upper_case(string):\n    '''\n    This function takes in a string and returns it in upper case.\n    '''\n    return string.upper()\n    \ndef swap_case(string):\n    '''\n    This function takes in a string and returns it in lower case.\n    '''\n    return string.lower()\n    \ndef delete_space(string):\n    '''\n    This function takes in a string and returns it without the newlines.\n    '''\n    return string.replace('\\n','')\n    \ndef get_number_dict(line):\n    '''\n    This function takes in a line of input and returns a dictionary that contains the number and its respective key.\n    '''\n    temp_dict = {}\n    lines = line.split()\n    for item in lines:\n        temp_dict[item] = lines.index(item)\n    return temp_dict\n    \ndef count_the_words(string):\n    '''\n    This function takes in a string and returns the number of words in the string.\n    '''\n    return len(string.split())\n    \ndef is_vowel(character):\n    '''\n    This function takes in a character as an input and returns True or False depending on whether or not the character is a vowel.\n    '''\n    if character == \"a\" or character == \"e\" or character == \"i\" or character == \"o\" or character == \"u\":\n        return True\n    else:\n        return False\n    \ndef is_consonant(character):\n    '''\n    This function takes in a character as an input and returns True or False depending on whether or not the character is a consonant.\n    '''\n    if character == \"g\" or character == \"G\" or character == \"t\" or character == \"T\" or character == \"y\" or character == \"Y\" or character == \"a\" or character == \"A\" or character == \"i\" or character == \"I\" or character == \"o\" or character == \"O\":\n        return True\n    else:\n        return False\n        \ndef is_consonant_vowel(character):\n    '''\n    This function takes in a character as an input and returns True or False depending on whether or not the character is a consonant with a vowel.\n    '''\n    if character == \"g\" or character == \"G\" or character == \"t\" or character == \"T\" or character == \"y\" or character == \"Y\" or character == \"a\" or character == \"A\" or character == \"i\" or character == \"I\" or character == \"o\" or character == \"O\":\n        return True\n    else:\n        return False\n        \ndef is_vowel_consonant(character):\n    '''\n    This function takes in a character as an input and returns True or False depending on whether or not the character is a vowel with a consonant.\n    '''\n    if character == \"g\" or character == \"G\" or character == \"t\" or character == \"T\" or character == \"y\" or character == \"Y\" or character == \"a\" or character == \"A\" or character == \"i\" or character == \"I\" or character == \"o\" or character == \"O\":\n        return True\n    else:\n        return False\n        \ndef is_vowel_consonant_vowel(character):\n    '''\n    This function takes in a character as an input and returns True or False depending on whether or not the character is a vowel with a consonant with a vowel.\n    '''\n    if character == \"g\" or character == \"G\" or character == \"t\" or character == \"T\" or character == \"y\" or character == \"Y\" or character == \"a\" or character == \"A\" or character == \"i\" or character == \"I\" or character == \"o\" or character == \"O\":\n        return True\n    else:\n        return False\n    \ndef write_list_to_file(output_list, file_name):\n    '''\n    This function takes in a list of strings and write them to a text file.\n    '''\n    f = open(file_name, 'w')\n    for item in output_list:\n        f.write(item)\n        f.write('\\n')\n    f.close()\n    \ndef write_dict_to_file(output_dict, file_name):\n    '''\n    This function takes in a dictionary of keys and values and write them to a text file.\n    '''\n    f = open(file_name, 'w')\n    for key in output_dict:\n        f.write(key)\n        f.write('\\n')\n        f.write(str(output_dict[key]))\n        f.write('\\n')\n    f.close()\n    \ndef read_file(file_name):\n    '''\n    This function takes in a text file as an input and returns a list of strings.\n    '''\n    input_list = []\n    f = open(file_name, 'r')\n    for line in f:\n        input_list.append(line)\n    f.close()\n    return input_list\n    \ndef read_dictionary(file_name):\n    '''\n    This function takes in a text file as an input and returns a dictionary.\n    '''\n    input_dict = {}\n    f = open(file_name, 'r')\n    for line in f:\n        key = line.strip()\n        value = line.strip()\n        input_dict[key] = value\n    f.close()\n    return input_dict\n    \ndef main():\n    '''\n    This function takes in an input string and writes it to a text file.\n    '''\n    input_line = input(\"Input a string: \")\n    output_line = replace_list(input_line,get_number_dict(input_line))\n    write_list_to_file(output_line, \"output.txt\")\n    \ndef main_v():\n    '''\n    This function takes in an input string and writes it to a text file.\n    '''\n    input_line = input(\"Input a string: \")\n    output_line = replace_list(input_line, get_number_dict(input_line))\n    output_line = delete_space(output_line)\n    write_list_to_file(output_line, \"output_v.txt\")\n    \n    \nmain()\n    \ndef main_n():\n    '''\n    This function takes in an input string and writes it to a text file.\n    '''\n    input_line = input(\"Input a string: \")\n    output_line = replace_list(input_line, get_number_dict(input_line))\n    output_line = delete_space(output_line)\n    write_list_to_file(output_line, \"output_n.txt\")\n    \n    \nmain_n()\n    \ndef main_n_v():\n    '''\n    This function takes in an input string and writes it to a text file.\n    '''\n    input_line = input(\"Input a string: \")\n    output_line = replace_list(input_line, get_number_dict(input_line))\n    output_line = delete_space(output_line)\n    output_line = upper_case(output_line)\n    output_line = swap_case(output_line)\n    output_line = remove_space(output_line)\n    output_line = is_vowel(output_line)\n    output_line = is_vowel_consonant(output_line)\n    output_line = is_consonant(output_line)\n    output_line = is",
        "test": "assert     replace_list([1,2,3],[1,4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 2376,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for char in str1:\n        if char.isalpha():\n            char_count += 1\n    return char_count\n",
        "test": "assert     count_charac('abc') == 3",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = math.sqrt(N)\n    if N == 1: \n        return sqrtN\n    if N == 2:\n        return 2*sqrtN\n    if N % 2 == 0:\n        return (N+1)**2\n",
        "test": "assert     next_Perfect_Square(4) == 10",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Find the maximum value of the array\n    max_val = arr[0]\n    # Append the elements of the array into an array\n    arr = [x+y for x, y in zip(arr[1:], arr[:-1])]\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the value of the current element is higher than the maximum value of the array\n        if arr[i] > max_val:\n            # Set the maximum value as the current element\n            max_val = arr[i]\n        # If the current value is lower than the maximum value of the array\n        elif arr[i] < max_val:\n            # Set the maximum value as the current value\n            max_val = arr[i]\n    # Return the maximum value of the array\n    return max_val\n",
        "test": "assert ",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return (number**0.5)**(1/2)\n    \ndef main():\n    '''\n    The main function, which uses the turtle module for creating turtles.\n    '''\n    # create a new turtle\n    turtle = turtle_module.Turtle()\n    turtle.speed('fastest')\n    \n    # create a new turtle and draw the figure\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.circle(50)\n    turtle.end_poly()\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.circle(50)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forwar",
        "test": "assert     babylonian_squareroot(0) == 0.0",
        "num_ids": 2482,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    t = {\n        'r':'p',\n        'p':'a',\n        'b':'n',\n        'n':'o',\n        'a':'t',\n        'n':'n',\n        't':'u',\n        'u':'w',\n        'r':'l',\n        'l':'d',\n        'd':'o'\n    }\n    dp = [[0 for x in range(len(str)+1)] for y in range(len(str)+1)]\n    for i in range(1,len(str)+1):\n        for j in range(1,i+1):\n            if str[i-j] == str[i-1]:\n                dp[i][j] = dp[i-j][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j-1],dp[i-1][j])\n    return dp[-1][-1]\n",
        "test": "assert     lps(\"bb\") == 2, \"Test lps\"",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * harmonic_sum(n-1)\n",
        "test": "assert     harmonic_sum(5) == 6",
        "num_ids": 130,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #To find the intersection of two arrays\n    intersection = []\n    for i in array_nums1:\n        for j in array_nums2:\n            if i == j:\n                intersection.append(i)\n",
        "test": "assert     intersection_array([1,2,3],[3,4]) == []",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len([i for i in tup if i==x])\n",
        "test": "assert     count_X(tup, 'Python') == 1, 'Python not counted'",
        "num_ids": 249,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in list:\n        list.insert(list.index(i),element)\n    return list\n",
        "test": "assert     insert_element([1,2,3,4,5,6,7,8,9], 0) == [1,2,3,4,5,6,7,8,9], 'fail'",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # First function to convert from complex to polar\n    # First return value of function is not complex\n    if type(numbers) == complex:\n        return numbers.real, numbers.imag\n    elif type(numbers) == int or type(numbers) == float:\n        # Second function to convert from polar to complex\n        return numbers * cmath.pi, -1 * numbers * cmath.polar(0)\n",
        "test": "assert     convert([1+2j, 3, 4+5j]) ==  [0,2j,3j,4j,5j]",
        "num_ids": 2410,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for item in list1:\n        if type(item) == int:\n            counter = counter + 1\n    return counter\n",
        "test": "assert     count_integer([1, 2, 3]) == 3",
        "num_ids": 141,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 1:\n        return [tuple(l)]\n    else:\n        return [tuple(l) for i in range(len(l)) for j in combinations_colors(l[i+1:], n-1)]\n",
        "test": "assert         combinations_colors([1,2,3,4,5], 5) == [(1,2,3,4,5)]",
        "num_ids": 1743,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # print('This is a test for your solution')\n    # print('This is a test for your solution')\n    # print('This is a test for your solution')\n    # print('This is a test for your solution')\n    count = 0\n    for i in range(2, n+1):\n        isPrime = True\n        if(i%2==0):\n            if(i==1):\n                continue\n            for j in range(2, i):\n                if(i%j==0):\n                    isPrime = False\n                    break\n            if(isPrime):\n                count+=1\n    return count\n",
        "test": "assert     count_Primes_nums(9) == 1",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "test": "assert     swap_numbers(2,3) == (3,2)",
        "num_ids": 134,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #Your code here\n    pass\n",
        "test": "assert         maximize_elements((3, 4, 5, 6), (2, 5, 6, 7)) == (2, 5, 6, 7)",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n > 20: \n        raise Exception(\"n should be less than 20\")\n    if n <= 2: \n        return n \n    for i in range(2, n): \n        if i == (n - 1): \n            if n % i == 0: \n                return False \n        else: \n            if (n % i) == 0: \n                return False \n    return True \n",
        "test": "assert     newman_prime(5) == 6",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = 0\n    for i in test_tup1:\n        result += i / test_tup2[1]\n    return result\n",
        "test": "assert     division_elements([4,5,6], [2,3,4]) == False",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    for x in range(len(list1)):\n        list1[x] = list1[x][:L]\n    return tuple(list1), tuple(list1[-1])\n",
        "test": "assert ",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return 0\n    elif h_age <= 4:\n        return 1\n    elif h_age <= 6:\n        return 2\n    elif h_age <= 8:\n        return 3\n    else:\n        return 4",
        "test": "assert     dog_age(2) == \"2 dog years\"",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Write your code here\n    if step == 0:\n        return [[]]\n    elif step == 1:\n        return [[S]]\n    elif step == 2:\n        return [[S]] + [S] + [S]\n    else:\n        return list(list_split(S, step - 1)) + [[S]] + [[S]] + [[S]]\n    \ndef list_permutations(S):\n    '''\n    Write a function that takes in a list and returns the list of all permutations of S.\n    '''\n    # Write your code here\n    if S == []:\n        return []\n    elif S == [1] or S == [1, 2]:\n        return [[1]]\n    elif S == [1, 2, 3]:\n        return [[1, 2], [1, 3], [2, 3]]\n    elif S == [1, 3, 2]:\n        return [[1, 3], [2, 3], [1, 2]]\n    elif S == [1, 2, 3, 4, 5, 6]:\n        return [[1, 2, 4, 6], [1, 5, 6], [1, 2, 5], [1, 3, 6], [2, 4, 6], [3, 4, 6]]\n    elif S == [1, 2, 3, 4]:\n        return [[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 4, 2], [1, 4, 2, 3], [1, 3, 4, 2], [1, 2, 4, 3]]\n    elif S == [1, 2, 3]:\n        return [[1, 2, 3], [1, 3, 2], [1, 3, 2], [1, 2, 3], [1, 2, 3]]\n    elif S == [1, 2]:\n        return [[1, 2], [1, 2]]\n    elif S == [1, 2, 3, 4, 5, 6, 7, 8]:\n        return [[1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 4, 6, 7, 8], [1, 3, 4, 6, 7, 8], [1, 3, 4, 7, 8], [1, 3, 4, 7, 8], [1, 2, 4, 6, 7, 8]]\n    else:\n        return [[1]]\n    \ndef list_index(S, L):\n    '''\n    Write a function that takes in a list and an integer n and returns the index of the first n elements of the list.\n    '''\n    # Write your code here\n    if len(S) == 0:\n        return -1\n    if len(S) == 1:\n        return 0 if L == S[0] else -1\n    if L == S[0]:\n        return 1 if len(S) == 2 else -1\n    if len(S) == 2:\n        return 2 if len(S) == 3 and L == S[1] else -1\n    if len(S) == 3:\n        return 3 if S[2] == S[0] and S[1] == S[1] and S[0] == S[1] and S[1] == S[2] and S[2] == S[2] else -1\n    else:\n        return -1\n",
        "test": "assert ",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = l*l\n    print('The lateral surface area of the cube is '+str(a))\n",
        "test": "assert     lateralsurface_cube(5) == 24",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    return n * (n + 1) // 2\n    \n    \n    \n    \ndef is_prime(number):\n    '''\n    Write a python function that takes in an integer and returns True if the number is prime, or False if the number is not prime.\n    '''\n    \n    if number == 1:\n        return False\n    if number == 2:\n        return True\n    for x in range(2, number):\n        if number % x == 0:\n            return False\n    return True\n",
        "test": "assert     square_Sum(3) == ",
        "num_ids": 130,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1:\n        raise ValueError('number of stars must be positive')\n    elif n == 1:\n        return 1\n    else:\n        star_num = 0\n        while n % 2 == 0:\n            star_num = star_num + 1\n            n = n/2\n        return star_num + 1\n",
        "test": "assert     find_star_num(5) == 1",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == ord('a')",
        "num_ids": 173,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    #Your code here\n    #Hint: use an if or else statement to find the sum.\n    even_sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1,2,3,4,5]) == 6",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 1:\n        return n\n    elif n % 2 == 0:\n        return even_Power_Sum(n - 1) + n\n    else:\n        return even_Power_Sum(n - 1) + even_Power_Sum(n - 2)\n    \ndef even_Power_Sum_3(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the third power.\n    '''\n    if n == 1:\n        return n\n    elif n % 2 == 0:\n        return even_Power_Sum(n - 1) + n\n    else:\n        return even_Power_Sum(n - 1) + even_Power_Sum(n - 2) + even_Power_Sum(n - 3)\n",
        "test": "assert ",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    l = []\n    for x in test_list:\n        l.append(x[1])\n    return l\n",
        "test": "assert ",
        "num_ids": 2083,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print(f\"Your subtraction is: {tuple(test_tup1) - tuple(test_tup2)}\")\n",
        "test": "assert     substract_elements(test_tup2, test_tup1) == (2, 3)",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # calculate the binomial coefficients using the built in math module.\n    coeff_sum = math.comb(n, 2) # n^2\n    return coeff_sum\n",
        "test": "assert     even_binomial_Coeff_Sum(2) == 3",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*h\n",
        "test": "assert     volume_cylinder(6,6) == 16",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {}\n    for i in dict:\n        if dict[i] >= n:\n            filtered[i] = dict[i]\n    return filtered\n",
        "test": "assert     dict_filter({\"c\":3, \"g\":3, \"h\":2, \"i\":4, \"o\":5},2) == {\"h\":2, \"i\":4, \"o\":5, \"c\":3}",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] < test_tup[i + 1]:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements((1, 2, 3)) == 2",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return is_num_decagonal(n - 1) + is_num_decagonal(n - 2)\n",
        "test": "assert     is_num_decagonal(0) == 0",
        "num_ids": 2560,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return (False, -1)\n    elif item in dlist:\n        return (True, dlist.index(item))\n    else:\n        return (False, -1)\n",
        "test": "assert ",
        "num_ids": 287,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) < len(test_list):\n        return False\n    return True\n",
        "test": "assert     all_unique([1,1,1,1,1,1,1]), \"all_unique does not return True as the list has duplicate values\"",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    '''\n    Write your code here.\n    '''\n    num_min = min(nums1, nums2)\n    nums1.remove(num_min)\n    nums2.remove(num_min)\n    return num_min\n",
        "test": "assert     sub_list([1,3,4,5,6],[2,4,6,8,9]) == [2,4,6,8,9]",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 283,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) == 1: \n        return True\n    else: \n        for i in str(n): \n            if not (i.isdigit()): \n                return False \n            if not (int(i) <= n): \n                return False\n        return True\n",
        "test": "assert     validate(8)     == True",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Empty list to store element to check\n    sum = 0\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n        else:\n            sum += list[i]\n    return True\n    \ndef solution(k, lists):\n    answer = []\n    for i in lists:\n        if check_element(i,k):\n            answer.append(i)\n    \n    return answe",
        "test": "assert     check_element([1,2,3,4,5,6,7,8,9,10,11,12,13],7)==False",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_two_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_two_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_two_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_two_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_three_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_three_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_three_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_three_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_three_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_three_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_three_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_three_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_three_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_four_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_four_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_four_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_four_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_four_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_four_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_four_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_four_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_four_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_five_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\nde",
        "test": "assert ",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Python3 implementation\n    \n    # Create an array to store the sub-array sums\n    sub_array_sum_array = [0] * n\n    \n    # Initialize result array\n    result = 0\n    \n    # Loop through all elements and create a sub-array sum for each repetition\n    for i in range(1, n):\n        sub_array_sum = 0\n        for j in range(i, n):\n            sub_array_sum += a[j]\n            if sub_array_sum >= k:\n                result = max(result, sub_array_sum_array[j] + sub_array_sum)\n                sub_array_sum_array[j] = 0\n    \n    # Return the final result\n    return result\n",
        "test": "assert     max_sub_array_sum_repeated([1,2,3,4,5,6,7], 3, 2) == 5",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n**2\n",
        "test": "assert     square_Sum(4) == 16",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "test": "assert     max_length([]) == 0 ",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n < 2): \n        return 1\n    \n    # base case \n    if n == 2: \n        return 2 \n    \n    # first case \n    if (n == 3): \n        return 4 \n",
        "test": "assert     count_no_of_ways(3, 2) == 6",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return 0\n    elif n>m:\n        return n//m\n    elif n<m:\n        return (m+n//m)//2\n    else:\n        return n\n",
        "test": "assert     find(2,3) == 1",
        "num_ids": 225,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return -1*(w+h)/3\n",
        "test": "assert     otherside_rightangle(0,0) == 0",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[-1]\n",
        "test": "assert     max_val([1,2,3]) == 3",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Sum all divisors of a number\n    # If the number is a divisor, then add it to the return value\n    \n    if number == 1:\n        return 1\n    elif number == 0:\n        return 0\n    else:\n        return number + sum_div(number-1)\n",
        "test": "assert     sum_div(50) == 7",
        "num_ids": 2245,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    invCount = 0\n    for num in arr:\n        if num < 0:\n            invCount += 1\n    return invCount\n",
        "test": "assert ",
        "num_ids": 171,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in list1:\n        if type(i) == list:\n            new_list += flatten_list(i)\n        else:\n            new_list.append(i)\n    return new_list\n    ",
        "test": "assert     flatten_list([1, [2, [4, [[3, [6, 7, 8]]], 9], 10], 11])!= [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]",
        "num_ids": 2348,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    num_of_two = len(stdata)\n    if num_of_two == 0:\n        return 0\n",
        "test": "assert     max_aggregate(()) == 0",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    mask = 2 ** (n-1) \n    bin = bin(mask) \n    \n    p = 0 \n    for i in bin[::-1]: \n        if p == n: \n            return i \n        else: \n            p = p + 1 \n    \ndef main(): \n    n = int(input())\n    print(count_binary_seq(n))\nif __name__=='__main__':\n    main(",
        "test": "assert     count_binary_seq(3) == 2",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        return 1 + dict_depth(d.values())\n    else:\n        return 0\n",
        "test": "assert     dict_depth({\"a\":{\"c\":1}}) == 1",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for rot in range(0,rotations) :\n        for j in range(0,len(arr)-1) :\n            if arr[j] == arr[j+1] :\n                index = index -1\n                break\n    if index >= len(arr)-2 :\n        print(\"The value is not present at the index\")\n        return -1\n    elif index >= len(arr)-1 :\n        print(\"The value is not present at the index\")\n        return -1\n    else :\n        return arr[index]\n    \ndef find_Range(arr,rotations,index) :  \n    '''\n    Write a python function to find all values in a given list after number of rotations.\n    '''\n    for rot in range(0,rotations) :\n        for i in range(index,index+3) :\n            arr[i] = arr[i+1]\n    return arr\n",
        "test": "assert     find_Element([1, 2, 3], [0, 2, 0], 0,0) == 2",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0,len(words)):\n        if words[i][0]=='p':\n            return words[i]\n    return 'not found'\n",
        "test": "assert     start_withp(['p']) == ('p', 'p')",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n    if index == n:\n        return a[n - 1]\n    if k == 0:\n        return a[index - 1]\n    if index > n:\n        return a[-1]\n    if k >= n:\n        return max(a[index - 1] + max_sum_increasing_subseq(a, n - 1, index, k - 1), a[index - 1] + max_sum_increasing_subseq(a, n - 1, index, k))\n",
        "test": "assert     max_sum_increasing_subseq(10, 2, 4, 2) == 20",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m>n:\n        return '\\n'\n    elif m==n:\n        return '\\n'.join([tuplex[0],tuplex[1]])\n    else:\n        return '\\n'.join(['\\n'.join([tuplex[i+1]+colon_tuplex(tuplex,i+1,m),tuplex[i]]) for i in range(m-n)])\n",
        "test": "assert     colon_tuplex([1,2,3],2,2) == '1:2:3'",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    p1 = 1\n    p2 = 1\n    res = 0\n    for i in nums1:\n        p1 = p1 * i\n    for i in nums2:\n        p2 = p2 * i\n    for i in range(N):\n        p1 = (p1 // nums2[i])\n        p2 = (p2 // nums1[i])\n        res = max(res, p1 * p2)\n    return res\n",
        "test": "assert ",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    return b\n",
        "test": "assert     maximum(10,20) == 20",
        "num_ids": 130,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.replace(\"'\", \"\")\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple(\"dear\") == ('e', 'a', 'e', 'd', 'e', 'e', 't', 'a', 'e', 'b', 'a', 'b')",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # your code goes here\n    m=0\n    for i in n:\n        m=m^i\n    m=m^(2**(len(n)))\n    print(\"m\",m)\n    return m\n",
        "test": "assert     set_left_most_unset_bit(0xFF) == 0x00, 'Incorrect set_left_most_unset_bit'",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=math.pi*(r**2)*h**2\n    return v\n    #Write your code here!\n    #print(v)\n    #print(math.pi*(r**2)*h**2)\n",
        "test": "assert     volume_cone(2,1) == 0.0",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 2: \n        return n \n    else: \n        if n%2 == 0: \n            return n//2 \n        else: \n            return (n//2)+1 \n        \ndef find_factors(x): \n    '''\n    Write a python function that returns a list of all the factors of x. \n    '''\n    if x == 0: \n        return []\n    elif x % 2 == 0: \n        return find_factors(x//2) + [x]\n    else: \n        return find_factors(x//2) + [x] + find_factors(x//2 + 1)\n        \ndef main(): \n    '''\n    Write a python program to sum all of the numbers in a list, \n    using a while loop.\n    '''\n    print(\"Using while loop\\n\")\n    num_list = [10,5,7,9,8,4,3,6,2,1]\n    index = 0\n    sum = 0\n    while index < len(num_list):\n        sum = sum + num_list[index]\n        index = index + 1\n    print(\"The sum is:\", sum)\n",
        "test": "assert ",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        return find_lucas(n - 1) + 2 * find_lucas(n - 2) \n",
        "test": "assert     find_lucas(1) == 1",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.extend([f'{string}'])\n",
        "test": "assert     add_string([0, 1, 2], '{' ) == \"TypeError: add_string() takes 1 positional argument but 2 were given\"",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {key: convert_list_dictionary(l1, l2, l3) for key in l1}\n",
        "test": "assert     convert_list_dictionary(['a','b','c','d'],['a',2],['x',3]) == {'a':{'b':{'x':3}}, 'c':{}, 'd':{}}",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # formula for the maximum possible sum\n    # n is the number of squares\n    # f(n) is the sum of the squares\n    # return f(n)\n    n = int(n)\n    f = n * (n+1) / 2\n    return max(f, n * (n+1) / 2, n * (n+3) / 6)\n",
        "test": "assert     get_max_sum(0) == 0",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list)\n    for elem in input_list:\n        if len(elem) > max_len:\n            max_len = len(elem)\n    return max_len\n    \ndef min_length_list(input_list):\n    '''\n    Write a function to find the list with minimum length.\n    '''\n    min_len = len(input_list)\n    for elem in input_list:\n        if len(elem) < min_len:\n            min_len = len(elem)\n    return min_len\n    \ndef count_words(input_list):\n    '''\n    Write a function that counts the number of words in a list.\n    '''\n    count = 0\n    for elem in input_list:\n        if isinstance(elem, str):\n            count += 1\n    return count\n",
        "test": "assert     max_length_list([]) == 0",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique = []\n    for i in test_tup:\n        if i not in unique:\n            unique.append(i)\n    if len(unique) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_distinct((1, 1, 2, 3, 4, 4)) == False, \"This test should fail. (check_distinct)\"",
        "num_ids": 288,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    counts = {}\n    for char in str1:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    for char in str1:\n        if char in counts:\n            counts[char] -= 1\n        if counts[char] == 0:\n            return char\n    return \"null\"\n",
        "test": "assert     first_non_repeating_character('H') == 'H'",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if re.match(pattern,string):\n        return True\n    else:\n        return False\n",
        "test": "assert ",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b and b>c:\n        return max(a,b,c)\n    elif a>b:\n        return a\n    elif a>c:\n        return c\n    elif b>c:\n        return b\n    else:\n        return a\n    return\n",
        "test": "assert     median_numbers(5,3,4) == 2, \"the median of numbers 5, 3, and 4 is 2\"",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i % 10\n    return sum\n    \n    \n    #Sum of digits of each number of a given list    ",
        "test": "assert     sum_of_digits([5,6,7,8,9,0]), \"Should be 10\"",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = test_tup1.xor(test_tup2)\n    return result\n    \n    \ndef add(test_tup1, test_tup2):\n    '''\n    Write a function to perform the addition of two tuples.\n    '''\n    return test_tup1.add(test_tup2)\n    \ndef sub(test_tup1, test_tup2):\n    '''\n    Write a function to perform the subtraction of two tuples.\n    '''\n    return test_tup1.sub(test_tup2)\n    \ndef mul(test_tup1, test_tup2):\n    '''\n    Write a function to perform the multiplication of two tuples.\n    '''\n    return test_tup1.mul(test_tup2)\n    \ndef div(test_tup1, test_tup2):\n    '''\n    Write a function to perform the division of two tuples.\n    '''\n    return test_tup1.div(test_tup2)\n    \ndef mod(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulo of two tuples.\n    '''\n    return test_tup1.mod(test_tup2)\n    \ndef con(test_tup1, test_tup2):\n    '''\n    Write a function to perform the comparison of two tuples.\n    '''\n    return test_tup1.con(test_tup2)\n    \ndef raplace(test_tup1, test_tup2):\n    '''\n    Write a function to perform the right circular placement of two tuples.\n    '''\n    return test_tup1.right_circular_placement(test_tup2)\n    \ndef power(test_tup1, test_tup2):\n    '''\n    Write a function to perform the power of two tuples.\n    '''\n    return test_tup1.power(test_tup2)\n    \ndef mod_inv(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv(test_tup2)\n    \ndef mod_inv2(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv2(test_tup2)\n    \ndef mod_inv3(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv3(test_tup2)\n    \ndef mod_inv4(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv4(test_tup2)\n    \ndef mod_inv5(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv5(test_tup2)\n    \ndef mod_inv6(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv6(test_tup2)\n    \ndef mod_inv7(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv7(test_tup2)\n    \ndef mod_inv8(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv8(test_tup2)\n    \ndef mod_inv9(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv9(test_tup2)\n    \ndef mod_inv10(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv10(test_tup2)\n    \ndef mod_inv11(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv11(test_tup2)\n    \ndef mod_inv12(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv12(test_tup2)\n    \ndef mod_inv13(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv13(test_tup2)\n    \ndef mod_inv14(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv14(test_tup2)\n    \ndef mod_inv15(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv15(test_tup2)\n    \ndef mod_inv16(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv16(test_tup2)\n    \ndef mod_inv17(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv17(test_tup2)\n    \ndef mod_inv18(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv18(test_tup2)\n    \ndef mod_inv19(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv19(test_tup2)\n    \ndef mod_inv20(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv20(test_tup2)\n    \ndef mod_inv21(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv21(test_tup2)\n    \ndef mod_inv22(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv22(test_tup2)\n    \ndef mod_inv23(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv23(test_tup2)\n    \ndef mod_inv24(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two t",
        "test": "assert     bitwise_xor(('0', '1', '0'), ('1', '0', '1')) == '111'",
        "num_ids": 272,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result = []\n    for i in test_list:\n        result.append(len(i))\n    result = list(dict.fromkeys(result))\n    return result\n",
        "test": "assert     extract_freq([\"\uc548\ub155\", \"\uc548\ub155\ub9d0\", \"\ud76c\ub9dd\", \"\ud76c\ub9dd\ub098\", \"\ud76c\ub9dd\ud76c\"]) == 3",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_tuple(a,b):\n        if type(a) == tuple:\n            if type(b) == tuple:\n                return tuple(a + b for a,b in zip(a,b))\n            else:\n                return tuple([a + b for a,b in zip(a,b)])\n        else:\n            return a + b\n    return tuple([add_tuple(i,j) for i,j in zip(test_tup1, test_tup2)])\n",
        "test": "assert         add_nested_tuples(test_tup2, test_tup1) == (5, 6, 8, 9, 10)",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum=a\n    if (b<a):\n        minimum=b\n    else:\n        minimum=a\n    return minimum\n",
        "test": "assert minimum(10,10) == 10",
        "num_ids": 129,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex_list = list(tuplex)\n    for i in tuplex_list:\n        if i in tuple1:\n            return True\n        else:\n            return False\n    return False",
        "test": "assert     check_tuplex(tuplex,tuple1) == True, \"The tuple is not correct\"",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # comment out this line if you don't want it\n    # return(x%2!= 0)\n    return x%2 == 0",
        "test": "assert     find_Parity(42) == True",
        "num_ids": 134,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n[::-1]\n",
        "test": "assert     rearrange_bigger(8) == '8'",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #  sort the numbers with increasing order\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    \n    if k <= 1:\n        return 0\n    elif k == 2:\n        return 2\n    else:\n        for i in range(k):\n            if (i >= nums1.index(nums2[i])):\n                return i\n",
        "test": "assert     k_smallest_pairs([\"1\",\"1\",\"1\"],[\"1\",\"2\",\"3\"], 2) == 2",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_val = sys.maxsize\n    i = 0\n    while i < len(list1):\n        val_1 = list1[i][0]\n        val_2 = list1[i][1]\n        val_1_product = val_1*val_2\n        val_2_product = val_2*val_1\n        if val_1_product < min_val:\n            min_val = val_1_product\n            index_val_1 = i\n        if val_2_product < min_val:\n            min_val = val_2_product\n            index_val_2 = i\n        i += 1\n    return (min_val, index_val_1, index_val_2)\n",
        "test": "assert     min_product_tuple([(2,3),(3,4),(4,1)]) == (3,6)",
        "num_ids": 2567,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for i in listval:\n        min=i\n        min=min\n        return min\n",
        "test": "assert     min_val([1,2,3,4]) == 1",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_word += word[i].lower()\n        elif word[i] =='':\n            camel_word += '_'\n        elif word[i] == '-':\n            camel_word += '_-'\n        else:\n            camel_word += word[i]\n    return camel_word\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    snake_word = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            snake_word += word[i].lower()\n        elif word[i] =='':\n            snake_word += '_'\n        elif word[i] == '-':\n            snake_word += '-'\n        else:\n            snake_word += word[i]\n    return snake_word\ndef snake_to_snake_or_camel(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    snake_word = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            snake_word += word[i].lower()\n        elif word[i] =='':\n            snake_word += '_'\n        elif word[i] == '-':\n            snake_word += '-'\n        else:\n            snake_word += word[i]\n    return snake_to_camel(snake_word)\n",
        "test": "assert     snake_to_camel('foo') == 'foo'",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n",
        "test": "assert     extract_nth_element([('a', 1), ('a', 2), ('a', 3), ('b', 4), ('c', 5)], 4) == ('c', 5)",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list1 for x in list2)\n",
        "test": "assert         overlapping([1,2,3,4,5,6,7,8,9], [1,2,3]) == True",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    largest = arr[0]\n    i = 0\n    while i < len(arr):\n        if arr[i] > largest:\n            largest = arr[i]\n        i += 1\n    return (largest,i)\n",
        "test": "assert     max_Product([2,4,3,6,1,7]) == 7,'should be 7'",
        "num_ids": 214,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    d = dict() \n    for i in Input: \n        d[i[0]] = d.get(i[0], 0) + 1\n    for k, v in d.items(): \n        if v == 1: \n            return k \n",
        "test": "assert     group_tuples([(1,2),(2,3),(3,4)]) == True, 'Error : Fail'",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ = lst[0]\n    for i in lst:\n        if i > max_:\n            max_ = i\n    return max_\n",
        "test": "assert     Find_Max([0,1,2,3,4,5]) == 5, \"The function Find_Max should return 5.\"",
        "num_ids": 2311,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total = total + x\n    print(total)\n    return total\n",
        "test": "assert     round_and_sum([1, 2, 3]) == 6, \"wrong\"",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return ((n*(n+1))//2)**3\n",
        "test": "assert     cube_Sum(12) == 5512",
        "num_ids": 2151,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    s = []\n    for elt in test_tup:\n        if isinstance(elt, tuple):\n            for item in elt:\n                s.append(item)\n        else:\n            s.append(elt)\n    return tuple(s)\n",
        "test": "assert     concatenate_tuple([1,2,3]) == (1,2,3)",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = []\n    for i in range(0, n):\n        cube.append(i ** 3)\n    print(cube)\n    sum = 0\n    for i in range(0, n):\n        sum += cube[i]\n    avg = sum/n\n    return avg\n",
        "test": "assert     find_Average_Of_Cube(1) == 0, \"The function should return a single number\"",
        "num_ids": 2252,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for element in test_tuple:\n        if element.find('rear')!= -1:\n            rear.append(element[element.find('rear') + len('rear'):])\n    return tuple(rear)\n",
        "test": "assert     extract_rear(((\"Vacuum cleaners\", \"on\"),\"Vacuum Cleaners\", \"vacuum cleaners\")) == (\"on\", \"Vacuum Cleaners\")",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if (list1[i] == x):\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([1, 2, 3, 4], 2) == 1",
        "num_ids": 241,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2==1, nums)\n    \nnums = [1,2,3,4,5,6,7,8,9,10]\n",
        "test": "assert     filter_oddnumbers([]), \"The function should return an empty array\"",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = re.findall(r'\\d{2}-\\d{2}-\\d{4}', dt)\n    d = d[0] + '-' + d[1] + '-' + d[2] + '-' + d[3]\n    return d\n",
        "test": "assert     change_date_format(None) == '00-00-00'",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    if length < 2:\n        return my_list\n    mid = length // 2\n    while mid > 0:\n        for i in range(mid, length):\n            curr_val = my_list[i]\n            j = i\n            while j >= mid and my_list[j - mid] > curr_val:\n                my_list[j] = my_list[j - mid]\n                j -= mid\n            my_list[j] = curr_val\n        mid = mid // 2\n    return my_list\n",
        "test": "assert ",
        "num_ids": 2666,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n",
        "test": "assert     and_tuples(test_tup1, test_tup2) == (3, 4)",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (a ** 2) + (b ** 2) + (c ** 2)\n    x2 = 2 * (a ** 2) + (b ** 2) + (c ** 2)\n    x3 = -1 * a ** 2 - 2 * b ** 2 - 2 * c ** 2\n",
        "test": "assert     parabola_directrix(3, 4, 5) == 2*(3**2) - (4**2)",
        "num_ids": 2396,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] == list2[j]:\n            i += 1\n            j += 1\n        else:\n            return True\n    \n    return False\n",
        "test": "assert     common_element([1,2,3],[3,3,3]) == True",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1_height = (base1 + base2) / 2\n    base2_height = (base2 + base1) / 2\n    \n    if (height > base1_height and height > base2_height):\n        return base1 + ((base1_height + base2_height) / 2)\n    \n    elif (height < base1_height and height < base2_height):\n        return base2 + ((base1_height + base2_height) / 2)\n    \n    elif (height > base1_height and height < base2_height):\n        return (base1 + base2_height) / 2\n    \n    elif (height > base1_height and height > base2_height):\n        return (base2 + base1_height) / 2\n    \n    else:\n        return \"Error: Should not happen\"\n",
        "test": "assert     median_trapezium(2,2,4) == 4",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == None or len(arr) == 0:\n        return False\n    elif len(arr) == 1 and arr[0] > number:\n        return False\n    elif len(arr) == 1 and arr[0] > number:\n        return False\n    elif arr[0] > number:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_greater([1,2,3,4,5],6) == False",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if len(text) < 3:\n        return False\n    # Check if the string contains a single a or more b's\n    if 'a' in text or 'b' in text:\n        return text_match('a', text) or text_match('b', text)\n    else:\n        return False\n",
        "test": "assert     re.match(r'a\\b\\d', 'aa123') is None",
        "num_ids": 2265,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "test": "assert     last_Digit(5) == 5",
        "num_ids": 2151,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n    \ndef main():\n    print(\"Hello!\")\n    \nmain()\n",
        "test": "assert     neg_nos([1, -2, -3]) == [-2, -3]",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 1:\n            str2 += str1[i]\n    return str2\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # C1-C4: count pairs of each letter\n    # C5: Count pairs of each letter\n    # C6: Count pairs of each letter\n    # C7: Count pairs of each letter\n    # C8: Count pairs of each letter\n    # C9: Count pairs of each letter\n",
        "test": "assert     count_bidirectional(()) is None",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    return reduce(lambda x,y: str(x)+str(y), L)\n",
        "test": "assert     multiple_to_single([1,2,3,4,5,6,7,8,9]) == 29",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    match_pattern = re.compile('^(ADV|ADVI|ADVIN|ADVINI|ADVINI|ADVINILI|ADVINILI|ADVINILINI|ADVINILINI|ADVINILINILI|ADVINILINILI|ADVINILINILINI|ADVINILINILINI|ADVINILINILINILI|ADVINILINILINILINI|ADVINILINILINILINI|ADVINILINILINILINILI|ADVINILINILINILINILINI|ADVINILINILINILINILINI|ADVINILINILINILINILINI|ADVINILINILINILINILINILI|ADVINILINILINILINILINILINI|ADVINILINILINILINILINILINILI)$', re.IGNORECASE)\n    matches = match_pattern.findall(text)\n    if matches:\n        return matches[0], matches[1]\n    return None, None\n",
        "test": "assert     find_adverb_position('That is an adverb. It is not an adverb, but rather the fact that it is indeed a adverb') == 1",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l**3)*(3.1416)\n",
        "test": "assert     surfacearea_cube(5) == 13",
        "num_ids": 151,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for item in nums:\n        if item > 0:\n            count += 1\n    return count/len(nums)\n",
        "test": "assert     positive_count([-5, 2, 3, 4, -1]) == [-5, 2, 3, 4], 'incorrect'",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #print(list1)\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n    #print(list1)\n    return max(list1)\n",
        "test": "assert ",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # E.g.:\n    # test_list = [('a', 'b', 'c'), ('d', 'e', 'f')]\n    # K = 3\n    # result = ['a', 'd', 'e', 'f']\n    # return result\n",
        "test": "assert     trim_tuple([1, 2, 3, 4], 2) == (1, 2)",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tuple = ()\n    for index in test_tup1:\n        result_tuple += (index * test_tup2[index])\n",
        "test": "assert ",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    return c.update(tup)\n",
        "test": "assert     count_Occurrence([1, 2, 3, 4, 5, 6, 1], [1, 2, 3, 4, 5, 6]) == 3, \"Number of occurences should be 3\"",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [num ** 3 for num in nums]\n    return cubes\n",
        "test": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 354,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "test": "assert     cal_sum(5) == 15",
        "num_ids": 130,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    word_list = []\n    for s in str:\n        if s in word_list:\n            word_list.remove(s)\n        else:\n            word_list.append(s)\n    word_list = ''.join(word_list)\n    print(word_list)\n    \n    return word_list\n    \ndef main():\n    #take user input\n    \n    #split input into list of words\n    str = input('Enter a string of words separated by spaces: ').split()\n    \n    #join each word with spaces, then print\n    print(extract_string(str, [' ', 'a', 'b', 'c']))\n    \nif __name__ == \"__main__\":\n    main(",
        "test": "assert     extract_string(['1', '2', '1'], 3) == '1'",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.replace('\\t', '').replace('\\n', '').replace('\\r', '').replace('  ', '')\n    text3 = re.sub(\" +\", \" \", text2)\n    return text3\n",
        "test": "assert     remove_whitespaces(\"\") == \"\", \"The function remove_whitespaces should return the empty string\"",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost\n",
        "test": "assert     loss_amount(2,3)==0",
        "num_ids": 191,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if(n == 1) : \n        return 1\n    else : \n        if(n%2 == 0) : \n            return sumofFactors(n/2) \n        else : \n            return (n*sumofFactors(n-1)) \n",
        "test": "assert     sumofFactors(3) == 3",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return text.lower().count('z')>0\n",
        "test": "assert     text_match_wordz(\"\") == 0",
        "num_ids": 253,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    elif monthnum2 == 1:\n        if 0 < monthnum2 <= 2:\n            return True\n        else:\n            return False\n    elif monthnum2 == 2:\n        if 0 < monthnum2 <= 3:\n            return True\n        else:\n            return False\n    elif monthnum2 == 3:\n        if 0 < monthnum2 <= 4:\n            return True\n        else:\n            return False\n    elif monthnum2 == 4:\n        if 0 < monthnum2 <= 5:\n            return True\n        else:\n            return False\n    elif monthnum2 == 5:\n        if 0 < monthnum2 <= 6:\n            return True\n        else:\n            return False\n    elif monthnum2 == 6:\n        if 0 < monthnum2 <= 7:\n            return True\n        else:\n            return False\n    elif monthnum2 == 7:\n        if 0 < monthnum2 <= 8:\n            return True\n        else:\n            return False\n    elif monthnum2 == 8:\n        if 0 < monthnum2 <= 9:\n            return True\n        else:\n            return False\n    elif monthnum2 == 9:\n        if 0 < monthnum2 <= 10:\n            return True\n        else:\n            return False\n    elif monthnum2 == 10:\n        if 0 < monthnum2 <= 11:\n            return True\n        else:\n            return False\n    elif monthnum2 == 11:\n        if 0 < monthnum2 <= 12:\n            return True\n        else:\n            return False\n",
        "test": "assert ",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = list(stringlist)\n    stringlist.reverse()\n    return stringlist\n",
        "test": "assert     reverse_string_list([]) == [], \"Empty list\"",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if lst == []:\n        return []\n    else:\n        lst = sorted(lst)\n        count = 0\n        min_index = 0\n        for index in range(1, len(lst)):\n            if lst[index][0] < lst[min_index][0]:\n                min_index = index\n                count += 1\n        if count == 0:\n            return []\n        else:\n            return lst[min_index]\n",
        "test": "assert     Find_Min([])==[]",
        "num_ids": 2320,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(3,4) == 12",
        "num_ids": 80,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    while True:\n        try:\n            pattern = r\"[A-Z]\"\n            return re.sub(pattern, \"\", str1)\n        except re.error as e:\n            print(e)\n            exit()\n",
        "test": "assert     remove_uppercase('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'",
        "num_ids": 243,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for item in lst:\n        if len(item)==0: return None\n        else:\n            lst.pop()\n            lst.append(item[0])\n    return lst[0]\n    \ndef Check_Character(lst,char):\n    '''\n    Check if the character is a string.\n    '''\n    for item in lst:\n        if item!=char:\n            return False\n    return True\n",
        "test": "assert     Extract([[1, 2, 3, 4, 5]]) == 1",
        "num_ids": 205,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    #'capitalize()' is used to change the text to uppercase and print it\n    print(str.upper())\n    \n    #Convert string to lowercase\n    str = str.lower()\n    \n    #Convert lowercase to upper\n    str = str.upper()\n    \n    #Convert to lowercase and print\n    print(str)\n    \n    #Convert to uppercase and print\n    print(str.upper())\n    \nupper_ctr('hello')\nupper_ctr('world')\nupper_ctr('World')\nupper_ctr('Hello')\nupper_ctr('Hello World')\nupper_ctr('HEL')\nupper_ctr('Hello World')\nupper_ctr('Hello He Lorld')\nupper_ctr('hello world')\nupper_ctr('hello World')\nupper_ctr('HELLO')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORL",
        "test": "assert     upper_ctr(\"Hi\") == 3",
        "num_ids": 2146,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Base case\n    if len(list1) == 0:\n        return []\n    # Base case\n    if len(list1) == 1:\n        return [list1]\n    else:\n        # Find all combinations in a list\n        combo_list = []\n        for i in range(len(list1)):\n            combo_list += combinations_list(list1[:i] + list1[i + 1:])\n        return combo_list\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_subarr = arr[0]\n    for i in range(1, n):\n        max_subarr = arr[i] * max(arr[i-1], arr[i-1] * arr[i])\n    return max_subarr\n",
        "test": "assert     max_subarray_product([]) == 0",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    if len(dict) == 0:\n        return False\n    elif n > len(dict):\n        return False\n    elif n < len(dict):\n        if '_' not in dict.keys():\n            return False\n        else:\n            return True\n    else:\n        return True\n    \n    \n",
        "test": "assert     check_value({1:3, \"a\":1, \"b\":1}, 2) == False",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    del_items = []\n    for i in dict1:\n        if dict1[i] == '':\n            del_items.append(i)\n    for i in del_items:\n        dict1.pop(i)\n    return dict1\n",
        "test": "assert     drop_empty([]) == [], 'Error: This test should fail'",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    curr_sum = arr[0]\n    curr_product = arr[0]\n    for i in range(1,len(arr)):\n        curr_sum = max(curr_sum*arr[i],arr[i])\n        curr_product = max(curr_product*arr[i],arr[i])\n    return curr_product\n",
        "test": "assert     max_product([1,3,5]) == 15",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n",
        "test": "assert     add_pairwise((1, 2)) == (2, 3), \"add_pairwise() should return (1, 3)\"",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if (arr[0] == 0):\n        return 1\n    mod = arr[0]\n    for i in range(1, len(arr)):\n        mod = mod * arr[i] % n\n    return mod\n",
        "test": "assert ",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # you need to create a for loop to traverse the list using the for loop\n    # it has a size of n - 1\n    \n    i = 0\n    # your code should go here\n",
        "test": "assert ",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #create an empty list\n    list_of_tuples = []\n    #iterate through tuple1 list\n    for item in test_list1:\n        #add tuple of test_list1 to list_of_tuples\n        list_of_tuples.append(item)\n    #iterate through tuple2 list\n    for item in test_list2:\n        #add tuple of test_list2 to list_of_tuples\n        list_of_tuples.append(item)\n    #iterate through list_of_tuples to get the intersection of the tuples\n    new_tuple = list_of_tuples[0]\n    for item in list_of_tuples[1:]:\n        #get the intersection of the tuples\n        new_tuple = tuple(set(new_tuple).intersection(set(item)))\n    return new_tuple\n    ",
        "test": "assert     tuple_intersection([1,2,3], [4,5,6],) == [4,5], \"Tuple Intersection test failed\"",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    print(str1)\n    print(ch)\n    print(newch)\n    str1 = str1.replace(ch,newch)\n    print(str1)\n    \n    return str1\n    \ndef main():\n    print('Hello, world!')\n    str1 = \"Python is a programming language.\"\n    print(str1)\n    \n    print('1. string to lower')\n    str1 = \"Hello, World\"\n    print(str1.lower())\n    print('2. string to upper')\n    str1 = \"HELLO, WORLD\"\n    print(str1.upper())\n    print('3. string to title')\n    str1 = \"Hello, World\"\n    print(str1.title())\n    print('4. string to swap case')\n    str1 = \"Hello, World\"\n    print(str1.swapcase())\n    print('5. string to title, capitalize')\n    str1 = \"Hello, World\"\n    print(str1.title(), \"Capitalized\")\n    str1 = \"Hello, World\"\n    print(str1.capitalize())\n    str1 = \"Hello, World\"\n    print(str1.upper())\n    str1 = \"Hello, World\"\n    print(str1.lower())\n    str1 = \"Hello, World\"\n    print(str1.title())\n    str1 = \"Hello, World\"\n    print(str1.swapcase())\n    str1 = \"Hello, World\"\n    print(str1.title(), \"Capitalized\")\n    str1 = \"Hello, World\"\n    print(str1.swapcase(), \"Swapped\")\n    print(str1.title(), \"Title\")\n    str1 = \"Hello, World\"\n    print(str1.swapcase(), \"Title\")\n    str1 = \"Hello, World\"\n    print(str1.upper(), \"Upper\")\n    str1 = \"Hello, World\"\n    print(str1.lower(), \"Lower\")\n    str1 = \"Hello, World\"\n    print(str1.lower(), \"LOWER\")\n    \n    #new_str = replace_char('this is a string','b','a')\n    #print(new_str)\n    \n    #print('1234567890')\n    \n    #print('1234567890')\n    #str1 = \"1234567890\"\n    #print(str1)\n    #str1 = str1.split(\" \")\n    #print(str1)\n    #print(type(str1))\n    \n    #print('1234567890')\n    #str1 = str1.join(\" \")\n    #print(str1)\n    #print(type(str1))\n    \n    #replace_char('1234567890','.','. ')\n    #print(str1)\n    \nif __name__ == \"__main__\":\n    main()",
        "test": "assert     replace_char(ch='a',newch='c',str1='jedno') == 'jednoa', 'The replace_char function should return the correct value'",
        "num_ids": 955,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(),key=lambda item: item[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert     sort_counter({'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd'}) == {'d': 'd', 'c': 'c', 'b': 'b', 'a': 'a'}",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Write your code here\n    return string.lower()\n",
        "test": "assert     is_lower('Hello world!')",
        "num_ids": 108,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Your code here\n    l = list(str1)\n    str2 = ''.join(l)\n    return str2\n",
        "test": "assert     remove_lowercase('E' * 40) == 'E' * 40, 'test is incorrect'",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert         first_Digit(11) == 1",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Write your code here\n    result=[]\n    for i in list:\n        if i%2!=0:\n            result.append(i)\n    return result\n",
        "test": "assert     Split([]) == [], \"Empty list is not of length 7\"",
        "num_ids": 245,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    return sum\n",
        "test": "assert     difference(1) == 0",
        "num_ids": 163,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        if (A[i] ^ 1) % 2 == 1 :\n            count += 1\n    return count\n",
        "test": "assert     find_Odd_Pair(A,N) == 3, 'test failed'",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # create a blank string\n    new_string = ''\n    # make sure the string is of length 2 or greater\n    if len(string) > 2:\n        # if the length is greater than 2\n        if len(string) % 2 == 0:\n            # split the string into an array\n            split_list = string.split(' ')\n            # use a for loop to iterate through each element\n            # split the string into a list\n            # use a for loop to iterate through each element\n            # split the list into an array\n            for letter in split_list:\n                # if the letter is equal to the letter in the original string\n                if letter == string:\n                    # swap the first letter with the second\n                    # letter in the array\n                    new_string += string[0] + string[1]\n                # if the letter is not equal to the letter in the original string\n                else:\n                    # add the letter to the array\n                    new_string += letter\n            # convert the array to a string\n            new_string = new_string.replace(' ', '')\n            # return the result\n            return new_string\n        # if the length is not 2\n        else:\n            # convert the string to an array\n            split_list = string.split(' ')\n            # convert the string array to an array\n            new_string = ''.join(split_list)\n            # convert the array to a string\n            new_string = new_string.replace(' ', '')\n            # return the result\n            return new_string\n    else:\n        # return the string\n        return string\n",
        "test": "assert     toggle_string(\"Hi\") == \"Hi\"",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # check all the numbers in the sequence\n    nums = list(range(10))\n    nums[n1-1] = 0\n    nums[n2-1] = 0\n    total = 0\n    # use a for loop to iterate\n    # nums[i] is the current digit of n1\n    # nums[i] is the current digit of n2\n    for num in nums:\n        # if num is even, we add it to the sum\n        # otherwise we subtract it\n        # and we add one to the sum\n        # if the sum is 0, then it's not a digit\n        total += num if num % 2 == 0 else -num\n    return total\n",
        "test": "assert digit_distance_nums(2, 5) == 0, \"Test 2 failed\"",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #Your code here\n    n=size\n    c=0\n    sum=0\n    l=[]\n    for i in range(n):\n        l.append(a[i])\n    l.sort()\n    for i in range(n-1, -1, -1):\n        c=0\n        for j in range(i+1):\n            if j==i or a[i]>a[j]:\n                c+=1\n        if c==0:\n            sum=sum+a[i]\n        else:\n            sum=max(sum,a[i])\n    return sum",
        "test": "assert     max_sub_array_sum([0, -1, 0, 1], 1) == 0",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #sorted(test_tup1)\n    return test_tup1 + test_tup2\n",
        "test": "assert     union_elements((1,2,3), (5,6,7)) == (1,2,3,5,6,7)",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # find the max of lst and conquer it\n    def findMaxLength(lst):\n        \"\"\"\n        This function is given a list of length 1 and 1.\n        The function returns the length of the longest sublist\n        where the length is in 1\n        \"\"\"\n        if len(lst) == 0:\n            return 0\n",
        "test": "assert     Find_Max_Length(lst) == 5",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    def extract_values_2(s):\n        '''\n        Extracts values between quotation marks from a string.\n        '''\n        return [match.group(1) for match in re.finditer(r\"(?<=[^'\\\" \\n])'(.+)'(?=[^'\\\" \\n])\", s)]\n    \n    values = extract_values_2(text)\n    return values\n",
        "test": "assert     extract_values('hello world') == 'hello world'",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(len(arr)-1):\n        if arr[i]!=arr[i+1]:\n            count+=1\n    return count\n",
        "test": "assert     count_Pairs([1,2,3,3],1) == 2",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ')\n",
        "test": "assert     split(\"sadf\") == [\"sadf\"]",
        "num_ids": 241,
        "indeed": false
    },
    {
        "number": 566,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "test": "assert     sum_digits(1) == 1",
        "num_ids": 187,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0, len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([\"b1\", \"b2\", \"b3\", \"b4\", \"b5\"]), \"Test failed\"",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(0,length)]\n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 140,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sub_lists = []\n    for i in range(len(list1)):\n        sub_lists.append(list1[i])\n    return sub_lists\n",
        "test": "assert     sort_sublists([['a', 'b', 'c'], ['e', 'f', 'g'], ['i', 'j', 'k']]) == [['a', 'b', 'c'], ['e', 'f', 'g'], ['i', 'j', 'k']]",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Write your code here\n    import collections\n    set_nums = collections.Counter(nums)\n    return [x for x in nums if set_nums[x] == 1]\n",
        "test": "assert ",
        "num_ids": 176,
        "indeed": true
    },
    {
        "number": 573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product=1\n    for i in list_data:\n        product *= i\n    return product\n",
        "test": "assert     unique_product([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "num_ids": 2257,
        "indeed": false
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    a=3.14*h/2\n    return math.pi*r**2*h\n",
        "test": "assert     surfacearea_cylinder(1.0,1.0) == 0.0",
        "num_ids": 167,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    isSubList = True\n    if len(B) == len(A) and len(A) == 1:\n        isSubList = False\n    return isSubList\n",
        "test": "assert     is_Sub_Array([2,3,4,5], [2,2,2,2]) == True",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    digits = [] \n    i = 1 \n    while n > 0: \n        n, i = n // 10, n % 10 \n        digits.append(i) \n    return digits[-1]\n",
        "test": "assert     last_Digit_Factorial(56) == 120",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)==len(list2) and len(list1)==len(list3):\n        result=[]\n        for i in list1:\n            result.append(i)\n        for i in list2:\n            result.append(i)\n        for i in list3:\n            result.append(i)\n        return result\n    return list3\n",
        "test": "assert     interleave_lists([1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1_index, test_tup1_value = test_tup1\n    test_tup2_index, test_tup2_value = test_tup2\n    if test_tup1_value == test_tup2_value:\n        return None\n    if test_tup1_value == None or test_tup2_value == None:\n        return None\n    if test_tup1_value == '':\n        return None\n    if test_tup2_value == '':\n        return None\n    if test_tup1_value[0] == test_tup2_value[0]:\n        if test_tup1_index < test_tup2_index:\n            return (test_tup1_index, test_tup1_value)\n        else:\n            return (test_tup2_index, test_tup2_value)\n    if test_tup1_value[0]!= test_tup2_value[0]:\n        if test_tup1_index < test_tup2_index:\n            return (test_tup1_index, test_tup1_value)\n        else:\n            return (test_tup2_index, test_tup2_value)\n    if test_tup1_value[1] == test_tup2_value[1]:\n        if test_tup1_index < test_tup2_index:\n            return (test_tup1_index, test_tup1_value)\n        else:\n            return (test_tup2_index, test_tup2_value)\n    if test_tup1_value[1]!= test_tup2_value[1]:\n        if test_tup1_index < test_tup2_index:\n            return (test_tup1_index, test_tup1_value)\n        else:\n            return (test_tup2_index, test_tup2_value)\n",
        "test": "assert         find_dissimilar((\"A\", \"A\"), (\"A\", \"C\")) == (\"A\", \"C\")",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd = list(map(lambda x: list(x), test_tuple))\n    odd.sort()\n    odd_index = []\n    even_index = []\n    even_index.append(odd[0][0])\n    for i in range(1, len(odd)):\n        if odd[i][0]!= even_fnc(odd[i-1][0], odd[i][0]):\n            even_index.append(odd[i][0])\n    for i in range(0, len(even_index)):\n        if even_fnc(odd[0][0], even_index[i]) == odd_fnc(odd[-1][0], even_index[i]):\n            odd[0][0] = even_fnc(odd[0][0], even_index[i])\n        else:\n            odd[-1][0] = even_fnc(odd[-1][0], even_index[i])\n            odd[0][0] = odd[0][0]\n    even = list(map(lambda x: x[0], odd))\n    odd.clear()\n    even.clear()\n    return odd, even\n",
        "test": "assert     even_ele([(1,2),(2,3),(3,4),(4,5)], odd_fnc) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*(s/4)+b*(s/4)*(s/4-1)+b*(s/4)*(s/4-1)*(s/4-1)\n",
        "test": "assert     surface_Area(5,5) == 8, 'check the correctness of surface_Area'",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == []:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({}) == {}",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 583,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    total = 1\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        for i in range(num - 1):\n            total *= i + 1\n        return total\n",
        "test": "assert         catalan_number(0) == 1",
        "num_ids": 2228,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    global adverbs\n    if adverbs == []:\n        adverbs = []\n        \n        for i in range(len(text) - 1):\n            if (text[i] == 'ly' and text[i + 1] == 'y'):\n                adverbs.append(i + 1)\n                adverbs.append(i + 2)\n                adverbs.append(i + 3)\n    return adverbs\n",
        "test": "assert     find_adverbs(\"/Slime/ or/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/ not/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/ and/",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_heap = []\n    for i in range(n):\n        items_heap.append((items[i][1],items[i][0]))\n    items_heap = sorted(items_heap,reverse = True)\n    heapq.heapify(items_heap)\n    print(items_heap)\n    return items_heap[:n]\n    \ndef expensive_items_2(items,n):\n    '''\n    This function is to find the n most expensive items in a given dataset.\n    '''\n    items_heap = []\n    for i in range(n):\n        items_heap.append((items[i][1],items[i][0]))\n    items_heap = sorted(items_heap,reverse = True)\n    heapq.heapify(items_heap)\n    print(items_heap)\n    return items_heap[:n]\n",
        "test": "assert     expensive_items([],0) == []",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n",
        "test": "assert     split_Arr(['a', 'b', 'c'], 2) == ['a', 'b', 'c']",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1,2,3]) == (1,2,3)",
        "num_ids": 176,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    list_nums = list(nums)\n    list_nums.sort()\n    nums_len = len(nums)\n    list_nums_diff = []\n    for i in range(nums_len):\n        list_nums_diff.append(list_nums[i] - list_nums[i - 1])\n    return max(list_nums_diff)\n",
        "test": "assert     big_diff([1,5,9,8,3]) == 3, 'bad result'",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return int(a**2 + b**2",
        "test": "assert     perfect_squares(4, 5) == 8",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    # Calculate azimuth and latitude of polar coordinate\n    r = cmath.sqrt(x**2 + y**2)\n    azimuth = cmath.atan2(y,x)\n",
        "test": "assert     polar_rect(1,0) == (1,0)",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.insert(0, newList.pop())\n    newList.insert(len(newList), newList.pop())\n    return newList\n",
        "test": "assert     swap_List([\"a\", \"b\", \"c\", \"d\"]) == [\"c\", \"d\", \"b\", \"a\"]",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if k == 0:\n        return n\n",
        "test": "assert     binomial_Coeff(5,3) == 0.25, \"binomial_Coeff(5,3) should equal 0.25.\"",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    for i in range(len(ip)):\n        if ip[i] == '0' and ip[i - 1]!= '0':\n            ip = ip[:i] + '0' + ip[i:]\n    return ip\n",
        "test": "assert     removezero_ip('123.123.1.1') == '123.123.1.1'",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    x = 0\n    y = 0\n    z = 0\n    while x < len(list1):\n        if list1[x] % 2 == 0:\n            y += 1\n        elif list1[x] % 2 == 1:\n            z += 1\n        x += 1\n    return y, z\n",
        "test": "assert     diff_even_odd([3, 1, 4, 5, 2]) == 5",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    i,j,k = 0,0,0\n    s1 = \"\"\n    s2 = \"\"\n    while i < n:\n        if str1[i] == str2[j]:\n            s1 += str1[i]\n            s2 += str2[j]\n            k = 1\n        elif str1[i]!= str2[j]:\n            s1 += str1[i]\n            s2 += str2[j]\n            i += 1\n        else:\n            i += 1\n        if k == n-1:\n            print(s1,s2)\n            break\n    return int(s1+s2)\n",
        "test": "assert ",
        "num_ids": 2510,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list[0])\n",
        "test": "assert     tuple_size((1,2,3,4)) == 4, 'wrong size'",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    # find index of kth element\n    return arr1[n1 - k] if k < n1 else arr2[n2 - k]\n",
        "test": "assert     find_kth(a,b,k) == 3",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_lst = list(str(number))\n    num_lst = [int(n) for n in num_lst]\n    check = [0 for i in range(len(num_lst))]\n    for i in range(len(num_lst)):\n        for j in range(i+1):\n            check[i] += num_lst[j]**j\n    result = True\n    for i in range(len(num_lst)):\n        if num_lst[i] == check[i]:\n            result = False\n    return result\n",
        "test": "assert     armstrong_number(1000) == False, 'armstrong_number should be False'",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    #base case\n    if number == 0:\n        return 0\n    \n    #recursive case\n    if number == 1:\n        return number\n    \n    #base case\n    if number == 2:\n        return number\n    \n    #recursive case\n    if number % 2 == 0:\n        return number + sum_average(number-1)\n    \n    #recursive case\n    return sum_average(number-1) + number\n    \n    #run sum_average once and store as a variable\n    #keep running until we reach 1\n    \n    #return sum_average(number-1) + number\n",
        "test": "assert     sum_average([1,2,3,4,5]) == 5, \"sum_average(5)\"",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        print(\"{} is even\".format(n))\n    else : \n        print(\"{} is not even\".format(n)) \n",
        "test": "assert     is_Even(0) == False",
        "num_ids": 151,
        "indeed": false
    },
    {
        "number": 602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    import string\n    chars = list(string.ascii_lowercase)\n    rep = []\n    for i in str1:\n        if i in chars:\n            rep.append(i)\n    return rep[0]\n",
        "test": "assert     first_repeated_char('abc') == 'c'",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if i < 5:\n            ludic.append(i)\n        else:\n            if i < 10:\n                ludic.append(5 - i)\n            else:\n                ludic.append(6 - i)\n    return ludic\n",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 234,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_by_space(s):\n        r=\"\"\n        for i in range(len(s)):\n            if s[i]==\" \":\n                r=r[::-1]\n            r+=s[i]\n        return r\n    \n    return reverse_by_space(s)\n",
        "test": "assert     reverse_words(\"\") == '', \"Empty input\"",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(2) == True",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree *(math.pi/180)\n",
        "test": "assert     radian_degree(0) == 0.0",
        "num_ids": 151,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_pattern = re.compile(pattern)\n    result = pattern_pattern.finditer(text)\n    for i, match in enumerate(result):\n        start, end = match.span()\n        yield text[start:end]\n",
        "test": "assert     find_literals('''the quick brown fox jumps over the lazy dog.''', 'the quick brown fox jumps over the lazy dog. fasta') == (0, 4, 10)",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n%2==0:\n        return bell_Number(n/2)+1\n    else:\n        return (bell_Number(n/2)+2)*2\n    \ndef nth_bell_Number(n): \n    '''\n    Write a python function to calculate nth bell number.\n    '''\n    return (bell_Number(n-1)+bell_Number(n/2))*2\n",
        "test": "assert     bell_Number(0) == 1",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L is None or len(L) == 0:\n        return []\n",
        "test": "assert     remove_kth_element([\"a\", \"b\", \"c\", \"d\"], 0) == [\"b\", \"c\", \"d\"], \"The function is incorrect\"",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 1:\n        return test_list[0][0]\n",
        "test": "assert     max_of_nth([[10, 10, 20, 10], [10, 10, 30, 10], [20, 10, 30, 20], [30, 30, 30, 50]], 1) == 10",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return lst\n        #TODO:\n        #1. If there are no sublists, return the original list.\n        #2. If there is one sublist, the function returns the result of the original sublist and adds that sublist to the result list.\n        #3. If there are two sublists, the function returns the result of the sublist and adds it to the result list.\n",
        "test": "assert     merge([[1,2,3,4,5,6], [1,2,3,4,5,6]]) == [[1,2,3,4,5,6], [1,2,3,4,5,6]], \"A function should return a list of lists\"",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for item in test_list:\n        sum += item\n    return sum\n    \nprint(cummulative_sum((0,1,2,3,4,5)))\nprint(cummulative_sum((1,2,3,4,5,6,7,8,9)))\n",
        "test": "assert     cummulative_sum([]) == 0",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    def average(num1, num2):\n        num1 = sum(num1)\n        num2 = sum(num2)\n        return (num1/num2)\n    average_tuple = [(average(num1, num2), num1) for num1 in nums for num2 in nums]\n    return average_tuple\n",
        "test": "assert     average_tuple([]) == []",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return test_tup1[0] % test_tup2[0] == test_tup1[1] % test_tup2[1]\n",
        "test": "assert         tuple_modulo((1, 2), (1, 4)) == (1, 2)",
        "num_ids": 2225,
        "indeed": false
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Find the value for the minimum number of jumps required\n    for i in range(steps + 1):\n        if i > d:\n            return i\n    # If no jumps are required, return zero\n    return 0\n",
        "test": "assert     min_Jumps(1, 0) == 1",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # get the length of two lists\n    len1 = len(nums1)\n    len2 = len(nums2)\n    \n    # use stack to keep track of the number of elements in each list.\n    stack = []\n    \n    # initialize the stack to contain the top element of each list\n    # make sure each stack has length 1.\n    # when stack is empty, return (None,None)\n    while stack or len(nums1):\n        while len(stack)>0 and nums1[stack[-1]]<nums2[stack[-1]]:\n            top = stack.pop()\n            nums1[top] = nums1[top]//nums2[stack[-1]]\n        stack.append(nums1.pop(0))\n    return (nums1,nums2)\n",
        "test": "assert ",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    my_str = ''\n    for i in range(0, len(test_str)):\n        if test_str[i].isdigit():\n            my_str += test_str[i]\n        else:\n            if my_str!= '':\n                my_str += str(test_str[i])\n            else:\n                my_str = str(test_str[i])\n    return my_str\n",
        "test": "assert     move_num('a') == 'a'",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    numbers = set(a)\n    s = 1\n    for x in numbers:\n        if len(numbers)%2 == 0:\n            s+=1\n            if s > x:\n                return s\n        else:\n            s+=1\n    return s\n",
        "test": "assert     largest_subset([3,2,3]) == 3",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise TypeError(\"the lists must be same size\")\n    if n % 2 == 0:\n        return (arr1[int(n / 2)] + arr2[int(n / 2)]) / 2\n    else:\n        return arr1[int(n / 2)]\n",
        "test": "assert     get_median([2, 2, 2, 2, 2], [1, 2, 3, 4, 5], 4) == 2.5",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.sort()\n",
        "test": "assert     nth_nums(nums=[5,10,15,20,25],n=3) == [5,10,15,50,100]",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 624,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == \"\":\n        return False\n    if string == string.upper() or string == string.lower():\n        return True\n    return False\n",
        "test": "assert     is_upper('A') is True",
        "num_ids": 158,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    i = 0\n    j = 0\n    tempList = []\n    tempList = newList[:]\n    # print(tempList)\n    \n    while (i < len(tempList)):\n        j = i\n        if (tempList[i] == 'd'):\n            tempList[i], tempList[j] = tempList[j], tempList[i]\n        i = i + 1\n    \n    # print(tempList)\n    return tempList\n",
        "test": "assert     swap_List([4,5,6]) == [4,5,6]",
        "num_ids": 1954,
        "indeed": false
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s1 = math.sin(math.radians(angle))\n    s2 = math.sqrt(1-s1*s1)\n    s3 = math.sqrt(1-s2*s2)\n    \n    if r == 1:\n        return (math.pi*(s3*3)/4)\n    elif r == 2:\n        return (math.pi*(s1*3)/4)\n    elif r == 3:\n        return (math.pi*(s2*3)/4)\n    elif r == 4:\n        return (math.pi*(s3*3)/4)\n    \n    #raise NotImplementedError('this is not implemented yet')\n",
        "test": "assert ",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>=end:\n        return -1\n    \n    l=0\n    r=len(array)-1\n",
        "test": "assert     find_First_Missing([5, 1, 4, 2, 5, 6, 7, 3, 5, 6, 7, 4, 3, 1, 2, 5]) == 6,'should be 6'",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "test": "assert     replace_spaces(\"The quick brown fox jumps over the lazy dog\") == \"The%20quick%20brown%20fox%20jumps%20over%20the%20lazy%20dog\"",
        "num_ids": 225,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [num for num in list if num % 2 == 0]\n",
        "test": "assert     Split([]) == []",
        "num_ids": 184,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # if the given coordinate is a tuple then recursively call the recursively call for all adjacent coordinates\n    if type(ele) == tuple:\n        for i in ele:\n            sub.append(i)\n            adjac(i, sub)\n        return sub\n    else:\n        return sub\n",
        "test": "assert     adjac(adjac, (1, 2, (1, 2))) ==     ((0, 2), (0, 0), (0, 1), (0, 2))",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for ch in text:\n        if ch =='':\n            result += '_'\n        elif ch == '\\n':\n            result += '_'\n        else:\n            result += ch\n    return result\n",
        "test": "assert replace_spaces(\"one _two\") == \"one _two\"",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num == 0:\n            new_list.append(num)\n        else:\n            new_list.append(num)\n    return new_list\n",
        "test": "assert     move_zero(test_list) == ['1', '0', '2', '3', '4']",
        "num_ids": 2788,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # total of all xor of all elements in the given list\n    total = 0\n    # for every element\n    for i in arr :\n        # for every pair of xor values\n        for j in arr :\n            # xor the two values and get the sum of xor\n            total = total ^ j ^ i\n    # return sum of xor of all pairs\n    return total\n",
        "test": "assert     pair_xor_Sum([],0) == 0",
        "num_ids": 2366,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list()\n    for elt in iterable:\n        if len(heap) < 2:\n            heapq.heappush(heap, elt)\n        else:\n            heapq.heappushpop(heap, elt)\n    return heap\n",
        "test": "assert     heap_sort([]) == []",
        "num_ids": 2288,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        print(\"Pay not available.\")\n        return 1\n    else:\n        return 0\n",
        "test": "assert     noprofit_noloss(8,55) == False",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_temp = (v*9/5) + 32\n    wind_chill_index = round(wind_chill_temp,2)\n    return wind_chill_index\n",
        "test": "assert ",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_list = []\n    for name in sample_names:\n        sample_list.append(name.replace('c','e').replace('e','c'))\n    #print(sample_list)\n    return len(sample_list)\n    \n    #print(sample_list)\n    \ndef main():\n    '''\n    Main function. The student needs to know the program's name.\n    '''\n    sample_name = input('Please enter the name of the student: ')\n    #print(sample_name)\n    #sample_name = 'Willie'\n    \n    print('Sample nam: ',sample_nam(sample_name))\n    print('Total Samples: ',sample_nam(sample_names))\n    #print(sample_names)\n",
        "test": "assert     sample_nam([]) == 0",
        "num_ids": 2268,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res = []\n    for item in items:\n        if item[0] == \"(\" and item[-1] == \")\":\n            res.append(item[1:-1])\n        else:\n            res.append(item)\n    return res\n",
        "test": "assert     remove_parenthesis('(a)'),     [('a')]",
        "num_ids": 2245,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    for i in range(n):\n        if n-i==1:\n            return 2\n        if n-i==2:\n            return 3\n        if n-i==3:\n            return 4\n    if n%2==1:\n        return 3\n    else:\n        return 4\n",
        "test": "assert     is_nonagonal(9) is False",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace(' ', '')\n    text_wordz_middle = re.compile(r'z')\n    text_middle_end = re.compile(r'z\\d*\\d')\n    if text_wordz_middle.search(text):\n        return False\n    if text_middle_end.search(text):\n        return False\n    return True\n",
        "test": "assert     text_match_wordz_middle('aab')==True",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_array = []\n    size = len(input)\n    for i in range(size):\n        reverse_array.append(input[size-i-1])\n    for i in range(size//2):\n        reverse_array.insert(0, reverse_array.pop())\n    for i in range(k):\n        reverse_array.append(reverse_array.pop(0))\n    return reverse_array\n",
        "test": "assert     reverse_Array_Upto_K(input=[[0,1,2],[3,4,5],[6,7,8]], k=2) == [6,7,8,0,1,2]",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup += (key, test_dict[key])\n    return test_tup\n",
        "test": "assert     add_dict_to_tuple(test_tup, test_dict) == (1,2,3,4,5)",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # check if input is valid\n    if not cost:\n        return 0\n",
        "test": "assert     maxAverageOfPath(cost=[]) == 0",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {}\n    for student in students:\n        student_height, student_weight = students[student]\n        if student_height >= h and student_weight >= w:\n            filtered_data[student] = students[student]\n    return filtered_data\n",
        "test": "assert     filter_data({'jim':(2,3),'kamala':(4,5),'lennon':(6,7),'james':(7,8)},2,5),'should be false'",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count_dict = {}\n    for i, item in enumerate(nums1):\n        if item in count_dict:\n            count_dict[item] = count_dict[item] + 1\n        else:\n            count_dict[item] = 1\n    for i, item in enumerate(nums2):\n        if item in count_dict:\n            count_dict[item] = count_dict[item] + 1\n        else:\n            count_dict[item] = 1\n    for k, v in count_dict.items():\n        if v == 1:\n            return k\n",
        "test": "assert     count_same_pair([1, 1, 3, 3, 4, 4, 4, 5], [2, 2, 3, 3, 4, 4, 5]) == 5",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    power_str = str(power)\n    if len(base_str) > len(power_str):\n        return 0\n    sum = 0\n    for i in range(len(base_str)):\n        sum = sum + int(base_str[i]) * (10 ** i)\n    return sum\n",
        "test": "assert     power_base_sum(2, 2) == 2",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = re.sub(r'\\s{2,}','', text1)\n    \n    return text1.replace('\"', '').replace(\"'\", \"\").strip().lower()\n",
        "test": "assert     extract_quotation(' \"AaaaAaAaaA\" ') == 'AaaaAaAaaA'",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    result = ()\n    for i in range(len(test_tup) - 1):\n        result = result + (test_tup[i] * test_tup[i + 1])\n    return result\n",
        "test": "assert     multiply_elements((1,2,3,4,5)) == (1,2,3,4,5)",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        if lst1[i] in lst2:\n            result.append(lst1[i])\n            for j in range(i,len(lst1)):\n                if lst2[j] not in result:\n                    result.append(lst2[j])\n        else:\n            result.append(lst1[i])\n    return result\n",
        "test": "assert     sum_list([1,2,3,4],    [5,6,7,8]) == [5,6,7,8], \"List checking error\"",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for idx, group in enumerate(groupby(nums)):\n        if idx!= 0:\n            first_item = group.popitem()[0]\n            if first_item!= group.popitem()[0]:\n                nums[first_item] = True\n        else:\n            return group.popitem()[0]\n    return False\n",
        "test": "assert     consecutive_duplicates([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=r*h\n    b=2*h*r\n    c=math.sqrt(a**2+b**2)\n    return c\n",
        "test": "assert     lateralsurface_cone(0.0,1.0)==0.0",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[a-zA-Z0-9_]*'\n    text = re.sub(pattern, r':', text)\n    return text\n",
        "test": "assert     re.search(r'[\\s;,]', 'GoTo: toDo: [toDo]')",
        "num_ids": 2497,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A) - 1\n    while (i <= j):\n        m = (i + j) // 2\n        if A[m] == x:\n            return m\n        elif A[m] < x:\n            i = m + 1\n        else:\n            j = m - 1\n    return -1\n",
        "test": "assert     find_first_occurrence([-1, 0, 1, 2, 1, 2, 3, 4, 5, 6, 7], 0) == 4",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n=len(arr)\n    sum_of_prod=0\n    for i in range(0,n):\n        for j in range(i,n):\n            sum_of_prod+=arr[j]*arr[i]\n    return sum_of_prod\n",
        "test": "assert     sum_Of_Subarray_Prod([3,5,6,1,2,4]) == 23",
        "num_ids": 2247,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return -1\n    else:\n        return (n & 0xFF) + ((n & 0xFF)<<8)\n",
        "test": "assert     set_middle_bits(0b101100110111011101) == 0b101",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    while i < len(a):\n        if a[i] > x:\n            break\n        i += 1\n    if i == len(a):\n        return -1\n    else:\n        return i\n",
        "test": "assert     left_insertion([1, 0, 1, 3], 0) == 0",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string.lower()):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_str('One') == True, 'Expected to start with a vowel'",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(n+1)/2\n",
        "test": "assert     geometric_sum(0) == 0",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n+1):\n        if i > 1 and i % 10 == 0:\n            index = (n - i) // 10\n            if i % 10!= 0:\n                index += 1\n            print(index, i)\n        if i % 2 == 0:\n            index = (n - i) // 2\n            print(index, i)\n        if i == 1:\n            index = 0\n            print(index, i)\n        if i == 10:\n            index = 9\n            print(index, i)\n    print(index)\n    return index\n",
        "test": "assert     find_Index(2) == 2",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) == 1:\n        return {test_tup[0]:test_tup[0]}\n    else:\n        return {key:test_tup[0] for key in test_tup[0].keys()}\n",
        "test": "assert     tuple_to_dict((1, 2, 3)) == {1:1, 2:2, 3:3}",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    res = True\n    for i in s :\n        if i.isalpha() :\n            if i.isalpha() :\n                if i.isalpha() :\n                    if i.isalpha() :\n                        if i.isalpha() :\n                            if i.isalpha() :\n                                res = False\n                                break\n    return res\n",
        "test": "assert all_Characters_Same(\"ABCD\") == False",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Python and OpenCV are imported, we will call them from here\n    import cv2 as cv\n    import numpy as np\n    # import matplotlib.pyplot as plt\n    def draw_circles(img, circles, color = (0,255,0), thickness = 2):\n        '''\n        Draws circles of a given type of size on the img\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the circles.\n            circles (numpy.ndarray):\n                The circles to draw. The circles should be organized as\n                cx, cy, radius.\n            color (tuple, optional):\n                The color of the circles. Default is (255, 0, 0).\n            thickness (int, optional):\n                The thickness of the circles. Default is 2.\n        '''\n        # print(circles)\n        for i in range(len(circles)):\n            # Calculate the x,y and z coordinates of the current circle\n            cx = circles[i][0]\n            cy = circles[i][1]\n            cz = circles[i][2]\n            # Create the circle with the given parameters\n            cv.circle(img, (cx, cy), cz, color, thickness)\n    # define a function that draws a circle.\n    def draw_circle(img, cx, cy, cz, radius, color=(255, 0, 0), thickness=2):\n        '''\n        Draws circles of a given type of size on the img\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the circles.\n            cx (int):\n                The x coordinate of the center of the circle.\n            cy (int):\n                The y coordinate of the center of the circle.\n            cz (int):\n                The z coordinate of the center of the circle.\n            radius (int):\n                The radius of the circle.\n            color (tuple, optional):\n                The color of the circles. Default is (255, 0, 0).\n            thickness (int, optional):\n                The thickness of the circles. Default is 2.\n        '''\n        # print(cx, cy, cz, radius)\n        cv.circle(img, (cx, cy), cz, color, thickness)\n    # Define a function to draw a line.\n    def draw_line(img, x1, y1, x2, y2, color=(255, 0, 0)):\n        '''\n        Draw a line on an image.\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the line.\n            x1 (int):\n                The x coordinate of the first point.\n            y1 (int):\n                The y coordinate of the first point.\n            x2 (int):\n                The x coordinate of the second point.\n            y2 (int):\n                The y coordinate of the second point.\n            color (tuple, optional):\n                The color of the line. Default is (255, 0, 0).\n        '''\n        cv.line(img, (x1, y1), (x2, y2), color, 2)\n    # Define a function to draw an ellipse.\n    def draw_ellipse(img, cx, cy, cz, rx, ry, color=(255, 0, 0), thickness=2):\n        '''\n        Draw an ellipse.\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the ellipse.\n            cx (int):\n                The x coordinate of the center of the ellipse.\n            cy (int):\n                The y coordinate of the center of the ellipse.\n            cz (int):\n                The z coordinate of the center of the ellipse.\n            rx (int):\n                The radius of the ellipse.\n            ry (int):\n                The radius of the ellipse.\n            color (tuple, optional):\n                The color of the ellipse. Default is (255, 0, 0).\n            thickness (int, optional):\n                The thickness of the ellipse. Default is 2.\n        '''\n        cv.ellipse(img, (cx, cy), (cz, rz), rx, ry, 0, 90, color, thickness)\n    # Define a function to draw a triangle.\n    def draw_triangle(img, x1, y1, x2, y2, x3, y3, color=(255, 0, 0), thickness=2):\n        '''\n        Draw a triangle.\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the triangle.\n            x1 (int):\n                The x coordinate of the first point.\n            y1 (int):\n                The y coordinate of the first point.\n            x2 (int):\n                The x coordinate of the second point.\n            y2 (int):\n                The y coordinate of the second point.\n            x3 (int):\n                The x coordinate of the third point.\n            y3 (int):\n                The y coordinate of the third point.\n            color (tuple, optional):\n                The color of the triangle. Default is (255, 0, 0).\n            thickness (int, optional):\n                The thickness of the triangle. Default is 2.\n        '''\n        cv.line(img, (x1, y1), (x2, y2), color, thickness)\n        cv.line(img, (x2, y2), (x3, y3), color, thickness)\n        cv.line(img, (x3, y3), (x1, y1), color, thickness)\n    # define a function to draw a polygon.\n    def draw_polygon(img, x, y, color=(255, 0, 0)):\n        '''\n        Draw a polygon.\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the polygon.\n            x (int):\n                The x coordinate of the point.\n            y (int):\n                The y coordinate of the point.\n            color (tuple, optional):\n                The color of the polygon. Default is (255, 0, 0).\n        '''\n        # print(x, y)\n        for i in range(len(x)):\n            cv.circle(img, (x[i], y[i]), 2, color, -1)\n    # define a function to draw a quadrilateral.\n    def draw_quad(img, x1, y1, x2, y2, x3, y3, x4, y4, color=(255, 0, 0), thickness=2):\n        '''\n        Draw a quadrilateral.\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the quadrilateral.\n            x1 (int):\n                The x coordinate of the first point.\n            y1 (int):\n                The y coordinate of the first point.\n            x2 (int):\n                The x coordinate of the second point.\n            y2 (int):\n                The y coordinate of the second point.\n            x3 (int):\n                The x coordinate of the third point.\n            y3 (int):\n                The y coordinate of the third point.\n            x4 (int):\n                The x coordinate of the fourth point.\n            y4 (int):\n                The y coordinate of the fourth point.\n            color (tuple, optional):\n                The color of the quadrilateral. Default is (255, 0, 0).\n            thickness (int, optional):\n                The thickness of the quadrilateral. Default is 2.\n        '''\n        cv.line(img, (x1, y1), (x2, y2), color, thickness)\n        cv.line(img, (x2, y2), (x3, y3), color, thickness)\n        cv.line(img, (x3, y3), (x4, y4), color, thickness)\n        cv.line(img, (x4, y4), (x1, y1), color, thickness)\n    # Define a function to draw a circle.\n    def draw_circle(img, cx, cy, cz, radius, color=(255, 0, 0), thickness=2):\n        '''\n        Draw a circle.\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the circle.\n            cx (int):\n                The x coordinate of the center of the circle.\n            cy (int):\n            ",
        "test": "assert     area_tetrahedron(3) == 25",
        "num_ids": 2247,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(n//2):\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n    print(list)\n",
        "test": "assert     rotate_right(list, 2) == [3, 4, 5, 6, 7, 8, 9, 1, 2]",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return False\n    return True\n",
        "test": "assert check_none((1,2,3,None)) == False",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    range_start = [i for i in range(startnum, endnum)]\n    result = []\n    for i in range(len(range_start)):\n        if range_start[i]%10 == 0:\n            result.append(range_start[i])\n    return result\n",
        "test": "assert         divisible_by_digits(1, 0) == []",
        "num_ids": 2204,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 360:\n        if r == 0:\n            return 0\n        elif r == 0.5:\n            return a\n        elif r > 0.5:\n            return math.tan(math.radians(a/2))*r\n    elif a < 180:\n        if r == 0:\n            return math.tan(math.radians(a/2))*r\n        elif r > 0:\n            return math.tan(math.radians(a/2))*r\n    elif a < 90:\n        if r == 0:\n            return math.tan(math.radians(a/2))*r\n        elif r > 0:\n            return math.tan(math.radians(a/2))*r\n    elif a < 180:\n        if r == 0:\n            return math.tan(math.radians(a/2))*r\n        elif r > 0:\n            return 0\n    elif a < 180:\n        if r == 0:\n            return math.tan(math.radians(a/2))*r\n        elif r > 0:\n            return 0\n",
        "test": "assert     sector_area(0.5,0) == 0.0",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) < len(Y) or len(X) < len(Z):\n        return -1\n    else:\n        return find_lcs(X, Y, Z)\n",
        "test": "assert     lcs_of_three('abcde', 'abcde', 'abcde') == 2",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i.isupper():\n            str2 += i.upper()\n        else:\n            str2 += i.lower()\n    return str2\n",
        "test": "assert     capital_words_spaces('Abba_') == 'Abba_'",
        "num_ids": 2336,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str)\n",
        "test": "assert     sort_numeric_strings([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list = test_list + test_tup\n    return test_list\n",
        "test": "assert     add_tuple([1, 2, 3], (4, 5, 6, 7, 8, 9)) == ((1, 4, 5, 6, 7, 8, 9), (1, 2, 3, 4, 5, 6, 7, 8, 9))",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i-1] < arr[i//2]:\n        return check_min_heap_helper(arr, i//2)\n    else:\n        return False\n",
        "test": "assert     check_min_heap_helper([-1, 2, 3, 1], 0) == True",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0: return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 4\n    elif n == 4: \n        return 6\n    elif n == 5: \n        return 8\n    elif n == 6: \n        return 10\n    elif n == 7: \n        return 12\n    elif n == 8: \n        return 14\n    elif n == 9: \n        return 16\n    elif n == 10: \n        return 18\n    elif n == 11: \n        return 20\n    elif n == 12: \n        return 22\n    elif n == 13: \n        return 24\n    elif n == 14: \n        return 26\n    elif n == 15: \n        return 28\n    elif n == 16: \n        return 30\n    elif n == 17: \n        return 32\n    elif n == 18: \n        return 34\n    elif n == 19: \n        return 36\n    elif n == 20: \n        return 38\n    elif n == 21: \n        return 40\n    elif n == 22: \n        return 42\n    elif n == 23: \n        return 44\n    elif n == 24: \n        return 46\n    elif n == 25: \n        return 48\n    elif n == 26: \n        return 50\n    elif n == 27: \n        return 52\n    elif n == 28: \n        return 54\n    elif n == 29: \n        return 56\n    elif n == 30: \n        return 58\n    elif n == 31: \n        return 60\n    elif n == 32: \n        return 62\n    elif n == 33: \n        return 64\n    elif n == 34: \n        return 66\n    elif n == 35: \n        return 68\n    elif n == 36: \n        return 70\n    elif n == 37: \n        return 72\n    elif n == 38: \n        return 74\n    elif n == 39: \n        return 76\n    elif n == 40: \n        return 78\n    elif n == 41: \n        return 80\n    elif n == 42: \n        return 82\n    elif n == 43: \n        return 84\n    elif n == 44: \n        return 86\n    elif n == 45: \n        return 88\n    elif n == 46: \n        return 90\n    elif n == 47: \n        return 92\n    elif n == 48: \n        return 94\n    elif n == 49: \n        return 96\n    elif n == 50: \n        return 98\n    elif n == 51: \n        return 100\n    elif n == 52: \n        return 102\n    elif n == 53: \n        return 104\n    elif n == 54: \n        return 106\n    elif n == 55: \n        return 108\n    elif n == 56: \n        return 110\n    elif n == 57: \n        return 112\n    elif n == 58: \n        return 114\n    elif n == 59: \n        return 116\n    elif n == 60: \n        return 118\n    elif n == 61: \n        return 120\n    elif n == 62: \n        return 122\n    elif n == 63: \n        return 124\n    elif n == 64: \n        return 126\n    elif n == 65: \n        return 128\n    elif n == 66: \n        return 130\n    elif n == 67: \n        return 132\n    elif n == 68: \n        return 134\n    elif n == 69: \n        return 136\n    elif n == 70: \n        return 138\n    elif n == 71: \n        return 140\n    elif n == 72: \n        return 142\n    elif n == 73: \n        return 144\n    elif n == 74: \n        return 146\n    elif n == 75: \n        return 148\n    elif n == 76: \n        return 150\n    elif n == 77: \n        return 152\n    elif n == 78: \n        return 154\n    elif n == 79: \n        return 156\n    elif n == 80: \n        return 158\n    elif n == 81: \n        return 160\n    elif n == 82: \n        return 162\n    elif n == 83: \n        return 164\n    elif n == 84: \n        return 166\n    elif n == 85: \n        return 168\n    elif n == 86: \n        return 170\n    elif n == 87: \n        return 172\n    elif n == 88: \n        return 173\n    elif n == 89: \n        return 174\n    elif n == 90: \n        return 176\n    elif n == 91: \n        return 178\n    elif n == 92: \n        return 180\n    elif n == 93: \n        return 182\n    elif n == 94: \n        return 184\n    elif n == 95: \n        return 186\n    elif n == 96: \n        return 188\n    elif n == 97: \n        return 190\n    elif n == 98: \n        return 192\n    elif n == 99: \n        return 194\n    elif n == 100: \n        return 196\n    elif n == 101: \n        return 198\n    elif n == 102: \n        return 200\n    elif n == 103: \n        return 202\n    elif n == 104: \n        return 204\n    elif n == 105: \n        return 206\n    elif n == 106: \n        return 208\n    elif n == 107: \n        return 210\n    elif n == 108: \n        return 212\n    elif n == 109: \n        return 214\n    elif n == 110: \n        return 216\n    elif n == 111: \n        return 218\n    elif n == 112: \n        return 220\n    elif n == 113: \n        return 222\n    elif n == 114: \n        return 224\n    elif n == 115: \n        return 226\n    elif n == 116: \n        return 228\n    elif n == 117: \n        return 230\n    elif n == 118: \n        return 232\n    elif n == 119: \n        return 234\n    elif n == 120: \n        return 236\n    elif n == 121: \n        return 238\n    elif n == 122: \n        return 240\n    elif n == 123: \n        return 242\n    elif n == 124: \n        return 244\n    elif n == 125: \n        return 246\n    elif n == 126: \n        return 248\n    elif n == 127: \n        return 250\n    elif n == 128: \n        return 252\n    elif n == 129: \n        return 254\n    elif n == 130: \n        return 256\n    elif n == 131: \n        return 258\n    elif n == 132: \n        return 260\n    elif n == 133: \n        return 262\n    elif n == 134: \n        return 264\n    elif n == 135: \n        return 266\n    elif n == 136: \n        return 268\n    elif n == 137: \n        return 270\n    elif n == 138: \n        return 272\n    elif n == 139: \n        return 274\n    elif n == 140: \n        return 276\n    elif n == 141: \n        return 278\n    elif n == 142: \n        return 280\n    elif n == 143: \n        return 282\n    elif n == 144: \n        return 284\n    elif n == 145: \n        return 286\n    elif n == 146: \n        return 288\n    elif n == 147: \n        return 290\n    elif n == 148: \n        return 292\n    elif n == 149: \n        return 294\n    e",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 5934,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #function to find minimum k records from tuple list\n    def find_k(tuple_list, K):\n        '''\n        K is the number of records\n        '''\n        #initialize k with first 10 records\n        k_list = []\n        for i in range(K):\n            k_list.append(tuple_list[i])\n        #keep track of the minimum number of records that can be found\n        k = 0\n        #Loop through the k list\n        for i in range(K):\n            #Check if current record is less than the previous k record\n            if k_list[i] < k_list[i-1]:\n                #print(tuple_list[i], \"is less than k_list[\", i-1, \"]\")\n                k = i\n        return k\n    #Function to find the minimum k records from tuple list\n    def find_min_k(test_list, K):\n        '''\n        tuple_list is a list of tuples (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        '''\n        #loop through list\n        for i in range(len(tuple_list)):\n            #if min_k is greater than K, return\n            if find_k(tuple_list, K) > K:\n                #print(tuple_list[i], \"is greater than K\")\n                return tuple_list[i]\n            #else, if min_k is less than K, remove that record and repeat for another record\n            else:\n                tuple_list[i] = tuple_list[i][:find_k(tuple_list, K)] + tuple_list[i][find_k(tuple_list, K)+1:]\n        #print(\"All records for min_k\")\n        #print(tuple_list)\n        return \"None\"\n    #Function to find minimum k records from tuple list\n    def find_min_k_records(test_list, K):\n        '''\n        tuple_list is a list of tuples (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        '''\n        #loop through list\n        for i in range(len(tuple_list)):\n            #if min_k is greater than K, return\n            if find_min_k(tuple_list, K) > K:\n                #print(tuple_list[i], \"is greater than K\")\n                return tuple_list[i]\n            #else, if min_k is less than K, remove that record and repeat for another record\n            else:\n                tuple_list[i] = tuple_list[i][:find_min_k(tuple_list, K)] + tuple_list[i][find_min_k(tuple_list, K)+1:]\n        #print(\"All records for min_k\")\n        #print(tuple_list)\n        return \"None\"\n    #Function to find minimum k records from tuple list\n    def find_min_k_records_rec(test_list, K):\n        '''\n        tuple_list is a list of tuples (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        '''\n        #initialize k with first 10 records\n        k_list = []\n        for i in range(K):\n            k_list.append(tuple_list[i])\n        #keep track of the minimum number of records that can be found\n        k = 0\n        #Loop through the k list\n        for i in range(K):\n            #Check if current record is less than the previous k record\n            if k_list[i] < k_list[i-1]:\n                #print(tuple_list[i], \"is less than k_list[\", i-1, \"]\")\n                k = i\n        #print(\"find_min_k\")\n        #print(k_list)\n        #print(\"find_min_k_records\")\n        #print(find_min_k_records(tuple_list, K))\n        #print(\"find_min_k_records_rec\")\n        #print(find_min_k_records_rec(tuple_list, K))\n        return find_min_k_records(tuple_list, K)\n    #Function to find the minimum k records from tuple list\n    def find_min_k_records_rec_with_rec(test_list, K):\n        '''\n        tuple_list is a list of tuples (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        '''\n        #initialize k with first 10 records\n        k_list = []\n        for i in range(K):\n            k_list.append(tuple_list[i])\n        #keep track of the minimum number of records that can be found\n        k = 0\n        #Loop through the k list\n        for i in range(K):\n            #Check if current record is less than the previous k record\n            if k_list[i] < k_list[i-1]:\n                #print(tuple_list[i], \"is less than k_list[\", i-1, \"]\")\n                k = i\n        #print(\"find_min_k_records\")\n        #print(k_list)\n        #print(\"find_min_k_records_rec\")\n        #print(find_min_k_records(tuple_list, K))\n        return find_min_k_records_rec(tuple_list, K)\n    #Function to find the minimum k records from tuple list\n    def find_min_k_records_rec_with_k(test_list, K):\n        '''\n        tuple_list is a list of tuples (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        '''\n        #initialize k with first 10 records\n        k_list = []\n        for i in range(K):\n            k_list.append(tuple_list[i])\n        #keep track of the minimum number of records that can be found\n        k = 0\n        #Loop through the k list\n        for i in range(K):\n            #Check if current record is less than the previous k record\n            if k_list[i] < k_list[i-1]:\n                #print(tuple_list[i], \"is less than k_list[\", i-1, \"]\")\n                k = i\n        #print(\"find_min_k_records_with_k\")\n        #print(k_list)\n        #print(\"find_min_k_records_rec_with_k\")\n        #print(find_min_k_records_rec_with_k(tuple_list, K))\n        return find_min_k_records_rec_with_k(tuple_list, K)\n    #Function to find the minimum k records from tuple list\n    def find_min_k_records_rec_with_k_rec(test_list, K):\n        '''\n        tuple_list is a list of tuples (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        '''\n        #initialize k with first 10 records\n        k_list = []\n        for i in range(K):\n            k_list.append(tuple_list[i])\n        #keep track of the minimum number of records that can be found\n        k = 0\n        #Loop through the k list\n        for i in range(K):\n            #Check if current record is less than the previous k record\n            if k_list[i] < k_list[i-1]:\n                #print(tuple_list[i], \"is less than k_list[\", i-1, \"]\")\n                k = i\n        #print(\"find_min_k_records_with_k_rec\")\n        #print(k_list)\n        #print(\"find_min_k_records_rec_with_k_rec\")\n        #print(find_min_k_records_rec_with_k_rec(tuple_list, K))",
        "test": "assert     min_k(('x', 2, 3, 'z'), 5) == (2, 3, 'z')",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            common.append(l1[i])\n        elif l2[i] in l3:\n            common.append(l2[i])\n    return common\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    second_smallest_num = numbers[1]\n    return second_smallest_num\n",
        "test": "assert     second_smallest([2,6,8]) == 6",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    string = re.search(r'a\\b\\w+',text)\n    match = re.search(r'a\\b\\w+',text)\n    print(string.group())\n    print(match.group())\n    \ndef check_punctuation(text):\n    '''\n    Write a function that checks for punctuation marks within a text. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No punctuation marks\")\n    else:\n        print('No punctuation marks')\n        \ndef check_periods(text):\n    '''\n    Write a function that checks for periods within a text. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    text = re.sub('[^a-zA-Z\\s]','',text)\n    if '.' in text:\n        print(\"No periods\")\n    else:\n        print('No periods')\n        \ndef check_in_spaces(text):\n    '''\n    Write a function that checks for spaces within a text. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    text = re.sub('[^a-zA-Z\\s]','',text)\n    if'' in text:\n        print(\"No spaces\")\n    else:\n        print('No spaces')\n        \ndef remove_chars(text):\n    '''\n    Write a function that removes any characters that are in the \u201c '\u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No characters\")\n    else:\n        print('No characters')\n        \ndef remove_stopwords(text):\n    '''\n    Write a function that removes any stopwords that are in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No stopwords\")\n    else:\n        print('No stopwords')\n        \ndef remove_repeating_words(text):\n    '''\n    Write a function that removes any repeating words that are in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No repeating words\")\n    else:\n        print('No repeating words')\n        \ndef remove_dashes(text):\n    '''\n    Write a function that removes any dashes that are in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No dashes\")\n    else:\n        print('No dashes')\n        \ndef remove_stop_words(text):\n    '''\n    Write a function that removes any stop words that are in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No stopwords\")\n    else:\n        print('No stopwords')\n        \ndef remove_punctuation(text):\n    '''\n    Write a function that removes any punctuation marks within a text. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    text = re.sub('[^a-zA-Z\\s]','',text)\n    if'' in text:\n        print(\"No punctuation marks\")\n    else:\n        print('No punctuation marks')\n        \ndef remove_periods(text):\n    '''\n    Write a function that removes any periods within a text. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if '.' in text:\n        print(\"No periods\")\n    else:\n        print('No periods')\n        \ndef remove_in_spaces(text):\n    '''\n    Write a function that removes any spaces within a text. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No spaces\")\n    else:\n        print('No spaces')\n        \ndef remove_chars_to_ignore(text):\n    '''\n    Write a function that removes any characters that are not in the \u201c '\u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No characters to ignore\")\n    else:\n        print('No characters to ignore')\n        \ndef remove_stopwords_to_ignore(text):\n    '''\n    Write a function that removes any stopwords that are not in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No stopwords to ignore\")\n    else:\n        print('No stopwords to ignore')\n        \ndef remove_repeating_words_to_ignore(text):\n    '''\n    Write a function that removes any repeating words that are not in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No repeating words to ignore\")\n    else:\n        print('No repeating words to ignore')\n        \ndef remove_dashes_to_ignore(text):\n    '''\n    Write a function that removes any dashes that are not in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No dashes to ignore\")\n    else:\n        print('No dashes to ignore')\n        \ndef remove_stop_words_to_ignore(text):\n    '''\n    Write a function that removes any stop words that are not in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-19.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No stopwords to ignore\")\n    else:\n        print('No stopwords to ignore')\n        \ndef remove_punctuation_to_ignore(text):\n    '''\n    Write a function that removes any punctuation marks within a text. https://www.w3resource.com/python-exercises/re/python-re-exercise-20.php\n    '''\n    text = re",
        "test": "assert     text_match_zero_one('jimbo') == 'jimbo'",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    # traverse in reverse\n    for i in range(len(test_list)-1, -1, -1):\n        # check if the characters match, if not, go to the next index\n        if test_list[i] == test_list[i+1]:\n            count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs(['abc', 'def', 'xyz', 'z']) == 3",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    d2 = {}\n    l = []\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for key in d:\n        l.append((key,d[key]))\n    for key, value in l:\n        if value in d2:\n            d2[value] += 1\n        else:\n            d2[value] = 1\n    d3 = {}\n    for key, value in d2:\n        d3[value] = (key, d2[value])\n    return d3",
        "test": "assert     unique_sublists([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, ",
        "num_ids": 2234,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    if num.strip().endswith('.'):\n        return False\n    return True\n",
        "test": "assert     is_decimal(\"-34\") == True",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # Write your code here\n    for x in range(len(arr)):\n        if(arr[x]!= arr[x+1]):\n            return False\n    return True\n",
        "test": "assert     unique_Element([1,2,3,1,2,3]) == False",
        "num_ids": 2245,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 <= 0 or monthnum3 > 12:\n        return False\n    elif monthnum3 < 10:\n        return True\n    else:\n        return (monthnum3%10) == 0\n",
        "test": "assert     check_monthnumber_number(1) == True",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 0:\n        return -1\n    \n    arr.sort()\n    result = arr[n-1] - arr[n-2]\n    \n    return result\n",
        "test": "assert     find_min_diff([2,1,3],3) == 1",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number_of_digits = 0\n    for char in str:\n        if char.isdigit():\n            number_of_digits += 1\n    return number_of_digits\n",
        "test": "assert ",
        "num_ids": 141,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    print(\"*** nth polite number ***\")\n    \n    if n==0 or n==1: \n        print(\"Holy smokes, this is nth polite number.\")\n    else: \n        print(\"This is not nth polite number.\")\n",
        "test": "assert     is_polite(1) == \"No\" ",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    # get the length of the list\n    length = len(l1)\n    \n    # create a list of empty lists\n    result = []\n    \n    # check if the list contains only 1 item\n    if length == 1:\n        return []\n    \n    # iterate through each element of the list\n    for i in range(0, length):\n        # if element is not the first element\n        if i!= 0:\n            # add the previous element to the result list\n            if l1[i-1]!= l1[i]:\n                result.append([l1[i-1], l1[i]])\n    return result\n    ",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count=0\n    for i in range(0,len(arr)):\n        if arr[i]!=sum:\n            count=count+1\n    return count\n",
        "test": "assert ",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=list(set(li1).difference(set(li2)))\n    return(diff)\n",
        "test": "assert     Diff([1,2,3,4,5,6], [6,7,8,9]) == [1,2,4,6,7,8]",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 or n == 1 :\n        return n\n    else : \n        return odd_num_sum(n-1) + odd_num_sum(n-2) + odd_num_sum(n-3) + odd_num_sum(n-4) + odd_num_sum(n-5)\n    \n",
        "test": "assert     odd_num_sum(1) == 1",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for x in exp:\n        if x == \"(\":\n            stack.append(\"(\")\n        elif x == \")\":\n            while stack and stack[-1]!= \"(\":\n                stack.pop()\n            if not stack:\n                return False\n            stack.pop()\n        else:\n            return False\n    return stack == []\n",
        "test": "assert     check_expression('(()(()'  == False)",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    temp_str = test_str.split()\n    ans = []\n    for word in temp_str:\n        if len(word) < K:\n            ans.append(word)\n    return ans\n",
        "test": "assert     remove_length(\"abcde\", 2) == \"abc\"",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    text = re.sub(pattern, \"\", text)\n    i = 0\n    while(True):\n        if pattern.search(text[i:i+len(pattern)]) == None:\n            break\n        i += len(pattern)\n    if pattern.search(text) == None:\n        print(\"{} at {}\".format(text,i))\n        return None\n    else:\n        print(\"{} at {}\".format(text[i:i+len(pattern)], i))\n        return i\n",
        "test": "assert occurance_substring(\"Alexis is the best friend of James\", \"is|is|best|i|like|am\") == None",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    even = True\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2 == 0:\n            even = False\n            break\n        i = i + 1\n    return even\n",
        "test": "assert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) is False",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    vowels = 0\n    for ch in test_str:\n        if 'a' <= ch <= 'z':\n            vowels += 1\n        elif 'A' <= ch <= 'Z':\n            vowels += 1\n        else:\n            pass\n    return vowels\n",
        "test": "assert     count_vowels(\"Aa\") == 2",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in arr: \n        if i == i: \n            continue\n        else: \n            s += i \n    return s \nprint(find_sum([1, 2, 3, 4, 4, 5]))",
        "test": "assert     find_sum([2, 3, 3, 3]) == 0",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_lists = groupby(list1, key=len) # groups list elements by length\n    \n    # create a new list to store duplicates\n    new_list = []\n    \n    # iterate over the group\n    for group in grouped_lists:\n        # check if the current group contains a duplicate element\n        if len(list(group)) > 1:\n            # group by length and create a new list for each duplicate\n            for sub_list in zip(*group):\n                new_list.append(list(sub_list))\n    \n    # return list\n    return new_list\n",
        "test": "assert     pack_consecutive_duplicates([1, 3, 5, 7, 9, 2, 8, 5, 6, 7]) == [[1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7], [9, 8, 5, 6, 7]]",
        "num_ids": 2366,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if list1 == []:\n        return {}\n    d = {}\n    if list1[0] not in d.keys():\n        d[list1[0]] = 1\n    for i in range(1,len(list1)):\n        d[list1[i]] += 1\n        if list1[i] not in d.keys():\n            d[list1[i]] = 1\n        else:\n            d[list1[i]] += 1\n    return d\n    \nprint(unique_sublists([1,1,1])",
        "test": "assert     unique_sublists([1,1,2,1,1,1,1,1,1,1]) == {1: 1, 1: 1, 2: 1, 1: 1, 1: 1}",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            result.append(test_list[i] + test_list[j])\n    return result\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 2201,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i=2\n    while i*i<=n :\n        if n % i == 0 :\n            return False\n        i += 2\n    return True\n",
        "test": "assert     count_divisors(0) == 1",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    odd_len = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 1):\n            odd_len += 1\n        if(odd_len == 2):\n            odd_sum += arr[i]\n        if(odd_len == 3):\n            odd_sum += arr[i]\n        if(odd_len == 4):\n            odd_sum += arr[i]\n    return odd_sum\n",
        "test": "assert     odd_length_sum(list(range(0, 9999, 9))) == 99999, 'odd_length_sum'",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_r = max(r, g, b)\n    min_r = min(r, g, b)\n    max_r = max_r - min_r\n    value = (max_r/255)/(max_r+min_r+1)\n    if value < 0.0:\n        value = 0.0\n    if value > 1.0:\n        value = 1.0\n    h = max_r\n    s = value\n    v = value\n    \n    return h,s,v\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0.0, 0.0, 0.0)",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # empty lists\n    even_odd = []\n    odd_even = []\n    \n    # iterate over list\n    for i in list1:\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            odd_even.append(i)\n",
        "test": "assert     mul_even_odd([1,2,3,4,5,6]) == 60",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_int = tuple(map(int, test_str))\n    return tuple_int\n",
        "test": "assert tuple_str_int((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a)-1\n    while(l <= r):\n        mid = (l+r)//2\n        if a[mid] <= x:\n            l = mid+1\n        else:\n            r = mid-1\n    return l\n",
        "test": "assert ",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # find all matches\n    matches = re.findall(r'[a-z][A-Z]*b',text)\n    # print the matches\n    print(matches)\n    # if there are any matches\n    if len(matches) > 0:\n        print('You are matching three letters...')\n        # get the first match\n        firstmatch = matches[0]\n        # get the second match\n        secondmatch = matches[1]\n        # get the third match\n        thirdmatch = matches[2]\n        # compare the first match to the second and third matches\n        print('The match is: ',firstmatch)\n        print('The match is: ',secondmatch)\n        print('The match is: ',thirdmatch)\n        # if the first match is equal to the second match\n        if firstmatch == secondmatch:\n            # print the result\n            print('The match is: ',firstmatch)\n        # if the second match is equal to the third match\n        elif secondmatch == thirdmatch:\n            # print the result\n            print('The match is: ',secondmatch)\n        # if the third match is equal to the first match\n        else:\n            # print the result\n            print('The match is: ',thirdmatch)\n    else:\n        print('There are no matches. Nothing matched...')\n        # if there are no matches\n        if len(matches) == 0:\n            print('No matches found...')\n    # return the matches\n    return matches\n",
        "test": "assert     text_match_three('ababaab') == 'ababaab'",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(map(int, test_str.split()))\n",
        "test": "assert new_tuple(['a', 'b'], ['c', 'd']) == ('a', 'b')",
        "num_ids": 2386,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = [i for i in nums if i%2==0]\n    return len(evens)==0\n",
        "test": "assert     even_position([0,2,4,6,8,10,12,14,16,18,20]) == False",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    temp_list = []\n    for i in test_tup:\n        if i not in temp_list:\n            temp_list.append(i)\n    return tuple(temp_list)\n",
        "test": "assert ",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output = 0\n    for lst in input_list:\n        output += len(lst)\n    return output\n",
        "test": "assert     count_list([]) == 0",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 793,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        return 0\n    \n    mid = n//2\n    if arr[mid] == x:\n        return mid\n    if arr[mid] > x:\n        return last(arr,x)\n    return last(arr[mid+1:],x)\n",
        "test": "assert last(l,1) == 1, 'for last=1'",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start = 0\n    end = 0\n    output = ''\n    for i in range(len(text)):\n        if text[i] == 'a':\n            start = i\n            break\n    for i in range(len(text) - 1, -1, -1):\n        if text[i] == 'b':\n            end = i\n            break\n    if start == 0:\n        return start, end\n    else:\n        output = text[start:end]\n    return output\n",
        "test": "assert     text_starta_endb('end') == 'e'",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total\n",
        "test": "assert     return_sum({\"a\": 1, \"b\": 2}) == 3",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n, n + 2):\n        if i % 2 == 0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_odd(0) == 0",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n",
        "test": "assert     _sum([]) == 0, \"No Sum\"",
        "num_ids": 160,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Your code here\n    if n >= (2**32):\n        return 0\n    n = (n+d)\n    return n\n",
        "test": "assert     left_rotate(0,1) == 1",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\" +\", \" \", text)\n",
        "test": "assert     remove_all_spaces(\"\") == \"\"",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    z=0\n    for i in range(0,len(x)):\n        for j in range(0,len(y)):\n            for k in range(0,len(z)):\n                if x[i] == y[j] and z[k] == 0:\n                    z[k] = 1\n                elif x[i] == y[j] and z[k] == 1:\n                    z[k] = 0\n                elif x[i] == y[j] and z[k] == 2:\n                    z[k] = 1\n    return z\n    \n",
        "test": "assert     test_three_equal(10, 2, 8) == 1",
        "num_ids": 2507,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    \n    for i in range(n-1):\n        if (arr[i] > arr[i+1]):\n            count += 1\n    return count\n    \ndef print_arr(arr):\n    n = len(arr)\n    for i in range(n):\n        print(arr[i], end=\" \")\n    print()\n    \ndef main():\n    arr = [1, 4, 8, 7, 9, 2, 5, 6, 3]\n    print(\"Unsorted Array:\")\n    print_arr(arr)\n    \n    print(\"\\nSorted Array:\")\n    count_rotation(arr)\n    print(\"\\nRotation count: \" + str(count_rotation(arr)))\n    \nif __name__ == '__main__':\n    main(",
        "test": "assert ",
        "num_ids": 2383,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1 :\n        return True\n    else :\n        if n % 2 == 0 :\n            return False\n        elif n == 3 or n == 5 :\n            return True\n        else :\n            return False\n",
        "test": "assert     is_perfect_square(40) is False, \"is_perfect_square() is not correct\"",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 1:\n        return arr[0] == 1\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i-1]:\n                return False\n        return True\n",
        "test": "assert     is_product_even([1,2,3,4,5,6]) == True",
        "num_ids": 170,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    largest_sum = []\n    for element in lists:\n        if not element in largest_sum:\n            largest_sum.append(element)\n    return largest_sum\n",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    total = 0\n    for i in range(0,len(test_str)):\n        if(ord(test_str[i]) >= 65 and ord(test_str[i]) <= 90):\n            total = total + 1\n",
        "test": "assert ",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return nums[i]\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 3",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 808,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)-1):\n        if test_tup[i][0]!= test_tup[i+1][0]:\n            return False\n        if test_tup[i][1]!= test_tup[i+1][1]:\n            return False\n    return True\n",
        "test": "assert     check_K(('A', 'B', 'C'), 2) == False",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # return all if smaller than element of first tuple\n    if test_tup1[0] <= test_tup2[0]:\n        return 1\n    else:\n        return 0\n",
        "test": "assert         check_smaller((5,4,7,1,2), (1,4,8,3,6)) == False",
        "num_ids": 462,
        "indeed": false
    }
]