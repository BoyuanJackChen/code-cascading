[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l1 = list(set(test_tup1) & set(test_tup2))\n    print(l1)\n    return l1\n",
        "test": "assert     similar_elements([1,2,3,4,5], [3,5,1,4,2]) == False",
        "num_ids": 3307,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i**2 <= n:\n        if n % i == 0:\n            return False\n        i += 2\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_not_prime(9) == False",
        "num_ids": 1104,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q = []\n    heap_nums = []\n    for i in nums:\n        hq.heappush(q,i)\n    while q:\n        if len(q) > n:\n            x = hq.heappop(q)\n            heap_nums.append(x)\n        else:\n            x = hq.heappop(q)\n            heap_nums.append(x)\n    return heap_nums\n",
        "test": "assert     heap_queue_largest([1],3) == [1]",
        "num_ids": 1558,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    temp = x & -x\n    return bool(temp)\n",
        "test": "assert     is_Power_Of_Two(0) == False",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile(\"[a-zA-Z]+\\w+\")\n    return list(regex.findall(text))\n",
        "test": "assert     find_char_long('Hello world')",
        "num_ids": 1286,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n",
        "test": "assert     square_nums([]) == []",
        "num_ids": 2834,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #def binary_search(a, l, r, n):\n    rotations = 0\n    i = 0\n    n = len(str)\n    while (i < n):\n        j = i + 1\n        if (i < n - 1):\n            if (str[j] == str[i]):\n                j = j + 1\n            else:\n                if (str[j - 1] == str[i]):\n                    j = j - 1\n                else:\n                    rotations = rotations + 1\n                    if (j > i):\n                        j = j + 1\n                    else:\n                        j = j + 1\n        i = i + 1\n    return rotations\n",
        "test": "assert     find_Rotations('qwertyuiop') == 0",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # if len(s)==0: return ''\n    # if len(s)==1: return ''\n    if len(s)==0: return s[:1]\n    if len(s)==1: return s[1:]\n",
        "test": "assert     remove_Occ(\"\", \"\") == \"\"",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sums = []\n    for i in range(len(M)):\n        sums.append(sum(M[i]))\n    sums.sort()\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = sums[j]\n    return M\n",
        "test": "assert ",
        "num_ids": 1922,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * h)\n",
        "test": "assert     find_Volume(0,0,0) == 0",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for char in text:\n        if char.isalpha():\n            if char.lower() == char.lower() and char.isupper():\n                return False\n    return True\n",
        "test": "assert     text_lowercase_underscore(\"The quick brown fox jumps over the lazy tiger\") == False",
        "num_ids": 2810,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square_area = 4*a\n    return square_area\n    \n",
        "test": "assert     square_perimeter(0) == 0",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = []\n    for i in range(len(string)):\n        if string[i] not in l:\n            l.append(string[i])\n    return l\n",
        "test": "assert     str_to_list(\"\") == []",
        "num_ids": 1234,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array1 = arraynums\n    array2 = []\n    for i in range(len(arraynums)):\n        array2.append(arraynums[i])\n    for i in range(len(arraynums)):\n        if array2[i] in array1:\n            return True\n    return False\n",
        "test": "assert     test_duplicate([1, 2, 3, 1]) == True, 'test_duplicate failed'",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n",
        "test": "assert     is_woodall(3) == False",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = num * 2\n    while rev_num >= 1:\n        if rev_num % 2 == 0:\n            rev_num /= 2\n        else:\n            rev_num -= 1\n    return rev_num\n",
        "test": "assert     rev(0) == 0",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_num = 0\n    for i in arr :\n        if i > Max_num :\n            Max_num = i\n    return Max_num\n",
        "test": "assert     find_Max_Num([5]) == 5, 'find_Max_Num should return 5'",
        "num_ids": 1817,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return True\n    else: \n        return False\n",
        "test": "assert     opposite_Signs(2,1) == 1",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**3 % 10 == 1\n",
        "test": "assert     is_octagonal(0) == False, \"The first ten digits are not 0.\"",
        "num_ids": 3097,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    count_to_sub = 0\n    \n    for i in range(0, len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1].isdigit() and int(s[i:j+1]) == int(s[i:j+1]):\n                count_to_sub = count_to_sub + 1\n            else:\n                break\n        \n    return count_to_sub\n",
        "test": "assert     count_Substrings(\"\") == 0",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    #print(xs)\n    lst = []\n    for num in xs:\n        lst.append(num)\n    return lst[0]\n",
        "test": "assert     smallest_num([1, 2, 3]) == 1",
        "num_ids": 2875,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    lst = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            lst.append((test_list[i], test_list[j]))\n    return max(lst)\n",
        "test": "assert     max_difference([2, 3, 1, 4]), \"passed 3 different test cases\"",
        "num_ids": 5989,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n",
        "test": "assert     subject_marks([(1, 3), (2, 4), (3, 5)]) == [(1, 3), (2, 4), (3, 5)]",
        "num_ids": 1297,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for x in data_list:\n        sum += x\n    return sum\n    ",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 1163,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([0, 0, 0, 0, 0, 0]) == 0",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    def count(n, memo = {}):\n        if n in memo:\n            return memo[n]\n        \n        if n == 0:\n            return 1\n        \n        if n == 1:\n            return 1\n        \n        if n == 2:\n            return 2\n        \n        ans = count(n - 1, memo) + count(n - 2, memo)\n        \n        memo[n] = ans\n        \n        return ans\n    \n    return count(n)\n",
        "test": "assert     bell_number(1) == 1, '1'",
        "num_ids": 1061,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is monotonic or not\n    if len(A) <= 1:\n        return True\n    # for all indexes except the last one\n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([1,2,3,4,5,6,7,8,9,10,11]) == True",
        "num_ids": 1661,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if type(l)!= list:\n        raise TypeError(\"l should be a list\")\n    if len(l) == 0:\n        return False\n    for i in l:\n        if i in s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1,2,3,4], [6,7,8,9]) == False",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 1:\n        return Input[0] == Input[0]\n    else:\n        for i in range(len(Input) - 1):\n            if Input[i]!= Input[i + 1]:\n                return False\n    return True\n",
        "test": "assert     find_equal_tuple(()) == True",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n == 1:\n        return nums\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                temp = nums[i]\n                nums[i] = nums[i+1]\n                nums[i+1] = temp\n                swapped = True\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 1369,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return False\n    elif n == 1: \n        return True \n    elif n == 2: \n        return False \n    else: \n        return False \n",
        "test": "assert     dif_Square(5) == False, 'false'",
        "num_ids": 3452,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        for pattern in patterns:\n            if color!= pattern:\n                return False\n    return True\n",
        "test": "assert     is_samepatterns([],[]) == True, 'Checking wrong pattern'",
        "num_ids": 3808,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # This function is already written for you in the write_in_file function\n    return []\n",
        "test": "assert     find_tuples([1, 2, 3, 5, 6, 8, 9, 10], 7) == []",
        "num_ids": 3348,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(2, n + 1):\n        if (n % i == 0):\n            return False\n        elif i!= n:\n            return True\n    return False\n",
        "test": "assert     is_Diff(2) == False ",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s)%2!= 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     word_len(\"apple\") == 0",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    k=0\n    while k+1 < n:\n        k=k+1\n        if k==n:\n            continue\n        if n%k==0:\n            return k\n    return 0\n",
        "test": "assert     tetrahedral_number(1) == 0",
        "num_ids": 3069,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r <= 0:\n        return 0\n    volume = (4/3) * 3.14 * (r**3)\n    return volume\n",
        "test": "assert     volume_sphere(0.0) == 0.0",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    global ascii_value\n    char_list = list(strr)\n    ascii_value = 0\n    for i in range(len(char_list)):\n        ascii_value += ord(char_list[i])\n    return ascii_value % 26\n",
        "test": "assert ",
        "num_ids": 1174,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    numbers = list(range(1, n+1))\n    for i in range(len(numbers)):\n        if i > 0 and numbers[i-1] == numbers[i]:\n            return numbers[i-1]\n        \n    return numbers[-1]\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 4745,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return round(3.14*r*r,2)\n    \ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return round(3.14*r*r,2)\n",
        "test": "assert     surfacearea_sphere(0) == 0",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = n%6\n    if h==0:\n        h=3\n        n//=3\n    else:\n        h=h-1\n    return n\n",
        "test": "assert     centered_hexagonal_number(0) == 0",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n",
        "test": "assert     merge_dictionaries_three({'a':1, 'b':2, 'c':3}, {'a':1, 'b':2, 'c':3}, {'a':1, 'b':2, 'c':3}) == {'a':1, 'b':2, 'c':3}",
        "num_ids": 1871,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 3701,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    start, end = 1, N\n    closest = float('inf')\n    while start <= end:\n        mid = (start + end) // 2\n        if mid < N:\n            start = mid+1\n        elif mid > N:\n            end = mid-1\n        else:\n            closest = mid\n            break\n    return closest\n",
        "test": "assert     closest_num(1) == 1",
        "num_ids": 3228,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for item in list1:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n",
        "test": "assert     len_log(\"hello\") == 1, \"The function len_log() should return the length of the first word in the list\"",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return True\n    for i in range(len(str1)-len(sub_str) +1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "test": "assert     find_substring(\"abc\", \"abx\") == False",
        "num_ids": 1845,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n >= 0 and n <= 9):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_undulating(-5) == False",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert     power(2, 2) == 4",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_second = test_list[0][1]\n    for i in test_list:\n        if smallest_second > i[1]:\n            smallest_second = i[1]\n    return smallest_second\n",
        "test": "assert     index_minimum([(1,3),(1,2),(2,2),(1,3),(1,2),(2,2)]), 1",
        "num_ids": 3345,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    elif len(lst) == 2:\n        return min(lst[0], lst[1])\n    else:\n        mid = len(lst)//2\n        left = Find_Min_Length(lst[:mid])\n        right = Find_Min_Length(lst[mid:])\n        return min(left, right)\n",
        "test": "assert     Find_Min_Length([]) == 0, \"The list should be empty\"",
        "num_ids": 1163,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            divs+= 1\n    return divs\n",
        "test": "assert     divisor(0) == 0",
        "num_ids": 700,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = dict()\n    for l in list1:\n        if l not in d:\n            d[l] = 1\n        else:\n            d[l] += 1\n    return d\n",
        "test": "assert     frequency_lists('') == {}",
        "num_ids": 3153,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n    \n",
        "test": "assert multiply_num([1]) == 1",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n))[2:]\n",
        "test": "assert     decimal_to_binary(1) == '1'",
        "num_ids": 2891,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 27,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    for i in range(1,num):\n        if (num%i)==0:\n            return num//i\n    return num\n",
        "test": "assert     next_smallest_palindrome(1) == 1",
        "num_ids": 1334,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert     kth_element(arr=[1,2,3,4,5], k=2) == 2, \"kth_element\"",
        "num_ids": 1445,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # turn to lowercase\n    word = word.lower()\n    # split up words\n    lst = word.split('_')\n    # capitalize first letter of each word\n    for i in range(0, len(lst)):\n        lst[i] = lst[i].capitalize()\n    # return new string\n    return ''.join(lst)\n",
        "test": "assert     snake_to_camel(\"Hello\") == \"Hello\"",
        "num_ids": 3216,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # If m has exactly 2 distinct primes, then return the\n    # number of primes it has.\n    if m == 2:\n        return 1\n    \n    # A is the smallest prime to n.\n    A = 1\n    \n    # d is the largest prime that has n distinct primes.\n    d = min(n - 1, m)\n    \n    # Find the number of primes n that, when divided by m, have n\n    # distinct primes.\n    for i in range(1, m + 1):\n        \n        # Find primes in n that are smaller than i.\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                break\n        else:\n            # If primes have been found, the number of primes\n            # it has is the number of primes that have at least\n            # one prime that divides i.\n            # \n            # m has a factor of 2.\n            if i % 2 == 0:\n                A += 1\n            else:\n                break\n    \n    # If A is the Eulerian number, then it is the Eulerian\n    # number.\n    return A\n",
        "test": "assert     eulerian_num(2, 2) == 1",
        "num_ids": 4107,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # just in case of sorting a list with a string\n    if type(input_list) is not list:\n        raise TypeError('input_list must be a list')\n    if type(input_list) is not list:\n        raise TypeError('input_list must be a list of lists')\n    # create a new list with sorted sublists\n    new_list = []\n    for sublist in input_list:\n        new_list.append(sublist)\n    # sort the sublists\n    new_list.sort()\n    # return the new sorted list\n    return new_list\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 7007,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in lst:\n        if i:\n            cnt = cnt + 1\n    return cnt\n",
        "test": "assert     count([]) == 0, \"Count should return 0\"",
        "num_ids": 3004,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        if i in test_list:\n            continue\n        else:\n            test_list.append(i)\n    return test_list\n",
        "test": "assert     add_lists([1,2,3],[(1,2,3)]), 'Wrong return'",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i,j,k = 0,0,0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num2[j] < num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num1[i] > num2[j] and num2[j] > num3[k]:\n            result.append(num1[i])\n            i += 1\n        else:\n            result.append(num2[j])\n            j += 1\n            k += 1\n    while i < len(num1):\n        result.append(num1[i])\n        i += 1\n    while j < len(num2):\n        result.append(num2[j])\n        j += 1\n    while k < len(num3):\n        result.append(num3[k])\n        k += 1\n    return result\n",
        "test": "assert     merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 3968,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return odd_Equivalent(s, n-1) + odd_Equivalent(s, n-2)\n",
        "test": "assert     odd_Equivalent(1, 1) == 1",
        "num_ids": 4814,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    l = []\n    for item in nestedlist:\n        l.append(item)\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] == l[j]:\n                l[i] = None\n    return l\n",
        "test": "assert     common_in_nested_lists(nestedlist=[]) == []",
        "num_ids": 2008,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert         check_integer(\"3\")",
        "num_ids": 2689,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i == {} or i == None:\n            return True\n    return False\n",
        "test": "assert     empty_dit([{'a': 1, 'b': 2}]) == 0",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    # N is the number of elements in the tuple\n    if len(nums) == 0:\n        return 0\n    # Check if all elements are positive\n    if all(e >= 0 for e in nums):\n        # Initialize an empty string to store the result\n        result = ''\n        # Start at 0 as we already have the first positive element\n        for i in range(0, len(nums)):\n            # Add the element to the result\n            result += str(nums[i])\n        # Return the result\n        return int(result)\n    else:\n        raise ValueError('All elements in nums should be positive')\n",
        "test": "assert     tuple_to_int([0]) == 0",
        "num_ids": 1162,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    temp_list = []\n    for item in test_list:\n        temp_list.append(float(item))\n    return temp_list\n",
        "test": "assert     list_to_float([]) == []",
        "num_ids": 1726,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split())\n",
        "test": "assert     string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 2861,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for index, ele in enumerate(arr):\n        counter = 0\n        for item in arr:\n            if index + 1 < len(arr):\n                if arr[index] == arr[index + 1]:\n                    counter += 1\n            if counter == 1:\n                return arr[index]\n    return 'Nothing'\n",
        "test": "assert     search([1,1,1,1,1,1,1,1,1]) == 1",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max([max(i) for i in zip(*list1)])\n",
        "test": "assert     max_product_tuple([(1, 2), (2, 1)]) == 2",
        "num_ids": 1271,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n    amicable_numbers_sum_iter = 0\n    numbers = range(1, limit + 1)\n    for n in numbers:\n        if n not in amicable_numbers:\n            amicable_numbers.append(n)\n            amicable_numbers_sum += n\n        elif n == amicable_numbers_sum_iter:\n            amicable_numbers_sum += amicable_numbers_sum_iter\n            amicable_numbers_sum_iter = 0\n        elif amicable_numbers_sum_iter!= 0:\n            amicable_numbers_sum_iter += amicable_numbers_sum_iter\n            amicable_numbers_sum_iter = 0\n    return amicable_numbers_sum\n",
        "test": "assert     amicable_numbers_sum(1) == 1",
        "num_ids": 1496,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == b:\n        return 0\n    \n    angle = cmath.phase(a) + cmath.phase(b)\n    return angle\n",
        "test": "assert     angle_complex(complex(1,0), complex(0,0))==0",
        "num_ids": 1648,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) < 2:\n        return 0\n    else:\n        l = len(string)\n        #Initialize initial values\n        low_count = 0\n        high_count = 0\n        high_length = 0\n        low_length = 0\n        initial_length = 0\n        for i in range(len(string)):\n            if string[i] == '0':\n                low_count += 1\n            elif string[i] == '1':\n                high_count += 1\n            if low_count >= 1:\n                low_length += 1\n                initial_length = len(string) - low_count - high_count + low_length\n            elif high_count >= 1:\n                high_length += 1\n                initial_length = len(string) - low_count - high_count + high_length\n            if initial_length >= l:\n                low_length = 0\n                high_count = 0\n                high_length = 0\n    if initial_length > len(string) - 2:\n        return initial_length - len(string) - 2\n    else:\n        return initial_length\n        \n",
        "test": "assert     find_length(\"00000\"), \"Error, the number of 0s must be greater than the number of 1s.\"",
        "num_ids": 3069,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        return(a-b)\n    else:\n        return(b-a)\n    ",
        "test": "assert     sum(3,2) == 1",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"x and y must be ints\")\n    return x * y\n",
        "test": "assert     multiply_int(2, 3) == 6",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # get length of the string\n    length = len(str)\n    \n    # create an empty list for the result\n    result = []\n    \n    # loop through the string\n    for word in range(n):\n        if str.count(str[word]) > length:\n            result.append(str[word])\n    \n    # return the result\n    return result\n",
        "test": "assert     long_words(3, ['one', 'two', 'three', 'four', 'five']) == []",
        "num_ids": 2823,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return len(my_matrix) == len(my_matrix[0])\n",
        "test": "assert     magic_square_test(my_matrix = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == True",
        "num_ids": 1831,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Your code here\n    freq_dict = dict()\n    for num in nums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    max_freq = 0\n    freq = 0\n    for freq_num, count in freq_dict.items():\n        if count > max_freq:\n            max_freq = count\n            freq = freq_num\n    \n    return freq\n",
        "test": "assert     max_occurrences([1,2,2,3,3,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10]) == 3,'max_occurrences() should return 3'",
        "num_ids": 3575,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1[::-1]\n",
        "test": "assert     reverse_vowels(\"\") == \"\"",
        "num_ids": 1360,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2 = tuple(tup1)\n    return str(tup2)",
        "test": "assert     tup_string(tuple()) == \"()\"",
        "num_ids": 864,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return nums[0] + sum_negativenum(nums[1:])\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 1592,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # your code goes here\n    if n%2==0:\n        return(n/2)\n    else:\n        return(n-1)\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return round(count/len(nums))\n",
        "test": "assert     zero_count([1]) == 0",
        "num_ids": 6921,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pow = 2\n    sum = 0\n    while pow <= n:\n        sum = sum + pow\n        pow = pow + pow\n    if n == sum:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(49) == False",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r**2\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14*(r**2)\ndef circle_surface_area(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return (4/3)*3.14*r**3\ndef circle_volume(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return 3.14*(r**2)*4\n",
        "test": "assert     circle_circumference(10) == 135",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n    for element in test_list:\n        if type(element) is list:\n            for element2 in element:\n                num_list.append(element2)\n        else:\n            num_list.append(element)\n    return num_list\n",
        "test": "assert     extract_singly([]) == []",
        "num_ids": 3756,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # sort the list with bubble sort\n    n = len(nums)\n    for i in range(n-1):\n        # if element is bigger than the first element of the list\n        if nums[i] > nums[i+1]:\n            # swap the two elements\n            nums[i],nums[i+1] = nums[i+1],nums[i]\n            # swap left half of the list\n            p = i\n            for j in range(i,n):\n                # if it is the last element, it is already sorted\n                if j == n-1:\n                    # If it is the last element, remove the last element\n                    if nums[j] < nums[n-1]:\n                        # Swap the last element with the first element\n                        nums[p],nums[j] = nums[j],nums[p]\n                # If it is not the last element, swap the two elements\n                else:\n                    # swap the two elements\n                    nums[j],nums[p] = nums[p],nums[j]\n    # Return the sorted list\n    return nums\n",
        "test": "assert     f\"The input array is {[2, 4, 1, 5, 3, 6, 7, 9]}\" == \"The input array is [2, 4, 1, 5, 3, 6, 7, 9]\"",
        "num_ids": 1841,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            c+=1\n    return c\ndef count_differentpair(list1,list2):\n    '''\n    Write a function to count number items that are different in the same position of three given lists.\n    '''\n    c=0\n    for i in range(0,len(list1)):\n        if list1[i]!=list2[i]:\n            c+=1\n    return c\ndef count_all_t(list1,list2):\n    '''\n    Write a function to count number of distinct items in three given lists.\n    '''\n    c=0\n    for i in range(0,len(list1)):\n        if list1[i] not in list2:\n            c+=1\n    return c\ndef count_consecutive(list1,list2):\n    '''\n    Write a function to count number of items in consecutive lists.\n    '''\n    c=0\n    for i in range(1,len(list1)):\n        if list1[i-1]!=list1[i]:\n            c+=1\n    for i in range(0,len(list2)):\n        if list2[i-1]!=list2[i]:\n            c+=1\n    return c\ndef main():\n    '''\n    main function which takes user input and calls other functions in array_c.py file.\n    '''\n    user_input=input(\"Enter a list : \")\n    user_input_split=user_input.split(\",\")\n    l1,l2,l3=array_c.split_lists(user_input_split)\n    #print(l1)\n    print(count_all_t(l1,l2))\n    print(count_differentpair(l2,l3))\n    print(count_samepair(l1,l3))\n    print(count_differentpair(l3,l1))\n    print(count_samepair(l3,l1))\n    print(count_differentpair(l3,l1))\n    print(count_all_t(l1,l3))\n    print(count_differentpair(l1,l3))\n    print(count_differentpair(l3,l1))\n",
        "test": "assert     count_samepair([1,1], [2,2], [2,2]) == 0",
        "num_ids": 1674,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    L = 0\n    for x in range(len(Input)):\n        if type(Input[x]) == tuple:\n            L += 1\n    return L\n",
        "test": "assert     find_lists([]) == 0",
        "num_ids": 1227,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff=arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i]-arr[i-1])>max_abs_diff:\n            max_abs_diff=arr[i]\n    return max_abs_diff\n",
        "test": "assert     max_Abs_Diff([-5, 2, 0, 4, 9, 0]) == 9",
        "num_ids": 1552,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b:\n        return (a, b)\n    if b == n:\n        return None\n    if a > n:\n        return None\n    if a < n:\n        return None\n    if n % 2 == 0:\n        return None\n    \n    x = n / 2\n    y = n - x\n    \n    if a * a + b * b == n:\n        return (a, b)\n    elif a * a + b * b > n:\n        return None\n    elif a * a + b * b < n:\n        return None\n    elif a * a + b * b == n:\n        if x % 2!= 0:\n            return None\n        else:\n            if a * x + b * x == n:\n                return (a, b)\n            elif a * x + b * x > n:\n                return None\n            elif a * x + b * x < n:\n                return None\n            elif a * x + b * x == n:\n                return None\n        \n    if a * a == n:\n        if a == b:\n            return (a, b)\n        else:\n            if b % 2!= 0:\n                return None\n            else:\n                return None\n    if a * a == n:\n        if a == b:\n            return (a, b)\n        else:\n            if b % 2!= 0:\n                return None\n            else:\n                return None\n    if a * a > n:\n        if b % 2!= 0:\n            return None\n        else:\n            return None\n    if a * a < n:\n        return None\n    if a * a == n:\n        if b % 2!= 0:\n            return None\n        else:\n            return None\n    \n    \ndef find_x_y(a, b, n):\n    '''\n    Return the tuple that satisfies ax + by = n as a tuple.\n    '''\n    if find_solution(a, b, n):\n        return (a, b)\n    elif find_solution(n, b, n):\n        return (n, n)\n    elif find_solution(a, a, b):\n        return (a, a)\n    elif find_solution(a, n, b):\n        return (a, n)\n    elif find_solution(n, a, n):\n        return (n, n)\n    elif find_solution(a, b, a):\n        return (a, a)\n    elif find_solution(b, n, n):\n        return (b, n)\n    elif find_solution(a, a, b):\n        return (a, b)\n    elif find_solution(a, n, b):\n        return (a, n)\n    \n",
        "test": "assert     find_solution(3, 5, 0) == None",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_remove = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                list_remove.append(list2[j])\n                break\n            else:\n                continue\n        if len(list_remove) == 0:\n            return list1\n        else:\n            list_remove.clear()\n            continue\n    return list1\n",
        "test": "assert     remove_elements([], []) == []",
        "num_ids": 1746,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum = 0\n    for i in range(n, 0, -2):\n        sum = sum + i\n    return sum\n",
        "test": "assert     sum_series(0) == 0, \"The sum of series (0) is not correct\"",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l\n",
        "test": "assert     area_polygon(0, 1) == 0",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Edge case\n    if n == 0 or n == 1:\n        return n == 1\n    \n    # Recursive case\n    if n < 1:\n        return False\n    \n    # Recursive case\n    if n == 2:\n        return True\n    \n    # Get the 1st and 2nd terms of the number\n    return div_sum(n - 1) and div_sum(n - 2)\n",
        "test": "assert     div_sum(1) == 1",
        "num_ids": 1096,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.upper() == char.lower():\n            count += 1\n    return count\n",
        "test": "assert     count_char_position(\"\") == 0, 'count_char_position function works'",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    return 0\n",
        "test": "assert     find_even_pair([]) == 0",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2:\n        return n\n    else:\n        return next_power_of_2(n - 1)\n",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # Your code here\n    num=0\n    for i in range(len(a)):\n        if a[i]==x:\n            num+=1\n    return num",
        "test": "assert     frequency([1,1,2,2,2,3,3,3,3,4,4,4,5,5], 4) == 3",
        "num_ids": 640,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for index in range(m, n):\n        sum += list1[index]\n    return sum\n",
        "test": "assert     sum_range_list(0, 4, 4) == 0",
        "num_ids": 1396,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n",
        "test": "assert     perimeter_pentagon(0) == 0",
        "num_ids": 4083,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] =='s':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance('x') == 0, 'count_occurance function should return 0'",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0])!= type(test_tuple[1]):\n        return False\n    return True\n",
        "test": "assert not    check_type((\"a\", \"b\")) == \"c\"",
        "num_ids": 1375,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    left = 0\n    right = len(arr)-1\n    while left < right:\n        if arr[left] == x:\n            if left == right:\n                return False\n            return True\n        elif arr[right] == x:\n            return True\n        elif arr[left] < x:\n            left += 1\n        elif arr[right] > x:\n            right -= 1\n    return False\n",
        "test": "assert     is_majority([1,2,3,1,4,5], 3, 8) == False, \"is_majority([1,2,3,1,4,5], 3, 8)\"",
        "num_ids": 1678,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    total_bits = 0\n    while n>0:\n        remainder = n % 2\n        total_bits += remainder\n        n = n // 2\n    return total_bits\n",
        "test": "assert     count_Set_Bits(300), '300'",
        "num_ids": 1123,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index_values = [index for index, char in enumerate(str) if index % 2 == 1]\n    str = ''.join(str)\n    return str.translate(str.maketrans('','','''\\u03c0-\\u03c9'\n    \\u03c0-\\u03c7'''))\n    \n",
        "test": "assert     odd_values_string(\"A\") == \"A\"",
        "num_ids": 1131,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\n    pass\n",
        "test": "assert     min_of_three(0,0,0) == 0",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 228,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bitSet = set()\n    for i in range(n):\n        if (l-i) == r and i < n:\n            bitSet.add(r-i)\n            \n    return len(bitSet) == n\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(3,1,1) == 0, \"the given range should be (3,1,1)\"",
        "num_ids": 1728,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_length = len(arr)\n    re_arrange_array = [0] * (n+1)\n    for i in range(arr_length):\n        if arr[i] < 0:\n            for j in range(arr[i] - 1, -1, -1):\n                re_arrange_array[j] += 1\n    # print(re_arrange_array)\n    for i in range(n):\n        if re_arrange_array[i] > 0:\n            arr[i] = -arr[i]\n            # arr[i] = -arr[i] - 1\n            re_arrange_array[arr[i]] = 0\n    return arr\n",
        "test": "assert     re_arrange_array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1749,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # define the function\n    def replace_blank(str1,char):\n        # loop to look for character\n        for char in str1:\n            # if char is blank, replace it with character\n            if char =='':\n                return char + char\n        # if char is not blank, return original string\n        return str1\n    # return the new string\n    return replace_blank(str1,char)\n    ",
        "test": "assert     replace_blank('','') == ''",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #TODO: use heapq to return the n largest elements\n    \n    heap = []\n    \n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    \n    return heap\n",
        "test": "assert     larg_nnum([1,2,3,4,5],5)==[1,2,3,4,5]",
        "num_ids": 1256,
        "indeed": false
    },
    {
        "number": 233,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h)/3\n",
        "test": "assert     lateralsuface_cylinder(0,0) == 0",
        "num_ids": 1382,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for side in range(1, l + 1):\n        volume += side * side * side\n    return volume\n",
        "test": "assert volume_cube(0) == 0.0",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 235,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    for i in range(0,n):\n        if (i%2 == 0):\n            count = count + 1\n    if (count > 0):\n        return 1\n    else:\n        return 0\n",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    for el in test_list:\n        my_dict[el[0]] = my_dict.get(el[0], 0) + 1\n    return my_dict\n",
        "test": "assert     check_occurences([('a','a')]) == {'a':1}",
        "num_ids": 3664,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    for i in range(len(str)-1):\n        if str[i:i+2] == str[i+1:i+3]:\n            count += 1\n    return count\n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # your code here\n    if m > 0 and n > 0:\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            return get_total_number_of_sequences(m, n//2)\n        else:\n            return get_total_number_of_sequences(m, n//2) + get_total_number_of_sequences(m, n//2)\n    else:\n        return 0\n        \n",
        "test": "assert     get_total_number_of_sequences(0,0) == 0",
        "num_ids": 1526,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    return list1\n",
        "test": "assert     replace_list([], []) == [], \"The lists are not the same\"",
        "num_ids": 3369,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a')+str1.count('e')+str1.count('i')+str1.count('o')+str1.count('u')+str1.count('A')+str1.count('E')+str1.count('I')+str1.count('O')+str1.count('U')\n",
        "test": "assert     count_charac('a') == 1",
        "num_ids": 1184,
        "indeed": false
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = 2\n    while (x*x <= N):\n        if (N % x == 0):\n            N = N/x\n        else:\n            x = x + 2\n    return N\n",
        "test": "assert next_Perfect_Square(1) == 1",
        "num_ids": 3718,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        max_sum = max(max_sum, curr_sum)\n        if i!= len(arr) - 1:\n            curr_sum -= arr[i + 1]\n    return max_sum\n",
        "test": "assert max_sum([]) == 0",
        "num_ids": 1210,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = number\n    while square_root > 1:\n        if square_root % 2 == 0:\n            square_root = square_root / 2\n        else:\n            square_root = (square_root * 3) + 1\n    return square_root\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 2294,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 1: \n        return 1\n    if str[0] == str[-1]: \n        return 1\n    max_sub = 1\n    res = 1\n    for i in range(1, len(str)): \n        if str[i] == str[i-1]: \n            continue\n        if len(str[i:]) > max_sub: \n            max_sub = len(str[i:])\n            res = i\n    return res + 1\n",
        "test": "assert     lps('a') == 1, \"lps function does not return 1\"",
        "num_ids": 2766,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # your code goes here\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i/i)\n    return sum\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 1059,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    new_array_nums1=[]\n    new_array_nums2=[]\n    new_array_nums1.extend(array_nums1)\n    new_array_nums1.extend(array_nums2)\n    for i in range(len(new_array_nums1)):\n        if new_array_nums1[i] in new_array_nums2:\n            new_array_nums2.remove(new_array_nums1[i])\n    return new_array_nums2\n",
        "test": "assert     intersection_array([1,3,5,7], [3,5,7,9]) == []",
        "num_ids": 1870,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x = str(x)\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X([3,2,1,3,2,3],5)==0, 'incorrect count_X()'",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_of_elements = list\n    \n    #breakpoint()\n    #print(\"LIST:\",list)\n    \n    for i in range(len(list_of_elements)):\n        if element == list_of_elements[i]:\n            list_of_elements.insert(i,element)\n            break\n        \n    #print(\"LIST AFTER INSERT:\",list_of_elements)\n    \n    return list_of_elements\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     insert_element([], \"hello\") == []",
        "num_ids": 3177,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    '''\n    Input\n    a: The complex number that you want to convert.\n    \n    Output\n    The polar coordinates of the complex number.\n    '''\n    c=complex(numbers)    \n    deg = c.real**2 + c.imag**2\n    rad=math.sqrt(deg)\n    polar=c.real*c.real + c.imag*c.imag\n    return polar,rad\n",
        "test": "assert     convert(0)==convert(0)",
        "num_ids": 3521,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n",
        "test": "assert     count_integer([]) == 0, \"The function should return 0, because there is nothing in the list.\"",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    if n == 0:\n        return []\n    if n == 1:\n        return [tuple(l)]\n    else:\n        return [tuple(l)] + combinations_colors(l, n-1)\n",
        "test": "assert     len(combinations_colors([1,2,3,4,5,6,7,8,9,10], 6)) == 6",
        "num_ids": 4156,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    from math import sqrt\n    primes_list = []\n    for i in range(1, n):\n        for j in range(2, int(sqrt(i))+1):\n            if i % j == 0:\n                break\n        else:\n            primes_list.append(i)\n    return len(primes_list)\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 1397,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Your code here\n    return b,a\n",
        "test": "assert     swap_numbers(5,4) == (4,5), \"Test failed\"",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n",
        "test": "assert     maximize_elements((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13)) == (8, 9, 10, 11, 12, 13)",
        "num_ids": 4079,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    x = 2\n    for i in range(3, n):\n        if n % i == 0:\n            x = i\n            break\n    return x\n",
        "test": "assert     newman_prime(3) == 2",
        "num_ids": 1240,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print(f\"Called function division_elements({test_tup1}, {test_tup2})\")\n",
        "test": "assert     division_elements((1, 2), (3, 4, 5, 6)) == ((1, 2), (1, 2), (3, 4), (5, 6))",
        "num_ids": 3593,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "test": "assert     split_two_parts([1,2,3,4], 2) == ([1,2], [3,4])",
        "num_ids": 2614,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 0\n    \n    if h_age < 2:\n        years = h_age\n    elif 2 <= h_age <= 4:\n        years = h_age - 2\n    else:\n        years = h_age - 4\n    \n    return years\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split = []\n    for i in range(0, len(S), step):\n        split.append(S[i:i+step])\n    return split\n",
        "test": "assert     list_split([1,2,3,4,5], 5) == [[1,2,3,4,5]]",
        "num_ids": 1088,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     lateralsurface_cube(0) == 0",
        "num_ids": 3047,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # return a value from n * n\n    return n * n\n",
        "test": "assert     square_Sum(0) == 0, \"We should have a zero\"",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n    if n == 176:\n        return 176\n    if n == 177:\n        return 177\n    if n == 178:\n        return 178\n    if n == 179:\n        return 179\n    if n == 180:\n        return 180\n    if n == 181:\n        return 181\n    if n == 182:\n        return 182\n    if n == 183:\n        return 183\n    i",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 6724,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return(ord(k))\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for even in arr:\n        if even % 2 == 0:\n            even_sum += even\n    return even_sum\n    \ndef sum_odd_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    odd_sum = 0\n    for odd in range(len(arr)):\n        if (odd % 2) == 1:\n            odd_sum += arr[odd]\n    return odd_sum\n    \ndef sum_even_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers and odd numbers at even positions of a list.\n    '''\n    even_odd_sum = 0\n    for even in range(len(arr)):\n        if even % 2 == 0:\n            even_odd_sum += arr[even]\n    return sum_even_and_even_index(arr) + sum_odd_and_odd_index(arr)\n    \ndef selectionSort(arr):  \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n",
        "test": "assert     sum_even_and_even_index([]) == 0",
        "num_ids": 1351,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([1 if i % 5 == 0 else i for i in range(n)])\n",
        "test": "assert     even_Power_Sum(1) == 1",
        "num_ids": 1076,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted = []\n    for element in test_list:\n        rear_extracted.append(element[1])\n    return rear_extracted\n",
        "test": "assert     rear_extract([(3, 5), (7, 2), (4, 3)]), \"The return should be [7, 2, 5]\"",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup_str1 = str(test_tup1[0]) +'' + str(test_tup1[1])\n    test_tup_str2 = str(test_tup2[0]) +'' + str(test_tup2[1])\n    test_str1 = test_tup_str1.split(' ')\n    test_str2 = test_tup_str2.split(' ')\n    test_str1.remove(test_str1[-1])\n    test_str2.remove(test_str2[-1])\n    if len(test_str1) == len(test_str2):\n        for x in range(0, len(test_str1)):\n            if test_str1[x]!= test_str2[x]:\n                return test_tup2\n    return test_tup2\n",
        "test": "assert     substract_elements((1, 2, 3, 4, 5, 6), (3, 4, 5, 6)) == (3, 4, 5, 6)",
        "num_ids": 5162,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n % 2 == 0: \n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2)\n    else:\n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2) + 2\n        \ndef even_binomial_Coeff_Sum_V2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n % 2 == 0: \n        return even_binomial_Coeff_Sum_V2(n - 1) + even_binomial_Coeff_Sum_V2(n - 2)\n    else:\n        return even_binomial_Coeff_Sum_V2(n - 1) + even_binomial_Coeff_Sum_V2(n - 2) + 2\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 2156,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # YOUR CODE HERE\n    return 0.0\n",
        "test": "assert     volume_cylinder(0,2) == 0",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.copy()\n",
        "test": "assert     dict_filter({'a':10,'b':20, 'c':30},10) == {'a':10, 'b':20, 'c':30}",
        "num_ids": 943,
        "indeed": false
    },
    {
        "number": 278,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if test_tup[0] < i:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements([]) == 0, 'empty tuple'",
        "num_ids": 1218,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 21,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 1\n    else: \n        return 1\n",
        "test": "assert     is_num_decagonal(0) == 0, 'is_num_decagonal returns True'",
        "num_ids": 1525,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n    return (False, -1)\n",
        "test": "assert     sequential_search([1, 2, 3], 1) == (True, 0)",
        "num_ids": 1379,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    set_list = set(test_list)\n    set_list = list(set_list)\n    if len(set_list)!= len(set(set_list)):\n        return False\n    return True\n",
        "test": "assert     all_unique([]) == True, 'false'",
        "num_ids": 3173,
        "indeed": false
    },
    {
        "number": 282,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # start writing your code here\n    return [x for x in nums1 if x not in nums2]\n    pass\n",
        "test": "assert     sub_list([0,0,0,0,0], [0,0,0,0,0]) == []",
        "num_ids": 1553,
        "indeed": false
    },
    {
        "number": 283,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        raise TypeError(\"Error: n must be an int\")\n    elif n < 0 or n % 10 > 7 or n == 0: \n        raise ValueError(\"Error: n must be a number between 0 and 9\")\n    elif n == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     validate(1111), '1111 should be an integer'",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for index, element in enumerate(list):\n        if element!= element:\n            return False\n    return True\n",
        "test": "assert     check_element([],1) == True",
        "num_ids": 1183,
        "indeed": false
    },
    {
        "number": 285,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(?P<a>[a-zA-Z])(?P<b>[b-zA-Z]+)')\n    match = pattern.search(text)\n    return match!= None\n",
        "test": "assert     text_match_two_three('abc')!= 'abc'",
        "num_ids": 1232,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Number of sub array\n    n_sub_array = (k-1) * (k-1)\n    max_sum = a[0]\n    count = 0\n    \n    # For every k-1 sub-array\n    for i in range(0,n-n_sub_array+1):\n        \n        # For every k-1 sub-array\n        for j in range(0,k-1):\n            \n            # If i is the last sub-array\n            if i == n-n_sub_array:\n                # If j is the last sub-array\n                if j == k-1:\n                    # Assign max sum\n                    max_sum = a[i] + a[i+j+1]\n                # Else assign max sum\n                else:\n                    # Set value of sub-array\n                    max_sum = max(a[i+j+1],a[i+j+2])\n            # Else if j is not last sub-array\n            else:\n                # Set value of sub-array\n                max_sum = max(a[i+j+1],a[i+j+2])\n        \n        # Increment count\n        count += 1\n    # Return max sum\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([3,4,1,1,2], 3, 3) == 3, \"Max sub array sum not equal\"",
        "num_ids": 2132,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    return (n ** 2)\n",
        "test": "assert     square_Sum(3) == 9",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n    return max_length\n",
        "test": "assert     max_length([]) == 0",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    elif k == 0 or k == 1:\n        return n\n    else:\n        return int(n/2 - k) + count_no_of_ways(n - 2, k - 1) \n        \nprint(count_no_of_ways(7, 2))\n",
        "test": "assert     count_no_of_ways(1, 1) == 1, \"count_no_of_ways method failed to return 1\"",
        "num_ids": 3566,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n > m: # if n is greater than m\n        a = n\n        b = m\n        while a > 0:\n            a = a // 10\n            b = b // 10\n        return b\n    else:\n        return n\n",
        "test": "assert     find(0.5,0.5) == 0.5",
        "num_ids": 3113,
        "indeed": false
    },
    {
        "number": 293,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(w*w+h*h)\n    b=math.sqrt((w+h)/2*w*h)\n    c=math.sqrt((w+h)/2*w*h*2)\n    if a==b and b==c:\n        return True\n    elif a==b or a==c or b==c:\n        return False\n    else:\n        return True\n",
        "test": "assert     otherside_rightangle(360,0) == 0",
        "num_ids": 4750,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) <= 0:\n        return None\n    else:\n        return max(listval)\n",
        "test": "assert     max_val([1]) == 1",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number%i==0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "test": "assert         sum_div(3) == 1",
        "num_ids": 817,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            inv += 1\n            arr[i + 1], arr[i] = arr[i], arr[i + 1]\n    return inv\n",
        "test": "assert     get_Inv_Count([1,1,3,3,3,3,2,1,4]) == 2",
        "num_ids": 992,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for item in list1:\n        if type(item) == list:\n            new_list.extend(flatten_list(item))\n        else:\n            new_list.append(item)\n    return new_list\n",
        "test": "assert     flatten_list([[1, 2], [3, 4, 5]]) == [1, 2, 3, 4, 5]",
        "num_ids": 1564,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    max = 0\n    for x in stdata:\n        if x[1] > max:\n            max = x[1]\n    return max\n",
        "test": "assert     max_aggregate([(1, 3), (1, 2), (2, 3), (3, 4)]), 'The function does not return the max aggregate'",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n<2: \n        return 0\n    s = 0\n    while n>0: \n        s = s + n & 1\n        n >>= 1\n    return s\n",
        "test": "assert     count_binary_seq(0) == 0",
        "num_ids": 1586,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth(n, d):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return 1 + depth(n-1, d)\n    return depth(len(d), d)\n",
        "test": "assert     dict_depth( {} ) == 0",
        "num_ids": 1256,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #If element is found at beginning of input array, return true\n    if arr[ranges[0]] == index :\n        return True\n    elif arr[ranges[1]] == index :\n        return True\n    elif arr[ranges[0]] < index :\n        return find_Element(arr,ranges,rotations,index)\n    elif arr[ranges[0]] > index :\n        return find_Element(arr,ranges,rotations,index)\n    else :\n        return False\n    \ndef count_ranges(arr,ranges) :\n    '''\n    Write a python function to count element ranges.\n    '''\n    count = 0\n    for i in range(len(ranges)) :\n        if find_Element(arr,ranges,i,arr[ranges[i]]) :\n            count += 1\n    return count\n",
        "test": "assert     find_Element([1,2,3,4], [0,1,2,3], 1, 1) == 1",
        "num_ids": 2224,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    s = set()\n    for w in words:\n        if w.startswith('p'):\n            s.add(w)\n    return list(s)\n",
        "test": "assert         start_withp([ 'p' ]) == ['p']",
        "num_ids": 1530,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(index == n):\n        return a[k-1]\n    if(k >= len(a)):\n        return 0\n    if(a[k] > a[index]):\n        a[index] = a[k]\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), a[k] + max_sum_increasing_subseq(a, n, index, k + 1))\n",
        "test": "assert     max_sum_increasing_subseq([1,1,2,3,4], 4, 2, 3) == 4",
        "num_ids": 2259,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append([])\n        for j in range(n):\n            colon[i].append(tuplex[i][j])\n    return colon\n",
        "test": "assert     colon_tuplex([1,2,3], 2,4) == (1,2,3)",
        "num_ids": 1726,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    result = []\n    product = 1\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = product * (nums1[i] * nums2[j])\n        result.append(product)\n        product = 1\n    \n    return result\n    \ndef main():\n    nums1 = [1, 2, 3, 4, 5]\n    nums2 = [10, 2, 3, 4, 5]\n    N = 4\n    print(large_product(nums1, nums2, N))\n    \nif __name__ == '__main__':\n    main()",
        "test": "assert     large_product([1,3,5,7,9], [2,4,6,8,10], 6) == [2,2,2,2,2,2,2,2]",
        "num_ids": 2345,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(3,3) == 3",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('') == ()",
        "num_ids": 1278,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # your code goes here\n    mask = 1\n    \n    #print(n)\n    for i in range(32,n-1):\n        #print(i)\n        mask = mask >> 1\n        #print(mask)\n    mask = mask | 1\n    #print(mask)\n    return mask\n",
        "test": "assert     set_left_most_unset_bit(0) == 1",
        "num_ids": 1348,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 0\n    # y = r^3 - h^2 * r\n    y = math.pow(r,3)-(h*math.pow(r,2))\n    # compute y\n    while (y >= 0):\n        volume = volume + (y * math.pow(3,2))\n        y = y - 1\n    return volume\ndef height_cone(h):\n    '''\n    Write a function to find the height of a cone.\n    '''\n    return h\ndef height_cylinder(r,h):\n    '''\n    Write a function to find the height of a cylinder.\n    '''\n    return r*math.pow(h,2)\ndef distance_cone(r,h):\n    '''\n    Write a function to find the distance of a cone.\n    '''\n    return (h*math.pow(r,2))\ndef distance_cylinder(r,h):\n    '''\n    Write a function to find the distance of a cylinder.\n    '''\n    return (r*math.pow(h,2))\n",
        "test": "assert     volume_cone(0,0) == 0",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    num = n; \n    if n < 2: \n        return num \n    else: \n        return highest_Power_of_2(n - 1) \n",
        "test": "assert     highest_Power_of_2(0) == 0",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [None]*(n+1) \n    lucas[0] = 0\n    lucas[1] = 1\n    for i in range(2, n+1): \n        lucas[i] = lucas[i-1] + lucas[i-2] \n    return lucas[n]\n",
        "test": "assert     find_lucas(2) == 1",
        "num_ids": 1033,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string = string.replace('\\\\n','')\n    string = string.replace('\\\\t','')\n    list_.extend(string.split())\n    return list_\n",
        "test": "assert     add_string([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], \"asdasdasdasdasd\")",
        "num_ids": 2970,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if not l1:\n        return {}\n    elif not l2:\n        return {l3: l1}\n    elif not l3:\n        return {l1: l2}\n    elif l1 == l2:\n        return {l3: l1}\n    else:\n        new_dict = {}\n        for k in l2:\n            new_dict[k] = convert_list_dictionary(l1[k], l2[k], l3)\n        return new_dict\n",
        "test": "assert     convert_list_dictionary(['a','b'], ['a','b','c'], ['a','b']) == {'a': {'b': {'c': 'a'}}}",
        "num_ids": 3477,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    x = 0\n    y = 0\n    for i in range (1, n+1):\n        x += i\n        y += i\n    return max (x, y)",
        "test": "assert     get_max_sum(0) == 0.0",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    print(type(input_list))\n    print(input_list)\n    max_length = 0\n    if len(input_list)>max_length:\n        max_length = len(input_list)\n    return max_length\n",
        "test": "assert     max_length_list([]) == 0",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup[0]!= test_tup[1]:\n        return False\n    return True\n",
        "test": "assert     check_distinct((1,2,3,1,3)) == False",
        "num_ids": 3065,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    result = []\n    for x in str1:\n        if x not in result:\n            result.append(x)\n    return result[0]\n",
        "test": "assert     first_non_repeating_character('a') == 'a', \"First non-repeating character 'a' should be 'a'\"",
        "num_ids": 1903,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string, re.I):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_char('A') == True",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a == b or b == c or a == c:\n        return a\n    if a > b and b > c:\n        return b\n    if a > c and c > b:\n        return c\n    if a > b and b < c:\n        return b\n    if a < b and b < c:\n        return c\n    if a < b and b > c:\n        return c\n",
        "test": "assert     median_numbers(2,1,3) == 1",
        "num_ids": 1244,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s += int(str(num)[-1])\n    return s\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_test = 0\n    for i in range(len(test_tup1)):\n        xor_test = xor_test ^ test_tup1[i]\n    for i in range(len(test_tup2)):\n        xor_test = xor_test ^ test_tup2[i]\n    return xor_test\n",
        "test": "assert     bitwise_xor((1,2,3,4,5), (1,3,2,4,5)) == False",
        "num_ids": 1709,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # write your code here\n    if len(test_list) == 0:\n        return 0\n    elif len(test_list) == 1:\n        return 1\n    elif len(test_list) == 2:\n        return 2\n    else:\n        return 3\n    ",
        "test": "assert     extract_freq(['one', 'two', 'three', 'one', 'two', 'three']) == 3",
        "num_ids": 2946,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    lst = []\n    for i in range(len(test_tup1)):\n        lst.append(test_tup1[i])\n        lst.append(test_tup2[i])\n    return tuple(lst)\n",
        "test": "assert     add_nested_tuples(('a',), ('b',)) == ('a', 'b')",
        "num_ids": 3697,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a>b:\n        return b\n    else:\n        return a\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    c=a+b\n    return c/2\n    \ndef median(a,b):   \n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a>b:\n        if a>=b:\n            return (a+b)/2\n        else:\n            return (b+a)/2\n    else:\n        return a\n",
        "test": "assert     minimum(2,2) == 2",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        tuplex.index(tuple1)\n        return True\n    except ValueError:\n        return False\n    except:\n        return False\n",
        "test": "assert     check_tuplex((\"V\", \"E\", \"S\", \"M\", \"B\", \"T\", \"A\"), (\"G\", \"S\", \"M\", \"B\", \"T\", \"A\")) == False",
        "num_ids": 1018,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2):\n        return True\n    return False\n",
        "test": "assert     find_Parity(3) == True",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(str(n)) == 1:\n        return n\n    else:\n        return n%10 + rearrange_bigger(int(n/10))*10\n",
        "test": "assert     rearrange_bigger(1) == 1",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #get number of elements in second array\n    size_second_array = len(nums2)\n    #get number of elements in first array\n    size_first_array = len(nums1)\n    #build a heap\n    heap = []\n    for i in range(size_first_array):\n        for j in range(size_second_array):\n            if nums1[i] + nums2[j] == k:\n                heapq.heappush(heap,[nums1[i],nums2[j]])\n",
        "test": "assert     k_smallest_pairs([1,2,3,4,5], [3,4,5,6,7], 7) == 2",
        "num_ids": 3096,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return list1[0]\n    else:\n        return list1[0] * list1[1]\n",
        "test": "assert     min_product_tuple([(1,2,3,4)]) == (1, 2, 3, 4)",
        "num_ids": 5562,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n",
        "test": "assert     min_val([3,6,4,7,0,9]) == 0, \"Min_val(List) test failed\"",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    words = word.split('_')\n    words = [x.title() for x in words]\n    return ''.join(words)\n",
        "test": "assert     snake_to_camel(\"*\") == \"*\"",
        "num_ids": 1543,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [el for el in l if el % 2!= 0]\n    \ndef replace_string(l, string):\n    '''\n    Write a python function to replace a particular string with another string.\n    '''\n    return l\n    \ndef print_odd(l):\n    '''\n    Write a python function to print out all odd numbers in a given list.\n    '''\n    return l\n    \ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    return [el for el in l if el % 2 == 0]\n    \ndef replace_string(l, string):\n    '''\n    Write a python function to replace a particular string with another string.\n    '''\n    return l\n    \ndef print_even(l):\n    '''\n    Write a python function to print out all even numbers in a given list.\n    '''\n    return l\n    \ndef get_nth_element(l, n):\n    '''\n    Write a python function to get the nth element of a given list.\n    '''\n    return l[n]\n    \ndef reverse_string(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return l[::-1]\n    \ndef remove_duplicates(l):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return [el for el in l if el not in l[:l.index(el)]]\n    \ndef convert_to_int(l):\n    '''\n    Write a python function to convert a given list to a single int.\n    '''\n    return sum(l)\n    \ndef create_vowels(l):\n    '''\n    Write a python function to convert a given list to a single int.\n    '''\n    return [el for el in l if el.lower() in 'aeiou']\n    \ndef get_unique_letters(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return list(set(el for el in l))\n    \ndef convert_to_string(l):\n    '''\n    Write a python function to convert a given list to a single string.\n    '''\n    return ''.join(map(str,l))\n    \ndef get_num_unique_letters(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return len(set(el for el in l))\n    \ndef get_unique_numbers(l):\n    '''\n    Write a python function to get all the unique numbers in a given list.\n    '''\n    return sum(map(int,set(el for el in l)))\n    \ndef reverse_string_numbers(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return [int(el) for el in l[::-1]]\n    \ndef get_nth_repeating_numbers(l, n):\n    '''\n    Write a python function to get the nth repeating numbers in a given list.\n    '''\n    return l[l.index(l[n])+1:]\n    \ndef get_nth_digit(l, n):\n    '''\n    Write a python function to get the nth digit in a given list.\n    '''\n    return l[n]\n    \ndef is_palindrome(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_2(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_3(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef get_nth_letter(l, n):\n    '''\n    Write a python function to get the nth letter in a given list.\n    '''\n    return l[n]\n    \ndef get_num_unique_letters_2(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return sum(map(int,l))\n    \ndef reverse_string_numbers_2(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return [int(el) for el in l[::-1]]\n    \ndef remove_duplicates_2(l):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return [el for el in l if el not in l[:l.index(el)]]\n    \ndef get_nth_letter_2(l, n):\n    '''\n    Write a python function to get the nth letter in a given list.\n    '''\n    return l[n]\n    \ndef reverse_string_numbers_2(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return [int(el) for el in l[::-1]]\n    \ndef remove_duplicates_3(l):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return [el for el in l if el not in l[:l.index(el)]]\n    \ndef get_nth_letter_3(l, n):\n    '''\n    Write a python function to get the nth letter in a given list.\n    '''\n    return l[n]\n    \ndef get_num_unique_letters_3(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return sum(map(int,l))\n    \ndef is_palindrome_3(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_4(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_5(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef reverse_string_numbers_4(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return [int(el) for el in l[::-1]]\n    \ndef remove_duplicates_4(l):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return [el for el in l if el not in l[:l.index(el)]]\n    \ndef get_nth_letter_4(l, n):\n    '''\n    Write a python function to get the nth letter in a given list.\n    '''\n    return l[n]\n    \ndef get_num_unique_letters_4(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return sum(map(int,l))\n    \ndef is_palindrome_5(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_6(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_7(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef reverse_string_numbers_5(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    retur",
        "test": "assert     remove_odd([]) == [], \"Expected an empty list\"",
        "num_ids": 1686,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([(1,2),(3,4),(5,6)],0) == (1,2)",
        "num_ids": 1286,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([1,2,3,4,5], [6,7,8,9,10]) == False, \"the sequence is not overlapping\"",
        "num_ids": 1781,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    highest = 1\n    for x in arr:\n        if x>highest:\n            highest=x\n    return highest\n",
        "test": "assert     max_Product([5,4,9,1,3]) == 9",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # use a dictionary to find if an element is present in another.\n    \n    # getting the first element in the list \n    elements = dict() \n    for i in Input: \n        if i not in elements: \n            elements[i] = 0 \n        elements[i] += 1 \n    # looping through the dictionary \n    for i in elements: \n        if elements[i] == 1: \n            return i \n    \n    # return the key \n    return 'Not Found'\n    ",
        "test": "assert     group_tuples([1, (1, 2), (1, 2, 3), (1, 2, 3, 4)]) == 1",
        "num_ids": 1555,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    len_lst = len(lst)\n    if len_lst==0: \n        return \"The list is empty!\"\n    elif len_lst==1: \n        return lst[0] \n    else: \n        for i in range(len_lst-1): \n            if lst[i] > lst[i+1]: \n                temp = lst[i+1] \n                lst[i+1] = lst[i] \n                lst[i] = temp \n    return max(lst)\n    \n",
        "test": "assert     (Find_Max([5,4,3,2,1]) == 5), \"min_length\"",
        "num_ids": 1091,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum([int(i) for i in list1])\n",
        "test": "assert     round_and_sum([]) == 0",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube=[]\n    for i in range(1,n+1):\n        cube.append(i**3)\n    print(cube)\n    sum=0\n    for i in range(len(cube)):\n        sum+=cube[i]\n    return sum\n",
        "test": "assert     cube_Sum(0) == 0",
        "num_ids": 2869,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    out = []\n    for i in range(len(test_tup)):\n        out.append(test_tup[i])\n    return tuple(out)\n",
        "test": "assert     concatenate_tuple((1,2))!= 1",
        "num_ids": 3227,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n+find_Average_Of_Cube(n-1))\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 964,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[0])\n",
        "test": "assert     extract_rear([(1, 'a'), (2, 'b'), (3, 'c')]) == (1, 'a')",
        "num_ids": 1225,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    result = 0\n    for i in range(len(list1)): \n        if list1[i] == x: \n            result += 1\n    return result\n",
        "test": "assert     count_element_in_list([], 'c') == 0",
        "num_ids": 1122,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    nums_set = set(nums)\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n",
        "test": "assert     filter_oddnumbers([]) == [], \"filter_oddnumbers failed\"",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt.count('/') == 4:\n        # if the date is in the format \"MM/DD/YYYY\", assume that it is a month and do it the hard way\n        dt = dt.replace('/', '-')\n        dt = dt.replace('/', '-')\n        dt = dt.replace('/', '-')\n        dt = dt.replace('/', '-')\n        dt = dt.replace('/', '-')\n    elif dt.count('/') == 3:\n        # if the date is in the format \"MM-DD\", assume it is a day and do it the hard way\n        dt = dt.replace('-', '-')\n        dt = dt.replace('-', '-')\n        dt = dt.replace('-', '-')\n    elif dt.count('/') == 2:\n        # if the date is in the format \"MM-DD\", assume it is a month and do it the hard way\n        dt = dt.replace('-', '-')\n        dt = dt.replace('-', '-')\n        dt = dt.replace('-', '-')\n    elif dt.count('/') == 1:\n        # if the date is in the format \"MM-DD\", assume it is a month and do it the hard way\n        dt = dt.replace('-', '-')\n    elif dt.count('/') == 0:\n        # if the date is in the format \"YYYY-MM-DD\", assume it is a month and do it the hard way\n        dt = dt.replace('-', '-')\n    return dt\n",
        "test": "assert     change_date_format(\"12-12-12\") == \"12-12-12\"",
        "num_ids": 2132,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    while size > 1:\n        #print(size)\n        for i in range(0, size-1):\n            j = i\n            while j >= 0 and my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n                j -= 1\n        #print(my_list)\n        size = size - 1\n    #print(my_list)\n    return my_list\n",
        "test": "assert     shell_sort([]) == [],'shell_sort should return an empty array'",
        "num_ids": 1570,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0] and test_tup1[1] == test_tup2[1]) or (test_tup1[0]!= test_tup2[0] and test_tup1[1] == test_tup2[1])\n",
        "test": "assert     and_tuples((1, 2, 3), (4, 5, 6))!= (1, 3, 6)",
        "num_ids": 1156,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print(a,b,c)\n    return a*(b**2) + c*b\n",
        "test": "assert     parabola_directrix(0, 0, 0) == 0",
        "num_ids": 5352,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = 0\n    \n    for element in list1:\n        if element in list2:\n            common+=1\n        else:\n            return False\n        \n    if common == len(list2):\n        return True\n    else:\n        return False\n",
        "test": "assert     common_element([1, 1], [1, 2]) == True",
        "num_ids": 1752,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height=int(height)\n    if height>=0:\n        if base1>base2:\n            height=height+1\n            base=base2\n        else:\n            height=height+1\n            base=base1\n    if height<0:\n        height=0\n        base=base1\n    return(base)\n",
        "test": "assert     median_trapezium(1,1,3) == 1, \"fail to find 1\"",
        "num_ids": 2113,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f'{arr[i]} is greater than {number}')\n            return True\n    print(f'{arr[i]} is greater than {number}')\n    return False\n",
        "test": "assert     check_greater([1, 3, 5, 7], 5), \"check_greater(5, 7) should be True\"",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Retrieves the minimum number of characters that should be in the string and the maximum number of characters that can be in the string.\n    minimum_count = min(len(text), len(text.replace(' ', '').replace('&', '').replace('\"', '').replace(',', '')))\n    # Builds the string.\n    string = ''\n    for i in range(minimum_count):\n        string += text[i]\n    # Returns the string.\n    return string\n",
        "test": "assert     text_match_one('a is a b')",
        "num_ids": 7466,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0:\n        if n % 10 == 0:\n            return int(n/10)\n        else:\n            return int(n%10)\n    else:\n        return 0\n",
        "test": "assert     last_Digit(1) == 1",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 436,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if(i<0):\n            list2.append(i)\n    return list2\n",
        "test": "assert neg_nos([]) == [], \"Failed\"",
        "num_ids": 947,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    lst = list(str1)\n    for index, char in enumerate(lst):\n        if index % 2!= 0:\n            lst[index] = char\n    return \"\".join(lst)\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 3322,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total_count = 0\n    for i in range(len(test_list) - 1):\n        total_count += 1\n        if i > 0:\n            if test_list[i] > test_list[i - 1]:\n                total_count += 1\n    return total_count\n",
        "test": "assert     count_bidirectional([(1,1),(1,1),(2,3)]) == 2",
        "num_ids": 3227,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    return sum(L)\n",
        "test": "assert     multiple_to_single([]) == 0, \"incorrect result\"",
        "num_ids": 2858,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = r'((?:[Ee][+-]?[^0-9])+)(?=,|$)'\n    match = re.search(regex, text)\n    if match:\n        pos = int(match.group(1))\n    return pos\n",
        "test": "assert     find_adverb_position('My name is My name') == 7",
        "num_ids": 3631,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # define area of cube\n    area_of_cube = (l ** 2) * (3 / 2)\n    return area_of_cube\n",
        "test": "assert     surfacearea_cube(2) == 6",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num >= 0:\n            new_nums.append(num)\n    \n    if len(new_nums) == 0:\n        return 0\n    \n    count = 0\n    for i in range(len(new_nums)):\n        if new_nums[i] >= 0:\n            count += 1\n",
        "test": "assert positive_count([]) == 0.0",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for element in list1:\n        if element < 0:\n            neg_list.append(element)\n    return max(neg_list)\n",
        "test": "assert     largest_neg([1, 2, -3, 4, 5, -1]) == -1, \"test 3\"",
        "num_ids": 1605,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    res = []\n    for item in test_list:\n        if len(item) == K:\n            res.append(item[:-K])\n        else:\n            res.append(item)\n    return res\n",
        "test": "assert     trim_tuple([(1,2,3),(4,5,6)], 4) == [(1,2,3),(4,5,6)]",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    try:\n        tup1 = test_tup1\n        tup2 = test_tup2\n",
        "test": "assert     index_multiplication(tuple1, tuple2) == tuple1",
        "num_ids": 5398,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n",
        "test": "assert     count_Occurrence([], []) == 0",
        "num_ids": 1962,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num*num*num)\n    return cube_nums\n    \n    \ndef solution(nums):\n    '''\n    solution(nums)\n    \n    Given a list of numbers, return the number of cubes that appear.\n    '''\n    cubes = cube_nums(nums)\n    result = sum(cubes)\n    return result\n    ",
        "test": "assert cube_nums([]) == [], \"cube_nums\"",
        "num_ids": 1399,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum\n",
        "test": "assert     cal_sum(1) == 1",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = \"\"\n    i = 0\n    while i < len(str):\n        result += str[i]\n        i += 1\n        if i == len(str):\n            break\n    return result\n",
        "test": "assert     extract_string([\"hello\"], [\"hello\"]) == \"hello\"",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(\"\\s+\", \" \", text1)\n    return text1\n",
        "test": "assert     remove_whitespaces(\"\") == \"\"",
        "num_ids": 3103,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \n    #OR\n    #loss = actual_cost - sale_amount\n    #return 0 if actual_cost < sale_amount else loss\n",
        "test": "assert     loss_amount(75,60) == 0",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n % 2 == 0 : \n        return n \n    else : \n        return n + sumofFactors(n // 2)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    numerator = 0\n    denominator = 1\n    if n == 0 : \n        return 0\n    elif n % 2 == 0 : \n        return 1\n    else : \n        numerator = 1\n        while numerator < math.sqrt(n) : \n            numerator = numerator + 1\n            denominator = n // denominator\n    return numerator * denominator\n",
        "test": "assert     sumofFactors(0) == 0",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return text.find('z')>-1\n",
        "test": "assert     text_match_wordz(\"HELLO WORLD\") == False, \"ERROR\"",
        "num_ids": 1041,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        if monthnum2==2:\n            if(int(monthnum2)<=12):\n                check=True\n            else:\n                check=False\n        else:\n            check=True\n    except ValueError:\n        check=False\n    return check\n",
        "test": "assert     check_monthnumb_number(1)",
        "num_ids": 3111,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    lst = []\n    lst = stringlist\n    \n    for i in lst:\n        print(i)\n        lst.remove(i)\n        lst.insert(0,i)\n        print(lst)\n        \n    return lst",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 1618,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n    return min \ndef Compare(lst1, lst2): \n    '''\n    Write a python function to compare two lists of integers.\n    '''\n    for i in range(0, len(lst1)):\n        if lst1[i] == lst2[i]:\n            continue\n        else:\n            return 'Not Equal'\n    return 'Equal'\ndef Output(lst): \n    '''\n    Write a python function to print the list.\n    '''\n    for i in range(0, len(lst)):\n        print(lst[i], end =\" \")\n    print()\n    ",
        "test": "assert     Find_Min([2, 3, 1, 1, 1, 1, 1, 3, 3, 3]) == 1",
        "num_ids": 3420,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(1,3) == 3",
        "num_ids": 606,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1 == '':\n        return ''\n    else:\n        split1 = str1.split(' ')\n        for item in split1:\n            if len(item) > 1:\n                for i in range(len(item)):\n                    if item[i].isupper():\n                        item = item[:i] + item[i].lower() + item[i + 1:]\n        return''.join(split1)\n",
        "test": "assert     remove_uppercase('asdasdasd') == 'asdasdasd'",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Your code goes here.\n    \n    return lst[0] \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     Extract(['a', 'a', 'a', 'a', 'a', 'b', 'c']) == 'a', 'Error'",
        "num_ids": 3313,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len(str.upper())\n",
        "test": "assert     upper_ctr('Abdallah'), 'Abdallah'",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if list1 == []:\n        return []\n    if len(list1) == 1:\n        return list1\n    if len(list1) == 2:\n        return [[list1[0]],[list1[1]]]\n    if len(list1) == 3:\n        return [[list1[0]],[list1[1]],[list1[2]]]\n    \n    if list1[0] == list1[1] == list1[2]:\n        return combinations_list(list1[3:])\n    else:\n        if list1[0] == list1[1] and list1[2] == list1[3]:\n            return combinations_list([list1[0],list1[1]]) + combinations_list(list1[2:])\n        elif list1[0] == list1[2] and list1[1] == list1[3]:\n            return combinations_list([list1[0],list1[1],list1[2]])\n        elif list1[0] == list1[1] and list1[2] == list1[3]:\n            return combinations_list([list1[0],list1[1],list1[2]]) + combinations_list(list1[3:])\n        else:\n            return combinations_list(list1[:3] + list1[3:])\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 2090,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    summ = curr_sum = prev_sum = 1\n    max_length = len(arr)\n    for i in range(1, max_length):\n        curr_sum = prev_sum * arr[i]\n        summ = max(summ, curr_sum)\n        prev_sum = curr_sum\n    return summ\n",
        "test": "assert     max_subarray_product([1]) == 1",
        "num_ids": 1171,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for key, value in dict.items():\n        if key not in values:\n            values.append(key)\n    \n    if all(x == y for x,y in zip(values,n)):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_value({\"a\": \"A\", \"b\": \"B\", \"c\": \"C\"}, \"b\") == False",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if v == []:\n            del dict1[k]\n    return dict1\n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # declaring a global variable to get the result\n    result = 1\n    # starting from every number\n    for i in range(len(arr)):\n        result = result * arr[i]\n    return result\n",
        "test": "assert     max_product([1,1,1,1,1]) == 1, \"test failed\"",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if not len(test_tup):\n        return\n    if not all(isinstance(tup, tuple) for tup in test_tup):\n        print('Invalid data')\n        return\n    if len(test_tup) == 1:\n        print('Invalid data')\n        return\n    if not all(isinstance(tup, tuple) for tup in test_tup):\n        print('Invalid data')\n        return\n    if len(test_tup) <= 1:\n        print('Invalid data')\n        return\n    total = 0\n    for i, tup in enumerate(test_tup):\n        total += (tup[0] + tup[1])\n    return total\n",
        "test": "assert add_pairwise((1,2))!= (3,4)",
        "num_ids": 2281,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Your code here\n    ans=1\n    for i in range(len(arr)):\n        ans=ans*arr[i]\n    return ans\n",
        "test": "assert     find_remainder([2, 2, 1, 1, 1, 1, 1, 1], 7) == 4",
        "num_ids": 1154,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    i = 0\n    if len(l) % 2 == 0:\n        if l[i+1] - l[i] > 1:\n            return 1\n        else:\n            return 0\n    else:\n        if l[i+1] - l[i] > 1:\n            return 1\n        else:\n            return 0\n",
        "test": "assert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False, 'test-condition is incorrect'",
        "num_ids": 1590,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple((item for item in test_list1 if item in test_list2))\n",
        "test": "assert     tuple_intersection((1, 2, 3), (1, 2, 3, 4)) == (1, 2, 3)",
        "num_ids": 2056,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1.replace(ch,newch)\n    return str1\n",
        "test": "assert     replace_char('a', 'c', 'b') == 'a'",
        "num_ids": 1575,
        "indeed": false
    },
    {
        "number": 475,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Fill in the fill_value function\n    # Fill in the sorted function\n    return Counter(dict1)\n",
        "test": "assert sort_counter({1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9, 10:10, 11:11, 12:12, 13:13, 14:14, 15:15, 16:16, 17:17, 18:18, 19:19, 20:20}) == {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9, 10:10, 11:11, 12:12, 13:13, 14:14, 15:15, 16:16, 17:17, 18:18, 19:19, 20:20}, \"error in function\"",
        "num_ids": 2038,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_n = -1\n    min_n = 100\n    for i in range(len(nums)):\n        if nums[i] > max_n:\n            max_n = nums[i]\n        if nums[i] < min_n:\n            min_n = nums[i]\n    return max_n + min_n\n",
        "test": "assert big_sum([2,3,4,5]), \"Function big_sum() should return [2,3,4,5]\"",
        "num_ids": 1245,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = ''\n    for character in string:\n        if character.isupper():\n            new_string += character.lower()\n        else:\n            new_string += character\n    return new_string\n",
        "test": "assert     is_lower('asdf') == 'asdf', \"correct pass\"",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    # your code goes here\n    lower_dict = {'\u0430':'a', '\u0431':'b', '\u0432':'v', '\u0433':'g', '\u0434':'d', '\u0435':'e', '\u0451':'e', '\u0436':'z', '\u0437':'z', '\u0438':'i', '\u0439':'i', '\u043a':'k', '\u043b':'l', '\u043c':'m', '\u043d':'n', '\u043e':'o', '\u043f':'p', '\u0440':'r', '\u0441':'s', '\u0442':'t', '\u0443':'u', '\u0444':'f', '\u0445':'x', '\u0446':'t', '\u0447':'c', '\u0448':'s', '\u0449':'z', '\u044a':'a', '\u044b':'y', '\u044c':'y', '\u044d':'e', '\u044e':'e', '\u044f':'z'}\n    # your code goes here\n    lst_rep = []\n    for letter in str1:\n        if letter in lower_dict:\n            lst_rep.append(lower_dict[letter])\n        else:\n            lst_rep.append(letter)\n    return ''.join(lst_rep)\n",
        "test": "assert     'p' == 'p'",
        "num_ids": 7142,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return -1\n    if n < 0 :\n        return -1\n    else :\n        count = 0\n        while n!= 0 :\n            rem = n % 10\n            n = n // 10\n            count += 1\n        return count\n",
        "test": "assert     first_Digit(1) == 1",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in range(len(list)):\n        if list[i]%2!= 0:\n            list[i] = list[i]\n    return list\n",
        "test": "assert     Split([]) == [], 'Empty list is not allowed'",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 555,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    return abs(sum((i**3) for i in range(1,n))-sum(i**3 for i in range(1,n)))\n",
        "test": "assert     difference(3) == 0",
        "num_ids": 4708,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    return 0\n",
        "test": "assert     find_Odd_Pair(0,0)==0, \"The function find_Odd_Pair should be a correct function\"",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # empty string\n    if not string:\n        return \"\"\n    \n    # keep a pointer\n    stack = []\n    \n    # move string and append to string\n    for char in string:\n        stack.append(char)\n        \n    # append the string to string\n    result = \"\".join(stack)\n    \n    # if it's empty\n    if not result:\n        result = string\n    \n    # if the stack is empty\n    if not stack:\n        result = \"\".join(stack)\n        \n    return result\n    \n    \n    ",
        "test": "assert     toggle_string('Hello, World!') == 'Hello, World!', 'Should be Hello, World!'",
        "num_ids": 5280,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(map(int, str(abs(n1 - n2))))\n",
        "test": "assert     digit_distance_nums(9,8) == 1",
        "num_ids": 817,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    result = float('-inf')\n    sub_sum = 0\n    for i in range(size):\n        sub_sum += a[i]\n    for i in range(size-1, -1, -1):\n        sub_sum -= a[i]\n        if sub_sum > result:\n            result = sub_sum\n    return result\n",
        "test": "assert     max_sub_array_sum(a=[], size=0) == 0",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    # write your code here\n    i = 0\n    j = 0\n    while i < len(test_tup1):\n        if test_tup1[i] > test_tup2[i]:\n            j = j + 1\n            i = i + 1\n        else:\n            i = i + 1\n    result = (test_tup1[:j] + test_tup2[:j] + test_tup1[j:] + test_tup2[j:])\n    return result\n    \n",
        "test": "assert union_elements((1, 2, 3, 4, 5), (6, 7, 8, 9, 10)) == union_elements((1, 2, 3, 4, 5), (6, 7, 8, 9, 10))",
        "num_ids": 2005,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    c = 0\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n        c += 1\n        \n    return c\n",
        "test": "assert     Find_Max_Length([]) == 0",
        "num_ids": 4928,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Remove whitespaces\n    text = text.strip()\n    # Find the set of all opening quotation marks\n    opening_quotes = re.findall(r'\\{\\{', text)\n    # Set of all closing quotation marks\n    closing_quotes = re.findall(r'\\}\\}', text)\n    # Loop through all the opening quotation marks\n    for opening_quote in opening_quotes:\n        # Search for the closing quote\n        closing_quote = re.search(r'\\}', text)\n        # Search for the matching closing quote\n        # and replace with the closing quote text\n        closing_quote_text = closing_quote.group(0)\n        text = text.replace(opening_quote, closing_quote_text)\n    # Split the string\n    text = text.split(\"\\n\")\n    # Iterate through the list of strings\n    for line in text:\n        # If the line is empty, remove the line\n        if line == \"\":\n            continue\n        # If the line contains a newline\n        if line[0] == '#':\n            # Remove the newline\n            line = line[1:]\n            # Add the newline to the original line\n            line = line + '\\n'\n        # If the line is a number\n        if line[0] in '0-9' and line[0]!='':\n            # Remove whitespaces\n            line = line.strip()\n            # Split the line\n            line = line.split(\" \")\n            # Loop through the split line\n            for i in line:\n                # For each split element\n                if i == \"\":\n                    # Remove whitespaces\n                    i = i.strip()\n                    # Add the newline to the original line\n                    i = i + '\\n'\n                # If the element is a number\n                if i in '0-9':\n                    # Remove whitespaces\n                    i = i.strip()\n                    # Add the number to the original line\n                    i = i + str(i)\n                # If the element is a space\n                if i =='':\n                    # Remove whitespaces\n                    i = i.strip()\n                    # Add the newline to the original line\n                    i = i + '\\n'\n                # If the element is a number\n                if i in '0-9':\n                    # Remove whitespaces\n                    i = i.strip()\n                    # Add the number to the original line\n                    i = i + str(i)\n            # Remove the number\n            line = line[1:]\n            # Append the newline to the line\n            line = line + '\\n'\n    # Return the modified string\n    return line\n",
        "test": "assert     extract_values(\"In this string\") == \"In this string\"",
        "num_ids": 3817,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Write your code here.\n    arr.sort()\n    if len(arr)<3:\n        return 0\n    i=0\n    j=0\n    count=0\n    while j<len(arr)-1:\n        if arr[i]>arr[j] and arr[j]!=arr[i+1]:\n            count+=1\n            i+=1\n        j+=1\n    return count\n    \n    \n",
        "test": "assert     count_Pairs([1,2,3,4,5,6,7,8,9],1) == 0, 'count_Pairs(arr,n) should return 0'",
        "num_ids": 3392,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [character for character in word]\n",
        "test": "assert     split(\"b\")!= []",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    temp = 0\n    while n:\n        temp = n % 10\n        n //= 10\n    return temp\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 567,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        return False\n    else:\n        return True\n    \ndef merge_sort(list1):\n    '''\n    Write a function that sorts a list in ascending order.\n    '''\n    if not list1:\n        return list1\n    else:\n        mid = len(list1) // 2\n        left_half = list1[:mid]\n        right_half = list1[mid:]\n        \n        print(\"left_half: \" + str(left_half))\n        print(\"right_half: \" + str(right_half))\n        \n        print(\"\\n\")\n        merge_sort(left_half)\n        print(\"\\n\")\n        merge_sort(right_half)\n        \n        print(\"merge: \" + str(list1))\n        print(\"\\n\")\n        \n        return list1\n",
        "test": "assert     issort_list([3,1,0,2,4,5,6,7]) is False, \"list is not sorted\"",
        "num_ids": 1437,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 569,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: len(x), reverse=True)\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 2031,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_copy = []\n    for num in nums:\n        if num not in nums_copy:\n            nums_copy.append(num)\n    return nums_copy\n",
        "test": "assert     two_unique_nums([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12], \"test 4\"",
        "num_ids": 5452,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique = []\n    if type(list_data) is not list:\n        raise TypeError(\"list_data must be a list\")\n    for i in list_data:\n        if i not in unique:\n            unique.append(i)\n    return len(unique)\n    \n    \n    \n    \ndef product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    if type(list_data) is not list:\n        raise TypeError(\"list_data must be a list\")\n    for i in list_data:\n        if i not in unique:\n            product = product * i\n    return product\n    \n    \n    \n    \ndef format_list(list_data):\n    '''\n    Write a python function to format a given list of strings.\n    '''\n    list_data = map(str, list_data)\n    return list(list_data)\n    \n    \n    \n    \ndef print_list(list_data):\n    '''\n    Write a python function to print a given list of strings.\n    '''\n    print(list_data)\n    \n    \n    \n    \ndef is_prime(num):\n    '''\n    Write a python function to determine whether a given number is prime or not.\n    '''\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \n    \n    \n    \ndef is_prime_range(num):\n    '''\n    Write a python function to determine whether a given number is prime or not.\n    '''\n    if num == 2:\n        return True\n    for i in range(3, num):\n        if num % i == 0:\n            return False\n    return True\n    \n    \n    \ndef prime_range(num):\n    '''\n    Write a python function to determine whether a given number is prime or not.\n    '''\n    if num == 2:\n        return True\n    for i in range(3, num):\n        if num % i == 0:\n            return False\n    return True\n    \n    \n    \n    \ndef is_prime_list(num):\n    '''\n    Write a python function to determine whether a given number is prime or not.\n    '''\n    if num == 2:\n        return True\n    for i in range(3, num):\n        if num % i == 0:\n            return False\n    return True\n    \n    \n    \n    \ndef main():\n    '''\n    Write a python function to print the largest number in a given list.\n    '''\n    my_list = [1,2,3,4,5,6,7,8,9]\n    print(max(my_list))\n    \n    \n    \n    \ndef test_is_prime():\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    print(is_prime(2))\n    \n    \n    \ndef test_is_prime_range():\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    print(is_prime_range(2))\n    \n    \n    \ndef test_is_prime_list():\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    print(is_prime_list(2))\n    \n    \n    \ndef test_prime_range():\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    print(prime_range(2))\n    \n    \n    \ndef test_prime_list():\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    print(prime_list(2))\n    \n    \n    \ndef main():\n    '''\n    Write a python function to print the largest number in a given list.\n    '''\n    my_list = [1,2,3,4,5,6,7,8,9]\n    print(max(my_list))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     unique_product([]) == 0",
        "num_ids": 4513,
        "indeed": false
    },
    {
        "number": 574,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    def surfacearea(r,h):\n        '''\n        Write a function to calculate the surface area.\n        '''\n        return 4.0*np.pi*r*h\n    \n    def area(r,h):\n        '''\n        Write a function to calculate the surface area.\n        '''\n        return surfacearea(r,h)\n    \n    return surfacearea(r,h) * area(r,h)\n    \n",
        "test": "assert     surfacearea_cylinder(0,0) == 0.0",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (len(A)!= len(B)): \n        return False\n    if (B==[]) or (B==None): \n        return True\n    for i in range(len(A)): \n        if (A[i]!=B[i]): \n            return False\n    return True\n",
        "test": "assert     is_Sub_Array([0, 1, 2, 3], [0, 1, 2, 3]) == True",
        "num_ids": 1311,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print (\"Invalid input\")\n    else:\n        x = n\n        a = 1\n        b = 1\n        while x > 0:\n            a = a * x % 10\n            x = x // 10\n        return a\n",
        "test": "assert     last_Digit_Factorial(5) == 5",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    while len(list1) > 0 and len(list2) > 0 and len(list3) > 0:\n        if list1[0] < list2[0] < list3[0]:\n            result.append(list1.pop(0))\n        elif list1[0] > list2[0] > list3[0]:\n            result.append(list2.pop(0))\n        else:\n            result.append(list3.pop(0))\n    while len(list1) > 0:\n        result.append(list1.pop(0))\n    while len(list2) > 0:\n        result.append(list2.pop(0))\n    while len(list3) > 0:\n        result.append(list3.pop(0))\n    return result\n",
        "test": "assert     interleave_lists([], [], []) == []",
        "num_ids": 2308,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    lst1 = list(set(test_tup1))\n    lst2 = list(set(test_tup2))\n    #print(lst1)\n    #print(lst2)\n    lst3 = list(set(lst1) & set(lst2))\n    return(lst3)\n",
        "test": "assert     find_dissimilar([1,2,3,4], (2,3,5,6)) == [2,3]",
        "num_ids": 1970,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    output = []\n    even_ind = []\n    odd_ind = []\n    for i in test_tuple:\n        if even_fnc(i, even_ind):\n            output.append(i)\n        else:\n            odd_ind.append(i)\n    for i in odd_ind:\n        output.append(i)\n    return tuple(output)\n",
        "test": "assert     even_ele((1,2,3,4,5,6,7,8), even_fnc) == (1,2,3,4,5,6,7,8)",
        "num_ids": 3875,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b * (s * s))\n",
        "test": "assert     surface_Area(0,0)==0",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        for key in dict1:\n            if not dict1[key]:\n                return \"The value is not in dictionary\"\n        return \"The dictionary is empty\"\n    else:\n        return \"The dictionary is empty\"\n    \n",
        "test": "assert     my_dict({})",
        "num_ids": 2553,
        "indeed": false
    },
    {
        "number": 583,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1 or num == 2 or num == 3:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2) + catalan_number(num-3)\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 6595,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile('ly[.]*(s|x)')\n    match = regex.findall(text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     find_adverbs(\"a l y 1\") == 0",
        "num_ids": 11377,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x: x[1])\n    return items[-n:]\n",
        "test": "assert ",
        "num_ids": 1597,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n] + l[n:]\n    \ndef common_elements(l1, l2):\n    '''\n    Write a python function to get the common elements in two lists.\n    '''\n    return list(set(l1) & set(l2))\n",
        "test": "assert     split_Arr(['1', '2', '3'], 3) == ['1', '2', '3']",
        "num_ids": 1207,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n    #return list(listx)\n",
        "test": "assert     list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 984,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # sort the list\n    nums.sort()\n    # keep track of the largest\n    largest = nums[0]\n    # keep track of the smallest\n    smallest = nums[0]\n    # iterate through the list\n    for num in nums:\n        # if num is larger, move it to the end of the list\n        if num > largest:\n            largest = num\n            # if num is smaller, move it to the beginning of the list\n            if num < smallest:\n                smallest = num\n        # if num is smaller, move it to the end of the list\n        elif num < largest:\n            # if num is larger, move it to the end of the list\n            if num > smallest:\n                smallest = num\n            # if num is smaller, move it to the beginning of the list\n            else:\n                largest = num\n        # if num is larger, move it to the end of the list\n        else:\n            # if num is larger, move it to the beginning of the list\n            if num > smallest:\n                smallest = num\n            # if num is smaller, move it to the end of the list\n            else:\n                largest = num\n    # return the difference between the largest and smallest numbers\n    return largest - smallest\n",
        "test": "assert     big_diff([1, 2, 3]) == 2",
        "num_ids": 1382,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a==b:\n        return b\n    if a==0:\n        return 0\n    if b==0:\n        return 0\n    if a**2+b**2==a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return b**2+a**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n",
        "test": "assert     perfect_squares(0, 0) == 0",
        "num_ids": 5022,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #The return value is a tuple in the form of (r, theta).\n    return (cmath.rect(x, y), cmath.rect(y, x))\ndef polar_transform(theta, x, y):\n    '''\n    Write a function to transform polar coordinates to rectangular coordinates.\n    '''\n    return (y * math.sin(theta), y * math.cos(theta))\ndef polar_compare(x,y,r):\n    '''\n    Write a function to compare polar coordinates to rectangular coordinates.\n    '''\n    return r*math.sin(x)\n",
        "test": "assert     polar_rect(0,0) == (0,0)",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[::-1]\n    return newList\n    \ndef bubble_sort(newList):\n    '''\n    Write a python function to sort the elements in a list in ascending order.\n    '''\n    for i in range(len(newList)):\n        for j in range(0,len(newList)-i-1):\n            if newList[j] > newList[j+1]:\n                temp = newList[j]\n                newList[j] = newList[j+1]\n                newList[j+1] = temp\n    return newList\n",
        "test": "assert     swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 592,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int(n * (n+1) / 2)\n",
        "test": "assert binomial_Coeff(1,0) == 1",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    match = re.search(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', ip)\n    if match:\n        return ip[match.start():]\n    return ip\n",
        "test": "assert     removezero_ip('123.123.123.123') == '123.123.123.123'",
        "num_ids": 3224,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) <= 1:\n        return list1\n    else:\n        return list1[0] - list1[1]\n",
        "test": "assert     diff_even_odd([3, 2, 1]), 'The function should return [3, 2, 1] '",
        "num_ids": 1702,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    for i in range(len(str1)) : \n        for j in range(len(str2)) :\n            if str1[i]!=str2[j] : \n                break\n        if(str1[i]!=str2[j]) : \n            count=count+1\n            break\n    return count\n",
        "test": "assert     min_Swaps('0100001', '1100110') == 1",
        "num_ids": 5495,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list[i])):\n            sys.stdout.write(str(tuple_list[i][j]) + \"\\t\")\n        sys.stdout.write(\"\\n\")\n    return sum(tuple_list)\n",
        "test": "assert     tuple_size([]) == 0",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    #start = time.time()\n    ans = arr1[k-1]\n    end = len(arr1)-1\n    for i in range(0,end):\n        if arr1[i] > arr2[k-1]:\n            ans = arr1[i]\n            break\n        elif arr1[i] < arr2[k-1]:\n            ans = arr2[k-1]\n            break\n    #end = time.time()\n    #print(f'Elapsed time: {end-start}')\n    return ans\n",
        "test": "assert         find_kth([1], [2], 0) == 1",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Write your code here\n    \n    is_armstrong = False\n    try:\n        number = int(number)\n    except ValueError:\n        is_armstrong = False\n        \n    if len(str(number)) == 1:\n        is_armstrong = True\n    else:\n        is_armstrong = False\n        \n    return is_armstrong\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     armstrong_number(0), 'is not armstrong number'",
        "num_ids": 2913,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(0, number+1):\n        sum += i\n    average = sum / number\n    return average\n    \n",
        "test": "assert     sum_average(3) == 2",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False \n",
        "test": "assert     is_Even(2)",
        "num_ids": 599,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    unique = []\n    for char in str1:\n        if char in unique:\n            unique.remove(char)\n        else:\n            unique.append(char)\n    for x in unique:\n        print(x)\n    return str1[len(unique)-1]\n",
        "test": "assert     first_repeated_char(\"Geeks\") == 'e'",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(n,0,-1) if i<=n]\n",
        "test": "assert     get_ludic(0) == 1",
        "num_ids": 3275,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    r = s.split(' ')\n    r = r[::-1]\n    print(r)\n    s =''.join(r)\n    return s\n",
        "test": "assert     reverse_words('zxcvb') == 'zxcvb'",
        "num_ids": 1154,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    # if it is not prime number return False.\n    if num > 1:\n        # if it is divisible by any number from 2 to 5, return False\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 3 to 9, return False\n        for i in range(3, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 10 to 99, return False\n        for i in range(10, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 100 to 999, return False\n        for i in range(100, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 1000 to 9999, return True\n        for i in range(1000, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 10000 to 9999, return True\n        for i in range(10000, num):\n            if (num % i) == 0:\n                return False\n        # return True\n        return True\n    # return False\n    return False\n",
        "test": "assert     prime_num(4)==False, '4 is not a prime number'",
        "num_ids": 1179,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "test": "assert     radian_degree(0) == 0",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    index = 0\n    index_pattern = 0\n    end_index = 0\n",
        "test": "assert     (find_literals(\"hello\", \"a\"), 1, 1), \"find_literals works correctly\"",
        "num_ids": 1876,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = []\n    for i in range(n+1):\n        a.append(i)\n    a.sort()\n    return a[-1]\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 2841,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #Defining index variables\n    i = 0\n    #Iterating through each element\n    for item in list1:\n        #Incrementing index variable\n        i = i + 1\n        #Adding k'th element to list\n        if i < L:\n            list1[i] = list1[i-1]\n    return list1\n",
        "test": "assert     remove_kth_element([1, 3, 6], 0) == [1, 3, 6]",
        "num_ids": 1636,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    mx = test_list[0][N]\n    for i in range(N):\n        mx = max(mx, test_list[i][N])\n    return mx\n",
        "test": "assert     max_of_nth([[3,7,9],[3,6,6],[5,3,1]], 0) == 3     # 0 element",
        "num_ids": 3477,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return lst\n",
        "test": "assert     merge([1]) == [1]",
        "num_ids": 1702,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative = []\n    for item in test_list:\n        for x in range(len(item)):\n            cummulative.append(item[x])\n    return sum(cummulative)\n",
        "test": "assert     cummulative_sum([]) == 0",
        "num_ids": 2965,
        "indeed": true
    },
    {
        "number": 615,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        if type(nums[i]) == tuple:\n            for j in range(len(nums[i])):\n                avg_list.append(nums[i][j])\n        else:\n            avg_list.append(nums[i])\n    \n    return avg_list\n",
        "test": "assert     average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12))), [2, 5.5, 10]",
        "num_ids": 1801,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulos = [(test_tup1[i] % test_tup2[i]) for i in range(len(test_tup1))]\n    return modulos\n",
        "test": "assert     tuple_modulo([1,2,3,4], (3,2,1,1)) == (1,1,1,1)",
        "num_ids": 3820,
        "indeed": false
    },
    {
        "number": 617,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #jumps = 0\n    #for step in steps:\n    #    if step == d:\n    #        return jumps\n    #    jumps += steps.count(step)\n    #return jumps\n    return 0\n",
        "test": "assert     min_Jumps(3,0) == 0",
        "num_ids": 1989,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    num1 = nums1.count(nums2[0])\n    num2 = nums2.count(nums1[0])\n    count = num1+num2\n    if count > 1:\n        for i in range(1,count):\n            if nums1[i] == num2:\n                nums1.remove(nums2[i-1])\n            if nums2[i-1] == num1:\n                nums2.remove(nums1[i-1])\n    return nums1\n    # write a function to remove duplicates from a list\n    # return a new list\n",
        "test": "assert     div_list([1,2,3], [2,3,4]) == [1,2,3], \"Test case does not contain the right numbers\"",
        "num_ids": 3679,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Write your code here\n    return test_str\n    \n    \ndef num_to_word(test_str):\n    '''\n    Write a function that takes a number as an input and prints the words in that number.\n    '''\n    # Write your code here\n    return test_str\n",
        "test": "assert     move_num(\"\") == \"\", 'It should print an empty string'",
        "num_ids": 1690,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n < 2:\n        return 0\n    curr = [1] * n\n    for i in range(2, n):\n        curr[i] = curr[i-1] + 1\n        for j in range(i-1, -1, -1):\n            if a[j] % curr[i-1] == 0:\n                curr[i] = 1\n    return curr[n-1]\n",
        "test": "assert     largest_subset([]) == 0, 'test: 4'",
        "num_ids": 2169,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    if (n == 0):\n        return None\n    if (n == 1):\n        return arr1[0]\n    if (n == 2):\n        return arr1[0] + arr2[0]\n",
        "test": "assert     get_median([1, 3, 4], [1, 2, 3], 1) == 1.0",
        "num_ids": 1762,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    return [pow(nums[i],n) for i in range(len(nums))]\n",
        "test": "assert     nth_nums([1,2,3,4], 4), 'incorrect result'",
        "num_ids": 1010,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert     is_upper('OOPS!') == 'OOPS!', '\\'OOPS!\\' should be upper'",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    # take the length of the list\n    l = len(newList)\n    \n    # if the length of the list is odd then we have to swap the first and last element\n    if l % 2 == 1:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        \n    # if the length of the list is even then we have to swap the first and last element\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        \n    # return the list\n    return newList\n",
        "test": "assert swap_List([3, 4, 5]), \"should be [5, 4, 3]\"",
        "num_ids": 1085,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r == 1 :\n        return 1\n    else : \n        return 0\n",
        "test": "assert     (triangle_area(0) == 0),     \"the area of a triangle with a radius of 0 is 0\"",
        "num_ids": 1743,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start >= end:\n        return None\n    \n    mid = (start + end)//2\n    \n    if array[mid] == mid:\n        return mid\n    \n    if array[mid] > mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n    \n    \n",
        "test": "assert     find_First_Missing([])==None",
        "num_ids": 5198,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    for char in string:\n        if char =='':\n            string = string.replace(char,'%20')\n    return string\n    \n    ",
        "test": "assert     replace_spaces('%20%20%20%20') == '%20%20%20%20'",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 629,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in list: \n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n",
        "test": "assert     Split([2,4,6,8,10]) == [2, 4, 6, 8, 10], \"The Split function is incorrect\"",
        "num_ids": 3006,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == 'N' or ele[0] == 'S':\n        if ele[1] == 'E' or ele[1] == 'W':\n            sub.append(('N', ele[1]))\n        if ele[1] == 'W' or ele[1] == 'E':\n            sub.append(('E', ele[1]))\n        if ele[1] == 'E':\n            sub.append(('S', ele[1]))\n        if ele[1] == 'W':\n            sub.append(('W', ele[1]))\n    if ele[0] == 'E' or ele[0] == 'W':\n        if ele[1] == 'E' or ele[1] == 'W':\n            sub.append(('E', ele[1]))\n        if ele[1] == 'W' or ele[1] == 'E':\n            sub.append(('W', ele[1]))\n        if ele[1] == 'E':\n            sub.append(('S', ele[1]))\n        if ele[1] == 'W':\n            sub.append(('E', ele[1]))\n    if ele[1] == 'N' or ele[1] == 'S':\n        if ele[0] == 'N' or ele[0] == 'S':\n            sub.append(('N', ele[0]))\n        if ele[0] == 'S' or ele[0] == 'N':\n            sub.append(('E', ele[0]))\n    if ele[1] == 'W' or ele[1] == 'E':\n        if ele[0] == 'E' or ele[0] == 'W':\n            sub.append(('W', ele[0]))\n        if ele[0] == 'E' or ele[0] == 'W':\n            sub.append(('S', ele[0]))\n        if ele[0] == 'W' or ele[0] == 'E':\n            sub.append(('W', ele[0]))\n        if ele[0] == 'E':\n            sub.append(('N', ele[0]))\n    return sub\n",
        "test": "assert     adjac([0, 0]) == []",
        "num_ids": 2079,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('  ','')\n    text = text.replace('  ','')\n    text = text.replace('  ','')\n    text = text.replace('  ','')\n    return text\n",
        "test": "assert     replace_spaces('') == ''",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 3198,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    Sum = 0\n    for i in range(0, n - 1) : \n        Sum = Sum ^ arr[i] ^ arr[i+1] \n    return Sum \n",
        "test": "assert     pair_xor_Sum([],0) == 0",
        "num_ids": 1459,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = []\n    for item in iterable:\n        l.append(item)\n    return l\n",
        "test": "assert     heap_sort([]) == []",
        "num_ids": 1513,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount>actual_cost:\n        return True\n    else:\n        return False\ndef solve_dp(f_n,g_n,w,b,c,n,m,s): \n    '''\n    Use the DP programming to find the optimal weights,b,c\n    '''\n    d = [[[0 for _ in range(m+1)]for _ in range(n+1)]for _ in range(c+1)]\n    \n    #fill the dp table \n    for i in range(n+1):\n        for j in range(m+1):\n            d[i][j][0]=f_n(w[i][j],s[i][j])\n            d[i][j][1]=g_n(w[i][j],s[i][j])\n            \n    for i in range(c+1):\n        for j in range(n+1):\n            d[i][j][0]=b[j][i]\n            d[i][j][1]=c[i]\n            d[i][j][2]=noprofit_noloss(d[i][j][0],d[i][j][1])\n    \n    return d\n",
        "test": "assert         noprofit_noloss(40.0,20.0) == False, \"profit_noloss\"",
        "num_ids": 1166,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 3.74\n    r = 1013.25\n    \n    x = (v*t)/k\n    z = x-r\n    if z>0:\n        c = z/(r-k)\n    else:\n        c = 0\n    return round(math.log(c+1.0,10),1)\n",
        "test": "assert     wind_chill(1.0,1.0) == 0.0",
        "num_ids": 2974,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name.lower()[0] == 'a')\n",
        "test": "assert     sample_nam([]) == 0",
        "num_ids": 3400,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis_regex = re.compile('(.)([A-Z][a-z]+)')\n    \n    # Remove the parenthesis\n    new_items = re.sub(parenthesis_regex, r' \\1 ', str(items))\n    \n    # Remove the parenthesis and what is inbetween them\n    new_items = re.sub('(.)\\1+', r' \\1 ', str(new_items))\n    \n    return new_items\n",
        "test": "assert     remove_parenthesis('') == ''",
        "num_ids": 3916,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    x=1\n    for i in range(1, n+1):\n        if (i % (n+1) == 0):\n            x = x * i\n    return x\n",
        "test": "assert     is_nonagonal(2), \"The function is_nonagonal should be undefined for non-numeric values of n.\"",
        "num_ids": 3121,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text[0]=='z'):\n        return True\n    else:\n        return False\n",
        "test": "assert         text_match_wordz_middle(\"jim is the quick brown fox jumped over the lazy dog\") == False",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # if the array is empty or empty, return nothing\n    if input == None or len(input) == 0:\n        return []\n    \n    # check if the array is sorted\n    if is_sorted(input):\n        # if the array is sorted return nothing\n        return input\n    \n    # if the array is not sorted then reverse the array. \n    else:\n        # reverse the elements of the array upto the given position \n        # by swapping the first and last elements\n        output = [input[0]] + reverse_Array_Upto_K(input[1:],k)\n        # return reversed result\n        return output\n    \ndef is_sorted(input):\n    '''\n    Write a python function to check whether an array is sorted.\n    '''\n    # if the array is unsorted or sorted return false\n    if len(input) < 2:\n        return True\n    \n    # if the array has only one element\n    if len(input) <= 1:\n        # return false\n        return False\n    \n    # get the first element\n    first_element = input[0]\n    \n    # if the first element of the array is larger than the next element\n    if first_element > input[1]:\n        # if the array has more than one element\n        return False\n    \n    # if the first element of the array is the same as the next element\n    if first_element == input[1]:\n        # return false\n        return False\n    \n    # if the first element of the array is smaller than the next element\n    return is_sorted(input[1:])\n    \n    \ndef main():\n    # read the array elements\n    arr = [int(x) for x in input().strip().split()]\n    \n    # get the length of the array\n    n = len(arr)\n    \n    # reverse the array\n    arr = reverse_Array_Upto_K(arr, n)\n    \n    # output the result\n    print(*arr)\n",
        "test": "assert     reverse_Array_Upto_K([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1915,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Your code here\n    test_tup=tuple(test_tup)\n    for key, value in test_dict.items():\n        test_tup=test_tup+(key, value)\n    return test_tup\n",
        "test": "assert     add_dict_to_tuple(('a', 'b'), {}) == ('a', 'b')",
        "num_ids": 5373,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    cost = cost.strip().split()\n    cost = [int(x) for x in cost]\n    N = len(cost)\n    if (N < 2):\n        return 0\n    dp = [[0 for i in range(N)] for i in range(N)]\n    for i in range(0, N - 1):\n        for j in range(i + 1, N):\n            if cost[i] > cost[j]:\n                dp[i][j] = dp[i][j] + 1\n                dp[j][i] = dp[i][j] + 1\n    sum = 0\n    for i in range(N):\n        sum = sum + dp[i][i]\n    return sum / N\n",
        "test": "assert     maxAverageOfPath( [[1,2,3,4],[3,4,5,6],[2,3,6,1]], [3,5,6,1] ) == 50",
        "num_ids": 2361,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    for key in students.keys():\n        if len(students[key])>h and len(students[key])>w:\n            students[key]=student_filter(students[key],h,w)\n            print(f'Filtered {key} as {students[key]}')\n        else:\n            print(f'{key} is too short or too long')\n    return students\n",
        "test": "assert     filter_data({\"Tom\": (2.0, 2.0)}, 1.1, 2.0), \"Hight and weight should be less than or equal to minimum height and weight.\"",
        "num_ids": 2445,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for i in range(len(nums1)):\n        if nums1[i] not in dict1:\n            dict1[nums1[i]] = 1\n        else:\n            dict1[nums1[i]] += 1\n        if nums2[i] not in dict2:\n            dict2[nums2[i]] = 1\n        else:\n            dict2[nums2[i]] += 1\n    return dict1 == dict2\n",
        "test": "assert     count_same_pair([1,1,1,1,1], [1,2,3,4,5]) == 0",
        "num_ids": 2042,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base * power\n",
        "test": "assert power_base_sum(7, 1) == 7",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # creating a regular expression for the quotation marks\n    QUOTATION_PATTERN = re.compile(r'\\s*[)]\\s*$')\n    # capturing the quotation marks\n    quotation_marks = QUOTATION_PATTERN.search(text1)\n    # if the quotation marks are found, return the result\n    if quotation_marks:\n        return quotation_marks.group()\n    else:\n        return text1\n",
        "test": "assert     extract_quotation('abc') == 'abc'",
        "num_ids": 5906,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # 1. define a list of size N\n    a = [1,2,3,4,5,6,7]\n    # 2. convert the list into a tuple\n    tuple_a = tuple(a)\n    # 3. use the function to create a new tuple of length N\n    new_tuple_a = tuple_a*tuple_a\n    # 4. return the result\n    return new_tuple_a\n    \n    \n    \n    # TEST\n    # print(multiply_elements((1,2,3,4,5,6,7)))\n    # print(multiply_elements((1,2,3,4,5,6,7)))\n    # print(multiply_elements((1,2,3,4,5,6,7)))\n    # print(multiply_elements((1,2,3,4,5,6,7)))\n    # print(multiply_elements((1,2,3,4,5,6,7)))\n    \n    # def multiply_elements(test_tup):\n    #     return tuple(map(lambda t: t*t, test_tup))\n",
        "test": "assert         test_tup == multiply_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897",
        "num_ids": 3684,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for i in range(len(lst1)):\n        sum = sum + lst1[i] + lst2[i]\n    return sum\n",
        "test": "assert     sum_list([], []) == 0",
        "num_ids": 1603,
        "indeed": false
    },
    {
        "number": 730,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        if nums[i] in nums_set:\n            nums_set.remove(nums[i])\n    return nums\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 7326,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0.5 * math.pi * r * h\n    return s\n",
        "test": "assert         (lateralsurface_cone(0,0) == 0)",
        "num_ids": 1378,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'(?:\\s|,|\\.|\\;|\\:|\\!|!|\\?|\\:|\\?|;|\\*|\\+|\\=|=|:|\\,|\\.|\\:|\\;|\\)|\\%|\\!)\\s'\n    return re.sub(pattern, ':', text)\n",
        "test": "assert     re.search('\\s', 'Some text')",
        "num_ids": 9375,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l, r = 0, len(A) - 1\n    while l <= r:\n        mid = l + ((r - l) >> 1)\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 5, 10, 2, 3, 4, 8, 0, 12], 14) == -1",
        "num_ids": 1677,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    from collections import Counter\n    counter = Counter(arr)\n    sum = 0\n    for i in range(len(arr)):\n        if counter[arr[i]]!= 0:\n            sum += arr[i]*counter[arr[i]]\n            counter[arr[i]] -= 1\n    return sum\n",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 1616,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    r = 0\n    if n >= 0:\n        r = n % 2\n    else:\n        r = n % 2 ^ 1\n    return r\n",
        "test": "assert     set_middle_bits(4) == False",
        "num_ids": 4794,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return -1\n    else:\n        return index-1\n",
        "test": "assert     left_insertion(a=[1,3,8,10,15,17], x=13) == 3",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.search(regex, string)\n    return bool(result)\n",
        "test": "assert     check_str(\"hi\") == False",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (n * geometric_sum(n-1))\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if(i == 1):\n            count = count + 1\n        elif(i == n-1):\n            count = count - 1\n        else:\n            if(count < count+1):\n                count = count - 1\n            else:\n                count = count + 1\n    return count\n",
        "test": "assert find_Index(1) == 1",
        "num_ids": 5134,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup) - 1):\n        d[test_tup[i]] = test_tup[i + 1]\n    return d\n",
        "test": "assert     tuple_to_dict(tuple_to_dict(tuple())) == {}",
        "num_ids": 1933,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Characters_Same('aab') == False",
        "num_ids": 2807,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side*side\n",
        "test": "assert     area_tetrahedron(0) == 0",
        "num_ids": 2777,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1, 2, 3, 4, 5, 6, 7], 0) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 1526,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] is None:\n            print('None value in tuple: ', i)\n            return True\n    return False\n",
        "test": "assert     check_none((1, 2, 3.4, 'testing', )) == False, 'check_none failed'",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for x in range(startnum, endnum+1):\n        if x % 10 == 0:\n            result.append(x)\n    return result\n",
        "test": "assert         divisible_by_digits(123, 0) == []",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a >= 180) and (a <= 360):\n        if ((a >= 360/3) and (r > 3)) or ((a >= 360/2) and (r > 2)) or ((a >= 360/1.5) and (r > 1.5)):\n            return 0\n        else:\n            return None\n    elif (a <= 180) and (a > 90):\n        if ((a <= 90/3) and (r > 3)) or ((a <= 90/2) and (r > 2)) or ((a <= 90/1.5) and (r > 1.5)):\n            return 0\n        else:\n            return None\n    else:\n        return None\n",
        "test": "assert sector_area(10,10) == None",
        "num_ids": 1186,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    c = [[0] * (n + 1) for i in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if (i == 0 or j == 0): \n                c[i][j] = 0 \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if (X[i - 1] == Y[j - 1]): \n                c[i][j] = c[i - 1][j - 1] + 1 \n            else: \n                c[i][j] = max(c[i - 1][j], c[i][j - 1]) \n    return c[m][n] \n",
        "test": "assert     lcs_of_three('abcde', 'abcd', 'bcde') == 4",
        "num_ids": 5442,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = str1.replace(\" \",\"-\")\n    str3 = str2.replace(\"-\",\" \")\n    return str3\n",
        "test": "assert     capital_words_spaces(\"This is an example.\"),     \"capital_words_spaces error\" ",
        "num_ids": 7439,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # All sorts are based on ASCII values, so we'll just need to sort the values\n    nums_str.sort(key = str)\n    return nums_str\n",
        "test": "assert     sort_numeric_strings([]) == [], \"Empty list is not allowed\"",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    tup_list = test_tup\n    test_list.extend(tup_list)\n    return test_list\n",
        "test": "assert     add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1473,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) - 1:\n        if arr[i] < arr[i+1]:\n            return False\n    return True\n",
        "test": "assert     check_min_heap_helper([], 0) == True",
        "num_ids": 3130,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2 or n == 3:\n        return 2\n    else:\n        return int(n**.5)\n",
        "test": "assert     jacobsthal_num(0) == 1",
        "num_ids": 6652,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return test_list\n",
        "test": "assert     min_k([1, 2, 3, 1], 5) == [1, 2, 3]",
        "num_ids": 3354,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    s1 = set(l1)\n    s2 = set(l2)\n    s3 = set(l3)\n    return list(s1 & s2 & s3)\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 2844,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # --- your code here ---\n    lst = numbers[:]\n    lst.sort()\n    return lst[1]\n",
        "test": "assert second_smallest([2,2,3,3]) == 2, \"Test 2 failed.\"",
        "num_ids": 3604,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # pattern = re.compile('a')\n    # match = pattern.match(text)\n    # print(match)\n    # return match\n    # if match:\n    #     return True\n    # else:\n    #     return False\n    return True\ndef text_match_zero_one_regex(text):\n    '''\n    Write a function that matches a string that has a zero followed by a one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # pattern = re.compile(r'\\b0\\b')\n    # match = pattern.match(text)\n    # print(match)\n    # return match\n    # if match:\n    #     return True\n    # else:\n    #     return False\n    return True\ndef text_match_zero_one_regex_re(text):\n    '''\n    Write a function that matches a string that has a zero followed by a one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # pattern = re.compile(r'\\b0\\b')\n    # match = pattern.match(text)\n    # print(match)\n    # return match\n    # if match:\n    #     return True\n    # else:\n    #     return False\n    return True\ndef text_match_zero_one_regex_re_re(text):\n    '''\n    Write a function that matches a string that has a zero followed by a one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # pattern = re.compile(r'\\b0\\b')\n    # match = pattern.match(text)\n    # print(match)\n    # return match\n    # if match:\n    #     return True\n    # else:\n    #     return False\n    return True\ndef text_match_zero_one_regex_with_re(text):\n    '''\n    Write a function that matches a string that has zero followed by a one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # pattern = re.compile(r'\\b0\\b')\n    # match = pattern.match(text)\n    # print(match)\n    # return match\n    # if match:\n    #     return True\n    # else:\n    #     return False\n    return True\n",
        "test": "assert     text_match_zero_one(\"Eats a sausage\")",
        "num_ids": 3956,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    i = 0\n    while i < len(test_list):\n        j = len(test_list) - 1\n        while j >= i:\n            if test_list[j]!= test_list[i]:\n                break\n            j -= 1\n        if j!= i:\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert     count_reverse_pairs([]) == 0",
        "num_ids": 1786,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i == j:\n                dict[list1[i]] = dict.get(list1[i], 0) + 1\n    return dict\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 3690,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return str(num).isdigit()\n",
        "test": "assert     is_decimal(\"3.14\") == False",
        "num_ids": 1275,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        if arr[0] == arr[-1]:\n            return False\n        else:\n            return True\n",
        "test": "assert     unique_Element([5,1,1,2,2,3,3,4,5]) == False",
        "num_ids": 2984,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_monthnumber_number(2) == True",
        "num_ids": 1986,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if arr[n-1] < arr[n-2]:\n        return find_min_diff(arr,n-1)\n    elif arr[n-1] > arr[n-2]:\n        return find_min_diff(arr,n-2)\n    else:\n        return arr[n-2]\n",
        "test": "assert     find_min_diff([0],0) == 0",
        "num_ids": 1462,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    import math\n    return math.ceil(len(str)/2)\n",
        "test": "assert     number_ctr('1') == 1",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 765,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    if n == 1: \n        return True\n    if n % 2 == 0: \n        return False\n    return (is_polite(n//2) and (n % 2 == 1)) or is_polite(n//2 + 1) \n    \n",
        "test": "assert     is_polite(1) == True",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    def get_pairs(s):\n        '''\n        A helper function to find all pairs of consecutive items in a given list.\n        '''\n        l1.sort()\n        n = len(l1)\n        return [(l1[i], l1[i+1]) for i in range(n-1)]\n    l2 = get_pairs(l1)\n    return l2\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 1800,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    counter = 0\n    for i in arr:\n        if (sum - i) in arr:\n            counter = counter + 1\n    return counter\n",
        "test": "assert     get_pairs_count([], 0) == 0, 'incorrect'",
        "num_ids": 1321,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    new_list = []\n    \n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            new_list.append(li1[i])\n    \n    return new_list\n",
        "test": "assert     Diff([1,2,3],[2,3,4])",
        "num_ids": 1423,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    n = n-1\n    while n >= 0 :\n        sum = sum + n * (n-1) // 2\n        n = n - 1\n    return sum\ndef is_odd(n):\n    if n % 2!= 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     odd_num_sum(2) == 0",
        "num_ids": 2965,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    index = 0\n    for idx in range(len(exp)):\n        if exp[idx] == '(':\n            stack.append(exp[index])\n            index += 1\n        elif exp[idx] == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return True if len(stack) == 0 else False\n",
        "test": "assert     check_expression('2+3*(4+5)'), 'expression is not balanced'",
        "num_ids": 3649,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_list = list(test_str.lower())\n    for i in range(len(word_list)):\n        for j in range(i + 1, len(word_list)):\n            if len(word_list[i]) + len(word_list[j]) == K:\n                word_list[i] = ''\n                word_list[j] = ''\n    return \"\".join(word_list)\n",
        "test": "assert     remove_length('kitten', 6) == 'kitten'",
        "num_ids": 3162,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.replace(\"[\",\"(\").replace(\"]\",\")\").replace(\"{\",\"{\").replace(\"}\",\"}\").replace(\" \",\"\")\n    matches = re.findall(pattern,text)\n    if len(matches)>0:\n        return(matches[0])\n    else:\n        return(None)\n",
        "test": "assert     occurance_substring('abcd', 'abcde') == None",
        "num_ids": 7092,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            return False\n    return True\n",
        "test": "assert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False",
        "num_ids": 2821,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.lower() in \"aeiou\":\n            count += 1\n    return count\n",
        "test": "assert     count_vowels(\"abbcc\") == 1, \"count_vowels' function works\"",
        "num_ids": 1225,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if arr == []: \n        return 0\n    total = 0\n    # iterate through list \n    for i in arr: \n        # set element to 1 \n        total += i \n        # check if element is repeated \n        if arr.count(i) > 1: \n            return 0\n    return total\n",
        "test": "assert     find_sum([]) == 0",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(list1, lambda x: x[0]!= x[-1])\n    new_list = [list(list1)]\n    for sublist in grouped:\n        if sublist[-1] in new_list[-1]:\n            new_list[-1].append(sublist[-1])\n            new_list.append(list())\n        else:\n            new_list[-1].append(sublist[-1])\n            new_list.append(list())\n    return new_list\n",
        "test": "assert     pack_consecutive_duplicates([1,2,3,3,3,4,4,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7",
        "num_ids": 13391,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #Remove duplicates\n    list1 = list(set(list1))\n    #Loop through lists\n    for i in range(0,len(list1)):\n        list1[i] = tuple(list1[i])\n    #Loop through the lists\n    for k in range(0,len(list1)):\n        list1[k] = list(list1[k])\n    #Return the dictionary\n    return dict(list1)\n",
        "test": "assert     unique_sublists([]) == {}, 'The test returns an error'",
        "num_ids": 1195,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuple_list = []\n    print(test_list)\n    for i in test_list:\n        print(i)\n        if i.count(i[0]) == len(i):\n            for j in combinations(i,len(i)):\n                tuple_list.append(j)\n    print(tuple_list)\n    return tuple_list\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 8298,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            count += 1\n    return count\ndef main() :\n    '''\n    Test\n    '''\n    #Test case\n    print(\"The count of divisors is : \",count_divisors(8))\n    #Test case\n    print(\"The count of divisors is : \",count_divisors(12345))\n",
        "test": "assert     count_divisors(0) == 0",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n%2 == 1:\n        return arr[n//2] + arr[n//2 - 1]\n    else:\n        return sum(arr[:n//2]) + sum(arr[n//2+1:])\n",
        "test": "assert     odd_length_sum([]) == 0, '1'",
        "num_ids": 3476,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # r = float(r)\n    # g = float(g)\n    # b = float(b)\n    #  h = float((r+g+b)/3)\n    #  s = float(1 - abs((h-255)/(255-0)))\n    #  v = float(s)\n    #  return hsv(h,s,v)\n    #   h = 0.8*r + 0.2*g + 0.1*b\n    #   s = max(s,0)\n    #   v = max(v,0)\n    #   h = min(h,1)\n    #   s = min(s,1)\n    #   v = min(v,1)\n    #   r = max(r,0)\n    #   g = max(g,0)\n    #   b = max(b,0)\n    #   h = max(h,0)\n    #   s = max(s,0)\n    #   v = max(v,0)\n    #   return hsv(h,s,v)\n    return (r,g,b)\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0,0,0)",
        "num_ids": 2219,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i%2 == 0:\n            product = product*i\n        else:\n            product = product*i\n    return product",
        "test": "assert     mul_even_odd([1, 1, 1, 1, 1, 1]) == 1, \"mul_even_odd should return 1\"",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not test_str:\n        return []\n    else:\n        return tuple(map(int, test_str))\n",
        "test": "assert     tuple_str_int(('1', '2', '3')) == (1, 2, 3)",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "test": "assert     right_insertion(a=[1,2,3,4,5,6], x=0) == 0, \"result should be 0\"",
        "num_ids": 1483,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if len(text) == 0:\n        return False\n    \n    \n    if text[0].isdigit():\n        return text_match_three(text[1:]) or text_match_three(text[1:]) or text_match_three(text[1:])\n    else:\n        return text[0] == 'b' and text[1] == 'a' and text[2] == 'b'\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'c'.\n    '''\n    if len(text) == 0:\n        return False\n    \n    if text[0].isdigit():\n        return text_match_four(text[1:]) or text_match_four(text[1:]) or text_match_four(text[1:])\n    else:\n        return text[0] == 'c' and text[1] == 'a' and text[2] == 'c' and text[3] == 'b'\n",
        "test": "assert     text_match_three('This is text. ') == 0",
        "num_ids": 3156,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n",
        "test": "assert         new_tuple(['a', 'b'], 'ab') == ('a', 'b')",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in nums:\n        if i % 2 == 0:\n            return True\n    return False\n",
        "test": "assert     even_position([2,4,6])",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 26,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(None, test_tup))\n",
        "test": "assert     remove_nested(('a', 'b', 'c', 'd')) == ('a', 'b', 'c', 'd')",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_len = len(input_list)\n    count = 0\n    for i in input_list:\n        count += 1\n    return count\n",
        "test": "assert     count_list([]) == 0",
        "num_ids": 1495,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        return 0\n    if x==arr[n-1]:\n        return n-1\n    if x>arr[n-1]:\n        return 0\n    if arr[0]<x<arr[n-1]:\n        return n-1\n    if arr[0]>x>arr[n-1]:\n        return 0\n    mid = int(n/2)\n    if arr[mid]<x:\n        return n-1\n    if arr[mid]>x:\n        return mid\n    if arr[0]<x<arr[mid]:\n        return 0\n    if arr[mid]>x>arr[0]:\n        return mid\n    if arr[mid]<x<arr[n-1]:\n        return mid\n    if arr[mid]>x>arr[n-1]:\n        return mid\n    if arr[0]>x:\n        return 0\n    if arr[mid]>x:\n        return mid\n    if arr[n-1]<x<arr[0]:\n        return 0\n    if arr[n-1]>x<arr[mid]:\n        return mid\n    if arr[n-1]<x>arr[0]:\n        return 0\n    if arr[n-1]<x<arr[mid]:\n        return mid\n    if arr[0]>x:\n        return mid\n    if arr[mid]>x:\n        return mid\n    if arr[mid]<x:\n        return 0\n    return mid\n",
        "test": "assert     last([1,2,3,4,5],2) == 4",
        "num_ids": 1280,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search('a[^b]*b[^b]*b', text)\n    if result:\n        return result.group(0)\n    return text\n",
        "test": "assert     text_starta_endb('AaabbBbCc')!= 'AaabbBbCc'",
        "num_ids": 11141,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total=0\n    for item in dict:\n        total+=dict[item]\n    return total\n",
        "test": "assert     return_sum({\"one\": 1, \"two\": 2, \"three\": 3}) == 6",
        "num_ids": 1070,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if(n <= 1):\n        return n\n    else:\n        if n % 2 == 0:\n            return n + sum_odd(n-1)\n        else:\n            return n - sum_odd(n-1)\n    \nprint(sum_odd(5))",
        "test": "assert     sum_odd(1) == 1",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total = total + i\n    return total\n",
        "test": "assert     _sum([]) == 0, '_sum'",
        "num_ids": 3350,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d=d%8\n    if d==7:\n        d=0\n    if d==6:\n        d=1\n    if d==5:\n        d=2\n    if d==4:\n        d=3\n    if d==3:\n        d=4\n    if d==2:\n        d=5\n    if d==1:\n        d=6\n    print(d)\n    print(n)\n    print(d)\n    print(n.bit_length())\n    return(n)\n",
        "test": "assert     left_rotate(0,7) == 0",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\n",
        "test": "assert     (remove_all_spaces(\"\") == \"\")",
        "num_ids": 2797,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x*y == z)\n",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 3403,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        \n        while arr[i]!= arr[n-1-i]:\n            if arr[i] > arr[n-1-i]:\n                arr[n-1-i],arr[i] = arr[i],arr[n-1-i]\n            else:\n                break\n            count+=1\n    return count\n",
        "test": "assert     count_rotation([]) == 0, 'count_rotation is not correct'",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == int(n)) :\n        return True\n    else :\n        return False\n",
        "test": "assert         is_perfect_square(0) == True, \"is_perfect_square function is correct\"",
        "num_ids": 3059,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)): \n        if arr[i] % 2 == 0:\n            return True\n    return False\n",
        "test": "assert     is_product_even([1, 2, 3, 4]) == True",
        "num_ids": 948,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for item in lists:\n        for val in item:\n            if val > 0:\n                max_sum.append(val)\n    return max_sum\n",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 1556,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_upper = 0\n    if test_str == \"\":\n        return 0\n    else:\n        for i in range(len(test_str)):\n            if test_str[i].isupper():\n                if max_upper < len(test_str[i]):\n                    max_upper = len(test_str[i])\n        return max_upper\n",
        "test": "assert     max_run_uppercase(\"Shah\"), \"should be #\"",
        "num_ids": 1581,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[-1]\n",
        "test": "assert     first_odd([]) == None, \"Error - First element of the list should be empty.\"",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 808,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) % K!= 0:\n        print('There are wrong number of items in the tuple.\\n')\n    else:\n        if len(test_tup) > K:\n            return True\n    return False\n",
        "test": "assert check_K([1,2,3,4,5,6], 4) == False",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return True\n    elif test_tup1[0] > test_tup2[0]:\n        return False\n    else:\n        return True\n    \n    \ndef check_equal_nums(test_tup1, test_tup2):\n    '''\n    Write a function to check if all the elements of second tuple are equal to the corresponding element in the first tuple.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return True\n    elif test_tup1[0]!= test_tup2[0]:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_smaller([(1, 2), (1, 4), (1, 5)], [(1, 2), (1, 4), (1, 5)]) == True",
        "num_ids": 1601,
        "indeed": false
    }
]